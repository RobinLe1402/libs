/*
This file is created automatically from UnicodeData.txt
*/


#define LIBRARY_EXPORTS

#include <rl/dll/UnicodeData.hpp>
#include <string.h> // strcpy_s
#include <stdint.h>


namespace rl
{
	namespace UnicodeDataDLL
	{
		NameLen_t GetNameLen(UChar_t ch)
		{
			switch (ch)
			{
			case 0x0:
				return 0x5;
			case 0x1:
				return 0x11;
			case 0x2:
				return 0xE;
			case 0x3:
				return 0xC;
			case 0x4:
				return 0x14;
			case 0x5:
				return 0x8;
			case 0x6:
				return 0xC;
			case 0x7:
				return 0x5;
			case 0x8:
				return 0xA;
			case 0x9:
				return 0x15;
			case 0xA:
				return 0xF;
			case 0xB:
				return 0x10;
			case 0xC:
				return 0xF;
			case 0xD:
				return 0x15;
			case 0xE:
				return 0xA;
			case 0xF:
				return 0x9;
			case 0x10:
				return 0x11;
			case 0x11:
				return 0x13;
			case 0x12:
				return 0x13;
			case 0x13:
				return 0x15;
			case 0x14:
				return 0x14;
			case 0x15:
				return 0x15;
			case 0x16:
				return 0x11;
			case 0x17:
				return 0x1A;
			case 0x18:
				return 0x7;
			case 0x19:
				return 0xE;
			case 0x1A:
				return 0xB;
			case 0x1B:
				return 0x7;
			case 0x1C:
				return 0x1B;
			case 0x1D:
				return 0x1C;
			case 0x1E:
				return 0x1A;
			case 0x1F:
				return 0x1A;
			case 0x20:
				return 0x6;
			case 0x21:
				return 0x11;
			case 0x22:
				return 0xF;
			case 0x23:
				return 0xC;
			case 0x24:
				return 0xC;
			case 0x25:
				return 0xD;
			case 0x26:
				return 0xA;
			case 0x27:
				return 0xB;
			case 0x28:
				return 0x11;
			case 0x29:
				return 0x12;
			case 0x2A:
				return 0x9;
			case 0x2B:
				return 0xA;
			case 0x2C:
				return 0x6;
			case 0x2D:
				return 0xD;
			case 0x2E:
				return 0xA;
			case 0x2F:
				return 0x8;
			case 0x30:
				return 0xB;
			case 0x31:
				return 0xA;
			case 0x32:
				return 0xA;
			case 0x33:
				return 0xC;
			case 0x34:
				return 0xB;
			case 0x35:
				return 0xB;
			case 0x36:
				return 0xA;
			case 0x37:
				return 0xC;
			case 0x38:
				return 0xC;
			case 0x39:
				return 0xB;
			case 0x3A:
				return 0x6;
			case 0x3B:
				return 0xA;
			case 0x3C:
				return 0xF;
			case 0x3D:
				return 0xC;
			case 0x3E:
				return 0x12;
			case 0x3F:
				return 0xE;
			case 0x40:
				return 0xE;
			case 0x41:
				return 0x17;
			case 0x42:
				return 0x17;
			case 0x43:
				return 0x17;
			case 0x44:
				return 0x17;
			case 0x45:
				return 0x17;
			case 0x46:
				return 0x17;
			case 0x47:
				return 0x17;
			case 0x48:
				return 0x17;
			case 0x49:
				return 0x17;
			case 0x4A:
				return 0x17;
			case 0x4B:
				return 0x17;
			case 0x4C:
				return 0x17;
			case 0x4D:
				return 0x17;
			case 0x4E:
				return 0x17;
			case 0x4F:
				return 0x17;
			case 0x50:
				return 0x17;
			case 0x51:
				return 0x17;
			case 0x52:
				return 0x17;
			case 0x53:
				return 0x17;
			case 0x54:
				return 0x17;
			case 0x55:
				return 0x17;
			case 0x56:
				return 0x17;
			case 0x57:
				return 0x17;
			case 0x58:
				return 0x17;
			case 0x59:
				return 0x17;
			case 0x5A:
				return 0x17;
			case 0x5B:
				return 0x14;
			case 0x5C:
				return 0x10;
			case 0x5D:
				return 0x15;
			case 0x5E:
				return 0x12;
			case 0x5F:
				return 0x9;
			case 0x60:
				return 0xD;
			case 0x61:
				return 0x15;
			case 0x62:
				return 0x15;
			case 0x63:
				return 0x15;
			case 0x64:
				return 0x15;
			case 0x65:
				return 0x15;
			case 0x66:
				return 0x15;
			case 0x67:
				return 0x15;
			case 0x68:
				return 0x15;
			case 0x69:
				return 0x15;
			case 0x6A:
				return 0x15;
			case 0x6B:
				return 0x15;
			case 0x6C:
				return 0x15;
			case 0x6D:
				return 0x15;
			case 0x6E:
				return 0x15;
			case 0x6F:
				return 0x15;
			case 0x70:
				return 0x15;
			case 0x71:
				return 0x15;
			case 0x72:
				return 0x15;
			case 0x73:
				return 0x15;
			case 0x74:
				return 0x15;
			case 0x75:
				return 0x15;
			case 0x76:
				return 0x15;
			case 0x77:
				return 0x15;
			case 0x78:
				return 0x15;
			case 0x79:
				return 0x15;
			case 0x7A:
				return 0x15;
			case 0x7B:
				return 0x13;
			case 0x7C:
				return 0xE;
			case 0x7D:
				return 0x14;
			case 0x7E:
				return 0x6;
			case 0x7F:
				return 0x7;
			case 0x80:
				return 0xA;
			case 0x81:
				return 0xA;
			case 0x82:
				return 0x15;
			case 0x83:
				return 0xE;
			case 0x84:
				return 0xA;
			case 0x85:
				return 0x10;
			case 0x86:
				return 0x17;
			case 0x87:
				return 0x15;
			case 0x88:
				return 0x19;
			case 0x89:
				return 0x28;
			case 0x8A:
				return 0x14;
			case 0x8B:
				return 0x15;
			case 0x8C:
				return 0x16;
			case 0x8D:
				return 0x12;
			case 0x8E:
				return 0x11;
			case 0x8F:
				return 0x13;
			case 0x90:
				return 0x16;
			case 0x91:
				return 0x10;
			case 0x92:
				return 0x10;
			case 0x93:
				return 0x13;
			case 0x94:
				return 0x11;
			case 0x95:
				return 0x10;
			case 0x96:
				return 0x16;
			case 0x97:
				return 0x14;
			case 0x98:
				return 0x10;
			case 0x99:
				return 0xA;
			case 0x9A:
				return 0x1C;
			case 0x9B:
				return 0x1C;
			case 0x9C:
				return 0x12;
			case 0x9D:
				return 0x19;
			case 0x9E:
				return 0x10;
			case 0x9F:
				return 0x1C;
			case 0xA0:
				return 0xF;
			case 0xA1:
				return 0x1A;
			case 0xA2:
				return 0xA;
			case 0xA3:
				return 0xB;
			case 0xA4:
				return 0xE;
			case 0xA5:
				return 0x9;
			case 0xA6:
				return 0xB;
			case 0xA7:
				return 0xD;
			case 0xA8:
				return 0xA;
			case 0xA9:
				return 0xF;
			case 0xAA:
				return 0x1B;
			case 0xAB:
				return 0x2A;
			case 0xAC:
				return 0x9;
			case 0xAD:
				return 0xC;
			case 0xAE:
				return 0x10;
			case 0xAF:
				return 0x7;
			case 0xB0:
				return 0xC;
			case 0xB1:
				return 0x10;
			case 0xB2:
				return 0x10;
			case 0xB3:
				return 0x12;
			case 0xB4:
				return 0xD;
			case 0xB5:
				return 0xB;
			case 0xB6:
				return 0xD;
			case 0xB7:
				return 0xB;
			case 0xB8:
				return 0x8;
			case 0xB9:
				return 0x10;
			case 0xBA:
				return 0x1C;
			case 0xBB:
				return 0x2B;
			case 0xBC:
				return 0x1C;
			case 0xBD:
				return 0x19;
			case 0xBE:
				return 0x1F;
			case 0xBF:
				return 0x17;
			case 0xC0:
				return 0x22;
			case 0xC1:
				return 0x22;
			case 0xC2:
				return 0x27;
			case 0xC3:
				return 0x22;
			case 0xC4:
				return 0x26;
			case 0xC5:
				return 0x27;
			case 0xC6:
				return 0x18;
			case 0xC7:
				return 0x24;
			case 0xC8:
				return 0x22;
			case 0xC9:
				return 0x22;
			case 0xCA:
				return 0x27;
			case 0xCB:
				return 0x26;
			case 0xCC:
				return 0x22;
			case 0xCD:
				return 0x22;
			case 0xCE:
				return 0x27;
			case 0xCF:
				return 0x26;
			case 0xD0:
				return 0x19;
			case 0xD1:
				return 0x22;
			case 0xD2:
				return 0x22;
			case 0xD3:
				return 0x22;
			case 0xD4:
				return 0x27;
			case 0xD5:
				return 0x22;
			case 0xD6:
				return 0x26;
			case 0xD7:
				return 0x14;
			case 0xD8:
				return 0x23;
			case 0xD9:
				return 0x22;
			case 0xDA:
				return 0x22;
			case 0xDB:
				return 0x27;
			case 0xDC:
				return 0x26;
			case 0xDD:
				return 0x22;
			case 0xDE:
				return 0x1B;
			case 0xDF:
				return 0x1B;
			case 0xE0:
				return 0x20;
			case 0xE1:
				return 0x20;
			case 0xE2:
				return 0x25;
			case 0xE3:
				return 0x20;
			case 0xE4:
				return 0x24;
			case 0xE5:
				return 0x25;
			case 0xE6:
				return 0x16;
			case 0xE7:
				return 0x22;
			case 0xE8:
				return 0x20;
			case 0xE9:
				return 0x20;
			case 0xEA:
				return 0x25;
			case 0xEB:
				return 0x24;
			case 0xEC:
				return 0x20;
			case 0xED:
				return 0x20;
			case 0xEE:
				return 0x25;
			case 0xEF:
				return 0x24;
			case 0xF0:
				return 0x17;
			case 0xF1:
				return 0x20;
			case 0xF2:
				return 0x20;
			case 0xF3:
				return 0x20;
			case 0xF4:
				return 0x25;
			case 0xF5:
				return 0x20;
			case 0xF6:
				return 0x24;
			case 0xF7:
				return 0xE;
			case 0xF8:
				return 0x21;
			case 0xF9:
				return 0x20;
			case 0xFA:
				return 0x20;
			case 0xFB:
				return 0x25;
			case 0xFC:
				return 0x24;
			case 0xFD:
				return 0x20;
			case 0xFE:
				return 0x19;
			case 0xFF:
				return 0x24;
			case 0x100:
				return 0x23;
			case 0x101:
				return 0x21;
			case 0x102:
				return 0x22;
			case 0x103:
				return 0x20;
			case 0x104:
				return 0x23;
			case 0x105:
				return 0x21;
			case 0x106:
				return 0x22;
			case 0x107:
				return 0x20;
			case 0x108:
				return 0x27;
			case 0x109:
				return 0x25;
			case 0x10A:
				return 0x26;
			case 0x10B:
				return 0x24;
			case 0x10C:
				return 0x22;
			case 0x10D:
				return 0x20;
			case 0x10E:
				return 0x22;
			case 0x10F:
				return 0x20;
			case 0x110:
				return 0x23;
			case 0x111:
				return 0x21;
			case 0x112:
				return 0x23;
			case 0x113:
				return 0x21;
			case 0x114:
				return 0x22;
			case 0x115:
				return 0x20;
			case 0x116:
				return 0x26;
			case 0x117:
				return 0x24;
			case 0x118:
				return 0x23;
			case 0x119:
				return 0x21;
			case 0x11A:
				return 0x22;
			case 0x11B:
				return 0x20;
			case 0x11C:
				return 0x27;
			case 0x11D:
				return 0x25;
			case 0x11E:
				return 0x22;
			case 0x11F:
				return 0x20;
			case 0x120:
				return 0x26;
			case 0x121:
				return 0x24;
			case 0x122:
				return 0x24;
			case 0x123:
				return 0x22;
			case 0x124:
				return 0x27;
			case 0x125:
				return 0x25;
			case 0x126:
				return 0x23;
			case 0x127:
				return 0x21;
			case 0x128:
				return 0x22;
			case 0x129:
				return 0x20;
			case 0x12A:
				return 0x23;
			case 0x12B:
				return 0x21;
			case 0x12C:
				return 0x22;
			case 0x12D:
				return 0x20;
			case 0x12E:
				return 0x23;
			case 0x12F:
				return 0x21;
			case 0x130:
				return 0x26;
			case 0x131:
				return 0x1D;
			case 0x132:
				return 0x1A;
			case 0x133:
				return 0x18;
			case 0x134:
				return 0x27;
			case 0x135:
				return 0x25;
			case 0x136:
				return 0x24;
			case 0x137:
				return 0x22;
			case 0x138:
				return 0x17;
			case 0x139:
				return 0x22;
			case 0x13A:
				return 0x20;
			case 0x13B:
				return 0x24;
			case 0x13C:
				return 0x22;
			case 0x13D:
				return 0x22;
			case 0x13E:
				return 0x20;
			case 0x13F:
				return 0x27;
			case 0x140:
				return 0x25;
			case 0x141:
				return 0x23;
			case 0x142:
				return 0x21;
			case 0x143:
				return 0x22;
			case 0x144:
				return 0x20;
			case 0x145:
				return 0x24;
			case 0x146:
				return 0x22;
			case 0x147:
				return 0x22;
			case 0x148:
				return 0x20;
			case 0x149:
				return 0x2C;
			case 0x14A:
				return 0x19;
			case 0x14B:
				return 0x17;
			case 0x14C:
				return 0x23;
			case 0x14D:
				return 0x21;
			case 0x14E:
				return 0x22;
			case 0x14F:
				return 0x20;
			case 0x150:
				return 0x29;
			case 0x151:
				return 0x27;
			case 0x152:
				return 0x1A;
			case 0x153:
				return 0x18;
			case 0x154:
				return 0x22;
			case 0x155:
				return 0x20;
			case 0x156:
				return 0x24;
			case 0x157:
				return 0x22;
			case 0x158:
				return 0x22;
			case 0x159:
				return 0x20;
			case 0x15A:
				return 0x22;
			case 0x15B:
				return 0x20;
			case 0x15C:
				return 0x27;
			case 0x15D:
				return 0x25;
			case 0x15E:
				return 0x24;
			case 0x15F:
				return 0x22;
			case 0x160:
				return 0x22;
			case 0x161:
				return 0x20;
			case 0x162:
				return 0x24;
			case 0x163:
				return 0x22;
			case 0x164:
				return 0x22;
			case 0x165:
				return 0x20;
			case 0x166:
				return 0x23;
			case 0x167:
				return 0x21;
			case 0x168:
				return 0x22;
			case 0x169:
				return 0x20;
			case 0x16A:
				return 0x23;
			case 0x16B:
				return 0x21;
			case 0x16C:
				return 0x22;
			case 0x16D:
				return 0x20;
			case 0x16E:
				return 0x27;
			case 0x16F:
				return 0x25;
			case 0x170:
				return 0x29;
			case 0x171:
				return 0x27;
			case 0x172:
				return 0x23;
			case 0x173:
				return 0x21;
			case 0x174:
				return 0x27;
			case 0x175:
				return 0x25;
			case 0x176:
				return 0x27;
			case 0x177:
				return 0x25;
			case 0x178:
				return 0x26;
			case 0x179:
				return 0x22;
			case 0x17A:
				return 0x20;
			case 0x17B:
				return 0x26;
			case 0x17C:
				return 0x24;
			case 0x17D:
				return 0x22;
			case 0x17E:
				return 0x20;
			case 0x17F:
				return 0x1A;
			case 0x180:
				return 0x21;
			case 0x181:
				return 0x21;
			case 0x182:
				return 0x23;
			case 0x183:
				return 0x21;
			case 0x184:
				return 0x1E;
			case 0x185:
				return 0x1C;
			case 0x186:
				return 0x1C;
			case 0x187:
				return 0x21;
			case 0x188:
				return 0x1F;
			case 0x189:
				return 0x1F;
			case 0x18A:
				return 0x21;
			case 0x18B:
				return 0x23;
			case 0x18C:
				return 0x21;
			case 0x18D:
				return 0x20;
			case 0x18E:
				return 0x20;
			case 0x18F:
				return 0x1B;
			case 0x190:
				return 0x1C;
			case 0x191:
				return 0x21;
			case 0x192:
				return 0x1F;
			case 0x193:
				return 0x21;
			case 0x194:
				return 0x1B;
			case 0x195:
				return 0x16;
			case 0x196:
				return 0x1A;
			case 0x197:
				return 0x23;
			case 0x198:
				return 0x21;
			case 0x199:
				return 0x1F;
			case 0x19A:
				return 0x1E;
			case 0x19B:
				return 0x26;
			case 0x19C:
				return 0x1E;
			case 0x19D:
				return 0x26;
			case 0x19E:
				return 0x29;
			case 0x19F:
				return 0x29;
			case 0x1A0:
				return 0x21;
			case 0x1A1:
				return 0x1F;
			case 0x1A2:
				return 0x18;
			case 0x1A3:
				return 0x16;
			case 0x1A4:
				return 0x21;
			case 0x1A5:
				return 0x1F;
			case 0x1A6:
				return 0x10;
			case 0x1A7:
				return 0x1E;
			case 0x1A8:
				return 0x1C;
			case 0x1A9:
				return 0x19;
			case 0x1AA:
				return 0x1F;
			case 0x1AB:
				return 0x27;
			case 0x1AC:
				return 0x21;
			case 0x1AD:
				return 0x1F;
			case 0x1AE:
				return 0x2B;
			case 0x1AF:
				return 0x21;
			case 0x1B0:
				return 0x1F;
			case 0x1B1:
				return 0x1D;
			case 0x1B2:
				return 0x21;
			case 0x1B3:
				return 0x21;
			case 0x1B4:
				return 0x1F;
			case 0x1B5:
				return 0x23;
			case 0x1B6:
				return 0x21;
			case 0x1B7:
				return 0x19;
			case 0x1B8:
				return 0x22;
			case 0x1B9:
				return 0x20;
			case 0x1BA:
				return 0x21;
			case 0x1BB:
				return 0x1D;
			case 0x1BC:
				return 0x1F;
			case 0x1BD:
				return 0x1D;
			case 0x1BE:
				return 0x2F;
			case 0x1BF:
				return 0x12;
			case 0x1C0:
				return 0x1A;
			case 0x1C1:
				return 0x1B;
			case 0x1C2:
				return 0x1C;
			case 0x1C3:
				return 0x1D;
			case 0x1C4:
				return 0x23;
			case 0x1C5:
				return 0x36;
			case 0x1C6:
				return 0x21;
			case 0x1C7:
				return 0x18;
			case 0x1C8:
				return 0x2B;
			case 0x1C9:
				return 0x16;
			case 0x1CA:
				return 0x18;
			case 0x1CB:
				return 0x2B;
			case 0x1CC:
				return 0x16;
			case 0x1CD:
				return 0x22;
			case 0x1CE:
				return 0x20;
			case 0x1CF:
				return 0x22;
			case 0x1D0:
				return 0x20;
			case 0x1D1:
				return 0x22;
			case 0x1D2:
				return 0x20;
			case 0x1D3:
				return 0x22;
			case 0x1D4:
				return 0x20;
			case 0x1D5:
				return 0x31;
			case 0x1D6:
				return 0x2F;
			case 0x1D7:
				return 0x30;
			case 0x1D8:
				return 0x2E;
			case 0x1D9:
				return 0x30;
			case 0x1DA:
				return 0x2E;
			case 0x1DB:
				return 0x30;
			case 0x1DC:
				return 0x2E;
			case 0x1DD:
				return 0x1C;
			case 0x1DE:
				return 0x31;
			case 0x1DF:
				return 0x2F;
			case 0x1E0:
				return 0x31;
			case 0x1E1:
				return 0x2F;
			case 0x1E2:
				return 0x24;
			case 0x1E3:
				return 0x22;
			case 0x1E4:
				return 0x23;
			case 0x1E5:
				return 0x21;
			case 0x1E6:
				return 0x22;
			case 0x1E7:
				return 0x20;
			case 0x1E8:
				return 0x22;
			case 0x1E9:
				return 0x20;
			case 0x1EA:
				return 0x23;
			case 0x1EB:
				return 0x21;
			case 0x1EC:
				return 0x2E;
			case 0x1ED:
				return 0x2C;
			case 0x1EE:
				return 0x24;
			case 0x1EF:
				return 0x22;
			case 0x1F0:
				return 0x20;
			case 0x1F1:
				return 0x18;
			case 0x1F2:
				return 0x2B;
			case 0x1F3:
				return 0x16;
			case 0x1F4:
				return 0x22;
			case 0x1F5:
				return 0x20;
			case 0x1F6:
				return 0x1B;
			case 0x1F7:
				return 0x1A;
			case 0x1F8:
				return 0x22;
			case 0x1F9:
				return 0x20;
			case 0x1FA:
				return 0x31;
			case 0x1FB:
				return 0x2F;
			case 0x1FC:
				return 0x23;
			case 0x1FD:
				return 0x21;
			case 0x1FE:
				return 0x2D;
			case 0x1FF:
				return 0x2B;
			case 0x200:
				return 0x29;
			case 0x201:
				return 0x27;
			case 0x202:
				return 0x2B;
			case 0x203:
				return 0x29;
			case 0x204:
				return 0x29;
			case 0x205:
				return 0x27;
			case 0x206:
				return 0x2B;
			case 0x207:
				return 0x29;
			case 0x208:
				return 0x29;
			case 0x209:
				return 0x27;
			case 0x20A:
				return 0x2B;
			case 0x20B:
				return 0x29;
			case 0x20C:
				return 0x29;
			case 0x20D:
				return 0x27;
			case 0x20E:
				return 0x2B;
			case 0x20F:
				return 0x29;
			case 0x210:
				return 0x29;
			case 0x211:
				return 0x27;
			case 0x212:
				return 0x2B;
			case 0x213:
				return 0x29;
			case 0x214:
				return 0x29;
			case 0x215:
				return 0x27;
			case 0x216:
				return 0x2B;
			case 0x217:
				return 0x29;
			case 0x218:
				return 0x28;
			case 0x219:
				return 0x26;
			case 0x21A:
				return 0x28;
			case 0x21B:
				return 0x26;
			case 0x21C:
				return 0x1A;
			case 0x21D:
				return 0x18;
			case 0x21E:
				return 0x22;
			case 0x21F:
				return 0x20;
			case 0x220:
				return 0x2B;
			case 0x221:
				return 0x1F;
			case 0x222:
				return 0x18;
			case 0x223:
				return 0x16;
			case 0x224:
				return 0x21;
			case 0x225:
				return 0x1F;
			case 0x226:
				return 0x26;
			case 0x227:
				return 0x24;
			case 0x228:
				return 0x24;
			case 0x229:
				return 0x22;
			case 0x22A:
				return 0x31;
			case 0x22B:
				return 0x2F;
			case 0x22C:
				return 0x2D;
			case 0x22D:
				return 0x2B;
			case 0x22E:
				return 0x26;
			case 0x22F:
				return 0x24;
			case 0x230:
				return 0x31;
			case 0x231:
				return 0x2F;
			case 0x232:
				return 0x23;
			case 0x233:
				return 0x21;
			case 0x234:
				return 0x1F;
			case 0x235:
				return 0x1F;
			case 0x236:
				return 0x1F;
			case 0x237:
				return 0x1D;
			case 0x238:
				return 0x1E;
			case 0x239:
				return 0x1E;
			case 0x23A:
				return 0x23;
			case 0x23B:
				return 0x23;
			case 0x23C:
				return 0x21;
			case 0x23D:
				return 0x20;
			case 0x23E:
				return 0x2C;
			case 0x23F:
				return 0x25;
			case 0x240:
				return 0x25;
			case 0x241:
				return 0x22;
			case 0x242:
				return 0x20;
			case 0x243:
				return 0x23;
			case 0x244:
				return 0x1B;
			case 0x245:
				return 0x1E;
			case 0x246:
				return 0x23;
			case 0x247:
				return 0x21;
			case 0x248:
				return 0x23;
			case 0x249:
				return 0x21;
			case 0x24A:
				return 0x2C;
			case 0x24B:
				return 0x24;
			case 0x24C:
				return 0x23;
			case 0x24D:
				return 0x21;
			case 0x24E:
				return 0x23;
			case 0x24F:
				return 0x21;
			case 0x250:
				return 0x1C;
			case 0x251:
				return 0x19;
			case 0x252:
				return 0x20;
			case 0x253:
				return 0x1F;
			case 0x254:
				return 0x1A;
			case 0x255:
				return 0x1F;
			case 0x256:
				return 0x1F;
			case 0x257:
				return 0x1F;
			case 0x258:
				return 0x1E;
			case 0x259:
				return 0x19;
			case 0x25A:
				return 0x23;
			case 0x25B:
				return 0x1A;
			case 0x25C:
				return 0x23;
			case 0x25D:
				return 0x2D;
			case 0x25E:
				return 0x2A;
			case 0x25F:
				return 0x29;
			case 0x260:
				return 0x1F;
			case 0x261:
				return 0x1C;
			case 0x262:
				return 0x1D;
			case 0x263:
				return 0x19;
			case 0x264:
				return 0x1D;
			case 0x265:
				return 0x1C;
			case 0x266:
				return 0x1F;
			case 0x267:
				return 0x22;
			case 0x268:
				return 0x21;
			case 0x269:
				return 0x18;
			case 0x26A:
				return 0x1D;
			case 0x26B:
				return 0x27;
			case 0x26C:
				return 0x1F;
			case 0x26D:
				return 0x29;
			case 0x26E:
				return 0x18;
			case 0x26F:
				return 0x1C;
			case 0x270:
				return 0x2A;
			case 0x271:
				return 0x1F;
			case 0x272:
				return 0x24;
			case 0x273:
				return 0x29;
			case 0x274:
				return 0x1D;
			case 0x275:
				return 0x1C;
			case 0x276:
				return 0x1E;
			case 0x277:
				return 0x20;
			case 0x278:
				return 0x17;
			case 0x279:
				return 0x1C;
			case 0x27A:
				return 0x2A;
			case 0x27B:
				return 0x26;
			case 0x27C:
				return 0x23;
			case 0x27D:
				return 0x1F;
			case 0x27E:
				return 0x23;
			case 0x27F:
				return 0x2C;
			case 0x280:
				return 0x1D;
			case 0x281:
				return 0x26;
			case 0x282:
				return 0x1F;
			case 0x283:
				return 0x17;
			case 0x284:
				return 0x32;
			case 0x285:
				return 0x26;
			case 0x286:
				return 0x21;
			case 0x287:
				return 0x1C;
			case 0x288:
				return 0x29;
			case 0x289:
				return 0x19;
			case 0x28A:
				return 0x1B;
			case 0x28B:
				return 0x1F;
			case 0x28C:
				return 0x1C;
			case 0x28D:
				return 0x1C;
			case 0x28E:
				return 0x1C;
			case 0x28F:
				return 0x1D;
			case 0x290:
				return 0x29;
			case 0x291:
				return 0x1F;
			case 0x292:
				return 0x17;
			case 0x293:
				return 0x21;
			case 0x294:
				return 0x1A;
			case 0x295:
				return 0x29;
			case 0x296:
				return 0x23;
			case 0x297:
				return 0x19;
			case 0x298:
				return 0x1C;
			case 0x299:
				return 0x1D;
			case 0x29A:
				return 0x21;
			case 0x29B:
				return 0x27;
			case 0x29C:
				return 0x1D;
			case 0x29D:
				return 0x27;
			case 0x29E:
				return 0x1C;
			case 0x29F:
				return 0x1D;
			case 0x2A0:
				return 0x1F;
			case 0x2A1:
				return 0x26;
			case 0x2A2:
				return 0x2F;
			case 0x2A3:
				return 0x1E;
			case 0x2A4:
				return 0x20;
			case 0x2A5:
				return 0x28;
			case 0x2A6:
				return 0x1E;
			case 0x2A7:
				return 0x20;
			case 0x2A8:
				return 0x28;
			case 0x2A9:
				return 0x20;
			case 0x2AA:
				return 0x1E;
			case 0x2AB:
				return 0x1E;
			case 0x2AC:
				return 0x21;
			case 0x2AD:
				return 0x21;
			case 0x2AE:
				return 0x2A;
			case 0x2AF:
				return 0x33;
			case 0x2B0:
				return 0x18;
			case 0x2B1:
				return 0x22;
			case 0x2B2:
				return 0x18;
			case 0x2B3:
				return 0x18;
			case 0x2B4:
				return 0x1F;
			case 0x2B5:
				return 0x29;
			case 0x2B6:
				return 0x29;
			case 0x2B7:
				return 0x18;
			case 0x2B8:
				return 0x18;
			case 0x2B9:
				return 0x16;
			case 0x2BA:
				return 0x1D;
			case 0x2BB:
				return 0x1D;
			case 0x2BC:
				return 0x1B;
			case 0x2BD:
				return 0x1F;
			case 0x2BE:
				return 0x20;
			case 0x2BF:
				return 0x1F;
			case 0x2C0:
				return 0x1D;
			case 0x2C1:
				return 0x26;
			case 0x2C2:
				return 0x1F;
			case 0x2C3:
				return 0x20;
			case 0x2C4:
				return 0x1D;
			case 0x2C5:
				return 0x1F;
			case 0x2C6:
				return 0x22;
			case 0x2C7:
				return 0x6;
			case 0x2C8:
				return 0x1E;
			case 0x2C9:
				return 0x17;
			case 0x2CA:
				return 0x1D;
			case 0x2CB:
				return 0x1D;
			case 0x2CC:
				return 0x22;
			case 0x2CD:
				return 0x1B;
			case 0x2CE:
				return 0x21;
			case 0x2CF:
				return 0x21;
			case 0x2D0:
				return 0x21;
			case 0x2D1:
				return 0x26;
			case 0x2D2:
				return 0x28;
			case 0x2D3:
				return 0x27;
			case 0x2D4:
				return 0x18;
			case 0x2D5:
				return 0x1A;
			case 0x2D6:
				return 0x1A;
			case 0x2D7:
				return 0x1B;
			case 0x2D8:
				return 0x6;
			case 0x2D9:
				return 0xA;
			case 0x2DA:
				return 0xB;
			case 0x2DB:
				return 0x7;
			case 0x2DC:
				return 0xC;
			case 0x2DD:
				return 0x14;
			case 0x2DE:
				return 0x1C;
			case 0x2DF:
				return 0x1D;
			case 0x2E0:
				return 0x1C;
			case 0x2E1:
				return 0x18;
			case 0x2E2:
				return 0x18;
			case 0x2E3:
				return 0x18;
			case 0x2E4:
				return 0x2C;
			case 0x2E5:
				return 0x24;
			case 0x2E6:
				return 0x1E;
			case 0x2E7:
				return 0x1D;
			case 0x2E8:
				return 0x1D;
			case 0x2E9:
				return 0x23;
			case 0x2EA:
				return 0x28;
			case 0x2EB:
				return 0x29;
			case 0x2EC:
				return 0x18;
			case 0x2ED:
				return 0x1C;
			case 0x2EE:
				return 0x22;
			case 0x2EF:
				return 0x23;
			case 0x2F0:
				return 0x21;
			case 0x2F1:
				return 0x23;
			case 0x2F2:
				return 0x24;
			case 0x2F3:
				return 0x19;
			case 0x2F4:
				return 0x24;
			case 0x2F5:
				return 0x2B;
			case 0x2F6:
				return 0x2B;
			case 0x2F7:
				return 0x1A;
			case 0x2F8:
				return 0x1D;
			case 0x2F9:
				return 0x20;
			case 0x2FA:
				return 0x1E;
			case 0x2FB:
				return 0x1F;
			case 0x2FC:
				return 0x1D;
			case 0x2FD:
				return 0x16;
			case 0x2FE:
				return 0x1B;
			case 0x2FF:
				return 0x1F;
			case 0x300:
				return 0x17;
			case 0x301:
				return 0x17;
			case 0x302:
				return 0x1C;
			case 0x303:
				return 0x10;
			case 0x304:
				return 0x11;
			case 0x305:
				return 0x13;
			case 0x306:
				return 0x10;
			case 0x307:
				return 0x14;
			case 0x308:
				return 0x14;
			case 0x309:
				return 0x15;
			case 0x30A:
				return 0x15;
			case 0x30B:
				return 0x1E;
			case 0x30C:
				return 0x10;
			case 0x30D:
				return 0x1E;
			case 0x30E:
				return 0x25;
			case 0x30F:
				return 0x1E;
			case 0x310:
				return 0x16;
			case 0x311:
				return 0x19;
			case 0x312:
				return 0x1D;
			case 0x313:
				return 0x16;
			case 0x314:
				return 0x1F;
			case 0x315:
				return 0x1C;
			case 0x316:
				return 0x1D;
			case 0x317:
				return 0x1D;
			case 0x318:
				return 0x1A;
			case 0x319:
				return 0x1B;
			case 0x31A:
				return 0x1B;
			case 0x31B:
				return 0xF;
			case 0x31C:
				return 0x1F;
			case 0x31D:
				return 0x18;
			case 0x31E:
				return 0x1A;
			case 0x31F:
				return 0x1A;
			case 0x320:
				return 0x1B;
			case 0x321:
				return 0x21;
			case 0x322:
				return 0x1F;
			case 0x323:
				return 0x14;
			case 0x324:
				return 0x1A;
			case 0x325:
				return 0x15;
			case 0x326:
				return 0x16;
			case 0x327:
				return 0x12;
			case 0x328:
				return 0x11;
			case 0x329:
				return 0x1E;
			case 0x32A:
				return 0x17;
			case 0x32B:
				return 0x25;
			case 0x32C:
				return 0x16;
			case 0x32D:
				return 0x22;
			case 0x32E:
				return 0x16;
			case 0x32F:
				return 0x1F;
			case 0x330:
				return 0x16;
			case 0x331:
				return 0x17;
			case 0x332:
				return 0x13;
			case 0x333:
				return 0x1A;
			case 0x334:
				return 0x18;
			case 0x335:
				return 0x1F;
			case 0x336:
				return 0x1E;
			case 0x337:
				return 0x20;
			case 0x338:
				return 0x1F;
			case 0x339:
				return 0x20;
			case 0x33A:
				return 0x20;
			case 0x33B:
				return 0x17;
			case 0x33C:
				return 0x18;
			case 0x33D:
				return 0x12;
			case 0x33E:
				return 0x19;
			case 0x33F:
				return 0x1A;
			case 0x340:
				return 0x1A;
			case 0x341:
				return 0x1A;
			case 0x342:
				return 0x1C;
			case 0x343:
				return 0x18;
			case 0x344:
				return 0x20;
			case 0x345:
				return 0x1E;
			case 0x346:
				return 0x17;
			case 0x347:
				return 0x1C;
			case 0x348:
				return 0x25;
			case 0x349:
				return 0x1B;
			case 0x34A:
				return 0x1A;
			case 0x34B:
				return 0x1B;
			case 0x34C:
				return 0x20;
			case 0x34D:
				return 0x21;
			case 0x34E:
				return 0x1E;
			case 0x34F:
				return 0x1A;
			case 0x350:
				return 0x20;
			case 0x351:
				return 0x1F;
			case 0x352:
				return 0x12;
			case 0x353:
				return 0x12;
			case 0x354:
				return 0x1F;
			case 0x355:
				return 0x20;
			case 0x356:
				return 0x31;
			case 0x357:
				return 0x20;
			case 0x358:
				return 0x1A;
			case 0x359:
				return 0x19;
			case 0x35A:
				return 0x1C;
			case 0x35B:
				return 0x17;
			case 0x35C:
				return 0x1D;
			case 0x35D:
				return 0x17;
			case 0x35E:
				return 0x18;
			case 0x35F:
				return 0x1E;
			case 0x360:
				return 0x17;
			case 0x361:
				return 0x20;
			case 0x362:
				return 0x28;
			case 0x363:
				return 0x1F;
			case 0x364:
				return 0x1F;
			case 0x365:
				return 0x1F;
			case 0x366:
				return 0x1F;
			case 0x367:
				return 0x1F;
			case 0x368:
				return 0x1F;
			case 0x369:
				return 0x1F;
			case 0x36A:
				return 0x1F;
			case 0x36B:
				return 0x1F;
			case 0x36C:
				return 0x1F;
			case 0x36D:
				return 0x1F;
			case 0x36E:
				return 0x1F;
			case 0x36F:
				return 0x1F;
			case 0x370:
				return 0x1A;
			case 0x371:
				return 0x18;
			case 0x372:
				return 0x23;
			case 0x373:
				return 0x21;
			case 0x374:
				return 0x13;
			case 0x375:
				return 0x19;
			case 0x376:
				return 0x28;
			case 0x377:
				return 0x26;
			case 0x37A:
				return 0x14;
			case 0x37B:
				return 0x29;
			case 0x37C:
				return 0x27;
			case 0x37D:
				return 0x30;
			case 0x37E:
				return 0x14;
			case 0x37F:
				return 0x19;
			case 0x384:
				return 0xC;
			case 0x385:
				return 0x16;
			case 0x386:
				return 0x26;
			case 0x387:
				return 0x11;
			case 0x388:
				return 0x28;
			case 0x389:
				return 0x24;
			case 0x38A:
				return 0x25;
			case 0x38C:
				return 0x28;
			case 0x38E:
				return 0x28;
			case 0x38F:
				return 0x26;
			case 0x390:
				return 0x31;
			case 0x391:
				return 0x1B;
			case 0x392:
				return 0x1A;
			case 0x393:
				return 0x1B;
			case 0x394:
				return 0x1B;
			case 0x395:
				return 0x1D;
			case 0x396:
				return 0x1A;
			case 0x397:
				return 0x19;
			case 0x398:
				return 0x1B;
			case 0x399:
				return 0x1A;
			case 0x39A:
				return 0x1B;
			case 0x39B:
				return 0x1B;
			case 0x39C:
				return 0x18;
			case 0x39D:
				return 0x18;
			case 0x39E:
				return 0x18;
			case 0x39F:
				return 0x1D;
			case 0x3A0:
				return 0x18;
			case 0x3A1:
				return 0x19;
			case 0x3A3:
				return 0x1B;
			case 0x3A4:
				return 0x19;
			case 0x3A5:
				return 0x1D;
			case 0x3A6:
				return 0x19;
			case 0x3A7:
				return 0x19;
			case 0x3A8:
				return 0x19;
			case 0x3A9:
				return 0x1B;
			case 0x3AA:
				return 0x29;
			case 0x3AB:
				return 0x2C;
			case 0x3AC:
				return 0x24;
			case 0x3AD:
				return 0x26;
			case 0x3AE:
				return 0x22;
			case 0x3AF:
				return 0x23;
			case 0x3B0:
				return 0x34;
			case 0x3B1:
				return 0x19;
			case 0x3B2:
				return 0x18;
			case 0x3B3:
				return 0x19;
			case 0x3B4:
				return 0x19;
			case 0x3B5:
				return 0x1B;
			case 0x3B6:
				return 0x18;
			case 0x3B7:
				return 0x17;
			case 0x3B8:
				return 0x19;
			case 0x3B9:
				return 0x18;
			case 0x3BA:
				return 0x19;
			case 0x3BB:
				return 0x19;
			case 0x3BC:
				return 0x16;
			case 0x3BD:
				return 0x16;
			case 0x3BE:
				return 0x16;
			case 0x3BF:
				return 0x1B;
			case 0x3C0:
				return 0x16;
			case 0x3C1:
				return 0x17;
			case 0x3C2:
				return 0x1F;
			case 0x3C3:
				return 0x19;
			case 0x3C4:
				return 0x17;
			case 0x3C5:
				return 0x1B;
			case 0x3C6:
				return 0x17;
			case 0x3C7:
				return 0x17;
			case 0x3C8:
				return 0x17;
			case 0x3C9:
				return 0x19;
			case 0x3CA:
				return 0x27;
			case 0x3CB:
				return 0x2A;
			case 0x3CC:
				return 0x26;
			case 0x3CD:
				return 0x26;
			case 0x3CE:
				return 0x24;
			case 0x3CF:
				return 0x19;
			case 0x3D0:
				return 0x12;
			case 0x3D1:
				return 0x13;
			case 0x3D2:
				return 0x1F;
			case 0x3D3:
				return 0x29;
			case 0x3D4:
				return 0x2D;
			case 0x3D5:
				return 0x11;
			case 0x3D6:
				return 0x10;
			case 0x3D7:
				return 0x11;
			case 0x3D8:
				return 0x1B;
			case 0x3D9:
				return 0x21;
			case 0x3DA:
				return 0x14;
			case 0x3DB:
				return 0x1A;
			case 0x3DC:
				return 0x15;
			case 0x3DD:
				return 0x1B;
			case 0x3DE:
				return 0x13;
			case 0x3DF:
				return 0x19;
			case 0x3E0:
				return 0x13;
			case 0x3E1:
				return 0x19;
			case 0x3E2:
				return 0x1B;
			case 0x3E3:
				return 0x19;
			case 0x3E4:
				return 0x1A;
			case 0x3E5:
				return 0x18;
			case 0x3E6:
				return 0x1B;
			case 0x3E7:
				return 0x19;
			case 0x3E8:
				return 0x1B;
			case 0x3E9:
				return 0x19;
			case 0x3EA:
				return 0x1D;
			case 0x3EB:
				return 0x1B;
			case 0x3EC:
				return 0x1C;
			case 0x3ED:
				return 0x1A;
			case 0x3EE:
				return 0x1A;
			case 0x3EF:
				return 0x18;
			case 0x3F0:
				return 0x13;
			case 0x3F1:
				return 0x11;
			case 0x3F2:
				return 0x1A;
			case 0x3F3:
				return 0x11;
			case 0x3F4:
				return 0x1B;
			case 0x3F5:
				return 0x1C;
			case 0x3F6:
				return 0x25;
			case 0x3F7:
				return 0x19;
			case 0x3F8:
				return 0x17;
			case 0x3F9:
				return 0x22;
			case 0x3FA:
				return 0x19;
			case 0x3FB:
				return 0x17;
			case 0x3FC:
				return 0x1D;
			case 0x3FD:
				return 0x2B;
			case 0x3FE:
				return 0x29;
			case 0x3FF:
				return 0x32;
			case 0x400:
				return 0x26;
			case 0x401:
				return 0x1B;
			case 0x402:
				return 0x1C;
			case 0x403:
				return 0x1C;
			case 0x404:
				return 0x25;
			case 0x405:
				return 0x1C;
			case 0x406:
				return 0x31;
			case 0x407:
				return 0x1B;
			case 0x408:
				return 0x1B;
			case 0x409:
				return 0x1C;
			case 0x40A:
				return 0x1C;
			case 0x40B:
				return 0x1D;
			case 0x40C:
				return 0x1C;
			case 0x40D:
				return 0x25;
			case 0x40E:
				return 0x20;
			case 0x40F:
				return 0x1D;
			case 0x410:
				return 0x1A;
			case 0x411:
				return 0x1B;
			case 0x412:
				return 0x1B;
			case 0x413:
				return 0x1C;
			case 0x414:
				return 0x1B;
			case 0x415:
				return 0x1B;
			case 0x416:
				return 0x1C;
			case 0x417:
				return 0x1B;
			case 0x418:
				return 0x1A;
			case 0x419:
				return 0x20;
			case 0x41A:
				return 0x1B;
			case 0x41B:
				return 0x1B;
			case 0x41C:
				return 0x1B;
			case 0x41D:
				return 0x1B;
			case 0x41E:
				return 0x1A;
			case 0x41F:
				return 0x1B;
			case 0x420:
				return 0x1B;
			case 0x421:
				return 0x1B;
			case 0x422:
				return 0x1B;
			case 0x423:
				return 0x1A;
			case 0x424:
				return 0x1B;
			case 0x425:
				return 0x1B;
			case 0x426:
				return 0x1C;
			case 0x427:
				return 0x1C;
			case 0x428:
				return 0x1C;
			case 0x429:
				return 0x1E;
			case 0x42A:
				return 0x22;
			case 0x42B:
				return 0x1D;
			case 0x42C:
				return 0x22;
			case 0x42D:
				return 0x1A;
			case 0x42E:
				return 0x1B;
			case 0x42F:
				return 0x1B;
			case 0x430:
				return 0x18;
			case 0x431:
				return 0x19;
			case 0x432:
				return 0x19;
			case 0x433:
				return 0x1A;
			case 0x434:
				return 0x19;
			case 0x435:
				return 0x19;
			case 0x436:
				return 0x1A;
			case 0x437:
				return 0x19;
			case 0x438:
				return 0x18;
			case 0x439:
				return 0x1E;
			case 0x43A:
				return 0x19;
			case 0x43B:
				return 0x19;
			case 0x43C:
				return 0x19;
			case 0x43D:
				return 0x19;
			case 0x43E:
				return 0x18;
			case 0x43F:
				return 0x19;
			case 0x440:
				return 0x19;
			case 0x441:
				return 0x19;
			case 0x442:
				return 0x19;
			case 0x443:
				return 0x18;
			case 0x444:
				return 0x19;
			case 0x445:
				return 0x19;
			case 0x446:
				return 0x1A;
			case 0x447:
				return 0x1A;
			case 0x448:
				return 0x1A;
			case 0x449:
				return 0x1C;
			case 0x44A:
				return 0x20;
			case 0x44B:
				return 0x1B;
			case 0x44C:
				return 0x20;
			case 0x44D:
				return 0x18;
			case 0x44E:
				return 0x19;
			case 0x44F:
				return 0x19;
			case 0x450:
				return 0x24;
			case 0x451:
				return 0x19;
			case 0x452:
				return 0x1A;
			case 0x453:
				return 0x1A;
			case 0x454:
				return 0x23;
			case 0x455:
				return 0x1A;
			case 0x456:
				return 0x2F;
			case 0x457:
				return 0x19;
			case 0x458:
				return 0x19;
			case 0x459:
				return 0x1A;
			case 0x45A:
				return 0x1A;
			case 0x45B:
				return 0x1B;
			case 0x45C:
				return 0x1A;
			case 0x45D:
				return 0x23;
			case 0x45E:
				return 0x1E;
			case 0x45F:
				return 0x1B;
			case 0x460:
				return 0x1E;
			case 0x461:
				return 0x1C;
			case 0x462:
				return 0x1C;
			case 0x463:
				return 0x1A;
			case 0x464:
				return 0x23;
			case 0x465:
				return 0x21;
			case 0x466:
				return 0x23;
			case 0x467:
				return 0x21;
			case 0x468:
				return 0x2C;
			case 0x469:
				return 0x2A;
			case 0x46A:
				return 0x20;
			case 0x46B:
				return 0x1E;
			case 0x46C:
				return 0x29;
			case 0x46D:
				return 0x27;
			case 0x46E:
				return 0x1C;
			case 0x46F:
				return 0x1A;
			case 0x470:
				return 0x1C;
			case 0x471:
				return 0x1A;
			case 0x472:
				return 0x1D;
			case 0x473:
				return 0x1B;
			case 0x474:
				return 0x20;
			case 0x475:
				return 0x1E;
			case 0x476:
				return 0x39;
			case 0x477:
				return 0x37;
			case 0x478:
				return 0x1B;
			case 0x479:
				return 0x19;
			case 0x47A:
				return 0x24;
			case 0x47B:
				return 0x22;
			case 0x47C:
				return 0x29;
			case 0x47D:
				return 0x27;
			case 0x47E:
				return 0x1B;
			case 0x47F:
				return 0x19;
			case 0x480:
				return 0x1E;
			case 0x481:
				return 0x1C;
			case 0x482:
				return 0x18;
			case 0x483:
				return 0x19;
			case 0x484:
				return 0x22;
			case 0x485:
				return 0x22;
			case 0x486:
				return 0x22;
			case 0x487:
				return 0x1C;
			case 0x488:
				return 0x2A;
			case 0x489:
				return 0x21;
			case 0x48A:
				return 0x2A;
			case 0x48B:
				return 0x28;
			case 0x48C:
				return 0x26;
			case 0x48D:
				return 0x24;
			case 0x48E:
				return 0x25;
			case 0x48F:
				return 0x23;
			case 0x490:
				return 0x28;
			case 0x491:
				return 0x26;
			case 0x492:
				return 0x28;
			case 0x493:
				return 0x26;
			case 0x494:
				return 0x2D;
			case 0x495:
				return 0x2B;
			case 0x496:
				return 0x2B;
			case 0x497:
				return 0x29;
			case 0x498:
				return 0x2A;
			case 0x499:
				return 0x28;
			case 0x49A:
				return 0x2A;
			case 0x49B:
				return 0x28;
			case 0x49C:
				return 0x30;
			case 0x49D:
				return 0x2E;
			case 0x49E:
				return 0x27;
			case 0x49F:
				return 0x25;
			case 0x4A0:
				return 0x23;
			case 0x4A1:
				return 0x21;
			case 0x4A2:
				return 0x2A;
			case 0x4A3:
				return 0x28;
			case 0x4A4:
				return 0x21;
			case 0x4A5:
				return 0x1F;
			case 0x4A6:
				return 0x2C;
			case 0x4A7:
				return 0x2A;
			case 0x4A8:
				return 0x25;
			case 0x4A9:
				return 0x23;
			case 0x4AA:
				return 0x2A;
			case 0x4AB:
				return 0x28;
			case 0x4AC:
				return 0x2A;
			case 0x4AD:
				return 0x28;
			case 0x4AE:
				return 0x23;
			case 0x4AF:
				return 0x21;
			case 0x4B0:
				return 0x2F;
			case 0x4B1:
				return 0x2D;
			case 0x4B2:
				return 0x2A;
			case 0x4B3:
				return 0x28;
			case 0x4B4:
				return 0x21;
			case 0x4B5:
				return 0x1F;
			case 0x4B6:
				return 0x2B;
			case 0x4B7:
				return 0x29;
			case 0x4B8:
				return 0x31;
			case 0x4B9:
				return 0x2F;
			case 0x4BA:
				return 0x1D;
			case 0x4BB:
				return 0x1B;
			case 0x4BC:
				return 0x26;
			case 0x4BD:
				return 0x24;
			case 0x4BE:
				return 0x35;
			case 0x4BF:
				return 0x33;
			case 0x4C0:
				return 0x19;
			case 0x4C1:
				return 0x27;
			case 0x4C2:
				return 0x25;
			case 0x4C3:
				return 0x25;
			case 0x4C4:
				return 0x23;
			case 0x4C5:
				return 0x25;
			case 0x4C6:
				return 0x23;
			case 0x4C7:
				return 0x25;
			case 0x4C8:
				return 0x23;
			case 0x4C9:
				return 0x25;
			case 0x4CA:
				return 0x23;
			case 0x4CB:
				return 0x27;
			case 0x4CC:
				return 0x25;
			case 0x4CD:
				return 0x25;
			case 0x4CE:
				return 0x23;
			case 0x4CF:
				return 0x1F;
			case 0x4D0:
				return 0x25;
			case 0x4D1:
				return 0x23;
			case 0x4D2:
				return 0x29;
			case 0x4D3:
				return 0x27;
			case 0x4D4:
				return 0x1F;
			case 0x4D5:
				return 0x1D;
			case 0x4D6:
				return 0x26;
			case 0x4D7:
				return 0x24;
			case 0x4D8:
				return 0x1E;
			case 0x4D9:
				return 0x1C;
			case 0x4DA:
				return 0x2D;
			case 0x4DB:
				return 0x2B;
			case 0x4DC:
				return 0x2B;
			case 0x4DD:
				return 0x29;
			case 0x4DE:
				return 0x2A;
			case 0x4DF:
				return 0x28;
			case 0x4E0:
				return 0x26;
			case 0x4E1:
				return 0x24;
			case 0x4E2:
				return 0x26;
			case 0x4E3:
				return 0x24;
			case 0x4E4:
				return 0x29;
			case 0x4E5:
				return 0x27;
			case 0x4E6:
				return 0x29;
			case 0x4E7:
				return 0x27;
			case 0x4E8:
				return 0x21;
			case 0x4E9:
				return 0x1F;
			case 0x4EA:
				return 0x30;
			case 0x4EB:
				return 0x2E;
			case 0x4EC:
				return 0x29;
			case 0x4ED:
				return 0x27;
			case 0x4EE:
				return 0x26;
			case 0x4EF:
				return 0x24;
			case 0x4F0:
				return 0x29;
			case 0x4F1:
				return 0x27;
			case 0x4F2:
				return 0x2C;
			case 0x4F3:
				return 0x2A;
			case 0x4F4:
				return 0x2B;
			case 0x4F5:
				return 0x29;
			case 0x4F6:
				return 0x2B;
			case 0x4F7:
				return 0x29;
			case 0x4F8:
				return 0x2C;
			case 0x4F9:
				return 0x2A;
			case 0x4FA:
				return 0x31;
			case 0x4FB:
				return 0x2F;
			case 0x4FC:
				return 0x25;
			case 0x4FD:
				return 0x23;
			case 0x4FE:
				return 0x27;
			case 0x4FF:
				return 0x25;
			case 0x500:
				return 0x20;
			case 0x501:
				return 0x1E;
			case 0x502:
				return 0x21;
			case 0x503:
				return 0x1F;
			case 0x504:
				return 0x21;
			case 0x505:
				return 0x1F;
			case 0x506:
				return 0x22;
			case 0x507:
				return 0x20;
			case 0x508:
				return 0x21;
			case 0x509:
				return 0x1F;
			case 0x50A:
				return 0x21;
			case 0x50B:
				return 0x1F;
			case 0x50C:
				return 0x21;
			case 0x50D:
				return 0x1F;
			case 0x50E:
				return 0x21;
			case 0x50F:
				return 0x1F;
			case 0x510:
				return 0x24;
			case 0x511:
				return 0x22;
			case 0x512:
				return 0x25;
			case 0x513:
				return 0x23;
			case 0x514:
				return 0x1C;
			case 0x515:
				return 0x1A;
			case 0x516:
				return 0x1C;
			case 0x517:
				return 0x1A;
			case 0x518:
				return 0x1C;
			case 0x519:
				return 0x1A;
			case 0x51A:
				return 0x1B;
			case 0x51B:
				return 0x19;
			case 0x51C:
				return 0x1B;
			case 0x51D:
				return 0x19;
			case 0x51E:
				return 0x21;
			case 0x51F:
				return 0x1F;
			case 0x520:
				return 0x2C;
			case 0x521:
				return 0x2A;
			case 0x522:
				return 0x2C;
			case 0x523:
				return 0x2A;
			case 0x524:
				return 0x2A;
			case 0x525:
				return 0x28;
			case 0x526:
				return 0x2C;
			case 0x527:
				return 0x2A;
			case 0x528:
				return 0x2A;
			case 0x529:
				return 0x28;
			case 0x52A:
				return 0x1E;
			case 0x52B:
				return 0x1C;
			case 0x52C:
				return 0x1D;
			case 0x52D:
				return 0x1B;
			case 0x52E:
				return 0x2A;
			case 0x52F:
				return 0x28;
			case 0x531:
				return 0x1C;
			case 0x532:
				return 0x1C;
			case 0x533:
				return 0x1C;
			case 0x534:
				return 0x1B;
			case 0x535:
				return 0x1C;
			case 0x536:
				return 0x1B;
			case 0x537:
				return 0x1B;
			case 0x538:
				return 0x1B;
			case 0x539:
				return 0x1B;
			case 0x53A:
				return 0x1C;
			case 0x53B:
				return 0x1C;
			case 0x53C:
				return 0x1D;
			case 0x53D:
				return 0x1C;
			case 0x53E:
				return 0x1B;
			case 0x53F:
				return 0x1C;
			case 0x540:
				return 0x1B;
			case 0x541:
				return 0x1B;
			case 0x542:
				return 0x1D;
			case 0x543:
				return 0x1D;
			case 0x544:
				return 0x1C;
			case 0x545:
				return 0x1B;
			case 0x546:
				return 0x1C;
			case 0x547:
				return 0x1C;
			case 0x548:
				return 0x1B;
			case 0x549:
				return 0x1C;
			case 0x54A:
				return 0x1C;
			case 0x54B:
				return 0x1D;
			case 0x54C:
				return 0x1B;
			case 0x54D:
				return 0x1C;
			case 0x54E:
				return 0x1C;
			case 0x54F:
				return 0x1D;
			case 0x550:
				return 0x1C;
			case 0x551:
				return 0x1B;
			case 0x552:
				return 0x1D;
			case 0x553:
				return 0x1D;
			case 0x554:
				return 0x1C;
			case 0x555:
				return 0x1B;
			case 0x556:
				return 0x1C;
			case 0x559:
				return 0x28;
			case 0x55A:
				return 0x14;
			case 0x55B:
				return 0x17;
			case 0x55C:
				return 0x1A;
			case 0x55D:
				return 0xF;
			case 0x55E:
				return 0x17;
			case 0x55F:
				return 0x1B;
			case 0x560:
				return 0x21;
			case 0x561:
				return 0x1A;
			case 0x562:
				return 0x1A;
			case 0x563:
				return 0x1A;
			case 0x564:
				return 0x19;
			case 0x565:
				return 0x1A;
			case 0x566:
				return 0x19;
			case 0x567:
				return 0x19;
			case 0x568:
				return 0x19;
			case 0x569:
				return 0x19;
			case 0x56A:
				return 0x1A;
			case 0x56B:
				return 0x1A;
			case 0x56C:
				return 0x1B;
			case 0x56D:
				return 0x1A;
			case 0x56E:
				return 0x19;
			case 0x56F:
				return 0x1A;
			case 0x570:
				return 0x19;
			case 0x571:
				return 0x19;
			case 0x572:
				return 0x1B;
			case 0x573:
				return 0x1B;
			case 0x574:
				return 0x1A;
			case 0x575:
				return 0x19;
			case 0x576:
				return 0x1A;
			case 0x577:
				return 0x1A;
			case 0x578:
				return 0x19;
			case 0x579:
				return 0x1A;
			case 0x57A:
				return 0x1A;
			case 0x57B:
				return 0x1B;
			case 0x57C:
				return 0x19;
			case 0x57D:
				return 0x1A;
			case 0x57E:
				return 0x1A;
			case 0x57F:
				return 0x1B;
			case 0x580:
				return 0x1A;
			case 0x581:
				return 0x19;
			case 0x582:
				return 0x1B;
			case 0x583:
				return 0x1B;
			case 0x584:
				return 0x1A;
			case 0x585:
				return 0x19;
			case 0x586:
				return 0x1A;
			case 0x587:
				return 0x21;
			case 0x588:
				return 0x25;
			case 0x589:
				return 0x13;
			case 0x58A:
				return 0x10;
			case 0x58D:
				return 0x24;
			case 0x58E:
				return 0x23;
			case 0x58F:
				return 0x13;
			case 0x591:
				return 0x16;
			case 0x592:
				return 0x14;
			case 0x593:
				return 0x19;
			case 0x594:
				return 0x1A;
			case 0x595:
				return 0x1A;
			case 0x596:
				return 0x15;
			case 0x597:
				return 0x14;
			case 0x598:
				return 0x14;
			case 0x599:
				return 0x15;
			case 0x59A:
				return 0x14;
			case 0x59B:
				return 0x14;
			case 0x59C:
				return 0x15;
			case 0x59D:
				return 0x1C;
			case 0x59E:
				return 0x18;
			case 0x59F:
				return 0x1A;
			case 0x5A0:
				return 0x1D;
			case 0x5A1:
				return 0x14;
			case 0x5A2:
				return 0x1B;
			case 0x5A3:
				return 0x14;
			case 0x5A4:
				return 0x17;
			case 0x5A5:
				return 0x15;
			case 0x5A6:
				return 0x1C;
			case 0x5A7:
				return 0x14;
			case 0x5A8:
				return 0x14;
			case 0x5A9:
				return 0x1D;
			case 0x5AA:
				return 0x1D;
			case 0x5AB:
				return 0x12;
			case 0x5AC:
				return 0x13;
			case 0x5AD:
				return 0x13;
			case 0x5AE:
				return 0x14;
			case 0x5AF:
				return 0x1A;
			case 0x5B0:
				return 0x13;
			case 0x5B1:
				return 0x19;
			case 0x5B2:
				return 0x19;
			case 0x5B3:
				return 0x1A;
			case 0x5B4:
				return 0x13;
			case 0x5B5:
				return 0x13;
			case 0x5B6:
				return 0x13;
			case 0x5B7:
				return 0x13;
			case 0x5B8:
				return 0x14;
			case 0x5B9:
				return 0x13;
			case 0x5BA:
				return 0x21;
			case 0x5BB:
				return 0x14;
			case 0x5BC:
				return 0x1D;
			case 0x5BD:
				return 0x13;
			case 0x5BE:
				return 0x19;
			case 0x5BF:
				return 0x12;
			case 0x5C0:
				return 0x19;
			case 0x5C1:
				return 0x16;
			case 0x5C2:
				return 0x15;
			case 0x5C3:
				return 0x1D;
			case 0x5C4:
				return 0x16;
			case 0x5C5:
				return 0x16;
			case 0x5C6:
				return 0x1F;
			case 0x5C7:
				return 0x1A;
			case 0x5D0:
				return 0x13;
			case 0x5D1:
				return 0x12;
			case 0x5D2:
				return 0x14;
			case 0x5D3:
				return 0x14;
			case 0x5D4:
				return 0x11;
			case 0x5D5:
				return 0x12;
			case 0x5D6:
				return 0x14;
			case 0x5D7:
				return 0x12;
			case 0x5D8:
				return 0x12;
			case 0x5D9:
				return 0x12;
			case 0x5DA:
				return 0x18;
			case 0x5DB:
				return 0x12;
			case 0x5DC:
				return 0x14;
			case 0x5DD:
				return 0x18;
			case 0x5DE:
				return 0x12;
			case 0x5DF:
				return 0x18;
			case 0x5E0:
				return 0x12;
			case 0x5E1:
				return 0x15;
			case 0x5E2:
				return 0x13;
			case 0x5E3:
				return 0x17;
			case 0x5E4:
				return 0x11;
			case 0x5E5:
				return 0x1A;
			case 0x5E6:
				return 0x14;
			case 0x5E7:
				return 0x12;
			case 0x5E8:
				return 0x13;
			case 0x5E9:
				return 0x13;
			case 0x5EA:
				return 0x12;
			case 0x5EF:
				return 0x14;
			case 0x5F0:
				return 0x23;
			case 0x5F1:
				return 0x20;
			case 0x5F2:
				return 0x23;
			case 0x5F3:
				return 0x1A;
			case 0x5F4:
				return 0x1D;
			case 0x600:
				return 0x13;
			case 0x601:
				return 0x12;
			case 0x602:
				return 0x17;
			case 0x603:
				return 0x12;
			case 0x604:
				return 0x13;
			case 0x605:
				return 0x19;
			case 0x606:
				return 0x17;
			case 0x607:
				return 0x19;
			case 0x608:
				return 0xB;
			case 0x609:
				return 0x1C;
			case 0x60A:
				return 0x23;
			case 0x60B:
				return 0xD;
			case 0x60C:
				return 0xD;
			case 0x60D:
				return 0x16;
			case 0x60E:
				return 0x19;
			case 0x60F:
				return 0x12;
			case 0x610:
				return 0x29;
			case 0x611:
				return 0x1C;
			case 0x612:
				return 0x1F;
			case 0x613:
				return 0x1E;
			case 0x614:
				return 0x16;
			case 0x615:
				return 0x16;
			case 0x616:
				return 0x32;
			case 0x617:
				return 0x17;
			case 0x618:
				return 0x13;
			case 0x619:
				return 0x13;
			case 0x61A:
				return 0x13;
			case 0x61B:
				return 0x11;
			case 0x61C:
				return 0x13;
			case 0x61E:
				return 0x23;
			case 0x61F:
				return 0x15;
			case 0x620:
				return 0x1B;
			case 0x621:
				return 0x14;
			case 0x622:
				return 0x24;
			case 0x623:
				return 0x24;
			case 0x624:
				return 0x23;
			case 0x625:
				return 0x24;
			case 0x626:
				return 0x23;
			case 0x627:
				return 0x13;
			case 0x628:
				return 0x12;
			case 0x629:
				return 0x1A;
			case 0x62A:
				return 0x12;
			case 0x62B:
				return 0x13;
			case 0x62C:
				return 0x13;
			case 0x62D:
				return 0x12;
			case 0x62E:
				return 0x13;
			case 0x62F:
				return 0x12;
			case 0x630:
				return 0x13;
			case 0x631:
				return 0x12;
			case 0x632:
				return 0x13;
			case 0x633:
				return 0x13;
			case 0x634:
				return 0x14;
			case 0x635:
				return 0x12;
			case 0x636:
				return 0x12;
			case 0x637:
				return 0x12;
			case 0x638:
				return 0x12;
			case 0x639:
				return 0x12;
			case 0x63A:
				return 0x14;
			case 0x63B:
				return 0x28;
			case 0x63C:
				return 0x2A;
			case 0x63D:
				return 0x28;
			case 0x63E:
				return 0x2C;
			case 0x63F:
				return 0x2E;
			case 0x640:
				return 0xF;
			case 0x641:
				return 0x12;
			case 0x642:
				return 0x12;
			case 0x643:
				return 0x12;
			case 0x644:
				return 0x12;
			case 0x645:
				return 0x13;
			case 0x646:
				return 0x13;
			case 0x647:
				return 0x12;
			case 0x648:
				return 0x12;
			case 0x649:
				return 0x1B;
			case 0x64A:
				return 0x12;
			case 0x64B:
				return 0x10;
			case 0x64C:
				return 0x10;
			case 0x64D:
				return 0x10;
			case 0x64E:
				return 0xD;
			case 0x64F:
				return 0xD;
			case 0x650:
				return 0xD;
			case 0x651:
				return 0xE;
			case 0x652:
				return 0xD;
			case 0x653:
				return 0x14;
			case 0x654:
				return 0x13;
			case 0x655:
				return 0x13;
			case 0x656:
				return 0x16;
			case 0x657:
				return 0x16;
			case 0x658:
				return 0x18;
			case 0x659:
				return 0x10;
			case 0x65A:
				return 0x20;
			case 0x65B:
				return 0x29;
			case 0x65C:
				return 0x1C;
			case 0x65D:
				return 0x16;
			case 0x65E:
				return 0x1B;
			case 0x65F:
				return 0x18;
			case 0x660:
				return 0x18;
			case 0x661:
				return 0x17;
			case 0x662:
				return 0x17;
			case 0x663:
				return 0x19;
			case 0x664:
				return 0x18;
			case 0x665:
				return 0x18;
			case 0x666:
				return 0x17;
			case 0x667:
				return 0x19;
			case 0x668:
				return 0x19;
			case 0x669:
				return 0x18;
			case 0x66A:
				return 0x14;
			case 0x66B:
				return 0x19;
			case 0x66C:
				return 0x1B;
			case 0x66D:
				return 0x19;
			case 0x66E:
				return 0x1A;
			case 0x66F:
				return 0x1A;
			case 0x670:
				return 0x1F;
			case 0x671:
				return 0x19;
			case 0x672:
				return 0x29;
			case 0x673:
				return 0x29;
			case 0x674:
				return 0x19;
			case 0x675:
				return 0x1E;
			case 0x676:
				return 0x1D;
			case 0x677:
				return 0x21;
			case 0x678:
				return 0x1D;
			case 0x679:
				return 0x13;
			case 0x67A:
				return 0x15;
			case 0x67B:
				return 0x13;
			case 0x67C:
				return 0x1C;
			case 0x67D:
				return 0x32;
			case 0x67E:
				return 0x12;
			case 0x67F:
				return 0x14;
			case 0x680:
				return 0x14;
			case 0x681:
				return 0x23;
			case 0x682:
				return 0x2F;
			case 0x683:
				return 0x13;
			case 0x684:
				return 0x13;
			case 0x685:
				return 0x28;
			case 0x686:
				return 0x14;
			case 0x687:
				return 0x16;
			case 0x688:
				return 0x13;
			case 0x689:
				return 0x1C;
			case 0x68A:
				return 0x21;
			case 0x68B:
				return 0x2F;
			case 0x68C:
				return 0x14;
			case 0x68D:
				return 0x15;
			case 0x68E:
				return 0x12;
			case 0x68F:
				return 0x32;
			case 0x690:
				return 0x27;
			case 0x691:
				return 0x13;
			case 0x692:
				return 0x1F;
			case 0x693:
				return 0x1C;
			case 0x694:
				return 0x21;
			case 0x695:
				return 0x25;
			case 0x696:
				return 0x2F;
			case 0x697:
				return 0x26;
			case 0x698:
				return 0x12;
			case 0x699:
				return 0x27;
			case 0x69A:
				return 0x30;
			case 0x69B:
				return 0x29;
			case 0x69C:
				return 0x3E;
			case 0x69D:
				return 0x26;
			case 0x69E:
				return 0x28;
			case 0x69F:
				return 0x28;
			case 0x6A0:
				return 0x28;
			case 0x6A1:
				return 0x1A;
			case 0x6A2:
				return 0x27;
			case 0x6A3:
				return 0x21;
			case 0x6A4:
				return 0x12;
			case 0x6A5:
				return 0x28;
			case 0x6A6:
				return 0x14;
			case 0x6A7:
				return 0x21;
			case 0x6A8:
				return 0x28;
			case 0x6A9:
				return 0x14;
			case 0x6AA:
				return 0x18;
			case 0x6AB:
				return 0x1C;
			case 0x6AC:
				return 0x21;
			case 0x6AD:
				return 0x11;
			case 0x6AE:
				return 0x28;
			case 0x6AF:
				return 0x12;
			case 0x6B0:
				return 0x1C;
			case 0x6B1:
				return 0x14;
			case 0x6B2:
				return 0x26;
			case 0x6B3:
				return 0x13;
			case 0x6B4:
				return 0x28;
			case 0x6B5:
				return 0x1F;
			case 0x6B6:
				return 0x21;
			case 0x6B7:
				return 0x28;
			case 0x6B8:
				return 0x28;
			case 0x6B9:
				return 0x22;
			case 0x6BA:
				return 0x1A;
			case 0x6BB:
				return 0x14;
			case 0x6BC:
				return 0x1D;
			case 0x6BD:
				return 0x29;
			case 0x6BE:
				return 0x1E;
			case 0x6BF:
				return 0x23;
			case 0x6C0:
				return 0x21;
			case 0x6C1:
				return 0x17;
			case 0x6C2:
				return 0x28;
			case 0x6C3:
				return 0x1F;
			case 0x6C4:
				return 0x1C;
			case 0x6C5:
				return 0x19;
			case 0x6C6:
				return 0x11;
			case 0x6C7:
				return 0x10;
			case 0x6C8:
				return 0x11;
			case 0x6C9:
				return 0x19;
			case 0x6CA:
				return 0x26;
			case 0x6CB:
				return 0x11;
			case 0x6CC:
				return 0x18;
			case 0x6CD:
				return 0x1C;
			case 0x6CE:
				return 0x1F;
			case 0x6CF:
				return 0x21;
			case 0x6D0:
				return 0x10;
			case 0x6D1:
				return 0x28;
			case 0x6D2:
				return 0x19;
			case 0x6D3:
				return 0x2A;
			case 0x6D4:
				return 0x11;
			case 0x6D5:
				return 0x11;
			case 0x6D6:
				return 0x3A;
			case 0x6D7:
				return 0x3A;
			case 0x6D8:
				return 0x24;
			case 0x6D9:
				return 0x1B;
			case 0x6DA:
				return 0x17;
			case 0x6DB:
				return 0x1D;
			case 0x6DC:
				return 0x17;
			case 0x6DD:
				return 0x13;
			case 0x6DE:
				return 0x1C;
			case 0x6DF:
				return 0x1F;
			case 0x6E0:
				return 0x2B;
			case 0x6E1:
				return 0x27;
			case 0x6E2:
				return 0x25;
			case 0x6E3:
				return 0x16;
			case 0x6E4:
				return 0x18;
			case 0x6E5:
				return 0x11;
			case 0x6E6:
				return 0x11;
			case 0x6E7:
				return 0x16;
			case 0x6E8:
				return 0x17;
			case 0x6E9:
				return 0x17;
			case 0x6EA:
				return 0x1D;
			case 0x6EB:
				return 0x1E;
			case 0x6EC:
				return 0x2C;
			case 0x6ED:
				return 0x16;
			case 0x6EE:
				return 0x22;
			case 0x6EF:
				return 0x22;
			case 0x6F0:
				return 0x21;
			case 0x6F1:
				return 0x20;
			case 0x6F2:
				return 0x20;
			case 0x6F3:
				return 0x22;
			case 0x6F4:
				return 0x21;
			case 0x6F5:
				return 0x21;
			case 0x6F6:
				return 0x20;
			case 0x6F7:
				return 0x22;
			case 0x6F8:
				return 0x22;
			case 0x6F9:
				return 0x21;
			case 0x6FA:
				return 0x23;
			case 0x6FB:
				return 0x21;
			case 0x6FC:
				return 0x23;
			case 0x6FD:
				return 0x1D;
			case 0x6FE:
				return 0x24;
			case 0x6FF:
				return 0x22;
			case 0x700:
				return 0x18;
			case 0x701:
				return 0x1D;
			case 0x702:
				return 0x1B;
			case 0x703:
				return 0x19;
			case 0x704:
				return 0x17;
			case 0x705:
				return 0x18;
			case 0x706:
				return 0x19;
			case 0x707:
				return 0x1A;
			case 0x708:
				return 0x25;
			case 0x709:
				return 0x24;
			case 0x70A:
				return 0x13;
			case 0x70B:
				return 0x17;
			case 0x70C:
				return 0x1A;
			case 0x70D:
				return 0x1B;
			case 0x70F:
				return 0x19;
			case 0x710:
				return 0x14;
			case 0x711:
				return 0x20;
			case 0x712:
				return 0x13;
			case 0x713:
				return 0x14;
			case 0x714:
				return 0x1D;
			case 0x715:
				return 0x15;
			case 0x716:
				return 0x22;
			case 0x717:
				return 0x11;
			case 0x718:
				return 0x12;
			case 0x719:
				return 0x13;
			case 0x71A:
				return 0x13;
			case 0x71B:
				return 0x13;
			case 0x71C:
				return 0x1C;
			case 0x71D:
				return 0x13;
			case 0x71E:
				return 0x16;
			case 0x71F:
				return 0x13;
			case 0x720:
				return 0x15;
			case 0x721:
				return 0x12;
			case 0x722:
				return 0x12;
			case 0x723:
				return 0x16;
			case 0x724:
				return 0x1C;
			case 0x725:
				return 0x10;
			case 0x726:
				return 0x11;
			case 0x727:
				return 0x1A;
			case 0x728:
				return 0x14;
			case 0x729:
				return 0x13;
			case 0x72A:
				return 0x13;
			case 0x72B:
				return 0x13;
			case 0x72C:
				return 0x12;
			case 0x72D:
				return 0x1C;
			case 0x72E:
				return 0x1D;
			case 0x72F:
				return 0x1E;
			case 0x730:
				return 0x14;
			case 0x731:
				return 0x14;
			case 0x732:
				return 0x15;
			case 0x733:
				return 0x14;
			case 0x734:
				return 0x14;
			case 0x735:
				return 0x15;
			case 0x736:
				return 0x13;
			case 0x737:
				return 0x13;
			case 0x738:
				return 0x1F;
			case 0x739:
				return 0x1C;
			case 0x73A:
				return 0x13;
			case 0x73B:
				return 0x13;
			case 0x73C:
				return 0x1A;
			case 0x73D:
				return 0x13;
			case 0x73E:
				return 0x13;
			case 0x73F:
				return 0xD;
			case 0x740:
				return 0x14;
			case 0x741:
				return 0x11;
			case 0x742:
				return 0x10;
			case 0x743:
				return 0x1F;
			case 0x744:
				return 0x1F;
			case 0x745:
				return 0x18;
			case 0x746:
				return 0x18;
			case 0x747:
				return 0x1A;
			case 0x748:
				return 0x1A;
			case 0x749:
				return 0xD;
			case 0x74A:
				return 0xF;
			case 0x74D:
				return 0x1C;
			case 0x74E:
				return 0x1C;
			case 0x74F:
				return 0x19;
			case 0x750:
				return 0x35;
			case 0x751:
				return 0x36;
			case 0x752:
				return 0x39;
			case 0x753:
				return 0x4C;
			case 0x754:
				return 0x34;
			case 0x755:
				return 0x2E;
			case 0x756:
				return 0x1F;
			case 0x757:
				return 0x26;
			case 0x758:
				return 0x39;
			case 0x759:
				return 0x3F;
			case 0x75A:
				return 0x2E;
			case 0x75B:
				return 0x1E;
			case 0x75C:
				return 0x28;
			case 0x75D:
				return 0x26;
			case 0x75E:
				return 0x3B;
			case 0x75F:
				return 0x31;
			case 0x760:
				return 0x26;
			case 0x761:
				return 0x39;
			case 0x762:
				return 0x23;
			case 0x763:
				return 0x2A;
			case 0x764:
				return 0x3B;
			case 0x765:
				return 0x22;
			case 0x766:
				return 0x22;
			case 0x767:
				return 0x27;
			case 0x768:
				return 0x22;
			case 0x769:
				return 0x20;
			case 0x76A:
				return 0x1B;
			case 0x76B:
				return 0x31;
			case 0x76C:
				return 0x23;
			case 0x76D:
				return 0x32;
			case 0x76E:
				return 0x35;
			case 0x76F:
				return 0x3C;
			case 0x770:
				return 0x3D;
			case 0x771:
				return 0x3C;
			case 0x772:
				return 0x35;
			case 0x773:
				return 0x3E;
			case 0x774:
				return 0x40;
			case 0x775:
				return 0x43;
			case 0x776:
				return 0x45;
			case 0x777:
				return 0x44;
			case 0x778:
				return 0x3D;
			case 0x779:
				return 0x3F;
			case 0x77A:
				return 0x44;
			case 0x77B:
				return 0x46;
			case 0x77C:
				return 0x3E;
			case 0x77D:
				return 0x3F;
			case 0x77E:
				return 0x23;
			case 0x77F:
				return 0x26;
			case 0x780:
				return 0x12;
			case 0x781:
				return 0x18;
			case 0x782:
				return 0x14;
			case 0x783:
				return 0x12;
			case 0x784:
				return 0x12;
			case 0x785:
				return 0x18;
			case 0x786:
				return 0x14;
			case 0x787:
				return 0x14;
			case 0x788:
				return 0x14;
			case 0x789:
				return 0x14;
			case 0x78A:
				return 0x14;
			case 0x78B:
				return 0x15;
			case 0x78C:
				return 0x13;
			case 0x78D:
				return 0x14;
			case 0x78E:
				return 0x14;
			case 0x78F:
				return 0x18;
			case 0x790:
				return 0x14;
			case 0x791:
				return 0x17;
			case 0x792:
				return 0x17;
			case 0x793:
				return 0x17;
			case 0x794:
				return 0x12;
			case 0x795:
				return 0x17;
			case 0x796:
				return 0x17;
			case 0x797:
				return 0x18;
			case 0x798:
				return 0x13;
			case 0x799:
				return 0x13;
			case 0x79A:
				return 0x13;
			case 0x79B:
				return 0x15;
			case 0x79C:
				return 0x12;
			case 0x79D:
				return 0x15;
			case 0x79E:
				return 0x15;
			case 0x79F:
				return 0x15;
			case 0x7A0:
				return 0x11;
			case 0x7A1:
				return 0x11;
			case 0x7A2:
				return 0x13;
			case 0x7A3:
				return 0x15;
			case 0x7A4:
				return 0x14;
			case 0x7A5:
				return 0x14;
			case 0x7A6:
				return 0xF;
			case 0x7A7:
				return 0x11;
			case 0x7A8:
				return 0xF;
			case 0x7A9:
				return 0x11;
			case 0x7AA:
				return 0xF;
			case 0x7AB:
				return 0x11;
			case 0x7AC:
				return 0xF;
			case 0x7AD:
				return 0x11;
			case 0x7AE:
				return 0xF;
			case 0x7AF:
				return 0x11;
			case 0x7B0:
				return 0xD;
			case 0x7B1:
				return 0x12;
			case 0x7C0:
				return 0xF;
			case 0x7C1:
				return 0xE;
			case 0x7C2:
				return 0xE;
			case 0x7C3:
				return 0x10;
			case 0x7C4:
				return 0xF;
			case 0x7C5:
				return 0xF;
			case 0x7C6:
				return 0xE;
			case 0x7C7:
				return 0x10;
			case 0x7C8:
				return 0x10;
			case 0x7C9:
				return 0xF;
			case 0x7CA:
				return 0xD;
			case 0x7CB:
				return 0xE;
			case 0x7CC:
				return 0xD;
			case 0x7CD:
				return 0xD;
			case 0x7CE:
				return 0xD;
			case 0x7CF:
				return 0xE;
			case 0x7D0:
				return 0xD;
			case 0x7D1:
				return 0x16;
			case 0x7D2:
				return 0xD;
			case 0x7D3:
				return 0xE;
			case 0x7D4:
				return 0xE;
			case 0x7D5:
				return 0xE;
			case 0x7D6:
				return 0xE;
			case 0x7D7:
				return 0xF;
			case 0x7D8:
				return 0xE;
			case 0x7D9:
				return 0xE;
			case 0x7DA:
				return 0xF;
			case 0x7DB:
				return 0xE;
			case 0x7DC:
				return 0xF;
			case 0x7DD:
				return 0xE;
			case 0x7DE:
				return 0xE;
			case 0x7DF:
				return 0xE;
			case 0x7E0:
				return 0x15;
			case 0x7E1:
				return 0xE;
			case 0x7E2:
				return 0xF;
			case 0x7E3:
				return 0xE;
			case 0x7E4:
				return 0xE;
			case 0x7E5:
				return 0xE;
			case 0x7E6:
				return 0xE;
			case 0x7E7:
				return 0x16;
			case 0x7E8:
				return 0x13;
			case 0x7E9:
				return 0x14;
			case 0x7EA:
				return 0x13;
			case 0x7EB:
				return 0x1E;
			case 0x7EC:
				return 0x1D;
			case 0x7ED:
				return 0x20;
			case 0x7EE:
				return 0x23;
			case 0x7EF:
				return 0x1D;
			case 0x7F0:
				return 0x1C;
			case 0x7F1:
				return 0x1F;
			case 0x7F2:
				return 0x20;
			case 0x7F3:
				return 0x1F;
			case 0x7F4:
				return 0x19;
			case 0x7F5:
				return 0x18;
			case 0x7F6:
				return 0x15;
			case 0x7F7:
				return 0x16;
			case 0x7F8:
				return 0xA;
			case 0x7F9:
				return 0x15;
			case 0x7FA:
				return 0xF;
			case 0x7FD:
				return 0xF;
			case 0x7FE:
				return 0x10;
			case 0x7FF:
				return 0xF;
			case 0x800:
				return 0x16;
			case 0x801:
				return 0x15;
			case 0x802:
				return 0x17;
			case 0x803:
				return 0x17;
			case 0x804:
				return 0x14;
			case 0x805:
				return 0x15;
			case 0x806:
				return 0x15;
			case 0x807:
				return 0x14;
			case 0x808:
				return 0x15;
			case 0x809:
				return 0x15;
			case 0x80A:
				return 0x16;
			case 0x80B:
				return 0x17;
			case 0x80C:
				return 0x15;
			case 0x80D:
				return 0x15;
			case 0x80E:
				return 0x19;
			case 0x80F:
				return 0x14;
			case 0x810:
				return 0x14;
			case 0x811:
				return 0x19;
			case 0x812:
				return 0x15;
			case 0x813:
				return 0x16;
			case 0x814:
				return 0x16;
			case 0x815:
				return 0x16;
			case 0x816:
				return 0x12;
			case 0x817:
				return 0x17;
			case 0x818:
				return 0x19;
			case 0x819:
				return 0x16;
			case 0x81A:
				return 0x29;
			case 0x81B:
				return 0x1E;
			case 0x81C:
				return 0x1C;
			case 0x81D:
				return 0x17;
			case 0x81E:
				return 0x21;
			case 0x81F:
				return 0x1D;
			case 0x820:
				return 0x18;
			case 0x821:
				return 0x20;
			case 0x822:
				return 0x1C;
			case 0x823:
				return 0x17;
			case 0x824:
				return 0x22;
			case 0x825:
				return 0x1D;
			case 0x826:
				return 0x1C;
			case 0x827:
				return 0x17;
			case 0x828:
				return 0x1C;
			case 0x829:
				return 0x1C;
			case 0x82A:
				return 0x17;
			case 0x82B:
				return 0x17;
			case 0x82C:
				return 0x1B;
			case 0x82D:
				return 0x17;
			case 0x830:
				return 0x1E;
			case 0x831:
				return 0x1D;
			case 0x832:
				return 0x1C;
			case 0x833:
				return 0x1A;
			case 0x834:
				return 0x1D;
			case 0x835:
				return 0x21;
			case 0x836:
				return 0x1C;
			case 0x837:
				return 0x24;
			case 0x838:
				return 0x1C;
			case 0x839:
				return 0x1C;
			case 0x83A:
				return 0x1B;
			case 0x83B:
				return 0x1B;
			case 0x83C:
				return 0x1E;
			case 0x83D:
				return 0x23;
			case 0x83E:
				return 0x1D;
			case 0x840:
				return 0x15;
			case 0x841:
				return 0x12;
			case 0x842:
				return 0x12;
			case 0x843:
				return 0x12;
			case 0x844:
				return 0x12;
			case 0x845:
				return 0x17;
			case 0x846:
				return 0x12;
			case 0x847:
				return 0x12;
			case 0x848:
				return 0x13;
			case 0x849:
				return 0x14;
			case 0x84A:
				return 0x12;
			case 0x84B:
				return 0x12;
			case 0x84C:
				return 0x12;
			case 0x84D:
				return 0x12;
			case 0x84E:
				return 0x12;
			case 0x84F:
				return 0x12;
			case 0x850:
				return 0x12;
			case 0x851:
				return 0x13;
			case 0x852:
				return 0x12;
			case 0x853:
				return 0x12;
			case 0x854:
				return 0x13;
			case 0x855:
				return 0x12;
			case 0x856:
				return 0x18;
			case 0x857:
				return 0x13;
			case 0x858:
				return 0x13;
			case 0x859:
				return 0x19;
			case 0x85A:
				return 0x1A;
			case 0x85B:
				return 0x18;
			case 0x85E:
				return 0x14;
			case 0x860:
				return 0x1C;
			case 0x861:
				return 0x1B;
			case 0x862:
				return 0x1C;
			case 0x863:
				return 0x1C;
			case 0x864:
				return 0x1C;
			case 0x865:
				return 0x1D;
			case 0x866:
				return 0x1C;
			case 0x867:
				return 0x1B;
			case 0x868:
				return 0x1C;
			case 0x869:
				return 0x1D;
			case 0x86A:
				return 0x1C;
			case 0x8A0:
				return 0x25;
			case 0x8A1:
				return 0x23;
			case 0x8A2:
				return 0x27;
			case 0x8A3:
				return 0x26;
			case 0x8A4:
				return 0x36;
			case 0x8A5:
				return 0x21;
			case 0x8A6:
				return 0x22;
			case 0x8A7:
				return 0x29;
			case 0x8A8:
				return 0x36;
			case 0x8A9:
				return 0x34;
			case 0x8AA:
				return 0x1C;
			case 0x8AB:
				return 0x22;
			case 0x8AC:
				return 0x1B;
			case 0x8AD:
				return 0x17;
			case 0x8AE:
				return 0x28;
			case 0x8AF:
				return 0x28;
			case 0x8B0:
				return 0x27;
			case 0x8B1:
				return 0x1B;
			case 0x8B2:
				return 0x29;
			case 0x8B3:
				return 0x28;
			case 0x8B4:
				return 0x21;
			case 0x8B6:
				return 0x28;
			case 0x8B7:
				return 0x28;
			case 0x8B8:
				return 0x27;
			case 0x8B9:
				return 0x28;
			case 0x8BA:
				return 0x3B;
			case 0x8BB:
				return 0x1A;
			case 0x8BC:
				return 0x1A;
			case 0x8BD:
				return 0x1B;
			case 0x8BE:
				return 0x1F;
			case 0x8BF:
				return 0x1F;
			case 0x8C0:
				return 0x20;
			case 0x8C1:
				return 0x21;
			case 0x8C2:
				return 0x21;
			case 0x8C3:
				return 0x2A;
			case 0x8C4:
				return 0x30;
			case 0x8C5:
				return 0x29;
			case 0x8C6:
				return 0x29;
			case 0x8C7:
				return 0x35;
			case 0x8D3:
				return 0x15;
			case 0x8D4:
				return 0x1E;
			case 0x8D5:
				return 0x16;
			case 0x8D6:
				return 0x16;
			case 0x8D7:
				return 0x16;
			case 0x8D8:
				return 0x22;
			case 0x8D9:
				return 0x21;
			case 0x8DA:
				return 0x24;
			case 0x8DB:
				return 0x20;
			case 0x8DC:
				return 0x1F;
			case 0x8DD:
				return 0x1D;
			case 0x8DE:
				return 0x1B;
			case 0x8DF:
				return 0x1D;
			case 0x8E0:
				return 0x22;
			case 0x8E1:
				return 0x1D;
			case 0x8E2:
				return 0x1C;
			case 0x8E3:
				return 0x1A;
			case 0x8E4:
				return 0x13;
			case 0x8E5:
				return 0x13;
			case 0x8E6:
				return 0x13;
			case 0x8E7:
				return 0x16;
			case 0x8E8:
				return 0x16;
			case 0x8E9:
				return 0x16;
			case 0x8EA:
				return 0x1A;
			case 0x8EB:
				return 0x1B;
			case 0x8EC:
				return 0x17;
			case 0x8ED:
				return 0x1A;
			case 0x8EE:
				return 0x1B;
			case 0x8EF:
				return 0x17;
			case 0x8F0:
				return 0x15;
			case 0x8F1:
				return 0x15;
			case 0x8F2:
				return 0x15;
			case 0x8F3:
				return 0x16;
			case 0x8F4:
				return 0x17;
			case 0x8F5:
				return 0x1C;
			case 0x8F6:
				return 0x1C;
			case 0x8F7:
				return 0x1C;
			case 0x8F8:
				return 0x1D;
			case 0x8F9:
				return 0x1C;
			case 0x8FA:
				return 0x1D;
			case 0x8FB:
				return 0x24;
			case 0x8FC:
				return 0x2D;
			case 0x8FD:
				return 0x26;
			case 0x8FE:
				return 0x16;
			case 0x8FF:
				return 0x21;
			case 0x900:
				return 0x25;
			case 0x901:
				return 0x1C;
			case 0x902:
				return 0x19;
			case 0x903:
				return 0x18;
			case 0x904:
				return 0x1A;
			case 0x905:
				return 0x14;
			case 0x906:
				return 0x15;
			case 0x907:
				return 0x14;
			case 0x908:
				return 0x15;
			case 0x909:
				return 0x14;
			case 0x90A:
				return 0x15;
			case 0x90B:
				return 0x1C;
			case 0x90C:
				return 0x1C;
			case 0x90D:
				return 0x1B;
			case 0x90E:
				return 0x1A;
			case 0x90F:
				return 0x14;
			case 0x910:
				return 0x15;
			case 0x911:
				return 0x1B;
			case 0x912:
				return 0x1A;
			case 0x913:
				return 0x14;
			case 0x914:
				return 0x15;
			case 0x915:
				return 0x15;
			case 0x916:
				return 0x16;
			case 0x917:
				return 0x15;
			case 0x918:
				return 0x16;
			case 0x919:
				return 0x16;
			case 0x91A:
				return 0x15;
			case 0x91B:
				return 0x16;
			case 0x91C:
				return 0x15;
			case 0x91D:
				return 0x16;
			case 0x91E:
				return 0x16;
			case 0x91F:
				return 0x16;
			case 0x920:
				return 0x17;
			case 0x921:
				return 0x16;
			case 0x922:
				return 0x17;
			case 0x923:
				return 0x16;
			case 0x924:
				return 0x15;
			case 0x925:
				return 0x16;
			case 0x926:
				return 0x15;
			case 0x927:
				return 0x16;
			case 0x928:
				return 0x15;
			case 0x929:
				return 0x17;
			case 0x92A:
				return 0x15;
			case 0x92B:
				return 0x16;
			case 0x92C:
				return 0x15;
			case 0x92D:
				return 0x16;
			case 0x92E:
				return 0x15;
			case 0x92F:
				return 0x15;
			case 0x930:
				return 0x15;
			case 0x931:
				return 0x16;
			case 0x932:
				return 0x15;
			case 0x933:
				return 0x16;
			case 0x934:
				return 0x17;
			case 0x935:
				return 0x15;
			case 0x936:
				return 0x16;
			case 0x937:
				return 0x16;
			case 0x938:
				return 0x15;
			case 0x939:
				return 0x15;
			case 0x93A:
				return 0x19;
			case 0x93B:
				return 0x1A;
			case 0x93C:
				return 0x16;
			case 0x93D:
				return 0x19;
			case 0x93E:
				return 0x19;
			case 0x93F:
				return 0x18;
			case 0x940:
				return 0x19;
			case 0x941:
				return 0x18;
			case 0x942:
				return 0x19;
			case 0x943:
				return 0x20;
			case 0x944:
				return 0x21;
			case 0x945:
				return 0x1F;
			case 0x946:
				return 0x1E;
			case 0x947:
				return 0x18;
			case 0x948:
				return 0x19;
			case 0x949:
				return 0x1F;
			case 0x94A:
				return 0x1E;
			case 0x94B:
				return 0x18;
			case 0x94C:
				return 0x19;
			case 0x94D:
				return 0x17;
			case 0x94E:
				return 0x26;
			case 0x94F:
				return 0x19;
			case 0x950:
				return 0xE;
			case 0x951:
				return 0x1E;
			case 0x952:
				return 0x20;
			case 0x953:
				return 0x18;
			case 0x954:
				return 0x18;
			case 0x955:
				return 0x24;
			case 0x956:
				return 0x19;
			case 0x957:
				return 0x1A;
			case 0x958:
				return 0x15;
			case 0x959:
				return 0x17;
			case 0x95A:
				return 0x17;
			case 0x95B:
				return 0x15;
			case 0x95C:
				return 0x18;
			case 0x95D:
				return 0x16;
			case 0x95E:
				return 0x15;
			case 0x95F:
				return 0x16;
			case 0x960:
				return 0x1D;
			case 0x961:
				return 0x1D;
			case 0x962:
				return 0x20;
			case 0x963:
				return 0x21;
			case 0x964:
				return 0x11;
			case 0x965:
				return 0x18;
			case 0x966:
				return 0x16;
			case 0x967:
				return 0x15;
			case 0x968:
				return 0x15;
			case 0x969:
				return 0x17;
			case 0x96A:
				return 0x16;
			case 0x96B:
				return 0x16;
			case 0x96C:
				return 0x15;
			case 0x96D:
				return 0x17;
			case 0x96E:
				return 0x17;
			case 0x96F:
				return 0x16;
			case 0x970:
				return 0x1D;
			case 0x971:
				return 0x21;
			case 0x972:
				return 0x1B;
			case 0x973:
				return 0x15;
			case 0x974:
				return 0x16;
			case 0x975:
				return 0x15;
			case 0x976:
				return 0x15;
			case 0x977:
				return 0x16;
			case 0x978:
				return 0x1E;
			case 0x979:
				return 0x16;
			case 0x97A:
				return 0x1B;
			case 0x97B:
				return 0x16;
			case 0x97C:
				return 0x16;
			case 0x97D:
				return 0x1F;
			case 0x97E:
				return 0x17;
			case 0x97F:
				return 0x16;
			case 0x980:
				return 0xD;
			case 0x981:
				return 0x19;
			case 0x982:
				return 0x16;
			case 0x983:
				return 0x15;
			case 0x985:
				return 0x11;
			case 0x986:
				return 0x12;
			case 0x987:
				return 0x11;
			case 0x988:
				return 0x12;
			case 0x989:
				return 0x11;
			case 0x98A:
				return 0x12;
			case 0x98B:
				return 0x19;
			case 0x98C:
				return 0x19;
			case 0x98F:
				return 0x11;
			case 0x990:
				return 0x12;
			case 0x993:
				return 0x11;
			case 0x994:
				return 0x12;
			case 0x995:
				return 0x12;
			case 0x996:
				return 0x13;
			case 0x997:
				return 0x12;
			case 0x998:
				return 0x13;
			case 0x999:
				return 0x13;
			case 0x99A:
				return 0x12;
			case 0x99B:
				return 0x13;
			case 0x99C:
				return 0x12;
			case 0x99D:
				return 0x13;
			case 0x99E:
				return 0x13;
			case 0x99F:
				return 0x13;
			case 0x9A0:
				return 0x14;
			case 0x9A1:
				return 0x13;
			case 0x9A2:
				return 0x14;
			case 0x9A3:
				return 0x13;
			case 0x9A4:
				return 0x12;
			case 0x9A5:
				return 0x13;
			case 0x9A6:
				return 0x12;
			case 0x9A7:
				return 0x13;
			case 0x9A8:
				return 0x12;
			case 0x9AA:
				return 0x12;
			case 0x9AB:
				return 0x13;
			case 0x9AC:
				return 0x12;
			case 0x9AD:
				return 0x13;
			case 0x9AE:
				return 0x12;
			case 0x9AF:
				return 0x12;
			case 0x9B0:
				return 0x12;
			case 0x9B2:
				return 0x12;
			case 0x9B6:
				return 0x13;
			case 0x9B7:
				return 0x13;
			case 0x9B8:
				return 0x12;
			case 0x9B9:
				return 0x12;
			case 0x9BC:
				return 0x13;
			case 0x9BD:
				return 0x16;
			case 0x9BE:
				return 0x16;
			case 0x9BF:
				return 0x15;
			case 0x9C0:
				return 0x16;
			case 0x9C1:
				return 0x15;
			case 0x9C2:
				return 0x16;
			case 0x9C3:
				return 0x1D;
			case 0x9C4:
				return 0x1E;
			case 0x9C7:
				return 0x15;
			case 0x9C8:
				return 0x16;
			case 0x9CB:
				return 0x15;
			case 0x9CC:
				return 0x16;
			case 0x9CD:
				return 0x14;
			case 0x9CE:
				return 0x19;
			case 0x9D7:
				return 0x17;
			case 0x9DC:
				return 0x13;
			case 0x9DD:
				return 0x13;
			case 0x9DF:
				return 0x13;
			case 0x9E0:
				return 0x1A;
			case 0x9E1:
				return 0x1A;
			case 0x9E2:
				return 0x1D;
			case 0x9E3:
				return 0x1E;
			case 0x9E6:
				return 0x13;
			case 0x9E7:
				return 0x12;
			case 0x9E8:
				return 0x12;
			case 0x9E9:
				return 0x14;
			case 0x9EA:
				return 0x13;
			case 0x9EB:
				return 0x13;
			case 0x9EC:
				return 0x12;
			case 0x9ED:
				return 0x14;
			case 0x9EE:
				return 0x14;
			case 0x9EF:
				return 0x13;
			case 0x9F0:
				return 0x27;
			case 0x9F1:
				return 0x26;
			case 0x9F2:
				return 0x13;
			case 0x9F3:
				return 0x13;
			case 0x9F4:
				return 0x1F;
			case 0x9F5:
				return 0x1F;
			case 0x9F6:
				return 0x21;
			case 0x9F7:
				return 0x20;
			case 0x9F8:
				return 0x39;
			case 0x9F9:
				return 0x25;
			case 0x9FA:
				return 0xF;
			case 0x9FB:
				return 0x13;
			case 0x9FC:
				return 0x1E;
			case 0x9FD:
				return 0x1A;
			case 0x9FE:
				return 0x14;
			case 0xA01:
				return 0x19;
			case 0xA02:
				return 0x14;
			case 0xA03:
				return 0x16;
			case 0xA05:
				return 0x12;
			case 0xA06:
				return 0x13;
			case 0xA07:
				return 0x12;
			case 0xA08:
				return 0x13;
			case 0xA09:
				return 0x12;
			case 0xA0A:
				return 0x13;
			case 0xA0F:
				return 0x13;
			case 0xA10:
				return 0x13;
			case 0xA13:
				return 0x13;
			case 0xA14:
				return 0x13;
			case 0xA15:
				return 0x13;
			case 0xA16:
				return 0x14;
			case 0xA17:
				return 0x13;
			case 0xA18:
				return 0x14;
			case 0xA19:
				return 0x14;
			case 0xA1A:
				return 0x13;
			case 0xA1B:
				return 0x14;
			case 0xA1C:
				return 0x13;
			case 0xA1D:
				return 0x14;
			case 0xA1E:
				return 0x14;
			case 0xA1F:
				return 0x14;
			case 0xA20:
				return 0x15;
			case 0xA21:
				return 0x14;
			case 0xA22:
				return 0x15;
			case 0xA23:
				return 0x14;
			case 0xA24:
				return 0x13;
			case 0xA25:
				return 0x14;
			case 0xA26:
				return 0x13;
			case 0xA27:
				return 0x14;
			case 0xA28:
				return 0x13;
			case 0xA2A:
				return 0x13;
			case 0xA2B:
				return 0x14;
			case 0xA2C:
				return 0x13;
			case 0xA2D:
				return 0x14;
			case 0xA2E:
				return 0x13;
			case 0xA2F:
				return 0x13;
			case 0xA30:
				return 0x13;
			case 0xA32:
				return 0x13;
			case 0xA33:
				return 0x14;
			case 0xA35:
				return 0x13;
			case 0xA36:
				return 0x14;
			case 0xA38:
				return 0x13;
			case 0xA39:
				return 0x13;
			case 0xA3C:
				return 0x14;
			case 0xA3E:
				return 0x17;
			case 0xA3F:
				return 0x16;
			case 0xA40:
				return 0x17;
			case 0xA41:
				return 0x16;
			case 0xA42:
				return 0x17;
			case 0xA47:
				return 0x17;
			case 0xA48:
				return 0x17;
			case 0xA4B:
				return 0x17;
			case 0xA4C:
				return 0x17;
			case 0xA4D:
				return 0x15;
			case 0xA51:
				return 0x14;
			case 0xA59:
				return 0x15;
			case 0xA5A:
				return 0x15;
			case 0xA5B:
				return 0x13;
			case 0xA5C:
				return 0x14;
			case 0xA5E:
				return 0x13;
			case 0xA66:
				return 0x14;
			case 0xA67:
				return 0x13;
			case 0xA68:
				return 0x13;
			case 0xA69:
				return 0x15;
			case 0xA6A:
				return 0x14;
			case 0xA6B:
				return 0x14;
			case 0xA6C:
				return 0x13;
			case 0xA6D:
				return 0x15;
			case 0xA6E:
				return 0x15;
			case 0xA6F:
				return 0x14;
			case 0xA70:
				return 0xF;
			case 0xA71:
				return 0xF;
			case 0xA72:
				return 0xD;
			case 0xA73:
				return 0xD;
			case 0xA74:
				return 0x12;
			case 0xA75:
				return 0x15;
			case 0xA76:
				return 0x1B;
			case 0xA81:
				return 0x1A;
			case 0xA82:
				return 0x17;
			case 0xA83:
				return 0x16;
			case 0xA85:
				return 0x12;
			case 0xA86:
				return 0x13;
			case 0xA87:
				return 0x12;
			case 0xA88:
				return 0x13;
			case 0xA89:
				return 0x12;
			case 0xA8A:
				return 0x13;
			case 0xA8B:
				return 0x1A;
			case 0xA8C:
				return 0x1A;
			case 0xA8D:
				return 0x18;
			case 0xA8F:
				return 0x12;
			case 0xA90:
				return 0x13;
			case 0xA91:
				return 0x18;
			case 0xA93:
				return 0x12;
			case 0xA94:
				return 0x13;
			case 0xA95:
				return 0x13;
			case 0xA96:
				return 0x14;
			case 0xA97:
				return 0x13;
			case 0xA98:
				return 0x14;
			case 0xA99:
				return 0x14;
			case 0xA9A:
				return 0x13;
			case 0xA9B:
				return 0x14;
			case 0xA9C:
				return 0x13;
			case 0xA9D:
				return 0x14;
			case 0xA9E:
				return 0x14;
			case 0xA9F:
				return 0x14;
			case 0xAA0:
				return 0x15;
			case 0xAA1:
				return 0x14;
			case 0xAA2:
				return 0x15;
			case 0xAA3:
				return 0x14;
			case 0xAA4:
				return 0x13;
			case 0xAA5:
				return 0x14;
			case 0xAA6:
				return 0x13;
			case 0xAA7:
				return 0x14;
			case 0xAA8:
				return 0x13;
			case 0xAAA:
				return 0x13;
			case 0xAAB:
				return 0x14;
			case 0xAAC:
				return 0x13;
			case 0xAAD:
				return 0x14;
			case 0xAAE:
				return 0x13;
			case 0xAAF:
				return 0x13;
			case 0xAB0:
				return 0x13;
			case 0xAB2:
				return 0x13;
			case 0xAB3:
				return 0x14;
			case 0xAB5:
				return 0x13;
			case 0xAB6:
				return 0x14;
			case 0xAB7:
				return 0x14;
			case 0xAB8:
				return 0x13;
			case 0xAB9:
				return 0x13;
			case 0xABC:
				return 0x14;
			case 0xABD:
				return 0x17;
			case 0xABE:
				return 0x17;
			case 0xABF:
				return 0x16;
			case 0xAC0:
				return 0x17;
			case 0xAC1:
				return 0x16;
			case 0xAC2:
				return 0x17;
			case 0xAC3:
				return 0x1E;
			case 0xAC4:
				return 0x1F;
			case 0xAC5:
				return 0x1D;
			case 0xAC7:
				return 0x16;
			case 0xAC8:
				return 0x17;
			case 0xAC9:
				return 0x1D;
			case 0xACB:
				return 0x16;
			case 0xACC:
				return 0x17;
			case 0xACD:
				return 0x15;
			case 0xAD0:
				return 0xC;
			case 0xAE0:
				return 0x1B;
			case 0xAE1:
				return 0x1B;
			case 0xAE2:
				return 0x1E;
			case 0xAE3:
				return 0x1F;
			case 0xAE6:
				return 0x14;
			case 0xAE7:
				return 0x13;
			case 0xAE8:
				return 0x13;
			case 0xAE9:
				return 0x15;
			case 0xAEA:
				return 0x14;
			case 0xAEB:
				return 0x14;
			case 0xAEC:
				return 0x13;
			case 0xAED:
				return 0x15;
			case 0xAEE:
				return 0x15;
			case 0xAEF:
				return 0x14;
			case 0xAF0:
				return 0x1B;
			case 0xAF1:
				return 0x14;
			case 0xAF9:
				return 0x14;
			case 0xAFA:
				return 0x14;
			case 0xAFB:
				return 0x15;
			case 0xAFC:
				return 0x15;
			case 0xAFD:
				return 0x24;
			case 0xAFE:
				return 0x21;
			case 0xAFF:
				return 0x25;
			case 0xB01:
				return 0x17;
			case 0xB02:
				return 0x14;
			case 0xB03:
				return 0x13;
			case 0xB05:
				return 0xF;
			case 0xB06:
				return 0x10;
			case 0xB07:
				return 0xF;
			case 0xB08:
				return 0x10;
			case 0xB09:
				return 0xF;
			case 0xB0A:
				return 0x10;
			case 0xB0B:
				return 0x17;
			case 0xB0C:
				return 0x17;
			case 0xB0F:
				return 0xF;
			case 0xB10:
				return 0x10;
			case 0xB13:
				return 0xF;
			case 0xB14:
				return 0x10;
			case 0xB15:
				return 0x10;
			case 0xB16:
				return 0x11;
			case 0xB17:
				return 0x10;
			case 0xB18:
				return 0x11;
			case 0xB19:
				return 0x11;
			case 0xB1A:
				return 0x10;
			case 0xB1B:
				return 0x11;
			case 0xB1C:
				return 0x10;
			case 0xB1D:
				return 0x11;
			case 0xB1E:
				return 0x11;
			case 0xB1F:
				return 0x11;
			case 0xB20:
				return 0x12;
			case 0xB21:
				return 0x11;
			case 0xB22:
				return 0x12;
			case 0xB23:
				return 0x11;
			case 0xB24:
				return 0x10;
			case 0xB25:
				return 0x11;
			case 0xB26:
				return 0x10;
			case 0xB27:
				return 0x11;
			case 0xB28:
				return 0x10;
			case 0xB2A:
				return 0x10;
			case 0xB2B:
				return 0x11;
			case 0xB2C:
				return 0x10;
			case 0xB2D:
				return 0x11;
			case 0xB2E:
				return 0x10;
			case 0xB2F:
				return 0x10;
			case 0xB30:
				return 0x10;
			case 0xB32:
				return 0x10;
			case 0xB33:
				return 0x11;
			case 0xB35:
				return 0x10;
			case 0xB36:
				return 0x11;
			case 0xB37:
				return 0x11;
			case 0xB38:
				return 0x10;
			case 0xB39:
				return 0x10;
			case 0xB3C:
				return 0x11;
			case 0xB3D:
				return 0x14;
			case 0xB3E:
				return 0x14;
			case 0xB3F:
				return 0x13;
			case 0xB40:
				return 0x14;
			case 0xB41:
				return 0x13;
			case 0xB42:
				return 0x14;
			case 0xB43:
				return 0x1B;
			case 0xB44:
				return 0x1C;
			case 0xB47:
				return 0x13;
			case 0xB48:
				return 0x14;
			case 0xB4B:
				return 0x13;
			case 0xB4C:
				return 0x14;
			case 0xB4D:
				return 0x12;
			case 0xB55:
				return 0x14;
			case 0xB56:
				return 0x15;
			case 0xB57:
				return 0x15;
			case 0xB5C:
				return 0x11;
			case 0xB5D:
				return 0x11;
			case 0xB5F:
				return 0x11;
			case 0xB60:
				return 0x18;
			case 0xB61:
				return 0x18;
			case 0xB62:
				return 0x1B;
			case 0xB63:
				return 0x1C;
			case 0xB66:
				return 0x11;
			case 0xB67:
				return 0x10;
			case 0xB68:
				return 0x10;
			case 0xB69:
				return 0x12;
			case 0xB6A:
				return 0x11;
			case 0xB6B:
				return 0x11;
			case 0xB6C:
				return 0x10;
			case 0xB6D:
				return 0x12;
			case 0xB6E:
				return 0x12;
			case 0xB6F:
				return 0x11;
			case 0xB70:
				return 0xD;
			case 0xB71:
				return 0x10;
			case 0xB72:
				return 0x1B;
			case 0xB73:
				return 0x18;
			case 0xB74:
				return 0x1E;
			case 0xB75:
				return 0x1D;
			case 0xB76:
				return 0x1A;
			case 0xB77:
				return 0x20;
			case 0xB82:
				return 0x14;
			case 0xB83:
				return 0x13;
			case 0xB85:
				return 0xF;
			case 0xB86:
				return 0x10;
			case 0xB87:
				return 0xF;
			case 0xB88:
				return 0x10;
			case 0xB89:
				return 0xF;
			case 0xB8A:
				return 0x10;
			case 0xB8E:
				return 0xF;
			case 0xB8F:
				return 0x10;
			case 0xB90:
				return 0x10;
			case 0xB92:
				return 0xF;
			case 0xB93:
				return 0x10;
			case 0xB94:
				return 0x10;
			case 0xB95:
				return 0x10;
			case 0xB99:
				return 0x11;
			case 0xB9A:
				return 0x10;
			case 0xB9C:
				return 0x10;
			case 0xB9E:
				return 0x11;
			case 0xB9F:
				return 0x11;
			case 0xBA3:
				return 0x11;
			case 0xBA4:
				return 0x10;
			case 0xBA8:
				return 0x10;
			case 0xBA9:
				return 0x12;
			case 0xBAA:
				return 0x10;
			case 0xBAE:
				return 0x10;
			case 0xBAF:
				return 0x10;
			case 0xBB0:
				return 0x10;
			case 0xBB1:
				return 0x11;
			case 0xBB2:
				return 0x10;
			case 0xBB3:
				return 0x11;
			case 0xBB4:
				return 0x12;
			case 0xBB5:
				return 0x10;
			case 0xBB6:
				return 0x11;
			case 0xBB7:
				return 0x11;
			case 0xBB8:
				return 0x10;
			case 0xBB9:
				return 0x10;
			case 0xBBE:
				return 0x14;
			case 0xBBF:
				return 0x13;
			case 0xBC0:
				return 0x14;
			case 0xBC1:
				return 0x13;
			case 0xBC2:
				return 0x14;
			case 0xBC6:
				return 0x13;
			case 0xBC7:
				return 0x14;
			case 0xBC8:
				return 0x14;
			case 0xBCA:
				return 0x13;
			case 0xBCB:
				return 0x14;
			case 0xBCC:
				return 0x14;
			case 0xBCD:
				return 0x12;
			case 0xBD0:
				return 0x9;
			case 0xBD7:
				return 0x15;
			case 0xBE6:
				return 0x11;
			case 0xBE7:
				return 0x10;
			case 0xBE8:
				return 0x10;
			case 0xBE9:
				return 0x12;
			case 0xBEA:
				return 0x11;
			case 0xBEB:
				return 0x11;
			case 0xBEC:
				return 0x10;
			case 0xBED:
				return 0x12;
			case 0xBEE:
				return 0x12;
			case 0xBEF:
				return 0x11;
			case 0xBF0:
				return 0x11;
			case 0xBF1:
				return 0x19;
			case 0xBF2:
				return 0x1A;
			case 0xBF3:
				return 0xF;
			case 0xBF4:
				return 0x11;
			case 0xBF5:
				return 0x10;
			case 0xBF6:
				return 0x11;
			case 0xBF7:
				return 0x12;
			case 0xBF8:
				return 0x14;
			case 0xBF9:
				return 0x11;
			case 0xBFA:
				return 0x12;
			case 0xC00:
				return 0x28;
			case 0xC01:
				return 0x18;
			case 0xC02:
				return 0x15;
			case 0xC03:
				return 0x14;
			case 0xC04:
				return 0x25;
			case 0xC05:
				return 0x10;
			case 0xC06:
				return 0x11;
			case 0xC07:
				return 0x10;
			case 0xC08:
				return 0x11;
			case 0xC09:
				return 0x10;
			case 0xC0A:
				return 0x11;
			case 0xC0B:
				return 0x18;
			case 0xC0C:
				return 0x18;
			case 0xC0E:
				return 0x10;
			case 0xC0F:
				return 0x11;
			case 0xC10:
				return 0x11;
			case 0xC12:
				return 0x10;
			case 0xC13:
				return 0x11;
			case 0xC14:
				return 0x11;
			case 0xC15:
				return 0x11;
			case 0xC16:
				return 0x12;
			case 0xC17:
				return 0x11;
			case 0xC18:
				return 0x12;
			case 0xC19:
				return 0x12;
			case 0xC1A:
				return 0x11;
			case 0xC1B:
				return 0x12;
			case 0xC1C:
				return 0x11;
			case 0xC1D:
				return 0x12;
			case 0xC1E:
				return 0x12;
			case 0xC1F:
				return 0x12;
			case 0xC20:
				return 0x13;
			case 0xC21:
				return 0x12;
			case 0xC22:
				return 0x13;
			case 0xC23:
				return 0x12;
			case 0xC24:
				return 0x11;
			case 0xC25:
				return 0x12;
			case 0xC26:
				return 0x11;
			case 0xC27:
				return 0x12;
			case 0xC28:
				return 0x11;
			case 0xC2A:
				return 0x11;
			case 0xC2B:
				return 0x12;
			case 0xC2C:
				return 0x11;
			case 0xC2D:
				return 0x12;
			case 0xC2E:
				return 0x11;
			case 0xC2F:
				return 0x11;
			case 0xC30:
				return 0x11;
			case 0xC31:
				return 0x12;
			case 0xC32:
				return 0x11;
			case 0xC33:
				return 0x12;
			case 0xC34:
				return 0x13;
			case 0xC35:
				return 0x11;
			case 0xC36:
				return 0x12;
			case 0xC37:
				return 0x12;
			case 0xC38:
				return 0x11;
			case 0xC39:
				return 0x11;
			case 0xC3D:
				return 0x15;
			case 0xC3E:
				return 0x15;
			case 0xC3F:
				return 0x14;
			case 0xC40:
				return 0x15;
			case 0xC41:
				return 0x14;
			case 0xC42:
				return 0x15;
			case 0xC43:
				return 0x1C;
			case 0xC44:
				return 0x1D;
			case 0xC46:
				return 0x14;
			case 0xC47:
				return 0x15;
			case 0xC48:
				return 0x15;
			case 0xC4A:
				return 0x14;
			case 0xC4B:
				return 0x15;
			case 0xC4C:
				return 0x15;
			case 0xC4D:
				return 0x13;
			case 0xC55:
				return 0x13;
			case 0xC56:
				return 0x16;
			case 0xC58:
				return 0x12;
			case 0xC59:
				return 0x12;
			case 0xC5A:
				return 0x13;
			case 0xC60:
				return 0x19;
			case 0xC61:
				return 0x19;
			case 0xC62:
				return 0x1C;
			case 0xC63:
				return 0x1D;
			case 0xC66:
				return 0x12;
			case 0xC67:
				return 0x11;
			case 0xC68:
				return 0x11;
			case 0xC69:
				return 0x13;
			case 0xC6A:
				return 0x12;
			case 0xC6B:
				return 0x12;
			case 0xC6C:
				return 0x11;
			case 0xC6D:
				return 0x13;
			case 0xC6E:
				return 0x13;
			case 0xC6F:
				return 0x12;
			case 0xC77:
				return 0x14;
			case 0xC78:
				return 0x32;
			case 0xC79:
				return 0x31;
			case 0xC7A:
				return 0x31;
			case 0xC7B:
				return 0x33;
			case 0xC7C:
				return 0x32;
			case 0xC7D:
				return 0x32;
			case 0xC7E:
				return 0x34;
			case 0xC7F:
				return 0x12;
			case 0xC80:
				return 0x21;
			case 0xC81:
				return 0x19;
			case 0xC82:
				return 0x16;
			case 0xC83:
				return 0x15;
			case 0xC84:
				return 0x15;
			case 0xC85:
				return 0x11;
			case 0xC86:
				return 0x12;
			case 0xC87:
				return 0x11;
			case 0xC88:
				return 0x12;
			case 0xC89:
				return 0x11;
			case 0xC8A:
				return 0x12;
			case 0xC8B:
				return 0x19;
			case 0xC8C:
				return 0x19;
			case 0xC8E:
				return 0x11;
			case 0xC8F:
				return 0x12;
			case 0xC90:
				return 0x12;
			case 0xC92:
				return 0x11;
			case 0xC93:
				return 0x12;
			case 0xC94:
				return 0x12;
			case 0xC95:
				return 0x12;
			case 0xC96:
				return 0x13;
			case 0xC97:
				return 0x12;
			case 0xC98:
				return 0x13;
			case 0xC99:
				return 0x13;
			case 0xC9A:
				return 0x12;
			case 0xC9B:
				return 0x13;
			case 0xC9C:
				return 0x12;
			case 0xC9D:
				return 0x13;
			case 0xC9E:
				return 0x13;
			case 0xC9F:
				return 0x13;
			case 0xCA0:
				return 0x14;
			case 0xCA1:
				return 0x13;
			case 0xCA2:
				return 0x14;
			case 0xCA3:
				return 0x13;
			case 0xCA4:
				return 0x12;
			case 0xCA5:
				return 0x13;
			case 0xCA6:
				return 0x12;
			case 0xCA7:
				return 0x13;
			case 0xCA8:
				return 0x12;
			case 0xCAA:
				return 0x12;
			case 0xCAB:
				return 0x13;
			case 0xCAC:
				return 0x12;
			case 0xCAD:
				return 0x13;
			case 0xCAE:
				return 0x12;
			case 0xCAF:
				return 0x12;
			case 0xCB0:
				return 0x12;
			case 0xCB1:
				return 0x13;
			case 0xCB2:
				return 0x12;
			case 0xCB3:
				return 0x13;
			case 0xCB5:
				return 0x12;
			case 0xCB6:
				return 0x13;
			case 0xCB7:
				return 0x13;
			case 0xCB8:
				return 0x12;
			case 0xCB9:
				return 0x12;
			case 0xCBC:
				return 0x13;
			case 0xCBD:
				return 0x16;
			case 0xCBE:
				return 0x16;
			case 0xCBF:
				return 0x15;
			case 0xCC0:
				return 0x16;
			case 0xCC1:
				return 0x15;
			case 0xCC2:
				return 0x16;
			case 0xCC3:
				return 0x1D;
			case 0xCC4:
				return 0x1E;
			case 0xCC6:
				return 0x15;
			case 0xCC7:
				return 0x16;
			case 0xCC8:
				return 0x16;
			case 0xCCA:
				return 0x15;
			case 0xCCB:
				return 0x16;
			case 0xCCC:
				return 0x16;
			case 0xCCD:
				return 0x14;
			case 0xCD5:
				return 0x14;
			case 0xCD6:
				return 0x17;
			case 0xCDE:
				return 0x12;
			case 0xCE0:
				return 0x1A;
			case 0xCE1:
				return 0x1A;
			case 0xCE2:
				return 0x1D;
			case 0xCE3:
				return 0x1E;
			case 0xCE6:
				return 0x13;
			case 0xCE7:
				return 0x12;
			case 0xCE8:
				return 0x12;
			case 0xCE9:
				return 0x14;
			case 0xCEA:
				return 0x13;
			case 0xCEB:
				return 0x13;
			case 0xCEC:
				return 0x12;
			case 0xCED:
				return 0x14;
			case 0xCEE:
				return 0x14;
			case 0xCEF:
				return 0x13;
			case 0xCF1:
				return 0x19;
			case 0xCF2:
				return 0x19;
			case 0xD00:
				return 0x28;
			case 0xD01:
				return 0x1B;
			case 0xD02:
				return 0x18;
			case 0xD03:
				return 0x17;
			case 0xD04:
				return 0x20;
			case 0xD05:
				return 0x13;
			case 0xD06:
				return 0x14;
			case 0xD07:
				return 0x13;
			case 0xD08:
				return 0x14;
			case 0xD09:
				return 0x13;
			case 0xD0A:
				return 0x14;
			case 0xD0B:
				return 0x1B;
			case 0xD0C:
				return 0x1B;
			case 0xD0E:
				return 0x13;
			case 0xD0F:
				return 0x14;
			case 0xD10:
				return 0x14;
			case 0xD12:
				return 0x13;
			case 0xD13:
				return 0x14;
			case 0xD14:
				return 0x14;
			case 0xD15:
				return 0x14;
			case 0xD16:
				return 0x15;
			case 0xD17:
				return 0x14;
			case 0xD18:
				return 0x15;
			case 0xD19:
				return 0x15;
			case 0xD1A:
				return 0x14;
			case 0xD1B:
				return 0x15;
			case 0xD1C:
				return 0x14;
			case 0xD1D:
				return 0x15;
			case 0xD1E:
				return 0x15;
			case 0xD1F:
				return 0x15;
			case 0xD20:
				return 0x16;
			case 0xD21:
				return 0x15;
			case 0xD22:
				return 0x16;
			case 0xD23:
				return 0x15;
			case 0xD24:
				return 0x14;
			case 0xD25:
				return 0x15;
			case 0xD26:
				return 0x14;
			case 0xD27:
				return 0x15;
			case 0xD28:
				return 0x14;
			case 0xD29:
				return 0x16;
			case 0xD2A:
				return 0x14;
			case 0xD2B:
				return 0x15;
			case 0xD2C:
				return 0x14;
			case 0xD2D:
				return 0x15;
			case 0xD2E:
				return 0x14;
			case 0xD2F:
				return 0x14;
			case 0xD30:
				return 0x14;
			case 0xD31:
				return 0x15;
			case 0xD32:
				return 0x14;
			case 0xD33:
				return 0x15;
			case 0xD34:
				return 0x16;
			case 0xD35:
				return 0x14;
			case 0xD36:
				return 0x15;
			case 0xD37:
				return 0x15;
			case 0xD38:
				return 0x14;
			case 0xD39:
				return 0x14;
			case 0xD3A:
				return 0x16;
			case 0xD3B:
				return 0x23;
			case 0xD3C:
				return 0x1F;
			case 0xD3D:
				return 0x18;
			case 0xD3E:
				return 0x18;
			case 0xD3F:
				return 0x17;
			case 0xD40:
				return 0x18;
			case 0xD41:
				return 0x17;
			case 0xD42:
				return 0x18;
			case 0xD43:
				return 0x1F;
			case 0xD44:
				return 0x20;
			case 0xD46:
				return 0x17;
			case 0xD47:
				return 0x18;
			case 0xD48:
				return 0x18;
			case 0xD4A:
				return 0x17;
			case 0xD4B:
				return 0x18;
			case 0xD4C:
				return 0x18;
			case 0xD4D:
				return 0x16;
			case 0xD4E:
				return 0x1A;
			case 0xD4F:
				return 0x14;
			case 0xD54:
				return 0x1A;
			case 0xD55:
				return 0x1A;
			case 0xD56:
				return 0x1C;
			case 0xD57:
				return 0x19;
			case 0xD58:
				return 0x30;
			case 0xD59:
				return 0x20;
			case 0xD5A:
				return 0x24;
			case 0xD5B:
				return 0x21;
			case 0xD5C:
				return 0x1D;
			case 0xD5D:
				return 0x24;
			case 0xD5E:
				return 0x1D;
			case 0xD5F:
				return 0x1C;
			case 0xD60:
				return 0x1C;
			case 0xD61:
				return 0x1C;
			case 0xD62:
				return 0x1F;
			case 0xD63:
				return 0x20;
			case 0xD66:
				return 0x15;
			case 0xD67:
				return 0x14;
			case 0xD68:
				return 0x14;
			case 0xD69:
				return 0x16;
			case 0xD6A:
				return 0x15;
			case 0xD6B:
				return 0x15;
			case 0xD6C:
				return 0x14;
			case 0xD6D:
				return 0x16;
			case 0xD6E:
				return 0x16;
			case 0xD6F:
				return 0x15;
			case 0xD70:
				return 0x15;
			case 0xD71:
				return 0x1D;
			case 0xD72:
				return 0x1E;
			case 0xD73:
				return 0x1F;
			case 0xD74:
				return 0x1C;
			case 0xD75:
				return 0x22;
			case 0xD76:
				return 0x21;
			case 0xD77:
				return 0x1E;
			case 0xD78:
				return 0x24;
			case 0xD79:
				return 0x14;
			case 0xD7A:
				return 0x1B;
			case 0xD7B:
				return 0x1A;
			case 0xD7C:
				return 0x1B;
			case 0xD7D:
				return 0x1A;
			case 0xD7E:
				return 0x1B;
			case 0xD7F:
				return 0x1A;
			case 0xD81:
				return 0x19;
			case 0xD82:
				return 0x18;
			case 0xD83:
				return 0x17;
			case 0xD85:
				return 0x16;
			case 0xD86:
				return 0x17;
			case 0xD87:
				return 0x17;
			case 0xD88:
				return 0x18;
			case 0xD89:
				return 0x16;
			case 0xD8A:
				return 0x17;
			case 0xD8B:
				return 0x16;
			case 0xD8C:
				return 0x17;
			case 0xD8D:
				return 0x18;
			case 0xD8E:
				return 0x19;
			case 0xD8F:
				return 0x18;
			case 0xD90:
				return 0x19;
			case 0xD91:
				return 0x16;
			case 0xD92:
				return 0x17;
			case 0xD93:
				return 0x17;
			case 0xD94:
				return 0x16;
			case 0xD95:
				return 0x17;
			case 0xD96:
				return 0x17;
			case 0xD9A:
				return 0x22;
			case 0xD9B:
				return 0x23;
			case 0xD9C:
				return 0x22;
			case 0xD9D:
				return 0x23;
			case 0xD9E:
				return 0x22;
			case 0xD9F:
				return 0x1F;
			case 0xDA0:
				return 0x22;
			case 0xDA1:
				return 0x23;
			case 0xDA2:
				return 0x22;
			case 0xDA3:
				return 0x23;
			case 0xDA4:
				return 0x22;
			case 0xDA5:
				return 0x2C;
			case 0xDA6:
				return 0x1F;
			case 0xDA7:
				return 0x23;
			case 0xDA8:
				return 0x24;
			case 0xDA9:
				return 0x23;
			case 0xDAA:
				return 0x24;
			case 0xDAB:
				return 0x21;
			case 0xDAC:
				return 0x20;
			case 0xDAD:
				return 0x22;
			case 0xDAE:
				return 0x23;
			case 0xDAF:
				return 0x22;
			case 0xDB0:
				return 0x23;
			case 0xDB1:
				return 0x1F;
			case 0xDB3:
				return 0x1F;
			case 0xDB4:
				return 0x22;
			case 0xDB5:
				return 0x23;
			case 0xDB6:
				return 0x22;
			case 0xDB7:
				return 0x23;
			case 0xDB8:
				return 0x17;
			case 0xDB9:
				return 0x1C;
			case 0xDBA:
				return 0x17;
			case 0xDBB:
				return 0x17;
			case 0xDBD:
				return 0x1F;
			case 0xDC0:
				return 0x17;
			case 0xDC1:
				return 0x1F;
			case 0xDC2:
				return 0x21;
			case 0xDC3:
				return 0x1F;
			case 0xDC4:
				return 0x17;
			case 0xDC5:
				return 0x21;
			case 0xDC6:
				return 0x17;
			case 0xDCA:
				return 0x17;
			case 0xDCF:
				return 0x1E;
			case 0xDD0:
				return 0x24;
			case 0xDD1:
				return 0x23;
			case 0xDD2:
				return 0x22;
			case 0xDD3:
				return 0x21;
			case 0xDD4:
				return 0x23;
			case 0xDD6:
				return 0x22;
			case 0xDD8:
				return 0x20;
			case 0xDD9:
				return 0x1B;
			case 0xDDA:
				return 0x20;
			case 0xDDB:
				return 0x1E;
			case 0xDDC:
				return 0x2A;
			case 0xDDD:
				return 0x2F;
			case 0xDDE:
				return 0x2B;
			case 0xDDF:
				return 0x1F;
			case 0xDE6:
				return 0x18;
			case 0xDE7:
				return 0x17;
			case 0xDE8:
				return 0x17;
			case 0xDE9:
				return 0x19;
			case 0xDEA:
				return 0x18;
			case 0xDEB:
				return 0x18;
			case 0xDEC:
				return 0x17;
			case 0xDED:
				return 0x19;
			case 0xDEE:
				return 0x19;
			case 0xDEF:
				return 0x18;
			case 0xDF2:
				return 0x25;
			case 0xDF3:
				return 0x24;
			case 0xDF4:
				return 0x1F;
			case 0xE01:
				return 0x16;
			case 0xE02:
				return 0x18;
			case 0xE03:
				return 0x19;
			case 0xE04:
				return 0x19;
			case 0xE05:
				return 0x18;
			case 0xE06:
				return 0x1B;
			case 0xE07:
				return 0x17;
			case 0xE08:
				return 0x18;
			case 0xE09:
				return 0x19;
			case 0xE0A:
				return 0x19;
			case 0xE0B:
				return 0x15;
			case 0xE0C:
				return 0x18;
			case 0xE0D:
				return 0x17;
			case 0xE0E:
				return 0x18;
			case 0xE0F:
				return 0x18;
			case 0xE10:
				return 0x18;
			case 0xE11:
				return 0x1E;
			case 0xE12:
				return 0x1B;
			case 0xE13:
				return 0x16;
			case 0xE14:
				return 0x16;
			case 0xE15:
				return 0x16;
			case 0xE16:
				return 0x19;
			case 0xE17:
				return 0x1A;
			case 0xE18:
				return 0x19;
			case 0xE19:
				return 0x15;
			case 0xE1A:
				return 0x19;
			case 0xE1B:
				return 0x16;
			case 0xE1C:
				return 0x19;
			case 0xE1D:
				return 0x15;
			case 0xE1E:
				return 0x18;
			case 0xE1F:
				return 0x16;
			case 0xE20:
				return 0x1B;
			case 0xE21:
				return 0x15;
			case 0xE22:
				return 0x16;
			case 0xE23:
				return 0x16;
			case 0xE24:
				return 0x12;
			case 0xE25:
				return 0x17;
			case 0xE26:
				return 0x12;
			case 0xE27:
				return 0x17;
			case 0xE28:
				return 0x17;
			case 0xE29:
				return 0x17;
			case 0xE2A:
				return 0x16;
			case 0xE2B:
				return 0x16;
			case 0xE2C:
				return 0x18;
			case 0xE2D:
				return 0x15;
			case 0xE2E:
				return 0x19;
			case 0xE2F:
				return 0x19;
			case 0xE30:
				return 0x16;
			case 0xE31:
				return 0x1C;
			case 0xE32:
				return 0x17;
			case 0xE33:
				return 0x17;
			case 0xE34:
				return 0x16;
			case 0xE35:
				return 0x17;
			case 0xE36:
				return 0x17;
			case 0xE37:
				return 0x18;
			case 0xE38:
				return 0x16;
			case 0xE39:
				return 0x17;
			case 0xE3A:
				return 0x17;
			case 0xE3F:
				return 0x1A;
			case 0xE40:
				return 0x16;
			case 0xE41:
				return 0x17;
			case 0xE42:
				return 0x16;
			case 0xE43:
				return 0x1F;
			case 0xE44:
				return 0x20;
			case 0xE45:
				return 0x1B;
			case 0xE46:
				return 0x18;
			case 0xE47:
				return 0x19;
			case 0xE48:
				return 0x16;
			case 0xE49:
				return 0x17;
			case 0xE4A:
				return 0x17;
			case 0xE4B:
				return 0x1C;
			case 0xE4C:
				return 0x1B;
			case 0xE4D:
				return 0x18;
			case 0xE4E:
				return 0x18;
			case 0xE4F:
				return 0x17;
			case 0xE50:
				return 0x10;
			case 0xE51:
				return 0xF;
			case 0xE52:
				return 0xF;
			case 0xE53:
				return 0x11;
			case 0xE54:
				return 0x10;
			case 0xE55:
				return 0x10;
			case 0xE56:
				return 0xF;
			case 0xE57:
				return 0x11;
			case 0xE58:
				return 0x11;
			case 0xE59:
				return 0x10;
			case 0xE5A:
				return 0x1A;
			case 0xE5B:
				return 0x16;
			case 0xE81:
				return 0xE;
			case 0xE82:
				return 0x14;
			case 0xE84:
				return 0x13;
			case 0xE86:
				return 0x14;
			case 0xE87:
				return 0xF;
			case 0xE88:
				return 0xE;
			case 0xE89:
				return 0x14;
			case 0xE8A:
				return 0x12;
			case 0xE8C:
				return 0x14;
			case 0xE8D:
				return 0xF;
			case 0xE8E:
				return 0x14;
			case 0xE8F:
				return 0x14;
			case 0xE90:
				return 0x15;
			case 0xE91:
				return 0x14;
			case 0xE92:
				return 0x15;
			case 0xE93:
				return 0x14;
			case 0xE94:
				return 0xE;
			case 0xE95:
				return 0xE;
			case 0xE96:
				return 0x14;
			case 0xE97:
				return 0x13;
			case 0xE98:
				return 0x14;
			case 0xE99:
				return 0xE;
			case 0xE9A:
				return 0xE;
			case 0xE9B:
				return 0xE;
			case 0xE9C:
				return 0x14;
			case 0xE9D:
				return 0x12;
			case 0xE9E:
				return 0x13;
			case 0xE9F:
				return 0x13;
			case 0xEA0:
				return 0x14;
			case 0xEA1:
				return 0xE;
			case 0xEA2:
				return 0xE;
			case 0xEA3:
				return 0x13;
			case 0xEA5:
				return 0x13;
			case 0xEA7:
				return 0xE;
			case 0xEA8:
				return 0x18;
			case 0xEA9:
				return 0x18;
			case 0xEAA:
				return 0x13;
			case 0xEAB:
				return 0x13;
			case 0xEAC:
				return 0x14;
			case 0xEAD:
				return 0xD;
			case 0xEAE:
				return 0x12;
			case 0xEAF:
				return 0xD;
			case 0xEB0:
				return 0x11;
			case 0xEB1:
				return 0x17;
			case 0xEB2:
				return 0x12;
			case 0xEB3:
				return 0x12;
			case 0xEB4:
				return 0x11;
			case 0xEB5:
				return 0x12;
			case 0xEB6:
				return 0x11;
			case 0xEB7:
				return 0x12;
			case 0xEB8:
				return 0x11;
			case 0xEB9:
				return 0x12;
			case 0xEBA:
				return 0x15;
			case 0xEBB:
				return 0x17;
			case 0xEBC:
				return 0x16;
			case 0xEBD:
				return 0x17;
			case 0xEC0:
				return 0x11;
			case 0xEC1:
				return 0x12;
			case 0xEC2:
				return 0x11;
			case 0xEC3:
				return 0x12;
			case 0xEC4:
				return 0x12;
			case 0xEC6:
				return 0xA;
			case 0xEC8:
				return 0x10;
			case 0xEC9:
				return 0x11;
			case 0xECA:
				return 0x10;
			case 0xECB:
				return 0x14;
			case 0xECC:
				return 0x16;
			case 0xECD:
				return 0xE;
			case 0xED0:
				return 0xF;
			case 0xED1:
				return 0xE;
			case 0xED2:
				return 0xE;
			case 0xED3:
				return 0x10;
			case 0xED4:
				return 0xF;
			case 0xED5:
				return 0xF;
			case 0xED6:
				return 0xE;
			case 0xED7:
				return 0x10;
			case 0xED8:
				return 0x10;
			case 0xED9:
				return 0xF;
			case 0xEDC:
				return 0xA;
			case 0xEDD:
				return 0xA;
			case 0xEDE:
				return 0x13;
			case 0xEDF:
				return 0x14;
			case 0xF00:
				return 0x14;
			case 0xF01:
				return 0x26;
			case 0xF02:
				return 0x2B;
			case 0xF03:
				return 0x2C;
			case 0xF04:
				return 0x25;
			case 0xF05:
				return 0x25;
			case 0xF06:
				return 0x28;
			case 0xF07:
				return 0x23;
			case 0xF08:
				return 0x18;
			case 0xF09:
				return 0x1B;
			case 0xF0A:
				return 0x1F;
			case 0xF0B:
				return 0x21;
			case 0xF0C:
				return 0x23;
			case 0xF0D:
				return 0x12;
			case 0xF0E:
				return 0x17;
			case 0xF0F:
				return 0x18;
			case 0xF10:
				return 0x1D;
			case 0xF11:
				return 0x22;
			case 0xF12:
				return 0x1C;
			case 0xF13:
				return 0x2B;
			case 0xF14:
				return 0x18;
			case 0xF15:
				return 0x21;
			case 0xF16:
				return 0x21;
			case 0xF17:
				return 0x30;
			case 0xF18:
				return 0x24;
			case 0xF19:
				return 0x27;
			case 0xF1A:
				return 0x1C;
			case 0xF1B:
				return 0x1D;
			case 0xF1C:
				return 0x1C;
			case 0xF1D:
				return 0x1B;
			case 0xF1E:
				return 0x1C;
			case 0xF1F:
				return 0x20;
			case 0xF20:
				return 0x13;
			case 0xF21:
				return 0x12;
			case 0xF22:
				return 0x12;
			case 0xF23:
				return 0x14;
			case 0xF24:
				return 0x13;
			case 0xF25:
				return 0x13;
			case 0xF26:
				return 0x12;
			case 0xF27:
				return 0x14;
			case 0xF28:
				return 0x14;
			case 0xF29:
				return 0x13;
			case 0xF2A:
				return 0x17;
			case 0xF2B:
				return 0x17;
			case 0xF2C:
				return 0x19;
			case 0xF2D:
				return 0x18;
			case 0xF2E:
				return 0x18;
			case 0xF2F:
				return 0x17;
			case 0xF30:
				return 0x19;
			case 0xF31:
				return 0x19;
			case 0xF32:
				return 0x18;
			case 0xF33:
				return 0x18;
			case 0xF34:
				return 0x19;
			case 0xF35:
				return 0x20;
			case 0xF36:
				return 0x2C;
			case 0xF37:
				return 0x23;
			case 0xF38:
				return 0x15;
			case 0xF39:
				return 0x17;
			case 0xF3A:
				return 0x1C;
			case 0xF3B:
				return 0x1C;
			case 0xF3C:
				return 0x1C;
			case 0xF3D:
				return 0x1C;
			case 0xF3E:
				return 0x17;
			case 0xF3F:
				return 0x17;
			case 0xF40:
				return 0x12;
			case 0xF41:
				return 0x13;
			case 0xF42:
				return 0x12;
			case 0xF43:
				return 0x13;
			case 0xF44:
				return 0x13;
			case 0xF45:
				return 0x12;
			case 0xF46:
				return 0x13;
			case 0xF47:
				return 0x12;
			case 0xF49:
				return 0x13;
			case 0xF4A:
				return 0x13;
			case 0xF4B:
				return 0x14;
			case 0xF4C:
				return 0x13;
			case 0xF4D:
				return 0x14;
			case 0xF4E:
				return 0x13;
			case 0xF4F:
				return 0x12;
			case 0xF50:
				return 0x13;
			case 0xF51:
				return 0x12;
			case 0xF52:
				return 0x13;
			case 0xF53:
				return 0x12;
			case 0xF54:
				return 0x12;
			case 0xF55:
				return 0x13;
			case 0xF56:
				return 0x12;
			case 0xF57:
				return 0x13;
			case 0xF58:
				return 0x12;
			case 0xF59:
				return 0x13;
			case 0xF5A:
				return 0x14;
			case 0xF5B:
				return 0x13;
			case 0xF5C:
				return 0x14;
			case 0xF5D:
				return 0x12;
			case 0xF5E:
				return 0x13;
			case 0xF5F:
				return 0x12;
			case 0xF60:
				return 0x12;
			case 0xF61:
				return 0x12;
			case 0xF62:
				return 0x12;
			case 0xF63:
				return 0x12;
			case 0xF64:
				return 0x13;
			case 0xF65:
				return 0x13;
			case 0xF66:
				return 0x12;
			case 0xF67:
				return 0x12;
			case 0xF68:
				return 0x11;
			case 0xF69:
				return 0x14;
			case 0xF6A:
				return 0x1D;
			case 0xF6B:
				return 0x13;
			case 0xF6C:
				return 0x13;
			case 0xF71:
				return 0x16;
			case 0xF72:
				return 0x15;
			case 0xF73:
				return 0x16;
			case 0xF74:
				return 0x15;
			case 0xF75:
				return 0x16;
			case 0xF76:
				return 0x1D;
			case 0xF77:
				return 0x1E;
			case 0xF78:
				return 0x1D;
			case 0xF79:
				return 0x1E;
			case 0xF7A:
				return 0x15;
			case 0xF7B:
				return 0x16;
			case 0xF7C:
				return 0x15;
			case 0xF7D:
				return 0x16;
			case 0xF7E:
				return 0x1C;
			case 0xF7F:
				return 0x17;
			case 0xF80:
				return 0x1E;
			case 0xF81:
				return 0x1F;
			case 0xF82:
				return 0x1C;
			case 0xF83:
				return 0x16;
			case 0xF84:
				return 0x15;
			case 0xF85:
				return 0x14;
			case 0xF86:
				return 0x17;
			case 0xF87:
				return 0x18;
			case 0xF88:
				return 0x19;
			case 0xF89:
				return 0x16;
			case 0xF8A:
				return 0x1D;
			case 0xF8B:
				return 0x1D;
			case 0xF8C:
				return 0x1F;
			case 0xF8D:
				return 0x23;
			case 0xF8E:
				return 0x20;
			case 0xF8F:
				return 0x29;
			case 0xF90:
				return 0x1C;
			case 0xF91:
				return 0x1D;
			case 0xF92:
				return 0x1C;
			case 0xF93:
				return 0x1D;
			case 0xF94:
				return 0x1D;
			case 0xF95:
				return 0x1C;
			case 0xF96:
				return 0x1D;
			case 0xF97:
				return 0x1C;
			case 0xF99:
				return 0x1D;
			case 0xF9A:
				return 0x1D;
			case 0xF9B:
				return 0x1E;
			case 0xF9C:
				return 0x1D;
			case 0xF9D:
				return 0x1E;
			case 0xF9E:
				return 0x1D;
			case 0xF9F:
				return 0x1C;
			case 0xFA0:
				return 0x1D;
			case 0xFA1:
				return 0x1C;
			case 0xFA2:
				return 0x1D;
			case 0xFA3:
				return 0x1C;
			case 0xFA4:
				return 0x1C;
			case 0xFA5:
				return 0x1D;
			case 0xFA6:
				return 0x1C;
			case 0xFA7:
				return 0x1D;
			case 0xFA8:
				return 0x1C;
			case 0xFA9:
				return 0x1D;
			case 0xFAA:
				return 0x1E;
			case 0xFAB:
				return 0x1D;
			case 0xFAC:
				return 0x1E;
			case 0xFAD:
				return 0x1C;
			case 0xFAE:
				return 0x1D;
			case 0xFAF:
				return 0x1C;
			case 0xFB0:
				return 0x1C;
			case 0xFB1:
				return 0x1C;
			case 0xFB2:
				return 0x1C;
			case 0xFB3:
				return 0x1C;
			case 0xFB4:
				return 0x1D;
			case 0xFB5:
				return 0x1D;
			case 0xFB6:
				return 0x1C;
			case 0xFB7:
				return 0x1C;
			case 0xFB8:
				return 0x1B;
			case 0xFB9:
				return 0x1E;
			case 0xFBA:
				return 0x27;
			case 0xFBB:
				return 0x27;
			case 0xFBC:
				return 0x27;
			case 0xFBE:
				return 0x12;
			case 0xFBF:
				return 0x1F;
			case 0xFC0:
				return 0x25;
			case 0xFC1:
				return 0x25;
			case 0xFC2:
				return 0x24;
			case 0xFC3:
				return 0x25;
			case 0xFC4:
				return 0x17;
			case 0xFC5:
				return 0x17;
			case 0xFC6:
				return 0x1A;
			case 0xFC7:
				return 0x21;
			case 0xFC8:
				return 0x17;
			case 0xFC9:
				return 0x16;
			case 0xFCA:
				return 0x22;
			case 0xFCB:
				return 0x22;
			case 0xFCC:
				return 0x22;
			case 0xFCE:
				return 0x20;
			case 0xFCF:
				return 0x1B;
			case 0xFD0:
				return 0x25;
			case 0xFD1:
				return 0x24;
			case 0xFD2:
				return 0x18;
			case 0xFD3:
				return 0x31;
			case 0xFD4:
				return 0x31;
			case 0xFD5:
				return 0x19;
			case 0xFD6:
				return 0x18;
			case 0xFD7:
				return 0x23;
			case 0xFD8:
				return 0x22;
			case 0xFD9:
				return 0x21;
			case 0xFDA:
				return 0x22;
			case 0x1000:
				return 0x12;
			case 0x1001:
				return 0x13;
			case 0x1002:
				return 0x12;
			case 0x1003:
				return 0x13;
			case 0x1004:
				return 0x13;
			case 0x1005:
				return 0x12;
			case 0x1006:
				return 0x13;
			case 0x1007:
				return 0x12;
			case 0x1008:
				return 0x13;
			case 0x1009:
				return 0x13;
			case 0x100A:
				return 0x14;
			case 0x100B:
				return 0x13;
			case 0x100C:
				return 0x14;
			case 0x100D:
				return 0x13;
			case 0x100E:
				return 0x14;
			case 0x100F:
				return 0x13;
			case 0x1010:
				return 0x12;
			case 0x1011:
				return 0x13;
			case 0x1012:
				return 0x12;
			case 0x1013:
				return 0x13;
			case 0x1014:
				return 0x12;
			case 0x1015:
				return 0x12;
			case 0x1016:
				return 0x13;
			case 0x1017:
				return 0x12;
			case 0x1018:
				return 0x13;
			case 0x1019:
				return 0x12;
			case 0x101A:
				return 0x12;
			case 0x101B:
				return 0x12;
			case 0x101C:
				return 0x12;
			case 0x101D:
				return 0x12;
			case 0x101E:
				return 0x12;
			case 0x101F:
				return 0x12;
			case 0x1020:
				return 0x13;
			case 0x1021:
				return 0x11;
			case 0x1022:
				return 0x16;
			case 0x1023:
				return 0x11;
			case 0x1024:
				return 0x12;
			case 0x1025:
				return 0x11;
			case 0x1026:
				return 0x12;
			case 0x1027:
				return 0x11;
			case 0x1028:
				return 0x15;
			case 0x1029:
				return 0x11;
			case 0x102A:
				return 0x12;
			case 0x102B:
				return 0x1B;
			case 0x102C:
				return 0x16;
			case 0x102D:
				return 0x15;
			case 0x102E:
				return 0x16;
			case 0x102F:
				return 0x15;
			case 0x1030:
				return 0x16;
			case 0x1031:
				return 0x15;
			case 0x1032:
				return 0x16;
			case 0x1033:
				return 0x1A;
			case 0x1034:
				return 0x19;
			case 0x1035:
				return 0x1B;
			case 0x1036:
				return 0x16;
			case 0x1037:
				return 0x17;
			case 0x1038:
				return 0x15;
			case 0x1039:
				return 0x14;
			case 0x103A:
				return 0x12;
			case 0x103B:
				return 0x21;
			case 0x103C:
				return 0x21;
			case 0x103D:
				return 0x21;
			case 0x103E:
				return 0x21;
			case 0x103F:
				return 0x18;
			case 0x1040:
				return 0x13;
			case 0x1041:
				return 0x12;
			case 0x1042:
				return 0x12;
			case 0x1043:
				return 0x14;
			case 0x1044:
				return 0x13;
			case 0x1045:
				return 0x13;
			case 0x1046:
				return 0x12;
			case 0x1047:
				return 0x14;
			case 0x1048:
				return 0x14;
			case 0x1049:
				return 0x13;
			case 0x104A:
				return 0x1C;
			case 0x104B:
				return 0x15;
			case 0x104C:
				return 0x18;
			case 0x104D:
				return 0x19;
			case 0x104E:
				return 0x1E;
			case 0x104F:
				return 0x18;
			case 0x1050:
				return 0x13;
			case 0x1051:
				return 0x13;
			case 0x1052:
				return 0x19;
			case 0x1053:
				return 0x1A;
			case 0x1054:
				return 0x19;
			case 0x1055:
				return 0x1A;
			case 0x1056:
				return 0x1D;
			case 0x1057:
				return 0x1E;
			case 0x1058:
				return 0x1D;
			case 0x1059:
				return 0x1E;
			case 0x105A:
				return 0x17;
			case 0x105B:
				return 0x17;
			case 0x105C:
				return 0x17;
			case 0x105D:
				return 0x17;
			case 0x105E:
				return 0x25;
			case 0x105F:
				return 0x25;
			case 0x1060:
				return 0x25;
			case 0x1061:
				return 0x1E;
			case 0x1062:
				return 0x21;
			case 0x1063:
				return 0x23;
			case 0x1064:
				return 0x24;
			case 0x1065:
				return 0x25;
			case 0x1066:
				return 0x25;
			case 0x1067:
				return 0x28;
			case 0x1068:
				return 0x28;
			case 0x1069:
				return 0x26;
			case 0x106A:
				return 0x26;
			case 0x106B:
				return 0x26;
			case 0x106C:
				return 0x26;
			case 0x106D:
				return 0x26;
			case 0x106E:
				return 0x25;
			case 0x106F:
				return 0x25;
			case 0x1070:
				return 0x26;
			case 0x1071:
				return 0x20;
			case 0x1072:
				return 0x1C;
			case 0x1073:
				return 0x1B;
			case 0x1074:
				return 0x1C;
			case 0x1075:
				return 0x17;
			case 0x1076:
				return 0x18;
			case 0x1077:
				return 0x17;
			case 0x1078:
				return 0x17;
			case 0x1079:
				return 0x17;
			case 0x107A:
				return 0x18;
			case 0x107B:
				return 0x17;
			case 0x107C:
				return 0x17;
			case 0x107D:
				return 0x18;
			case 0x107E:
				return 0x17;
			case 0x107F:
				return 0x17;
			case 0x1080:
				return 0x18;
			case 0x1081:
				return 0x17;
			case 0x1082:
				return 0x26;
			case 0x1083:
				return 0x1B;
			case 0x1084:
				return 0x1A;
			case 0x1085:
				return 0x20;
			case 0x1086:
				return 0x20;
			case 0x1087:
				return 0x19;
			case 0x1088:
				return 0x19;
			case 0x1089:
				return 0x19;
			case 0x108A:
				return 0x19;
			case 0x108B:
				return 0x21;
			case 0x108C:
				return 0x21;
			case 0x108D:
				return 0x28;
			case 0x108E:
				return 0x20;
			case 0x108F:
				return 0x22;
			case 0x1090:
				return 0x18;
			case 0x1091:
				return 0x17;
			case 0x1092:
				return 0x17;
			case 0x1093:
				return 0x19;
			case 0x1094:
				return 0x18;
			case 0x1095:
				return 0x18;
			case 0x1096:
				return 0x17;
			case 0x1097:
				return 0x19;
			case 0x1098:
				return 0x19;
			case 0x1099:
				return 0x18;
			case 0x109A:
				return 0x1B;
			case 0x109B:
				return 0x1B;
			case 0x109C:
				return 0x1B;
			case 0x109D:
				return 0x1C;
			case 0x109E:
				return 0x18;
			case 0x109F:
				return 0x20;
			case 0x10A0:
				return 0x1B;
			case 0x10A1:
				return 0x1C;
			case 0x10A2:
				return 0x1C;
			case 0x10A3:
				return 0x1C;
			case 0x10A4:
				return 0x1B;
			case 0x10A5:
				return 0x1C;
			case 0x10A6:
				return 0x1C;
			case 0x10A7:
				return 0x1C;
			case 0x10A8:
				return 0x1B;
			case 0x10A9:
				return 0x1C;
			case 0x10AA:
				return 0x1C;
			case 0x10AB:
				return 0x1C;
			case 0x10AC:
				return 0x1C;
			case 0x10AD:
				return 0x1B;
			case 0x10AE:
				return 0x1C;
			case 0x10AF:
				return 0x1D;
			case 0x10B0:
				return 0x1C;
			case 0x10B1:
				return 0x1C;
			case 0x10B2:
				return 0x1C;
			case 0x10B3:
				return 0x1B;
			case 0x10B4:
				return 0x1D;
			case 0x10B5:
				return 0x1D;
			case 0x10B6:
				return 0x1D;
			case 0x10B7:
				return 0x1C;
			case 0x10B8:
				return 0x1D;
			case 0x10B9:
				return 0x1D;
			case 0x10BA:
				return 0x1C;
			case 0x10BB:
				return 0x1C;
			case 0x10BC:
				return 0x1C;
			case 0x10BD:
				return 0x1D;
			case 0x10BE:
				return 0x1C;
			case 0x10BF:
				return 0x1D;
			case 0x10C0:
				return 0x1C;
			case 0x10C1:
				return 0x1B;
			case 0x10C2:
				return 0x1C;
			case 0x10C3:
				return 0x1B;
			case 0x10C4:
				return 0x1C;
			case 0x10C5:
				return 0x1C;
			case 0x10C7:
				return 0x1B;
			case 0x10CD:
				return 0x1C;
			case 0x10D0:
				return 0x13;
			case 0x10D1:
				return 0x14;
			case 0x10D2:
				return 0x14;
			case 0x10D3:
				return 0x14;
			case 0x10D4:
				return 0x13;
			case 0x10D5:
				return 0x14;
			case 0x10D6:
				return 0x14;
			case 0x10D7:
				return 0x14;
			case 0x10D8:
				return 0x13;
			case 0x10D9:
				return 0x14;
			case 0x10DA:
				return 0x14;
			case 0x10DB:
				return 0x14;
			case 0x10DC:
				return 0x14;
			case 0x10DD:
				return 0x13;
			case 0x10DE:
				return 0x14;
			case 0x10DF:
				return 0x15;
			case 0x10E0:
				return 0x14;
			case 0x10E1:
				return 0x14;
			case 0x10E2:
				return 0x14;
			case 0x10E3:
				return 0x13;
			case 0x10E4:
				return 0x15;
			case 0x10E5:
				return 0x15;
			case 0x10E6:
				return 0x15;
			case 0x10E7:
				return 0x14;
			case 0x10E8:
				return 0x15;
			case 0x10E9:
				return 0x15;
			case 0x10EA:
				return 0x14;
			case 0x10EB:
				return 0x14;
			case 0x10EC:
				return 0x14;
			case 0x10ED:
				return 0x15;
			case 0x10EE:
				return 0x14;
			case 0x10EF:
				return 0x15;
			case 0x10F0:
				return 0x14;
			case 0x10F1:
				return 0x13;
			case 0x10F2:
				return 0x14;
			case 0x10F3:
				return 0x13;
			case 0x10F4:
				return 0x14;
			case 0x10F5:
				return 0x14;
			case 0x10F6:
				return 0x13;
			case 0x10F7:
				return 0x13;
			case 0x10F8:
				return 0x16;
			case 0x10F9:
				return 0x1B;
			case 0x10FA:
				return 0x14;
			case 0x10FB:
				return 0x1D;
			case 0x10FC:
				return 0x1D;
			case 0x10FD:
				return 0x14;
			case 0x10FE:
				return 0x1A;
			case 0x10FF:
				return 0x1C;
			case 0x1100:
				return 0x17;
			case 0x1101:
				return 0x1C;
			case 0x1102:
				return 0x16;
			case 0x1103:
				return 0x17;
			case 0x1104:
				return 0x1C;
			case 0x1105:
				return 0x16;
			case 0x1106:
				return 0x16;
			case 0x1107:
				return 0x16;
			case 0x1108:
				return 0x1B;
			case 0x1109:
				return 0x15;
			case 0x110A:
				return 0x1A;
			case 0x110B:
				return 0x16;
			case 0x110C:
				return 0x16;
			case 0x110D:
				return 0x1B;
			case 0x110E:
				return 0x18;
			case 0x110F:
				return 0x18;
			case 0x1110:
				return 0x18;
			case 0x1111:
				return 0x18;
			case 0x1112:
				return 0x16;
			case 0x1113:
				return 0x1D;
			case 0x1114:
				return 0x1B;
			case 0x1115:
				return 0x1D;
			case 0x1116:
				return 0x1C;
			case 0x1117:
				return 0x1E;
			case 0x1118:
				return 0x1C;
			case 0x1119:
				return 0x1B;
			case 0x111A:
				return 0x1C;
			case 0x111B:
				return 0x1E;
			case 0x111C:
				return 0x1C;
			case 0x111D:
				return 0x1E;
			case 0x111E:
				return 0x1D;
			case 0x111F:
				return 0x1C;
			case 0x1120:
				return 0x1D;
			case 0x1121:
				return 0x1B;
			case 0x1122:
				return 0x22;
			case 0x1123:
				return 0x22;
			case 0x1124:
				return 0x21;
			case 0x1125:
				return 0x20;
			case 0x1126:
				return 0x21;
			case 0x1127:
				return 0x1C;
			case 0x1128:
				return 0x1E;
			case 0x1129:
				return 0x1E;
			case 0x112A:
				return 0x1E;
			case 0x112B:
				return 0x1E;
			case 0x112C:
				return 0x23;
			case 0x112D:
				return 0x1C;
			case 0x112E:
				return 0x1B;
			case 0x112F:
				return 0x1C;
			case 0x1130:
				return 0x1B;
			case 0x1131:
				return 0x1B;
			case 0x1132:
				return 0x1B;
			case 0x1133:
				return 0x22;
			case 0x1134:
				return 0x1F;
			case 0x1135:
				return 0x1B;
			case 0x1136:
				return 0x1B;
			case 0x1137:
				return 0x1D;
			case 0x1138:
				return 0x1D;
			case 0x1139:
				return 0x1D;
			case 0x113A:
				return 0x1D;
			case 0x113B:
				return 0x1B;
			case 0x113C:
				return 0x1D;
			case 0x113D:
				return 0x22;
			case 0x113E:
				return 0x20;
			case 0x113F:
				return 0x25;
			case 0x1140:
				return 0x18;
			case 0x1141:
				return 0x1D;
			case 0x1142:
				return 0x1D;
			case 0x1143:
				return 0x1C;
			case 0x1144:
				return 0x1C;
			case 0x1145:
				return 0x1B;
			case 0x1146:
				return 0x1E;
			case 0x1147:
				return 0x1B;
			case 0x1148:
				return 0x1C;
			case 0x1149:
				return 0x1E;
			case 0x114A:
				return 0x1E;
			case 0x114B:
				return 0x1E;
			case 0x114C:
				return 0x19;
			case 0x114D:
				return 0x1C;
			case 0x114E:
				return 0x1E;
			case 0x114F:
				return 0x23;
			case 0x1150:
				return 0x21;
			case 0x1151:
				return 0x26;
			case 0x1152:
				return 0x20;
			case 0x1153:
				return 0x1E;
			case 0x1154:
				return 0x20;
			case 0x1155:
				return 0x23;
			case 0x1156:
				return 0x1E;
			case 0x1157:
				return 0x20;
			case 0x1158:
				return 0x1B;
			case 0x1159:
				return 0x1C;
			case 0x115A:
				return 0x1E;
			case 0x115B:
				return 0x1B;
			case 0x115C:
				return 0x1C;
			case 0x115D:
				return 0x1C;
			case 0x115E:
				return 0x1D;
			case 0x115F:
				return 0x17;
			case 0x1160:
				return 0x18;
			case 0x1161:
				return 0x13;
			case 0x1162:
				return 0x14;
			case 0x1163:
				return 0x14;
			case 0x1164:
				return 0x15;
			case 0x1165:
				return 0x14;
			case 0x1166:
				return 0x13;
			case 0x1167:
				return 0x15;
			case 0x1168:
				return 0x14;
			case 0x1169:
				return 0x13;
			case 0x116A:
				return 0x14;
			case 0x116B:
				return 0x15;
			case 0x116C:
				return 0x14;
			case 0x116D:
				return 0x14;
			case 0x116E:
				return 0x13;
			case 0x116F:
				return 0x15;
			case 0x1170:
				return 0x14;
			case 0x1171:
				return 0x14;
			case 0x1172:
				return 0x14;
			case 0x1173:
				return 0x14;
			case 0x1174:
				return 0x14;
			case 0x1175:
				return 0x13;
			case 0x1176:
				return 0x15;
			case 0x1177:
				return 0x15;
			case 0x1178:
				return 0x16;
			case 0x1179:
				return 0x17;
			case 0x117A:
				return 0x16;
			case 0x117B:
				return 0x16;
			case 0x117C:
				return 0x17;
			case 0x117D:
				return 0x17;
			case 0x117E:
				return 0x17;
			case 0x117F:
				return 0x16;
			case 0x1180:
				return 0x15;
			case 0x1181:
				return 0x16;
			case 0x1182:
				return 0x15;
			case 0x1183:
				return 0x15;
			case 0x1184:
				return 0x17;
			case 0x1185:
				return 0x18;
			case 0x1186:
				return 0x18;
			case 0x1187:
				return 0x16;
			case 0x1188:
				return 0x16;
			case 0x1189:
				return 0x15;
			case 0x118A:
				return 0x16;
			case 0x118B:
				return 0x19;
			case 0x118C:
				return 0x16;
			case 0x118D:
				return 0x15;
			case 0x118E:
				return 0x16;
			case 0x118F:
				return 0x17;
			case 0x1190:
				return 0x16;
			case 0x1191:
				return 0x18;
			case 0x1192:
				return 0x17;
			case 0x1193:
				return 0x16;
			case 0x1194:
				return 0x16;
			case 0x1195:
				return 0x16;
			case 0x1196:
				return 0x17;
			case 0x1197:
				return 0x16;
			case 0x1198:
				return 0x15;
			case 0x1199:
				return 0x16;
			case 0x119A:
				return 0x15;
			case 0x119B:
				return 0x15;
			case 0x119C:
				return 0x16;
			case 0x119D:
				return 0x19;
			case 0x119E:
				return 0x17;
			case 0x119F:
				return 0x1A;
			case 0x11A0:
				return 0x19;
			case 0x11A1:
				return 0x19;
			case 0x11A2:
				return 0x1C;
			case 0x11A3:
				return 0x16;
			case 0x11A4:
				return 0x16;
			case 0x11A5:
				return 0x18;
			case 0x11A6:
				return 0x16;
			case 0x11A7:
				return 0x17;
			case 0x11A8:
				return 0x18;
			case 0x11A9:
				return 0x1D;
			case 0x11AA:
				return 0x1D;
			case 0x11AB:
				return 0x17;
			case 0x11AC:
				return 0x1D;
			case 0x11AD:
				return 0x1D;
			case 0x11AE:
				return 0x18;
			case 0x11AF:
				return 0x17;
			case 0x11B0:
				return 0x1E;
			case 0x11B1:
				return 0x1D;
			case 0x11B2:
				return 0x1D;
			case 0x11B3:
				return 0x1C;
			case 0x11B4:
				return 0x1F;
			case 0x11B5:
				return 0x1F;
			case 0x11B6:
				return 0x1D;
			case 0x11B7:
				return 0x17;
			case 0x11B8:
				return 0x17;
			case 0x11B9:
				return 0x1C;
			case 0x11BA:
				return 0x16;
			case 0x11BB:
				return 0x1B;
			case 0x11BC:
				return 0x17;
			case 0x11BD:
				return 0x17;
			case 0x11BE:
				return 0x19;
			case 0x11BF:
				return 0x19;
			case 0x11C0:
				return 0x19;
			case 0x11C1:
				return 0x19;
			case 0x11C2:
				return 0x17;
			case 0x11C3:
				return 0x1E;
			case 0x11C4:
				return 0x24;
			case 0x11C5:
				return 0x1E;
			case 0x11C6:
				return 0x1E;
			case 0x11C7:
				return 0x1C;
			case 0x11C8:
				return 0x1F;
			case 0x11C9:
				return 0x1F;
			case 0x11CA:
				return 0x1F;
			case 0x11CB:
				return 0x1E;
			case 0x11CC:
				return 0x23;
			case 0x11CD:
				return 0x1D;
			case 0x11CE:
				return 0x1E;
			case 0x11CF:
				return 0x24;
			case 0x11D0:
				return 0x1C;
			case 0x11D1:
				return 0x24;
			case 0x11D2:
				return 0x22;
			case 0x11D3:
				return 0x22;
			case 0x11D4:
				return 0x23;
			case 0x11D5:
				return 0x25;
			case 0x11D6:
				return 0x21;
			case 0x11D7:
				return 0x1F;
			case 0x11D8:
				return 0x1F;
			case 0x11D9:
				return 0x23;
			case 0x11DA:
				return 0x1E;
			case 0x11DB:
				return 0x1D;
			case 0x11DC:
				return 0x1D;
			case 0x11DD:
				return 0x1C;
			case 0x11DE:
				return 0x21;
			case 0x11DF:
				return 0x1F;
			case 0x11E0:
				return 0x1F;
			case 0x11E1:
				return 0x1D;
			case 0x11E2:
				return 0x1F;
			case 0x11E3:
				return 0x1D;
			case 0x11E4:
				return 0x1F;
			case 0x11E5:
				return 0x1D;
			case 0x11E6:
				return 0x1F;
			case 0x11E7:
				return 0x1D;
			case 0x11E8:
				return 0x1D;
			case 0x11E9:
				return 0x1C;
			case 0x11EA:
				return 0x1C;
			case 0x11EB:
				return 0x19;
			case 0x11EC:
				return 0x1E;
			case 0x11ED:
				return 0x23;
			case 0x11EE:
				return 0x1C;
			case 0x11EF:
				return 0x1F;
			case 0x11F0:
				return 0x1A;
			case 0x11F1:
				return 0x1F;
			case 0x11F2:
				return 0x22;
			case 0x11F3:
				return 0x1F;
			case 0x11F4:
				return 0x21;
			case 0x11F5:
				return 0x1D;
			case 0x11F6:
				return 0x1D;
			case 0x11F7:
				return 0x1D;
			case 0x11F8:
				return 0x1D;
			case 0x11F9:
				return 0x1D;
			case 0x11FA:
				return 0x1E;
			case 0x11FB:
				return 0x1E;
			case 0x11FC:
				return 0x20;
			case 0x11FD:
				return 0x20;
			case 0x11FE:
				return 0x1E;
			case 0x11FF:
				return 0x1C;
			case 0x1200:
				return 0x15;
			case 0x1201:
				return 0x15;
			case 0x1202:
				return 0x15;
			case 0x1203:
				return 0x16;
			case 0x1204:
				return 0x16;
			case 0x1205:
				return 0x15;
			case 0x1206:
				return 0x15;
			case 0x1207:
				return 0x16;
			case 0x1208:
				return 0x15;
			case 0x1209:
				return 0x15;
			case 0x120A:
				return 0x15;
			case 0x120B:
				return 0x16;
			case 0x120C:
				return 0x16;
			case 0x120D:
				return 0x15;
			case 0x120E:
				return 0x15;
			case 0x120F:
				return 0x16;
			case 0x1210:
				return 0x16;
			case 0x1211:
				return 0x16;
			case 0x1212:
				return 0x16;
			case 0x1213:
				return 0x17;
			case 0x1214:
				return 0x17;
			case 0x1215:
				return 0x16;
			case 0x1216:
				return 0x16;
			case 0x1217:
				return 0x17;
			case 0x1218:
				return 0x15;
			case 0x1219:
				return 0x15;
			case 0x121A:
				return 0x15;
			case 0x121B:
				return 0x16;
			case 0x121C:
				return 0x16;
			case 0x121D:
				return 0x15;
			case 0x121E:
				return 0x15;
			case 0x121F:
				return 0x16;
			case 0x1220:
				return 0x16;
			case 0x1221:
				return 0x16;
			case 0x1222:
				return 0x16;
			case 0x1223:
				return 0x17;
			case 0x1224:
				return 0x17;
			case 0x1225:
				return 0x16;
			case 0x1226:
				return 0x16;
			case 0x1227:
				return 0x17;
			case 0x1228:
				return 0x15;
			case 0x1229:
				return 0x15;
			case 0x122A:
				return 0x15;
			case 0x122B:
				return 0x16;
			case 0x122C:
				return 0x16;
			case 0x122D:
				return 0x15;
			case 0x122E:
				return 0x15;
			case 0x122F:
				return 0x16;
			case 0x1230:
				return 0x15;
			case 0x1231:
				return 0x15;
			case 0x1232:
				return 0x15;
			case 0x1233:
				return 0x16;
			case 0x1234:
				return 0x16;
			case 0x1235:
				return 0x15;
			case 0x1236:
				return 0x15;
			case 0x1237:
				return 0x16;
			case 0x1238:
				return 0x16;
			case 0x1239:
				return 0x16;
			case 0x123A:
				return 0x16;
			case 0x123B:
				return 0x17;
			case 0x123C:
				return 0x17;
			case 0x123D:
				return 0x16;
			case 0x123E:
				return 0x16;
			case 0x123F:
				return 0x17;
			case 0x1240:
				return 0x15;
			case 0x1241:
				return 0x15;
			case 0x1242:
				return 0x15;
			case 0x1243:
				return 0x16;
			case 0x1244:
				return 0x16;
			case 0x1245:
				return 0x15;
			case 0x1246:
				return 0x15;
			case 0x1247:
				return 0x16;
			case 0x1248:
				return 0x16;
			case 0x124A:
				return 0x16;
			case 0x124B:
				return 0x17;
			case 0x124C:
				return 0x17;
			case 0x124D:
				return 0x16;
			case 0x1250:
				return 0x16;
			case 0x1251:
				return 0x16;
			case 0x1252:
				return 0x16;
			case 0x1253:
				return 0x17;
			case 0x1254:
				return 0x17;
			case 0x1255:
				return 0x16;
			case 0x1256:
				return 0x16;
			case 0x1258:
				return 0x17;
			case 0x125A:
				return 0x17;
			case 0x125B:
				return 0x18;
			case 0x125C:
				return 0x18;
			case 0x125D:
				return 0x17;
			case 0x1260:
				return 0x15;
			case 0x1261:
				return 0x15;
			case 0x1262:
				return 0x15;
			case 0x1263:
				return 0x16;
			case 0x1264:
				return 0x16;
			case 0x1265:
				return 0x15;
			case 0x1266:
				return 0x15;
			case 0x1267:
				return 0x16;
			case 0x1268:
				return 0x15;
			case 0x1269:
				return 0x15;
			case 0x126A:
				return 0x15;
			case 0x126B:
				return 0x16;
			case 0x126C:
				return 0x16;
			case 0x126D:
				return 0x15;
			case 0x126E:
				return 0x15;
			case 0x126F:
				return 0x16;
			case 0x1270:
				return 0x15;
			case 0x1271:
				return 0x15;
			case 0x1272:
				return 0x15;
			case 0x1273:
				return 0x16;
			case 0x1274:
				return 0x16;
			case 0x1275:
				return 0x15;
			case 0x1276:
				return 0x15;
			case 0x1277:
				return 0x16;
			case 0x1278:
				return 0x15;
			case 0x1279:
				return 0x15;
			case 0x127A:
				return 0x15;
			case 0x127B:
				return 0x16;
			case 0x127C:
				return 0x16;
			case 0x127D:
				return 0x15;
			case 0x127E:
				return 0x15;
			case 0x127F:
				return 0x16;
			case 0x1280:
				return 0x15;
			case 0x1281:
				return 0x15;
			case 0x1282:
				return 0x15;
			case 0x1283:
				return 0x16;
			case 0x1284:
				return 0x16;
			case 0x1285:
				return 0x15;
			case 0x1286:
				return 0x15;
			case 0x1287:
				return 0x16;
			case 0x1288:
				return 0x16;
			case 0x128A:
				return 0x16;
			case 0x128B:
				return 0x17;
			case 0x128C:
				return 0x17;
			case 0x128D:
				return 0x16;
			case 0x1290:
				return 0x15;
			case 0x1291:
				return 0x15;
			case 0x1292:
				return 0x15;
			case 0x1293:
				return 0x16;
			case 0x1294:
				return 0x16;
			case 0x1295:
				return 0x15;
			case 0x1296:
				return 0x15;
			case 0x1297:
				return 0x16;
			case 0x1298:
				return 0x16;
			case 0x1299:
				return 0x16;
			case 0x129A:
				return 0x16;
			case 0x129B:
				return 0x17;
			case 0x129C:
				return 0x17;
			case 0x129D:
				return 0x16;
			case 0x129E:
				return 0x16;
			case 0x129F:
				return 0x17;
			case 0x12A0:
				return 0x1C;
			case 0x12A1:
				return 0x1C;
			case 0x12A2:
				return 0x1C;
			case 0x12A3:
				return 0x1D;
			case 0x12A4:
				return 0x1D;
			case 0x12A5:
				return 0x1C;
			case 0x12A6:
				return 0x1C;
			case 0x12A7:
				return 0x1D;
			case 0x12A8:
				return 0x15;
			case 0x12A9:
				return 0x15;
			case 0x12AA:
				return 0x15;
			case 0x12AB:
				return 0x16;
			case 0x12AC:
				return 0x16;
			case 0x12AD:
				return 0x15;
			case 0x12AE:
				return 0x15;
			case 0x12AF:
				return 0x16;
			case 0x12B0:
				return 0x16;
			case 0x12B2:
				return 0x16;
			case 0x12B3:
				return 0x17;
			case 0x12B4:
				return 0x17;
			case 0x12B5:
				return 0x16;
			case 0x12B8:
				return 0x16;
			case 0x12B9:
				return 0x16;
			case 0x12BA:
				return 0x16;
			case 0x12BB:
				return 0x17;
			case 0x12BC:
				return 0x17;
			case 0x12BD:
				return 0x16;
			case 0x12BE:
				return 0x16;
			case 0x12C0:
				return 0x17;
			case 0x12C2:
				return 0x17;
			case 0x12C3:
				return 0x18;
			case 0x12C4:
				return 0x18;
			case 0x12C5:
				return 0x17;
			case 0x12C8:
				return 0x15;
			case 0x12C9:
				return 0x15;
			case 0x12CA:
				return 0x15;
			case 0x12CB:
				return 0x16;
			case 0x12CC:
				return 0x16;
			case 0x12CD:
				return 0x15;
			case 0x12CE:
				return 0x15;
			case 0x12CF:
				return 0x16;
			case 0x12D0:
				return 0x1F;
			case 0x12D1:
				return 0x1F;
			case 0x12D2:
				return 0x1F;
			case 0x12D3:
				return 0x20;
			case 0x12D4:
				return 0x20;
			case 0x12D5:
				return 0x1F;
			case 0x12D6:
				return 0x1F;
			case 0x12D8:
				return 0x15;
			case 0x12D9:
				return 0x15;
			case 0x12DA:
				return 0x15;
			case 0x12DB:
				return 0x16;
			case 0x12DC:
				return 0x16;
			case 0x12DD:
				return 0x15;
			case 0x12DE:
				return 0x15;
			case 0x12DF:
				return 0x16;
			case 0x12E0:
				return 0x16;
			case 0x12E1:
				return 0x16;
			case 0x12E2:
				return 0x16;
			case 0x12E3:
				return 0x17;
			case 0x12E4:
				return 0x17;
			case 0x12E5:
				return 0x16;
			case 0x12E6:
				return 0x16;
			case 0x12E7:
				return 0x17;
			case 0x12E8:
				return 0x15;
			case 0x12E9:
				return 0x15;
			case 0x12EA:
				return 0x15;
			case 0x12EB:
				return 0x16;
			case 0x12EC:
				return 0x16;
			case 0x12ED:
				return 0x15;
			case 0x12EE:
				return 0x15;
			case 0x12EF:
				return 0x16;
			case 0x12F0:
				return 0x15;
			case 0x12F1:
				return 0x15;
			case 0x12F2:
				return 0x15;
			case 0x12F3:
				return 0x16;
			case 0x12F4:
				return 0x16;
			case 0x12F5:
				return 0x15;
			case 0x12F6:
				return 0x15;
			case 0x12F7:
				return 0x16;
			case 0x12F8:
				return 0x16;
			case 0x12F9:
				return 0x16;
			case 0x12FA:
				return 0x16;
			case 0x12FB:
				return 0x17;
			case 0x12FC:
				return 0x17;
			case 0x12FD:
				return 0x16;
			case 0x12FE:
				return 0x16;
			case 0x12FF:
				return 0x17;
			case 0x1300:
				return 0x15;
			case 0x1301:
				return 0x15;
			case 0x1302:
				return 0x15;
			case 0x1303:
				return 0x16;
			case 0x1304:
				return 0x16;
			case 0x1305:
				return 0x15;
			case 0x1306:
				return 0x15;
			case 0x1307:
				return 0x16;
			case 0x1308:
				return 0x15;
			case 0x1309:
				return 0x15;
			case 0x130A:
				return 0x15;
			case 0x130B:
				return 0x16;
			case 0x130C:
				return 0x16;
			case 0x130D:
				return 0x15;
			case 0x130E:
				return 0x15;
			case 0x130F:
				return 0x16;
			case 0x1310:
				return 0x16;
			case 0x1312:
				return 0x16;
			case 0x1313:
				return 0x17;
			case 0x1314:
				return 0x17;
			case 0x1315:
				return 0x16;
			case 0x1318:
				return 0x16;
			case 0x1319:
				return 0x16;
			case 0x131A:
				return 0x16;
			case 0x131B:
				return 0x17;
			case 0x131C:
				return 0x17;
			case 0x131D:
				return 0x16;
			case 0x131E:
				return 0x16;
			case 0x131F:
				return 0x18;
			case 0x1320:
				return 0x16;
			case 0x1321:
				return 0x16;
			case 0x1322:
				return 0x16;
			case 0x1323:
				return 0x17;
			case 0x1324:
				return 0x17;
			case 0x1325:
				return 0x16;
			case 0x1326:
				return 0x16;
			case 0x1327:
				return 0x17;
			case 0x1328:
				return 0x16;
			case 0x1329:
				return 0x16;
			case 0x132A:
				return 0x16;
			case 0x132B:
				return 0x17;
			case 0x132C:
				return 0x17;
			case 0x132D:
				return 0x16;
			case 0x132E:
				return 0x16;
			case 0x132F:
				return 0x17;
			case 0x1330:
				return 0x16;
			case 0x1331:
				return 0x16;
			case 0x1332:
				return 0x16;
			case 0x1333:
				return 0x17;
			case 0x1334:
				return 0x17;
			case 0x1335:
				return 0x16;
			case 0x1336:
				return 0x16;
			case 0x1337:
				return 0x17;
			case 0x1338:
				return 0x16;
			case 0x1339:
				return 0x16;
			case 0x133A:
				return 0x16;
			case 0x133B:
				return 0x17;
			case 0x133C:
				return 0x17;
			case 0x133D:
				return 0x16;
			case 0x133E:
				return 0x16;
			case 0x133F:
				return 0x17;
			case 0x1340:
				return 0x16;
			case 0x1341:
				return 0x16;
			case 0x1342:
				return 0x16;
			case 0x1343:
				return 0x17;
			case 0x1344:
				return 0x17;
			case 0x1345:
				return 0x16;
			case 0x1346:
				return 0x16;
			case 0x1347:
				return 0x17;
			case 0x1348:
				return 0x15;
			case 0x1349:
				return 0x15;
			case 0x134A:
				return 0x15;
			case 0x134B:
				return 0x16;
			case 0x134C:
				return 0x16;
			case 0x134D:
				return 0x15;
			case 0x134E:
				return 0x15;
			case 0x134F:
				return 0x16;
			case 0x1350:
				return 0x15;
			case 0x1351:
				return 0x15;
			case 0x1352:
				return 0x15;
			case 0x1353:
				return 0x16;
			case 0x1354:
				return 0x16;
			case 0x1355:
				return 0x15;
			case 0x1356:
				return 0x15;
			case 0x1357:
				return 0x16;
			case 0x1358:
				return 0x16;
			case 0x1359:
				return 0x16;
			case 0x135A:
				return 0x16;
			case 0x135D:
				return 0x34;
			case 0x135E:
				return 0x25;
			case 0x135F:
				return 0x23;
			case 0x1360:
				return 0x16;
			case 0x1361:
				return 0x13;
			case 0x1362:
				return 0x13;
			case 0x1363:
				return 0xF;
			case 0x1364:
				return 0x13;
			case 0x1365:
				return 0xF;
			case 0x1366:
				return 0x17;
			case 0x1367:
				return 0x17;
			case 0x1368:
				return 0x1D;
			case 0x1369:
				return 0x13;
			case 0x136A:
				return 0x13;
			case 0x136B:
				return 0x15;
			case 0x136C:
				return 0x14;
			case 0x136D:
				return 0x14;
			case 0x136E:
				return 0x13;
			case 0x136F:
				return 0x15;
			case 0x1370:
				return 0x15;
			case 0x1371:
				return 0x14;
			case 0x1372:
				return 0x14;
			case 0x1373:
				return 0x17;
			case 0x1374:
				return 0x17;
			case 0x1375:
				return 0x16;
			case 0x1376:
				return 0x16;
			case 0x1377:
				return 0x16;
			case 0x1378:
				return 0x18;
			case 0x1379:
				return 0x17;
			case 0x137A:
				return 0x17;
			case 0x137B:
				return 0x18;
			case 0x137C:
				return 0x1D;
			case 0x1380:
				return 0x20;
			case 0x1381:
				return 0x16;
			case 0x1382:
				return 0x17;
			case 0x1383:
				return 0x16;
			case 0x1384:
				return 0x20;
			case 0x1385:
				return 0x16;
			case 0x1386:
				return 0x17;
			case 0x1387:
				return 0x16;
			case 0x1388:
				return 0x20;
			case 0x1389:
				return 0x16;
			case 0x138A:
				return 0x17;
			case 0x138B:
				return 0x16;
			case 0x138C:
				return 0x20;
			case 0x138D:
				return 0x16;
			case 0x138E:
				return 0x17;
			case 0x138F:
				return 0x16;
			case 0x1390:
				return 0x1A;
			case 0x1391:
				return 0x1A;
			case 0x1392:
				return 0x1B;
			case 0x1393:
				return 0x21;
			case 0x1394:
				return 0x1A;
			case 0x1395:
				return 0x1A;
			case 0x1396:
				return 0x1B;
			case 0x1397:
				return 0x1A;
			case 0x1398:
				return 0x20;
			case 0x1399:
				return 0x19;
			case 0x13A0:
				return 0x12;
			case 0x13A1:
				return 0x12;
			case 0x13A2:
				return 0x12;
			case 0x13A3:
				return 0x12;
			case 0x13A4:
				return 0x12;
			case 0x13A5:
				return 0x12;
			case 0x13A6:
				return 0x13;
			case 0x13A7:
				return 0x13;
			case 0x13A8:
				return 0x13;
			case 0x13A9:
				return 0x13;
			case 0x13AA:
				return 0x13;
			case 0x13AB:
				return 0x13;
			case 0x13AC:
				return 0x13;
			case 0x13AD:
				return 0x13;
			case 0x13AE:
				return 0x13;
			case 0x13AF:
				return 0x13;
			case 0x13B0:
				return 0x13;
			case 0x13B1:
				return 0x13;
			case 0x13B2:
				return 0x13;
			case 0x13B3:
				return 0x13;
			case 0x13B4:
				return 0x13;
			case 0x13B5:
				return 0x13;
			case 0x13B6:
				return 0x13;
			case 0x13B7:
				return 0x13;
			case 0x13B8:
				return 0x13;
			case 0x13B9:
				return 0x13;
			case 0x13BA:
				return 0x13;
			case 0x13BB:
				return 0x13;
			case 0x13BC:
				return 0x13;
			case 0x13BD:
				return 0x13;
			case 0x13BE:
				return 0x13;
			case 0x13BF:
				return 0x14;
			case 0x13C0:
				return 0x14;
			case 0x13C1:
				return 0x13;
			case 0x13C2:
				return 0x13;
			case 0x13C3:
				return 0x13;
			case 0x13C4:
				return 0x13;
			case 0x13C5:
				return 0x13;
			case 0x13C6:
				return 0x14;
			case 0x13C7:
				return 0x14;
			case 0x13C8:
				return 0x14;
			case 0x13C9:
				return 0x14;
			case 0x13CA:
				return 0x14;
			case 0x13CB:
				return 0x14;
			case 0x13CC:
				return 0x13;
			case 0x13CD:
				return 0x12;
			case 0x13CE:
				return 0x13;
			case 0x13CF:
				return 0x13;
			case 0x13D0:
				return 0x13;
			case 0x13D1:
				return 0x13;
			case 0x13D2:
				return 0x13;
			case 0x13D3:
				return 0x13;
			case 0x13D4:
				return 0x13;
			case 0x13D5:
				return 0x13;
			case 0x13D6:
				return 0x13;
			case 0x13D7:
				return 0x13;
			case 0x13D8:
				return 0x13;
			case 0x13D9:
				return 0x13;
			case 0x13DA:
				return 0x13;
			case 0x13DB:
				return 0x13;
			case 0x13DC:
				return 0x14;
			case 0x13DD:
				return 0x14;
			case 0x13DE:
				return 0x14;
			case 0x13DF:
				return 0x14;
			case 0x13E0:
				return 0x14;
			case 0x13E1:
				return 0x14;
			case 0x13E2:
				return 0x14;
			case 0x13E3:
				return 0x14;
			case 0x13E4:
				return 0x14;
			case 0x13E5:
				return 0x14;
			case 0x13E6:
				return 0x14;
			case 0x13E7:
				return 0x14;
			case 0x13E8:
				return 0x14;
			case 0x13E9:
				return 0x13;
			case 0x13EA:
				return 0x13;
			case 0x13EB:
				return 0x13;
			case 0x13EC:
				return 0x13;
			case 0x13ED:
				return 0x13;
			case 0x13EE:
				return 0x13;
			case 0x13EF:
				return 0x13;
			case 0x13F0:
				return 0x13;
			case 0x13F1:
				return 0x13;
			case 0x13F2:
				return 0x13;
			case 0x13F3:
				return 0x13;
			case 0x13F4:
				return 0x13;
			case 0x13F5:
				return 0x13;
			case 0x13F8:
				return 0x19;
			case 0x13F9:
				return 0x19;
			case 0x13FA:
				return 0x19;
			case 0x13FB:
				return 0x19;
			case 0x13FC:
				return 0x19;
			case 0x13FD:
				return 0x19;
			case 0x1400:
				return 0x1A;
			case 0x1401:
				return 0x15;
			case 0x1402:
				return 0x17;
			case 0x1403:
				return 0x15;
			case 0x1404:
				return 0x16;
			case 0x1405:
				return 0x15;
			case 0x1406:
				return 0x16;
			case 0x1407:
				return 0x1D;
			case 0x1408:
				return 0x1E;
			case 0x1409:
				return 0x1D;
			case 0x140A:
				return 0x15;
			case 0x140B:
				return 0x16;
			case 0x140C:
				return 0x16;
			case 0x140D:
				return 0x20;
			case 0x140E:
				return 0x16;
			case 0x140F:
				return 0x20;
			case 0x1410:
				return 0x17;
			case 0x1411:
				return 0x21;
			case 0x1412:
				return 0x16;
			case 0x1413:
				return 0x20;
			case 0x1414:
				return 0x17;
			case 0x1415:
				return 0x21;
			case 0x1416:
				return 0x1F;
			case 0x1417:
				return 0x16;
			case 0x1418:
				return 0x20;
			case 0x1419:
				return 0x17;
			case 0x141A:
				return 0x21;
			case 0x141B:
				return 0x1F;
			case 0x141C:
				return 0x16;
			case 0x141D:
				return 0x1C;
			case 0x141E:
				return 0x20;
			case 0x141F:
				return 0x1F;
			case 0x1420:
				return 0x1F;
			case 0x1421:
				return 0x2A;
			case 0x1422:
				return 0x27;
			case 0x1423:
				return 0x29;
			case 0x1424:
				return 0x1E;
			case 0x1425:
				return 0x26;
			case 0x1426:
				return 0x37;
			case 0x1427:
				return 0x24;
			case 0x1428:
				return 0x31;
			case 0x1429:
				return 0x1E;
			case 0x142A:
				return 0x23;
			case 0x142B:
				return 0x16;
			case 0x142C:
				return 0x16;
			case 0x142D:
				return 0x16;
			case 0x142E:
				return 0x16;
			case 0x142F:
				return 0x16;
			case 0x1430:
				return 0x18;
			case 0x1431:
				return 0x16;
			case 0x1432:
				return 0x17;
			case 0x1433:
				return 0x16;
			case 0x1434:
				return 0x17;
			case 0x1435:
				return 0x1E;
			case 0x1436:
				return 0x1F;
			case 0x1437:
				return 0x1E;
			case 0x1438:
				return 0x16;
			case 0x1439:
				return 0x17;
			case 0x143A:
				return 0x17;
			case 0x143B:
				return 0x21;
			case 0x143C:
				return 0x17;
			case 0x143D:
				return 0x21;
			case 0x143E:
				return 0x18;
			case 0x143F:
				return 0x22;
			case 0x1440:
				return 0x17;
			case 0x1441:
				return 0x21;
			case 0x1442:
				return 0x18;
			case 0x1443:
				return 0x22;
			case 0x1444:
				return 0x17;
			case 0x1445:
				return 0x21;
			case 0x1446:
				return 0x18;
			case 0x1447:
				return 0x22;
			case 0x1448:
				return 0x1F;
			case 0x1449:
				return 0x15;
			case 0x144A:
				return 0x1F;
			case 0x144B:
				return 0x1D;
			case 0x144C:
				return 0x16;
			case 0x144D:
				return 0x18;
			case 0x144E:
				return 0x16;
			case 0x144F:
				return 0x17;
			case 0x1450:
				return 0x16;
			case 0x1451:
				return 0x17;
			case 0x1452:
				return 0x1E;
			case 0x1453:
				return 0x1F;
			case 0x1454:
				return 0x1E;
			case 0x1455:
				return 0x16;
			case 0x1456:
				return 0x17;
			case 0x1457:
				return 0x17;
			case 0x1458:
				return 0x21;
			case 0x1459:
				return 0x17;
			case 0x145A:
				return 0x21;
			case 0x145B:
				return 0x18;
			case 0x145C:
				return 0x22;
			case 0x145D:
				return 0x17;
			case 0x145E:
				return 0x21;
			case 0x145F:
				return 0x18;
			case 0x1460:
				return 0x22;
			case 0x1461:
				return 0x17;
			case 0x1462:
				return 0x21;
			case 0x1463:
				return 0x18;
			case 0x1464:
				return 0x22;
			case 0x1465:
				return 0x20;
			case 0x1466:
				return 0x15;
			case 0x1467:
				return 0x17;
			case 0x1468:
				return 0x17;
			case 0x1469:
				return 0x17;
			case 0x146A:
				return 0x17;
			case 0x146B:
				return 0x16;
			case 0x146C:
				return 0x18;
			case 0x146D:
				return 0x16;
			case 0x146E:
				return 0x17;
			case 0x146F:
				return 0x16;
			case 0x1470:
				return 0x17;
			case 0x1471:
				return 0x1E;
			case 0x1472:
				return 0x16;
			case 0x1473:
				return 0x17;
			case 0x1474:
				return 0x17;
			case 0x1475:
				return 0x21;
			case 0x1476:
				return 0x17;
			case 0x1477:
				return 0x21;
			case 0x1478:
				return 0x18;
			case 0x1479:
				return 0x22;
			case 0x147A:
				return 0x17;
			case 0x147B:
				return 0x21;
			case 0x147C:
				return 0x18;
			case 0x147D:
				return 0x22;
			case 0x147E:
				return 0x17;
			case 0x147F:
				return 0x21;
			case 0x1480:
				return 0x18;
			case 0x1481:
				return 0x22;
			case 0x1482:
				return 0x20;
			case 0x1483:
				return 0x15;
			case 0x1484:
				return 0x16;
			case 0x1485:
				return 0x24;
			case 0x1486:
				return 0x24;
			case 0x1487:
				return 0x24;
			case 0x1488:
				return 0x24;
			case 0x1489:
				return 0x16;
			case 0x148A:
				return 0x18;
			case 0x148B:
				return 0x16;
			case 0x148C:
				return 0x17;
			case 0x148D:
				return 0x16;
			case 0x148E:
				return 0x17;
			case 0x148F:
				return 0x1E;
			case 0x1490:
				return 0x16;
			case 0x1491:
				return 0x17;
			case 0x1492:
				return 0x17;
			case 0x1493:
				return 0x21;
			case 0x1494:
				return 0x17;
			case 0x1495:
				return 0x21;
			case 0x1496:
				return 0x18;
			case 0x1497:
				return 0x22;
			case 0x1498:
				return 0x17;
			case 0x1499:
				return 0x21;
			case 0x149A:
				return 0x18;
			case 0x149B:
				return 0x22;
			case 0x149C:
				return 0x17;
			case 0x149D:
				return 0x21;
			case 0x149E:
				return 0x18;
			case 0x149F:
				return 0x22;
			case 0x14A0:
				return 0x20;
			case 0x14A1:
				return 0x15;
			case 0x14A2:
				return 0x1D;
			case 0x14A3:
				return 0x16;
			case 0x14A4:
				return 0x18;
			case 0x14A5:
				return 0x16;
			case 0x14A6:
				return 0x17;
			case 0x14A7:
				return 0x16;
			case 0x14A8:
				return 0x17;
			case 0x14A9:
				return 0x1E;
			case 0x14AA:
				return 0x16;
			case 0x14AB:
				return 0x17;
			case 0x14AC:
				return 0x17;
			case 0x14AD:
				return 0x21;
			case 0x14AE:
				return 0x17;
			case 0x14AF:
				return 0x21;
			case 0x14B0:
				return 0x18;
			case 0x14B1:
				return 0x22;
			case 0x14B2:
				return 0x17;
			case 0x14B3:
				return 0x21;
			case 0x14B4:
				return 0x18;
			case 0x14B5:
				return 0x22;
			case 0x14B6:
				return 0x17;
			case 0x14B7:
				return 0x21;
			case 0x14B8:
				return 0x18;
			case 0x14B9:
				return 0x22;
			case 0x14BA:
				return 0x20;
			case 0x14BB:
				return 0x15;
			case 0x14BC:
				return 0x1F;
			case 0x14BD:
				return 0x16;
			case 0x14BE:
				return 0x20;
			case 0x14BF:
				return 0x1C;
			case 0x14C0:
				return 0x16;
			case 0x14C1:
				return 0x18;
			case 0x14C2:
				return 0x16;
			case 0x14C3:
				return 0x17;
			case 0x14C4:
				return 0x16;
			case 0x14C5:
				return 0x17;
			case 0x14C6:
				return 0x1E;
			case 0x14C7:
				return 0x16;
			case 0x14C8:
				return 0x17;
			case 0x14C9:
				return 0x17;
			case 0x14CA:
				return 0x21;
			case 0x14CB:
				return 0x17;
			case 0x14CC:
				return 0x21;
			case 0x14CD:
				return 0x18;
			case 0x14CE:
				return 0x22;
			case 0x14CF:
				return 0x20;
			case 0x14D0:
				return 0x15;
			case 0x14D1:
				return 0x1E;
			case 0x14D2:
				return 0x16;
			case 0x14D3:
				return 0x16;
			case 0x14D4:
				return 0x18;
			case 0x14D5:
				return 0x16;
			case 0x14D6:
				return 0x17;
			case 0x14D7:
				return 0x16;
			case 0x14D8:
				return 0x17;
			case 0x14D9:
				return 0x1E;
			case 0x14DA:
				return 0x16;
			case 0x14DB:
				return 0x17;
			case 0x14DC:
				return 0x17;
			case 0x14DD:
				return 0x21;
			case 0x14DE:
				return 0x17;
			case 0x14DF:
				return 0x21;
			case 0x14E0:
				return 0x18;
			case 0x14E1:
				return 0x22;
			case 0x14E2:
				return 0x17;
			case 0x14E3:
				return 0x21;
			case 0x14E4:
				return 0x18;
			case 0x14E5:
				return 0x22;
			case 0x14E6:
				return 0x17;
			case 0x14E7:
				return 0x21;
			case 0x14E8:
				return 0x18;
			case 0x14E9:
				return 0x22;
			case 0x14EA:
				return 0x15;
			case 0x14EB:
				return 0x1F;
			case 0x14EC:
				return 0x1C;
			case 0x14ED:
				return 0x16;
			case 0x14EE:
				return 0x18;
			case 0x14EF:
				return 0x16;
			case 0x14F0:
				return 0x17;
			case 0x14F1:
				return 0x16;
			case 0x14F2:
				return 0x17;
			case 0x14F3:
				return 0x1E;
			case 0x14F4:
				return 0x16;
			case 0x14F5:
				return 0x17;
			case 0x14F6:
				return 0x17;
			case 0x14F7:
				return 0x21;
			case 0x14F8:
				return 0x17;
			case 0x14F9:
				return 0x21;
			case 0x14FA:
				return 0x18;
			case 0x14FB:
				return 0x22;
			case 0x14FC:
				return 0x17;
			case 0x14FD:
				return 0x21;
			case 0x14FE:
				return 0x18;
			case 0x14FF:
				return 0x22;
			case 0x1500:
				return 0x17;
			case 0x1501:
				return 0x21;
			case 0x1502:
				return 0x18;
			case 0x1503:
				return 0x22;
			case 0x1504:
				return 0x20;
			case 0x1505:
				return 0x15;
			case 0x1506:
				return 0x20;
			case 0x1507:
				return 0x16;
			case 0x1508:
				return 0x1F;
			case 0x1509:
				return 0x21;
			case 0x150A:
				return 0x1F;
			case 0x150B:
				return 0x1F;
			case 0x150C:
				return 0x20;
			case 0x150D:
				return 0x20;
			case 0x150E:
				return 0x20;
			case 0x150F:
				return 0x20;
			case 0x1510:
				return 0x17;
			case 0x1511:
				return 0x17;
			case 0x1512:
				return 0x18;
			case 0x1513:
				return 0x17;
			case 0x1514:
				return 0x18;
			case 0x1515:
				return 0x17;
			case 0x1516:
				return 0x18;
			case 0x1517:
				return 0x18;
			case 0x1518:
				return 0x22;
			case 0x1519:
				return 0x18;
			case 0x151A:
				return 0x22;
			case 0x151B:
				return 0x19;
			case 0x151C:
				return 0x23;
			case 0x151D:
				return 0x18;
			case 0x151E:
				return 0x22;
			case 0x151F:
				return 0x19;
			case 0x1520:
				return 0x23;
			case 0x1521:
				return 0x18;
			case 0x1522:
				return 0x22;
			case 0x1523:
				return 0x19;
			case 0x1524:
				return 0x23;
			case 0x1525:
				return 0x16;
			case 0x1526:
				return 0x16;
			case 0x1527:
				return 0x18;
			case 0x1528:
				return 0x16;
			case 0x1529:
				return 0x17;
			case 0x152A:
				return 0x16;
			case 0x152B:
				return 0x17;
			case 0x152C:
				return 0x1E;
			case 0x152D:
				return 0x16;
			case 0x152E:
				return 0x17;
			case 0x152F:
				return 0x17;
			case 0x1530:
				return 0x21;
			case 0x1531:
				return 0x17;
			case 0x1532:
				return 0x21;
			case 0x1533:
				return 0x18;
			case 0x1534:
				return 0x22;
			case 0x1535:
				return 0x17;
			case 0x1536:
				return 0x21;
			case 0x1537:
				return 0x18;
			case 0x1538:
				return 0x22;
			case 0x1539:
				return 0x17;
			case 0x153A:
				return 0x21;
			case 0x153B:
				return 0x18;
			case 0x153C:
				return 0x22;
			case 0x153D:
				return 0x20;
			case 0x153E:
				return 0x15;
			case 0x153F:
				return 0x20;
			case 0x1540:
				return 0x1F;
			case 0x1541:
				return 0x1D;
			case 0x1542:
				return 0x16;
			case 0x1543:
				return 0x1D;
			case 0x1544:
				return 0x20;
			case 0x1545:
				return 0x18;
			case 0x1546:
				return 0x16;
			case 0x1547:
				return 0x17;
			case 0x1548:
				return 0x16;
			case 0x1549:
				return 0x17;
			case 0x154A:
				return 0x20;
			case 0x154B:
				return 0x16;
			case 0x154C:
				return 0x17;
			case 0x154D:
				return 0x20;
			case 0x154E:
				return 0x18;
			case 0x154F:
				return 0x22;
			case 0x1550:
				return 0x15;
			case 0x1551:
				return 0x1F;
			case 0x1552:
				return 0x1C;
			case 0x1553:
				return 0x16;
			case 0x1554:
				return 0x18;
			case 0x1555:
				return 0x16;
			case 0x1556:
				return 0x17;
			case 0x1557:
				return 0x16;
			case 0x1558:
				return 0x17;
			case 0x1559:
				return 0x16;
			case 0x155A:
				return 0x17;
			case 0x155B:
				return 0x18;
			case 0x155C:
				return 0x22;
			case 0x155D:
				return 0x15;
			case 0x155E:
				return 0x17;
			case 0x155F:
				return 0x1E;
			case 0x1560:
				return 0x17;
			case 0x1561:
				return 0x1E;
			case 0x1562:
				return 0x18;
			case 0x1563:
				return 0x1F;
			case 0x1564:
				return 0x17;
			case 0x1565:
				return 0x18;
			case 0x1566:
				return 0x17;
			case 0x1567:
				return 0x18;
			case 0x1568:
				return 0x19;
			case 0x1569:
				return 0x23;
			case 0x156A:
				return 0x16;
			case 0x156B:
				return 0x18;
			case 0x156C:
				return 0x18;
			case 0x156D:
				return 0x18;
			case 0x156E:
				return 0x18;
			case 0x156F:
				return 0x17;
			case 0x1570:
				return 0x17;
			case 0x1571:
				return 0x17;
			case 0x1572:
				return 0x17;
			case 0x1573:
				return 0x17;
			case 0x1574:
				return 0x1E;
			case 0x1575:
				return 0x1E;
			case 0x1576:
				return 0x1F;
			case 0x1577:
				return 0x1E;
			case 0x1578:
				return 0x1F;
			case 0x1579:
				return 0x1E;
			case 0x157A:
				return 0x1F;
			case 0x157B:
				return 0x1D;
			case 0x157C:
				return 0x1D;
			case 0x157D:
				return 0x16;
			case 0x157E:
				return 0x18;
			case 0x157F:
				return 0x16;
			case 0x1580:
				return 0x17;
			case 0x1581:
				return 0x16;
			case 0x1582:
				return 0x17;
			case 0x1583:
				return 0x16;
			case 0x1584:
				return 0x17;
			case 0x1585:
				return 0x15;
			case 0x1586:
				return 0x18;
			case 0x1587:
				return 0x18;
			case 0x1588:
				return 0x18;
			case 0x1589:
				return 0x18;
			case 0x158A:
				return 0x20;
			case 0x158B:
				return 0x20;
			case 0x158C:
				return 0x20;
			case 0x158D:
				return 0x20;
			case 0x158E:
				return 0x19;
			case 0x158F:
				return 0x17;
			case 0x1590:
				return 0x18;
			case 0x1591:
				return 0x17;
			case 0x1592:
				return 0x18;
			case 0x1593:
				return 0x17;
			case 0x1594:
				return 0x18;
			case 0x1595:
				return 0x16;
			case 0x1596:
				return 0x17;
			case 0x1597:
				return 0x1E;
			case 0x1598:
				return 0x1E;
			case 0x1599:
				return 0x1E;
			case 0x159A:
				return 0x1E;
			case 0x159B:
				return 0x22;
			case 0x159C:
				return 0x22;
			case 0x159D:
				return 0x22;
			case 0x159E:
				return 0x22;
			case 0x159F:
				return 0x21;
			case 0x15A0:
				return 0x17;
			case 0x15A1:
				return 0x18;
			case 0x15A2:
				return 0x17;
			case 0x15A3:
				return 0x18;
			case 0x15A4:
				return 0x17;
			case 0x15A5:
				return 0x18;
			case 0x15A6:
				return 0x16;
			case 0x15A7:
				return 0x1F;
			case 0x15A8:
				return 0x1F;
			case 0x15A9:
				return 0x20;
			case 0x15AA:
				return 0x1F;
			case 0x15AB:
				return 0x20;
			case 0x15AC:
				return 0x1F;
			case 0x15AD:
				return 0x20;
			case 0x15AE:
				return 0x1E;
			case 0x15AF:
				return 0x1D;
			case 0x15B0:
				return 0x1F;
			case 0x15B1:
				return 0x1F;
			case 0x15B2:
				return 0x1F;
			case 0x15B3:
				return 0x1F;
			case 0x15B4:
				return 0x20;
			case 0x15B5:
				return 0x20;
			case 0x15B6:
				return 0x20;
			case 0x15B7:
				return 0x20;
			case 0x15B8:
				return 0x20;
			case 0x15B9:
				return 0x20;
			case 0x15BA:
				return 0x20;
			case 0x15BB:
				return 0x20;
			case 0x15BC:
				return 0x20;
			case 0x15BD:
				return 0x20;
			case 0x15BE:
				return 0x20;
			case 0x15BF:
				return 0x20;
			case 0x15C0:
				return 0x1D;
			case 0x15C1:
				return 0x1D;
			case 0x15C2:
				return 0x1D;
			case 0x15C3:
				return 0x1D;
			case 0x15C4:
				return 0x1F;
			case 0x15C5:
				return 0x1F;
			case 0x15C6:
				return 0x1F;
			case 0x15C7:
				return 0x20;
			case 0x15C8:
				return 0x1F;
			case 0x15C9:
				return 0x1F;
			case 0x15CA:
				return 0x1E;
			case 0x15CB:
				return 0x1E;
			case 0x15CC:
				return 0x1E;
			case 0x15CD:
				return 0x1F;
			case 0x15CE:
				return 0x1E;
			case 0x15CF:
				return 0x1E;
			case 0x15D0:
				return 0x1E;
			case 0x15D1:
				return 0x1E;
			case 0x15D2:
				return 0x1E;
			case 0x15D3:
				return 0x1F;
			case 0x15D4:
				return 0x1E;
			case 0x15D5:
				return 0x1E;
			case 0x15D6:
				return 0x1F;
			case 0x15D7:
				return 0x1F;
			case 0x15D8:
				return 0x1F;
			case 0x15D9:
				return 0x20;
			case 0x15DA:
				return 0x1F;
			case 0x15DB:
				return 0x1F;
			case 0x15DC:
				return 0x1F;
			case 0x15DD:
				return 0x1F;
			case 0x15DE:
				return 0x1F;
			case 0x15DF:
				return 0x20;
			case 0x15E0:
				return 0x1F;
			case 0x15E1:
				return 0x1F;
			case 0x15E2:
				return 0x1F;
			case 0x15E3:
				return 0x1F;
			case 0x15E4:
				return 0x1F;
			case 0x15E5:
				return 0x20;
			case 0x15E6:
				return 0x1F;
			case 0x15E7:
				return 0x1F;
			case 0x15E8:
				return 0x1E;
			case 0x15E9:
				return 0x1E;
			case 0x15EA:
				return 0x1E;
			case 0x15EB:
				return 0x1F;
			case 0x15EC:
				return 0x1E;
			case 0x15ED:
				return 0x1E;
			case 0x15EE:
				return 0x1D;
			case 0x15EF:
				return 0x1E;
			case 0x15F0:
				return 0x1E;
			case 0x15F1:
				return 0x1E;
			case 0x15F2:
				return 0x1F;
			case 0x15F3:
				return 0x1E;
			case 0x15F4:
				return 0x1E;
			case 0x15F5:
				return 0x1F;
			case 0x15F6:
				return 0x1F;
			case 0x15F7:
				return 0x1F;
			case 0x15F8:
				return 0x20;
			case 0x15F9:
				return 0x1F;
			case 0x15FA:
				return 0x1F;
			case 0x15FB:
				return 0x1F;
			case 0x15FC:
				return 0x1F;
			case 0x15FD:
				return 0x1F;
			case 0x15FE:
				return 0x20;
			case 0x15FF:
				return 0x1F;
			case 0x1600:
				return 0x1F;
			case 0x1601:
				return 0x1E;
			case 0x1602:
				return 0x1E;
			case 0x1603:
				return 0x1E;
			case 0x1604:
				return 0x1E;
			case 0x1605:
				return 0x1F;
			case 0x1606:
				return 0x1E;
			case 0x1607:
				return 0x1E;
			case 0x1608:
				return 0x1E;
			case 0x1609:
				return 0x1E;
			case 0x160A:
				return 0x1E;
			case 0x160B:
				return 0x1F;
			case 0x160C:
				return 0x1E;
			case 0x160D:
				return 0x1E;
			case 0x160E:
				return 0x1E;
			case 0x160F:
				return 0x1E;
			case 0x1610:
				return 0x1E;
			case 0x1611:
				return 0x1F;
			case 0x1612:
				return 0x1E;
			case 0x1613:
				return 0x1E;
			case 0x1614:
				return 0x1E;
			case 0x1615:
				return 0x1D;
			case 0x1616:
				return 0x1E;
			case 0x1617:
				return 0x1E;
			case 0x1618:
				return 0x1F;
			case 0x1619:
				return 0x1E;
			case 0x161A:
				return 0x1D;
			case 0x161B:
				return 0x1E;
			case 0x161C:
				return 0x1F;
			case 0x161D:
				return 0x1F;
			case 0x161E:
				return 0x1F;
			case 0x161F:
				return 0x20;
			case 0x1620:
				return 0x1F;
			case 0x1621:
				return 0x1F;
			case 0x1622:
				return 0x1E;
			case 0x1623:
				return 0x1E;
			case 0x1624:
				return 0x1E;
			case 0x1625:
				return 0x1F;
			case 0x1626:
				return 0x1E;
			case 0x1627:
				return 0x1E;
			case 0x1628:
				return 0x1F;
			case 0x1629:
				return 0x1F;
			case 0x162A:
				return 0x1F;
			case 0x162B:
				return 0x20;
			case 0x162C:
				return 0x1F;
			case 0x162D:
				return 0x1F;
			case 0x162E:
				return 0x1F;
			case 0x162F:
				return 0x1F;
			case 0x1630:
				return 0x1F;
			case 0x1631:
				return 0x20;
			case 0x1632:
				return 0x1F;
			case 0x1633:
				return 0x1F;
			case 0x1634:
				return 0x20;
			case 0x1635:
				return 0x20;
			case 0x1636:
				return 0x20;
			case 0x1637:
				return 0x21;
			case 0x1638:
				return 0x20;
			case 0x1639:
				return 0x20;
			case 0x163A:
				return 0x1F;
			case 0x163B:
				return 0x1F;
			case 0x163C:
				return 0x1F;
			case 0x163D:
				return 0x20;
			case 0x163E:
				return 0x1F;
			case 0x163F:
				return 0x1F;
			case 0x1640:
				return 0x1E;
			case 0x1641:
				return 0x1E;
			case 0x1642:
				return 0x1E;
			case 0x1643:
				return 0x1F;
			case 0x1644:
				return 0x1E;
			case 0x1645:
				return 0x1E;
			case 0x1646:
				return 0x1D;
			case 0x1647:
				return 0x25;
			case 0x1648:
				return 0x1F;
			case 0x1649:
				return 0x1F;
			case 0x164A:
				return 0x1F;
			case 0x164B:
				return 0x20;
			case 0x164C:
				return 0x1F;
			case 0x164D:
				return 0x1F;
			case 0x164E:
				return 0x1E;
			case 0x164F:
				return 0x1E;
			case 0x1650:
				return 0x1E;
			case 0x1651:
				return 0x1F;
			case 0x1652:
				return 0x1E;
			case 0x1653:
				return 0x1E;
			case 0x1654:
				return 0x1F;
			case 0x1655:
				return 0x1F;
			case 0x1656:
				return 0x1F;
			case 0x1657:
				return 0x20;
			case 0x1658:
				return 0x1F;
			case 0x1659:
				return 0x1F;
			case 0x165A:
				return 0x1E;
			case 0x165B:
				return 0x1F;
			case 0x165C:
				return 0x1F;
			case 0x165D:
				return 0x1F;
			case 0x165E:
				return 0x20;
			case 0x165F:
				return 0x1F;
			case 0x1660:
				return 0x1F;
			case 0x1661:
				return 0x1F;
			case 0x1662:
				return 0x1F;
			case 0x1663:
				return 0x1F;
			case 0x1664:
				return 0x20;
			case 0x1665:
				return 0x1F;
			case 0x1666:
				return 0x1F;
			case 0x1667:
				return 0x20;
			case 0x1668:
				return 0x20;
			case 0x1669:
				return 0x20;
			case 0x166A:
				return 0x21;
			case 0x166B:
				return 0x20;
			case 0x166C:
				return 0x20;
			case 0x166D:
				return 0x1C;
			case 0x166E:
				return 0x1D;
			case 0x166F:
				return 0x17;
			case 0x1670:
				return 0x18;
			case 0x1671:
				return 0x18;
			case 0x1672:
				return 0x19;
			case 0x1673:
				return 0x18;
			case 0x1674:
				return 0x19;
			case 0x1675:
				return 0x18;
			case 0x1676:
				return 0x19;
			case 0x1677:
				return 0x24;
			case 0x1678:
				return 0x23;
			case 0x1679:
				return 0x24;
			case 0x167A:
				return 0x23;
			case 0x167B:
				return 0x24;
			case 0x167C:
				return 0x23;
			case 0x167D:
				return 0x24;
			case 0x167E:
				return 0x27;
			case 0x167F:
				return 0x1F;
			case 0x1680:
				return 0x11;
			case 0x1681:
				return 0x13;
			case 0x1682:
				return 0x12;
			case 0x1683:
				return 0x13;
			case 0x1684:
				return 0x12;
			case 0x1685:
				return 0x12;
			case 0x1686:
				return 0x12;
			case 0x1687:
				return 0x12;
			case 0x1688:
				return 0x13;
			case 0x1689:
				return 0x12;
			case 0x168A:
				return 0x13;
			case 0x168B:
				return 0x12;
			case 0x168C:
				return 0x12;
			case 0x168D:
				return 0x15;
			case 0x168E:
				return 0x14;
			case 0x168F:
				return 0x12;
			case 0x1690:
				return 0x12;
			case 0x1691:
				return 0x11;
			case 0x1692:
				return 0x10;
			case 0x1693:
				return 0x15;
			case 0x1694:
				return 0x15;
			case 0x1695:
				return 0x15;
			case 0x1696:
				return 0x10;
			case 0x1697:
				return 0x16;
			case 0x1698:
				return 0x12;
			case 0x1699:
				return 0x19;
			case 0x169A:
				return 0x13;
			case 0x169B:
				return 0x13;
			case 0x169C:
				return 0x1C;
			case 0x16A0:
				return 0x1C;
			case 0x16A1:
				return 0xF;
			case 0x16A2:
				return 0x17;
			case 0x16A3:
				return 0x10;
			case 0x16A4:
				return 0xF;
			case 0x16A5:
				return 0xF;
			case 0x16A6:
				return 0x22;
			case 0x16A7:
				return 0x11;
			case 0x16A8:
				return 0x15;
			case 0x16A9:
				return 0x12;
			case 0x16AA:
				return 0x12;
			case 0x16AB:
				return 0x12;
			case 0x16AC:
				return 0x1F;
			case 0x16AD:
				return 0x1E;
			case 0x16AE:
				return 0xF;
			case 0x16AF:
				return 0x10;
			case 0x16B0:
				return 0x10;
			case 0x16B1:
				return 0x1E;
			case 0x16B2:
				return 0x13;
			case 0x16B3:
				return 0x11;
			case 0x16B4:
				return 0x14;
			case 0x16B5:
				return 0xF;
			case 0x16B6:
				return 0x11;
			case 0x16B7:
				return 0x19;
			case 0x16B8:
				return 0x11;
			case 0x16B9:
				return 0x1A;
			case 0x16BA:
				return 0x16;
			case 0x16BB:
				return 0x15;
			case 0x16BC:
				return 0x22;
			case 0x16BD:
				return 0x21;
			case 0x16BE:
				return 0x1F;
			case 0x16BF:
				return 0x1F;
			case 0x16C0:
				return 0x16;
			case 0x16C1:
				return 0x1B;
			case 0x16C2:
				return 0xF;
			case 0x16C3:
				return 0x15;
			case 0x16C4:
				return 0x11;
			case 0x16C5:
				return 0x1F;
			case 0x16C6:
				return 0x1D;
			case 0x16C7:
				return 0x16;
			case 0x16C8:
				return 0x1D;
			case 0x16C9:
				return 0x19;
			case 0x16CA:
				return 0x16;
			case 0x16CB:
				return 0x25;
			case 0x16CC:
				return 0x1E;
			case 0x16CD:
				return 0xF;
			case 0x16CE:
				return 0xF;
			case 0x16CF:
				return 0x1D;
			case 0x16D0:
				return 0x1E;
			case 0x16D1:
				return 0xF;
			case 0x16D2:
				return 0x26;
			case 0x16D3:
				return 0x22;
			case 0x16D4:
				return 0x16;
			case 0x16D5:
				return 0x14;
			case 0x16D6:
				return 0x18;
			case 0x16D7:
				return 0x1A;
			case 0x16D8:
				return 0x20;
			case 0x16D9:
				return 0x1F;
			case 0x16DA:
				return 0x20;
			case 0x16DB:
				return 0x16;
			case 0x16DC:
				return 0x14;
			case 0x16DD:
				return 0x11;
			case 0x16DE:
				return 0x1A;
			case 0x16DF:
				return 0x1D;
			case 0x16E0:
				return 0x11;
			case 0x16E1:
				return 0x11;
			case 0x16E2:
				return 0x15;
			case 0x16E3:
				return 0x12;
			case 0x16E4:
				return 0x13;
			case 0x16E5:
				return 0x12;
			case 0x16E6:
				return 0x1C;
			case 0x16E7:
				return 0x1B;
			case 0x16E8:
				return 0x1A;
			case 0x16E9:
				return 0xF;
			case 0x16EA:
				return 0xF;
			case 0x16EB:
				return 0x19;
			case 0x16EC:
				return 0x1B;
			case 0x16ED:
				return 0x18;
			case 0x16EE:
				return 0x14;
			case 0x16EF:
				return 0x16;
			case 0x16F0:
				return 0x16;
			case 0x16F1:
				return 0xF;
			case 0x16F2:
				return 0x10;
			case 0x16F3:
				return 0x10;
			case 0x16F4:
				return 0x1E;
			case 0x16F5:
				return 0x1E;
			case 0x16F6:
				return 0x1E;
			case 0x16F7:
				return 0x1E;
			case 0x16F8:
				return 0x20;
			case 0x1700:
				return 0x11;
			case 0x1701:
				return 0x11;
			case 0x1702:
				return 0x11;
			case 0x1703:
				return 0x12;
			case 0x1704:
				return 0x12;
			case 0x1705:
				return 0x13;
			case 0x1706:
				return 0x12;
			case 0x1707:
				return 0x12;
			case 0x1708:
				return 0x12;
			case 0x1709:
				return 0x12;
			case 0x170A:
				return 0x12;
			case 0x170B:
				return 0x12;
			case 0x170C:
				return 0x12;
			case 0x170E:
				return 0x12;
			case 0x170F:
				return 0x12;
			case 0x1710:
				return 0x12;
			case 0x1711:
				return 0x12;
			case 0x1712:
				return 0x15;
			case 0x1713:
				return 0x15;
			case 0x1714:
				return 0x14;
			case 0x1720:
				return 0x11;
			case 0x1721:
				return 0x11;
			case 0x1722:
				return 0x11;
			case 0x1723:
				return 0x12;
			case 0x1724:
				return 0x12;
			case 0x1725:
				return 0x13;
			case 0x1726:
				return 0x12;
			case 0x1727:
				return 0x12;
			case 0x1728:
				return 0x12;
			case 0x1729:
				return 0x12;
			case 0x172A:
				return 0x12;
			case 0x172B:
				return 0x12;
			case 0x172C:
				return 0x12;
			case 0x172D:
				return 0x12;
			case 0x172E:
				return 0x12;
			case 0x172F:
				return 0x12;
			case 0x1730:
				return 0x12;
			case 0x1731:
				return 0x12;
			case 0x1732:
				return 0x15;
			case 0x1733:
				return 0x15;
			case 0x1734:
				return 0x16;
			case 0x1735:
				return 0x1E;
			case 0x1736:
				return 0x1E;
			case 0x1740:
				return 0xF;
			case 0x1741:
				return 0xF;
			case 0x1742:
				return 0xF;
			case 0x1743:
				return 0x10;
			case 0x1744:
				return 0x10;
			case 0x1745:
				return 0x11;
			case 0x1746:
				return 0x10;
			case 0x1747:
				return 0x10;
			case 0x1748:
				return 0x10;
			case 0x1749:
				return 0x10;
			case 0x174A:
				return 0x10;
			case 0x174B:
				return 0x10;
			case 0x174C:
				return 0x10;
			case 0x174D:
				return 0x10;
			case 0x174E:
				return 0x10;
			case 0x174F:
				return 0x10;
			case 0x1750:
				return 0x10;
			case 0x1751:
				return 0x10;
			case 0x1752:
				return 0x13;
			case 0x1753:
				return 0x13;
			case 0x1760:
				return 0x12;
			case 0x1761:
				return 0x12;
			case 0x1762:
				return 0x12;
			case 0x1763:
				return 0x13;
			case 0x1764:
				return 0x13;
			case 0x1765:
				return 0x14;
			case 0x1766:
				return 0x13;
			case 0x1767:
				return 0x13;
			case 0x1768:
				return 0x13;
			case 0x1769:
				return 0x13;
			case 0x176A:
				return 0x13;
			case 0x176B:
				return 0x13;
			case 0x176C:
				return 0x13;
			case 0x176E:
				return 0x13;
			case 0x176F:
				return 0x13;
			case 0x1770:
				return 0x13;
			case 0x1772:
				return 0x16;
			case 0x1773:
				return 0x16;
			case 0x1780:
				return 0x10;
			case 0x1781:
				return 0x11;
			case 0x1782:
				return 0x10;
			case 0x1783:
				return 0x11;
			case 0x1784:
				return 0x11;
			case 0x1785:
				return 0x10;
			case 0x1786:
				return 0x11;
			case 0x1787:
				return 0x10;
			case 0x1788:
				return 0x11;
			case 0x1789:
				return 0x11;
			case 0x178A:
				return 0x10;
			case 0x178B:
				return 0x12;
			case 0x178C:
				return 0x10;
			case 0x178D:
				return 0x12;
			case 0x178E:
				return 0x11;
			case 0x178F:
				return 0x10;
			case 0x1790:
				return 0x11;
			case 0x1791:
				return 0x10;
			case 0x1792:
				return 0x11;
			case 0x1793:
				return 0x10;
			case 0x1794:
				return 0x10;
			case 0x1795:
				return 0x11;
			case 0x1796:
				return 0x10;
			case 0x1797:
				return 0x11;
			case 0x1798:
				return 0x10;
			case 0x1799:
				return 0x10;
			case 0x179A:
				return 0x10;
			case 0x179B:
				return 0x10;
			case 0x179C:
				return 0x10;
			case 0x179D:
				return 0x11;
			case 0x179E:
				return 0x11;
			case 0x179F:
				return 0x10;
			case 0x17A0:
				return 0x10;
			case 0x17A1:
				return 0x10;
			case 0x17A2:
				return 0x10;
			case 0x17A3:
				return 0x1C;
			case 0x17A4:
				return 0x1C;
			case 0x17A5:
				return 0x1B;
			case 0x17A6:
				return 0x1C;
			case 0x17A7:
				return 0x1B;
			case 0x17A8:
				return 0x1C;
			case 0x17A9:
				return 0x1C;
			case 0x17AA:
				return 0x1D;
			case 0x17AB:
				return 0x1B;
			case 0x17AC:
				return 0x1C;
			case 0x17AD:
				return 0x1B;
			case 0x17AE:
				return 0x1C;
			case 0x17AF:
				return 0x1B;
			case 0x17B0:
				return 0x1C;
			case 0x17B1:
				return 0x25;
			case 0x17B2:
				return 0x25;
			case 0x17B3:
				return 0x1C;
			case 0x17B4:
				return 0x18;
			case 0x17B5:
				return 0x18;
			case 0x17B6:
				return 0x14;
			case 0x17B7:
				return 0x13;
			case 0x17B8:
				return 0x14;
			case 0x17B9:
				return 0x13;
			case 0x17BA:
				return 0x14;
			case 0x17BB:
				return 0x13;
			case 0x17BC:
				return 0x14;
			case 0x17BD:
				return 0x14;
			case 0x17BE:
				return 0x14;
			case 0x17BF:
				return 0x14;
			case 0x17C0:
				return 0x14;
			case 0x17C1:
				return 0x13;
			case 0x17C2:
				return 0x14;
			case 0x17C3:
				return 0x14;
			case 0x17C4:
				return 0x14;
			case 0x17C5:
				return 0x14;
			case 0x17C6:
				return 0x13;
			case 0x17C7:
				return 0x13;
			case 0x17C8:
				return 0x19;
			case 0x17C9:
				return 0x17;
			case 0x17CA:
				return 0x13;
			case 0x17CB:
				return 0x12;
			case 0x17CC:
				return 0x11;
			case 0x17CD:
				return 0x17;
			case 0x17CE:
				return 0x13;
			case 0x17CF:
				return 0x11;
			case 0x17D0:
				return 0x19;
			case 0x17D1:
				return 0x12;
			case 0x17D2:
				return 0x11;
			case 0x17D3:
				return 0x16;
			case 0x17D4:
				return 0x10;
			case 0x17D5:
				return 0x16;
			case 0x17D6:
				return 0x1B;
			case 0x17D7:
				return 0x13;
			case 0x17D8:
				return 0x12;
			case 0x17D9:
				return 0x17;
			case 0x17DA:
				return 0x13;
			case 0x17DB:
				return 0x1B;
			case 0x17DC:
				return 0x19;
			case 0x17DD:
				return 0x14;
			case 0x17E0:
				return 0x11;
			case 0x17E1:
				return 0x10;
			case 0x17E2:
				return 0x10;
			case 0x17E3:
				return 0x12;
			case 0x17E4:
				return 0x11;
			case 0x17E5:
				return 0x11;
			case 0x17E6:
				return 0x10;
			case 0x17E7:
				return 0x12;
			case 0x17E8:
				return 0x12;
			case 0x17E9:
				return 0x11;
			case 0x17F0:
				return 0x1B;
			case 0x17F1:
				return 0x1C;
			case 0x17F2:
				return 0x1B;
			case 0x17F3:
				return 0x1B;
			case 0x17F4:
				return 0x1C;
			case 0x17F5:
				return 0x1C;
			case 0x17F6:
				return 0x21;
			case 0x17F7:
				return 0x20;
			case 0x17F8:
				return 0x20;
			case 0x17F9:
				return 0x21;
			case 0x1800:
				return 0x10;
			case 0x1801:
				return 0x13;
			case 0x1802:
				return 0x10;
			case 0x1803:
				return 0x14;
			case 0x1804:
				return 0x10;
			case 0x1805:
				return 0x14;
			case 0x1806:
				return 0x1B;
			case 0x1807:
				return 0x28;
			case 0x1808:
				return 0x17;
			case 0x1809:
				return 0x1B;
			case 0x180A:
				return 0x11;
			case 0x180B:
				return 0x26;
			case 0x180C:
				return 0x26;
			case 0x180D:
				return 0x28;
			case 0x180E:
				return 0x1A;
			case 0x1810:
				return 0x15;
			case 0x1811:
				return 0x14;
			case 0x1812:
				return 0x14;
			case 0x1813:
				return 0x16;
			case 0x1814:
				return 0x15;
			case 0x1815:
				return 0x15;
			case 0x1816:
				return 0x14;
			case 0x1817:
				return 0x16;
			case 0x1818:
				return 0x16;
			case 0x1819:
				return 0x15;
			case 0x1820:
				return 0x13;
			case 0x1821:
				return 0x13;
			case 0x1822:
				return 0x13;
			case 0x1823:
				return 0x13;
			case 0x1824:
				return 0x13;
			case 0x1825:
				return 0x14;
			case 0x1826:
				return 0x14;
			case 0x1827:
				return 0x14;
			case 0x1828:
				return 0x14;
			case 0x1829:
				return 0x15;
			case 0x182A:
				return 0x14;
			case 0x182B:
				return 0x14;
			case 0x182C:
				return 0x14;
			case 0x182D:
				return 0x14;
			case 0x182E:
				return 0x14;
			case 0x182F:
				return 0x14;
			case 0x1830:
				return 0x14;
			case 0x1831:
				return 0x15;
			case 0x1832:
				return 0x14;
			case 0x1833:
				return 0x14;
			case 0x1834:
				return 0x15;
			case 0x1835:
				return 0x14;
			case 0x1836:
				return 0x14;
			case 0x1837:
				return 0x14;
			case 0x1838:
				return 0x14;
			case 0x1839:
				return 0x14;
			case 0x183A:
				return 0x14;
			case 0x183B:
				return 0x15;
			case 0x183C:
				return 0x15;
			case 0x183D:
				return 0x14;
			case 0x183E:
				return 0x15;
			case 0x183F:
				return 0x15;
			case 0x1840:
				return 0x15;
			case 0x1841:
				return 0x15;
			case 0x1842:
				return 0x15;
			case 0x1843:
				return 0x26;
			case 0x1844:
				return 0x18;
			case 0x1845:
				return 0x18;
			case 0x1846:
				return 0x18;
			case 0x1847:
				return 0x18;
			case 0x1848:
				return 0x19;
			case 0x1849:
				return 0x19;
			case 0x184A:
				return 0x1A;
			case 0x184B:
				return 0x19;
			case 0x184C:
				return 0x19;
			case 0x184D:
				return 0x19;
			case 0x184E:
				return 0x19;
			case 0x184F:
				return 0x19;
			case 0x1850:
				return 0x19;
			case 0x1851:
				return 0x19;
			case 0x1852:
				return 0x1A;
			case 0x1853:
				return 0x19;
			case 0x1854:
				return 0x1A;
			case 0x1855:
				return 0x19;
			case 0x1856:
				return 0x19;
			case 0x1857:
				return 0x19;
			case 0x1858:
				return 0x1A;
			case 0x1859:
				return 0x1A;
			case 0x185A:
				return 0x1A;
			case 0x185B:
				return 0x1A;
			case 0x185C:
				return 0x1A;
			case 0x185D:
				return 0x18;
			case 0x185E:
				return 0x18;
			case 0x185F:
				return 0x19;
			case 0x1860:
				return 0x19;
			case 0x1861:
				return 0x18;
			case 0x1862:
				return 0x1A;
			case 0x1863:
				return 0x19;
			case 0x1864:
				return 0x19;
			case 0x1865:
				return 0x19;
			case 0x1866:
				return 0x19;
			case 0x1867:
				return 0x1A;
			case 0x1868:
				return 0x19;
			case 0x1869:
				return 0x19;
			case 0x186A:
				return 0x19;
			case 0x186B:
				return 0x19;
			case 0x186C:
				return 0x1A;
			case 0x186D:
				return 0x1A;
			case 0x186E:
				return 0x1A;
			case 0x186F:
				return 0x19;
			case 0x1870:
				return 0x1A;
			case 0x1871:
				return 0x1A;
			case 0x1872:
				return 0x1A;
			case 0x1873:
				return 0x1A;
			case 0x1874:
				return 0x1B;
			case 0x1875:
				return 0x1B;
			case 0x1876:
				return 0x1B;
			case 0x1877:
				return 0x1C;
			case 0x1878:
				return 0x23;
			case 0x1880:
				return 0x27;
			case 0x1881:
				return 0x26;
			case 0x1882:
				return 0x21;
			case 0x1883:
				return 0x22;
			case 0x1884:
				return 0x2B;
			case 0x1885:
				return 0x21;
			case 0x1886:
				return 0x27;
			case 0x1887:
				return 0x1C;
			case 0x1888:
				return 0x1C;
			case 0x1889:
				return 0x1D;
			case 0x188A:
				return 0x1E;
			case 0x188B:
				return 0x1D;
			case 0x188C:
				return 0x1E;
			case 0x188D:
				return 0x1F;
			case 0x188E:
				return 0x1E;
			case 0x188F:
				return 0x1E;
			case 0x1890:
				return 0x1D;
			case 0x1891:
				return 0x1D;
			case 0x1892:
				return 0x1D;
			case 0x1893:
				return 0x1E;
			case 0x1894:
				return 0x1E;
			case 0x1895:
				return 0x1E;
			case 0x1896:
				return 0x1D;
			case 0x1897:
				return 0x1D;
			case 0x1898:
				return 0x22;
			case 0x1899:
				return 0x23;
			case 0x189A:
				return 0x25;
			case 0x189B:
				return 0x25;
			case 0x189C:
				return 0x24;
			case 0x189D:
				return 0x25;
			case 0x189E:
				return 0x25;
			case 0x189F:
				return 0x26;
			case 0x18A0:
				return 0x24;
			case 0x18A1:
				return 0x25;
			case 0x18A2:
				return 0x25;
			case 0x18A3:
				return 0x25;
			case 0x18A4:
				return 0x25;
			case 0x18A5:
				return 0x24;
			case 0x18A6:
				return 0x21;
			case 0x18A7:
				return 0x22;
			case 0x18A8:
				return 0x25;
			case 0x18A9:
				return 0x22;
			case 0x18AA:
				return 0x25;
			case 0x18B0:
				return 0x16;
			case 0x18B1:
				return 0x16;
			case 0x18B2:
				return 0x17;
			case 0x18B3:
				return 0x17;
			case 0x18B4:
				return 0x17;
			case 0x18B5:
				return 0x17;
			case 0x18B6:
				return 0x18;
			case 0x18B7:
				return 0x17;
			case 0x18B8:
				return 0x17;
			case 0x18B9:
				return 0x18;
			case 0x18BA:
				return 0x17;
			case 0x18BB:
				return 0x17;
			case 0x18BC:
				return 0x17;
			case 0x18BD:
				return 0x17;
			case 0x18BE:
				return 0x17;
			case 0x18BF:
				return 0x17;
			case 0x18C0:
				return 0x18;
			case 0x18C1:
				return 0x18;
			case 0x18C2:
				return 0x19;
			case 0x18C3:
				return 0x17;
			case 0x18C4:
				return 0x17;
			case 0x18C5:
				return 0x17;
			case 0x18C6:
				return 0x17;
			case 0x18C7:
				return 0x1F;
			case 0x18C8:
				return 0x18;
			case 0x18C9:
				return 0x20;
			case 0x18CA:
				return 0x17;
			case 0x18CB:
				return 0x1F;
			case 0x18CC:
				return 0x18;
			case 0x18CD:
				return 0x20;
			case 0x18CE:
				return 0x18;
			case 0x18CF:
				return 0x17;
			case 0x18D0:
				return 0x18;
			case 0x18D1:
				return 0x17;
			case 0x18D2:
				return 0x18;
			case 0x18D3:
				return 0x17;
			case 0x18D4:
				return 0x1D;
			case 0x18D5:
				return 0x1D;
			case 0x18D6:
				return 0x1D;
			case 0x18D7:
				return 0x1D;
			case 0x18D8:
				return 0x1D;
			case 0x18D9:
				return 0x1D;
			case 0x18DA:
				return 0x1D;
			case 0x18DB:
				return 0x1E;
			case 0x18DC:
				return 0x1D;
			case 0x18DD:
				return 0x1D;
			case 0x18DE:
				return 0x24;
			case 0x18DF:
				return 0x24;
			case 0x18E0:
				return 0x1E;
			case 0x18E1:
				return 0x21;
			case 0x18E2:
				return 0x21;
			case 0x18E3:
				return 0x18;
			case 0x18E4:
				return 0x18;
			case 0x18E5:
				return 0x19;
			case 0x18E6:
				return 0x19;
			case 0x18E7:
				return 0x19;
			case 0x18E8:
				return 0x19;
			case 0x18E9:
				return 0x19;
			case 0x18EA:
				return 0x1F;
			case 0x18EB:
				return 0x1F;
			case 0x18EC:
				return 0x1E;
			case 0x18ED:
				return 0x1F;
			case 0x18EE:
				return 0x24;
			case 0x18EF:
				return 0x1F;
			case 0x18F0:
				return 0x1F;
			case 0x18F1:
				return 0x1E;
			case 0x18F2:
				return 0x1F;
			case 0x18F3:
				return 0x21;
			case 0x18F4:
				return 0x21;
			case 0x18F5:
				return 0x24;
			case 0x1900:
				return 0x1B;
			case 0x1901:
				return 0x10;
			case 0x1902:
				return 0x11;
			case 0x1903:
				return 0x10;
			case 0x1904:
				return 0x11;
			case 0x1905:
				return 0x11;
			case 0x1906:
				return 0x10;
			case 0x1907:
				return 0x11;
			case 0x1908:
				return 0x10;
			case 0x1909:
				return 0x11;
			case 0x190A:
				return 0x11;
			case 0x190B:
				return 0x10;
			case 0x190C:
				return 0x11;
			case 0x190D:
				return 0x10;
			case 0x190E:
				return 0x11;
			case 0x190F:
				return 0x10;
			case 0x1910:
				return 0x10;
			case 0x1911:
				return 0x11;
			case 0x1912:
				return 0x10;
			case 0x1913:
				return 0x11;
			case 0x1914:
				return 0x10;
			case 0x1915:
				return 0x10;
			case 0x1916:
				return 0x10;
			case 0x1917:
				return 0x10;
			case 0x1918:
				return 0x10;
			case 0x1919:
				return 0x11;
			case 0x191A:
				return 0x11;
			case 0x191B:
				return 0x10;
			case 0x191C:
				return 0x10;
			case 0x191D:
				return 0x12;
			case 0x191E:
				return 0x11;
			case 0x1920:
				return 0x13;
			case 0x1921:
				return 0x13;
			case 0x1922:
				return 0x13;
			case 0x1923:
				return 0x14;
			case 0x1924:
				return 0x14;
			case 0x1925:
				return 0x14;
			case 0x1926:
				return 0x14;
			case 0x1927:
				return 0x13;
			case 0x1928:
				return 0x13;
			case 0x1929:
				return 0x1A;
			case 0x192A:
				return 0x1A;
			case 0x192B:
				return 0x1A;
			case 0x1930:
				return 0x16;
			case 0x1931:
				return 0x17;
			case 0x1932:
				return 0x1C;
			case 0x1933:
				return 0x16;
			case 0x1934:
				return 0x16;
			case 0x1935:
				return 0x16;
			case 0x1936:
				return 0x16;
			case 0x1937:
				return 0x16;
			case 0x1938:
				return 0x16;
			case 0x1939:
				return 0x15;
			case 0x193A:
				return 0x15;
			case 0x193B:
				return 0x10;
			case 0x1940:
				return 0xF;
			case 0x1944:
				return 0x17;
			case 0x1945:
				return 0x14;
			case 0x1946:
				return 0x11;
			case 0x1947:
				return 0x10;
			case 0x1948:
				return 0x10;
			case 0x1949:
				return 0x12;
			case 0x194A:
				return 0x11;
			case 0x194B:
				return 0x11;
			case 0x194C:
				return 0x10;
			case 0x194D:
				return 0x12;
			case 0x194E:
				return 0x12;
			case 0x194F:
				return 0x11;
			case 0x1950:
				return 0x11;
			case 0x1951:
				return 0x11;
			case 0x1952:
				return 0x12;
			case 0x1953:
				return 0x12;
			case 0x1954:
				return 0x11;
			case 0x1955:
				return 0x11;
			case 0x1956:
				return 0x11;
			case 0x1957:
				return 0x12;
			case 0x1958:
				return 0x11;
			case 0x1959:
				return 0x11;
			case 0x195A:
				return 0x12;
			case 0x195B:
				return 0x11;
			case 0x195C:
				return 0x11;
			case 0x195D:
				return 0x11;
			case 0x195E:
				return 0x11;
			case 0x195F:
				return 0x11;
			case 0x1960:
				return 0x12;
			case 0x1961:
				return 0x13;
			case 0x1962:
				return 0x11;
			case 0x1963:
				return 0x10;
			case 0x1964:
				return 0x10;
			case 0x1965:
				return 0x11;
			case 0x1966:
				return 0x11;
			case 0x1967:
				return 0x10;
			case 0x1968:
				return 0x11;
			case 0x1969:
				return 0x10;
			case 0x196A:
				return 0x11;
			case 0x196B:
				return 0x10;
			case 0x196C:
				return 0x12;
			case 0x196D:
				return 0x11;
			case 0x1970:
				return 0x15;
			case 0x1971:
				return 0x15;
			case 0x1972:
				return 0x15;
			case 0x1973:
				return 0x15;
			case 0x1974:
				return 0x15;
			case 0x1980:
				return 0x1B;
			case 0x1981:
				return 0x1A;
			case 0x1982:
				return 0x1B;
			case 0x1983:
				return 0x1B;
			case 0x1984:
				return 0x1C;
			case 0x1985:
				return 0x1A;
			case 0x1986:
				return 0x1A;
			case 0x1987:
				return 0x1B;
			case 0x1988:
				return 0x1C;
			case 0x1989:
				return 0x1B;
			case 0x198A:
				return 0x1B;
			case 0x198B:
				return 0x1B;
			case 0x198C:
				return 0x1A;
			case 0x198D:
				return 0x1A;
			case 0x198E:
				return 0x1B;
			case 0x198F:
				return 0x1C;
			case 0x1990:
				return 0x1B;
			case 0x1991:
				return 0x1A;
			case 0x1992:
				return 0x1B;
			case 0x1993:
				return 0x1A;
			case 0x1994:
				return 0x1B;
			case 0x1995:
				return 0x1C;
			case 0x1996:
				return 0x1B;
			case 0x1997:
				return 0x1A;
			case 0x1998:
				return 0x1B;
			case 0x1999:
				return 0x1A;
			case 0x199A:
				return 0x1B;
			case 0x199B:
				return 0x1B;
			case 0x199C:
				return 0x1B;
			case 0x199D:
				return 0x1A;
			case 0x199E:
				return 0x1A;
			case 0x199F:
				return 0x1A;
			case 0x19A0:
				return 0x1B;
			case 0x19A1:
				return 0x1B;
			case 0x19A2:
				return 0x1B;
			case 0x19A3:
				return 0x1A;
			case 0x19A4:
				return 0x1A;
			case 0x19A5:
				return 0x1A;
			case 0x19A6:
				return 0x1C;
			case 0x19A7:
				return 0x1C;
			case 0x19A8:
				return 0x1B;
			case 0x19A9:
				return 0x1B;
			case 0x19AA:
				return 0x1C;
			case 0x19AB:
				return 0x1B;
			case 0x19B0:
				return 0x27;
			case 0x19B1:
				return 0x1A;
			case 0x19B2:
				return 0x1A;
			case 0x19B3:
				return 0x19;
			case 0x19B4:
				return 0x1A;
			case 0x19B5:
				return 0x19;
			case 0x19B6:
				return 0x1A;
			case 0x19B7:
				return 0x19;
			case 0x19B8:
				return 0x1A;
			case 0x19B9:
				return 0x1A;
			case 0x19BA:
				return 0x1A;
			case 0x19BB:
				return 0x1B;
			case 0x19BC:
				return 0x1A;
			case 0x19BD:
				return 0x1A;
			case 0x19BE:
				return 0x1B;
			case 0x19BF:
				return 0x1B;
			case 0x19C0:
				return 0x1A;
			case 0x19C1:
				return 0x1B;
			case 0x19C2:
				return 0x1C;
			case 0x19C3:
				return 0x1B;
			case 0x19C4:
				return 0x1B;
			case 0x19C5:
				return 0x1B;
			case 0x19C6:
				return 0x1B;
			case 0x19C7:
				return 0x1B;
			case 0x19C8:
				return 0x18;
			case 0x19C9:
				return 0x18;
			case 0x19D0:
				return 0x17;
			case 0x19D1:
				return 0x16;
			case 0x19D2:
				return 0x16;
			case 0x19D3:
				return 0x18;
			case 0x19D4:
				return 0x17;
			case 0x19D5:
				return 0x17;
			case 0x19D6:
				return 0x16;
			case 0x19D7:
				return 0x18;
			case 0x19D8:
				return 0x18;
			case 0x19D9:
				return 0x17;
			case 0x19DA:
				return 0x1B;
			case 0x19DE:
				return 0x15;
			case 0x19DF:
				return 0x16;
			case 0x19E0:
				return 0x18;
			case 0x19E1:
				return 0x17;
			case 0x19E2:
				return 0x16;
			case 0x19E3:
				return 0x16;
			case 0x19E4:
				return 0x17;
			case 0x19E5:
				return 0x17;
			case 0x19E6:
				return 0x1C;
			case 0x19E7:
				return 0x1B;
			case 0x19E8:
				return 0x1B;
			case 0x19E9:
				return 0x1C;
			case 0x19EA:
				return 0x16;
			case 0x19EB:
				return 0x1B;
			case 0x19EC:
				return 0x1A;
			case 0x19ED:
				return 0x1A;
			case 0x19EE:
				return 0x1B;
			case 0x19EF:
				return 0x1B;
			case 0x19F0:
				return 0x17;
			case 0x19F1:
				return 0x16;
			case 0x19F2:
				return 0x15;
			case 0x19F3:
				return 0x15;
			case 0x19F4:
				return 0x16;
			case 0x19F5:
				return 0x16;
			case 0x19F6:
				return 0x1B;
			case 0x19F7:
				return 0x1A;
			case 0x19F8:
				return 0x1A;
			case 0x19F9:
				return 0x1B;
			case 0x19FA:
				return 0x15;
			case 0x19FB:
				return 0x1A;
			case 0x19FC:
				return 0x19;
			case 0x19FD:
				return 0x19;
			case 0x19FE:
				return 0x1A;
			case 0x19FF:
				return 0x1A;
			case 0x1A00:
				return 0x13;
			case 0x1A01:
				return 0x13;
			case 0x1A02:
				return 0x14;
			case 0x1A03:
				return 0x15;
			case 0x1A04:
				return 0x13;
			case 0x1A05:
				return 0x13;
			case 0x1A06:
				return 0x13;
			case 0x1A07:
				return 0x14;
			case 0x1A08:
				return 0x13;
			case 0x1A09:
				return 0x13;
			case 0x1A0A:
				return 0x13;
			case 0x1A0B:
				return 0x14;
			case 0x1A0C:
				return 0x13;
			case 0x1A0D:
				return 0x13;
			case 0x1A0E:
				return 0x14;
			case 0x1A0F:
				return 0x15;
			case 0x1A10:
				return 0x13;
			case 0x1A11:
				return 0x13;
			case 0x1A12:
				return 0x13;
			case 0x1A13:
				return 0x13;
			case 0x1A14:
				return 0x13;
			case 0x1A15:
				return 0x12;
			case 0x1A16:
				return 0x13;
			case 0x1A17:
				return 0x16;
			case 0x1A18:
				return 0x16;
			case 0x1A19:
				return 0x16;
			case 0x1A1A:
				return 0x16;
			case 0x1A1B:
				return 0x17;
			case 0x1A1E:
				return 0x11;
			case 0x1A1F:
				return 0x18;
			case 0x1A20:
				return 0x18;
			case 0x1A21:
				return 0x19;
			case 0x1A22:
				return 0x19;
			case 0x1A23:
				return 0x17;
			case 0x1A24:
				return 0x18;
			case 0x1A25:
				return 0x18;
			case 0x1A26:
				return 0x14;
			case 0x1A27:
				return 0x18;
			case 0x1A28:
				return 0x19;
			case 0x1A29:
				return 0x17;
			case 0x1A2A:
				return 0x17;
			case 0x1A2B:
				return 0x18;
			case 0x1A2C:
				return 0x14;
			case 0x1A2D:
				return 0x15;
			case 0x1A2E:
				return 0x1B;
			case 0x1A2F:
				return 0x13;
			case 0x1A30:
				return 0x1A;
			case 0x1A31:
				return 0x15;
			case 0x1A32:
				return 0x18;
			case 0x1A33:
				return 0x19;
			case 0x1A34:
				return 0x17;
			case 0x1A35:
				return 0x18;
			case 0x1A36:
				return 0x13;
			case 0x1A37:
				return 0x13;
			case 0x1A38:
				return 0x18;
			case 0x1A39:
				return 0x19;
			case 0x1A3A:
				return 0x18;
			case 0x1A3B:
				return 0x17;
			case 0x1A3C:
				return 0x17;
			case 0x1A3D:
				return 0x18;
			case 0x1A3E:
				return 0x13;
			case 0x1A3F:
				return 0x17;
			case 0x1A40:
				return 0x18;
			case 0x1A41:
				return 0x13;
			case 0x1A42:
				return 0x14;
			case 0x1A43:
				return 0x13;
			case 0x1A44:
				return 0x14;
			case 0x1A45:
				return 0x13;
			case 0x1A46:
				return 0x19;
			case 0x1A47:
				return 0x19;
			case 0x1A48:
				return 0x18;
			case 0x1A49:
				return 0x18;
			case 0x1A4A:
				return 0x14;
			case 0x1A4B:
				return 0x12;
			case 0x1A4C:
				return 0x17;
			case 0x1A4D:
				return 0x12;
			case 0x1A4E:
				return 0x13;
			case 0x1A4F:
				return 0x12;
			case 0x1A50:
				return 0x13;
			case 0x1A51:
				return 0x13;
			case 0x1A52:
				return 0x13;
			case 0x1A53:
				return 0x14;
			case 0x1A54:
				return 0x19;
			case 0x1A55:
				return 0x22;
			case 0x1A56:
				return 0x22;
			case 0x1A57:
				return 0x24;
			case 0x1A58:
				return 0x1B;
			case 0x1A59:
				return 0x22;
			case 0x1A5A:
				return 0x1F;
			case 0x1A5B:
				return 0x2D;
			case 0x1A5C:
				return 0x1B;
			case 0x1A5D:
				return 0x1B;
			case 0x1A5E:
				return 0x1B;
			case 0x1A60:
				return 0x14;
			case 0x1A61:
				return 0x16;
			case 0x1A62:
				return 0x1C;
			case 0x1A63:
				return 0x17;
			case 0x1A64:
				return 0x1C;
			case 0x1A65:
				return 0x16;
			case 0x1A66:
				return 0x17;
			case 0x1A67:
				return 0x17;
			case 0x1A68:
				return 0x18;
			case 0x1A69:
				return 0x16;
			case 0x1A6A:
				return 0x17;
			case 0x1A6B:
				return 0x16;
			case 0x1A6C:
				return 0x1D;
			case 0x1A6D:
				return 0x17;
			case 0x1A6E:
				return 0x16;
			case 0x1A6F:
				return 0x17;
			case 0x1A70:
				return 0x17;
			case 0x1A71:
				return 0x17;
			case 0x1A72:
				return 0x1C;
			case 0x1A73:
				return 0x1D;
			case 0x1A74:
				return 0x17;
			case 0x1A75:
				return 0x15;
			case 0x1A76:
				return 0x15;
			case 0x1A77:
				return 0x1B;
			case 0x1A78:
				return 0x1B;
			case 0x1A79:
				return 0x1B;
			case 0x1A7A:
				return 0x16;
			case 0x1A7B:
				return 0x16;
			case 0x1A7C:
				return 0x1E;
			case 0x1A7F:
				return 0x25;
			case 0x1A80:
				return 0x19;
			case 0x1A81:
				return 0x18;
			case 0x1A82:
				return 0x18;
			case 0x1A83:
				return 0x1A;
			case 0x1A84:
				return 0x19;
			case 0x1A85:
				return 0x19;
			case 0x1A86:
				return 0x18;
			case 0x1A87:
				return 0x1A;
			case 0x1A88:
				return 0x1A;
			case 0x1A89:
				return 0x19;
			case 0x1A90:
				return 0x19;
			case 0x1A91:
				return 0x18;
			case 0x1A92:
				return 0x18;
			case 0x1A93:
				return 0x1A;
			case 0x1A94:
				return 0x19;
			case 0x1A95:
				return 0x19;
			case 0x1A96:
				return 0x18;
			case 0x1A97:
				return 0x1A;
			case 0x1A98:
				return 0x1A;
			case 0x1A99:
				return 0x19;
			case 0x1AA0:
				return 0x14;
			case 0x1AA1:
				return 0x18;
			case 0x1AA2:
				return 0x14;
			case 0x1AA3:
				return 0x13;
			case 0x1AA4:
				return 0x12;
			case 0x1AA5:
				return 0x15;
			case 0x1AA6:
				return 0x24;
			case 0x1AA7:
				return 0x18;
			case 0x1AA8:
				return 0x13;
			case 0x1AA9:
				return 0x16;
			case 0x1AAA:
				return 0x16;
			case 0x1AAB:
				return 0x19;
			case 0x1AAC:
				return 0x13;
			case 0x1AAD:
				return 0x14;
			case 0x1AB0:
				return 0x24;
			case 0x1AB1:
				return 0x19;
			case 0x1AB2:
				return 0x13;
			case 0x1AB3:
				return 0x1A;
			case 0x1AB4:
				return 0x15;
			case 0x1AB5:
				return 0x14;
			case 0x1AB6:
				return 0x1C;
			case 0x1AB7:
				return 0x1A;
			case 0x1AB8:
				return 0x21;
			case 0x1AB9:
				return 0x2C;
			case 0x1ABA:
				return 0x2D;
			case 0x1ABB:
				return 0x1C;
			case 0x1ABC:
				return 0x23;
			case 0x1ABD:
				return 0x1C;
			case 0x1ABE:
				return 0x1E;
			case 0x1ABF:
				return 0x25;
			case 0x1AC0:
				return 0x2C;
			case 0x1B00:
				return 0x18;
			case 0x1B01:
				return 0x19;
			case 0x1B02:
				return 0x14;
			case 0x1B03:
				return 0x15;
			case 0x1B04:
				return 0x14;
			case 0x1B05:
				return 0x16;
			case 0x1B06:
				return 0x1D;
			case 0x1B07:
				return 0x16;
			case 0x1B08:
				return 0x1D;
			case 0x1B09:
				return 0x16;
			case 0x1B0A:
				return 0x1D;
			case 0x1B0B:
				return 0x18;
			case 0x1B0C:
				return 0x1F;
			case 0x1B0D:
				return 0x19;
			case 0x1B0E:
				return 0x20;
			case 0x1B0F:
				return 0x16;
			case 0x1B10:
				return 0x17;
			case 0x1B11:
				return 0x16;
			case 0x1B12:
				return 0x1D;
			case 0x1B13:
				return 0x13;
			case 0x1B14:
				return 0x1D;
			case 0x1B15:
				return 0x13;
			case 0x1B16:
				return 0x18;
			case 0x1B17:
				return 0x14;
			case 0x1B18:
				return 0x13;
			case 0x1B19:
				return 0x18;
			case 0x1B1A:
				return 0x13;
			case 0x1B1B:
				return 0x18;
			case 0x1B1C:
				return 0x14;
			case 0x1B1D:
				return 0x19;
			case 0x1B1E:
				return 0x23;
			case 0x1B1F:
				return 0x23;
			case 0x1B20:
				return 0x23;
			case 0x1B21:
				return 0x1A;
			case 0x1B22:
				return 0x13;
			case 0x1B23:
				return 0x18;
			case 0x1B24:
				return 0x13;
			case 0x1B25:
				return 0x18;
			case 0x1B26:
				return 0x13;
			case 0x1B27:
				return 0x13;
			case 0x1B28:
				return 0x19;
			case 0x1B29:
				return 0x13;
			case 0x1B2A:
				return 0x1B;
			case 0x1B2B:
				return 0x13;
			case 0x1B2C:
				return 0x13;
			case 0x1B2D:
				return 0x13;
			case 0x1B2E:
				return 0x13;
			case 0x1B2F:
				return 0x13;
			case 0x1B30:
				return 0x18;
			case 0x1B31:
				return 0x18;
			case 0x1B32:
				return 0x13;
			case 0x1B33:
				return 0x13;
			case 0x1B34:
				return 0x16;
			case 0x1B35:
				return 0x1B;
			case 0x1B36:
				return 0x18;
			case 0x1B37:
				return 0x1D;
			case 0x1B38:
				return 0x19;
			case 0x1B39:
				return 0x1E;
			case 0x1B3A:
				return 0x1C;
			case 0x1B3B:
				return 0x23;
			case 0x1B3C:
				return 0x1D;
			case 0x1B3D:
				return 0x24;
			case 0x1B3E:
				return 0x1B;
			case 0x1B3F:
				return 0x20;
			case 0x1B40:
				return 0x22;
			case 0x1B41:
				return 0x27;
			case 0x1B42:
				return 0x1A;
			case 0x1B43:
				return 0x21;
			case 0x1B44:
				return 0x13;
			case 0x1B45:
				return 0x1A;
			case 0x1B46:
				return 0x1B;
			case 0x1B47:
				return 0x1B;
			case 0x1B48:
				return 0x19;
			case 0x1B49:
				return 0x19;
			case 0x1B4A:
				return 0x1A;
			case 0x1B4B:
				return 0x1D;
			case 0x1B50:
				return 0x14;
			case 0x1B51:
				return 0x13;
			case 0x1B52:
				return 0x13;
			case 0x1B53:
				return 0x15;
			case 0x1B54:
				return 0x14;
			case 0x1B55:
				return 0x14;
			case 0x1B56:
				return 0x13;
			case 0x1B57:
				return 0x15;
			case 0x1B58:
				return 0x15;
			case 0x1B59:
				return 0x14;
			case 0x1B5A:
				return 0xF;
			case 0x1B5B:
				return 0x10;
			case 0x1B5C:
				return 0xF;
			case 0x1B5D:
				return 0x19;
			case 0x1B5E:
				return 0x14;
			case 0x1B5F:
				return 0x17;
			case 0x1B60:
				return 0x12;
			case 0x1B61:
				return 0x1D;
			case 0x1B62:
				return 0x1D;
			case 0x1B63:
				return 0x1D;
			case 0x1B64:
				return 0x1D;
			case 0x1B65:
				return 0x24;
			case 0x1B66:
				return 0x1D;
			case 0x1B67:
				return 0x1E;
			case 0x1B68:
				return 0x1E;
			case 0x1B69:
				return 0x1E;
			case 0x1B6A:
				return 0x22;
			case 0x1B6B:
				return 0x28;
			case 0x1B6C:
				return 0x28;
			case 0x1B6D:
				return 0x29;
			case 0x1B6E:
				return 0x29;
			case 0x1B6F:
				return 0x2A;
			case 0x1B70:
				return 0x36;
			case 0x1B71:
				return 0x36;
			case 0x1B72:
				return 0x28;
			case 0x1B73:
				return 0x27;
			case 0x1B74:
				return 0x2C;
			case 0x1B75:
				return 0x2C;
			case 0x1B76:
				return 0x2E;
			case 0x1B77:
				return 0x2E;
			case 0x1B78:
				return 0x2C;
			case 0x1B79:
				return 0x2C;
			case 0x1B7A:
				return 0x2E;
			case 0x1B7B:
				return 0x2E;
			case 0x1B7C:
				return 0x2C;
			case 0x1B80:
				return 0x18;
			case 0x1B81:
				return 0x19;
			case 0x1B82:
				return 0x19;
			case 0x1B83:
				return 0x13;
			case 0x1B84:
				return 0x13;
			case 0x1B85:
				return 0x13;
			case 0x1B86:
				return 0x14;
			case 0x1B87:
				return 0x13;
			case 0x1B88:
				return 0x13;
			case 0x1B89:
				return 0x14;
			case 0x1B8A:
				return 0x14;
			case 0x1B8B:
				return 0x14;
			case 0x1B8C:
				return 0x14;
			case 0x1B8D:
				return 0x15;
			case 0x1B8E:
				return 0x14;
			case 0x1B8F:
				return 0x14;
			case 0x1B90:
				return 0x14;
			case 0x1B91:
				return 0x15;
			case 0x1B92:
				return 0x14;
			case 0x1B93:
				return 0x14;
			case 0x1B94:
				return 0x14;
			case 0x1B95:
				return 0x14;
			case 0x1B96:
				return 0x14;
			case 0x1B97:
				return 0x14;
			case 0x1B98:
				return 0x14;
			case 0x1B99:
				return 0x14;
			case 0x1B9A:
				return 0x14;
			case 0x1B9B:
				return 0x14;
			case 0x1B9C:
				return 0x14;
			case 0x1B9D:
				return 0x14;
			case 0x1B9E:
				return 0x14;
			case 0x1B9F:
				return 0x14;
			case 0x1BA0:
				return 0x14;
			case 0x1BA1:
				return 0x23;
			case 0x1BA2:
				return 0x22;
			case 0x1BA3:
				return 0x21;
			case 0x1BA4:
				return 0x1E;
			case 0x1BA5:
				return 0x1D;
			case 0x1BA6:
				return 0x20;
			case 0x1BA7:
				return 0x1E;
			case 0x1BA8:
				return 0x1D;
			case 0x1BA9:
				return 0x20;
			case 0x1BAA:
				return 0x17;
			case 0x1BAB:
				return 0x16;
			case 0x1BAC:
				return 0x25;
			case 0x1BAD:
				return 0x25;
			case 0x1BAE:
				return 0x15;
			case 0x1BAF:
				return 0x15;
			case 0x1BB0:
				return 0x15;
			case 0x1BB1:
				return 0x14;
			case 0x1BB2:
				return 0x14;
			case 0x1BB3:
				return 0x16;
			case 0x1BB4:
				return 0x15;
			case 0x1BB5:
				return 0x15;
			case 0x1BB6:
				return 0x14;
			case 0x1BB7:
				return 0x16;
			case 0x1BB8:
				return 0x16;
			case 0x1BB9:
				return 0x15;
			case 0x1BBA:
				return 0x13;
			case 0x1BBB:
				return 0x15;
			case 0x1BBC:
				return 0x15;
			case 0x1BBD:
				return 0x15;
			case 0x1BBE:
				return 0x19;
			case 0x1BBF:
				return 0x19;
			case 0x1BC0:
				return 0xF;
			case 0x1BC1:
				return 0x1A;
			case 0x1BC2:
				return 0x10;
			case 0x1BC3:
				return 0x1B;
			case 0x1BC4:
				return 0x1B;
			case 0x1BC5:
				return 0x10;
			case 0x1BC6:
				return 0x15;
			case 0x1BC7:
				return 0x10;
			case 0x1BC8:
				return 0x1B;
			case 0x1BC9:
				return 0x10;
			case 0x1BCA:
				return 0x1B;
			case 0x1BCB:
				return 0x10;
			case 0x1BCC:
				return 0x1B;
			case 0x1BCD:
				return 0x17;
			case 0x1BCE:
				return 0x10;
			case 0x1BCF:
				return 0x1B;
			case 0x1BD0:
				return 0x10;
			case 0x1BD1:
				return 0x10;
			case 0x1BD2:
				return 0x10;
			case 0x1BD3:
				return 0x1B;
			case 0x1BD4:
				return 0x10;
			case 0x1BD5:
				return 0x1B;
			case 0x1BD6:
				return 0x19;
			case 0x1BD7:
				return 0x19;
			case 0x1BD8:
				return 0x10;
			case 0x1BD9:
				return 0x1B;
			case 0x1BDA:
				return 0x1B;
			case 0x1BDB:
				return 0x10;
			case 0x1BDC:
				return 0x1B;
			case 0x1BDD:
				return 0x11;
			case 0x1BDE:
				return 0x10;
			case 0x1BDF:
				return 0x1B;
			case 0x1BE0:
				return 0x11;
			case 0x1BE1:
				return 0x10;
			case 0x1BE2:
				return 0x11;
			case 0x1BE3:
				return 0x11;
			case 0x1BE4:
				return 0xF;
			case 0x1BE5:
				return 0xF;
			case 0x1BE6:
				return 0x11;
			case 0x1BE7:
				return 0x13;
			case 0x1BE8:
				return 0x1A;
			case 0x1BE9:
				return 0x14;
			case 0x1BEA:
				return 0x13;
			case 0x1BEB:
				return 0x18;
			case 0x1BEC:
				return 0x13;
			case 0x1BED:
				return 0x18;
			case 0x1BEE:
				return 0x13;
			case 0x1BEF:
				return 0x25;
			case 0x1BF0:
				return 0x18;
			case 0x1BF1:
				return 0x17;
			case 0x1BF2:
				return 0xF;
			case 0x1BF3:
				return 0x11;
			case 0x1BFC:
				return 0x1C;
			case 0x1BFD:
				return 0x1E;
			case 0x1BFE:
				return 0x19;
			case 0x1BFF:
				return 0x1C;
			case 0x1C00:
				return 0x11;
			case 0x1C01:
				return 0x12;
			case 0x1C02:
				return 0x12;
			case 0x1C03:
				return 0x11;
			case 0x1C04:
				return 0x12;
			case 0x1C05:
				return 0x12;
			case 0x1C06:
				return 0x11;
			case 0x1C07:
				return 0x12;
			case 0x1C08:
				return 0x11;
			case 0x1C09:
				return 0x12;
			case 0x1C0A:
				return 0x11;
			case 0x1C0B:
				return 0x12;
			case 0x1C0C:
				return 0x11;
			case 0x1C0D:
				return 0x11;
			case 0x1C0E:
				return 0x11;
			case 0x1C0F:
				return 0x12;
			case 0x1C10:
				return 0x12;
			case 0x1C11:
				return 0x11;
			case 0x1C12:
				return 0x12;
			case 0x1C13:
				return 0x11;
			case 0x1C14:
				return 0x12;
			case 0x1C15:
				return 0x11;
			case 0x1C16:
				return 0x12;
			case 0x1C17:
				return 0x12;
			case 0x1C18:
				return 0x13;
			case 0x1C19:
				return 0x12;
			case 0x1C1A:
				return 0x11;
			case 0x1C1B:
				return 0x11;
			case 0x1C1C:
				return 0x11;
			case 0x1C1D:
				return 0x11;
			case 0x1C1E:
				return 0x12;
			case 0x1C1F:
				return 0x11;
			case 0x1C20:
				return 0x11;
			case 0x1C21:
				return 0x12;
			case 0x1C22:
				return 0x11;
			case 0x1C23:
				return 0x10;
			case 0x1C24:
				return 0x1B;
			case 0x1C25:
				return 0x1B;
			case 0x1C26:
				return 0x15;
			case 0x1C27:
				return 0x14;
			case 0x1C28:
				return 0x14;
			case 0x1C29:
				return 0x15;
			case 0x1C2A:
				return 0x14;
			case 0x1C2B:
				return 0x15;
			case 0x1C2C:
				return 0x14;
			case 0x1C2D:
				return 0x18;
			case 0x1C2E:
				return 0x18;
			case 0x1C2F:
				return 0x18;
			case 0x1C30:
				return 0x18;
			case 0x1C31:
				return 0x18;
			case 0x1C32:
				return 0x18;
			case 0x1C33:
				return 0x18;
			case 0x1C34:
				return 0x1E;
			case 0x1C35:
				return 0x1B;
			case 0x1C36:
				return 0x10;
			case 0x1C37:
				return 0x12;
			case 0x1C3B:
				return 0x1A;
			case 0x1C3C:
				return 0x26;
			case 0x1C3D:
				return 0x1A;
			case 0x1C3E:
				return 0x21;
			case 0x1C3F:
				return 0x1A;
			case 0x1C40:
				return 0x12;
			case 0x1C41:
				return 0x11;
			case 0x1C42:
				return 0x11;
			case 0x1C43:
				return 0x13;
			case 0x1C44:
				return 0x12;
			case 0x1C45:
				return 0x12;
			case 0x1C46:
				return 0x11;
			case 0x1C47:
				return 0x13;
			case 0x1C48:
				return 0x13;
			case 0x1C49:
				return 0x12;
			case 0x1C4D:
				return 0x12;
			case 0x1C4E:
				return 0x13;
			case 0x1C4F:
				return 0x12;
			case 0x1C50:
				return 0x14;
			case 0x1C51:
				return 0x13;
			case 0x1C52:
				return 0x13;
			case 0x1C53:
				return 0x15;
			case 0x1C54:
				return 0x14;
			case 0x1C55:
				return 0x14;
			case 0x1C56:
				return 0x13;
			case 0x1C57:
				return 0x15;
			case 0x1C58:
				return 0x15;
			case 0x1C59:
				return 0x14;
			case 0x1C5A:
				return 0x13;
			case 0x1C5B:
				return 0x13;
			case 0x1C5C:
				return 0x13;
			case 0x1C5D:
				return 0x14;
			case 0x1C5E:
				return 0x13;
			case 0x1C5F:
				return 0x14;
			case 0x1C60:
				return 0x14;
			case 0x1C61:
				return 0x14;
			case 0x1C62:
				return 0x14;
			case 0x1C63:
				return 0x14;
			case 0x1C64:
				return 0x13;
			case 0x1C65:
				return 0x13;
			case 0x1C66:
				return 0x13;
			case 0x1C67:
				return 0x14;
			case 0x1C68:
				return 0x13;
			case 0x1C69:
				return 0x13;
			case 0x1C6A:
				return 0x13;
			case 0x1C6B:
				return 0x13;
			case 0x1C6C:
				return 0x14;
			case 0x1C6D:
				return 0x13;
			case 0x1C6E:
				return 0x13;
			case 0x1C6F:
				return 0x13;
			case 0x1C70:
				return 0x14;
			case 0x1C71:
				return 0x13;
			case 0x1C72:
				return 0x14;
			case 0x1C73:
				return 0x13;
			case 0x1C74:
				return 0x14;
			case 0x1C75:
				return 0x13;
			case 0x1C76:
				return 0x13;
			case 0x1C77:
				return 0x13;
			case 0x1C78:
				return 0x14;
			case 0x1C79:
				return 0x1A;
			case 0x1C7A:
				return 0x1D;
			case 0x1C7B:
				return 0xF;
			case 0x1C7C:
				return 0x12;
			case 0x1C7D:
				return 0xE;
			case 0x1C7E:
				return 0x1C;
			case 0x1C7F:
				return 0x23;
			case 0x1C80:
				return 0x21;
			case 0x1C81:
				return 0x25;
			case 0x1C82:
				return 0x1F;
			case 0x1C83:
				return 0x1E;
			case 0x1C84:
				return 0x1E;
			case 0x1C85:
				return 0x26;
			case 0x1C86:
				return 0x25;
			case 0x1C87:
				return 0x1F;
			case 0x1C88:
				return 0x23;
			case 0x1C90:
				return 0x24;
			case 0x1C91:
				return 0x25;
			case 0x1C92:
				return 0x25;
			case 0x1C93:
				return 0x25;
			case 0x1C94:
				return 0x24;
			case 0x1C95:
				return 0x25;
			case 0x1C96:
				return 0x25;
			case 0x1C97:
				return 0x25;
			case 0x1C98:
				return 0x24;
			case 0x1C99:
				return 0x25;
			case 0x1C9A:
				return 0x25;
			case 0x1C9B:
				return 0x25;
			case 0x1C9C:
				return 0x25;
			case 0x1C9D:
				return 0x24;
			case 0x1C9E:
				return 0x25;
			case 0x1C9F:
				return 0x26;
			case 0x1CA0:
				return 0x25;
			case 0x1CA1:
				return 0x25;
			case 0x1CA2:
				return 0x25;
			case 0x1CA3:
				return 0x24;
			case 0x1CA4:
				return 0x26;
			case 0x1CA5:
				return 0x26;
			case 0x1CA6:
				return 0x26;
			case 0x1CA7:
				return 0x25;
			case 0x1CA8:
				return 0x26;
			case 0x1CA9:
				return 0x26;
			case 0x1CAA:
				return 0x25;
			case 0x1CAB:
				return 0x25;
			case 0x1CAC:
				return 0x25;
			case 0x1CAD:
				return 0x26;
			case 0x1CAE:
				return 0x25;
			case 0x1CAF:
				return 0x26;
			case 0x1CB0:
				return 0x25;
			case 0x1CB1:
				return 0x24;
			case 0x1CB2:
				return 0x25;
			case 0x1CB3:
				return 0x24;
			case 0x1CB4:
				return 0x25;
			case 0x1CB5:
				return 0x25;
			case 0x1CB6:
				return 0x24;
			case 0x1CB7:
				return 0x24;
			case 0x1CB8:
				return 0x27;
			case 0x1CB9:
				return 0x2C;
			case 0x1CBA:
				return 0x25;
			case 0x1CBD:
				return 0x25;
			case 0x1CBE:
				return 0x2B;
			case 0x1CBF:
				return 0x2D;
			case 0x1CC0:
				return 0x22;
			case 0x1CC1:
				return 0x25;
			case 0x1CC2:
				return 0x24;
			case 0x1CC3:
				return 0x22;
			case 0x1CC4:
				return 0x28;
			case 0x1CC5:
				return 0x27;
			case 0x1CC6:
				return 0x27;
			case 0x1CC7:
				return 0x27;
			case 0x1CD0:
				return 0x14;
			case 0x1CD1:
				return 0x11;
			case 0x1CD2:
				return 0x13;
			case 0x1CD3:
				return 0x15;
			case 0x1CD4:
				return 0x26;
			case 0x1CD5:
				return 0x35;
			case 0x1CD6:
				return 0x2A;
			case 0x1CD7:
				return 0x32;
			case 0x1CD8:
				return 0x18;
			case 0x1CD9:
				return 0x3C;
			case 0x1CDA:
				return 0x1A;
			case 0x1CDB:
				return 0x1A;
			case 0x1CDC:
				return 0x1C;
			case 0x1CDD:
				return 0x15;
			case 0x1CDE:
				return 0x1A;
			case 0x1CDF:
				return 0x1C;
			case 0x1CE0:
				return 0x31;
			case 0x1CE1:
				return 0x2C;
			case 0x1CE2:
				return 0x1B;
			case 0x1CE3:
				return 0x1A;
			case 0x1CE4:
				return 0x23;
			case 0x1CE5:
				return 0x1C;
			case 0x1CE6:
				return 0x25;
			case 0x1CE7:
				return 0x24;
			case 0x1CE8:
				return 0x26;
			case 0x1CE9:
				return 0x21;
			case 0x1CEA:
				return 0x21;
			case 0x1CEB:
				return 0x20;
			case 0x1CEC:
				return 0x2A;
			case 0x1CED:
				return 0x12;
			case 0x1CEE:
				return 0x22;
			case 0x1CEF:
				return 0x19;
			case 0x1CF0:
				return 0x20;
			case 0x1CF1:
				return 0x23;
			case 0x1CF2:
				return 0x18;
			case 0x1CF3:
				return 0x20;
			case 0x1CF4:
				return 0x18;
			case 0x1CF5:
				return 0x17;
			case 0x1CF6:
				return 0x17;
			case 0x1CF7:
				return 0x14;
			case 0x1CF8:
				return 0x16;
			case 0x1CF9:
				return 0x1D;
			case 0x1CFA:
				return 0x28;
			case 0x1D00:
				return 0x1D;
			case 0x1D01:
				return 0x1E;
			case 0x1D02:
				return 0x1D;
			case 0x1D03:
				return 0x24;
			case 0x1D04:
				return 0x1D;
			case 0x1D05:
				return 0x1D;
			case 0x1D06:
				return 0x1F;
			case 0x1D07:
				return 0x1D;
			case 0x1D08:
				return 0x21;
			case 0x1D09:
				return 0x1C;
			case 0x1D0A:
				return 0x1D;
			case 0x1D0B:
				return 0x1D;
			case 0x1D0C:
				return 0x29;
			case 0x1D0D:
				return 0x1D;
			case 0x1D0E:
				return 0x26;
			case 0x1D0F:
				return 0x1D;
			case 0x1D10:
				return 0x22;
			case 0x1D11:
				return 0x1E;
			case 0x1D12:
				return 0x23;
			case 0x1D13:
				return 0x2A;
			case 0x1D14:
				return 0x1D;
			case 0x1D15:
				return 0x1E;
			case 0x1D16:
				return 0x1E;
			case 0x1D17:
				return 0x21;
			case 0x1D18:
				return 0x1D;
			case 0x1D19:
				return 0x26;
			case 0x1D1A:
				return 0x24;
			case 0x1D1B:
				return 0x1D;
			case 0x1D1C:
				return 0x1D;
			case 0x1D1D:
				return 0x1E;
			case 0x1D1E:
				return 0x2A;
			case 0x1D1F:
				return 0x25;
			case 0x1D20:
				return 0x1D;
			case 0x1D21:
				return 0x1D;
			case 0x1D22:
				return 0x1D;
			case 0x1D23:
				return 0x1F;
			case 0x1D24:
				return 0x26;
			case 0x1D25:
				return 0x11;
			case 0x1D26:
				return 0x21;
			case 0x1D27:
				return 0x21;
			case 0x1D28:
				return 0x1E;
			case 0x1D29:
				return 0x1F;
			case 0x1D2A:
				return 0x1F;
			case 0x1D2B:
				return 0x21;
			case 0x1D2C:
				return 0x1A;
			case 0x1D2D:
				return 0x1B;
			case 0x1D2E:
				return 0x1A;
			case 0x1D2F:
				return 0x21;
			case 0x1D30:
				return 0x1A;
			case 0x1D31:
				return 0x1A;
			case 0x1D32:
				return 0x23;
			case 0x1D33:
				return 0x1A;
			case 0x1D34:
				return 0x1A;
			case 0x1D35:
				return 0x1A;
			case 0x1D36:
				return 0x1A;
			case 0x1D37:
				return 0x1A;
			case 0x1D38:
				return 0x1A;
			case 0x1D39:
				return 0x1A;
			case 0x1D3A:
				return 0x1A;
			case 0x1D3B:
				return 0x23;
			case 0x1D3C:
				return 0x1A;
			case 0x1D3D:
				return 0x1B;
			case 0x1D3E:
				return 0x1A;
			case 0x1D3F:
				return 0x1A;
			case 0x1D40:
				return 0x1A;
			case 0x1D41:
				return 0x1A;
			case 0x1D42:
				return 0x1A;
			case 0x1D43:
				return 0x18;
			case 0x1D44:
				return 0x1F;
			case 0x1D45:
				return 0x1C;
			case 0x1D46:
				return 0x20;
			case 0x1D47:
				return 0x18;
			case 0x1D48:
				return 0x18;
			case 0x1D49:
				return 0x18;
			case 0x1D4A:
				return 0x1C;
			case 0x1D4B:
				return 0x1D;
			case 0x1D4C:
				return 0x24;
			case 0x1D4D:
				return 0x18;
			case 0x1D4E:
				return 0x1F;
			case 0x1D4F:
				return 0x18;
			case 0x1D50:
				return 0x18;
			case 0x1D51:
				return 0x1A;
			case 0x1D52:
				return 0x18;
			case 0x1D53:
				return 0x1D;
			case 0x1D54:
				return 0x21;
			case 0x1D55:
				return 0x24;
			case 0x1D56:
				return 0x18;
			case 0x1D57:
				return 0x18;
			case 0x1D58:
				return 0x18;
			case 0x1D59:
				return 0x21;
			case 0x1D5A:
				return 0x1F;
			case 0x1D5B:
				return 0x18;
			case 0x1D5C:
				return 0x1A;
			case 0x1D5D:
				return 0x1B;
			case 0x1D5E:
				return 0x22;
			case 0x1D5F:
				return 0x1C;
			case 0x1D60:
				return 0x20;
			case 0x1D61:
				return 0x1A;
			case 0x1D62:
				return 0x1F;
			case 0x1D63:
				return 0x1F;
			case 0x1D64:
				return 0x1F;
			case 0x1D65:
				return 0x1F;
			case 0x1D66:
				return 0x22;
			case 0x1D67:
				return 0x23;
			case 0x1D68:
				return 0x21;
			case 0x1D69:
				return 0x21;
			case 0x1D6A:
				return 0x21;
			case 0x1D6B:
				return 0x16;
			case 0x1D6C:
				return 0x27;
			case 0x1D6D:
				return 0x27;
			case 0x1D6E:
				return 0x27;
			case 0x1D6F:
				return 0x27;
			case 0x1D70:
				return 0x27;
			case 0x1D71:
				return 0x27;
			case 0x1D72:
				return 0x27;
			case 0x1D73:
				return 0x34;
			case 0x1D74:
				return 0x27;
			case 0x1D75:
				return 0x27;
			case 0x1D76:
				return 0x27;
			case 0x1D77:
				return 0x1C;
			case 0x1D78:
				return 0x1C;
			case 0x1D79:
				return 0x1D;
			case 0x1D7A:
				return 0x29;
			case 0x1D7B:
				return 0x29;
			case 0x1D7C:
				return 0x24;
			case 0x1D7D:
				return 0x21;
			case 0x1D7E:
				return 0x29;
			case 0x1D7F:
				return 0x27;
			case 0x1D80:
				return 0x27;
			case 0x1D81:
				return 0x27;
			case 0x1D82:
				return 0x27;
			case 0x1D83:
				return 0x27;
			case 0x1D84:
				return 0x27;
			case 0x1D85:
				return 0x27;
			case 0x1D86:
				return 0x27;
			case 0x1D87:
				return 0x27;
			case 0x1D88:
				return 0x27;
			case 0x1D89:
				return 0x27;
			case 0x1D8A:
				return 0x27;
			case 0x1D8B:
				return 0x29;
			case 0x1D8C:
				return 0x27;
			case 0x1D8D:
				return 0x27;
			case 0x1D8E:
				return 0x27;
			case 0x1D8F:
				return 0x29;
			case 0x1D90:
				return 0x2D;
			case 0x1D91:
				return 0x28;
			case 0x1D92:
				return 0x29;
			case 0x1D93:
				return 0x2E;
			case 0x1D94:
				return 0x37;
			case 0x1D95:
				return 0x2D;
			case 0x1D96:
				return 0x29;
			case 0x1D97:
				return 0x2E;
			case 0x1D98:
				return 0x2B;
			case 0x1D99:
				return 0x29;
			case 0x1D9A:
				return 0x2B;
			case 0x1D9B:
				return 0x23;
			case 0x1D9C:
				return 0x18;
			case 0x1D9D:
				return 0x22;
			case 0x1D9E:
				return 0x1A;
			case 0x1D9F:
				return 0x26;
			case 0x1DA0:
				return 0x18;
			case 0x1DA1:
				return 0x2C;
			case 0x1DA2:
				return 0x1F;
			case 0x1DA3:
				return 0x1F;
			case 0x1DA4:
				return 0x24;
			case 0x1DA5:
				return 0x1B;
			case 0x1DA6:
				return 0x20;
			case 0x1DA7:
				return 0x2C;
			case 0x1DA8:
				return 0x2A;
			case 0x1DA9:
				return 0x2C;
			case 0x1DAA:
				return 0x2A;
			case 0x1DAB:
				return 0x20;
			case 0x1DAC:
				return 0x22;
			case 0x1DAD:
				return 0x2D;
			case 0x1DAE:
				return 0x27;
			case 0x1DAF:
				return 0x2C;
			case 0x1DB0:
				return 0x20;
			case 0x1DB1:
				return 0x1F;
			case 0x1DB2:
				return 0x1A;
			case 0x1DB3:
				return 0x22;
			case 0x1DB4:
				return 0x1A;
			case 0x1DB5:
				return 0x2A;
			case 0x1DB6:
				return 0x1C;
			case 0x1DB7:
				return 0x1E;
			case 0x1DB8:
				return 0x20;
			case 0x1DB9:
				return 0x22;
			case 0x1DBA:
				return 0x1F;
			case 0x1DBB:
				return 0x18;
			case 0x1DBC:
				return 0x2C;
			case 0x1DBD:
				return 0x22;
			case 0x1DBE:
				return 0x1A;
			case 0x1DBF:
				return 0x1C;
			case 0x1DC0:
				return 0x1E;
			case 0x1DC1:
				return 0x1E;
			case 0x1DC2:
				return 0x16;
			case 0x1DC3:
				return 0x1A;
			case 0x1DC4:
				return 0x17;
			case 0x1DC5:
				return 0x17;
			case 0x1DC6:
				return 0x17;
			case 0x1DC7:
				return 0x17;
			case 0x1DC8:
				return 0x1C;
			case 0x1DC9:
				return 0x1C;
			case 0x1DCA:
				return 0x25;
			case 0x1DCB:
				return 0x17;
			case 0x1DCC:
				return 0x17;
			case 0x1DCD:
				return 0x22;
			case 0x1DCE:
				return 0x17;
			case 0x1DCF:
				return 0x17;
			case 0x1DD0:
				return 0x13;
			case 0x1DD1:
				return 0x13;
			case 0x1DD2:
				return 0x13;
			case 0x1DD3:
				return 0x34;
			case 0x1DD4:
				return 0x20;
			case 0x1DD5:
				return 0x20;
			case 0x1DD6:
				return 0x20;
			case 0x1DD7:
				return 0x27;
			case 0x1DD8:
				return 0x27;
			case 0x1DD9:
				return 0x21;
			case 0x1DDA:
				return 0x1F;
			case 0x1DDB:
				return 0x27;
			case 0x1DDC:
				return 0x1F;
			case 0x1DDD:
				return 0x1F;
			case 0x1DDE:
				return 0x27;
			case 0x1DDF:
				return 0x27;
			case 0x1DE0:
				return 0x1F;
			case 0x1DE1:
				return 0x27;
			case 0x1DE2:
				return 0x27;
			case 0x1DE3:
				return 0x27;
			case 0x1DE4:
				return 0x1F;
			case 0x1DE5:
				return 0x24;
			case 0x1DE6:
				return 0x1F;
			case 0x1DE7:
				return 0x23;
			case 0x1DE8:
				return 0x1F;
			case 0x1DE9:
				return 0x22;
			case 0x1DEA:
				return 0x23;
			case 0x1DEB:
				return 0x1F;
			case 0x1DEC:
				return 0x38;
			case 0x1DED:
				return 0x40;
			case 0x1DEE:
				return 0x1F;
			case 0x1DEF:
				return 0x21;
			case 0x1DF0:
				return 0x40;
			case 0x1DF1:
				return 0x1F;
			case 0x1DF2:
				return 0x2E;
			case 0x1DF3:
				return 0x2E;
			case 0x1DF4:
				return 0x2E;
			case 0x1DF5:
				return 0x18;
			case 0x1DF6:
				return 0x1D;
			case 0x1DF7:
				return 0x1C;
			case 0x1DF8:
				return 0x19;
			case 0x1DF9:
				return 0x25;
			case 0x1DFB:
				return 0x18;
			case 0x1DFC:
				return 0x26;
			case 0x1DFD:
				return 0x20;
			case 0x1DFE:
				return 0x1F;
			case 0x1DFF:
				return 0x33;
			case 0x1E00:
				return 0x27;
			case 0x1E01:
				return 0x25;
			case 0x1E02:
				return 0x26;
			case 0x1E03:
				return 0x24;
			case 0x1E04:
				return 0x26;
			case 0x1E05:
				return 0x24;
			case 0x1E06:
				return 0x27;
			case 0x1E07:
				return 0x25;
			case 0x1E08:
				return 0x2E;
			case 0x1E09:
				return 0x2C;
			case 0x1E0A:
				return 0x26;
			case 0x1E0B:
				return 0x24;
			case 0x1E0C:
				return 0x26;
			case 0x1E0D:
				return 0x24;
			case 0x1E0E:
				return 0x27;
			case 0x1E0F:
				return 0x25;
			case 0x1E10:
				return 0x24;
			case 0x1E11:
				return 0x22;
			case 0x1E12:
				return 0x2D;
			case 0x1E13:
				return 0x2B;
			case 0x1E14:
				return 0x2D;
			case 0x1E15:
				return 0x2B;
			case 0x1E16:
				return 0x2D;
			case 0x1E17:
				return 0x2B;
			case 0x1E18:
				return 0x2D;
			case 0x1E19:
				return 0x2B;
			case 0x1E1A:
				return 0x28;
			case 0x1E1B:
				return 0x26;
			case 0x1E1C:
				return 0x2E;
			case 0x1E1D:
				return 0x2C;
			case 0x1E1E:
				return 0x26;
			case 0x1E1F:
				return 0x24;
			case 0x1E20:
				return 0x23;
			case 0x1E21:
				return 0x21;
			case 0x1E22:
				return 0x26;
			case 0x1E23:
				return 0x24;
			case 0x1E24:
				return 0x26;
			case 0x1E25:
				return 0x24;
			case 0x1E26:
				return 0x26;
			case 0x1E27:
				return 0x24;
			case 0x1E28:
				return 0x24;
			case 0x1E29:
				return 0x22;
			case 0x1E2A:
				return 0x28;
			case 0x1E2B:
				return 0x26;
			case 0x1E2C:
				return 0x28;
			case 0x1E2D:
				return 0x26;
			case 0x1E2E:
				return 0x30;
			case 0x1E2F:
				return 0x2E;
			case 0x1E30:
				return 0x22;
			case 0x1E31:
				return 0x20;
			case 0x1E32:
				return 0x26;
			case 0x1E33:
				return 0x24;
			case 0x1E34:
				return 0x27;
			case 0x1E35:
				return 0x25;
			case 0x1E36:
				return 0x26;
			case 0x1E37:
				return 0x24;
			case 0x1E38:
				return 0x31;
			case 0x1E39:
				return 0x2F;
			case 0x1E3A:
				return 0x27;
			case 0x1E3B:
				return 0x25;
			case 0x1E3C:
				return 0x2D;
			case 0x1E3D:
				return 0x2B;
			case 0x1E3E:
				return 0x22;
			case 0x1E3F:
				return 0x20;
			case 0x1E40:
				return 0x26;
			case 0x1E41:
				return 0x24;
			case 0x1E42:
				return 0x26;
			case 0x1E43:
				return 0x24;
			case 0x1E44:
				return 0x26;
			case 0x1E45:
				return 0x24;
			case 0x1E46:
				return 0x26;
			case 0x1E47:
				return 0x24;
			case 0x1E48:
				return 0x27;
			case 0x1E49:
				return 0x25;
			case 0x1E4A:
				return 0x2D;
			case 0x1E4B:
				return 0x2B;
			case 0x1E4C:
				return 0x2C;
			case 0x1E4D:
				return 0x2A;
			case 0x1E4E:
				return 0x30;
			case 0x1E4F:
				return 0x2E;
			case 0x1E50:
				return 0x2D;
			case 0x1E51:
				return 0x2B;
			case 0x1E52:
				return 0x2D;
			case 0x1E53:
				return 0x2B;
			case 0x1E54:
				return 0x22;
			case 0x1E55:
				return 0x20;
			case 0x1E56:
				return 0x26;
			case 0x1E57:
				return 0x24;
			case 0x1E58:
				return 0x26;
			case 0x1E59:
				return 0x24;
			case 0x1E5A:
				return 0x26;
			case 0x1E5B:
				return 0x24;
			case 0x1E5C:
				return 0x31;
			case 0x1E5D:
				return 0x2F;
			case 0x1E5E:
				return 0x27;
			case 0x1E5F:
				return 0x25;
			case 0x1E60:
				return 0x26;
			case 0x1E61:
				return 0x24;
			case 0x1E62:
				return 0x26;
			case 0x1E63:
				return 0x24;
			case 0x1E64:
				return 0x30;
			case 0x1E65:
				return 0x2E;
			case 0x1E66:
				return 0x30;
			case 0x1E67:
				return 0x2E;
			case 0x1E68:
				return 0x34;
			case 0x1E69:
				return 0x32;
			case 0x1E6A:
				return 0x26;
			case 0x1E6B:
				return 0x24;
			case 0x1E6C:
				return 0x26;
			case 0x1E6D:
				return 0x24;
			case 0x1E6E:
				return 0x27;
			case 0x1E6F:
				return 0x25;
			case 0x1E70:
				return 0x2D;
			case 0x1E71:
				return 0x2B;
			case 0x1E72:
				return 0x2C;
			case 0x1E73:
				return 0x2A;
			case 0x1E74:
				return 0x28;
			case 0x1E75:
				return 0x26;
			case 0x1E76:
				return 0x2D;
			case 0x1E77:
				return 0x2B;
			case 0x1E78:
				return 0x2C;
			case 0x1E79:
				return 0x2A;
			case 0x1E7A:
				return 0x31;
			case 0x1E7B:
				return 0x2F;
			case 0x1E7C:
				return 0x22;
			case 0x1E7D:
				return 0x20;
			case 0x1E7E:
				return 0x26;
			case 0x1E7F:
				return 0x24;
			case 0x1E80:
				return 0x22;
			case 0x1E81:
				return 0x20;
			case 0x1E82:
				return 0x22;
			case 0x1E83:
				return 0x20;
			case 0x1E84:
				return 0x26;
			case 0x1E85:
				return 0x24;
			case 0x1E86:
				return 0x26;
			case 0x1E87:
				return 0x24;
			case 0x1E88:
				return 0x26;
			case 0x1E89:
				return 0x24;
			case 0x1E8A:
				return 0x26;
			case 0x1E8B:
				return 0x24;
			case 0x1E8C:
				return 0x26;
			case 0x1E8D:
				return 0x24;
			case 0x1E8E:
				return 0x26;
			case 0x1E8F:
				return 0x24;
			case 0x1E90:
				return 0x27;
			case 0x1E91:
				return 0x25;
			case 0x1E92:
				return 0x26;
			case 0x1E93:
				return 0x24;
			case 0x1E94:
				return 0x27;
			case 0x1E95:
				return 0x25;
			case 0x1E96:
				return 0x25;
			case 0x1E97:
				return 0x24;
			case 0x1E98:
				return 0x25;
			case 0x1E99:
				return 0x25;
			case 0x1E9A:
				return 0x2A;
			case 0x1E9B:
				return 0x29;
			case 0x1E9C:
				return 0x2F;
			case 0x1E9D:
				return 0x2B;
			case 0x1E9E:
				return 0x1D;
			case 0x1E9F:
				return 0x19;
			case 0x1EA0:
				return 0x26;
			case 0x1EA1:
				return 0x24;
			case 0x1EA2:
				return 0x27;
			case 0x1EA3:
				return 0x25;
			case 0x1EA4:
				return 0x31;
			case 0x1EA5:
				return 0x2F;
			case 0x1EA6:
				return 0x31;
			case 0x1EA7:
				return 0x2F;
			case 0x1EA8:
				return 0x36;
			case 0x1EA9:
				return 0x34;
			case 0x1EAA:
				return 0x31;
			case 0x1EAB:
				return 0x2F;
			case 0x1EAC:
				return 0x35;
			case 0x1EAD:
				return 0x33;
			case 0x1EAE:
				return 0x2C;
			case 0x1EAF:
				return 0x2A;
			case 0x1EB0:
				return 0x2C;
			case 0x1EB1:
				return 0x2A;
			case 0x1EB2:
				return 0x31;
			case 0x1EB3:
				return 0x2F;
			case 0x1EB4:
				return 0x2C;
			case 0x1EB5:
				return 0x2A;
			case 0x1EB6:
				return 0x30;
			case 0x1EB7:
				return 0x2E;
			case 0x1EB8:
				return 0x26;
			case 0x1EB9:
				return 0x24;
			case 0x1EBA:
				return 0x27;
			case 0x1EBB:
				return 0x25;
			case 0x1EBC:
				return 0x22;
			case 0x1EBD:
				return 0x20;
			case 0x1EBE:
				return 0x31;
			case 0x1EBF:
				return 0x2F;
			case 0x1EC0:
				return 0x31;
			case 0x1EC1:
				return 0x2F;
			case 0x1EC2:
				return 0x36;
			case 0x1EC3:
				return 0x34;
			case 0x1EC4:
				return 0x31;
			case 0x1EC5:
				return 0x2F;
			case 0x1EC6:
				return 0x35;
			case 0x1EC7:
				return 0x33;
			case 0x1EC8:
				return 0x27;
			case 0x1EC9:
				return 0x25;
			case 0x1ECA:
				return 0x26;
			case 0x1ECB:
				return 0x24;
			case 0x1ECC:
				return 0x26;
			case 0x1ECD:
				return 0x24;
			case 0x1ECE:
				return 0x27;
			case 0x1ECF:
				return 0x25;
			case 0x1ED0:
				return 0x31;
			case 0x1ED1:
				return 0x2F;
			case 0x1ED2:
				return 0x31;
			case 0x1ED3:
				return 0x2F;
			case 0x1ED4:
				return 0x36;
			case 0x1ED5:
				return 0x34;
			case 0x1ED6:
				return 0x31;
			case 0x1ED7:
				return 0x2F;
			case 0x1ED8:
				return 0x35;
			case 0x1ED9:
				return 0x33;
			case 0x1EDA:
				return 0x2B;
			case 0x1EDB:
				return 0x29;
			case 0x1EDC:
				return 0x2B;
			case 0x1EDD:
				return 0x29;
			case 0x1EDE:
				return 0x30;
			case 0x1EDF:
				return 0x2E;
			case 0x1EE0:
				return 0x2B;
			case 0x1EE1:
				return 0x29;
			case 0x1EE2:
				return 0x2F;
			case 0x1EE3:
				return 0x2D;
			case 0x1EE4:
				return 0x26;
			case 0x1EE5:
				return 0x24;
			case 0x1EE6:
				return 0x27;
			case 0x1EE7:
				return 0x25;
			case 0x1EE8:
				return 0x2B;
			case 0x1EE9:
				return 0x29;
			case 0x1EEA:
				return 0x2B;
			case 0x1EEB:
				return 0x29;
			case 0x1EEC:
				return 0x30;
			case 0x1EED:
				return 0x2E;
			case 0x1EEE:
				return 0x2B;
			case 0x1EEF:
				return 0x29;
			case 0x1EF0:
				return 0x2F;
			case 0x1EF1:
				return 0x2D;
			case 0x1EF2:
				return 0x22;
			case 0x1EF3:
				return 0x20;
			case 0x1EF4:
				return 0x26;
			case 0x1EF5:
				return 0x24;
			case 0x1EF6:
				return 0x27;
			case 0x1EF7:
				return 0x25;
			case 0x1EF8:
				return 0x22;
			case 0x1EF9:
				return 0x20;
			case 0x1EFA:
				return 0x25;
			case 0x1EFB:
				return 0x23;
			case 0x1EFC:
				return 0x24;
			case 0x1EFD:
				return 0x22;
			case 0x1EFE:
				return 0x21;
			case 0x1EFF:
				return 0x1F;
			case 0x1F00:
				return 0x24;
			case 0x1F01:
				return 0x24;
			case 0x1F02:
				return 0x2E;
			case 0x1F03:
				return 0x2E;
			case 0x1F04:
				return 0x2D;
			case 0x1F05:
				return 0x2D;
			case 0x1F06:
				return 0x34;
			case 0x1F07:
				return 0x34;
			case 0x1F08:
				return 0x26;
			case 0x1F09:
				return 0x26;
			case 0x1F0A:
				return 0x30;
			case 0x1F0B:
				return 0x30;
			case 0x1F0C:
				return 0x2F;
			case 0x1F0D:
				return 0x2F;
			case 0x1F0E:
				return 0x36;
			case 0x1F0F:
				return 0x36;
			case 0x1F10:
				return 0x26;
			case 0x1F11:
				return 0x26;
			case 0x1F12:
				return 0x30;
			case 0x1F13:
				return 0x30;
			case 0x1F14:
				return 0x2F;
			case 0x1F15:
				return 0x2F;
			case 0x1F18:
				return 0x28;
			case 0x1F19:
				return 0x28;
			case 0x1F1A:
				return 0x32;
			case 0x1F1B:
				return 0x32;
			case 0x1F1C:
				return 0x31;
			case 0x1F1D:
				return 0x31;
			case 0x1F20:
				return 0x22;
			case 0x1F21:
				return 0x22;
			case 0x1F22:
				return 0x2C;
			case 0x1F23:
				return 0x2C;
			case 0x1F24:
				return 0x2B;
			case 0x1F25:
				return 0x2B;
			case 0x1F26:
				return 0x32;
			case 0x1F27:
				return 0x32;
			case 0x1F28:
				return 0x24;
			case 0x1F29:
				return 0x24;
			case 0x1F2A:
				return 0x2E;
			case 0x1F2B:
				return 0x2E;
			case 0x1F2C:
				return 0x2D;
			case 0x1F2D:
				return 0x2D;
			case 0x1F2E:
				return 0x34;
			case 0x1F2F:
				return 0x34;
			case 0x1F30:
				return 0x23;
			case 0x1F31:
				return 0x23;
			case 0x1F32:
				return 0x2D;
			case 0x1F33:
				return 0x2D;
			case 0x1F34:
				return 0x2C;
			case 0x1F35:
				return 0x2C;
			case 0x1F36:
				return 0x33;
			case 0x1F37:
				return 0x33;
			case 0x1F38:
				return 0x25;
			case 0x1F39:
				return 0x25;
			case 0x1F3A:
				return 0x2F;
			case 0x1F3B:
				return 0x2F;
			case 0x1F3C:
				return 0x2E;
			case 0x1F3D:
				return 0x2E;
			case 0x1F3E:
				return 0x35;
			case 0x1F3F:
				return 0x35;
			case 0x1F40:
				return 0x26;
			case 0x1F41:
				return 0x26;
			case 0x1F42:
				return 0x30;
			case 0x1F43:
				return 0x30;
			case 0x1F44:
				return 0x2F;
			case 0x1F45:
				return 0x2F;
			case 0x1F48:
				return 0x28;
			case 0x1F49:
				return 0x28;
			case 0x1F4A:
				return 0x32;
			case 0x1F4B:
				return 0x32;
			case 0x1F4C:
				return 0x31;
			case 0x1F4D:
				return 0x31;
			case 0x1F50:
				return 0x26;
			case 0x1F51:
				return 0x26;
			case 0x1F52:
				return 0x30;
			case 0x1F53:
				return 0x30;
			case 0x1F54:
				return 0x2F;
			case 0x1F55:
				return 0x2F;
			case 0x1F56:
				return 0x36;
			case 0x1F57:
				return 0x36;
			case 0x1F59:
				return 0x28;
			case 0x1F5B:
				return 0x32;
			case 0x1F5D:
				return 0x31;
			case 0x1F5F:
				return 0x38;
			case 0x1F60:
				return 0x24;
			case 0x1F61:
				return 0x24;
			case 0x1F62:
				return 0x2E;
			case 0x1F63:
				return 0x2E;
			case 0x1F64:
				return 0x2D;
			case 0x1F65:
				return 0x2D;
			case 0x1F66:
				return 0x34;
			case 0x1F67:
				return 0x34;
			case 0x1F68:
				return 0x26;
			case 0x1F69:
				return 0x26;
			case 0x1F6A:
				return 0x30;
			case 0x1F6B:
				return 0x30;
			case 0x1F6C:
				return 0x2F;
			case 0x1F6D:
				return 0x2F;
			case 0x1F6E:
				return 0x36;
			case 0x1F6F:
				return 0x36;
			case 0x1F70:
				return 0x24;
			case 0x1F71:
				return 0x23;
			case 0x1F72:
				return 0x26;
			case 0x1F73:
				return 0x25;
			case 0x1F74:
				return 0x22;
			case 0x1F75:
				return 0x21;
			case 0x1F76:
				return 0x23;
			case 0x1F77:
				return 0x22;
			case 0x1F78:
				return 0x26;
			case 0x1F79:
				return 0x25;
			case 0x1F7A:
				return 0x26;
			case 0x1F7B:
				return 0x25;
			case 0x1F7C:
				return 0x24;
			case 0x1F7D:
				return 0x23;
			case 0x1F80:
				return 0x36;
			case 0x1F81:
				return 0x36;
			case 0x1F82:
				return 0x40;
			case 0x1F83:
				return 0x40;
			case 0x1F84:
				return 0x3F;
			case 0x1F85:
				return 0x3F;
			case 0x1F86:
				return 0x46;
			case 0x1F87:
				return 0x46;
			case 0x1F88:
				return 0x39;
			case 0x1F89:
				return 0x39;
			case 0x1F8A:
				return 0x43;
			case 0x1F8B:
				return 0x43;
			case 0x1F8C:
				return 0x42;
			case 0x1F8D:
				return 0x42;
			case 0x1F8E:
				return 0x49;
			case 0x1F8F:
				return 0x49;
			case 0x1F90:
				return 0x34;
			case 0x1F91:
				return 0x34;
			case 0x1F92:
				return 0x3E;
			case 0x1F93:
				return 0x3E;
			case 0x1F94:
				return 0x3D;
			case 0x1F95:
				return 0x3D;
			case 0x1F96:
				return 0x44;
			case 0x1F97:
				return 0x44;
			case 0x1F98:
				return 0x37;
			case 0x1F99:
				return 0x37;
			case 0x1F9A:
				return 0x41;
			case 0x1F9B:
				return 0x41;
			case 0x1F9C:
				return 0x40;
			case 0x1F9D:
				return 0x40;
			case 0x1F9E:
				return 0x47;
			case 0x1F9F:
				return 0x47;
			case 0x1FA0:
				return 0x36;
			case 0x1FA1:
				return 0x36;
			case 0x1FA2:
				return 0x40;
			case 0x1FA3:
				return 0x40;
			case 0x1FA4:
				return 0x3F;
			case 0x1FA5:
				return 0x3F;
			case 0x1FA6:
				return 0x46;
			case 0x1FA7:
				return 0x46;
			case 0x1FA8:
				return 0x39;
			case 0x1FA9:
				return 0x39;
			case 0x1FAA:
				return 0x43;
			case 0x1FAB:
				return 0x43;
			case 0x1FAC:
				return 0x42;
			case 0x1FAD:
				return 0x42;
			case 0x1FAE:
				return 0x49;
			case 0x1FAF:
				return 0x49;
			case 0x1FB0:
				return 0x25;
			case 0x1FB1:
				return 0x25;
			case 0x1FB2:
				return 0x36;
			case 0x1FB3:
				return 0x2C;
			case 0x1FB4:
				return 0x35;
			case 0x1FB6:
				return 0x2A;
			case 0x1FB7:
				return 0x3C;
			case 0x1FB8:
				return 0x27;
			case 0x1FB9:
				return 0x27;
			case 0x1FBA:
				return 0x26;
			case 0x1FBB:
				return 0x25;
			case 0x1FBC:
				return 0x2F;
			case 0x1FBD:
				return 0xE;
			case 0x1FBE:
				return 0x15;
			case 0x1FBF:
				return 0xC;
			case 0x1FC0:
				return 0x12;
			case 0x1FC1:
				return 0x20;
			case 0x1FC2:
				return 0x34;
			case 0x1FC3:
				return 0x2A;
			case 0x1FC4:
				return 0x33;
			case 0x1FC6:
				return 0x28;
			case 0x1FC7:
				return 0x3A;
			case 0x1FC8:
				return 0x28;
			case 0x1FC9:
				return 0x27;
			case 0x1FCA:
				return 0x24;
			case 0x1FCB:
				return 0x23;
			case 0x1FCC:
				return 0x2D;
			case 0x1FCD:
				return 0x16;
			case 0x1FCE:
				return 0x15;
			case 0x1FCF:
				return 0x1C;
			case 0x1FD0:
				return 0x24;
			case 0x1FD1:
				return 0x24;
			case 0x1FD2:
				return 0x31;
			case 0x1FD3:
				return 0x30;
			case 0x1FD6:
				return 0x29;
			case 0x1FD7:
				return 0x37;
			case 0x1FD8:
				return 0x26;
			case 0x1FD9:
				return 0x26;
			case 0x1FDA:
				return 0x25;
			case 0x1FDB:
				return 0x24;
			case 0x1FDD:
				return 0x16;
			case 0x1FDE:
				return 0x15;
			case 0x1FDF:
				return 0x1C;
			case 0x1FE0:
				return 0x27;
			case 0x1FE1:
				return 0x27;
			case 0x1FE2:
				return 0x34;
			case 0x1FE3:
				return 0x33;
			case 0x1FE4:
				return 0x22;
			case 0x1FE5:
				return 0x22;
			case 0x1FE6:
				return 0x2C;
			case 0x1FE7:
				return 0x3A;
			case 0x1FE8:
				return 0x29;
			case 0x1FE9:
				return 0x29;
			case 0x1FEA:
				return 0x28;
			case 0x1FEB:
				return 0x27;
			case 0x1FEC:
				return 0x24;
			case 0x1FED:
				return 0x1A;
			case 0x1FEE:
				return 0x19;
			case 0x1FEF:
				return 0xC;
			case 0x1FF2:
				return 0x36;
			case 0x1FF3:
				return 0x2C;
			case 0x1FF4:
				return 0x35;
			case 0x1FF6:
				return 0x2A;
			case 0x1FF7:
				return 0x3C;
			case 0x1FF8:
				return 0x28;
			case 0x1FF9:
				return 0x27;
			case 0x1FFA:
				return 0x26;
			case 0x1FFB:
				return 0x25;
			case 0x1FFC:
				return 0x2F;
			case 0x1FFD:
				return 0xB;
			case 0x1FFE:
				return 0xC;
			case 0x2000:
				return 0x8;
			case 0x2001:
				return 0x8;
			case 0x2002:
				return 0x9;
			case 0x2003:
				return 0x9;
			case 0x2004:
				return 0x13;
			case 0x2005:
				return 0x12;
			case 0x2006:
				return 0x11;
			case 0x2007:
				return 0xD;
			case 0x2008:
				return 0x12;
			case 0x2009:
				return 0xB;
			case 0x200A:
				return 0xB;
			case 0x200B:
				return 0x11;
			case 0x200C:
				return 0x16;
			case 0x200D:
				return 0x12;
			case 0x200E:
				return 0x13;
			case 0x200F:
				return 0x13;
			case 0x2010:
				return 0x7;
			case 0x2011:
				return 0x14;
			case 0x2012:
				return 0xC;
			case 0x2013:
				return 0x8;
			case 0x2014:
				return 0x8;
			case 0x2015:
				return 0xF;
			case 0x2016:
				return 0x15;
			case 0x2017:
				return 0x10;
			case 0x2018:
				return 0x1B;
			case 0x2019:
				return 0x1C;
			case 0x201A:
				return 0x1C;
			case 0x201B:
				return 0x26;
			case 0x201C:
				return 0x1B;
			case 0x201D:
				return 0x1C;
			case 0x201E:
				return 0x1C;
			case 0x201F:
				return 0x26;
			case 0x2020:
				return 0x7;
			case 0x2021:
				return 0xE;
			case 0x2022:
				return 0x7;
			case 0x2023:
				return 0x12;
			case 0x2024:
				return 0xF;
			case 0x2025:
				return 0xF;
			case 0x2026:
				return 0x14;
			case 0x2027:
				return 0x12;
			case 0x2028:
				return 0xF;
			case 0x2029:
				return 0x14;
			case 0x202A:
				return 0x18;
			case 0x202B:
				return 0x18;
			case 0x202C:
				return 0x1B;
			case 0x202D:
				return 0x17;
			case 0x202E:
				return 0x17;
			case 0x202F:
				return 0x16;
			case 0x2030:
				return 0xF;
			case 0x2031:
				return 0x16;
			case 0x2032:
				return 0x6;
			case 0x2033:
				return 0xD;
			case 0x2034:
				return 0xD;
			case 0x2035:
				return 0xF;
			case 0x2036:
				return 0x16;
			case 0x2037:
				return 0x16;
			case 0x2038:
				return 0x6;
			case 0x2039:
				return 0x2A;
			case 0x203A:
				return 0x2B;
			case 0x203B:
				return 0xF;
			case 0x203C:
				return 0x18;
			case 0x203D:
				return 0xC;
			case 0x203E:
				return 0x9;
			case 0x203F:
				return 0x9;
			case 0x2040:
				return 0xE;
			case 0x2041:
				return 0x16;
			case 0x2042:
				return 0x9;
			case 0x2043:
				return 0xE;
			case 0x2044:
				return 0xF;
			case 0x2045:
				return 0x1F;
			case 0x2046:
				return 0x20;
			case 0x2047:
				return 0x15;
			case 0x2048:
				return 0x1A;
			case 0x2049:
				return 0x1A;
			case 0x204A:
				return 0x11;
			case 0x204B:
				return 0x16;
			case 0x204C:
				return 0x17;
			case 0x204D:
				return 0x18;
			case 0x204E:
				return 0xD;
			case 0x204F:
				return 0x13;
			case 0x2050:
				return 0x9;
			case 0x2051:
				return 0x21;
			case 0x2052:
				return 0x16;
			case 0x2053:
				return 0xB;
			case 0x2054:
				return 0x12;
			case 0x2055:
				return 0x18;
			case 0x2056:
				return 0x16;
			case 0x2057:
				return 0x10;
			case 0x2058:
				return 0x15;
			case 0x2059:
				return 0x15;
			case 0x205A:
				return 0x14;
			case 0x205B:
				return 0xE;
			case 0x205C:
				return 0xD;
			case 0x205D:
				return 0x9;
			case 0x205E:
				return 0x13;
			case 0x205F:
				return 0x1A;
			case 0x2060:
				return 0xC;
			case 0x2061:
				return 0x15;
			case 0x2062:
				return 0x10;
			case 0x2063:
				return 0x14;
			case 0x2064:
				return 0xF;
			case 0x2066:
				return 0x16;
			case 0x2067:
				return 0x16;
			case 0x2068:
				return 0x15;
			case 0x2069:
				return 0x18;
			case 0x206A:
				return 0x1B;
			case 0x206B:
				return 0x1C;
			case 0x206C:
				return 0x1C;
			case 0x206D:
				return 0x1D;
			case 0x206E:
				return 0x16;
			case 0x206F:
				return 0x15;
			case 0x2070:
				return 0x11;
			case 0x2071:
				return 0x21;
			case 0x2074:
				return 0x11;
			case 0x2075:
				return 0x11;
			case 0x2076:
				return 0x10;
			case 0x2077:
				return 0x12;
			case 0x2078:
				return 0x12;
			case 0x2079:
				return 0x11;
			case 0x207A:
				return 0x16;
			case 0x207B:
				return 0x12;
			case 0x207C:
				return 0x18;
			case 0x207D:
				return 0x1D;
			case 0x207E:
				return 0x1E;
			case 0x207F:
				return 0x21;
			case 0x2080:
				return 0xF;
			case 0x2081:
				return 0xE;
			case 0x2082:
				return 0xE;
			case 0x2083:
				return 0x10;
			case 0x2084:
				return 0xF;
			case 0x2085:
				return 0xF;
			case 0x2086:
				return 0xE;
			case 0x2087:
				return 0x10;
			case 0x2088:
				return 0x10;
			case 0x2089:
				return 0xF;
			case 0x208A:
				return 0x14;
			case 0x208B:
				return 0x10;
			case 0x208C:
				return 0x16;
			case 0x208D:
				return 0x1B;
			case 0x208E:
				return 0x1C;
			case 0x2090:
				return 0x1F;
			case 0x2091:
				return 0x1F;
			case 0x2092:
				return 0x1F;
			case 0x2093:
				return 0x1F;
			case 0x2094:
				return 0x23;
			case 0x2095:
				return 0x1F;
			case 0x2096:
				return 0x1F;
			case 0x2097:
				return 0x1F;
			case 0x2098:
				return 0x1F;
			case 0x2099:
				return 0x1F;
			case 0x209A:
				return 0x1F;
			case 0x209B:
				return 0x1F;
			case 0x209C:
				return 0x1F;
			case 0x20A0:
				return 0x13;
			case 0x20A1:
				return 0xB;
			case 0x20A2:
				return 0xE;
			case 0x20A3:
				return 0x12;
			case 0x20A4:
				return 0xA;
			case 0x20A5:
				return 0xA;
			case 0x20A6:
				return 0xB;
			case 0x20A7:
				return 0xC;
			case 0x20A8:
				return 0xB;
			case 0x20A9:
				return 0x9;
			case 0x20AA:
				return 0x10;
			case 0x20AB:
				return 0xA;
			case 0x20AC:
				return 0xA;
			case 0x20AD:
				return 0x9;
			case 0x20AE:
				return 0xC;
			case 0x20AF:
				return 0xD;
			case 0x20B0:
				return 0x12;
			case 0x20B1:
				return 0xA;
			case 0x20B2:
				return 0xD;
			case 0x20B3:
				return 0xD;
			case 0x20B4:
				return 0xD;
			case 0x20B5:
				return 0xA;
			case 0x20B6:
				return 0x14;
			case 0x20B7:
				return 0xE;
			case 0x20B8:
				return 0xB;
			case 0x20B9:
				return 0x12;
			case 0x20BA:
				return 0x12;
			case 0x20BB:
				return 0x11;
			case 0x20BC:
				return 0xB;
			case 0x20BD:
				return 0xB;
			case 0x20BE:
				return 0xA;
			case 0x20BF:
				return 0xD;
			case 0x20D0:
				return 0x1D;
			case 0x20D1:
				return 0x1E;
			case 0x20D2:
				return 0x25;
			case 0x20D3:
				return 0x26;
			case 0x20D4:
				return 0x24;
			case 0x20D5:
				return 0x20;
			case 0x20D6:
				return 0x1B;
			case 0x20D7:
				return 0x1C;
			case 0x20D8:
				return 0x17;
			case 0x20D9:
				return 0x21;
			case 0x20DA:
				return 0x25;
			case 0x20DB:
				return 0x1B;
			case 0x20DC:
				return 0x1A;
			case 0x20DD:
				return 0x1B;
			case 0x20DE:
				return 0x1B;
			case 0x20DF:
				return 0x1C;
			case 0x20E0:
				return 0x25;
			case 0x20E1:
				return 0x21;
			case 0x20E2:
				return 0x1B;
			case 0x20E3:
				return 0x1B;
			case 0x20E4:
				return 0x2D;
			case 0x20E5:
				return 0x22;
			case 0x20E6:
				return 0x29;
			case 0x20E7:
				return 0x19;
			case 0x20E8:
				return 0x1A;
			case 0x20E9:
				return 0x1C;
			case 0x20EA:
				return 0x22;
			case 0x20EB:
				return 0x26;
			case 0x20EC:
				return 0x31;
			case 0x20ED:
				return 0x30;
			case 0x20EE:
				return 0x1B;
			case 0x20EF:
				return 0x1C;
			case 0x20F0:
				return 0x19;
			case 0x2100:
				return 0xB;
			case 0x2101:
				return 0x19;
			case 0x2102:
				return 0x18;
			case 0x2103:
				return 0xF;
			case 0x2104:
				return 0x13;
			case 0x2105:
				return 0x8;
			case 0x2106:
				return 0x9;
			case 0x2107:
				return 0xF;
			case 0x2108:
				return 0x8;
			case 0x2109:
				return 0x12;
			case 0x210A:
				return 0xF;
			case 0x210B:
				return 0x11;
			case 0x210C:
				return 0x17;
			case 0x210D:
				return 0x18;
			case 0x210E:
				return 0x10;
			case 0x210F:
				return 0x1C;
			case 0x2110:
				return 0x11;
			case 0x2111:
				return 0x17;
			case 0x2112:
				return 0x11;
			case 0x2113:
				return 0xF;
			case 0x2114:
				return 0xF;
			case 0x2115:
				return 0x18;
			case 0x2116:
				return 0xC;
			case 0x2117:
				return 0x1A;
			case 0x2118:
				return 0x11;
			case 0x2119:
				return 0x18;
			case 0x211A:
				return 0x18;
			case 0x211B:
				return 0x11;
			case 0x211C:
				return 0x17;
			case 0x211D:
				return 0x18;
			case 0x211E:
				return 0x12;
			case 0x211F:
				return 0x9;
			case 0x2120:
				return 0xD;
			case 0x2121:
				return 0xF;
			case 0x2122:
				return 0x10;
			case 0x2123:
				return 0x9;
			case 0x2124:
				return 0x18;
			case 0x2125:
				return 0xB;
			case 0x2126:
				return 0x9;
			case 0x2127:
				return 0x12;
			case 0x2128:
				return 0x17;
			case 0x2129:
				return 0x1F;
			case 0x212A:
				return 0xC;
			case 0x212B:
				return 0xE;
			case 0x212C:
				return 0x11;
			case 0x212D:
				return 0x17;
			case 0x212E:
				return 0x11;
			case 0x212F:
				return 0xF;
			case 0x2130:
				return 0x11;
			case 0x2131:
				return 0x11;
			case 0x2132:
				return 0x11;
			case 0x2133:
				return 0x11;
			case 0x2134:
				return 0xF;
			case 0x2135:
				return 0xC;
			case 0x2136:
				return 0xB;
			case 0x2137:
				return 0xD;
			case 0x2138:
				return 0xD;
			case 0x2139:
				return 0x13;
			case 0x213A:
				return 0x12;
			case 0x213B:
				return 0xF;
			case 0x213C:
				return 0x17;
			case 0x213D:
				return 0x1A;
			case 0x213E:
				return 0x1C;
			case 0x213F:
				return 0x19;
			case 0x2140:
				return 0x1E;
			case 0x2141:
				return 0x1C;
			case 0x2142:
				return 0x1C;
			case 0x2143:
				return 0x1E;
			case 0x2144:
				return 0x1C;
			case 0x2145:
				return 0x1F;
			case 0x2146:
				return 0x1D;
			case 0x2147:
				return 0x1D;
			case 0x2148:
				return 0x1D;
			case 0x2149:
				return 0x1D;
			case 0x214A:
				return 0xE;
			case 0x214B:
				return 0x11;
			case 0x214C:
				return 0x9;
			case 0x214D:
				return 0xD;
			case 0x214E:
				return 0xF;
			case 0x214F:
				return 0x1C;
			case 0x2150:
				return 0x1C;
			case 0x2151:
				return 0x1A;
			case 0x2152:
				return 0x1A;
			case 0x2153:
				return 0x1A;
			case 0x2154:
				return 0x1B;
			case 0x2155:
				return 0x1A;
			case 0x2156:
				return 0x1B;
			case 0x2157:
				return 0x1D;
			case 0x2158:
				return 0x1C;
			case 0x2159:
				return 0x1A;
			case 0x215A:
				return 0x1C;
			case 0x215B:
				return 0x1B;
			case 0x215C:
				return 0x1E;
			case 0x215D:
				return 0x1D;
			case 0x215E:
				return 0x1E;
			case 0x215F:
				return 0x17;
			case 0x2160:
				return 0x12;
			case 0x2161:
				return 0x12;
			case 0x2162:
				return 0x14;
			case 0x2163:
				return 0x13;
			case 0x2164:
				return 0x13;
			case 0x2165:
				return 0x12;
			case 0x2166:
				return 0x14;
			case 0x2167:
				return 0x14;
			case 0x2168:
				return 0x13;
			case 0x2169:
				return 0x12;
			case 0x216A:
				return 0x15;
			case 0x216B:
				return 0x15;
			case 0x216C:
				return 0x14;
			case 0x216D:
				return 0x1A;
			case 0x216E:
				return 0x1B;
			case 0x216F:
				return 0x1B;
			case 0x2170:
				return 0x18;
			case 0x2171:
				return 0x18;
			case 0x2172:
				return 0x1A;
			case 0x2173:
				return 0x19;
			case 0x2174:
				return 0x19;
			case 0x2175:
				return 0x18;
			case 0x2176:
				return 0x1A;
			case 0x2177:
				return 0x1A;
			case 0x2178:
				return 0x19;
			case 0x2179:
				return 0x18;
			case 0x217A:
				return 0x1B;
			case 0x217B:
				return 0x1B;
			case 0x217C:
				return 0x1A;
			case 0x217D:
				return 0x20;
			case 0x217E:
				return 0x21;
			case 0x217F:
				return 0x21;
			case 0x2180:
				return 0x1F;
			case 0x2181:
				return 0x1C;
			case 0x2182:
				return 0x1B;
			case 0x2183:
				return 0x23;
			case 0x2184:
				return 0x1E;
			case 0x2185:
				return 0x1C;
			case 0x2186:
				return 0x1F;
			case 0x2187:
				return 0x1D;
			case 0x2188:
				return 0x23;
			case 0x2189:
				return 0x1C;
			case 0x218A:
				return 0x11;
			case 0x218B:
				return 0x13;
			case 0x2190:
				return 0x10;
			case 0x2191:
				return 0xE;
			case 0x2192:
				return 0x11;
			case 0x2193:
				return 0x10;
			case 0x2194:
				return 0x11;
			case 0x2195:
				return 0xE;
			case 0x2196:
				return 0x11;
			case 0x2197:
				return 0x11;
			case 0x2198:
				return 0x11;
			case 0x2199:
				return 0x11;
			case 0x219A:
				return 0x1C;
			case 0x219B:
				return 0x1D;
			case 0x219C:
				return 0x15;
			case 0x219D:
				return 0x16;
			case 0x219E:
				return 0x1B;
			case 0x219F:
				return 0x19;
			case 0x21A0:
				return 0x1C;
			case 0x21A1:
				return 0x1B;
			case 0x21A2:
				return 0x1A;
			case 0x21A3:
				return 0x1B;
			case 0x21A4:
				return 0x19;
			case 0x21A5:
				return 0x17;
			case 0x21A6:
				return 0x1A;
			case 0x21A7:
				return 0x19;
			case 0x21A8:
				return 0x18;
			case 0x21A9:
				return 0x1A;
			case 0x21AA:
				return 0x1B;
			case 0x21AB:
				return 0x1A;
			case 0x21AC:
				return 0x1B;
			case 0x21AD:
				return 0x16;
			case 0x21AE:
				return 0x1D;
			case 0x21AF:
				return 0x17;
			case 0x21B0:
				return 0x21;
			case 0x21B1:
				return 0x22;
			case 0x21B2:
				return 0x23;
			case 0x21B3:
				return 0x24;
			case 0x21B4:
				return 0x27;
			case 0x21B5:
				return 0x26;
			case 0x21B6:
				return 0x23;
			case 0x21B7:
				return 0x1F;
			case 0x21B8:
				return 0x1D;
			case 0x21B9:
				return 0x34;
			case 0x21BA:
				return 0x20;
			case 0x21BB:
				return 0x1C;
			case 0x21BC:
				return 0x24;
			case 0x21BD:
				return 0x26;
			case 0x21BE:
				return 0x25;
			case 0x21BF:
				return 0x24;
			case 0x21C0:
				return 0x25;
			case 0x21C1:
				return 0x27;
			case 0x21C2:
				return 0x27;
			case 0x21C3:
				return 0x26;
			case 0x21C4:
				return 0x26;
			case 0x21C5:
				return 0x2B;
			case 0x21C6:
				return 0x26;
			case 0x21C7:
				return 0x18;
			case 0x21C8:
				return 0x16;
			case 0x21C9:
				return 0x19;
			case 0x21CA:
				return 0x18;
			case 0x21CB:
				return 0x2A;
			case 0x21CC:
				return 0x2A;
			case 0x21CD:
				return 0x23;
			case 0x21CE:
				return 0x24;
			case 0x21CF:
				return 0x24;
			case 0x21D0:
				return 0x17;
			case 0x21D1:
				return 0x15;
			case 0x21D2:
				return 0x18;
			case 0x21D3:
				return 0x17;
			case 0x21D4:
				return 0x18;
			case 0x21D5:
				return 0x15;
			case 0x21D6:
				return 0x18;
			case 0x21D7:
				return 0x18;
			case 0x21D8:
				return 0x18;
			case 0x21D9:
				return 0x18;
			case 0x21DA:
				return 0x17;
			case 0x21DB:
				return 0x18;
			case 0x21DC:
				return 0x19;
			case 0x21DD:
				return 0x1A;
			case 0x21DE:
				return 0x21;
			case 0x21DF:
				return 0x23;
			case 0x21E0:
				return 0x17;
			case 0x21E1:
				return 0x15;
			case 0x21E2:
				return 0x18;
			case 0x21E3:
				return 0x17;
			case 0x21E4:
				return 0x17;
			case 0x21E5:
				return 0x18;
			case 0x21E6:
				return 0x16;
			case 0x21E7:
				return 0x14;
			case 0x21E8:
				return 0x17;
			case 0x21E9:
				return 0x16;
			case 0x21EA:
				return 0x1D;
			case 0x21EB:
				return 0x20;
			case 0x21EC:
				return 0x34;
			case 0x21ED:
				return 0x32;
			case 0x21EE:
				return 0x1B;
			case 0x21EF:
				return 0x27;
			case 0x21F0:
				return 0x21;
			case 0x21F1:
				return 0x1B;
			case 0x21F2:
				return 0x1B;
			case 0x21F3:
				return 0x14;
			case 0x21F4:
				return 0x1E;
			case 0x21F5:
				return 0x2B;
			case 0x21F6:
				return 0x18;
			case 0x21F7:
				return 0x25;
			case 0x21F8:
				return 0x26;
			case 0x21F9:
				return 0x26;
			case 0x21FA:
				return 0x2C;
			case 0x21FB:
				return 0x2D;
			case 0x21FC:
				return 0x2D;
			case 0x21FD:
				return 0x1C;
			case 0x21FE:
				return 0x1D;
			case 0x21FF:
				return 0x1D;
			case 0x2200:
				return 0x8;
			case 0x2201:
				return 0xB;
			case 0x2202:
				return 0x15;
			case 0x2203:
				return 0xD;
			case 0x2204:
				return 0x15;
			case 0x2205:
				return 0xA;
			case 0x2206:
				return 0xA;
			case 0x2207:
				return 0x6;
			case 0x2208:
				return 0xB;
			case 0x2209:
				return 0x12;
			case 0x220A:
				return 0x11;
			case 0x220B:
				return 0x13;
			case 0x220C:
				return 0x1B;
			case 0x220D:
				return 0x19;
			case 0x220E:
				return 0xD;
			case 0x220F:
				return 0xE;
			case 0x2210:
				return 0x10;
			case 0x2211:
				return 0x10;
			case 0x2212:
				return 0xB;
			case 0x2213:
				return 0x13;
			case 0x2214:
				return 0x9;
			case 0x2215:
				return 0xF;
			case 0x2216:
				return 0xA;
			case 0x2217:
				return 0x12;
			case 0x2218:
				return 0xE;
			case 0x2219:
				return 0x10;
			case 0x221A:
				return 0xC;
			case 0x221B:
				return 0xA;
			case 0x221C:
				return 0xC;
			case 0x221D:
				return 0x10;
			case 0x221E:
				return 0x9;
			case 0x221F:
				return 0xC;
			case 0x2220:
				return 0x6;
			case 0x2221:
				return 0xF;
			case 0x2222:
				return 0x10;
			case 0x2223:
				return 0x8;
			case 0x2224:
				return 0x10;
			case 0x2225:
				return 0xC;
			case 0x2226:
				return 0x10;
			case 0x2227:
				return 0xC;
			case 0x2228:
				return 0xB;
			case 0x2229:
				return 0xD;
			case 0x222A:
				return 0x6;
			case 0x222B:
				return 0x9;
			case 0x222C:
				return 0x10;
			case 0x222D:
				return 0x10;
			case 0x222E:
				return 0x11;
			case 0x222F:
				return 0x11;
			case 0x2230:
				return 0x10;
			case 0x2231:
				return 0x13;
			case 0x2232:
				return 0x1B;
			case 0x2233:
				return 0x1F;
			case 0x2234:
				return 0xA;
			case 0x2235:
				return 0x8;
			case 0x2236:
				return 0x6;
			case 0x2237:
				return 0xB;
			case 0x2238:
				return 0xA;
			case 0x2239:
				return 0x7;
			case 0x223A:
				return 0x15;
			case 0x223B:
				return 0xB;
			case 0x223C:
				return 0xF;
			case 0x223D:
				return 0xF;
			case 0x223E:
				return 0x10;
			case 0x223F:
				return 0xA;
			case 0x2240:
				return 0xF;
			case 0x2241:
				return 0xA;
			case 0x2242:
				return 0xC;
			case 0x2243:
				return 0x18;
			case 0x2244:
				return 0x1C;
			case 0x2245:
				return 0x17;
			case 0x2246:
				return 0x28;
			case 0x2247:
				return 0x2C;
			case 0x2248:
				return 0x10;
			case 0x2249:
				return 0x14;
			case 0x224A:
				return 0x19;
			case 0x224B:
				return 0xD;
			case 0x224C:
				return 0xD;
			case 0x224D:
				return 0xE;
			case 0x224E:
				return 0x1C;
			case 0x224F:
				return 0x13;
			case 0x2250:
				return 0x15;
			case 0x2251:
				return 0x17;
			case 0x2252:
				return 0x27;
			case 0x2253:
				return 0x23;
			case 0x2254:
				return 0xD;
			case 0x2255:
				return 0xD;
			case 0x2256:
				return 0x11;
			case 0x2257:
				return 0xE;
			case 0x2258:
				return 0xF;
			case 0x2259:
				return 0xA;
			case 0x225A:
				return 0xF;
			case 0x225B:
				return 0xC;
			case 0x225C:
				return 0xF;
			case 0x225D:
				return 0x17;
			case 0x225E:
				return 0xC;
			case 0x225F:
				return 0x14;
			case 0x2260:
				return 0xD;
			case 0x2261:
				return 0xD;
			case 0x2262:
				return 0x11;
			case 0x2263:
				return 0x17;
			case 0x2264:
				return 0x16;
			case 0x2265:
				return 0x19;
			case 0x2266:
				return 0x18;
			case 0x2267:
				return 0x1B;
			case 0x2268:
				return 0x1B;
			case 0x2269:
				return 0x1E;
			case 0x226A:
				return 0xF;
			case 0x226B:
				return 0x12;
			case 0x226C:
				return 0x8;
			case 0x226D:
				return 0x12;
			case 0x226E:
				return 0xE;
			case 0x226F:
				return 0x11;
			case 0x2270:
				return 0x1F;
			case 0x2271:
				return 0x22;
			case 0x2272:
				return 0x1B;
			case 0x2273:
				return 0x1E;
			case 0x2274:
				return 0x24;
			case 0x2275:
				return 0x27;
			case 0x2276:
				return 0x1A;
			case 0x2277:
				return 0x1A;
			case 0x2278:
				return 0x23;
			case 0x2279:
				return 0x23;
			case 0x227A:
				return 0x9;
			case 0x227B:
				return 0x9;
			case 0x227C:
				return 0x15;
			case 0x227D:
				return 0x15;
			case 0x227E:
				return 0x1A;
			case 0x227F:
				return 0x1A;
			case 0x2280:
				return 0x11;
			case 0x2281:
				return 0x11;
			case 0x2282:
				return 0xA;
			case 0x2283:
				return 0xC;
			case 0x2284:
				return 0x10;
			case 0x2285:
				return 0x12;
			case 0x2286:
				return 0x16;
			case 0x2287:
				return 0x18;
			case 0x2288:
				return 0x21;
			case 0x2289:
				return 0x23;
			case 0x228A:
				return 0x1C;
			case 0x228B:
				return 0x1E;
			case 0x228C:
				return 0x9;
			case 0x228D:
				return 0x18;
			case 0x228E:
				return 0xF;
			case 0x228F:
				return 0x10;
			case 0x2290:
				return 0x13;
			case 0x2291:
				return 0x1C;
			case 0x2292:
				return 0x1F;
			case 0x2293:
				return 0xB;
			case 0x2294:
				return 0xB;
			case 0x2295:
				return 0xD;
			case 0x2296:
				return 0xE;
			case 0x2297:
				return 0xE;
			case 0x2298:
				return 0x17;
			case 0x2299:
				return 0x15;
			case 0x229A:
				return 0x16;
			case 0x229B:
				return 0x1A;
			case 0x229C:
				return 0xF;
			case 0x229D:
				return 0xD;
			case 0x229E:
				return 0xD;
			case 0x229F:
				return 0xE;
			case 0x22A0:
				return 0xE;
			case 0x22A1:
				return 0x15;
			case 0x22A2:
				return 0xB;
			case 0x22A3:
				return 0xA;
			case 0x22A4:
				return 0xA;
			case 0x22A5:
				return 0x8;
			case 0x22A6:
				return 0xA;
			case 0x22A7:
				return 0x7;
			case 0x22A8:
				return 0x5;
			case 0x22A9:
				return 0x7;
			case 0x22AA:
				return 0x24;
			case 0x22AB:
				return 0x2B;
			case 0x22AC:
				return 0xF;
			case 0x22AD:
				return 0x9;
			case 0x22AE:
				return 0xF;
			case 0x22AF:
				return 0x33;
			case 0x22B0:
				return 0x18;
			case 0x22B1:
				return 0x18;
			case 0x22B2:
				return 0x13;
			case 0x22B3:
				return 0x1C;
			case 0x22B4:
				return 0x1F;
			case 0x22B5:
				return 0x28;
			case 0x22B6:
				return 0xC;
			case 0x22B7:
				return 0x9;
			case 0x22B8:
				return 0x9;
			case 0x22B9:
				return 0x1B;
			case 0x22BA:
				return 0xC;
			case 0x22BB:
				return 0x4;
			case 0x22BC:
				return 0x5;
			case 0x22BD:
				return 0x4;
			case 0x22BE:
				return 0x15;
			case 0x22BF:
				return 0xF;
			case 0x22C0:
				return 0x12;
			case 0x22C1:
				return 0x11;
			case 0x22C2:
				return 0x13;
			case 0x22C3:
				return 0xC;
			case 0x22C4:
				return 0x11;
			case 0x22C5:
				return 0xD;
			case 0x22C6:
				return 0xE;
			case 0x22C7:
				return 0xF;
			case 0x22C8:
				return 0x7;
			case 0x22C9:
				return 0x26;
			case 0x22CA:
				return 0x27;
			case 0x22CB:
				return 0x18;
			case 0x22CC:
				return 0x19;
			case 0x22CD:
				return 0x16;
			case 0x22CE:
				return 0x11;
			case 0x22CF:
				return 0x12;
			case 0x22D0:
				return 0xE;
			case 0x22D1:
				return 0x10;
			case 0x22D2:
				return 0x14;
			case 0x22D3:
				return 0xD;
			case 0x22D4:
				return 0xA;
			case 0x22D5:
				return 0x16;
			case 0x22D6:
				return 0x13;
			case 0x22D7:
				return 0x16;
			case 0x22D8:
				return 0x14;
			case 0x22D9:
				return 0x17;
			case 0x22DA:
				return 0x23;
			case 0x22DB:
				return 0x23;
			case 0x22DC:
				return 0x16;
			case 0x22DD:
				return 0x19;
			case 0x22DE:
				return 0x15;
			case 0x22DF:
				return 0x15;
			case 0x22E0:
				return 0x1A;
			case 0x22E1:
				return 0x1A;
			case 0x22E2:
				return 0x20;
			case 0x22E3:
				return 0x23;
			case 0x22E4:
				return 0x20;
			case 0x22E5:
				return 0x23;
			case 0x22E6:
				return 0x20;
			case 0x22E7:
				return 0x23;
			case 0x22E8:
				return 0x1F;
			case 0x22E9:
				return 0x1F;
			case 0x22EA:
				return 0x17;
			case 0x22EB:
				return 0x24;
			case 0x22EC:
				return 0x23;
			case 0x22ED:
				return 0x2D;
			case 0x22EE:
				return 0x12;
			case 0x22EF:
				return 0x1C;
			case 0x22F0:
				return 0x1B;
			case 0x22F1:
				return 0x1D;
			case 0x22F2:
				return 0x27;
			case 0x22F3:
				return 0x39;
			case 0x22F4:
				return 0x3F;
			case 0x22F5:
				return 0x1A;
			case 0x22F6:
				return 0x18;
			case 0x22F7:
				return 0x1E;
			case 0x22F8:
				return 0x19;
			case 0x22F9:
				return 0x27;
			case 0x22FA:
				return 0x25;
			case 0x22FB:
				return 0x37;
			case 0x22FC:
				return 0x3D;
			case 0x22FD:
				return 0x16;
			case 0x22FE:
				return 0x1C;
			case 0x22FF:
				return 0x1A;
			case 0x2300:
				return 0xE;
			case 0x2301:
				return 0xF;
			case 0x2302:
				return 0x6;
			case 0x2303:
				return 0xD;
			case 0x2304:
				return 0xF;
			case 0x2305:
				return 0xB;
			case 0x2306:
				return 0xC;
			case 0x2307:
				return 0xA;
			case 0x2308:
				return 0xD;
			case 0x2309:
				return 0xE;
			case 0x230A:
				return 0xB;
			case 0x230B:
				return 0xC;
			case 0x230C:
				return 0x12;
			case 0x230D:
				return 0x11;
			case 0x230E:
				return 0xF;
			case 0x230F:
				return 0xE;
			case 0x2310:
				return 0x12;
			case 0x2311:
				return 0xF;
			case 0x2312:
				return 0x4;
			case 0x2313:
				return 0x8;
			case 0x2314:
				return 0x7;
			case 0x2315:
				return 0x13;
			case 0x2316:
				return 0x13;
			case 0x2317:
				return 0x10;
			case 0x2318:
				return 0x17;
			case 0x2319:
				return 0x10;
			case 0x231A:
				return 0x6;
			case 0x231B:
				return 0xA;
			case 0x231C:
				return 0x10;
			case 0x231D:
				return 0x11;
			case 0x231E:
				return 0x13;
			case 0x231F:
				return 0x14;
			case 0x2320:
				return 0x12;
			case 0x2321:
				return 0x15;
			case 0x2322:
				return 0x6;
			case 0x2323:
				return 0x6;
			case 0x2324:
				return 0x29;
			case 0x2325:
				return 0xB;
			case 0x2326:
				return 0x13;
			case 0x2327:
				return 0x15;
			case 0x2328:
				return 0x9;
			case 0x2329:
				return 0x1C;
			case 0x232A:
				return 0x1D;
			case 0x232B:
				return 0x12;
			case 0x232C:
				return 0xD;
			case 0x232D:
				return 0xD;
			case 0x232E:
				return 0x13;
			case 0x232F:
				return 0x9;
			case 0x2330:
				return 0xD;
			case 0x2331:
				return 0x11;
			case 0x2332:
				return 0xE;
			case 0x2333:
				return 0x6;
			case 0x2334:
				return 0xC;
			case 0x2335:
				return 0xC;
			case 0x2336:
				return 0x1D;
			case 0x2337:
				return 0x22;
			case 0x2338:
				return 0x21;
			case 0x2339:
				return 0x22;
			case 0x233A:
				return 0x23;
			case 0x233B:
				return 0x1F;
			case 0x233C:
				return 0x22;
			case 0x233D:
				return 0x23;
			case 0x233E:
				return 0x21;
			case 0x233F:
				return 0x20;
			case 0x2340:
				return 0x24;
			case 0x2341:
				return 0x21;
			case 0x2342:
				return 0x25;
			case 0x2343:
				return 0x25;
			case 0x2344:
				return 0x28;
			case 0x2345:
				return 0x25;
			case 0x2346:
				return 0x26;
			case 0x2347:
				return 0x2B;
			case 0x2348:
				return 0x2C;
			case 0x2349:
				return 0x27;
			case 0x234A:
				return 0x29;
			case 0x234B:
				return 0x22;
			case 0x234C:
				return 0x26;
			case 0x234D:
				return 0x21;
			case 0x234E:
				return 0x24;
			case 0x234F:
				return 0x23;
			case 0x2350:
				return 0x29;
			case 0x2351:
				return 0x26;
			case 0x2352:
				return 0x20;
			case 0x2353:
				return 0x24;
			case 0x2354:
				return 0x1F;
			case 0x2355:
				return 0x22;
			case 0x2356:
				return 0x25;
			case 0x2357:
				return 0x2B;
			case 0x2358:
				return 0x25;
			case 0x2359:
				return 0x25;
			case 0x235A:
				return 0x27;
			case 0x235B:
				return 0x23;
			case 0x235C:
				return 0x26;
			case 0x235D:
				return 0x22;
			case 0x235E:
				return 0x21;
			case 0x235F:
				return 0x22;
			case 0x2360:
				return 0x21;
			case 0x2361:
				return 0x28;
			case 0x2362:
				return 0x24;
			case 0x2363:
				return 0x25;
			case 0x2364:
				return 0x24;
			case 0x2365:
				return 0x27;
			case 0x2366:
				return 0x26;
			case 0x2367:
				return 0x26;
			case 0x2368:
				return 0x26;
			case 0x2369:
				return 0x2D;
			case 0x236A:
				return 0x20;
			case 0x236B:
				return 0x20;
			case 0x236C:
				return 0x1C;
			case 0x236D:
				return 0x22;
			case 0x236E:
				return 0x29;
			case 0x236F:
				return 0x25;
			case 0x2370:
				return 0x24;
			case 0x2371:
				return 0x27;
			case 0x2372:
				return 0x25;
			case 0x2373:
				return 0x1B;
			case 0x2374:
				return 0x1A;
			case 0x2375:
				return 0x1C;
			case 0x2376:
				return 0x25;
			case 0x2377:
				return 0x27;
			case 0x2378:
				return 0x24;
			case 0x2379:
				return 0x25;
			case 0x237A:
				return 0x1C;
			case 0x237B:
				return 0xF;
			case 0x237C:
				return 0x28;
			case 0x237D:
				return 0x14;
			case 0x237E:
				return 0xC;
			case 0x237F:
				return 0x1E;
			case 0x2380:
				return 0x11;
			case 0x2381:
				return 0x1C;
			case 0x2382:
				return 0x1F;
			case 0x2383:
				return 0x10;
			case 0x2384:
				return 0x13;
			case 0x2385:
				return 0x27;
			case 0x2386:
				return 0xD;
			case 0x2387:
				return 0x17;
			case 0x2388:
				return 0xC;
			case 0x2389:
				return 0x22;
			case 0x238A:
				return 0x16;
			case 0x238B:
				return 0x23;
			case 0x238C:
				return 0xC;
			case 0x238D:
				return 0x12;
			case 0x238E:
				return 0x12;
			case 0x238F:
				return 0x22;
			case 0x2390:
				return 0x22;
			case 0x2391:
				return 0x20;
			case 0x2392:
				return 0x1E;
			case 0x2393:
				return 0x1F;
			case 0x2394:
				return 0x19;
			case 0x2395:
				return 0x1B;
			case 0x2396:
				return 0x1D;
			case 0x2397:
				return 0xE;
			case 0x2398:
				return 0xA;
			case 0x2399:
				return 0x14;
			case 0x239A:
				return 0x14;
			case 0x239B:
				return 0x1C;
			case 0x239C:
				return 0x1B;
			case 0x239D:
				return 0x1C;
			case 0x239E:
				return 0x1D;
			case 0x239F:
				return 0x1C;
			case 0x23A0:
				return 0x1D;
			case 0x23A1:
				return 0x21;
			case 0x23A2:
				return 0x1E;
			case 0x23A3:
				return 0x21;
			case 0x23A4:
				return 0x22;
			case 0x23A5:
				return 0x1F;
			case 0x23A6:
				return 0x22;
			case 0x23A7:
				return 0x1E;
			case 0x23A8:
				return 0x20;
			case 0x23A9:
				return 0x1E;
			case 0x23AA:
				return 0x18;
			case 0x23AB:
				return 0x1F;
			case 0x23AC:
				return 0x21;
			case 0x23AD:
				return 0x1F;
			case 0x23AE:
				return 0x13;
			case 0x23AF:
				return 0x1A;
			case 0x23B0:
				return 0x30;
			case 0x23B1:
				return 0x30;
			case 0x23B2:
				return 0xE;
			case 0x23B3:
				return 0x11;
			case 0x23B4:
				return 0x13;
			case 0x23B5:
				return 0x16;
			case 0x23B6:
				return 0x2E;
			case 0x23B7:
				return 0x16;
			case 0x23B8:
				return 0x17;
			case 0x23B9:
				return 0x18;
			case 0x23BA:
				return 0x17;
			case 0x23BB:
				return 0x17;
			case 0x23BC:
				return 0x17;
			case 0x23BD:
				return 0x17;
			case 0x23BE:
				return 0x2E;
			case 0x23BF:
				return 0x31;
			case 0x23C0:
				return 0x2C;
			case 0x23C1:
				return 0x37;
			case 0x23C2:
				return 0x35;
			case 0x23C3:
				return 0x2E;
			case 0x23C4:
				return 0x39;
			case 0x23C5:
				return 0x37;
			case 0x23C6:
				return 0x29;
			case 0x23C7:
				return 0x35;
			case 0x23C8:
				return 0x33;
			case 0x23C9:
				return 0x2B;
			case 0x23CA:
				return 0x29;
			case 0x23CB:
				return 0x2D;
			case 0x23CC:
				return 0x30;
			case 0x23CD:
				return 0xC;
			case 0x23CE:
				return 0xE;
			case 0x23CF:
				return 0xD;
			case 0x23D0:
				return 0x18;
			case 0x23D1:
				return 0xF;
			case 0x23D2:
				return 0x19;
			case 0x23D3:
				return 0x19;
			case 0x23D4:
				return 0x1E;
			case 0x23D5:
				return 0x1E;
			case 0x23D6:
				return 0x1B;
			case 0x23D7:
				return 0x11;
			case 0x23D8:
				return 0x13;
			case 0x23D9:
				return 0x13;
			case 0x23DA:
				return 0xD;
			case 0x23DB:
				return 0x5;
			case 0x23DC:
				return 0x10;
			case 0x23DD:
				return 0x13;
			case 0x23DE:
				return 0x12;
			case 0x23DF:
				return 0x15;
			case 0x23E0:
				return 0x1B;
			case 0x23E1:
				return 0x1E;
			case 0x23E2:
				return 0x10;
			case 0x23E3:
				return 0x19;
			case 0x23E4:
				return 0xD;
			case 0x23E5:
				return 0x9;
			case 0x23E6:
				return 0xB;
			case 0x23E7:
				return 0x18;
			case 0x23E8:
				return 0x18;
			case 0x23E9:
				return 0x25;
			case 0x23EA:
				return 0x24;
			case 0x23EB:
				return 0x22;
			case 0x23EC:
				return 0x24;
			case 0x23ED:
				return 0x37;
			case 0x23EE:
				return 0x36;
			case 0x23EF:
				return 0x37;
			case 0x23F0:
				return 0xC;
			case 0x23F1:
				return 0xA;
			case 0x23F2:
				return 0xC;
			case 0x23F3:
				return 0x1C;
			case 0x23F4:
				return 0x24;
			case 0x23F5:
				return 0x25;
			case 0x23F6:
				return 0x22;
			case 0x23F7:
				return 0x24;
			case 0x23F8:
				return 0x14;
			case 0x23F9:
				return 0x16;
			case 0x23FA:
				return 0x18;
			case 0x23FB:
				return 0xD;
			case 0x23FC:
				return 0x14;
			case 0x23FD:
				return 0x10;
			case 0x23FE:
				return 0x13;
			case 0x23FF:
				return 0x14;
			case 0x2400:
				return 0x10;
			case 0x2401:
				return 0x1C;
			case 0x2402:
				return 0x19;
			case 0x2403:
				return 0x17;
			case 0x2404:
				return 0x1F;
			case 0x2405:
				return 0x13;
			case 0x2406:
				return 0x17;
			case 0x2407:
				return 0x10;
			case 0x2408:
				return 0x15;
			case 0x2409:
				return 0x21;
			case 0x240A:
				return 0x15;
			case 0x240B:
				return 0x1F;
			case 0x240C:
				return 0x15;
			case 0x240D:
				return 0x1B;
			case 0x240E:
				return 0x15;
			case 0x240F:
				return 0x14;
			case 0x2410:
				return 0x1C;
			case 0x2411:
				return 0x1E;
			case 0x2412:
				return 0x1E;
			case 0x2413:
				return 0x20;
			case 0x2414:
				return 0x1F;
			case 0x2415:
				return 0x20;
			case 0x2416:
				return 0x1C;
			case 0x2417:
				return 0x25;
			case 0x2418:
				return 0x12;
			case 0x2419:
				return 0x19;
			case 0x241A:
				return 0x16;
			case 0x241B:
				return 0x12;
			case 0x241C:
				return 0x1A;
			case 0x241D:
				return 0x1B;
			case 0x241E:
				return 0x1C;
			case 0x241F:
				return 0x1A;
			case 0x2420:
				return 0x11;
			case 0x2421:
				return 0x12;
			case 0x2422:
				return 0xD;
			case 0x2423:
				return 0x9;
			case 0x2424:
				return 0x13;
			case 0x2425:
				return 0x1B;
			case 0x2426:
				return 0x1F;
			case 0x2440:
				return 0x9;
			case 0x2441:
				return 0xA;
			case 0x2442:
				return 0x9;
			case 0x2443:
				return 0x12;
			case 0x2444:
				return 0x10;
			case 0x2445:
				return 0xC;
			case 0x2446:
				return 0x1F;
			case 0x2447:
				return 0x14;
			case 0x2448:
				return 0x9;
			case 0x2449:
				return 0x1C;
			case 0x244A:
				return 0x15;
			case 0x2460:
				return 0x12;
			case 0x2461:
				return 0x12;
			case 0x2462:
				return 0x14;
			case 0x2463:
				return 0x13;
			case 0x2464:
				return 0x13;
			case 0x2465:
				return 0x12;
			case 0x2466:
				return 0x14;
			case 0x2467:
				return 0x14;
			case 0x2468:
				return 0x13;
			case 0x2469:
				return 0x13;
			case 0x246A:
				return 0x16;
			case 0x246B:
				return 0x16;
			case 0x246C:
				return 0x18;
			case 0x246D:
				return 0x18;
			case 0x246E:
				return 0x17;
			case 0x246F:
				return 0x17;
			case 0x2470:
				return 0x19;
			case 0x2471:
				return 0x18;
			case 0x2472:
				return 0x18;
			case 0x2473:
				return 0x16;
			case 0x2474:
				return 0x18;
			case 0x2475:
				return 0x18;
			case 0x2476:
				return 0x1A;
			case 0x2477:
				return 0x19;
			case 0x2478:
				return 0x19;
			case 0x2479:
				return 0x18;
			case 0x247A:
				return 0x1A;
			case 0x247B:
				return 0x1A;
			case 0x247C:
				return 0x19;
			case 0x247D:
				return 0x19;
			case 0x247E:
				return 0x1C;
			case 0x247F:
				return 0x1C;
			case 0x2480:
				return 0x1E;
			case 0x2481:
				return 0x1E;
			case 0x2482:
				return 0x1D;
			case 0x2483:
				return 0x1D;
			case 0x2484:
				return 0x1F;
			case 0x2485:
				return 0x1E;
			case 0x2486:
				return 0x1E;
			case 0x2487:
				return 0x1C;
			case 0x2488:
				return 0x14;
			case 0x2489:
				return 0x14;
			case 0x248A:
				return 0x16;
			case 0x248B:
				return 0x15;
			case 0x248C:
				return 0x15;
			case 0x248D:
				return 0x14;
			case 0x248E:
				return 0x16;
			case 0x248F:
				return 0x16;
			case 0x2490:
				return 0x15;
			case 0x2491:
				return 0x15;
			case 0x2492:
				return 0x18;
			case 0x2493:
				return 0x18;
			case 0x2494:
				return 0x1A;
			case 0x2495:
				return 0x1A;
			case 0x2496:
				return 0x19;
			case 0x2497:
				return 0x19;
			case 0x2498:
				return 0x1B;
			case 0x2499:
				return 0x1A;
			case 0x249A:
				return 0x1A;
			case 0x249B:
				return 0x18;
			case 0x249C:
				return 0x23;
			case 0x249D:
				return 0x23;
			case 0x249E:
				return 0x23;
			case 0x249F:
				return 0x23;
			case 0x24A0:
				return 0x23;
			case 0x24A1:
				return 0x23;
			case 0x24A2:
				return 0x23;
			case 0x24A3:
				return 0x23;
			case 0x24A4:
				return 0x23;
			case 0x24A5:
				return 0x23;
			case 0x24A6:
				return 0x23;
			case 0x24A7:
				return 0x23;
			case 0x24A8:
				return 0x23;
			case 0x24A9:
				return 0x23;
			case 0x24AA:
				return 0x23;
			case 0x24AB:
				return 0x23;
			case 0x24AC:
				return 0x23;
			case 0x24AD:
				return 0x23;
			case 0x24AE:
				return 0x23;
			case 0x24AF:
				return 0x23;
			case 0x24B0:
				return 0x23;
			case 0x24B1:
				return 0x23;
			case 0x24B2:
				return 0x23;
			case 0x24B3:
				return 0x23;
			case 0x24B4:
				return 0x23;
			case 0x24B5:
				return 0x23;
			case 0x24B6:
				return 0x1F;
			case 0x24B7:
				return 0x1F;
			case 0x24B8:
				return 0x1F;
			case 0x24B9:
				return 0x1F;
			case 0x24BA:
				return 0x1F;
			case 0x24BB:
				return 0x1F;
			case 0x24BC:
				return 0x1F;
			case 0x24BD:
				return 0x1F;
			case 0x24BE:
				return 0x1F;
			case 0x24BF:
				return 0x1F;
			case 0x24C0:
				return 0x1F;
			case 0x24C1:
				return 0x1F;
			case 0x24C2:
				return 0x1F;
			case 0x24C3:
				return 0x1F;
			case 0x24C4:
				return 0x1F;
			case 0x24C5:
				return 0x1F;
			case 0x24C6:
				return 0x1F;
			case 0x24C7:
				return 0x1F;
			case 0x24C8:
				return 0x1F;
			case 0x24C9:
				return 0x1F;
			case 0x24CA:
				return 0x1F;
			case 0x24CB:
				return 0x1F;
			case 0x24CC:
				return 0x1F;
			case 0x24CD:
				return 0x1F;
			case 0x24CE:
				return 0x1F;
			case 0x24CF:
				return 0x1F;
			case 0x24D0:
				return 0x1D;
			case 0x24D1:
				return 0x1D;
			case 0x24D2:
				return 0x1D;
			case 0x24D3:
				return 0x1D;
			case 0x24D4:
				return 0x1D;
			case 0x24D5:
				return 0x1D;
			case 0x24D6:
				return 0x1D;
			case 0x24D7:
				return 0x1D;
			case 0x24D8:
				return 0x1D;
			case 0x24D9:
				return 0x1D;
			case 0x24DA:
				return 0x1D;
			case 0x24DB:
				return 0x1D;
			case 0x24DC:
				return 0x1D;
			case 0x24DD:
				return 0x1D;
			case 0x24DE:
				return 0x1D;
			case 0x24DF:
				return 0x1D;
			case 0x24E0:
				return 0x1D;
			case 0x24E1:
				return 0x1D;
			case 0x24E2:
				return 0x1D;
			case 0x24E3:
				return 0x1D;
			case 0x24E4:
				return 0x1D;
			case 0x24E5:
				return 0x1D;
			case 0x24E6:
				return 0x1D;
			case 0x24E7:
				return 0x1D;
			case 0x24E8:
				return 0x1D;
			case 0x24E9:
				return 0x1D;
			case 0x24EA:
				return 0x13;
			case 0x24EB:
				return 0x1F;
			case 0x24EC:
				return 0x1F;
			case 0x24ED:
				return 0x21;
			case 0x24EE:
				return 0x21;
			case 0x24EF:
				return 0x20;
			case 0x24F0:
				return 0x20;
			case 0x24F1:
				return 0x22;
			case 0x24F2:
				return 0x21;
			case 0x24F3:
				return 0x21;
			case 0x24F4:
				return 0x1F;
			case 0x24F5:
				return 0x19;
			case 0x24F6:
				return 0x19;
			case 0x24F7:
				return 0x1B;
			case 0x24F8:
				return 0x1A;
			case 0x24F9:
				return 0x1A;
			case 0x24FA:
				return 0x19;
			case 0x24FB:
				return 0x1B;
			case 0x24FC:
				return 0x1B;
			case 0x24FD:
				return 0x1A;
			case 0x24FE:
				return 0x1A;
			case 0x24FF:
				return 0x1C;
			case 0x2500:
				return 0x1E;
			case 0x2501:
				return 0x1E;
			case 0x2502:
				return 0x1C;
			case 0x2503:
				return 0x1C;
			case 0x2504:
				return 0x2A;
			case 0x2505:
				return 0x2A;
			case 0x2506:
				return 0x28;
			case 0x2507:
				return 0x28;
			case 0x2508:
				return 0x2D;
			case 0x2509:
				return 0x2D;
			case 0x250A:
				return 0x2B;
			case 0x250B:
				return 0x2B;
			case 0x250C:
				return 0x22;
			case 0x250D:
				return 0x28;
			case 0x250E:
				return 0x28;
			case 0x250F:
				return 0x22;
			case 0x2510:
				return 0x21;
			case 0x2511:
				return 0x27;
			case 0x2512:
				return 0x27;
			case 0x2513:
				return 0x21;
			case 0x2514:
				return 0x20;
			case 0x2515:
				return 0x26;
			case 0x2516:
				return 0x26;
			case 0x2517:
				return 0x20;
			case 0x2518:
				return 0x1F;
			case 0x2519:
				return 0x25;
			case 0x251A:
				return 0x25;
			case 0x251B:
				return 0x1F;
			case 0x251C:
				return 0x26;
			case 0x251D:
				return 0x2C;
			case 0x251E:
				return 0x2B;
			case 0x251F:
				return 0x2B;
			case 0x2520:
				return 0x2C;
			case 0x2521:
				return 0x2B;
			case 0x2522:
				return 0x2B;
			case 0x2523:
				return 0x26;
			case 0x2524:
				return 0x25;
			case 0x2525:
				return 0x2B;
			case 0x2526:
				return 0x2A;
			case 0x2527:
				return 0x2A;
			case 0x2528:
				return 0x2B;
			case 0x2529:
				return 0x2A;
			case 0x252A:
				return 0x2A;
			case 0x252B:
				return 0x25;
			case 0x252C:
				return 0x27;
			case 0x252D:
				return 0x2D;
			case 0x252E:
				return 0x2D;
			case 0x252F:
				return 0x2D;
			case 0x2530:
				return 0x2D;
			case 0x2531:
				return 0x2D;
			case 0x2532:
				return 0x2D;
			case 0x2533:
				return 0x27;
			case 0x2534:
				return 0x25;
			case 0x2535:
				return 0x2B;
			case 0x2536:
				return 0x2B;
			case 0x2537:
				return 0x2B;
			case 0x2538:
				return 0x2B;
			case 0x2539:
				return 0x2B;
			case 0x253A:
				return 0x2B;
			case 0x253B:
				return 0x25;
			case 0x253C:
				return 0x2B;
			case 0x253D:
				return 0x31;
			case 0x253E:
				return 0x31;
			case 0x253F:
				return 0x31;
			case 0x2540:
				return 0x30;
			case 0x2541:
				return 0x30;
			case 0x2542:
				return 0x31;
			case 0x2543:
				return 0x30;
			case 0x2544:
				return 0x30;
			case 0x2545:
				return 0x30;
			case 0x2546:
				return 0x30;
			case 0x2547:
				return 0x30;
			case 0x2548:
				return 0x30;
			case 0x2549:
				return 0x31;
			case 0x254A:
				return 0x31;
			case 0x254B:
				return 0x2B;
			case 0x254C:
				return 0x2A;
			case 0x254D:
				return 0x2A;
			case 0x254E:
				return 0x28;
			case 0x254F:
				return 0x28;
			case 0x2550:
				return 0x1F;
			case 0x2551:
				return 0x1D;
			case 0x2552:
				return 0x2A;
			case 0x2553:
				return 0x2A;
			case 0x2554:
				return 0x23;
			case 0x2555:
				return 0x29;
			case 0x2556:
				return 0x29;
			case 0x2557:
				return 0x22;
			case 0x2558:
				return 0x28;
			case 0x2559:
				return 0x28;
			case 0x255A:
				return 0x21;
			case 0x255B:
				return 0x27;
			case 0x255C:
				return 0x27;
			case 0x255D:
				return 0x20;
			case 0x255E:
				return 0x2E;
			case 0x255F:
				return 0x2E;
			case 0x2560:
				return 0x27;
			case 0x2561:
				return 0x2D;
			case 0x2562:
				return 0x2D;
			case 0x2563:
				return 0x26;
			case 0x2564:
				return 0x2F;
			case 0x2565:
				return 0x2F;
			case 0x2566:
				return 0x28;
			case 0x2567:
				return 0x2D;
			case 0x2568:
				return 0x2D;
			case 0x2569:
				return 0x26;
			case 0x256A:
				return 0x33;
			case 0x256B:
				return 0x33;
			case 0x256C:
				return 0x2C;
			case 0x256D:
				return 0x26;
			case 0x256E:
				return 0x25;
			case 0x256F:
				return 0x23;
			case 0x2570:
				return 0x24;
			case 0x2571:
				return 0x36;
			case 0x2572:
				return 0x36;
			case 0x2573:
				return 0x22;
			case 0x2574:
				return 0x18;
			case 0x2575:
				return 0x16;
			case 0x2576:
				return 0x19;
			case 0x2577:
				return 0x18;
			case 0x2578:
				return 0x18;
			case 0x2579:
				return 0x16;
			case 0x257A:
				return 0x19;
			case 0x257B:
				return 0x18;
			case 0x257C:
				return 0x28;
			case 0x257D:
				return 0x25;
			case 0x257E:
				return 0x28;
			case 0x257F:
				return 0x25;
			case 0x2580:
				return 0x11;
			case 0x2581:
				return 0x17;
			case 0x2582:
				return 0x18;
			case 0x2583:
				return 0x1A;
			case 0x2584:
				return 0x11;
			case 0x2585:
				return 0x19;
			case 0x2586:
				return 0x1B;
			case 0x2587:
				return 0x1A;
			case 0x2588:
				return 0xB;
			case 0x2589:
				return 0x19;
			case 0x258A:
				return 0x1A;
			case 0x258B:
				return 0x18;
			case 0x258C:
				return 0x10;
			case 0x258D:
				return 0x19;
			case 0x258E:
				return 0x17;
			case 0x258F:
				return 0x16;
			case 0x2590:
				return 0x11;
			case 0x2591:
				return 0xC;
			case 0x2592:
				return 0xD;
			case 0x2593:
				return 0xB;
			case 0x2594:
				return 0x17;
			case 0x2595:
				return 0x17;
			case 0x2596:
				return 0x14;
			case 0x2597:
				return 0x15;
			case 0x2598:
				return 0x14;
			case 0x2599:
				return 0x33;
			case 0x259A:
				return 0x24;
			case 0x259B:
				return 0x33;
			case 0x259C:
				return 0x34;
			case 0x259D:
				return 0x15;
			case 0x259E:
				return 0x24;
			case 0x259F:
				return 0x34;
			case 0x25A0:
				return 0xD;
			case 0x25A1:
				return 0xD;
			case 0x25A2:
				return 0x22;
			case 0x25A3:
				return 0x2B;
			case 0x25A4:
				return 0x1C;
			case 0x25A5:
				return 0x1A;
			case 0x25A6:
				return 0x27;
			case 0x25A7:
				return 0x2B;
			case 0x25A8:
				return 0x2B;
			case 0x25A9:
				return 0x25;
			case 0x25AA:
				return 0x13;
			case 0x25AB:
				return 0x13;
			case 0x25AC:
				return 0x10;
			case 0x25AD:
				return 0x10;
			case 0x25AE:
				return 0x19;
			case 0x25AF:
				return 0x19;
			case 0x25B0:
				return 0x14;
			case 0x25B1:
				return 0x14;
			case 0x25B2:
				return 0x1B;
			case 0x25B3:
				return 0x1B;
			case 0x25B4:
				return 0x21;
			case 0x25B5:
				return 0x21;
			case 0x25B6:
				return 0x1E;
			case 0x25B7:
				return 0x1E;
			case 0x25B8:
				return 0x24;
			case 0x25B9:
				return 0x24;
			case 0x25BA:
				return 0x1D;
			case 0x25BB:
				return 0x1D;
			case 0x25BC:
				return 0x1D;
			case 0x25BD:
				return 0x1D;
			case 0x25BE:
				return 0x23;
			case 0x25BF:
				return 0x23;
			case 0x25C0:
				return 0x1D;
			case 0x25C1:
				return 0x1D;
			case 0x25C2:
				return 0x23;
			case 0x25C3:
				return 0x23;
			case 0x25C4:
				return 0x1C;
			case 0x25C5:
				return 0x1C;
			case 0x25C6:
				return 0xE;
			case 0x25C7:
				return 0xE;
			case 0x25C8:
				return 0x2D;
			case 0x25C9:
				return 0x8;
			case 0x25CA:
				return 0x8;
			case 0x25CB:
				return 0xD;
			case 0x25CC:
				return 0xE;
			case 0x25CD:
				return 0x1A;
			case 0x25CE:
				return 0x9;
			case 0x25CF:
				return 0xD;
			case 0x25D0:
				return 0x1C;
			case 0x25D1:
				return 0x1D;
			case 0x25D2:
				return 0x1D;
			case 0x25D3:
				return 0x1D;
			case 0x25D4:
				return 0x27;
			case 0x25D5:
				return 0x2E;
			case 0x25D6:
				return 0x17;
			case 0x25D7:
				return 0x18;
			case 0x25D8:
				return 0xF;
			case 0x25D9:
				return 0x15;
			case 0x25DA:
				return 0x20;
			case 0x25DB:
				return 0x20;
			case 0x25DC:
				return 0x21;
			case 0x25DD:
				return 0x22;
			case 0x25DE:
				return 0x22;
			case 0x25DF:
				return 0x21;
			case 0x25E0:
				return 0x12;
			case 0x25E1:
				return 0x12;
			case 0x25E2:
				return 0x1B;
			case 0x25E3:
				return 0x1A;
			case 0x25E4:
				return 0x1A;
			case 0x25E5:
				return 0x1B;
			case 0x25E6:
				return 0xD;
			case 0x25E7:
				return 0x1C;
			case 0x25E8:
				return 0x1D;
			case 0x25E9:
				return 0x2B;
			case 0x25EA:
				return 0x2C;
			case 0x25EB:
				return 0x2A;
			case 0x25EC:
				return 0x24;
			case 0x25ED:
				return 0x2A;
			case 0x25EE:
				return 0x2B;
			case 0x25EF:
				return 0xD;
			case 0x25F0:
				return 0x26;
			case 0x25F1:
				return 0x26;
			case 0x25F2:
				return 0x27;
			case 0x25F3:
				return 0x27;
			case 0x25F4:
				return 0x26;
			case 0x25F5:
				return 0x26;
			case 0x25F6:
				return 0x27;
			case 0x25F7:
				return 0x27;
			case 0x25F8:
				return 0x14;
			case 0x25F9:
				return 0x15;
			case 0x25FA:
				return 0x14;
			case 0x25FB:
				return 0x14;
			case 0x25FC:
				return 0x14;
			case 0x25FD:
				return 0x1A;
			case 0x25FE:
				return 0x1A;
			case 0x25FF:
				return 0x15;
			case 0x2600:
				return 0x14;
			case 0x2601:
				return 0x6;
			case 0x2602:
				return 0x9;
			case 0x2603:
				return 0x8;
			case 0x2604:
				return 0x6;
			case 0x2605:
				return 0xB;
			case 0x2606:
				return 0xB;
			case 0x2607:
				return 0xA;
			case 0x2608:
				return 0xD;
			case 0x2609:
				return 0x4;
			case 0x260A:
				return 0xF;
			case 0x260B:
				return 0x10;
			case 0x260C:
				return 0xC;
			case 0x260D:
				return 0xB;
			case 0x260E:
				return 0x10;
			case 0x260F:
				return 0x10;
			case 0x2610:
				return 0xB;
			case 0x2611:
				return 0x16;
			case 0x2612:
				return 0x12;
			case 0x2613:
				return 0x8;
			case 0x2614:
				return 0x19;
			case 0x2615:
				return 0xD;
			case 0x2616:
				return 0x12;
			case 0x2617:
				return 0x12;
			case 0x2618:
				return 0x9;
			case 0x2619:
				return 0x25;
			case 0x261A:
				return 0x1A;
			case 0x261B:
				return 0x1B;
			case 0x261C:
				return 0x1A;
			case 0x261D:
				return 0x18;
			case 0x261E:
				return 0x1B;
			case 0x261F:
				return 0x1A;
			case 0x2620:
				return 0x15;
			case 0x2621:
				return 0xD;
			case 0x2622:
				return 0x11;
			case 0x2623:
				return 0xF;
			case 0x2624:
				return 0x9;
			case 0x2625:
				return 0x5;
			case 0x2626:
				return 0xF;
			case 0x2627:
				return 0x8;
			case 0x2628:
				return 0x12;
			case 0x2629:
				return 0x13;
			case 0x262A:
				return 0x12;
			case 0x262B:
				return 0xD;
			case 0x262C:
				return 0xB;
			case 0x262D:
				return 0x12;
			case 0x262E:
				return 0xD;
			case 0x262F:
				return 0x9;
			case 0x2630:
				return 0x13;
			case 0x2631:
				return 0x11;
			case 0x2632:
				return 0x11;
			case 0x2633:
				return 0x14;
			case 0x2634:
				return 0x11;
			case 0x2635:
				return 0x12;
			case 0x2636:
				return 0x15;
			case 0x2637:
				return 0x12;
			case 0x2638:
				return 0x10;
			case 0x2639:
				return 0x14;
			case 0x263A:
				return 0x13;
			case 0x263B:
				return 0x13;
			case 0x263C:
				return 0x14;
			case 0x263D:
				return 0x13;
			case 0x263E:
				return 0x12;
			case 0x263F:
				return 0x8;
			case 0x2640:
				return 0xC;
			case 0x2641:
				return 0x6;
			case 0x2642:
				return 0xA;
			case 0x2643:
				return 0x8;
			case 0x2644:
				return 0x7;
			case 0x2645:
				return 0x7;
			case 0x2646:
				return 0x8;
			case 0x2647:
				return 0x6;
			case 0x2648:
				return 0x6;
			case 0x2649:
				return 0x7;
			case 0x264A:
				return 0x7;
			case 0x264B:
				return 0x7;
			case 0x264C:
				return 0x4;
			case 0x264D:
				return 0x6;
			case 0x264E:
				return 0x6;
			case 0x264F:
				return 0x9;
			case 0x2650:
				return 0xC;
			case 0x2651:
				return 0xA;
			case 0x2652:
				return 0x9;
			case 0x2653:
				return 0x7;
			case 0x2654:
				return 0x11;
			case 0x2655:
				return 0x12;
			case 0x2656:
				return 0x11;
			case 0x2657:
				return 0x13;
			case 0x2658:
				return 0x13;
			case 0x2659:
				return 0x11;
			case 0x265A:
				return 0x11;
			case 0x265B:
				return 0x12;
			case 0x265C:
				return 0x11;
			case 0x265D:
				return 0x13;
			case 0x265E:
				return 0x13;
			case 0x265F:
				return 0x11;
			case 0x2660:
				return 0x11;
			case 0x2661:
				return 0x11;
			case 0x2662:
				return 0x13;
			case 0x2663:
				return 0x10;
			case 0x2664:
				return 0x11;
			case 0x2665:
				return 0x11;
			case 0x2666:
				return 0x13;
			case 0x2667:
				return 0x10;
			case 0x2668:
				return 0xC;
			case 0x2669:
				return 0xD;
			case 0x266A:
				return 0xC;
			case 0x266B:
				return 0x14;
			case 0x266C:
				return 0x17;
			case 0x266D:
				return 0x10;
			case 0x266E:
				return 0x13;
			case 0x266F:
				return 0x11;
			case 0x2670:
				return 0x12;
			case 0x2671:
				return 0x12;
			case 0x2672:
				return 0x1B;
			case 0x2673:
				return 0x25;
			case 0x2674:
				return 0x25;
			case 0x2675:
				return 0x25;
			case 0x2676:
				return 0x25;
			case 0x2677:
				return 0x25;
			case 0x2678:
				return 0x25;
			case 0x2679:
				return 0x25;
			case 0x267A:
				return 0x27;
			case 0x267B:
				return 0x21;
			case 0x267C:
				return 0x16;
			case 0x267D:
				return 0x20;
			case 0x267E:
				return 0x15;
			case 0x267F:
				return 0x12;
			case 0x2680:
				return 0xB;
			case 0x2681:
				return 0xB;
			case 0x2682:
				return 0xB;
			case 0x2683:
				return 0xB;
			case 0x2684:
				return 0xB;
			case 0x2685:
				return 0xB;
			case 0x2686:
				return 0x1C;
			case 0x2687:
				return 0x1B;
			case 0x2688:
				return 0x22;
			case 0x2689:
				return 0x21;
			case 0x268A:
				return 0x12;
			case 0x268B:
				return 0x11;
			case 0x268C:
				return 0x18;
			case 0x268D:
				return 0x16;
			case 0x268E:
				return 0x17;
			case 0x268F:
				return 0x17;
			case 0x2690:
				return 0xB;
			case 0x2691:
				return 0xB;
			case 0x2692:
				return 0x10;
			case 0x2693:
				return 0x7;
			case 0x2694:
				return 0xF;
			case 0x2695:
				return 0x15;
			case 0x2696:
				return 0x7;
			case 0x2697:
				return 0x8;
			case 0x2698:
				return 0x7;
			case 0x2699:
				return 0x5;
			case 0x269A:
				return 0x10;
			case 0x269B:
				return 0xC;
			case 0x269C:
				return 0xD;
			case 0x269D:
				return 0x14;
			case 0x269E:
				return 0x1D;
			case 0x269F:
				return 0x1C;
			case 0x26A0:
				return 0xD;
			case 0x26A1:
				return 0x12;
			case 0x26A2:
				return 0x14;
			case 0x26A3:
				return 0x12;
			case 0x26A4:
				return 0x21;
			case 0x26A5:
				return 0x15;
			case 0x26A6:
				return 0x16;
			case 0x26A7:
				return 0x2A;
			case 0x26A8:
				return 0x1F;
			case 0x26A9:
				return 0x21;
			case 0x26AA:
				return 0x14;
			case 0x26AB:
				return 0x14;
			case 0x26AC:
				return 0x1A;
			case 0x26AD:
				return 0x10;
			case 0x26AE:
				return 0xF;
			case 0x26AF:
				return 0x1D;
			case 0x26B0:
				return 0x7;
			case 0x26B1:
				return 0xC;
			case 0x26B2:
				return 0x7;
			case 0x26B3:
				return 0x6;
			case 0x26B4:
				return 0x7;
			case 0x26B5:
				return 0x5;
			case 0x26B6:
				return 0x6;
			case 0x26B7:
				return 0x7;
			case 0x26B8:
				return 0x12;
			case 0x26B9:
				return 0x8;
			case 0x26BA:
				return 0xC;
			case 0x26BB:
				return 0x9;
			case 0x26BC:
				return 0xF;
			case 0x26BD:
				return 0xC;
			case 0x26BE:
				return 0x9;
			case 0x26BF:
				return 0xC;
			case 0x26C0:
				return 0x13;
			case 0x26C1:
				return 0x14;
			case 0x26C2:
				return 0x13;
			case 0x26C3:
				return 0x14;
			case 0x26C4:
				return 0x15;
			case 0x26C5:
				return 0x11;
			case 0x26C6:
				return 0x5;
			case 0x26C7:
				return 0xE;
			case 0x26C8:
				return 0x17;
			case 0x26C9:
				return 0x19;
			case 0x26CA:
				return 0x19;
			case 0x26CB:
				return 0x18;
			case 0x26CC:
				return 0xF;
			case 0x26CD:
				return 0xD;
			case 0x26CE:
				return 0xA;
			case 0x26CF:
				return 0x5;
			case 0x26D0:
				return 0xC;
			case 0x26D1:
				return 0x18;
			case 0x26D2:
				return 0x17;
			case 0x26D3:
				return 0x7;
			case 0x26D4:
				return 0x9;
			case 0x26D5:
				return 0x23;
			case 0x26D6:
				return 0x1F;
			case 0x26D7:
				return 0x1F;
			case 0x26D8:
				return 0x16;
			case 0x26D9:
				return 0x16;
			case 0x26DA:
				return 0x10;
			case 0x26DB:
				return 0x23;
			case 0x26DC:
				return 0x12;
			case 0x26DD:
				return 0x10;
			case 0x26DE:
				return 0x31;
			case 0x26DF:
				return 0xC;
			case 0x26E0:
				return 0x18;
			case 0x26E1:
				return 0x18;
			case 0x26E2:
				return 0x1F;
			case 0x26E3:
				return 0x2C;
			case 0x26E4:
				return 0xA;
			case 0x26E5:
				return 0x22;
			case 0x26E6:
				return 0x21;
			case 0x26E7:
				return 0x13;
			case 0x26E8:
				return 0x16;
			case 0x26E9:
				return 0xE;
			case 0x26EA:
				return 0x7;
			case 0x26EB:
				return 0x7;
			case 0x26EC:
				return 0xE;
			case 0x26ED:
				return 0x11;
			case 0x26EE:
				return 0x12;
			case 0x26EF:
				return 0x1A;
			case 0x26F0:
				return 0x9;
			case 0x26F1:
				return 0x13;
			case 0x26F2:
				return 0x9;
			case 0x26F3:
				return 0xD;
			case 0x26F4:
				return 0x6;
			case 0x26F5:
				return 0x9;
			case 0x26F6:
				return 0x14;
			case 0x26F7:
				return 0x6;
			case 0x26F8:
				return 0xA;
			case 0x26F9:
				return 0x11;
			case 0x26FA:
				return 0x5;
			case 0x26FB:
				return 0x15;
			case 0x26FC:
				return 0x1B;
			case 0x26FD:
				return 0xA;
			case 0x26FE:
				return 0x14;
			case 0x26FF:
				return 0x2F;
			case 0x2700:
				return 0x16;
			case 0x2701:
				return 0x15;
			case 0x2702:
				return 0xF;
			case 0x2703:
				return 0x15;
			case 0x2704:
				return 0xF;
			case 0x2705:
				return 0x17;
			case 0x2706:
				return 0x18;
			case 0x2707:
				return 0xB;
			case 0x2708:
				return 0x9;
			case 0x2709:
				return 0x9;
			case 0x270A:
				return 0xC;
			case 0x270B:
				return 0xC;
			case 0x270C:
				return 0xD;
			case 0x270D:
				return 0xD;
			case 0x270E:
				return 0x13;
			case 0x270F:
				return 0x7;
			case 0x2710:
				return 0x13;
			case 0x2711:
				return 0xA;
			case 0x2712:
				return 0xA;
			case 0x2713:
				return 0xB;
			case 0x2714:
				return 0x11;
			case 0x2715:
				return 0x11;
			case 0x2716:
				return 0x17;
			case 0x2717:
				return 0x9;
			case 0x2718:
				return 0xF;
			case 0x2719:
				return 0x15;
			case 0x271A:
				return 0x12;
			case 0x271B:
				return 0x12;
			case 0x271C:
				return 0x18;
			case 0x271D:
				return 0xC;
			case 0x271E:
				return 0x1B;
			case 0x271F:
				return 0x15;
			case 0x2720:
				return 0xE;
			case 0x2721:
				return 0xE;
			case 0x2722:
				return 0x1E;
			case 0x2723:
				return 0x1D;
			case 0x2724:
				return 0x23;
			case 0x2725:
				return 0x1A;
			case 0x2726:
				return 0x18;
			case 0x2727:
				return 0x18;
			case 0x2728:
				return 0x9;
			case 0x2729:
				return 0x1B;
			case 0x272A:
				return 0x13;
			case 0x272B:
				return 0x17;
			case 0x272C:
				return 0x18;
			case 0x272D:
				return 0x14;
			case 0x272E:
				return 0x1A;
			case 0x272F:
				return 0xE;
			case 0x2730:
				return 0x14;
			case 0x2731:
				return 0xF;
			case 0x2732:
				return 0x15;
			case 0x2733:
				return 0x16;
			case 0x2734:
				return 0x19;
			case 0x2735:
				return 0x1C;
			case 0x2736:
				return 0x17;
			case 0x2737:
				return 0x25;
			case 0x2738:
				return 0x2B;
			case 0x2739:
				return 0x1A;
			case 0x273A:
				return 0x19;
			case 0x273B:
				return 0x19;
			case 0x273C:
				return 0x25;
			case 0x273D:
				return 0x1F;
			case 0x273E:
				return 0x26;
			case 0x273F:
				return 0xF;
			case 0x2740:
				return 0xF;
			case 0x2741:
				return 0x27;
			case 0x2742:
				return 0x27;
			case 0x2743:
				return 0x28;
			case 0x2744:
				return 0xA;
			case 0x2745:
				return 0x1B;
			case 0x2746:
				return 0x18;
			case 0x2747:
				return 0x8;
			case 0x2748:
				return 0xE;
			case 0x2749:
				return 0x18;
			case 0x274A:
				return 0x29;
			case 0x274B:
				return 0x2F;
			case 0x274C:
				return 0xB;
			case 0x274D:
				return 0x16;
			case 0x274E:
				return 0x1C;
			case 0x274F:
				return 0x27;
			case 0x2750:
				return 0x27;
			case 0x2751:
				return 0x22;
			case 0x2752:
				return 0x22;
			case 0x2753:
				return 0x1D;
			case 0x2754:
				return 0x1D;
			case 0x2755:
				return 0x20;
			case 0x2756:
				return 0x1C;
			case 0x2757:
				return 0x1E;
			case 0x2758:
				return 0x13;
			case 0x2759:
				return 0x14;
			case 0x275A:
				return 0x13;
			case 0x275B:
				return 0x32;
			case 0x275C:
				return 0x2B;
			case 0x275D:
				return 0x32;
			case 0x275E:
				return 0x2B;
			case 0x275F:
				return 0x2F;
			case 0x2760:
				return 0x2F;
			case 0x2761:
				return 0x24;
			case 0x2762:
				return 0x20;
			case 0x2763:
				return 0x26;
			case 0x2764:
				return 0x12;
			case 0x2765:
				return 0x21;
			case 0x2766:
				return 0xD;
			case 0x2767:
				return 0x1C;
			case 0x2768:
				return 0x21;
			case 0x2769:
				return 0x22;
			case 0x276A:
				return 0x2B;
			case 0x276B:
				return 0x2C;
			case 0x276C:
				return 0x2C;
			case 0x276D:
				return 0x2D;
			case 0x276E:
				return 0x32;
			case 0x276F:
				return 0x33;
			case 0x2770:
				return 0x2B;
			case 0x2771:
				return 0x2C;
			case 0x2772:
				return 0x2B;
			case 0x2773:
				return 0x2C;
			case 0x2774:
				return 0x23;
			case 0x2775:
				return 0x24;
			case 0x2776:
				return 0x23;
			case 0x2777:
				return 0x23;
			case 0x2778:
				return 0x25;
			case 0x2779:
				return 0x24;
			case 0x277A:
				return 0x24;
			case 0x277B:
				return 0x23;
			case 0x277C:
				return 0x25;
			case 0x277D:
				return 0x25;
			case 0x277E:
				return 0x24;
			case 0x277F:
				return 0x24;
			case 0x2780:
				return 0x25;
			case 0x2781:
				return 0x25;
			case 0x2782:
				return 0x27;
			case 0x2783:
				return 0x26;
			case 0x2784:
				return 0x26;
			case 0x2785:
				return 0x25;
			case 0x2786:
				return 0x27;
			case 0x2787:
				return 0x27;
			case 0x2788:
				return 0x26;
			case 0x2789:
				return 0x26;
			case 0x278A:
				return 0x2E;
			case 0x278B:
				return 0x2E;
			case 0x278C:
				return 0x30;
			case 0x278D:
				return 0x2F;
			case 0x278E:
				return 0x2F;
			case 0x278F:
				return 0x2E;
			case 0x2790:
				return 0x30;
			case 0x2791:
				return 0x30;
			case 0x2792:
				return 0x2F;
			case 0x2793:
				return 0x2F;
			case 0x2794:
				return 0x23;
			case 0x2795:
				return 0x10;
			case 0x2796:
				return 0x11;
			case 0x2797:
				return 0x14;
			case 0x2798:
				return 0x17;
			case 0x2799:
				return 0x17;
			case 0x279A:
				return 0x17;
			case 0x279B:
				return 0x20;
			case 0x279C:
				return 0x24;
			case 0x279D:
				return 0x21;
			case 0x279E:
				return 0x27;
			case 0x279F:
				return 0x28;
			case 0x27A0:
				return 0x2E;
			case 0x27A1:
				return 0x17;
			case 0x27A2:
				return 0x29;
			case 0x27A3:
				return 0x2C;
			case 0x27A4:
				return 0x1B;
			case 0x27A5:
				return 0x32;
			case 0x27A6:
				return 0x30;
			case 0x27A7:
				return 0x1D;
			case 0x27A8:
				return 0x2D;
			case 0x27A9:
				return 0x24;
			case 0x27AA:
				return 0x23;
			case 0x27AB:
				return 0x2C;
			case 0x27AC:
				return 0x2D;
			case 0x27AD:
				return 0x32;
			case 0x27AE:
				return 0x32;
			case 0x27AF:
				return 0x34;
			case 0x27B0:
				return 0xB;
			case 0x27B1:
				return 0x34;
			case 0x27B2:
				return 0x25;
			case 0x27B3:
				return 0x21;
			case 0x27B4:
				return 0x21;
			case 0x27B5:
				return 0x21;
			case 0x27B6:
				return 0x21;
			case 0x27B7:
				return 0x27;
			case 0x27B8:
				return 0x27;
			case 0x27B9:
				return 0x27;
			case 0x27BA:
				return 0x21;
			case 0x27BB:
				return 0x28;
			case 0x27BC:
				return 0x1E;
			case 0x27BD:
				return 0x24;
			case 0x27BE:
				return 0x1F;
			case 0x27BF:
				return 0x12;
			case 0x27C0:
				return 0x18;
			case 0x27C1:
				return 0x2F;
			case 0x27C2:
				return 0xE;
			case 0x27C3:
				return 0xC;
			case 0x27C4:
				return 0xE;
			case 0x27C5:
				return 0x1C;
			case 0x27C6:
				return 0x1D;
			case 0x27C7:
				return 0x13;
			case 0x27C8:
				return 0x21;
			case 0x27C9:
				return 0x1B;
			case 0x27CA:
				return 0x24;
			case 0x27CB:
				return 0x1D;
			case 0x27CC:
				return 0xE;
			case 0x27CD:
				return 0x1E;
			case 0x27CE:
				return 0x14;
			case 0x27CF:
				return 0x13;
			case 0x27D0:
				return 0x1F;
			case 0x27D1:
				return 0xD;
			case 0x27D2:
				return 0x1B;
			case 0x27D3:
				return 0x1C;
			case 0x27D4:
				return 0x1B;
			case 0x27D5:
				return 0x10;
			case 0x27D6:
				return 0x11;
			case 0x27D7:
				return 0x10;
			case 0x27D8:
				return 0xE;
			case 0x27D9:
				return 0x10;
			case 0x27DA:
				return 0x20;
			case 0x27DB:
				return 0x14;
			case 0x27DC:
				return 0xE;
			case 0x27DD:
				return 0x10;
			case 0x27DE:
				return 0xF;
			case 0x27DF:
				return 0x1A;
			case 0x27E0:
				return 0x23;
			case 0x27E1:
				return 0x1C;
			case 0x27E2:
				return 0x30;
			case 0x27E3:
				return 0x31;
			case 0x27E4:
				return 0x21;
			case 0x27E5:
				return 0x22;
			case 0x27E6:
				return 0x27;
			case 0x27E7:
				return 0x28;
			case 0x27E8:
				return 0x20;
			case 0x27E9:
				return 0x21;
			case 0x27EA:
				return 0x27;
			case 0x27EB:
				return 0x28;
			case 0x27EC:
				return 0x2F;
			case 0x27ED:
				return 0x30;
			case 0x27EE:
				return 0x28;
			case 0x27EF:
				return 0x29;
			case 0x27F0:
				return 0x18;
			case 0x27F1:
				return 0x1A;
			case 0x27F2:
				return 0x22;
			case 0x27F3:
				return 0x1E;
			case 0x27F4:
				return 0x1E;
			case 0x27F5:
				return 0x15;
			case 0x27F6:
				return 0x16;
			case 0x27F7:
				return 0x16;
			case 0x27F8:
				return 0x1C;
			case 0x27F9:
				return 0x1D;
			case 0x27FA:
				return 0x1D;
			case 0x27FB:
				return 0x1E;
			case 0x27FC:
				return 0x1F;
			case 0x27FD:
				return 0x25;
			case 0x27FE:
				return 0x26;
			case 0x27FF:
				return 0x1F;
			case 0x2800:
				return 0x16;
			case 0x2801:
				return 0x17;
			case 0x2802:
				return 0x17;
			case 0x2803:
				return 0x18;
			case 0x2804:
				return 0x17;
			case 0x2805:
				return 0x18;
			case 0x2806:
				return 0x18;
			case 0x2807:
				return 0x19;
			case 0x2808:
				return 0x17;
			case 0x2809:
				return 0x18;
			case 0x280A:
				return 0x18;
			case 0x280B:
				return 0x19;
			case 0x280C:
				return 0x18;
			case 0x280D:
				return 0x19;
			case 0x280E:
				return 0x19;
			case 0x280F:
				return 0x1A;
			case 0x2810:
				return 0x17;
			case 0x2811:
				return 0x18;
			case 0x2812:
				return 0x18;
			case 0x2813:
				return 0x19;
			case 0x2814:
				return 0x18;
			case 0x2815:
				return 0x19;
			case 0x2816:
				return 0x19;
			case 0x2817:
				return 0x1A;
			case 0x2818:
				return 0x18;
			case 0x2819:
				return 0x19;
			case 0x281A:
				return 0x19;
			case 0x281B:
				return 0x1A;
			case 0x281C:
				return 0x19;
			case 0x281D:
				return 0x1A;
			case 0x281E:
				return 0x1A;
			case 0x281F:
				return 0x1B;
			case 0x2820:
				return 0x17;
			case 0x2821:
				return 0x18;
			case 0x2822:
				return 0x18;
			case 0x2823:
				return 0x19;
			case 0x2824:
				return 0x18;
			case 0x2825:
				return 0x19;
			case 0x2826:
				return 0x19;
			case 0x2827:
				return 0x1A;
			case 0x2828:
				return 0x18;
			case 0x2829:
				return 0x19;
			case 0x282A:
				return 0x19;
			case 0x282B:
				return 0x1A;
			case 0x282C:
				return 0x19;
			case 0x282D:
				return 0x1A;
			case 0x282E:
				return 0x1A;
			case 0x282F:
				return 0x1B;
			case 0x2830:
				return 0x18;
			case 0x2831:
				return 0x19;
			case 0x2832:
				return 0x19;
			case 0x2833:
				return 0x1A;
			case 0x2834:
				return 0x19;
			case 0x2835:
				return 0x1A;
			case 0x2836:
				return 0x1A;
			case 0x2837:
				return 0x1B;
			case 0x2838:
				return 0x19;
			case 0x2839:
				return 0x1A;
			case 0x283A:
				return 0x1A;
			case 0x283B:
				return 0x1B;
			case 0x283C:
				return 0x1A;
			case 0x283D:
				return 0x1B;
			case 0x283E:
				return 0x1B;
			case 0x283F:
				return 0x1C;
			case 0x2840:
				return 0x17;
			case 0x2841:
				return 0x18;
			case 0x2842:
				return 0x18;
			case 0x2843:
				return 0x19;
			case 0x2844:
				return 0x18;
			case 0x2845:
				return 0x19;
			case 0x2846:
				return 0x19;
			case 0x2847:
				return 0x1A;
			case 0x2848:
				return 0x18;
			case 0x2849:
				return 0x19;
			case 0x284A:
				return 0x19;
			case 0x284B:
				return 0x1A;
			case 0x284C:
				return 0x19;
			case 0x284D:
				return 0x1A;
			case 0x284E:
				return 0x1A;
			case 0x284F:
				return 0x1B;
			case 0x2850:
				return 0x18;
			case 0x2851:
				return 0x19;
			case 0x2852:
				return 0x19;
			case 0x2853:
				return 0x1A;
			case 0x2854:
				return 0x19;
			case 0x2855:
				return 0x1A;
			case 0x2856:
				return 0x1A;
			case 0x2857:
				return 0x1B;
			case 0x2858:
				return 0x19;
			case 0x2859:
				return 0x1A;
			case 0x285A:
				return 0x1A;
			case 0x285B:
				return 0x1B;
			case 0x285C:
				return 0x1A;
			case 0x285D:
				return 0x1B;
			case 0x285E:
				return 0x1B;
			case 0x285F:
				return 0x1C;
			case 0x2860:
				return 0x18;
			case 0x2861:
				return 0x19;
			case 0x2862:
				return 0x19;
			case 0x2863:
				return 0x1A;
			case 0x2864:
				return 0x19;
			case 0x2865:
				return 0x1A;
			case 0x2866:
				return 0x1A;
			case 0x2867:
				return 0x1B;
			case 0x2868:
				return 0x19;
			case 0x2869:
				return 0x1A;
			case 0x286A:
				return 0x1A;
			case 0x286B:
				return 0x1B;
			case 0x286C:
				return 0x1A;
			case 0x286D:
				return 0x1B;
			case 0x286E:
				return 0x1B;
			case 0x286F:
				return 0x1C;
			case 0x2870:
				return 0x19;
			case 0x2871:
				return 0x1A;
			case 0x2872:
				return 0x1A;
			case 0x2873:
				return 0x1B;
			case 0x2874:
				return 0x1A;
			case 0x2875:
				return 0x1B;
			case 0x2876:
				return 0x1B;
			case 0x2877:
				return 0x1C;
			case 0x2878:
				return 0x1A;
			case 0x2879:
				return 0x1B;
			case 0x287A:
				return 0x1B;
			case 0x287B:
				return 0x1C;
			case 0x287C:
				return 0x1B;
			case 0x287D:
				return 0x1C;
			case 0x287E:
				return 0x1C;
			case 0x287F:
				return 0x1D;
			case 0x2880:
				return 0x17;
			case 0x2881:
				return 0x18;
			case 0x2882:
				return 0x18;
			case 0x2883:
				return 0x19;
			case 0x2884:
				return 0x18;
			case 0x2885:
				return 0x19;
			case 0x2886:
				return 0x19;
			case 0x2887:
				return 0x1A;
			case 0x2888:
				return 0x18;
			case 0x2889:
				return 0x19;
			case 0x288A:
				return 0x19;
			case 0x288B:
				return 0x1A;
			case 0x288C:
				return 0x19;
			case 0x288D:
				return 0x1A;
			case 0x288E:
				return 0x1A;
			case 0x288F:
				return 0x1B;
			case 0x2890:
				return 0x18;
			case 0x2891:
				return 0x19;
			case 0x2892:
				return 0x19;
			case 0x2893:
				return 0x1A;
			case 0x2894:
				return 0x19;
			case 0x2895:
				return 0x1A;
			case 0x2896:
				return 0x1A;
			case 0x2897:
				return 0x1B;
			case 0x2898:
				return 0x19;
			case 0x2899:
				return 0x1A;
			case 0x289A:
				return 0x1A;
			case 0x289B:
				return 0x1B;
			case 0x289C:
				return 0x1A;
			case 0x289D:
				return 0x1B;
			case 0x289E:
				return 0x1B;
			case 0x289F:
				return 0x1C;
			case 0x28A0:
				return 0x18;
			case 0x28A1:
				return 0x19;
			case 0x28A2:
				return 0x19;
			case 0x28A3:
				return 0x1A;
			case 0x28A4:
				return 0x19;
			case 0x28A5:
				return 0x1A;
			case 0x28A6:
				return 0x1A;
			case 0x28A7:
				return 0x1B;
			case 0x28A8:
				return 0x19;
			case 0x28A9:
				return 0x1A;
			case 0x28AA:
				return 0x1A;
			case 0x28AB:
				return 0x1B;
			case 0x28AC:
				return 0x1A;
			case 0x28AD:
				return 0x1B;
			case 0x28AE:
				return 0x1B;
			case 0x28AF:
				return 0x1C;
			case 0x28B0:
				return 0x19;
			case 0x28B1:
				return 0x1A;
			case 0x28B2:
				return 0x1A;
			case 0x28B3:
				return 0x1B;
			case 0x28B4:
				return 0x1A;
			case 0x28B5:
				return 0x1B;
			case 0x28B6:
				return 0x1B;
			case 0x28B7:
				return 0x1C;
			case 0x28B8:
				return 0x1A;
			case 0x28B9:
				return 0x1B;
			case 0x28BA:
				return 0x1B;
			case 0x28BB:
				return 0x1C;
			case 0x28BC:
				return 0x1B;
			case 0x28BD:
				return 0x1C;
			case 0x28BE:
				return 0x1C;
			case 0x28BF:
				return 0x1D;
			case 0x28C0:
				return 0x18;
			case 0x28C1:
				return 0x19;
			case 0x28C2:
				return 0x19;
			case 0x28C3:
				return 0x1A;
			case 0x28C4:
				return 0x19;
			case 0x28C5:
				return 0x1A;
			case 0x28C6:
				return 0x1A;
			case 0x28C7:
				return 0x1B;
			case 0x28C8:
				return 0x19;
			case 0x28C9:
				return 0x1A;
			case 0x28CA:
				return 0x1A;
			case 0x28CB:
				return 0x1B;
			case 0x28CC:
				return 0x1A;
			case 0x28CD:
				return 0x1B;
			case 0x28CE:
				return 0x1B;
			case 0x28CF:
				return 0x1C;
			case 0x28D0:
				return 0x19;
			case 0x28D1:
				return 0x1A;
			case 0x28D2:
				return 0x1A;
			case 0x28D3:
				return 0x1B;
			case 0x28D4:
				return 0x1A;
			case 0x28D5:
				return 0x1B;
			case 0x28D6:
				return 0x1B;
			case 0x28D7:
				return 0x1C;
			case 0x28D8:
				return 0x1A;
			case 0x28D9:
				return 0x1B;
			case 0x28DA:
				return 0x1B;
			case 0x28DB:
				return 0x1C;
			case 0x28DC:
				return 0x1B;
			case 0x28DD:
				return 0x1C;
			case 0x28DE:
				return 0x1C;
			case 0x28DF:
				return 0x1D;
			case 0x28E0:
				return 0x19;
			case 0x28E1:
				return 0x1A;
			case 0x28E2:
				return 0x1A;
			case 0x28E3:
				return 0x1B;
			case 0x28E4:
				return 0x1A;
			case 0x28E5:
				return 0x1B;
			case 0x28E6:
				return 0x1B;
			case 0x28E7:
				return 0x1C;
			case 0x28E8:
				return 0x1A;
			case 0x28E9:
				return 0x1B;
			case 0x28EA:
				return 0x1B;
			case 0x28EB:
				return 0x1C;
			case 0x28EC:
				return 0x1B;
			case 0x28ED:
				return 0x1C;
			case 0x28EE:
				return 0x1C;
			case 0x28EF:
				return 0x1D;
			case 0x28F0:
				return 0x1A;
			case 0x28F1:
				return 0x1B;
			case 0x28F2:
				return 0x1B;
			case 0x28F3:
				return 0x1C;
			case 0x28F4:
				return 0x1B;
			case 0x28F5:
				return 0x1C;
			case 0x28F6:
				return 0x1C;
			case 0x28F7:
				return 0x1D;
			case 0x28F8:
				return 0x1B;
			case 0x28F9:
				return 0x1C;
			case 0x28FA:
				return 0x1C;
			case 0x28FB:
				return 0x1D;
			case 0x28FC:
				return 0x1C;
			case 0x28FD:
				return 0x1D;
			case 0x28FE:
				return 0x1D;
			case 0x28FF:
				return 0x1E;
			case 0x2900:
				return 0x31;
			case 0x2901:
				return 0x38;
			case 0x2902:
				return 0x2C;
			case 0x2903:
				return 0x2D;
			case 0x2904:
				return 0x2D;
			case 0x2905:
				return 0x25;
			case 0x2906:
				return 0x20;
			case 0x2907:
				return 0x21;
			case 0x2908:
				return 0x27;
			case 0x2909:
				return 0x25;
			case 0x290A:
				return 0x15;
			case 0x290B:
				return 0x17;
			case 0x290C:
				return 0x1C;
			case 0x290D:
				return 0x1D;
			case 0x290E:
				return 0x1C;
			case 0x290F:
				return 0x1D;
			case 0x2910:
				return 0x28;
			case 0x2911:
				return 0x22;
			case 0x2912:
				return 0x15;
			case 0x2913:
				return 0x17;
			case 0x2914:
				return 0x30;
			case 0x2915:
				return 0x37;
			case 0x2916:
				return 0x26;
			case 0x2917:
				return 0x3B;
			case 0x2918:
				return 0x42;
			case 0x2919:
				return 0x15;
			case 0x291A:
				return 0x16;
			case 0x291B:
				return 0x1C;
			case 0x291C:
				return 0x1D;
			case 0x291D:
				return 0x21;
			case 0x291E:
				return 0x22;
			case 0x291F:
				return 0x2A;
			case 0x2920:
				return 0x2B;
			case 0x2921:
				return 0x20;
			case 0x2922:
				return 0x20;
			case 0x2923:
				return 0x1B;
			case 0x2924:
				return 0x1B;
			case 0x2925:
				return 0x1B;
			case 0x2926:
				return 0x1B;
			case 0x2927:
				return 0x26;
			case 0x2928:
				return 0x26;
			case 0x2929:
				return 0x26;
			case 0x292A:
				return 0x26;
			case 0x292B:
				return 0x2A;
			case 0x292C:
				return 0x2A;
			case 0x292D:
				return 0x2B;
			case 0x292E:
				return 0x2B;
			case 0x292F:
				return 0x2B;
			case 0x2930:
				return 0x2A;
			case 0x2931:
				return 0x2B;
			case 0x2932:
				return 0x2B;
			case 0x2933:
				return 0x23;
			case 0x2934:
				return 0x2F;
			case 0x2935:
				return 0x31;
			case 0x2936:
				return 0x30;
			case 0x2937:
				return 0x31;
			case 0x2938:
				return 0x1F;
			case 0x2939:
				return 0x22;
			case 0x293A:
				return 0x1C;
			case 0x293B:
				return 0x1F;
			case 0x293C:
				return 0x23;
			case 0x293D:
				return 0x26;
			case 0x293E:
				return 0x29;
			case 0x293F:
				return 0x2C;
			case 0x2940:
				return 0x22;
			case 0x2941:
				return 0x1E;
			case 0x2942:
				return 0x2D;
			case 0x2943:
				return 0x2D;
			case 0x2944:
				return 0x2D;
			case 0x2945:
				return 0x21;
			case 0x2946:
				return 0x20;
			case 0x2947:
				return 0x1B;
			case 0x2948:
				return 0x26;
			case 0x2949:
				return 0x2B;
			case 0x294A:
				return 0x25;
			case 0x294B:
				return 0x25;
			case 0x294C:
				return 0x25;
			case 0x294D:
				return 0x25;
			case 0x294E:
				return 0x23;
			case 0x294F:
				return 0x26;
			case 0x2950:
				return 0x27;
			case 0x2951:
				return 0x24;
			case 0x2952:
				return 0x26;
			case 0x2953:
				return 0x27;
			case 0x2954:
				return 0x27;
			case 0x2955:
				return 0x29;
			case 0x2956:
				return 0x28;
			case 0x2957:
				return 0x29;
			case 0x2958:
				return 0x26;
			case 0x2959:
				return 0x28;
			case 0x295A:
				return 0x28;
			case 0x295B:
				return 0x29;
			case 0x295C:
				return 0x29;
			case 0x295D:
				return 0x2B;
			case 0x295E:
				return 0x2A;
			case 0x295F:
				return 0x2B;
			case 0x2960:
				return 0x28;
			case 0x2961:
				return 0x2A;
			case 0x2962:
				return 0x46;
			case 0x2963:
				return 0x46;
			case 0x2964:
				return 0x48;
			case 0x2965:
				return 0x4A;
			case 0x2966:
				return 0x45;
			case 0x2967:
				return 0x49;
			case 0x2968:
				return 0x45;
			case 0x2969:
				return 0x49;
			case 0x296A:
				return 0x2F;
			case 0x296B:
				return 0x31;
			case 0x296C:
				return 0x30;
			case 0x296D:
				return 0x32;
			case 0x296E:
				return 0x48;
			case 0x296F:
				return 0x48;
			case 0x2970:
				return 0x25;
			case 0x2971:
				return 0x23;
			case 0x2972:
				return 0x26;
			case 0x2973:
				return 0x25;
			case 0x2974:
				return 0x26;
			case 0x2975:
				return 0x27;
			case 0x2976:
				return 0x20;
			case 0x2977:
				return 0x22;
			case 0x2978:
				return 0x24;
			case 0x2979:
				return 0x1E;
			case 0x297A:
				return 0x1F;
			case 0x297B:
				return 0x1F;
			case 0x297C:
				return 0xF;
			case 0x297D:
				return 0x10;
			case 0x297E:
				return 0xD;
			case 0x297F:
				return 0xF;
			case 0x2980:
				return 0x1E;
			case 0x2981:
				return 0x10;
			case 0x2982:
				return 0x16;
			case 0x2983:
				return 0x19;
			case 0x2984:
				return 0x1A;
			case 0x2985:
				return 0x17;
			case 0x2986:
				return 0x18;
			case 0x2987:
				return 0x1E;
			case 0x2988:
				return 0x1F;
			case 0x2989:
				return 0x20;
			case 0x298A:
				return 0x21;
			case 0x298B:
				return 0x22;
			case 0x298C:
				return 0x23;
			case 0x298D:
				return 0x2C;
			case 0x298E:
				return 0x30;
			case 0x298F:
				return 0x2F;
			case 0x2990:
				return 0x2D;
			case 0x2991:
				return 0x1C;
			case 0x2992:
				return 0x1D;
			case 0x2993:
				return 0x1B;
			case 0x2994:
				return 0x1F;
			case 0x2995:
				return 0x25;
			case 0x2996:
				return 0x23;
			case 0x2997:
				return 0x22;
			case 0x2998:
				return 0x23;
			case 0x2999:
				return 0xD;
			case 0x299A:
				return 0x15;
			case 0x299B:
				return 0x1C;
			case 0x299C:
				return 0x20;
			case 0x299D:
				return 0x1E;
			case 0x299E:
				return 0x14;
			case 0x299F:
				return 0xC;
			case 0x29A0:
				return 0x1D;
			case 0x29A1:
				return 0x1B;
			case 0x29A2:
				return 0xD;
			case 0x29A3:
				return 0xF;
			case 0x29A4:
				return 0x14;
			case 0x29A5:
				return 0x1D;
			case 0x29A6:
				return 0x19;
			case 0x29A7:
				return 0x1B;
			case 0x29A8:
				return 0x43;
			case 0x29A9:
				return 0x42;
			case 0x29AA:
				return 0x45;
			case 0x29AB:
				return 0x44;
			case 0x29AC:
				return 0x43;
			case 0x29AD:
				return 0x42;
			case 0x29AE:
				return 0x45;
			case 0x29AF:
				return 0x44;
			case 0x29B0:
				return 0x13;
			case 0x29B1:
				return 0x17;
			case 0x29B2:
				return 0x22;
			case 0x29B3:
				return 0x21;
			case 0x29B4:
				return 0x20;
			case 0x29B5:
				return 0x1B;
			case 0x29B6:
				return 0x15;
			case 0x29B7:
				return 0x11;
			case 0x29B8:
				return 0x18;
			case 0x29B9:
				return 0x16;
			case 0x29BA:
				return 0x46;
			case 0x29BB:
				return 0x1B;
			case 0x29BC:
				return 0x2C;
			case 0x29BD:
				return 0x18;
			case 0x29BE:
				return 0x15;
			case 0x29BF:
				return 0xF;
			case 0x29C0:
				return 0x12;
			case 0x29C1:
				return 0x15;
			case 0x29C2:
				return 0x26;
			case 0x29C3:
				return 0x30;
			case 0x29C4:
				return 0x1E;
			case 0x29C5:
				return 0x1F;
			case 0x29C6:
				return 0x11;
			case 0x29C7:
				return 0x15;
			case 0x29C8:
				return 0xF;
			case 0x29C9:
				return 0x13;
			case 0x29CA:
				return 0x18;
			case 0x29CB:
				return 0x17;
			case 0x29CC:
				return 0xE;
			case 0x29CD:
				return 0x1F;
			case 0x29CE:
				return 0x23;
			case 0x29CF:
				return 0x22;
			case 0x29D0:
				return 0x23;
			case 0x29D1:
				return 0x1C;
			case 0x29D2:
				return 0x1D;
			case 0x29D3:
				return 0xD;
			case 0x29D4:
				return 0x1B;
			case 0x29D5:
				return 0x1C;
			case 0x29D6:
				return 0x10;
			case 0x29D7:
				return 0x10;
			case 0x29D8:
				return 0x12;
			case 0x29D9:
				return 0x13;
			case 0x29DA:
				return 0x19;
			case 0x29DB:
				return 0x1A;
			case 0x29DC:
				return 0x14;
			case 0x29DD:
				return 0x12;
			case 0x29DE:
				return 0x23;
			case 0x29DF:
				return 0x16;
			case 0x29E0:
				return 0x1E;
			case 0x29E1:
				return 0xD;
			case 0x29E2:
				return 0x10;
			case 0x29E3:
				return 0x21;
			case 0x29E4:
				return 0x32;
			case 0x29E5:
				return 0x22;
			case 0x29E6:
				return 0xD;
			case 0x29E7:
				return 0xE;
			case 0x29E8:
				return 0x2C;
			case 0x29E9:
				return 0x2D;
			case 0x29EA:
				return 0x1E;
			case 0x29EB:
				return 0xE;
			case 0x29EC:
				return 0x1D;
			case 0x29ED:
				return 0x1D;
			case 0x29EE:
				return 0x1A;
			case 0x29EF:
				return 0x1A;
			case 0x29F0:
				return 0x1B;
			case 0x29F1:
				return 0x1B;
			case 0x29F2:
				return 0x1A;
			case 0x29F3:
				return 0x1A;
			case 0x29F4:
				return 0xD;
			case 0x29F5:
				return 0x19;
			case 0x29F6:
				return 0x15;
			case 0x29F7:
				return 0x27;
			case 0x29F8:
				return 0xC;
			case 0x29F9:
				return 0x14;
			case 0x29FA:
				return 0xC;
			case 0x29FB:
				return 0xC;
			case 0x29FC:
				return 0x23;
			case 0x29FD:
				return 0x24;
			case 0x29FE:
				return 0x5;
			case 0x29FF:
				return 0x5;
			case 0x2A00:
				return 0x1B;
			case 0x2A01:
				return 0x1C;
			case 0x2A02:
				return 0x1D;
			case 0x2A03:
				return 0x1E;
			case 0x2A04:
				return 0x1F;
			case 0x2A05:
				return 0x23;
			case 0x2A06:
				return 0x1C;
			case 0x2A07:
				return 0x19;
			case 0x2A08:
				return 0x18;
			case 0x2A09:
				return 0x15;
			case 0x2A0A:
				return 0xF;
			case 0x2A0B:
				return 0x18;
			case 0x2A0C:
				return 0x1C;
			case 0x2A0D:
				return 0x15;
			case 0x2A0E:
				return 0x1C;
			case 0x2A0F:
				return 0x1C;
			case 0x2A10:
				return 0x15;
			case 0x2A11:
				return 0x1A;
			case 0x2A12:
				return 0x33;
			case 0x2A13:
				return 0x34;
			case 0x2A14:
				return 0x28;
			case 0x2A15:
				return 0x21;
			case 0x2A16:
				return 0x1D;
			case 0x2A17:
				return 0x28;
			case 0x2A18:
				return 0x19;
			case 0x2A19:
				return 0x1B;
			case 0x2A1A:
				return 0x14;
			case 0x2A1B:
				return 0x16;
			case 0x2A1C:
				return 0x17;
			case 0x2A1D:
				return 0x5;
			case 0x2A1E:
				return 0x1D;
			case 0x2A1F:
				return 0x1E;
			case 0x2A20:
				return 0x19;
			case 0x2A21:
				return 0x1D;
			case 0x2A22:
				return 0x22;
			case 0x2A23:
				return 0x27;
			case 0x2A24:
				return 0x1B;
			case 0x2A25:
				return 0x19;
			case 0x2A26:
				return 0x1B;
			case 0x2A27:
				return 0x1D;
			case 0x2A28:
				return 0x1E;
			case 0x2A29:
				return 0x1C;
			case 0x2A2A:
				return 0x1A;
			case 0x2A2B:
				return 0x1D;
			case 0x2A2C:
				return 0x1C;
			case 0x2A2D:
				return 0x1E;
			case 0x2A2E:
				return 0x1F;
			case 0x2A2F:
				return 0x18;
			case 0x2A30:
				return 0x23;
			case 0x2A31:
				return 0x22;
			case 0x2A32:
				return 0x26;
			case 0x2A33:
				return 0xE;
			case 0x2A34:
				return 0x28;
			case 0x2A35:
				return 0x29;
			case 0x2A36:
				return 0x33;
			case 0x2A37:
				return 0x25;
			case 0x2A38:
				return 0x16;
			case 0x2A39:
				return 0x16;
			case 0x2A3A:
				return 0x17;
			case 0x2A3B:
				return 0x20;
			case 0x2A3C:
				return 0x11;
			case 0x2A3D:
				return 0x1B;
			case 0x2A3E:
				return 0x22;
			case 0x2A3F:
				return 0x1A;
			case 0x2A40:
				return 0x16;
			case 0x2A41:
				return 0x16;
			case 0x2A42:
				return 0x13;
			case 0x2A43:
				return 0x1A;
			case 0x2A44:
				return 0x1E;
			case 0x2A45:
				return 0x16;
			case 0x2A46:
				return 0x19;
			case 0x2A47:
				return 0x19;
			case 0x2A48:
				return 0x23;
			case 0x2A49:
				return 0x23;
			case 0x2A4A:
				return 0x23;
			case 0x2A4B:
				return 0x31;
			case 0x2A4C:
				return 0x19;
			case 0x2A4D:
				return 0x20;
			case 0x2A4E:
				return 0x1B;
			case 0x2A4F:
				return 0x14;
			case 0x2A50:
				return 0x2B;
			case 0x2A51:
				return 0x1B;
			case 0x2A52:
				return 0x1A;
			case 0x2A53:
				return 0x13;
			case 0x2A54:
				return 0x12;
			case 0x2A55:
				return 0x1D;
			case 0x2A56:
				return 0x1C;
			case 0x2A57:
				return 0x11;
			case 0x2A58:
				return 0x12;
			case 0x2A59:
				return 0x23;
			case 0x2A5A:
				return 0x1D;
			case 0x2A5B:
				return 0x1C;
			case 0x2A5C:
				return 0x21;
			case 0x2A5D:
				return 0x20;
			case 0x2A5E:
				return 0x20;
			case 0x2A5F:
				return 0x1A;
			case 0x2A60:
				return 0x21;
			case 0x2A61:
				return 0x18;
			case 0x2A62:
				return 0x1F;
			case 0x2A63:
				return 0x20;
			case 0x2A64:
				return 0x22;
			case 0x2A65:
				return 0x21;
			case 0x2A66:
				return 0x1B;
			case 0x2A67:
				return 0x19;
			case 0x2A68:
				return 0x32;
			case 0x2A69:
				return 0x32;
			case 0x2A6A:
				return 0x1E;
			case 0x2A6B:
				return 0x20;
			case 0x2A6C:
				return 0x16;
			case 0x2A6D:
				return 0x19;
			case 0x2A6E:
				return 0x15;
			case 0x2A6F:
				return 0x27;
			case 0x2A70:
				return 0x20;
			case 0x2A71:
				return 0x1C;
			case 0x2A72:
				return 0x1C;
			case 0x2A73:
				return 0x21;
			case 0x2A74:
				return 0x13;
			case 0x2A75:
				return 0x1D;
			case 0x2A76:
				return 0x1F;
			case 0x2A77:
				return 0x33;
			case 0x2A78:
				return 0x20;
			case 0x2A79:
				return 0x1D;
			case 0x2A7A:
				return 0x20;
			case 0x2A7B:
				return 0x23;
			case 0x2A7C:
				return 0x26;
			case 0x2A7D:
				return 0x1E;
			case 0x2A7E:
				return 0x21;
			case 0x2A7F:
				return 0x2E;
			case 0x2A80:
				return 0x31;
			case 0x2A81:
				return 0x2D;
			case 0x2A82:
				return 0x30;
			case 0x2A83:
				return 0x33;
			case 0x2A84:
				return 0x35;
			case 0x2A85:
				return 0x19;
			case 0x2A86:
				return 0x1C;
			case 0x2A87:
				return 0x27;
			case 0x2A88:
				return 0x2A;
			case 0x2A89:
				return 0x1E;
			case 0x2A8A:
				return 0x21;
			case 0x2A8B:
				return 0x35;
			case 0x2A8C:
				return 0x35;
			case 0x2A8D:
				return 0x21;
			case 0x2A8E:
				return 0x24;
			case 0x2A8F:
				return 0x2B;
			case 0x2A90:
				return 0x2B;
			case 0x2A91:
				return 0x35;
			case 0x2A92:
				return 0x35;
			case 0x2A93:
				return 0x45;
			case 0x2A94:
				return 0x45;
			case 0x2A95:
				return 0x1E;
			case 0x2A96:
				return 0x21;
			case 0x2A97:
				return 0x2E;
			case 0x2A98:
				return 0x31;
			case 0x2A99:
				return 0x22;
			case 0x2A9A:
				return 0x25;
			case 0x2A9B:
				return 0x2A;
			case 0x2A9C:
				return 0x2D;
			case 0x2A9D:
				return 0x15;
			case 0x2A9E:
				return 0x18;
			case 0x2A9F:
				return 0x2A;
			case 0x2AA0:
				return 0x2D;
			case 0x2AA1:
				return 0x18;
			case 0x2AA2:
				return 0x1B;
			case 0x2AA3:
				return 0x26;
			case 0x2AA4:
				return 0x23;
			case 0x2AA5:
				return 0x1E;
			case 0x2AA6:
				return 0x1A;
			case 0x2AA7:
				return 0x1D;
			case 0x2AA8:
				return 0x2E;
			case 0x2AA9:
				return 0x31;
			case 0x2AAA:
				return 0xD;
			case 0x2AAB:
				return 0xC;
			case 0x2AAC:
				return 0x19;
			case 0x2AAD:
				return 0x18;
			case 0x2AAE:
				return 0x1D;
			case 0x2AAF:
				return 0x27;
			case 0x2AB0:
				return 0x27;
			case 0x2AB1:
				return 0x28;
			case 0x2AB2:
				return 0x28;
			case 0x2AB3:
				return 0x1B;
			case 0x2AB4:
				return 0x1B;
			case 0x2AB5:
				return 0x1C;
			case 0x2AB6:
				return 0x1C;
			case 0x2AB7:
				return 0x1F;
			case 0x2AB8:
				return 0x1F;
			case 0x2AB9:
				return 0x23;
			case 0x2ABA:
				return 0x23;
			case 0x2ABB:
				return 0x10;
			case 0x2ABC:
				return 0x10;
			case 0x2ABD:
				return 0x10;
			case 0x2ABE:
				return 0x12;
			case 0x2ABF:
				return 0x1C;
			case 0x2AC0:
				return 0x1E;
			case 0x2AC1:
				return 0x26;
			case 0x2AC2:
				return 0x28;
			case 0x2AC3:
				return 0x25;
			case 0x2AC4:
				return 0x27;
			case 0x2AC5:
				return 0x1C;
			case 0x2AC6:
				return 0x1E;
			case 0x2AC7:
				return 0x1F;
			case 0x2AC8:
				return 0x21;
			case 0x2AC9:
				return 0x20;
			case 0x2ACA:
				return 0x22;
			case 0x2ACB:
				return 0x1D;
			case 0x2ACC:
				return 0x1F;
			case 0x2ACD:
				return 0x1E;
			case 0x2ACE:
				return 0x1F;
			case 0x2ACF:
				return 0xE;
			case 0x2AD0:
				return 0x10;
			case 0x2AD1:
				return 0x1A;
			case 0x2AD2:
				return 0x1C;
			case 0x2AD3:
				return 0x16;
			case 0x2AD4:
				return 0x16;
			case 0x2AD5:
				return 0x14;
			case 0x2AD6:
				return 0x18;
			case 0x2AD7:
				return 0x17;
			case 0x2AD8:
				return 0x2F;
			case 0x2AD9:
				return 0x1D;
			case 0x2ADA:
				return 0x17;
			case 0x2ADB:
				return 0x19;
			case 0x2ADC:
				return 0x8;
			case 0x2ADD:
				return 0xB;
			case 0x2ADE:
				return 0x10;
			case 0x2ADF:
				return 0x10;
			case 0x2AE0:
				return 0xE;
			case 0x2AE1:
				return 0x15;
			case 0x2AE2:
				return 0x24;
			case 0x2AE3:
				return 0x23;
			case 0x2AE4:
				return 0x23;
			case 0x2AE5:
				return 0x2A;
			case 0x2AE6:
				return 0x2E;
			case 0x2AE7:
				return 0x1D;
			case 0x2AE8:
				return 0x1C;
			case 0x2AE9:
				return 0x24;
			case 0x2AEA:
				return 0x11;
			case 0x2AEB:
				return 0xF;
			case 0x2AEC:
				return 0x17;
			case 0x2AED:
				return 0x20;
			case 0x2AEE:
				return 0x2D;
			case 0x2AEF:
				return 0x20;
			case 0x2AF0:
				return 0x20;
			case 0x2AF1:
				return 0x1C;
			case 0x2AF2:
				return 0x20;
			case 0x2AF3:
				return 0x1D;
			case 0x2AF4:
				return 0x24;
			case 0x2AF5:
				return 0x2B;
			case 0x2AF6:
				return 0x16;
			case 0x2AF7:
				return 0x18;
			case 0x2AF8:
				return 0x1B;
			case 0x2AF9:
				return 0x2A;
			case 0x2AFA:
				return 0x2D;
			case 0x2AFB:
				return 0x1F;
			case 0x2AFC:
				return 0x23;
			case 0x2AFD:
				return 0x18;
			case 0x2AFE:
				return 0x13;
			case 0x2AFF:
				return 0x19;
			case 0x2B00:
				return 0x17;
			case 0x2B01:
				return 0x17;
			case 0x2B02:
				return 0x17;
			case 0x2B03:
				return 0x17;
			case 0x2B04:
				return 0x17;
			case 0x2B05:
				return 0x16;
			case 0x2B06:
				return 0x14;
			case 0x2B07:
				return 0x16;
			case 0x2B08:
				return 0x17;
			case 0x2B09:
				return 0x17;
			case 0x2B0A:
				return 0x17;
			case 0x2B0B:
				return 0x17;
			case 0x2B0C:
				return 0x17;
			case 0x2B0D:
				return 0x14;
			case 0x2B0E:
				return 0x24;
			case 0x2B0F:
				return 0x22;
			case 0x2B10:
				return 0x23;
			case 0x2B11:
				return 0x21;
			case 0x2B12:
				return 0x1B;
			case 0x2B13:
				return 0x1E;
			case 0x2B14:
				return 0x2C;
			case 0x2B15:
				return 0x2B;
			case 0x2B16:
				return 0x1D;
			case 0x2B17:
				return 0x1E;
			case 0x2B18:
				return 0x1C;
			case 0x2B19:
				return 0x1F;
			case 0x2B1A:
				return 0xE;
			case 0x2B1B:
				return 0x13;
			case 0x2B1C:
				return 0x13;
			case 0x2B1D:
				return 0x18;
			case 0x2B1E:
				return 0x18;
			case 0x2B1F:
				return 0xF;
			case 0x2B20:
				return 0xF;
			case 0x2B21:
				return 0xE;
			case 0x2B22:
				return 0xE;
			case 0x2B23:
				return 0x19;
			case 0x2B24:
				return 0x13;
			case 0x2B25:
				return 0x15;
			case 0x2B26:
				return 0x15;
			case 0x2B27:
				return 0x15;
			case 0x2B28:
				return 0x15;
			case 0x2B29:
				return 0x14;
			case 0x2B2A:
				return 0x14;
			case 0x2B2B:
				return 0x14;
			case 0x2B2C:
				return 0x19;
			case 0x2B2D:
				return 0x19;
			case 0x2B2E:
				return 0x17;
			case 0x2B2F:
				return 0x17;
			case 0x2B30:
				return 0x1D;
			case 0x2B31:
				return 0x17;
			case 0x2B32:
				return 0x1D;
			case 0x2B33:
				return 0x1E;
			case 0x2B34:
				return 0x30;
			case 0x2B35:
				return 0x37;
			case 0x2B36:
				return 0x24;
			case 0x2B37:
				return 0x27;
			case 0x2B38:
				return 0x21;
			case 0x2B39:
				return 0x2F;
			case 0x2B3A:
				return 0x36;
			case 0x2B3B:
				return 0x25;
			case 0x2B3C:
				return 0x3A;
			case 0x2B3D:
				return 0x41;
			case 0x2B3E:
				return 0x1A;
			case 0x2B3F:
				return 0x22;
			case 0x2B40:
				return 0x22;
			case 0x2B41:
				return 0x2D;
			case 0x2B42:
				return 0x2E;
			case 0x2B43:
				return 0x26;
			case 0x2B44:
				return 0x22;
			case 0x2B45:
				return 0x1A;
			case 0x2B46:
				return 0x1B;
			case 0x2B47:
				return 0x2E;
			case 0x2B48:
				return 0x2F;
			case 0x2B49:
				return 0x25;
			case 0x2B4A:
				return 0x26;
			case 0x2B4B:
				return 0x2D;
			case 0x2B4C:
				return 0x2E;
			case 0x2B4D:
				return 0x27;
			case 0x2B4E:
				return 0x1A;
			case 0x2B4F:
				return 0x1E;
			case 0x2B50:
				return 0x12;
			case 0x2B51:
				return 0x11;
			case 0x2B52:
				return 0x11;
			case 0x2B53:
				return 0x1E;
			case 0x2B54:
				return 0x1E;
			case 0x2B55:
				return 0x13;
			case 0x2B56:
				return 0x1C;
			case 0x2B57:
				return 0x20;
			case 0x2B58:
				return 0xD;
			case 0x2B59:
				return 0x16;
			case 0x2B5A:
				return 0x25;
			case 0x2B5B:
				return 0x29;
			case 0x2B5C:
				return 0x29;
			case 0x2B5D:
				return 0x2D;
			case 0x2B5E:
				return 0x2E;
			case 0x2B5F:
				return 0x34;
			case 0x2B60:
				return 0x20;
			case 0x2B61:
				return 0x1E;
			case 0x2B62:
				return 0x21;
			case 0x2B63:
				return 0x20;
			case 0x2B64:
				return 0x21;
			case 0x2B65:
				return 0x1E;
			case 0x2B66:
				return 0x21;
			case 0x2B67:
				return 0x21;
			case 0x2B68:
				return 0x21;
			case 0x2B69:
				return 0x21;
			case 0x2B6A:
				return 0x27;
			case 0x2B6B:
				return 0x25;
			case 0x2B6C:
				return 0x28;
			case 0x2B6D:
				return 0x27;
			case 0x2B6E:
				return 0x2C;
			case 0x2B6F:
				return 0x30;
			case 0x2B70:
				return 0x27;
			case 0x2B71:
				return 0x25;
			case 0x2B72:
				return 0x28;
			case 0x2B73:
				return 0x27;
			case 0x2B76:
				return 0x28;
			case 0x2B77:
				return 0x28;
			case 0x2B78:
				return 0x28;
			case 0x2B79:
				return 0x28;
			case 0x2B7A:
				return 0x3E;
			case 0x2B7B:
				return 0x3C;
			case 0x2B7C:
				return 0x3F;
			case 0x2B7D:
				return 0x3E;
			case 0x2B7E:
				return 0x13;
			case 0x2B7F:
				return 0x11;
			case 0x2B80:
				return 0x46;
			case 0x2B81:
				return 0x4B;
			case 0x2B82:
				return 0x46;
			case 0x2B83:
				return 0x4B;
			case 0x2B84:
				return 0x28;
			case 0x2B85:
				return 0x26;
			case 0x2B86:
				return 0x29;
			case 0x2B87:
				return 0x28;
			case 0x2B88:
				return 0x24;
			case 0x2B89:
				return 0x22;
			case 0x2B8A:
				return 0x25;
			case 0x2B8B:
				return 0x24;
			case 0x2B8C:
				return 0x33;
			case 0x2B8D:
				return 0x34;
			case 0x2B8E:
				return 0x32;
			case 0x2B8F:
				return 0x31;
			case 0x2B90:
				return 0xC;
			case 0x2B91:
				return 0xD;
			case 0x2B92:
				return 0xD;
			case 0x2B93:
				return 0xE;
			case 0x2B94:
				return 0x2A;
			case 0x2B95:
				return 0x17;
			case 0x2B97:
				return 0x1E;
			case 0x2B98:
				return 0x34;
			case 0x2B99:
				return 0x34;
			case 0x2B9A:
				return 0x35;
			case 0x2B9B:
				return 0x35;
			case 0x2B9C:
				return 0x26;
			case 0x2B9D:
				return 0x24;
			case 0x2B9E:
				return 0x27;
			case 0x2B9F:
				return 0x26;
			case 0x2BA0:
				return 0x38;
			case 0x2BA1:
				return 0x39;
			case 0x2BA2:
				return 0x36;
			case 0x2BA3:
				return 0x37;
			case 0x2BA4:
				return 0x36;
			case 0x2BA5:
				return 0x37;
			case 0x2BA6:
				return 0x38;
			case 0x2BA7:
				return 0x39;
			case 0x2BA8:
				return 0x2B;
			case 0x2BA9:
				return 0x2C;
			case 0x2BAA:
				return 0x29;
			case 0x2BAB:
				return 0x2A;
			case 0x2BAC:
				return 0x29;
			case 0x2BAD:
				return 0x2A;
			case 0x2BAE:
				return 0x2B;
			case 0x2BAF:
				return 0x2C;
			case 0x2BB0:
				return 0x17;
			case 0x2BB1:
				return 0x18;
			case 0x2BB2:
				return 0x15;
			case 0x2BB3:
				return 0x16;
			case 0x2BB4:
				return 0x15;
			case 0x2BB5:
				return 0x16;
			case 0x2BB6:
				return 0x17;
			case 0x2BB7:
				return 0x18;
			case 0x2BB8:
				return 0x31;
			case 0x2BB9:
				return 0x20;
			case 0x2BBA:
				return 0x1A;
			case 0x2BBB:
				return 0x24;
			case 0x2BBC:
				return 0x1A;
			case 0x2BBD:
				return 0x18;
			case 0x2BBE:
				return 0xA;
			case 0x2BBF:
				return 0xF;
			case 0x2BC0:
				return 0x15;
			case 0x2BC1:
				return 0x16;
			case 0x2BC2:
				return 0x16;
			case 0x2BC3:
				return 0x19;
			case 0x2BC4:
				return 0xE;
			case 0x2BC5:
				return 0x2A;
			case 0x2BC6:
				return 0x2C;
			case 0x2BC7:
				return 0x2C;
			case 0x2BC8:
				return 0x2D;
			case 0x2BC9:
				return 0x11;
			case 0x2BCA:
				return 0x16;
			case 0x2BCB:
				return 0x19;
			case 0x2BCC:
				return 0x1E;
			case 0x2BCD:
				return 0x26;
			case 0x2BCE:
				return 0x18;
			case 0x2BCF:
				return 0x20;
			case 0x2BD0:
				return 0x1A;
			case 0x2BD1:
				return 0x11;
			case 0x2BD2:
				return 0xB;
			case 0x2BD3:
				return 0xF;
			case 0x2BD4:
				return 0x11;
			case 0x2BD5:
				return 0x10;
			case 0x2BD6:
				return 0x10;
			case 0x2BD7:
				return 0xB;
			case 0x2BD8:
				return 0xB;
			case 0x2BD9:
				return 0x8;
			case 0x2BDA:
				return 0x7;
			case 0x2BDB:
				return 0x7;
			case 0x2BDC:
				return 0x7;
			case 0x2BDD:
				return 0x12;
			case 0x2BDE:
				return 0x17;
			case 0x2BDF:
				return 0x15;
			case 0x2BE0:
				return 0x7;
			case 0x2BE1:
				return 0x6;
			case 0x2BE2:
				return 0x5;
			case 0x2BE3:
				return 0x7;
			case 0x2BE4:
				return 0x8;
			case 0x2BE5:
				return 0x8;
			case 0x2BE6:
				return 0x9;
			case 0x2BE7:
				return 0x9;
			case 0x2BE8:
				return 0x15;
			case 0x2BE9:
				return 0x16;
			case 0x2BEA:
				return 0x1A;
			case 0x2BEB:
				return 0x1B;
			case 0x2BEC:
				return 0x34;
			case 0x2BED:
				return 0x32;
			case 0x2BEE:
				return 0x35;
			case 0x2BEF:
				return 0x34;
			case 0x2BF0:
				return 0xE;
			case 0x2BF1:
				return 0xE;
			case 0x2BF2:
				return 0x6;
			case 0x2BF3:
				return 0x26;
			case 0x2BF4:
				return 0x23;
			case 0x2BF5:
				return 0x25;
			case 0x2BF6:
				return 0x25;
			case 0x2BF7:
				return 0x25;
			case 0x2BF8:
				return 0x26;
			case 0x2BF9:
				return 0x20;
			case 0x2BFA:
				return 0xE;
			case 0x2BFB:
				return 0x11;
			case 0x2BFC:
				return 0xF;
			case 0x2BFD:
				return 0xE;
			case 0x2BFE:
				return 0x15;
			case 0x2BFF:
				return 0x1B;
			case 0x2C00:
				return 0x1E;
			case 0x2C01:
				return 0x1F;
			case 0x2C02:
				return 0x1F;
			case 0x2C03:
				return 0x22;
			case 0x2C04:
				return 0x20;
			case 0x2C05:
				return 0x20;
			case 0x2C06:
				return 0x22;
			case 0x2C07:
				return 0x20;
			case 0x2C08:
				return 0x21;
			case 0x2C09:
				return 0x1F;
			case 0x2C0A:
				return 0x27;
			case 0x2C0B:
				return 0x1C;
			case 0x2C0C:
				return 0x21;
			case 0x2C0D:
				return 0x1F;
			case 0x2C0E:
				return 0x22;
			case 0x2C0F:
				return 0x22;
			case 0x2C10:
				return 0x20;
			case 0x2C11:
				return 0x1E;
			case 0x2C12:
				return 0x21;
			case 0x2C13:
				return 0x20;
			case 0x2C14:
				return 0x20;
			case 0x2C15:
				return 0x21;
			case 0x2C16:
				return 0x1E;
			case 0x2C17:
				return 0x20;
			case 0x2C18:
				return 0x1F;
			case 0x2C19:
				return 0x1E;
			case 0x2C1A:
				return 0x1D;
			case 0x2C1B:
				return 0x1F;
			case 0x2C1C:
				return 0x1E;
			case 0x2C1D:
				return 0x21;
			case 0x2C1E:
				return 0x1E;
			case 0x2C1F:
				return 0x1F;
			case 0x2C20:
				return 0x1F;
			case 0x2C21:
				return 0x1F;
			case 0x2C22:
				return 0x25;
			case 0x2C23:
				return 0x1D;
			case 0x2C24:
				return 0x24;
			case 0x2C25:
				return 0x2E;
			case 0x2C26:
				return 0x1D;
			case 0x2C27:
				return 0x2C;
			case 0x2C28:
				return 0x22;
			case 0x2C29:
				return 0x2A;
			case 0x2C2A:
				return 0x1F;
			case 0x2C2B:
				return 0x22;
			case 0x2C2C:
				return 0x22;
			case 0x2C2D:
				return 0x27;
			case 0x2C2E:
				return 0x2B;
			case 0x2C30:
				return 0x1C;
			case 0x2C31:
				return 0x1D;
			case 0x2C32:
				return 0x1D;
			case 0x2C33:
				return 0x20;
			case 0x2C34:
				return 0x1E;
			case 0x2C35:
				return 0x1E;
			case 0x2C36:
				return 0x20;
			case 0x2C37:
				return 0x1E;
			case 0x2C38:
				return 0x1F;
			case 0x2C39:
				return 0x1D;
			case 0x2C3A:
				return 0x25;
			case 0x2C3B:
				return 0x1A;
			case 0x2C3C:
				return 0x1F;
			case 0x2C3D:
				return 0x1D;
			case 0x2C3E:
				return 0x20;
			case 0x2C3F:
				return 0x20;
			case 0x2C40:
				return 0x1E;
			case 0x2C41:
				return 0x1C;
			case 0x2C42:
				return 0x1F;
			case 0x2C43:
				return 0x1E;
			case 0x2C44:
				return 0x1E;
			case 0x2C45:
				return 0x1F;
			case 0x2C46:
				return 0x1C;
			case 0x2C47:
				return 0x1E;
			case 0x2C48:
				return 0x1D;
			case 0x2C49:
				return 0x1C;
			case 0x2C4A:
				return 0x1B;
			case 0x2C4B:
				return 0x1D;
			case 0x2C4C:
				return 0x1C;
			case 0x2C4D:
				return 0x1F;
			case 0x2C4E:
				return 0x1C;
			case 0x2C4F:
				return 0x1D;
			case 0x2C50:
				return 0x1D;
			case 0x2C51:
				return 0x1D;
			case 0x2C52:
				return 0x23;
			case 0x2C53:
				return 0x1B;
			case 0x2C54:
				return 0x22;
			case 0x2C55:
				return 0x2C;
			case 0x2C56:
				return 0x1B;
			case 0x2C57:
				return 0x2A;
			case 0x2C58:
				return 0x20;
			case 0x2C59:
				return 0x28;
			case 0x2C5A:
				return 0x1D;
			case 0x2C5B:
				return 0x20;
			case 0x2C5C:
				return 0x20;
			case 0x2C5D:
				return 0x25;
			case 0x2C5E:
				return 0x29;
			case 0x2C60:
				return 0x27;
			case 0x2C61:
				return 0x25;
			case 0x2C62:
				return 0x29;
			case 0x2C63:
				return 0x23;
			case 0x2C64:
				return 0x21;
			case 0x2C65:
				return 0x21;
			case 0x2C66:
				return 0x2A;
			case 0x2C67:
				return 0x26;
			case 0x2C68:
				return 0x24;
			case 0x2C69:
				return 0x26;
			case 0x2C6A:
				return 0x24;
			case 0x2C6B:
				return 0x26;
			case 0x2C6C:
				return 0x24;
			case 0x2C6D:
				return 0x1B;
			case 0x2C6E:
				return 0x21;
			case 0x2C6F:
				return 0x1E;
			case 0x2C70:
				return 0x22;
			case 0x2C71:
				return 0x25;
			case 0x2C72:
				return 0x21;
			case 0x2C73:
				return 0x1F;
			case 0x2C74:
				return 0x1F;
			case 0x2C75:
				return 0x1C;
			case 0x2C76:
				return 0x1A;
			case 0x2C77:
				return 0x20;
			case 0x2C78:
				return 0x20;
			case 0x2C79:
				return 0x26;
			case 0x2C7A:
				return 0x2A;
			case 0x2C7B:
				return 0x24;
			case 0x2C7C:
				return 0x1F;
			case 0x2C7D:
				return 0x1A;
			case 0x2C7E:
				return 0x27;
			case 0x2C7F:
				return 0x27;
			case 0x2C80:
				return 0x1B;
			case 0x2C81:
				return 0x19;
			case 0x2C82:
				return 0x1B;
			case 0x2C83:
				return 0x19;
			case 0x2C84:
				return 0x1C;
			case 0x2C85:
				return 0x1A;
			case 0x2C86:
				return 0x1C;
			case 0x2C87:
				return 0x1A;
			case 0x2C88:
				return 0x1A;
			case 0x2C89:
				return 0x18;
			case 0x2C8A:
				return 0x1A;
			case 0x2C8B:
				return 0x18;
			case 0x2C8C:
				return 0x1B;
			case 0x2C8D:
				return 0x19;
			case 0x2C8E:
				return 0x1B;
			case 0x2C8F:
				return 0x19;
			case 0x2C90:
				return 0x1D;
			case 0x2C91:
				return 0x1B;
			case 0x2C92:
				return 0x1C;
			case 0x2C93:
				return 0x1A;
			case 0x2C94:
				return 0x1B;
			case 0x2C95:
				return 0x19;
			case 0x2C96:
				return 0x1C;
			case 0x2C97:
				return 0x1A;
			case 0x2C98:
				return 0x19;
			case 0x2C99:
				return 0x17;
			case 0x2C9A:
				return 0x19;
			case 0x2C9B:
				return 0x17;
			case 0x2C9C:
				return 0x1A;
			case 0x2C9D:
				return 0x18;
			case 0x2C9E:
				return 0x18;
			case 0x2C9F:
				return 0x16;
			case 0x2CA0:
				return 0x19;
			case 0x2CA1:
				return 0x17;
			case 0x2CA2:
				return 0x19;
			case 0x2CA3:
				return 0x17;
			case 0x2CA4:
				return 0x1B;
			case 0x2CA5:
				return 0x19;
			case 0x2CA6:
				return 0x1A;
			case 0x2CA7:
				return 0x18;
			case 0x2CA8:
				return 0x19;
			case 0x2CA9:
				return 0x17;
			case 0x2CAA:
				return 0x19;
			case 0x2CAB:
				return 0x17;
			case 0x2CAC:
				return 0x1A;
			case 0x2CAD:
				return 0x18;
			case 0x2CAE:
				return 0x1A;
			case 0x2CAF:
				return 0x18;
			case 0x2CB0:
				return 0x1A;
			case 0x2CB1:
				return 0x18;
			case 0x2CB2:
				return 0x25;
			case 0x2CB3:
				return 0x23;
			case 0x2CB4:
				return 0x25;
			case 0x2CB5:
				return 0x23;
			case 0x2CB6:
				return 0x28;
			case 0x2CB7:
				return 0x26;
			case 0x2CB8:
				return 0x25;
			case 0x2CB9:
				return 0x23;
			case 0x2CBA:
				return 0x23;
			case 0x2CBB:
				return 0x21;
			case 0x2CBC:
				return 0x27;
			case 0x2CBD:
				return 0x25;
			case 0x2CBE:
				return 0x25;
			case 0x2CBF:
				return 0x23;
			case 0x2CC0:
				return 0x1C;
			case 0x2CC1:
				return 0x1A;
			case 0x2CC2:
				return 0x23;
			case 0x2CC3:
				return 0x21;
			case 0x2CC4:
				return 0x26;
			case 0x2CC5:
				return 0x24;
			case 0x2CC6:
				return 0x25;
			case 0x2CC7:
				return 0x23;
			case 0x2CC8:
				return 0x24;
			case 0x2CC9:
				return 0x22;
			case 0x2CCA:
				return 0x25;
			case 0x2CCB:
				return 0x23;
			case 0x2CCC:
				return 0x26;
			case 0x2CCD:
				return 0x24;
			case 0x2CCE:
				return 0x24;
			case 0x2CCF:
				return 0x22;
			case 0x2CD0:
				return 0x22;
			case 0x2CD1:
				return 0x20;
			case 0x2CD2:
				return 0x25;
			case 0x2CD3:
				return 0x23;
			case 0x2CD4:
				return 0x25;
			case 0x2CD5:
				return 0x23;
			case 0x2CD6:
				return 0x28;
			case 0x2CD7:
				return 0x26;
			case 0x2CD8:
				return 0x25;
			case 0x2CD9:
				return 0x23;
			case 0x2CDA:
				return 0x27;
			case 0x2CDB:
				return 0x25;
			case 0x2CDC:
				return 0x27;
			case 0x2CDD:
				return 0x25;
			case 0x2CDE:
				return 0x25;
			case 0x2CDF:
				return 0x23;
			case 0x2CE0:
				return 0x25;
			case 0x2CE1:
				return 0x23;
			case 0x2CE2:
				return 0x25;
			case 0x2CE3:
				return 0x23;
			case 0x2CE4:
				return 0x12;
			case 0x2CE5:
				return 0x14;
			case 0x2CE6:
				return 0x14;
			case 0x2CE7:
				return 0x16;
			case 0x2CE8:
				return 0x15;
			case 0x2CE9:
				return 0x15;
			case 0x2CEA:
				return 0x19;
			case 0x2CEB:
				return 0x29;
			case 0x2CEC:
				return 0x27;
			case 0x2CED:
				return 0x2B;
			case 0x2CEE:
				return 0x29;
			case 0x2CEF:
				return 0x1A;
			case 0x2CF0:
				return 0x20;
			case 0x2CF1:
				return 0x20;
			case 0x2CF2:
				return 0x24;
			case 0x2CF3:
				return 0x22;
			case 0x2CF9:
				return 0x1C;
			case 0x2CFA:
				return 0x27;
			case 0x2CFB:
				return 0x29;
			case 0x2CFC:
				return 0x20;
			case 0x2CFD:
				return 0x19;
			case 0x2CFE:
				return 0x11;
			case 0x2CFF:
				return 0x1D;
			case 0x2D00:
				return 0x19;
			case 0x2D01:
				return 0x1A;
			case 0x2D02:
				return 0x1A;
			case 0x2D03:
				return 0x1A;
			case 0x2D04:
				return 0x19;
			case 0x2D05:
				return 0x1A;
			case 0x2D06:
				return 0x1A;
			case 0x2D07:
				return 0x1A;
			case 0x2D08:
				return 0x19;
			case 0x2D09:
				return 0x1A;
			case 0x2D0A:
				return 0x1A;
			case 0x2D0B:
				return 0x1A;
			case 0x2D0C:
				return 0x1A;
			case 0x2D0D:
				return 0x19;
			case 0x2D0E:
				return 0x1A;
			case 0x2D0F:
				return 0x1B;
			case 0x2D10:
				return 0x1A;
			case 0x2D11:
				return 0x1A;
			case 0x2D12:
				return 0x1A;
			case 0x2D13:
				return 0x19;
			case 0x2D14:
				return 0x1B;
			case 0x2D15:
				return 0x1B;
			case 0x2D16:
				return 0x1B;
			case 0x2D17:
				return 0x1A;
			case 0x2D18:
				return 0x1B;
			case 0x2D19:
				return 0x1B;
			case 0x2D1A:
				return 0x1A;
			case 0x2D1B:
				return 0x1A;
			case 0x2D1C:
				return 0x1A;
			case 0x2D1D:
				return 0x1B;
			case 0x2D1E:
				return 0x1A;
			case 0x2D1F:
				return 0x1B;
			case 0x2D20:
				return 0x1A;
			case 0x2D21:
				return 0x19;
			case 0x2D22:
				return 0x1A;
			case 0x2D23:
				return 0x19;
			case 0x2D24:
				return 0x1A;
			case 0x2D25:
				return 0x1A;
			case 0x2D27:
				return 0x19;
			case 0x2D2D:
				return 0x1A;
			case 0x2D30:
				return 0x13;
			case 0x2D31:
				return 0x14;
			case 0x2D32:
				return 0x15;
			case 0x2D33:
				return 0x14;
			case 0x2D34:
				return 0x16;
			case 0x2D35:
				return 0x23;
			case 0x2D36:
				return 0x14;
			case 0x2D37:
				return 0x14;
			case 0x2D38:
				return 0x15;
			case 0x2D39:
				return 0x15;
			case 0x2D3A:
				return 0x16;
			case 0x2D3B:
				return 0x14;
			case 0x2D3C:
				return 0x14;
			case 0x2D3D:
				return 0x14;
			case 0x2D3E:
				return 0x1B;
			case 0x2D3F:
				return 0x16;
			case 0x2D40:
				return 0x14;
			case 0x2D41:
				return 0x23;
			case 0x2D42:
				return 0x1B;
			case 0x2D43:
				return 0x15;
			case 0x2D44:
				return 0x14;
			case 0x2D45:
				return 0x15;
			case 0x2D46:
				return 0x1C;
			case 0x2D47:
				return 0x14;
			case 0x2D48:
				return 0x1B;
			case 0x2D49:
				return 0x13;
			case 0x2D4A:
				return 0x15;
			case 0x2D4B:
				return 0x1D;
			case 0x2D4C:
				return 0x1C;
			case 0x2D4D:
				return 0x14;
			case 0x2D4E:
				return 0x14;
			case 0x2D4F:
				return 0x14;
			case 0x2D50:
				return 0x1C;
			case 0x2D51:
				return 0x1C;
			case 0x2D52:
				return 0x14;
			case 0x2D53:
				return 0x13;
			case 0x2D54:
				return 0x14;
			case 0x2D55:
				return 0x15;
			case 0x2D56:
				return 0x15;
			case 0x2D57:
				return 0x1C;
			case 0x2D58:
				return 0x1A;
			case 0x2D59:
				return 0x14;
			case 0x2D5A:
				return 0x15;
			case 0x2D5B:
				return 0x15;
			case 0x2D5C:
				return 0x14;
			case 0x2D5D:
				return 0x15;
			case 0x2D5E:
				return 0x15;
			case 0x2D5F:
				return 0x15;
			case 0x2D60:
				return 0x14;
			case 0x2D61:
				return 0x14;
			case 0x2D62:
				return 0x14;
			case 0x2D63:
				return 0x14;
			case 0x2D64:
				return 0x1F;
			case 0x2D65:
				return 0x15;
			case 0x2D66:
				return 0x13;
			case 0x2D67:
				return 0x13;
			case 0x2D6F:
				return 0x2C;
			case 0x2D70:
				return 0x18;
			case 0x2D7F:
				return 0x1A;
			case 0x2D80:
				return 0x16;
			case 0x2D81:
				return 0x16;
			case 0x2D82:
				return 0x16;
			case 0x2D83:
				return 0x16;
			case 0x2D84:
				return 0x17;
			case 0x2D85:
				return 0x16;
			case 0x2D86:
				return 0x16;
			case 0x2D87:
				return 0x16;
			case 0x2D88:
				return 0x16;
			case 0x2D89:
				return 0x17;
			case 0x2D8A:
				return 0x1D;
			case 0x2D8B:
				return 0x16;
			case 0x2D8C:
				return 0x16;
			case 0x2D8D:
				return 0x17;
			case 0x2D8E:
				return 0x16;
			case 0x2D8F:
				return 0x17;
			case 0x2D90:
				return 0x17;
			case 0x2D91:
				return 0x17;
			case 0x2D92:
				return 0x16;
			case 0x2D93:
				return 0x17;
			case 0x2D94:
				return 0x17;
			case 0x2D95:
				return 0x18;
			case 0x2D96:
				return 0x17;
			case 0x2DA0:
				return 0x16;
			case 0x2DA1:
				return 0x16;
			case 0x2DA2:
				return 0x16;
			case 0x2DA3:
				return 0x17;
			case 0x2DA4:
				return 0x17;
			case 0x2DA5:
				return 0x16;
			case 0x2DA6:
				return 0x16;
			case 0x2DA8:
				return 0x16;
			case 0x2DA9:
				return 0x16;
			case 0x2DAA:
				return 0x16;
			case 0x2DAB:
				return 0x17;
			case 0x2DAC:
				return 0x17;
			case 0x2DAD:
				return 0x16;
			case 0x2DAE:
				return 0x16;
			case 0x2DB0:
				return 0x16;
			case 0x2DB1:
				return 0x16;
			case 0x2DB2:
				return 0x16;
			case 0x2DB3:
				return 0x17;
			case 0x2DB4:
				return 0x17;
			case 0x2DB5:
				return 0x16;
			case 0x2DB6:
				return 0x16;
			case 0x2DB8:
				return 0x17;
			case 0x2DB9:
				return 0x17;
			case 0x2DBA:
				return 0x17;
			case 0x2DBB:
				return 0x18;
			case 0x2DBC:
				return 0x18;
			case 0x2DBD:
				return 0x17;
			case 0x2DBE:
				return 0x17;
			case 0x2DC0:
				return 0x16;
			case 0x2DC1:
				return 0x16;
			case 0x2DC2:
				return 0x16;
			case 0x2DC3:
				return 0x17;
			case 0x2DC4:
				return 0x17;
			case 0x2DC5:
				return 0x16;
			case 0x2DC6:
				return 0x16;
			case 0x2DC8:
				return 0x16;
			case 0x2DC9:
				return 0x16;
			case 0x2DCA:
				return 0x16;
			case 0x2DCB:
				return 0x17;
			case 0x2DCC:
				return 0x17;
			case 0x2DCD:
				return 0x16;
			case 0x2DCE:
				return 0x16;
			case 0x2DD0:
				return 0x16;
			case 0x2DD1:
				return 0x16;
			case 0x2DD2:
				return 0x16;
			case 0x2DD3:
				return 0x17;
			case 0x2DD4:
				return 0x17;
			case 0x2DD5:
				return 0x16;
			case 0x2DD6:
				return 0x16;
			case 0x2DD8:
				return 0x16;
			case 0x2DD9:
				return 0x16;
			case 0x2DDA:
				return 0x16;
			case 0x2DDB:
				return 0x17;
			case 0x2DDC:
				return 0x17;
			case 0x2DDD:
				return 0x16;
			case 0x2DDE:
				return 0x16;
			case 0x2DE0:
				return 0x1D;
			case 0x2DE1:
				return 0x1D;
			case 0x2DE2:
				return 0x1E;
			case 0x2DE3:
				return 0x1D;
			case 0x2DE4:
				return 0x1E;
			case 0x2DE5:
				return 0x1D;
			case 0x2DE6:
				return 0x1D;
			case 0x2DE7:
				return 0x1D;
			case 0x2DE8:
				return 0x1D;
			case 0x2DE9:
				return 0x1D;
			case 0x2DEA:
				return 0x1C;
			case 0x2DEB:
				return 0x1D;
			case 0x2DEC:
				return 0x1D;
			case 0x2DED:
				return 0x1D;
			case 0x2DEE:
				return 0x1D;
			case 0x2DEF:
				return 0x1D;
			case 0x2DF0:
				return 0x1E;
			case 0x2DF1:
				return 0x1E;
			case 0x2DF2:
				return 0x1E;
			case 0x2DF3:
				return 0x20;
			case 0x2DF4:
				return 0x1F;
			case 0x2DF5:
				return 0x20;
			case 0x2DF6:
				return 0x1C;
			case 0x2DF7:
				return 0x1D;
			case 0x2DF8:
				return 0x20;
			case 0x2DF9:
				return 0x27;
			case 0x2DFA:
				return 0x1E;
			case 0x2DFB:
				return 0x1D;
			case 0x2DFC:
				return 0x25;
			case 0x2DFD:
				return 0x25;
			case 0x2DFE:
				return 0x22;
			case 0x2DFF:
				return 0x2B;
			case 0x2E00:
				return 0x20;
			case 0x2E01:
				return 0x27;
			case 0x2E02:
				return 0x1A;
			case 0x2E03:
				return 0x1B;
			case 0x2E04:
				return 0x21;
			case 0x2E05:
				return 0x22;
			case 0x2E06:
				return 0x1C;
			case 0x2E07:
				return 0x23;
			case 0x2E08:
				return 0x1C;
			case 0x2E09:
				return 0x1B;
			case 0x2E0A:
				return 0x1C;
			case 0x2E0B:
				return 0xE;
			case 0x2E0C:
				return 0x1D;
			case 0x2E0D:
				return 0x1E;
			case 0x2E0E:
				return 0x12;
			case 0x2E0F:
				return 0xC;
			case 0x2E10:
				return 0x13;
			case 0x2E11:
				return 0x1C;
			case 0x2E12:
				return 0xD;
			case 0x2E13:
				return 0xE;
			case 0x2E14:
				return 0x11;
			case 0x2E15:
				return 0xF;
			case 0x2E16:
				return 0x1C;
			case 0x2E17:
				return 0x16;
			case 0x2E18:
				return 0x15;
			case 0x2E19:
				return 0xC;
			case 0x2E1A:
				return 0x16;
			case 0x2E1B:
				return 0x16;
			case 0x2E1C:
				return 0x1C;
			case 0x2E1D:
				return 0x1D;
			case 0x2E1E:
				return 0x15;
			case 0x2E1F:
				return 0x15;
			case 0x2E20:
				return 0x1D;
			case 0x2E21:
				return 0x1E;
			case 0x2E22:
				return 0x16;
			case 0x2E23:
				return 0x17;
			case 0x2E24:
				return 0x19;
			case 0x2E25:
				return 0x1A;
			case 0x2E26:
				return 0x18;
			case 0x2E27:
				return 0x19;
			case 0x2E28:
				return 0x18;
			case 0x2E29:
				return 0x19;
			case 0x2E2A:
				return 0x22;
			case 0x2E2B:
				return 0x22;
			case 0x2E2C:
				return 0x1D;
			case 0x2E2D:
				return 0xE;
			case 0x2E2E:
				return 0x17;
			case 0x2E2F:
				return 0xF;
			case 0x2E30:
				return 0xB;
			case 0x2E31:
				return 0x1A;
			case 0x2E32:
				return 0xD;
			case 0x2E33:
				return 0xB;
			case 0x2E34:
				return 0xD;
			case 0x2E35:
				return 0x11;
			case 0x2E36:
				return 0x17;
			case 0x2E37:
				return 0x18;
			case 0x2E38:
				return 0xE;
			case 0x2E39:
				return 0x16;
			case 0x2E3A:
				return 0xC;
			case 0x2E3B:
				return 0xE;
			case 0x2E3C:
				return 0x17;
			case 0x2E3D:
				return 0x12;
			case 0x2E3E:
				return 0x15;
			case 0x2E3F:
				return 0xA;
			case 0x2E40:
				return 0xE;
			case 0x2E41:
				return 0xF;
			case 0x2E42:
				return 0x25;
			case 0x2E43:
				return 0x16;
			case 0x2E44:
				return 0x17;
			case 0x2E45:
				return 0x14;
			case 0x2E46:
				return 0x26;
			case 0x2E47:
				return 0xB;
			case 0x2E48:
				return 0x14;
			case 0x2E49:
				return 0x15;
			case 0x2E4A:
				return 0xF;
			case 0x2E4B:
				return 0xE;
			case 0x2E4C:
				return 0xF;
			case 0x2E4D:
				return 0x11;
			case 0x2E4E:
				return 0x16;
			case 0x2E4F:
				return 0x16;
			case 0x2E50:
				return 0x20;
			case 0x2E51:
				return 0x1F;
			case 0x2E52:
				return 0x19;
			case 0x2E80:
				return 0x13;
			case 0x2E81:
				return 0x12;
			case 0x2E82:
				return 0x17;
			case 0x2E83:
				return 0x17;
			case 0x2E84:
				return 0x19;
			case 0x2E85:
				return 0x13;
			case 0x2E86:
				return 0x10;
			case 0x2E87:
				return 0x12;
			case 0x2E88:
				return 0x16;
			case 0x2E89:
				return 0x16;
			case 0x2E8A:
				return 0x17;
			case 0x2E8B:
				return 0x11;
			case 0x2E8C:
				return 0x16;
			case 0x2E8D:
				return 0x16;
			case 0x2E8E:
				return 0x15;
			case 0x2E8F:
				return 0x15;
			case 0x2E90:
				return 0x17;
			case 0x2E91:
				return 0x16;
			case 0x2E92:
				return 0x12;
			case 0x2E93:
				return 0x13;
			case 0x2E94:
				return 0x16;
			case 0x2E95:
				return 0x16;
			case 0x2E96:
				return 0x16;
			case 0x2E97:
				return 0x16;
			case 0x2E98:
				return 0x11;
			case 0x2E99:
				return 0x10;
			case 0x2E9B:
				return 0x12;
			case 0x2E9C:
				return 0x10;
			case 0x2E9D:
				return 0x11;
			case 0x2E9E:
				return 0x12;
			case 0x2E9F:
				return 0x13;
			case 0x2EA0:
				return 0x15;
			case 0x2EA1:
				return 0x16;
			case 0x2EA2:
				return 0x16;
			case 0x2EA3:
				return 0x11;
			case 0x2EA4:
				return 0x14;
			case 0x2EA5:
				return 0x14;
			case 0x2EA6:
				return 0x27;
			case 0x2EA7:
				return 0x10;
			case 0x2EA8:
				return 0x10;
			case 0x2EA9:
				return 0x11;
			case 0x2EAA:
				return 0x1A;
			case 0x2EAB:
				return 0x10;
			case 0x2EAC:
				return 0x17;
			case 0x2EAD:
				return 0x17;
			case 0x2EAE:
				return 0x13;
			case 0x2EAF:
				return 0x11;
			case 0x2EB0:
				return 0x1E;
			case 0x2EB1:
				return 0x14;
			case 0x2EB2:
				return 0x14;
			case 0x2EB3:
				return 0x16;
			case 0x2EB4:
				return 0x15;
			case 0x2EB5:
				return 0x11;
			case 0x2EB6:
				return 0x12;
			case 0x2EB7:
				return 0x10;
			case 0x2EB8:
				return 0x10;
			case 0x2EB9:
				return 0x10;
			case 0x2EBA:
				return 0x16;
			case 0x2EBB:
				return 0x16;
			case 0x2EBC:
				return 0x11;
			case 0x2EBD:
				return 0x13;
			case 0x2EBE:
				return 0x16;
			case 0x2EBF:
				return 0x16;
			case 0x2EC0:
				return 0x18;
			case 0x2EC1:
				return 0x12;
			case 0x2EC2:
				return 0x14;
			case 0x2EC3:
				return 0x15;
			case 0x2EC4:
				return 0x15;
			case 0x2EC5:
				return 0x1D;
			case 0x2EC6:
				return 0x1C;
			case 0x2EC7:
				return 0x11;
			case 0x2EC8:
				return 0x20;
			case 0x2EC9:
				return 0x1F;
			case 0x2ECA:
				return 0x11;
			case 0x2ECB:
				return 0x1E;
			case 0x2ECC:
				return 0x1C;
			case 0x2ECD:
				return 0x15;
			case 0x2ECE:
				return 0x15;
			case 0x2ECF:
				return 0x11;
			case 0x2ED0:
				return 0x1E;
			case 0x2ED1:
				return 0x15;
			case 0x2ED2:
				return 0x15;
			case 0x2ED3:
				return 0x1E;
			case 0x2ED4:
				return 0x1E;
			case 0x2ED5:
				return 0x16;
			case 0x2ED6:
				return 0x16;
			case 0x2ED7:
				return 0x11;
			case 0x2ED8:
				return 0x11;
			case 0x2ED9:
				return 0x28;
			case 0x2EDA:
				return 0x1E;
			case 0x2EDB:
				return 0x1E;
			case 0x2EDC:
				return 0x1D;
			case 0x2EDD:
				return 0x14;
			case 0x2EDE:
				return 0x14;
			case 0x2EDF:
				return 0x16;
			case 0x2EE0:
				return 0x1D;
			case 0x2EE1:
				return 0x11;
			case 0x2EE2:
				return 0x1F;
			case 0x2EE3:
				return 0x11;
			case 0x2EE4:
				return 0x12;
			case 0x2EE5:
				return 0x1E;
			case 0x2EE6:
				return 0x1E;
			case 0x2EE7:
				return 0x1E;
			case 0x2EE8:
				return 0x1D;
			case 0x2EE9:
				return 0x1E;
			case 0x2EEA:
				return 0x1E;
			case 0x2EEB:
				return 0x1E;
			case 0x2EEC:
				return 0x1E;
			case 0x2EED:
				return 0x1F;
			case 0x2EEE:
				return 0x1F;
			case 0x2EEF:
				return 0x20;
			case 0x2EF0:
				return 0x20;
			case 0x2EF1:
				return 0x13;
			case 0x2EF2:
				return 0x20;
			case 0x2EF3:
				return 0x20;
			case 0x2F00:
				return 0x13;
			case 0x2F01:
				return 0x14;
			case 0x2F02:
				return 0x13;
			case 0x2F03:
				return 0x15;
			case 0x2F04:
				return 0x16;
			case 0x2F05:
				return 0x14;
			case 0x2F06:
				return 0x13;
			case 0x2F07:
				return 0x13;
			case 0x2F08:
				return 0x13;
			case 0x2F09:
				return 0x14;
			case 0x2F0A:
				return 0x15;
			case 0x2F0B:
				return 0x15;
			case 0x2F0C:
				return 0x18;
			case 0x2F0D:
				return 0x15;
			case 0x2F0E:
				return 0x13;
			case 0x2F0F:
				return 0x15;
			case 0x2F10:
				return 0x18;
			case 0x2F11:
				return 0x15;
			case 0x2F12:
				return 0x15;
			case 0x2F13:
				return 0x14;
			case 0x2F14:
				return 0x15;
			case 0x2F15:
				return 0x1E;
			case 0x2F16:
				return 0x20;
			case 0x2F17:
				return 0x13;
			case 0x2F18:
				return 0x1A;
			case 0x2F19:
				return 0x14;
			case 0x2F1A:
				return 0x15;
			case 0x2F1B:
				return 0x17;
			case 0x2F1C:
				return 0x15;
			case 0x2F1D:
				return 0x15;
			case 0x2F1E:
				return 0x19;
			case 0x2F1F:
				return 0x15;
			case 0x2F20:
				return 0x17;
			case 0x2F21:
				return 0x12;
			case 0x2F22:
				return 0x19;
			case 0x2F23:
				return 0x17;
			case 0x2F24:
				return 0x13;
			case 0x2F25:
				return 0x15;
			case 0x2F26:
				return 0x15;
			case 0x2F27:
				return 0x14;
			case 0x2F28:
				return 0x14;
			case 0x2F29:
				return 0x15;
			case 0x2F2A:
				return 0x14;
			case 0x2F2B:
				return 0x16;
			case 0x2F2C:
				return 0x16;
			case 0x2F2D:
				return 0x18;
			case 0x2F2E:
				return 0x15;
			case 0x2F2F:
				return 0x14;
			case 0x2F30:
				return 0x17;
			case 0x2F31:
				return 0x16;
			case 0x2F32:
				return 0x13;
			case 0x2F33:
				return 0x1C;
			case 0x2F34:
				return 0x1C;
			case 0x2F35:
				return 0x1B;
			case 0x2F36:
				return 0x19;
			case 0x2F37:
				return 0x15;
			case 0x2F38:
				return 0x13;
			case 0x2F39:
				return 0x15;
			case 0x2F3A:
				return 0x17;
			case 0x2F3B:
				return 0x14;
			case 0x2F3C:
				return 0x15;
			case 0x2F3D:
				return 0x17;
			case 0x2F3E:
				return 0x14;
			case 0x2F3F:
				return 0x14;
			case 0x2F40:
				return 0x16;
			case 0x2F41:
				return 0x13;
			case 0x2F42:
				return 0x16;
			case 0x2F43:
				return 0x16;
			case 0x2F44:
				return 0x13;
			case 0x2F45:
				return 0x16;
			case 0x2F46:
				return 0x13;
			case 0x2F47:
				return 0x13;
			case 0x2F48:
				return 0x13;
			case 0x2F49:
				return 0x14;
			case 0x2F4A:
				return 0x14;
			case 0x2F4B:
				return 0x14;
			case 0x2F4C:
				return 0x14;
			case 0x2F4D:
				return 0x15;
			case 0x2F4E:
				return 0x16;
			case 0x2F4F:
				return 0x16;
			case 0x2F50:
				return 0x17;
			case 0x2F51:
				return 0x13;
			case 0x2F52:
				return 0x14;
			case 0x2F53:
				return 0x15;
			case 0x2F54:
				return 0x15;
			case 0x2F55:
				return 0x14;
			case 0x2F56:
				return 0x14;
			case 0x2F57:
				return 0x16;
			case 0x2F58:
				return 0x18;
			case 0x2F59:
				return 0x1F;
			case 0x2F5A:
				return 0x15;
			case 0x2F5B:
				return 0x14;
			case 0x2F5C:
				return 0x13;
			case 0x2F5D:
				return 0x13;
			case 0x2F5E:
				return 0x18;
			case 0x2F5F:
				return 0x14;
			case 0x2F60:
				return 0x15;
			case 0x2F61:
				return 0x14;
			case 0x2F62:
				return 0x15;
			case 0x2F63:
				return 0x14;
			case 0x2F64:
				return 0x13;
			case 0x2F65:
				return 0x15;
			case 0x2F66:
				return 0x1D;
			case 0x2F67:
				return 0x18;
			case 0x2F68:
				return 0x1B;
			case 0x2F69:
				return 0x15;
			case 0x2F6A:
				return 0x14;
			case 0x2F6B:
				return 0x14;
			case 0x2F6C:
				return 0x13;
			case 0x2F6D:
				return 0x15;
			case 0x2F6E:
				return 0x15;
			case 0x2F6F:
				return 0x15;
			case 0x2F70:
				return 0x16;
			case 0x2F71:
				return 0x15;
			case 0x2F72:
				return 0x15;
			case 0x2F73:
				return 0x14;
			case 0x2F74:
				return 0x15;
			case 0x2F75:
				return 0x16;
			case 0x2F76:
				return 0x14;
			case 0x2F77:
				return 0x14;
			case 0x2F78:
				return 0x13;
			case 0x2F79:
				return 0x13;
			case 0x2F7A:
				return 0x15;
			case 0x2F7B:
				return 0x17;
			case 0x2F7C:
				return 0x13;
			case 0x2F7D:
				return 0x13;
			case 0x2F7E:
				return 0x14;
			case 0x2F7F:
				return 0x13;
			case 0x2F80:
				return 0x15;
			case 0x2F81:
				return 0x14;
			case 0x2F82:
				return 0x18;
			case 0x2F83:
				return 0x14;
			case 0x2F84:
				return 0x16;
			case 0x2F85:
				return 0x16;
			case 0x2F86:
				return 0x16;
			case 0x2F87:
				return 0x16;
			case 0x2F88:
				return 0x14;
			case 0x2F89:
				return 0x18;
			case 0x2F8A:
				return 0x15;
			case 0x2F8B:
				return 0x15;
			case 0x2F8C:
				return 0x15;
			case 0x2F8D:
				return 0x16;
			case 0x2F8E:
				return 0x15;
			case 0x2F8F:
				return 0x1E;
			case 0x2F90:
				return 0x17;
			case 0x2F91:
				return 0x14;
			case 0x2F92:
				return 0x13;
			case 0x2F93:
				return 0x14;
			case 0x2F94:
				return 0x16;
			case 0x2F95:
				return 0x16;
			case 0x2F96:
				return 0x14;
			case 0x2F97:
				return 0x13;
			case 0x2F98:
				return 0x16;
			case 0x2F99:
				return 0x15;
			case 0x2F9A:
				return 0x13;
			case 0x2F9B:
				return 0x13;
			case 0x2F9C:
				return 0x14;
			case 0x2F9D:
				return 0x14;
			case 0x2F9E:
				return 0x14;
			case 0x2F9F:
				return 0x16;
			case 0x2FA0:
				return 0x17;
			case 0x2FA1:
				return 0x14;
			case 0x2FA2:
				return 0x14;
			case 0x2FA3:
				return 0x14;
			case 0x2FA4:
				return 0x1B;
			case 0x2FA5:
				return 0x17;
			case 0x2FA6:
				return 0x14;
			case 0x2FA7:
				return 0x14;
			case 0x2FA8:
				return 0x14;
			case 0x2FA9:
				return 0x15;
			case 0x2FAA:
				return 0x15;
			case 0x2FAB:
				return 0x21;
			case 0x2FAC:
				return 0x14;
			case 0x2FAD:
				return 0x14;
			case 0x2FAE:
				return 0x15;
			case 0x2FAF:
				return 0x14;
			case 0x2FB0:
				return 0x17;
			case 0x2FB1:
				return 0x1E;
			case 0x2FB2:
				return 0x14;
			case 0x2FB3:
				return 0x15;
			case 0x2FB4:
				return 0x14;
			case 0x2FB5:
				return 0x14;
			case 0x2FB6:
				return 0x13;
			case 0x2FB7:
				return 0x13;
			case 0x2FB8:
				return 0x14;
			case 0x2FB9:
				return 0x18;
			case 0x2FBA:
				return 0x15;
			case 0x2FBB:
				return 0x14;
			case 0x2FBC:
				return 0x14;
			case 0x2FBD:
				return 0x14;
			case 0x2FBE:
				return 0x15;
			case 0x2FBF:
				return 0x20;
			case 0x2FC0:
				return 0x18;
			case 0x2FC1:
				return 0x15;
			case 0x2FC2:
				return 0x14;
			case 0x2FC3:
				return 0x14;
			case 0x2FC4:
				return 0x14;
			case 0x2FC5:
				return 0x14;
			case 0x2FC6:
				return 0x15;
			case 0x2FC7:
				return 0x14;
			case 0x2FC8:
				return 0x16;
			case 0x2FC9:
				return 0x16;
			case 0x2FCA:
				return 0x15;
			case 0x2FCB:
				return 0x1A;
			case 0x2FCC:
				return 0x14;
			case 0x2FCD:
				return 0x16;
			case 0x2FCE:
				return 0x14;
			case 0x2FCF:
				return 0x13;
			case 0x2FD0:
				return 0x14;
			case 0x2FD1:
				return 0x14;
			case 0x2FD2:
				return 0x15;
			case 0x2FD3:
				return 0x16;
			case 0x2FD4:
				return 0x16;
			case 0x2FD5:
				return 0x15;
			case 0x2FF0:
				return 0x30;
			case 0x2FF1:
				return 0x31;
			case 0x2FF2:
				return 0x3B;
			case 0x2FF3:
				return 0x3C;
			case 0x2FF4:
				return 0x30;
			case 0x2FF5:
				return 0x36;
			case 0x2FF6:
				return 0x36;
			case 0x2FF7:
				return 0x35;
			case 0x2FF8:
				return 0x3B;
			case 0x2FF9:
				return 0x3C;
			case 0x2FFA:
				return 0x3B;
			case 0x2FFB:
				return 0x2B;
			case 0x3000:
				return 0x12;
			case 0x3001:
				return 0x12;
			case 0x3002:
				return 0x16;
			case 0x3003:
				return 0xB;
			case 0x3004:
				return 0x24;
			case 0x3005:
				return 0x1B;
			case 0x3006:
				return 0x19;
			case 0x3007:
				return 0x18;
			case 0x3008:
				return 0x13;
			case 0x3009:
				return 0x14;
			case 0x300A:
				return 0x1A;
			case 0x300B:
				return 0x1B;
			case 0x300C:
				return 0x14;
			case 0x300D:
				return 0x15;
			case 0x300E:
				return 0x1A;
			case 0x300F:
				return 0x1B;
			case 0x3010:
				return 0x1E;
			case 0x3011:
				return 0x1F;
			case 0x3012:
				return 0xC;
			case 0x3013:
				return 0xA;
			case 0x3014:
				return 0x1C;
			case 0x3015:
				return 0x1D;
			case 0x3016:
				return 0x1E;
			case 0x3017:
				return 0x1F;
			case 0x3018:
				return 0x22;
			case 0x3019:
				return 0x23;
			case 0x301A:
				return 0x1A;
			case 0x301B:
				return 0x1B;
			case 0x301C:
				return 0xA;
			case 0x301D:
				return 0x25;
			case 0x301E:
				return 0x1C;
			case 0x301F:
				return 0x20;
			case 0x3020:
				return 0x11;
			case 0x3021:
				return 0x15;
			case 0x3022:
				return 0x15;
			case 0x3023:
				return 0x17;
			case 0x3024:
				return 0x16;
			case 0x3025:
				return 0x16;
			case 0x3026:
				return 0x15;
			case 0x3027:
				return 0x17;
			case 0x3028:
				return 0x17;
			case 0x3029:
				return 0x16;
			case 0x302A:
				return 0x1C;
			case 0x302B:
				return 0x1D;
			case 0x302C:
				return 0x20;
			case 0x302D:
				return 0x1F;
			case 0x302E:
				return 0x1C;
			case 0x302F:
				return 0x1C;
			case 0x3030:
				return 0xA;
			case 0x3031:
				return 0x1A;
			case 0x3032:
				return 0x2C;
			case 0x3033:
				return 0x25;
			case 0x3034:
				return 0x37;
			case 0x3035:
				return 0x25;
			case 0x3036:
				return 0x14;
			case 0x3037:
				return 0x31;
			case 0x3038:
				return 0x15;
			case 0x3039:
				return 0x18;
			case 0x303A:
				return 0x18;
			case 0x303B:
				return 0x24;
			case 0x303C:
				return 0xA;
			case 0x303D:
				return 0x16;
			case 0x303E:
				return 0x20;
			case 0x303F:
				return 0x1C;
			case 0x3041:
				return 0x18;
			case 0x3042:
				return 0x12;
			case 0x3043:
				return 0x18;
			case 0x3044:
				return 0x12;
			case 0x3045:
				return 0x18;
			case 0x3046:
				return 0x12;
			case 0x3047:
				return 0x18;
			case 0x3048:
				return 0x12;
			case 0x3049:
				return 0x18;
			case 0x304A:
				return 0x12;
			case 0x304B:
				return 0x13;
			case 0x304C:
				return 0x13;
			case 0x304D:
				return 0x13;
			case 0x304E:
				return 0x13;
			case 0x304F:
				return 0x13;
			case 0x3050:
				return 0x13;
			case 0x3051:
				return 0x13;
			case 0x3052:
				return 0x13;
			case 0x3053:
				return 0x13;
			case 0x3054:
				return 0x13;
			case 0x3055:
				return 0x13;
			case 0x3056:
				return 0x13;
			case 0x3057:
				return 0x13;
			case 0x3058:
				return 0x13;
			case 0x3059:
				return 0x13;
			case 0x305A:
				return 0x13;
			case 0x305B:
				return 0x13;
			case 0x305C:
				return 0x13;
			case 0x305D:
				return 0x13;
			case 0x305E:
				return 0x13;
			case 0x305F:
				return 0x13;
			case 0x3060:
				return 0x13;
			case 0x3061:
				return 0x13;
			case 0x3062:
				return 0x13;
			case 0x3063:
				return 0x19;
			case 0x3064:
				return 0x13;
			case 0x3065:
				return 0x13;
			case 0x3066:
				return 0x13;
			case 0x3067:
				return 0x13;
			case 0x3068:
				return 0x13;
			case 0x3069:
				return 0x13;
			case 0x306A:
				return 0x13;
			case 0x306B:
				return 0x13;
			case 0x306C:
				return 0x13;
			case 0x306D:
				return 0x13;
			case 0x306E:
				return 0x13;
			case 0x306F:
				return 0x13;
			case 0x3070:
				return 0x13;
			case 0x3071:
				return 0x13;
			case 0x3072:
				return 0x13;
			case 0x3073:
				return 0x13;
			case 0x3074:
				return 0x13;
			case 0x3075:
				return 0x13;
			case 0x3076:
				return 0x13;
			case 0x3077:
				return 0x13;
			case 0x3078:
				return 0x13;
			case 0x3079:
				return 0x13;
			case 0x307A:
				return 0x13;
			case 0x307B:
				return 0x13;
			case 0x307C:
				return 0x13;
			case 0x307D:
				return 0x13;
			case 0x307E:
				return 0x13;
			case 0x307F:
				return 0x13;
			case 0x3080:
				return 0x13;
			case 0x3081:
				return 0x13;
			case 0x3082:
				return 0x13;
			case 0x3083:
				return 0x19;
			case 0x3084:
				return 0x13;
			case 0x3085:
				return 0x19;
			case 0x3086:
				return 0x13;
			case 0x3087:
				return 0x19;
			case 0x3088:
				return 0x13;
			case 0x3089:
				return 0x13;
			case 0x308A:
				return 0x13;
			case 0x308B:
				return 0x13;
			case 0x308C:
				return 0x13;
			case 0x308D:
				return 0x13;
			case 0x308E:
				return 0x19;
			case 0x308F:
				return 0x13;
			case 0x3090:
				return 0x13;
			case 0x3091:
				return 0x13;
			case 0x3092:
				return 0x13;
			case 0x3093:
				return 0x12;
			case 0x3094:
				return 0x13;
			case 0x3095:
				return 0x19;
			case 0x3096:
				return 0x19;
			case 0x3099:
				return 0x2E;
			case 0x309A:
				return 0x33;
			case 0x309B:
				return 0x24;
			case 0x309C:
				return 0x29;
			case 0x309D:
				return 0x18;
			case 0x309E:
				return 0x1F;
			case 0x309F:
				return 0x16;
			case 0x30A0:
				return 0x20;
			case 0x30A1:
				return 0x18;
			case 0x30A2:
				return 0x12;
			case 0x30A3:
				return 0x18;
			case 0x30A4:
				return 0x12;
			case 0x30A5:
				return 0x18;
			case 0x30A6:
				return 0x12;
			case 0x30A7:
				return 0x18;
			case 0x30A8:
				return 0x12;
			case 0x30A9:
				return 0x18;
			case 0x30AA:
				return 0x12;
			case 0x30AB:
				return 0x13;
			case 0x30AC:
				return 0x13;
			case 0x30AD:
				return 0x13;
			case 0x30AE:
				return 0x13;
			case 0x30AF:
				return 0x13;
			case 0x30B0:
				return 0x13;
			case 0x30B1:
				return 0x13;
			case 0x30B2:
				return 0x13;
			case 0x30B3:
				return 0x13;
			case 0x30B4:
				return 0x13;
			case 0x30B5:
				return 0x13;
			case 0x30B6:
				return 0x13;
			case 0x30B7:
				return 0x13;
			case 0x30B8:
				return 0x13;
			case 0x30B9:
				return 0x13;
			case 0x30BA:
				return 0x13;
			case 0x30BB:
				return 0x13;
			case 0x30BC:
				return 0x13;
			case 0x30BD:
				return 0x13;
			case 0x30BE:
				return 0x13;
			case 0x30BF:
				return 0x13;
			case 0x30C0:
				return 0x13;
			case 0x30C1:
				return 0x13;
			case 0x30C2:
				return 0x13;
			case 0x30C3:
				return 0x19;
			case 0x30C4:
				return 0x13;
			case 0x30C5:
				return 0x13;
			case 0x30C6:
				return 0x13;
			case 0x30C7:
				return 0x13;
			case 0x30C8:
				return 0x13;
			case 0x30C9:
				return 0x13;
			case 0x30CA:
				return 0x13;
			case 0x30CB:
				return 0x13;
			case 0x30CC:
				return 0x13;
			case 0x30CD:
				return 0x13;
			case 0x30CE:
				return 0x13;
			case 0x30CF:
				return 0x13;
			case 0x30D0:
				return 0x13;
			case 0x30D1:
				return 0x13;
			case 0x30D2:
				return 0x13;
			case 0x30D3:
				return 0x13;
			case 0x30D4:
				return 0x13;
			case 0x30D5:
				return 0x13;
			case 0x30D6:
				return 0x13;
			case 0x30D7:
				return 0x13;
			case 0x30D8:
				return 0x13;
			case 0x30D9:
				return 0x13;
			case 0x30DA:
				return 0x13;
			case 0x30DB:
				return 0x13;
			case 0x30DC:
				return 0x13;
			case 0x30DD:
				return 0x13;
			case 0x30DE:
				return 0x13;
			case 0x30DF:
				return 0x13;
			case 0x30E0:
				return 0x13;
			case 0x30E1:
				return 0x13;
			case 0x30E2:
				return 0x13;
			case 0x30E3:
				return 0x19;
			case 0x30E4:
				return 0x13;
			case 0x30E5:
				return 0x19;
			case 0x30E6:
				return 0x13;
			case 0x30E7:
				return 0x19;
			case 0x30E8:
				return 0x13;
			case 0x30E9:
				return 0x13;
			case 0x30EA:
				return 0x13;
			case 0x30EB:
				return 0x13;
			case 0x30EC:
				return 0x13;
			case 0x30ED:
				return 0x13;
			case 0x30EE:
				return 0x19;
			case 0x30EF:
				return 0x13;
			case 0x30F0:
				return 0x13;
			case 0x30F1:
				return 0x13;
			case 0x30F2:
				return 0x13;
			case 0x30F3:
				return 0x12;
			case 0x30F4:
				return 0x13;
			case 0x30F5:
				return 0x19;
			case 0x30F6:
				return 0x19;
			case 0x30F7:
				return 0x13;
			case 0x30F8:
				return 0x13;
			case 0x30F9:
				return 0x13;
			case 0x30FA:
				return 0x13;
			case 0x30FB:
				return 0x14;
			case 0x30FC:
				return 0x27;
			case 0x30FD:
				return 0x18;
			case 0x30FE:
				return 0x1F;
			case 0x30FF:
				return 0x16;
			case 0x3105:
				return 0x12;
			case 0x3106:
				return 0x12;
			case 0x3107:
				return 0x12;
			case 0x3108:
				return 0x12;
			case 0x3109:
				return 0x12;
			case 0x310A:
				return 0x12;
			case 0x310B:
				return 0x12;
			case 0x310C:
				return 0x12;
			case 0x310D:
				return 0x12;
			case 0x310E:
				return 0x12;
			case 0x310F:
				return 0x12;
			case 0x3110:
				return 0x12;
			case 0x3111:
				return 0x12;
			case 0x3112:
				return 0x12;
			case 0x3113:
				return 0x13;
			case 0x3114:
				return 0x13;
			case 0x3115:
				return 0x13;
			case 0x3116:
				return 0x12;
			case 0x3117:
				return 0x12;
			case 0x3118:
				return 0x12;
			case 0x3119:
				return 0x12;
			case 0x311A:
				return 0x12;
			case 0x311B:
				return 0x12;
			case 0x311C:
				return 0x12;
			case 0x311D:
				return 0x13;
			case 0x311E:
				return 0x13;
			case 0x311F:
				return 0x13;
			case 0x3120:
				return 0x13;
			case 0x3121:
				return 0x13;
			case 0x3122:
				return 0x13;
			case 0x3123:
				return 0x13;
			case 0x3124:
				return 0x14;
			case 0x3125:
				return 0x14;
			case 0x3126:
				return 0x13;
			case 0x3127:
				return 0x12;
			case 0x3128:
				return 0x12;
			case 0x3129:
				return 0x13;
			case 0x312A:
				return 0x12;
			case 0x312B:
				return 0x13;
			case 0x312C:
				return 0x13;
			case 0x312D:
				return 0x13;
			case 0x312E:
				return 0x21;
			case 0x312F:
				return 0x13;
			case 0x3131:
				return 0x15;
			case 0x3132:
				return 0x1A;
			case 0x3133:
				return 0x1A;
			case 0x3134:
				return 0x14;
			case 0x3135:
				return 0x1A;
			case 0x3136:
				return 0x1A;
			case 0x3137:
				return 0x15;
			case 0x3138:
				return 0x1A;
			case 0x3139:
				return 0x14;
			case 0x313A:
				return 0x1B;
			case 0x313B:
				return 0x1A;
			case 0x313C:
				return 0x1A;
			case 0x313D:
				return 0x19;
			case 0x313E:
				return 0x1C;
			case 0x313F:
				return 0x1C;
			case 0x3140:
				return 0x1A;
			case 0x3141:
				return 0x14;
			case 0x3142:
				return 0x14;
			case 0x3143:
				return 0x19;
			case 0x3144:
				return 0x19;
			case 0x3145:
				return 0x13;
			case 0x3146:
				return 0x18;
			case 0x3147:
				return 0x14;
			case 0x3148:
				return 0x14;
			case 0x3149:
				return 0x19;
			case 0x314A:
				return 0x16;
			case 0x314B:
				return 0x16;
			case 0x314C:
				return 0x16;
			case 0x314D:
				return 0x16;
			case 0x314E:
				return 0x14;
			case 0x314F:
				return 0x10;
			case 0x3150:
				return 0x11;
			case 0x3151:
				return 0x11;
			case 0x3152:
				return 0x12;
			case 0x3153:
				return 0x11;
			case 0x3154:
				return 0x10;
			case 0x3155:
				return 0x12;
			case 0x3156:
				return 0x11;
			case 0x3157:
				return 0x10;
			case 0x3158:
				return 0x11;
			case 0x3159:
				return 0x12;
			case 0x315A:
				return 0x11;
			case 0x315B:
				return 0x11;
			case 0x315C:
				return 0x10;
			case 0x315D:
				return 0x12;
			case 0x315E:
				return 0x11;
			case 0x315F:
				return 0x11;
			case 0x3160:
				return 0x11;
			case 0x3161:
				return 0x11;
			case 0x3162:
				return 0x11;
			case 0x3163:
				return 0x10;
			case 0x3164:
				return 0xE;
			case 0x3165:
				return 0x19;
			case 0x3166:
				return 0x1B;
			case 0x3167:
				return 0x19;
			case 0x3168:
				return 0x1C;
			case 0x3169:
				return 0x20;
			case 0x316A:
				return 0x1B;
			case 0x316B:
				return 0x1F;
			case 0x316C:
				return 0x1C;
			case 0x316D:
				return 0x20;
			case 0x316E:
				return 0x1A;
			case 0x316F:
				return 0x19;
			case 0x3170:
				return 0x1C;
			case 0x3171:
				return 0x1C;
			case 0x3172:
				return 0x1B;
			case 0x3173:
				return 0x1B;
			case 0x3174:
				return 0x20;
			case 0x3175:
				return 0x20;
			case 0x3176:
				return 0x1A;
			case 0x3177:
				return 0x1C;
			case 0x3178:
				return 0x1C;
			case 0x3179:
				return 0x21;
			case 0x317A:
				return 0x1A;
			case 0x317B:
				return 0x19;
			case 0x317C:
				return 0x1A;
			case 0x317D:
				return 0x19;
			case 0x317E:
				return 0x19;
			case 0x317F:
				return 0x16;
			case 0x3180:
				return 0x19;
			case 0x3181:
				return 0x17;
			case 0x3182:
				return 0x1C;
			case 0x3183:
				return 0x1F;
			case 0x3184:
				return 0x1E;
			case 0x3185:
				return 0x19;
			case 0x3186:
				return 0x1A;
			case 0x3187:
				return 0x14;
			case 0x3188:
				return 0x15;
			case 0x3189:
				return 0x13;
			case 0x318A:
				return 0x15;
			case 0x318B:
				return 0x14;
			case 0x318C:
				return 0x13;
			case 0x318D:
				return 0x14;
			case 0x318E:
				return 0x15;
			case 0x3190:
				return 0x24;
			case 0x3191:
				return 0x24;
			case 0x3192:
				return 0x20;
			case 0x3193:
				return 0x20;
			case 0x3194:
				return 0x22;
			case 0x3195:
				return 0x21;
			case 0x3196:
				return 0x20;
			case 0x3197:
				return 0x23;
			case 0x3198:
				return 0x23;
			case 0x3199:
				return 0x22;
			case 0x319A:
				return 0x23;
			case 0x319B:
				return 0x22;
			case 0x319C:
				return 0x23;
			case 0x319D:
				return 0x23;
			case 0x319E:
				return 0x22;
			case 0x319F:
				return 0x20;
			case 0x31A0:
				return 0x13;
			case 0x31A1:
				return 0x13;
			case 0x31A2:
				return 0x13;
			case 0x31A3:
				return 0x13;
			case 0x31A4:
				return 0x13;
			case 0x31A5:
				return 0x14;
			case 0x31A6:
				return 0x13;
			case 0x31A7:
				return 0x14;
			case 0x31A8:
				return 0x13;
			case 0x31A9:
				return 0x14;
			case 0x31AA:
				return 0x14;
			case 0x31AB:
				return 0x14;
			case 0x31AC:
				return 0x13;
			case 0x31AD:
				return 0x14;
			case 0x31AE:
				return 0x15;
			case 0x31AF:
				return 0x15;
			case 0x31B0:
				return 0x13;
			case 0x31B1:
				return 0x13;
			case 0x31B2:
				return 0x14;
			case 0x31B3:
				return 0x15;
			case 0x31B4:
				return 0x18;
			case 0x31B5:
				return 0x18;
			case 0x31B6:
				return 0x18;
			case 0x31B7:
				return 0x18;
			case 0x31B8:
				return 0x13;
			case 0x31B9:
				return 0x13;
			case 0x31BA:
				return 0x13;
			case 0x31BB:
				return 0x18;
			case 0x31BC:
				return 0x13;
			case 0x31BD:
				return 0x13;
			case 0x31BE:
				return 0x13;
			case 0x31BF:
				return 0x13;
			case 0x31C0:
				return 0xD;
			case 0x31C1:
				return 0xE;
			case 0x31C2:
				return 0xE;
			case 0x31C3:
				return 0xF;
			case 0x31C4:
				return 0xE;
			case 0x31C5:
				return 0xF;
			case 0x31C6:
				return 0xF;
			case 0x31C7:
				return 0xE;
			case 0x31C8:
				return 0x10;
			case 0x31C9:
				return 0x10;
			case 0x31CA:
				return 0xF;
			case 0x31CB:
				return 0x10;
			case 0x31CC:
				return 0x10;
			case 0x31CD:
				return 0xF;
			case 0x31CE:
				return 0x10;
			case 0x31CF:
				return 0xD;
			case 0x31D0:
				return 0xD;
			case 0x31D1:
				return 0xD;
			case 0x31D2:
				return 0xD;
			case 0x31D3:
				return 0xE;
			case 0x31D4:
				return 0xD;
			case 0x31D5:
				return 0xE;
			case 0x31D6:
				return 0xE;
			case 0x31D7:
				return 0xE;
			case 0x31D8:
				return 0xF;
			case 0x31D9:
				return 0xE;
			case 0x31DA:
				return 0xE;
			case 0x31DB:
				return 0xE;
			case 0x31DC:
				return 0xE;
			case 0x31DD:
				return 0xE;
			case 0x31DE:
				return 0xF;
			case 0x31DF:
				return 0xF;
			case 0x31E0:
				return 0x10;
			case 0x31E1:
				return 0x11;
			case 0x31E2:
				return 0xE;
			case 0x31E3:
				return 0xD;
			case 0x31F0:
				return 0x19;
			case 0x31F1:
				return 0x19;
			case 0x31F2:
				return 0x19;
			case 0x31F3:
				return 0x19;
			case 0x31F4:
				return 0x19;
			case 0x31F5:
				return 0x19;
			case 0x31F6:
				return 0x19;
			case 0x31F7:
				return 0x19;
			case 0x31F8:
				return 0x19;
			case 0x31F9:
				return 0x19;
			case 0x31FA:
				return 0x19;
			case 0x31FB:
				return 0x19;
			case 0x31FC:
				return 0x19;
			case 0x31FD:
				return 0x19;
			case 0x31FE:
				return 0x19;
			case 0x31FF:
				return 0x19;
			case 0x3200:
				return 0x1C;
			case 0x3201:
				return 0x1B;
			case 0x3202:
				return 0x1C;
			case 0x3203:
				return 0x1B;
			case 0x3204:
				return 0x1B;
			case 0x3205:
				return 0x1B;
			case 0x3206:
				return 0x1A;
			case 0x3207:
				return 0x1B;
			case 0x3208:
				return 0x1B;
			case 0x3209:
				return 0x1D;
			case 0x320A:
				return 0x1D;
			case 0x320B:
				return 0x1D;
			case 0x320C:
				return 0x1D;
			case 0x320D:
				return 0x1B;
			case 0x320E:
				return 0x1E;
			case 0x320F:
				return 0x1D;
			case 0x3210:
				return 0x1E;
			case 0x3211:
				return 0x1D;
			case 0x3212:
				return 0x1D;
			case 0x3213:
				return 0x1D;
			case 0x3214:
				return 0x1C;
			case 0x3215:
				return 0x1D;
			case 0x3216:
				return 0x1D;
			case 0x3217:
				return 0x1F;
			case 0x3218:
				return 0x1F;
			case 0x3219:
				return 0x1F;
			case 0x321A:
				return 0x1F;
			case 0x321B:
				return 0x1D;
			case 0x321C:
				return 0x1D;
			case 0x321D:
				return 0x25;
			case 0x321E:
				return 0x24;
			case 0x3220:
				return 0x1C;
			case 0x3221:
				return 0x1C;
			case 0x3222:
				return 0x1E;
			case 0x3223:
				return 0x1D;
			case 0x3224:
				return 0x1D;
			case 0x3225:
				return 0x1C;
			case 0x3226:
				return 0x1E;
			case 0x3227:
				return 0x1E;
			case 0x3228:
				return 0x1D;
			case 0x3229:
				return 0x1C;
			case 0x322A:
				return 0x1D;
			case 0x322B:
				return 0x1D;
			case 0x322C:
				return 0x1E;
			case 0x322D:
				return 0x1D;
			case 0x322E:
				return 0x1E;
			case 0x322F:
				return 0x1E;
			case 0x3230:
				return 0x1C;
			case 0x3231:
				return 0x1E;
			case 0x3232:
				return 0x1D;
			case 0x3233:
				return 0x20;
			case 0x3234:
				return 0x1D;
			case 0x3235:
				return 0x20;
			case 0x3236:
				return 0x22;
			case 0x3237:
				return 0x27;
			case 0x3238:
				return 0x1E;
			case 0x3239:
				return 0x22;
			case 0x323A:
				return 0x1D;
			case 0x323B:
				return 0x1E;
			case 0x323C:
				return 0x22;
			case 0x323D:
				return 0x23;
			case 0x323E:
				return 0x21;
			case 0x323F:
				return 0x21;
			case 0x3240:
				return 0x21;
			case 0x3241:
				return 0x1D;
			case 0x3242:
				return 0x1D;
			case 0x3243:
				return 0x1E;
			case 0x3244:
				return 0x1B;
			case 0x3245:
				return 0x1F;
			case 0x3246:
				return 0x19;
			case 0x3247:
				return 0x17;
			case 0x3248:
				return 0x23;
			case 0x3249:
				return 0x26;
			case 0x324A:
				return 0x26;
			case 0x324B:
				return 0x25;
			case 0x324C:
				return 0x25;
			case 0x324D:
				return 0x25;
			case 0x324E:
				return 0x27;
			case 0x324F:
				return 0x26;
			case 0x3250:
				return 0x11;
			case 0x3251:
				return 0x1A;
			case 0x3252:
				return 0x1A;
			case 0x3253:
				return 0x1C;
			case 0x3254:
				return 0x1B;
			case 0x3255:
				return 0x1B;
			case 0x3256:
				return 0x1A;
			case 0x3257:
				return 0x1C;
			case 0x3258:
				return 0x1C;
			case 0x3259:
				return 0x1B;
			case 0x325A:
				return 0x16;
			case 0x325B:
				return 0x1A;
			case 0x325C:
				return 0x1A;
			case 0x325D:
				return 0x1C;
			case 0x325E:
				return 0x1B;
			case 0x325F:
				return 0x1B;
			case 0x3260:
				return 0x16;
			case 0x3261:
				return 0x15;
			case 0x3262:
				return 0x16;
			case 0x3263:
				return 0x15;
			case 0x3264:
				return 0x15;
			case 0x3265:
				return 0x15;
			case 0x3266:
				return 0x14;
			case 0x3267:
				return 0x15;
			case 0x3268:
				return 0x15;
			case 0x3269:
				return 0x17;
			case 0x326A:
				return 0x17;
			case 0x326B:
				return 0x17;
			case 0x326C:
				return 0x17;
			case 0x326D:
				return 0x15;
			case 0x326E:
				return 0x18;
			case 0x326F:
				return 0x17;
			case 0x3270:
				return 0x18;
			case 0x3271:
				return 0x17;
			case 0x3272:
				return 0x17;
			case 0x3273:
				return 0x17;
			case 0x3274:
				return 0x16;
			case 0x3275:
				return 0x17;
			case 0x3276:
				return 0x17;
			case 0x3277:
				return 0x19;
			case 0x3278:
				return 0x19;
			case 0x3279:
				return 0x19;
			case 0x327A:
				return 0x19;
			case 0x327B:
				return 0x17;
			case 0x327C:
				return 0x20;
			case 0x327D:
				return 0x1F;
			case 0x327E:
				return 0x17;
			case 0x327F:
				return 0x17;
			case 0x3280:
				return 0x16;
			case 0x3281:
				return 0x16;
			case 0x3282:
				return 0x18;
			case 0x3283:
				return 0x17;
			case 0x3284:
				return 0x17;
			case 0x3285:
				return 0x16;
			case 0x3286:
				return 0x18;
			case 0x3287:
				return 0x18;
			case 0x3288:
				return 0x17;
			case 0x3289:
				return 0x16;
			case 0x328A:
				return 0x17;
			case 0x328B:
				return 0x17;
			case 0x328C:
				return 0x18;
			case 0x328D:
				return 0x17;
			case 0x328E:
				return 0x18;
			case 0x328F:
				return 0x18;
			case 0x3290:
				return 0x16;
			case 0x3291:
				return 0x18;
			case 0x3292:
				return 0x17;
			case 0x3293:
				return 0x1A;
			case 0x3294:
				return 0x17;
			case 0x3295:
				return 0x1A;
			case 0x3296:
				return 0x1C;
			case 0x3297:
				return 0x21;
			case 0x3298:
				return 0x18;
			case 0x3299:
				return 0x19;
			case 0x329A:
				return 0x17;
			case 0x329B:
				return 0x19;
			case 0x329C:
				return 0x1B;
			case 0x329D:
				return 0x1C;
			case 0x329E:
				return 0x18;
			case 0x329F:
				return 0x1C;
			case 0x32A0:
				return 0x17;
			case 0x32A1:
				return 0x17;
			case 0x32A2:
				return 0x17;
			case 0x32A3:
				return 0x1A;
			case 0x32A4:
				return 0x17;
			case 0x32A5:
				return 0x19;
			case 0x32A6:
				return 0x16;
			case 0x32A7:
				return 0x17;
			case 0x32A8:
				return 0x18;
			case 0x32A9:
				return 0x1B;
			case 0x32AA:
				return 0x1B;
			case 0x32AB:
				return 0x18;
			case 0x32AC:
				return 0x1C;
			case 0x32AD:
				return 0x1D;
			case 0x32AE:
				return 0x1B;
			case 0x32AF:
				return 0x1B;
			case 0x32B0:
				return 0x18;
			case 0x32B1:
				return 0x1A;
			case 0x32B2:
				return 0x1C;
			case 0x32B3:
				return 0x1C;
			case 0x32B4:
				return 0x1B;
			case 0x32B5:
				return 0x15;
			case 0x32B6:
				return 0x19;
			case 0x32B7:
				return 0x19;
			case 0x32B8:
				return 0x1B;
			case 0x32B9:
				return 0x1A;
			case 0x32BA:
				return 0x1A;
			case 0x32BB:
				return 0x19;
			case 0x32BC:
				return 0x1B;
			case 0x32BD:
				return 0x1B;
			case 0x32BE:
				return 0x1A;
			case 0x32BF:
				return 0x15;
			case 0x32C0:
				return 0x29;
			case 0x32C1:
				return 0x2A;
			case 0x32C2:
				return 0x27;
			case 0x32C3:
				return 0x27;
			case 0x32C4:
				return 0x25;
			case 0x32C5:
				return 0x26;
			case 0x32C6:
				return 0x26;
			case 0x32C7:
				return 0x28;
			case 0x32C8:
				return 0x2B;
			case 0x32C9:
				return 0x29;
			case 0x32CA:
				return 0x2A;
			case 0x32CB:
				return 0x2A;
			case 0x32CC:
				return 0xA;
			case 0x32CD:
				return 0xB;
			case 0x32CE:
				return 0xA;
			case 0x32CF:
				return 0x17;
			case 0x32D0:
				return 0x13;
			case 0x32D1:
				return 0x13;
			case 0x32D2:
				return 0x13;
			case 0x32D3:
				return 0x13;
			case 0x32D4:
				return 0x13;
			case 0x32D5:
				return 0x14;
			case 0x32D6:
				return 0x14;
			case 0x32D7:
				return 0x14;
			case 0x32D8:
				return 0x14;
			case 0x32D9:
				return 0x14;
			case 0x32DA:
				return 0x14;
			case 0x32DB:
				return 0x14;
			case 0x32DC:
				return 0x14;
			case 0x32DD:
				return 0x14;
			case 0x32DE:
				return 0x14;
			case 0x32DF:
				return 0x14;
			case 0x32E0:
				return 0x14;
			case 0x32E1:
				return 0x14;
			case 0x32E2:
				return 0x14;
			case 0x32E3:
				return 0x14;
			case 0x32E4:
				return 0x14;
			case 0x32E5:
				return 0x14;
			case 0x32E6:
				return 0x14;
			case 0x32E7:
				return 0x14;
			case 0x32E8:
				return 0x14;
			case 0x32E9:
				return 0x14;
			case 0x32EA:
				return 0x14;
			case 0x32EB:
				return 0x14;
			case 0x32EC:
				return 0x14;
			case 0x32ED:
				return 0x14;
			case 0x32EE:
				return 0x14;
			case 0x32EF:
				return 0x14;
			case 0x32F0:
				return 0x14;
			case 0x32F1:
				return 0x14;
			case 0x32F2:
				return 0x14;
			case 0x32F3:
				return 0x14;
			case 0x32F4:
				return 0x14;
			case 0x32F5:
				return 0x14;
			case 0x32F6:
				return 0x14;
			case 0x32F7:
				return 0x14;
			case 0x32F8:
				return 0x14;
			case 0x32F9:
				return 0x14;
			case 0x32FA:
				return 0x14;
			case 0x32FB:
				return 0x14;
			case 0x32FC:
				return 0x14;
			case 0x32FD:
				return 0x14;
			case 0x32FE:
				return 0x14;
			case 0x32FF:
				return 0x16;
			case 0x3300:
				return 0xE;
			case 0x3301:
				return 0xE;
			case 0x3302:
				return 0xD;
			case 0x3303:
				return 0xC;
			case 0x3304:
				return 0xE;
			case 0x3305:
				return 0xC;
			case 0x3306:
				return 0xB;
			case 0x3307:
				return 0x10;
			case 0x3308:
				return 0xD;
			case 0x3309:
				return 0xC;
			case 0x330A:
				return 0xC;
			case 0x330B:
				return 0xD;
			case 0x330C:
				return 0xF;
			case 0x330D:
				return 0xF;
			case 0x330E:
				return 0xD;
			case 0x330F:
				return 0xD;
			case 0x3310:
				return 0xC;
			case 0x3311:
				return 0xD;
			case 0x3312:
				return 0xE;
			case 0x3313:
				return 0xF;
			case 0x3314:
				return 0xC;
			case 0x3315:
				return 0x12;
			case 0x3316:
				return 0x13;
			case 0x3317:
				return 0x11;
			case 0x3318:
				return 0xE;
			case 0x3319:
				return 0x11;
			case 0x331A:
				return 0x11;
			case 0x331B:
				return 0xF;
			case 0x331C:
				return 0xD;
			case 0x331D:
				return 0xE;
			case 0x331E:
				return 0xD;
			case 0x331F:
				return 0xF;
			case 0x3320:
				return 0x10;
			case 0x3321:
				return 0xF;
			case 0x3322:
				return 0xD;
			case 0x3323:
				return 0xD;
			case 0x3324:
				return 0xD;
			case 0x3325:
				return 0xC;
			case 0x3326:
				return 0xC;
			case 0x3327:
				return 0xB;
			case 0x3328:
				return 0xC;
			case 0x3329:
				return 0xD;
			case 0x332A:
				return 0xD;
			case 0x332B:
				return 0x10;
			case 0x332C:
				return 0xD;
			case 0x332D:
				return 0xF;
			case 0x332E:
				return 0x11;
			case 0x332F:
				return 0xE;
			case 0x3330:
				return 0xC;
			case 0x3331:
				return 0xC;
			case 0x3332:
				return 0x10;
			case 0x3333:
				return 0xE;
			case 0x3334:
				return 0x10;
			case 0x3335:
				return 0xD;
			case 0x3336:
				return 0x11;
			case 0x3337:
				return 0xC;
			case 0x3338:
				return 0xE;
			case 0x3339:
				return 0xE;
			case 0x333A:
				return 0xD;
			case 0x333B:
				return 0xD;
			case 0x333C:
				return 0xD;
			case 0x333D:
				return 0xE;
			case 0x333E:
				return 0xE;
			case 0x333F:
				return 0xB;
			case 0x3340:
				return 0xD;
			case 0x3341:
				return 0xD;
			case 0x3342:
				return 0xC;
			case 0x3343:
				return 0xF;
			case 0x3344:
				return 0xD;
			case 0x3345:
				return 0xD;
			case 0x3346:
				return 0xE;
			case 0x3347:
				return 0xF;
			case 0x3348:
				return 0xF;
			case 0x3349:
				return 0xC;
			case 0x334A:
				return 0x11;
			case 0x334B:
				return 0xC;
			case 0x334C:
				return 0xF;
			case 0x334D:
				return 0xF;
			case 0x334E:
				return 0xD;
			case 0x334F:
				return 0xD;
			case 0x3350:
				return 0xC;
			case 0x3351:
				return 0xF;
			case 0x3352:
				return 0xC;
			case 0x3353:
				return 0xD;
			case 0x3354:
				return 0xF;
			case 0x3355:
				return 0xC;
			case 0x3356:
				return 0x10;
			case 0x3357:
				return 0xD;
			case 0x3358:
				return 0x2B;
			case 0x3359:
				return 0x2A;
			case 0x335A:
				return 0x2A;
			case 0x335B:
				return 0x2C;
			case 0x335C:
				return 0x2B;
			case 0x335D:
				return 0x2B;
			case 0x335E:
				return 0x2A;
			case 0x335F:
				return 0x2C;
			case 0x3360:
				return 0x2C;
			case 0x3361:
				return 0x2B;
			case 0x3362:
				return 0x2A;
			case 0x3363:
				return 0x2D;
			case 0x3364:
				return 0x2D;
			case 0x3365:
				return 0x2F;
			case 0x3366:
				return 0x2F;
			case 0x3367:
				return 0x2E;
			case 0x3368:
				return 0x2E;
			case 0x3369:
				return 0x30;
			case 0x336A:
				return 0x2F;
			case 0x336B:
				return 0x2F;
			case 0x336C:
				return 0x2D;
			case 0x336D:
				return 0x31;
			case 0x336E:
				return 0x31;
			case 0x336F:
				return 0x33;
			case 0x3370:
				return 0x32;
			case 0x3371:
				return 0xB;
			case 0x3372:
				return 0xA;
			case 0x3373:
				return 0xA;
			case 0x3374:
				return 0xB;
			case 0x3375:
				return 0xA;
			case 0x3376:
				return 0xA;
			case 0x3377:
				return 0xA;
			case 0x3378:
				return 0x12;
			case 0x3379:
				return 0x10;
			case 0x337A:
				return 0xA;
			case 0x337B:
				return 0x17;
			case 0x337C:
				return 0x17;
			case 0x337D:
				return 0x18;
			case 0x337E:
				return 0x16;
			case 0x337F:
				return 0x13;
			case 0x3380:
				return 0xF;
			case 0x3381:
				return 0xA;
			case 0x3382:
				return 0xC;
			case 0x3383:
				return 0xA;
			case 0x3384:
				return 0xA;
			case 0x3385:
				return 0xA;
			case 0x3386:
				return 0xA;
			case 0x3387:
				return 0xA;
			case 0x3388:
				return 0xB;
			case 0x3389:
				return 0xC;
			case 0x338A:
				return 0xA;
			case 0x338B:
				return 0xA;
			case 0x338C:
				return 0xC;
			case 0x338D:
				return 0xC;
			case 0x338E:
				return 0xA;
			case 0x338F:
				return 0xA;
			case 0x3390:
				return 0xA;
			case 0x3391:
				return 0xB;
			case 0x3392:
				return 0xB;
			case 0x3393:
				return 0xB;
			case 0x3394:
				return 0xB;
			case 0x3395:
				return 0xC;
			case 0x3396:
				return 0xA;
			case 0x3397:
				return 0xA;
			case 0x3398:
				return 0xA;
			case 0x3399:
				return 0xA;
			case 0x339A:
				return 0xA;
			case 0x339B:
				return 0xC;
			case 0x339C:
				return 0xA;
			case 0x339D:
				return 0xA;
			case 0x339E:
				return 0xA;
			case 0x339F:
				return 0x12;
			case 0x33A0:
				return 0x12;
			case 0x33A1:
				return 0x11;
			case 0x33A2:
				return 0x12;
			case 0x33A3:
				return 0x10;
			case 0x33A4:
				return 0x10;
			case 0x33A5:
				return 0xF;
			case 0x33A6:
				return 0x10;
			case 0x33A7:
				return 0x10;
			case 0x33A8:
				return 0x18;
			case 0x33A9:
				return 0xA;
			case 0x33AA:
				return 0xB;
			case 0x33AB:
				return 0xB;
			case 0x33AC:
				return 0xB;
			case 0x33AD:
				return 0xB;
			case 0x33AE:
				return 0x12;
			case 0x33AF:
				return 0x1A;
			case 0x33B0:
				return 0xA;
			case 0x33B1:
				return 0xA;
			case 0x33B2:
				return 0xC;
			case 0x33B3:
				return 0xA;
			case 0x33B4:
				return 0xA;
			case 0x33B5:
				return 0xA;
			case 0x33B6:
				return 0xC;
			case 0x33B7:
				return 0xA;
			case 0x33B8:
				return 0xA;
			case 0x33B9:
				return 0xF;
			case 0x33BA:
				return 0xA;
			case 0x33BB:
				return 0xA;
			case 0x33BC:
				return 0xC;
			case 0x33BD:
				return 0xA;
			case 0x33BE:
				return 0xA;
			case 0x33BF:
				return 0xF;
			case 0x33C0:
				return 0xD;
			case 0x33C1:
				return 0xD;
			case 0x33C2:
				return 0xA;
			case 0x33C3:
				return 0xA;
			case 0x33C4:
				return 0xA;
			case 0x33C5:
				return 0xA;
			case 0x33C6:
				return 0x11;
			case 0x33C7:
				return 0xA;
			case 0x33C8:
				return 0xA;
			case 0x33C9:
				return 0xA;
			case 0x33CA:
				return 0xA;
			case 0x33CB:
				return 0xA;
			case 0x33CC:
				return 0xA;
			case 0x33CD:
				return 0xA;
			case 0x33CE:
				return 0x12;
			case 0x33CF:
				return 0xA;
			case 0x33D0:
				return 0xA;
			case 0x33D1:
				return 0xA;
			case 0x33D2:
				return 0xB;
			case 0x33D3:
				return 0xA;
			case 0x33D4:
				return 0x10;
			case 0x33D5:
				return 0xB;
			case 0x33D6:
				return 0xB;
			case 0x33D7:
				return 0xA;
			case 0x33D8:
				return 0xA;
			case 0x33D9:
				return 0xB;
			case 0x33DA:
				return 0xA;
			case 0x33DB:
				return 0xA;
			case 0x33DC:
				return 0xA;
			case 0x33DD:
				return 0xA;
			case 0x33DE:
				return 0x10;
			case 0x33DF:
				return 0x10;
			case 0x33E0:
				return 0x29;
			case 0x33E1:
				return 0x29;
			case 0x33E2:
				return 0x2B;
			case 0x33E3:
				return 0x2A;
			case 0x33E4:
				return 0x2A;
			case 0x33E5:
				return 0x29;
			case 0x33E6:
				return 0x2B;
			case 0x33E7:
				return 0x2B;
			case 0x33E8:
				return 0x2A;
			case 0x33E9:
				return 0x29;
			case 0x33EA:
				return 0x2C;
			case 0x33EB:
				return 0x2C;
			case 0x33EC:
				return 0x2E;
			case 0x33ED:
				return 0x2E;
			case 0x33EE:
				return 0x2D;
			case 0x33EF:
				return 0x2D;
			case 0x33F0:
				return 0x2F;
			case 0x33F1:
				return 0x2E;
			case 0x33F2:
				return 0x2E;
			case 0x33F3:
				return 0x2C;
			case 0x33F4:
				return 0x30;
			case 0x33F5:
				return 0x30;
			case 0x33F6:
				return 0x32;
			case 0x33F7:
				return 0x31;
			case 0x33F8:
				return 0x31;
			case 0x33F9:
				return 0x30;
			case 0x33FA:
				return 0x32;
			case 0x33FB:
				return 0x32;
			case 0x33FC:
				return 0x31;
			case 0x33FD:
				return 0x2C;
			case 0x33FE:
				return 0x30;
			case 0x33FF:
				return 0xB;
			case 0x3400:
				return 0x23;
			case 0x4DBF:
				return 0x22;
			case 0x4DC0:
				return 0x21;
			case 0x4DC1:
				return 0x21;
			case 0x4DC2:
				return 0x29;
			case 0x4DC3:
				return 0x1C;
			case 0x4DC4:
				return 0x15;
			case 0x4DC5:
				return 0x16;
			case 0x4DC6:
				return 0x16;
			case 0x4DC7:
				return 0x1E;
			case 0x4DC8:
				return 0x1A;
			case 0x4DC9:
				return 0x16;
			case 0x4DCA:
				return 0x13;
			case 0x4DCB:
				return 0x18;
			case 0x4DCC:
				return 0x18;
			case 0x4DCD:
				return 0x1E;
			case 0x4DCE:
				return 0x15;
			case 0x4DCF:
				return 0x18;
			case 0x4DD0:
				return 0x17;
			case 0x4DD1:
				return 0x21;
			case 0x4DD2:
				return 0x16;
			case 0x4DD3:
				return 0x1B;
			case 0x4DD4:
				return 0x1C;
			case 0x4DD5:
				return 0x13;
			case 0x4DD6:
				return 0x1D;
			case 0x4DD7:
				return 0x14;
			case 0x4DD8:
				return 0x17;
			case 0x4DD9:
				return 0x1A;
			case 0x4DDA:
				return 0x1B;
			case 0x4DDB:
				return 0x21;
			case 0x4DDC:
				return 0x1F;
			case 0x4DDD:
				return 0x1F;
			case 0x4DDE:
				return 0x17;
			case 0x4DDF:
				return 0x16;
			case 0x4DE0:
				return 0x15;
			case 0x4DE1:
				return 0x19;
			case 0x4DE2:
				return 0x16;
			case 0x4DE3:
				return 0x24;
			case 0x4DE4:
				return 0x18;
			case 0x4DE5:
				return 0x18;
			case 0x4DE6:
				return 0x19;
			case 0x4DE7:
				return 0x19;
			case 0x4DE8:
				return 0x16;
			case 0x4DE9:
				return 0x16;
			case 0x4DEA:
				return 0x1A;
			case 0x4DEB:
				return 0x1C;
			case 0x4DEC:
				return 0x20;
			case 0x4DED:
				return 0x1C;
			case 0x4DEE:
				return 0x18;
			case 0x4DEF:
				return 0x16;
			case 0x4DF0:
				return 0x18;
			case 0x4DF1:
				return 0x1A;
			case 0x4DF2:
				return 0x22;
			case 0x4DF3:
				return 0x28;
			case 0x4DF4:
				return 0x19;
			case 0x4DF5:
				return 0x21;
			case 0x4DF6:
				return 0x17;
			case 0x4DF7:
				return 0x1A;
			case 0x4DF8:
				return 0x1D;
			case 0x4DF9:
				return 0x1D;
			case 0x4DFA:
				return 0x18;
			case 0x4DFB:
				return 0x18;
			case 0x4DFC:
				return 0x19;
			case 0x4DFD:
				return 0x21;
			case 0x4DFE:
				return 0x1E;
			case 0x4DFF:
				return 0x1F;
			case 0x4E00:
				return 0x17;
			case 0x9FFC:
				return 0x16;
			case 0xA000:
				return 0xF;
			case 0xA001:
				return 0xF;
			case 0xA002:
				return 0xE;
			case 0xA003:
				return 0xF;
			case 0xA004:
				return 0x10;
			case 0xA005:
				return 0x10;
			case 0xA006:
				return 0xF;
			case 0xA007:
				return 0x10;
			case 0xA008:
				return 0xF;
			case 0xA009:
				return 0xF;
			case 0xA00A:
				return 0xE;
			case 0xA00B:
				return 0xF;
			case 0xA00C:
				return 0x10;
			case 0xA00D:
				return 0xF;
			case 0xA00E:
				return 0x10;
			case 0xA00F:
				return 0xF;
			case 0xA010:
				return 0xF;
			case 0xA011:
				return 0xE;
			case 0xA012:
				return 0xF;
			case 0xA013:
				return 0xF;
			case 0xA014:
				return 0xE;
			case 0xA015:
				return 0xF;
			case 0xA016:
				return 0x10;
			case 0xA017:
				return 0x10;
			case 0xA018:
				return 0xF;
			case 0xA019:
				return 0x10;
			case 0xA01A:
				return 0x11;
			case 0xA01B:
				return 0x11;
			case 0xA01C:
				return 0x10;
			case 0xA01D:
				return 0x11;
			case 0xA01E:
				return 0x10;
			case 0xA01F:
				return 0x10;
			case 0xA020:
				return 0xF;
			case 0xA021:
				return 0x10;
			case 0xA022:
				return 0x11;
			case 0xA023:
				return 0x10;
			case 0xA024:
				return 0x11;
			case 0xA025:
				return 0x10;
			case 0xA026:
				return 0x10;
			case 0xA027:
				return 0xF;
			case 0xA028:
				return 0x10;
			case 0xA029:
				return 0x10;
			case 0xA02A:
				return 0xF;
			case 0xA02B:
				return 0x10;
			case 0xA02C:
				return 0x10;
			case 0xA02D:
				return 0x10;
			case 0xA02E:
				return 0xF;
			case 0xA02F:
				return 0x10;
			case 0xA030:
				return 0x11;
			case 0xA031:
				return 0x10;
			case 0xA032:
				return 0x10;
			case 0xA033:
				return 0x10;
			case 0xA034:
				return 0xF;
			case 0xA035:
				return 0x10;
			case 0xA036:
				return 0x11;
			case 0xA037:
				return 0x10;
			case 0xA038:
				return 0x10;
			case 0xA039:
				return 0x10;
			case 0xA03A:
				return 0xF;
			case 0xA03B:
				return 0x10;
			case 0xA03C:
				return 0x11;
			case 0xA03D:
				return 0x10;
			case 0xA03E:
				return 0x11;
			case 0xA03F:
				return 0x10;
			case 0xA040:
				return 0x10;
			case 0xA041:
				return 0xF;
			case 0xA042:
				return 0x10;
			case 0xA043:
				return 0x11;
			case 0xA044:
				return 0x10;
			case 0xA045:
				return 0x11;
			case 0xA046:
				return 0x10;
			case 0xA047:
				return 0x10;
			case 0xA048:
				return 0xF;
			case 0xA049:
				return 0x10;
			case 0xA04A:
				return 0x10;
			case 0xA04B:
				return 0x10;
			case 0xA04C:
				return 0xF;
			case 0xA04D:
				return 0x10;
			case 0xA04E:
				return 0x11;
			case 0xA04F:
				return 0x10;
			case 0xA050:
				return 0x10;
			case 0xA051:
				return 0x10;
			case 0xA052:
				return 0xF;
			case 0xA053:
				return 0x10;
			case 0xA054:
				return 0x11;
			case 0xA055:
				return 0x10;
			case 0xA056:
				return 0x11;
			case 0xA057:
				return 0x11;
			case 0xA058:
				return 0x10;
			case 0xA059:
				return 0x11;
			case 0xA05A:
				return 0x12;
			case 0xA05B:
				return 0x12;
			case 0xA05C:
				return 0x11;
			case 0xA05D:
				return 0x12;
			case 0xA05E:
				return 0x11;
			case 0xA05F:
				return 0x11;
			case 0xA060:
				return 0x10;
			case 0xA061:
				return 0x11;
			case 0xA062:
				return 0x12;
			case 0xA063:
				return 0x11;
			case 0xA064:
				return 0x12;
			case 0xA065:
				return 0x11;
			case 0xA066:
				return 0x11;
			case 0xA067:
				return 0x10;
			case 0xA068:
				return 0x11;
			case 0xA069:
				return 0x11;
			case 0xA06A:
				return 0x10;
			case 0xA06B:
				return 0x11;
			case 0xA06C:
				return 0x11;
			case 0xA06D:
				return 0x11;
			case 0xA06E:
				return 0x10;
			case 0xA06F:
				return 0x11;
			case 0xA070:
				return 0x12;
			case 0xA071:
				return 0x11;
			case 0xA072:
				return 0x11;
			case 0xA073:
				return 0x11;
			case 0xA074:
				return 0x10;
			case 0xA075:
				return 0x11;
			case 0xA076:
				return 0x11;
			case 0xA077:
				return 0x11;
			case 0xA078:
				return 0x10;
			case 0xA079:
				return 0x11;
			case 0xA07A:
				return 0x12;
			case 0xA07B:
				return 0x11;
			case 0xA07C:
				return 0x12;
			case 0xA07D:
				return 0x11;
			case 0xA07E:
				return 0x11;
			case 0xA07F:
				return 0x10;
			case 0xA080:
				return 0x11;
			case 0xA081:
				return 0x11;
			case 0xA082:
				return 0x11;
			case 0xA083:
				return 0x10;
			case 0xA084:
				return 0x11;
			case 0xA085:
				return 0x11;
			case 0xA086:
				return 0x11;
			case 0xA087:
				return 0x10;
			case 0xA088:
				return 0x11;
			case 0xA089:
				return 0x12;
			case 0xA08A:
				return 0x11;
			case 0xA08B:
				return 0x11;
			case 0xA08C:
				return 0x11;
			case 0xA08D:
				return 0x10;
			case 0xA08E:
				return 0x11;
			case 0xA08F:
				return 0x12;
			case 0xA090:
				return 0x11;
			case 0xA091:
				return 0x11;
			case 0xA092:
				return 0x11;
			case 0xA093:
				return 0x10;
			case 0xA094:
				return 0x11;
			case 0xA095:
				return 0x12;
			case 0xA096:
				return 0x11;
			case 0xA097:
				return 0x12;
			case 0xA098:
				return 0x11;
			case 0xA099:
				return 0x11;
			case 0xA09A:
				return 0x10;
			case 0xA09B:
				return 0x11;
			case 0xA09C:
				return 0x12;
			case 0xA09D:
				return 0x11;
			case 0xA09E:
				return 0x12;
			case 0xA09F:
				return 0x11;
			case 0xA0A0:
				return 0x11;
			case 0xA0A1:
				return 0x10;
			case 0xA0A2:
				return 0x11;
			case 0xA0A3:
				return 0x11;
			case 0xA0A4:
				return 0x11;
			case 0xA0A5:
				return 0x10;
			case 0xA0A6:
				return 0x11;
			case 0xA0A7:
				return 0x12;
			case 0xA0A8:
				return 0x11;
			case 0xA0A9:
				return 0x11;
			case 0xA0AA:
				return 0x10;
			case 0xA0AB:
				return 0x11;
			case 0xA0AC:
				return 0x12;
			case 0xA0AD:
				return 0x11;
			case 0xA0AE:
				return 0x10;
			case 0xA0AF:
				return 0x10;
			case 0xA0B0:
				return 0xF;
			case 0xA0B1:
				return 0x10;
			case 0xA0B2:
				return 0x11;
			case 0xA0B3:
				return 0x10;
			case 0xA0B4:
				return 0x11;
			case 0xA0B5:
				return 0x10;
			case 0xA0B6:
				return 0x10;
			case 0xA0B7:
				return 0xF;
			case 0xA0B8:
				return 0x10;
			case 0xA0B9:
				return 0x11;
			case 0xA0BA:
				return 0x11;
			case 0xA0BB:
				return 0x10;
			case 0xA0BC:
				return 0x11;
			case 0xA0BD:
				return 0x10;
			case 0xA0BE:
				return 0x10;
			case 0xA0BF:
				return 0xF;
			case 0xA0C0:
				return 0x10;
			case 0xA0C1:
				return 0x10;
			case 0xA0C2:
				return 0xF;
			case 0xA0C3:
				return 0x10;
			case 0xA0C4:
				return 0x10;
			case 0xA0C5:
				return 0xF;
			case 0xA0C6:
				return 0x10;
			case 0xA0C7:
				return 0x11;
			case 0xA0C8:
				return 0x10;
			case 0xA0C9:
				return 0x10;
			case 0xA0CA:
				return 0x10;
			case 0xA0CB:
				return 0xF;
			case 0xA0CC:
				return 0x10;
			case 0xA0CD:
				return 0x10;
			case 0xA0CE:
				return 0x10;
			case 0xA0CF:
				return 0xF;
			case 0xA0D0:
				return 0x10;
			case 0xA0D1:
				return 0x10;
			case 0xA0D2:
				return 0x10;
			case 0xA0D3:
				return 0xF;
			case 0xA0D4:
				return 0x10;
			case 0xA0D5:
				return 0x10;
			case 0xA0D6:
				return 0xF;
			case 0xA0D7:
				return 0x10;
			case 0xA0D8:
				return 0x10;
			case 0xA0D9:
				return 0x10;
			case 0xA0DA:
				return 0xF;
			case 0xA0DB:
				return 0x10;
			case 0xA0DC:
				return 0x11;
			case 0xA0DD:
				return 0x10;
			case 0xA0DE:
				return 0x10;
			case 0xA0DF:
				return 0x10;
			case 0xA0E0:
				return 0xF;
			case 0xA0E1:
				return 0x10;
			case 0xA0E2:
				return 0x10;
			case 0xA0E3:
				return 0x10;
			case 0xA0E4:
				return 0xF;
			case 0xA0E5:
				return 0x10;
			case 0xA0E6:
				return 0x11;
			case 0xA0E7:
				return 0x11;
			case 0xA0E8:
				return 0x10;
			case 0xA0E9:
				return 0x11;
			case 0xA0EA:
				return 0x10;
			case 0xA0EB:
				return 0x10;
			case 0xA0EC:
				return 0xF;
			case 0xA0ED:
				return 0x10;
			case 0xA0EE:
				return 0x10;
			case 0xA0EF:
				return 0x10;
			case 0xA0F0:
				return 0xF;
			case 0xA0F1:
				return 0x10;
			case 0xA0F2:
				return 0x10;
			case 0xA0F3:
				return 0x10;
			case 0xA0F4:
				return 0x10;
			case 0xA0F5:
				return 0x10;
			case 0xA0F6:
				return 0xF;
			case 0xA0F7:
				return 0x10;
			case 0xA0F8:
				return 0x11;
			case 0xA0F9:
				return 0x10;
			case 0xA0FA:
				return 0x10;
			case 0xA0FB:
				return 0x10;
			case 0xA0FC:
				return 0xF;
			case 0xA0FD:
				return 0x10;
			case 0xA0FE:
				return 0x11;
			case 0xA0FF:
				return 0x10;
			case 0xA100:
				return 0x10;
			case 0xA101:
				return 0x10;
			case 0xA102:
				return 0xF;
			case 0xA103:
				return 0x10;
			case 0xA104:
				return 0x11;
			case 0xA105:
				return 0x10;
			case 0xA106:
				return 0x11;
			case 0xA107:
				return 0x10;
			case 0xA108:
				return 0x10;
			case 0xA109:
				return 0xF;
			case 0xA10A:
				return 0x10;
			case 0xA10B:
				return 0x11;
			case 0xA10C:
				return 0x10;
			case 0xA10D:
				return 0x10;
			case 0xA10E:
				return 0x10;
			case 0xA10F:
				return 0xF;
			case 0xA110:
				return 0x10;
			case 0xA111:
				return 0x10;
			case 0xA112:
				return 0xF;
			case 0xA113:
				return 0x10;
			case 0xA114:
				return 0x10;
			case 0xA115:
				return 0x10;
			case 0xA116:
				return 0xF;
			case 0xA117:
				return 0x10;
			case 0xA118:
				return 0x11;
			case 0xA119:
				return 0x10;
			case 0xA11A:
				return 0x10;
			case 0xA11B:
				return 0x10;
			case 0xA11C:
				return 0xF;
			case 0xA11D:
				return 0x10;
			case 0xA11E:
				return 0x11;
			case 0xA11F:
				return 0x10;
			case 0xA120:
				return 0x11;
			case 0xA121:
				return 0x10;
			case 0xA122:
				return 0x10;
			case 0xA123:
				return 0xF;
			case 0xA124:
				return 0x10;
			case 0xA125:
				return 0x11;
			case 0xA126:
				return 0x11;
			case 0xA127:
				return 0x10;
			case 0xA128:
				return 0x11;
			case 0xA129:
				return 0x10;
			case 0xA12A:
				return 0x10;
			case 0xA12B:
				return 0xF;
			case 0xA12C:
				return 0x10;
			case 0xA12D:
				return 0x10;
			case 0xA12E:
				return 0xF;
			case 0xA12F:
				return 0x10;
			case 0xA130:
				return 0x10;
			case 0xA131:
				return 0x10;
			case 0xA132:
				return 0xF;
			case 0xA133:
				return 0x10;
			case 0xA134:
				return 0x11;
			case 0xA135:
				return 0x10;
			case 0xA136:
				return 0x11;
			case 0xA137:
				return 0x11;
			case 0xA138:
				return 0x10;
			case 0xA139:
				return 0x11;
			case 0xA13A:
				return 0x12;
			case 0xA13B:
				return 0x11;
			case 0xA13C:
				return 0x12;
			case 0xA13D:
				return 0x11;
			case 0xA13E:
				return 0x11;
			case 0xA13F:
				return 0x10;
			case 0xA140:
				return 0x11;
			case 0xA141:
				return 0x12;
			case 0xA142:
				return 0x11;
			case 0xA143:
				return 0x12;
			case 0xA144:
				return 0x11;
			case 0xA145:
				return 0x11;
			case 0xA146:
				return 0x10;
			case 0xA147:
				return 0x11;
			case 0xA148:
				return 0x11;
			case 0xA149:
				return 0x10;
			case 0xA14A:
				return 0x11;
			case 0xA14B:
				return 0x11;
			case 0xA14C:
				return 0x11;
			case 0xA14D:
				return 0x10;
			case 0xA14E:
				return 0x11;
			case 0xA14F:
				return 0x12;
			case 0xA150:
				return 0x11;
			case 0xA151:
				return 0x11;
			case 0xA152:
				return 0x11;
			case 0xA153:
				return 0x10;
			case 0xA154:
				return 0x11;
			case 0xA155:
				return 0x12;
			case 0xA156:
				return 0x11;
			case 0xA157:
				return 0x11;
			case 0xA158:
				return 0x11;
			case 0xA159:
				return 0x10;
			case 0xA15A:
				return 0x11;
			case 0xA15B:
				return 0x11;
			case 0xA15C:
				return 0x11;
			case 0xA15D:
				return 0x10;
			case 0xA15E:
				return 0x11;
			case 0xA15F:
				return 0x11;
			case 0xA160:
				return 0x10;
			case 0xA161:
				return 0x11;
			case 0xA162:
				return 0x11;
			case 0xA163:
				return 0x11;
			case 0xA164:
				return 0x10;
			case 0xA165:
				return 0x11;
			case 0xA166:
				return 0x12;
			case 0xA167:
				return 0x11;
			case 0xA168:
				return 0x11;
			case 0xA169:
				return 0x11;
			case 0xA16A:
				return 0x10;
			case 0xA16B:
				return 0x11;
			case 0xA16C:
				return 0x12;
			case 0xA16D:
				return 0x12;
			case 0xA16E:
				return 0x11;
			case 0xA16F:
				return 0x12;
			case 0xA170:
				return 0x11;
			case 0xA171:
				return 0x11;
			case 0xA172:
				return 0x10;
			case 0xA173:
				return 0x11;
			case 0xA174:
				return 0x12;
			case 0xA175:
				return 0x11;
			case 0xA176:
				return 0x11;
			case 0xA177:
				return 0x11;
			case 0xA178:
				return 0x11;
			case 0xA179:
				return 0x11;
			case 0xA17A:
				return 0x10;
			case 0xA17B:
				return 0x11;
			case 0xA17C:
				return 0x11;
			case 0xA17D:
				return 0x10;
			case 0xA17E:
				return 0x10;
			case 0xA17F:
				return 0xF;
			case 0xA180:
				return 0x10;
			case 0xA181:
				return 0x11;
			case 0xA182:
				return 0x10;
			case 0xA183:
				return 0x11;
			case 0xA184:
				return 0x10;
			case 0xA185:
				return 0xF;
			case 0xA186:
				return 0x10;
			case 0xA187:
				return 0x11;
			case 0xA188:
				return 0x10;
			case 0xA189:
				return 0x11;
			case 0xA18A:
				return 0x10;
			case 0xA18B:
				return 0x10;
			case 0xA18C:
				return 0xF;
			case 0xA18D:
				return 0x10;
			case 0xA18E:
				return 0x10;
			case 0xA18F:
				return 0xF;
			case 0xA190:
				return 0x10;
			case 0xA191:
				return 0x10;
			case 0xA192:
				return 0x10;
			case 0xA193:
				return 0xF;
			case 0xA194:
				return 0x10;
			case 0xA195:
				return 0x11;
			case 0xA196:
				return 0x10;
			case 0xA197:
				return 0x11;
			case 0xA198:
				return 0x11;
			case 0xA199:
				return 0x10;
			case 0xA19A:
				return 0x11;
			case 0xA19B:
				return 0x12;
			case 0xA19C:
				return 0x11;
			case 0xA19D:
				return 0x12;
			case 0xA19E:
				return 0x11;
			case 0xA19F:
				return 0x11;
			case 0xA1A0:
				return 0x10;
			case 0xA1A1:
				return 0x11;
			case 0xA1A2:
				return 0x12;
			case 0xA1A3:
				return 0x11;
			case 0xA1A4:
				return 0x12;
			case 0xA1A5:
				return 0x11;
			case 0xA1A6:
				return 0x10;
			case 0xA1A7:
				return 0x11;
			case 0xA1A8:
				return 0x11;
			case 0xA1A9:
				return 0x10;
			case 0xA1AA:
				return 0x11;
			case 0xA1AB:
				return 0x11;
			case 0xA1AC:
				return 0x11;
			case 0xA1AD:
				return 0x10;
			case 0xA1AE:
				return 0x11;
			case 0xA1AF:
				return 0x12;
			case 0xA1B0:
				return 0x11;
			case 0xA1B1:
				return 0x11;
			case 0xA1B2:
				return 0x11;
			case 0xA1B3:
				return 0x10;
			case 0xA1B4:
				return 0x11;
			case 0xA1B5:
				return 0x12;
			case 0xA1B6:
				return 0x11;
			case 0xA1B7:
				return 0x10;
			case 0xA1B8:
				return 0x10;
			case 0xA1B9:
				return 0xF;
			case 0xA1BA:
				return 0x10;
			case 0xA1BB:
				return 0x11;
			case 0xA1BC:
				return 0x11;
			case 0xA1BD:
				return 0x10;
			case 0xA1BE:
				return 0x11;
			case 0xA1BF:
				return 0x10;
			case 0xA1C0:
				return 0x10;
			case 0xA1C1:
				return 0xF;
			case 0xA1C2:
				return 0x10;
			case 0xA1C3:
				return 0x11;
			case 0xA1C4:
				return 0x11;
			case 0xA1C5:
				return 0x10;
			case 0xA1C6:
				return 0x11;
			case 0xA1C7:
				return 0x10;
			case 0xA1C8:
				return 0x10;
			case 0xA1C9:
				return 0xF;
			case 0xA1CA:
				return 0x10;
			case 0xA1CB:
				return 0x10;
			case 0xA1CC:
				return 0xF;
			case 0xA1CD:
				return 0x10;
			case 0xA1CE:
				return 0x10;
			case 0xA1CF:
				return 0x10;
			case 0xA1D0:
				return 0xF;
			case 0xA1D1:
				return 0x10;
			case 0xA1D2:
				return 0x11;
			case 0xA1D3:
				return 0x10;
			case 0xA1D4:
				return 0x10;
			case 0xA1D5:
				return 0x10;
			case 0xA1D6:
				return 0xF;
			case 0xA1D7:
				return 0x10;
			case 0xA1D8:
				return 0x11;
			case 0xA1D9:
				return 0x10;
			case 0xA1DA:
				return 0x10;
			case 0xA1DB:
				return 0x10;
			case 0xA1DC:
				return 0xF;
			case 0xA1DD:
				return 0x10;
			case 0xA1DE:
				return 0x11;
			case 0xA1DF:
				return 0x11;
			case 0xA1E0:
				return 0x10;
			case 0xA1E1:
				return 0x11;
			case 0xA1E2:
				return 0x10;
			case 0xA1E3:
				return 0x10;
			case 0xA1E4:
				return 0xF;
			case 0xA1E5:
				return 0x10;
			case 0xA1E6:
				return 0x11;
			case 0xA1E7:
				return 0x11;
			case 0xA1E8:
				return 0x10;
			case 0xA1E9:
				return 0x11;
			case 0xA1EA:
				return 0x10;
			case 0xA1EB:
				return 0x10;
			case 0xA1EC:
				return 0xF;
			case 0xA1ED:
				return 0x10;
			case 0xA1EE:
				return 0x10;
			case 0xA1EF:
				return 0x10;
			case 0xA1F0:
				return 0xF;
			case 0xA1F1:
				return 0x10;
			case 0xA1F2:
				return 0x10;
			case 0xA1F3:
				return 0x10;
			case 0xA1F4:
				return 0xF;
			case 0xA1F5:
				return 0x10;
			case 0xA1F6:
				return 0x11;
			case 0xA1F7:
				return 0x10;
			case 0xA1F8:
				return 0x10;
			case 0xA1F9:
				return 0x10;
			case 0xA1FA:
				return 0xF;
			case 0xA1FB:
				return 0x10;
			case 0xA1FC:
				return 0x11;
			case 0xA1FD:
				return 0x10;
			case 0xA1FE:
				return 0x11;
			case 0xA1FF:
				return 0x10;
			case 0xA200:
				return 0x10;
			case 0xA201:
				return 0xF;
			case 0xA202:
				return 0x10;
			case 0xA203:
				return 0x11;
			case 0xA204:
				return 0x10;
			case 0xA205:
				return 0x11;
			case 0xA206:
				return 0x10;
			case 0xA207:
				return 0x10;
			case 0xA208:
				return 0xF;
			case 0xA209:
				return 0x10;
			case 0xA20A:
				return 0x10;
			case 0xA20B:
				return 0x10;
			case 0xA20C:
				return 0xF;
			case 0xA20D:
				return 0x10;
			case 0xA20E:
				return 0x10;
			case 0xA20F:
				return 0x10;
			case 0xA210:
				return 0xF;
			case 0xA211:
				return 0x10;
			case 0xA212:
				return 0x11;
			case 0xA213:
				return 0x10;
			case 0xA214:
				return 0x11;
			case 0xA215:
				return 0x11;
			case 0xA216:
				return 0x10;
			case 0xA217:
				return 0x12;
			case 0xA218:
				return 0x11;
			case 0xA219:
				return 0x12;
			case 0xA21A:
				return 0x11;
			case 0xA21B:
				return 0x11;
			case 0xA21C:
				return 0x10;
			case 0xA21D:
				return 0x11;
			case 0xA21E:
				return 0x12;
			case 0xA21F:
				return 0x12;
			case 0xA220:
				return 0x11;
			case 0xA221:
				return 0x12;
			case 0xA222:
				return 0x11;
			case 0xA223:
				return 0x11;
			case 0xA224:
				return 0x10;
			case 0xA225:
				return 0x11;
			case 0xA226:
				return 0x11;
			case 0xA227:
				return 0x11;
			case 0xA228:
				return 0x10;
			case 0xA229:
				return 0x11;
			case 0xA22A:
				return 0x11;
			case 0xA22B:
				return 0x11;
			case 0xA22C:
				return 0x10;
			case 0xA22D:
				return 0x11;
			case 0xA22E:
				return 0x12;
			case 0xA22F:
				return 0x11;
			case 0xA230:
				return 0x12;
			case 0xA231:
				return 0x11;
			case 0xA232:
				return 0x11;
			case 0xA233:
				return 0x11;
			case 0xA234:
				return 0x10;
			case 0xA235:
				return 0x11;
			case 0xA236:
				return 0x12;
			case 0xA237:
				return 0x11;
			case 0xA238:
				return 0x12;
			case 0xA239:
				return 0x11;
			case 0xA23A:
				return 0x11;
			case 0xA23B:
				return 0x10;
			case 0xA23C:
				return 0x11;
			case 0xA23D:
				return 0x11;
			case 0xA23E:
				return 0x10;
			case 0xA23F:
				return 0x11;
			case 0xA240:
				return 0x11;
			case 0xA241:
				return 0x11;
			case 0xA242:
				return 0x10;
			case 0xA243:
				return 0x11;
			case 0xA244:
				return 0x12;
			case 0xA245:
				return 0x11;
			case 0xA246:
				return 0x11;
			case 0xA247:
				return 0x11;
			case 0xA248:
				return 0x10;
			case 0xA249:
				return 0x11;
			case 0xA24A:
				return 0x12;
			case 0xA24B:
				return 0x12;
			case 0xA24C:
				return 0x11;
			case 0xA24D:
				return 0x12;
			case 0xA24E:
				return 0x11;
			case 0xA24F:
				return 0x11;
			case 0xA250:
				return 0x10;
			case 0xA251:
				return 0x11;
			case 0xA252:
				return 0x12;
			case 0xA253:
				return 0x12;
			case 0xA254:
				return 0x11;
			case 0xA255:
				return 0x12;
			case 0xA256:
				return 0x11;
			case 0xA257:
				return 0x11;
			case 0xA258:
				return 0x10;
			case 0xA259:
				return 0x11;
			case 0xA25A:
				return 0x11;
			case 0xA25B:
				return 0x10;
			case 0xA25C:
				return 0x11;
			case 0xA25D:
				return 0x12;
			case 0xA25E:
				return 0x11;
			case 0xA25F:
				return 0x12;
			case 0xA260:
				return 0x11;
			case 0xA261:
				return 0x11;
			case 0xA262:
				return 0x10;
			case 0xA263:
				return 0x11;
			case 0xA264:
				return 0x12;
			case 0xA265:
				return 0x12;
			case 0xA266:
				return 0x11;
			case 0xA267:
				return 0x11;
			case 0xA268:
				return 0x11;
			case 0xA269:
				return 0x10;
			case 0xA26A:
				return 0x11;
			case 0xA26B:
				return 0x11;
			case 0xA26C:
				return 0x10;
			case 0xA26D:
				return 0x11;
			case 0xA26E:
				return 0x10;
			case 0xA26F:
				return 0x11;
			case 0xA270:
				return 0x10;
			case 0xA271:
				return 0x10;
			case 0xA272:
				return 0x10;
			case 0xA273:
				return 0xF;
			case 0xA274:
				return 0x10;
			case 0xA275:
				return 0x11;
			case 0xA276:
				return 0x11;
			case 0xA277:
				return 0x10;
			case 0xA278:
				return 0x11;
			case 0xA279:
				return 0x10;
			case 0xA27A:
				return 0x10;
			case 0xA27B:
				return 0xF;
			case 0xA27C:
				return 0x10;
			case 0xA27D:
				return 0x10;
			case 0xA27E:
				return 0xF;
			case 0xA27F:
				return 0x10;
			case 0xA280:
				return 0x10;
			case 0xA281:
				return 0x10;
			case 0xA282:
				return 0xF;
			case 0xA283:
				return 0x10;
			case 0xA284:
				return 0x11;
			case 0xA285:
				return 0x10;
			case 0xA286:
				return 0x11;
			case 0xA287:
				return 0x10;
			case 0xA288:
				return 0xF;
			case 0xA289:
				return 0x10;
			case 0xA28A:
				return 0x10;
			case 0xA28B:
				return 0xF;
			case 0xA28C:
				return 0x10;
			case 0xA28D:
				return 0x10;
			case 0xA28E:
				return 0x10;
			case 0xA28F:
				return 0xF;
			case 0xA290:
				return 0x10;
			case 0xA291:
				return 0x11;
			case 0xA292:
				return 0x10;
			case 0xA293:
				return 0x11;
			case 0xA294:
				return 0x10;
			case 0xA295:
				return 0x10;
			case 0xA296:
				return 0xF;
			case 0xA297:
				return 0x10;
			case 0xA298:
				return 0x11;
			case 0xA299:
				return 0x10;
			case 0xA29A:
				return 0x11;
			case 0xA29B:
				return 0x10;
			case 0xA29C:
				return 0x10;
			case 0xA29D:
				return 0xF;
			case 0xA29E:
				return 0x10;
			case 0xA29F:
				return 0x10;
			case 0xA2A0:
				return 0xF;
			case 0xA2A1:
				return 0x10;
			case 0xA2A2:
				return 0x10;
			case 0xA2A3:
				return 0x10;
			case 0xA2A4:
				return 0xF;
			case 0xA2A5:
				return 0x10;
			case 0xA2A6:
				return 0x11;
			case 0xA2A7:
				return 0x10;
			case 0xA2A8:
				return 0x10;
			case 0xA2A9:
				return 0x10;
			case 0xA2AA:
				return 0xF;
			case 0xA2AB:
				return 0x10;
			case 0xA2AC:
				return 0x11;
			case 0xA2AD:
				return 0x10;
			case 0xA2AE:
				return 0x10;
			case 0xA2AF:
				return 0x10;
			case 0xA2B0:
				return 0xF;
			case 0xA2B1:
				return 0x10;
			case 0xA2B2:
				return 0x11;
			case 0xA2B3:
				return 0x11;
			case 0xA2B4:
				return 0x10;
			case 0xA2B5:
				return 0x11;
			case 0xA2B6:
				return 0x10;
			case 0xA2B7:
				return 0x10;
			case 0xA2B8:
				return 0xF;
			case 0xA2B9:
				return 0x10;
			case 0xA2BA:
				return 0x11;
			case 0xA2BB:
				return 0x10;
			case 0xA2BC:
				return 0x11;
			case 0xA2BD:
				return 0x10;
			case 0xA2BE:
				return 0x10;
			case 0xA2BF:
				return 0xF;
			case 0xA2C0:
				return 0x10;
			case 0xA2C1:
				return 0x10;
			case 0xA2C2:
				return 0xF;
			case 0xA2C3:
				return 0x10;
			case 0xA2C4:
				return 0x10;
			case 0xA2C5:
				return 0x10;
			case 0xA2C6:
				return 0xF;
			case 0xA2C7:
				return 0x10;
			case 0xA2C8:
				return 0x11;
			case 0xA2C9:
				return 0x10;
			case 0xA2CA:
				return 0x10;
			case 0xA2CB:
				return 0x10;
			case 0xA2CC:
				return 0xF;
			case 0xA2CD:
				return 0x10;
			case 0xA2CE:
				return 0x11;
			case 0xA2CF:
				return 0x10;
			case 0xA2D0:
				return 0x11;
			case 0xA2D1:
				return 0x11;
			case 0xA2D2:
				return 0x10;
			case 0xA2D3:
				return 0x11;
			case 0xA2D4:
				return 0x12;
			case 0xA2D5:
				return 0x12;
			case 0xA2D6:
				return 0x11;
			case 0xA2D7:
				return 0x12;
			case 0xA2D8:
				return 0x11;
			case 0xA2D9:
				return 0x11;
			case 0xA2DA:
				return 0x10;
			case 0xA2DB:
				return 0x11;
			case 0xA2DC:
				return 0x11;
			case 0xA2DD:
				return 0x10;
			case 0xA2DE:
				return 0x11;
			case 0xA2DF:
				return 0x11;
			case 0xA2E0:
				return 0x10;
			case 0xA2E1:
				return 0x11;
			case 0xA2E2:
				return 0x11;
			case 0xA2E3:
				return 0x10;
			case 0xA2E4:
				return 0x11;
			case 0xA2E5:
				return 0x12;
			case 0xA2E6:
				return 0x11;
			case 0xA2E7:
				return 0x11;
			case 0xA2E8:
				return 0x11;
			case 0xA2E9:
				return 0x10;
			case 0xA2EA:
				return 0x11;
			case 0xA2EB:
				return 0x12;
			case 0xA2EC:
				return 0x11;
			case 0xA2ED:
				return 0x11;
			case 0xA2EE:
				return 0x11;
			case 0xA2EF:
				return 0x10;
			case 0xA2F0:
				return 0x11;
			case 0xA2F1:
				return 0x12;
			case 0xA2F2:
				return 0x11;
			case 0xA2F3:
				return 0x12;
			case 0xA2F4:
				return 0x11;
			case 0xA2F5:
				return 0x11;
			case 0xA2F6:
				return 0x10;
			case 0xA2F7:
				return 0x11;
			case 0xA2F8:
				return 0x12;
			case 0xA2F9:
				return 0x11;
			case 0xA2FA:
				return 0x11;
			case 0xA2FB:
				return 0x11;
			case 0xA2FC:
				return 0x11;
			case 0xA2FD:
				return 0x10;
			case 0xA2FE:
				return 0x11;
			case 0xA2FF:
				return 0x10;
			case 0xA300:
				return 0x11;
			case 0xA301:
				return 0x12;
			case 0xA302:
				return 0x11;
			case 0xA303:
				return 0x11;
			case 0xA304:
				return 0x11;
			case 0xA305:
				return 0x10;
			case 0xA306:
				return 0x11;
			case 0xA307:
				return 0x12;
			case 0xA308:
				return 0x11;
			case 0xA309:
				return 0x10;
			case 0xA30A:
				return 0x10;
			case 0xA30B:
				return 0xF;
			case 0xA30C:
				return 0x10;
			case 0xA30D:
				return 0x11;
			case 0xA30E:
				return 0x10;
			case 0xA30F:
				return 0x11;
			case 0xA310:
				return 0x10;
			case 0xA311:
				return 0x10;
			case 0xA312:
				return 0xF;
			case 0xA313:
				return 0x10;
			case 0xA314:
				return 0x11;
			case 0xA315:
				return 0x10;
			case 0xA316:
				return 0x11;
			case 0xA317:
				return 0x10;
			case 0xA318:
				return 0x10;
			case 0xA319:
				return 0xF;
			case 0xA31A:
				return 0x10;
			case 0xA31B:
				return 0x10;
			case 0xA31C:
				return 0xF;
			case 0xA31D:
				return 0x10;
			case 0xA31E:
				return 0x10;
			case 0xA31F:
				return 0x10;
			case 0xA320:
				return 0xF;
			case 0xA321:
				return 0x10;
			case 0xA322:
				return 0x11;
			case 0xA323:
				return 0x10;
			case 0xA324:
				return 0x10;
			case 0xA325:
				return 0x10;
			case 0xA326:
				return 0xF;
			case 0xA327:
				return 0x10;
			case 0xA328:
				return 0x11;
			case 0xA329:
				return 0x10;
			case 0xA32A:
				return 0x11;
			case 0xA32B:
				return 0x11;
			case 0xA32C:
				return 0x10;
			case 0xA32D:
				return 0x11;
			case 0xA32E:
				return 0x12;
			case 0xA32F:
				return 0x11;
			case 0xA330:
				return 0x12;
			case 0xA331:
				return 0x11;
			case 0xA332:
				return 0x11;
			case 0xA333:
				return 0x10;
			case 0xA334:
				return 0x11;
			case 0xA335:
				return 0x11;
			case 0xA336:
				return 0x11;
			case 0xA337:
				return 0x10;
			case 0xA338:
				return 0x11;
			case 0xA339:
				return 0x11;
			case 0xA33A:
				return 0x10;
			case 0xA33B:
				return 0x11;
			case 0xA33C:
				return 0x11;
			case 0xA33D:
				return 0x11;
			case 0xA33E:
				return 0x10;
			case 0xA33F:
				return 0x11;
			case 0xA340:
				return 0x11;
			case 0xA341:
				return 0x11;
			case 0xA342:
				return 0x10;
			case 0xA343:
				return 0x11;
			case 0xA344:
				return 0x12;
			case 0xA345:
				return 0x11;
			case 0xA346:
				return 0x11;
			case 0xA347:
				return 0x11;
			case 0xA348:
				return 0x10;
			case 0xA349:
				return 0x11;
			case 0xA34A:
				return 0x12;
			case 0xA34B:
				return 0x11;
			case 0xA34C:
				return 0x12;
			case 0xA34D:
				return 0x11;
			case 0xA34E:
				return 0x11;
			case 0xA34F:
				return 0x10;
			case 0xA350:
				return 0x11;
			case 0xA351:
				return 0x11;
			case 0xA352:
				return 0x11;
			case 0xA353:
				return 0x10;
			case 0xA354:
				return 0x11;
			case 0xA355:
				return 0x11;
			case 0xA356:
				return 0x11;
			case 0xA357:
				return 0x10;
			case 0xA358:
				return 0x11;
			case 0xA359:
				return 0x12;
			case 0xA35A:
				return 0x11;
			case 0xA35B:
				return 0x11;
			case 0xA35C:
				return 0x11;
			case 0xA35D:
				return 0x10;
			case 0xA35E:
				return 0x11;
			case 0xA35F:
				return 0x12;
			case 0xA360:
				return 0x11;
			case 0xA361:
				return 0x11;
			case 0xA362:
				return 0x11;
			case 0xA363:
				return 0x10;
			case 0xA364:
				return 0x11;
			case 0xA365:
				return 0x12;
			case 0xA366:
				return 0x12;
			case 0xA367:
				return 0x11;
			case 0xA368:
				return 0x12;
			case 0xA369:
				return 0x11;
			case 0xA36A:
				return 0x11;
			case 0xA36B:
				return 0x10;
			case 0xA36C:
				return 0x11;
			case 0xA36D:
				return 0x11;
			case 0xA36E:
				return 0x11;
			case 0xA36F:
				return 0x10;
			case 0xA370:
				return 0x11;
			case 0xA371:
				return 0x11;
			case 0xA372:
				return 0x10;
			case 0xA373:
				return 0x11;
			case 0xA374:
				return 0x12;
			case 0xA375:
				return 0x11;
			case 0xA376:
				return 0x11;
			case 0xA377:
				return 0x11;
			case 0xA378:
				return 0x10;
			case 0xA379:
				return 0x11;
			case 0xA37A:
				return 0x12;
			case 0xA37B:
				return 0x11;
			case 0xA37C:
				return 0x11;
			case 0xA37D:
				return 0x10;
			case 0xA37E:
				return 0x12;
			case 0xA37F:
				return 0x11;
			case 0xA380:
				return 0x11;
			case 0xA381:
				return 0x11;
			case 0xA382:
				return 0x10;
			case 0xA383:
				return 0x11;
			case 0xA384:
				return 0x11;
			case 0xA385:
				return 0x11;
			case 0xA386:
				return 0x10;
			case 0xA387:
				return 0x11;
			case 0xA388:
				return 0x11;
			case 0xA389:
				return 0x11;
			case 0xA38A:
				return 0x10;
			case 0xA38B:
				return 0x11;
			case 0xA38C:
				return 0x12;
			case 0xA38D:
				return 0x11;
			case 0xA38E:
				return 0x11;
			case 0xA38F:
				return 0x11;
			case 0xA390:
				return 0x10;
			case 0xA391:
				return 0x11;
			case 0xA392:
				return 0x12;
			case 0xA393:
				return 0x11;
			case 0xA394:
				return 0x11;
			case 0xA395:
				return 0x11;
			case 0xA396:
				return 0x10;
			case 0xA397:
				return 0x11;
			case 0xA398:
				return 0x11;
			case 0xA399:
				return 0x10;
			case 0xA39A:
				return 0x11;
			case 0xA39B:
				return 0x11;
			case 0xA39C:
				return 0x11;
			case 0xA39D:
				return 0x10;
			case 0xA39E:
				return 0x11;
			case 0xA39F:
				return 0x11;
			case 0xA3A0:
				return 0x11;
			case 0xA3A1:
				return 0x10;
			case 0xA3A2:
				return 0x11;
			case 0xA3A3:
				return 0x12;
			case 0xA3A4:
				return 0x11;
			case 0xA3A5:
				return 0x11;
			case 0xA3A6:
				return 0x11;
			case 0xA3A7:
				return 0x10;
			case 0xA3A8:
				return 0x11;
			case 0xA3A9:
				return 0x12;
			case 0xA3AA:
				return 0x11;
			case 0xA3AB:
				return 0x11;
			case 0xA3AC:
				return 0x11;
			case 0xA3AD:
				return 0x10;
			case 0xA3AE:
				return 0x11;
			case 0xA3AF:
				return 0x12;
			case 0xA3B0:
				return 0x11;
			case 0xA3B1:
				return 0x12;
			case 0xA3B2:
				return 0x11;
			case 0xA3B3:
				return 0x11;
			case 0xA3B4:
				return 0x10;
			case 0xA3B5:
				return 0x11;
			case 0xA3B6:
				return 0x11;
			case 0xA3B7:
				return 0x11;
			case 0xA3B8:
				return 0x10;
			case 0xA3B9:
				return 0x11;
			case 0xA3BA:
				return 0x11;
			case 0xA3BB:
				return 0x11;
			case 0xA3BC:
				return 0x10;
			case 0xA3BD:
				return 0x11;
			case 0xA3BE:
				return 0x12;
			case 0xA3BF:
				return 0x11;
			case 0xA3C0:
				return 0x11;
			case 0xA3C1:
				return 0x11;
			case 0xA3C2:
				return 0x10;
			case 0xA3C3:
				return 0x11;
			case 0xA3C4:
				return 0x12;
			case 0xA3C5:
				return 0x11;
			case 0xA3C6:
				return 0x10;
			case 0xA3C7:
				return 0x10;
			case 0xA3C8:
				return 0xF;
			case 0xA3C9:
				return 0x10;
			case 0xA3CA:
				return 0x11;
			case 0xA3CB:
				return 0x10;
			case 0xA3CC:
				return 0x11;
			case 0xA3CD:
				return 0x10;
			case 0xA3CE:
				return 0x10;
			case 0xA3CF:
				return 0xF;
			case 0xA3D0:
				return 0x10;
			case 0xA3D1:
				return 0x10;
			case 0xA3D2:
				return 0xF;
			case 0xA3D3:
				return 0x10;
			case 0xA3D4:
				return 0x10;
			case 0xA3D5:
				return 0x10;
			case 0xA3D6:
				return 0xF;
			case 0xA3D7:
				return 0x10;
			case 0xA3D8:
				return 0x11;
			case 0xA3D9:
				return 0x10;
			case 0xA3DA:
				return 0x10;
			case 0xA3DB:
				return 0x10;
			case 0xA3DC:
				return 0xF;
			case 0xA3DD:
				return 0x10;
			case 0xA3DE:
				return 0x11;
			case 0xA3DF:
				return 0x10;
			case 0xA3E0:
				return 0x10;
			case 0xA3E1:
				return 0x10;
			case 0xA3E2:
				return 0xF;
			case 0xA3E3:
				return 0x10;
			case 0xA3E4:
				return 0x11;
			case 0xA3E5:
				return 0x11;
			case 0xA3E6:
				return 0x10;
			case 0xA3E7:
				return 0x11;
			case 0xA3E8:
				return 0x11;
			case 0xA3E9:
				return 0x11;
			case 0xA3EA:
				return 0x10;
			case 0xA3EB:
				return 0x11;
			case 0xA3EC:
				return 0x10;
			case 0xA3ED:
				return 0x10;
			case 0xA3EE:
				return 0xF;
			case 0xA3EF:
				return 0x10;
			case 0xA3F0:
				return 0x10;
			case 0xA3F1:
				return 0x10;
			case 0xA3F2:
				return 0xF;
			case 0xA3F3:
				return 0x10;
			case 0xA3F4:
				return 0x11;
			case 0xA3F5:
				return 0x10;
			case 0xA3F6:
				return 0x10;
			case 0xA3F7:
				return 0x10;
			case 0xA3F8:
				return 0xF;
			case 0xA3F9:
				return 0x10;
			case 0xA3FA:
				return 0x11;
			case 0xA3FB:
				return 0x10;
			case 0xA3FC:
				return 0x10;
			case 0xA3FD:
				return 0x10;
			case 0xA3FE:
				return 0xF;
			case 0xA3FF:
				return 0x10;
			case 0xA400:
				return 0x11;
			case 0xA401:
				return 0x11;
			case 0xA402:
				return 0x10;
			case 0xA403:
				return 0x11;
			case 0xA404:
				return 0x11;
			case 0xA405:
				return 0x11;
			case 0xA406:
				return 0x10;
			case 0xA407:
				return 0x11;
			case 0xA408:
				return 0x10;
			case 0xA409:
				return 0x10;
			case 0xA40A:
				return 0xF;
			case 0xA40B:
				return 0x10;
			case 0xA40C:
				return 0x10;
			case 0xA40D:
				return 0x10;
			case 0xA40E:
				return 0xF;
			case 0xA40F:
				return 0x10;
			case 0xA410:
				return 0x11;
			case 0xA411:
				return 0x10;
			case 0xA412:
				return 0x10;
			case 0xA413:
				return 0x10;
			case 0xA414:
				return 0xF;
			case 0xA415:
				return 0x10;
			case 0xA416:
				return 0x11;
			case 0xA417:
				return 0x10;
			case 0xA418:
				return 0x11;
			case 0xA419:
				return 0x11;
			case 0xA41A:
				return 0x10;
			case 0xA41B:
				return 0x11;
			case 0xA41C:
				return 0x12;
			case 0xA41D:
				return 0x12;
			case 0xA41E:
				return 0x11;
			case 0xA41F:
				return 0x12;
			case 0xA420:
				return 0x12;
			case 0xA421:
				return 0x11;
			case 0xA422:
				return 0x12;
			case 0xA423:
				return 0x11;
			case 0xA424:
				return 0x11;
			case 0xA425:
				return 0x10;
			case 0xA426:
				return 0x11;
			case 0xA427:
				return 0x11;
			case 0xA428:
				return 0x11;
			case 0xA429:
				return 0x10;
			case 0xA42A:
				return 0x11;
			case 0xA42B:
				return 0x12;
			case 0xA42C:
				return 0x11;
			case 0xA42D:
				return 0x11;
			case 0xA42E:
				return 0x11;
			case 0xA42F:
				return 0x10;
			case 0xA430:
				return 0x11;
			case 0xA431:
				return 0x11;
			case 0xA432:
				return 0x11;
			case 0xA433:
				return 0x10;
			case 0xA434:
				return 0x11;
			case 0xA435:
				return 0x12;
			case 0xA436:
				return 0x12;
			case 0xA437:
				return 0x11;
			case 0xA438:
				return 0x12;
			case 0xA439:
				return 0x12;
			case 0xA43A:
				return 0x11;
			case 0xA43B:
				return 0x11;
			case 0xA43C:
				return 0x11;
			case 0xA43D:
				return 0x10;
			case 0xA43E:
				return 0x11;
			case 0xA43F:
				return 0x11;
			case 0xA440:
				return 0x10;
			case 0xA441:
				return 0x11;
			case 0xA442:
				return 0x12;
			case 0xA443:
				return 0x11;
			case 0xA444:
				return 0x11;
			case 0xA445:
				return 0x11;
			case 0xA446:
				return 0x10;
			case 0xA447:
				return 0x11;
			case 0xA448:
				return 0x12;
			case 0xA449:
				return 0x11;
			case 0xA44A:
				return 0x11;
			case 0xA44B:
				return 0x11;
			case 0xA44C:
				return 0x10;
			case 0xA44D:
				return 0x11;
			case 0xA44E:
				return 0x12;
			case 0xA44F:
				return 0x12;
			case 0xA450:
				return 0x11;
			case 0xA451:
				return 0x12;
			case 0xA452:
				return 0x12;
			case 0xA453:
				return 0x11;
			case 0xA454:
				return 0x12;
			case 0xA455:
				return 0x11;
			case 0xA456:
				return 0x11;
			case 0xA457:
				return 0x10;
			case 0xA458:
				return 0x11;
			case 0xA459:
				return 0x11;
			case 0xA45A:
				return 0x11;
			case 0xA45B:
				return 0x10;
			case 0xA45C:
				return 0x11;
			case 0xA45D:
				return 0x10;
			case 0xA45E:
				return 0x10;
			case 0xA45F:
				return 0xF;
			case 0xA460:
				return 0x10;
			case 0xA461:
				return 0x11;
			case 0xA462:
				return 0x11;
			case 0xA463:
				return 0x10;
			case 0xA464:
				return 0x11;
			case 0xA465:
				return 0x11;
			case 0xA466:
				return 0x10;
			case 0xA467:
				return 0x10;
			case 0xA468:
				return 0x10;
			case 0xA469:
				return 0xF;
			case 0xA46A:
				return 0x10;
			case 0xA46B:
				return 0x10;
			case 0xA46C:
				return 0x10;
			case 0xA46D:
				return 0xF;
			case 0xA46E:
				return 0x10;
			case 0xA46F:
				return 0x11;
			case 0xA470:
				return 0x10;
			case 0xA471:
				return 0x10;
			case 0xA472:
				return 0x10;
			case 0xA473:
				return 0xF;
			case 0xA474:
				return 0x10;
			case 0xA475:
				return 0x11;
			case 0xA476:
				return 0x11;
			case 0xA477:
				return 0x10;
			case 0xA478:
				return 0x11;
			case 0xA479:
				return 0x11;
			case 0xA47A:
				return 0x11;
			case 0xA47B:
				return 0x10;
			case 0xA47C:
				return 0x11;
			case 0xA47D:
				return 0x10;
			case 0xA47E:
				return 0x10;
			case 0xA47F:
				return 0xF;
			case 0xA480:
				return 0x10;
			case 0xA481:
				return 0x10;
			case 0xA482:
				return 0x10;
			case 0xA483:
				return 0xF;
			case 0xA484:
				return 0x10;
			case 0xA485:
				return 0x11;
			case 0xA486:
				return 0x10;
			case 0xA487:
				return 0x10;
			case 0xA488:
				return 0x10;
			case 0xA489:
				return 0xF;
			case 0xA48A:
				return 0x10;
			case 0xA48B:
				return 0x11;
			case 0xA48C:
				return 0x10;
			case 0xA490:
				return 0xF;
			case 0xA491:
				return 0xE;
			case 0xA492:
				return 0xF;
			case 0xA493:
				return 0x10;
			case 0xA494:
				return 0xF;
			case 0xA495:
				return 0xF;
			case 0xA496:
				return 0x10;
			case 0xA497:
				return 0xF;
			case 0xA498:
				return 0xE;
			case 0xA499:
				return 0x10;
			case 0xA49A:
				return 0xF;
			case 0xA49B:
				return 0x10;
			case 0xA49C:
				return 0xF;
			case 0xA49D:
				return 0xE;
			case 0xA49E:
				return 0xF;
			case 0xA49F:
				return 0x10;
			case 0xA4A0:
				return 0xF;
			case 0xA4A1:
				return 0xE;
			case 0xA4A2:
				return 0xF;
			case 0xA4A3:
				return 0xF;
			case 0xA4A4:
				return 0x10;
			case 0xA4A5:
				return 0xF;
			case 0xA4A6:
				return 0x10;
			case 0xA4A7:
				return 0x10;
			case 0xA4A8:
				return 0xE;
			case 0xA4A9:
				return 0xE;
			case 0xA4AA:
				return 0x10;
			case 0xA4AB:
				return 0xF;
			case 0xA4AC:
				return 0xF;
			case 0xA4AD:
				return 0xF;
			case 0xA4AE:
				return 0xF;
			case 0xA4AF:
				return 0xF;
			case 0xA4B0:
				return 0xF;
			case 0xA4B1:
				return 0xF;
			case 0xA4B2:
				return 0xE;
			case 0xA4B3:
				return 0xE;
			case 0xA4B4:
				return 0x10;
			case 0xA4B5:
				return 0xF;
			case 0xA4B6:
				return 0xF;
			case 0xA4B7:
				return 0x10;
			case 0xA4B8:
				return 0xE;
			case 0xA4B9:
				return 0xE;
			case 0xA4BA:
				return 0x10;
			case 0xA4BB:
				return 0xF;
			case 0xA4BC:
				return 0xE;
			case 0xA4BD:
				return 0x10;
			case 0xA4BE:
				return 0xF;
			case 0xA4BF:
				return 0x10;
			case 0xA4C0:
				return 0x10;
			case 0xA4C1:
				return 0xF;
			case 0xA4C2:
				return 0x10;
			case 0xA4C3:
				return 0xF;
			case 0xA4C4:
				return 0x11;
			case 0xA4C5:
				return 0x10;
			case 0xA4C6:
				return 0xE;
			case 0xA4D0:
				return 0xF;
			case 0xA4D1:
				return 0xF;
			case 0xA4D2:
				return 0x10;
			case 0xA4D3:
				return 0xF;
			case 0xA4D4:
				return 0xF;
			case 0xA4D5:
				return 0x10;
			case 0xA4D6:
				return 0xF;
			case 0xA4D7:
				return 0xF;
			case 0xA4D8:
				return 0x10;
			case 0xA4D9:
				return 0xF;
			case 0xA4DA:
				return 0xF;
			case 0xA4DB:
				return 0x10;
			case 0xA4DC:
				return 0x10;
			case 0xA4DD:
				return 0x10;
			case 0xA4DE:
				return 0x11;
			case 0xA4DF:
				return 0xF;
			case 0xA4E0:
				return 0xF;
			case 0xA4E1:
				return 0xF;
			case 0xA4E2:
				return 0xF;
			case 0xA4E3:
				return 0x10;
			case 0xA4E4:
				return 0xF;
			case 0xA4E5:
				return 0x10;
			case 0xA4E6:
				return 0xF;
			case 0xA4E7:
				return 0xF;
			case 0xA4E8:
				return 0x10;
			case 0xA4E9:
				return 0xF;
			case 0xA4EA:
				return 0xF;
			case 0xA4EB:
				return 0x10;
			case 0xA4EC:
				return 0xF;
			case 0xA4ED:
				return 0x10;
			case 0xA4EE:
				return 0xE;
			case 0xA4EF:
				return 0xF;
			case 0xA4F0:
				return 0xE;
			case 0xA4F1:
				return 0xF;
			case 0xA4F2:
				return 0xE;
			case 0xA4F3:
				return 0xE;
			case 0xA4F4:
				return 0xE;
			case 0xA4F5:
				return 0xF;
			case 0xA4F6:
				return 0xF;
			case 0xA4F7:
				return 0xF;
			case 0xA4F8:
				return 0x18;
			case 0xA4F9:
				return 0x17;
			case 0xA4FA:
				return 0x19;
			case 0xA4FB:
				return 0x18;
			case 0xA4FC:
				return 0x18;
			case 0xA4FD:
				return 0x19;
			case 0xA4FE:
				return 0x17;
			case 0xA4FF:
				return 0x1B;
			case 0xA500:
				return 0x10;
			case 0xA501:
				return 0x11;
			case 0xA502:
				return 0x11;
			case 0xA503:
				return 0x11;
			case 0xA504:
				return 0x12;
			case 0xA505:
				return 0x11;
			case 0xA506:
				return 0x12;
			case 0xA507:
				return 0x11;
			case 0xA508:
				return 0x12;
			case 0xA509:
				return 0x12;
			case 0xA50A:
				return 0x13;
			case 0xA50B:
				return 0x12;
			case 0xA50C:
				return 0x11;
			case 0xA50D:
				return 0x11;
			case 0xA50E:
				return 0x11;
			case 0xA50F:
				return 0x12;
			case 0xA510:
				return 0x12;
			case 0xA511:
				return 0x13;
			case 0xA512:
				return 0x11;
			case 0xA513:
				return 0x11;
			case 0xA514:
				return 0x11;
			case 0xA515:
				return 0x12;
			case 0xA516:
				return 0x11;
			case 0xA517:
				return 0x12;
			case 0xA518:
				return 0x11;
			case 0xA519:
				return 0x12;
			case 0xA51A:
				return 0x11;
			case 0xA51B:
				return 0x11;
			case 0xA51C:
				return 0x12;
			case 0xA51D:
				return 0x11;
			case 0xA51E:
				return 0x11;
			case 0xA51F:
				return 0x13;
			case 0xA520:
				return 0x11;
			case 0xA521:
				return 0x11;
			case 0xA522:
				return 0x11;
			case 0xA523:
				return 0x12;
			case 0xA524:
				return 0xF;
			case 0xA525:
				return 0x10;
			case 0xA526:
				return 0x10;
			case 0xA527:
				return 0x11;
			case 0xA528:
				return 0x10;
			case 0xA529:
				return 0x11;
			case 0xA52A:
				return 0x10;
			case 0xA52B:
				return 0x11;
			case 0xA52C:
				return 0x10;
			case 0xA52D:
				return 0x11;
			case 0xA52E:
				return 0x11;
			case 0xA52F:
				return 0x12;
			case 0xA530:
				return 0x11;
			case 0xA531:
				return 0x10;
			case 0xA532:
				return 0x10;
			case 0xA533:
				return 0x10;
			case 0xA534:
				return 0x11;
			case 0xA535:
				return 0x11;
			case 0xA536:
				return 0x12;
			case 0xA537:
				return 0x10;
			case 0xA538:
				return 0x10;
			case 0xA539:
				return 0x10;
			case 0xA53A:
				return 0x11;
			case 0xA53B:
				return 0x10;
			case 0xA53C:
				return 0x11;
			case 0xA53D:
				return 0x10;
			case 0xA53E:
				return 0x11;
			case 0xA53F:
				return 0x10;
			case 0xA540:
				return 0x10;
			case 0xA541:
				return 0x11;
			case 0xA542:
				return 0x10;
			case 0xA543:
				return 0x10;
			case 0xA544:
				return 0x12;
			case 0xA545:
				return 0x10;
			case 0xA546:
				return 0x10;
			case 0xA547:
				return 0x10;
			case 0xA548:
				return 0x11;
			case 0xA549:
				return 0xF;
			case 0xA54A:
				return 0x10;
			case 0xA54B:
				return 0x12;
			case 0xA54C:
				return 0x10;
			case 0xA54D:
				return 0x11;
			case 0xA54E:
				return 0x10;
			case 0xA54F:
				return 0x11;
			case 0xA550:
				return 0x10;
			case 0xA551:
				return 0x11;
			case 0xA552:
				return 0x10;
			case 0xA553:
				return 0x11;
			case 0xA554:
				return 0x11;
			case 0xA555:
				return 0x12;
			case 0xA556:
				return 0x12;
			case 0xA557:
				return 0x11;
			case 0xA558:
				return 0x10;
			case 0xA559:
				return 0x10;
			case 0xA55A:
				return 0x10;
			case 0xA55B:
				return 0x11;
			case 0xA55C:
				return 0x11;
			case 0xA55D:
				return 0x12;
			case 0xA55E:
				return 0x10;
			case 0xA55F:
				return 0x10;
			case 0xA560:
				return 0x10;
			case 0xA561:
				return 0x11;
			case 0xA562:
				return 0x10;
			case 0xA563:
				return 0x11;
			case 0xA564:
				return 0x10;
			case 0xA565:
				return 0x11;
			case 0xA566:
				return 0x10;
			case 0xA567:
				return 0x10;
			case 0xA568:
				return 0x11;
			case 0xA569:
				return 0x10;
			case 0xA56A:
				return 0x10;
			case 0xA56B:
				return 0x11;
			case 0xA56C:
				return 0x12;
			case 0xA56D:
				return 0x10;
			case 0xA56E:
				return 0x10;
			case 0xA56F:
				return 0x10;
			case 0xA570:
				return 0x11;
			case 0xA571:
				return 0x10;
			case 0xA572:
				return 0x11;
			case 0xA573:
				return 0x11;
			case 0xA574:
				return 0x11;
			case 0xA575:
				return 0x12;
			case 0xA576:
				return 0x11;
			case 0xA577:
				return 0x12;
			case 0xA578:
				return 0x11;
			case 0xA579:
				return 0x12;
			case 0xA57A:
				return 0x12;
			case 0xA57B:
				return 0x13;
			case 0xA57C:
				return 0x12;
			case 0xA57D:
				return 0x11;
			case 0xA57E:
				return 0x11;
			case 0xA57F:
				return 0x11;
			case 0xA580:
				return 0x12;
			case 0xA581:
				return 0x12;
			case 0xA582:
				return 0x13;
			case 0xA583:
				return 0x11;
			case 0xA584:
				return 0x11;
			case 0xA585:
				return 0x11;
			case 0xA586:
				return 0x12;
			case 0xA587:
				return 0x11;
			case 0xA588:
				return 0x12;
			case 0xA589:
				return 0x11;
			case 0xA58A:
				return 0x12;
			case 0xA58B:
				return 0x11;
			case 0xA58C:
				return 0x11;
			case 0xA58D:
				return 0x12;
			case 0xA58E:
				return 0x11;
			case 0xA58F:
				return 0x11;
			case 0xA590:
				return 0x13;
			case 0xA591:
				return 0x11;
			case 0xA592:
				return 0x11;
			case 0xA593:
				return 0x11;
			case 0xA594:
				return 0x12;
			case 0xA595:
				return 0xF;
			case 0xA596:
				return 0x10;
			case 0xA597:
				return 0x10;
			case 0xA598:
				return 0x11;
			case 0xA599:
				return 0x10;
			case 0xA59A:
				return 0x11;
			case 0xA59B:
				return 0x10;
			case 0xA59C:
				return 0x11;
			case 0xA59D:
				return 0x10;
			case 0xA59E:
				return 0x11;
			case 0xA59F:
				return 0x11;
			case 0xA5A0:
				return 0x12;
			case 0xA5A1:
				return 0x11;
			case 0xA5A2:
				return 0x10;
			case 0xA5A3:
				return 0x10;
			case 0xA5A4:
				return 0x10;
			case 0xA5A5:
				return 0x11;
			case 0xA5A6:
				return 0x11;
			case 0xA5A7:
				return 0x12;
			case 0xA5A8:
				return 0x10;
			case 0xA5A9:
				return 0x10;
			case 0xA5AA:
				return 0x10;
			case 0xA5AB:
				return 0x11;
			case 0xA5AC:
				return 0x10;
			case 0xA5AD:
				return 0x11;
			case 0xA5AE:
				return 0x10;
			case 0xA5AF:
				return 0x11;
			case 0xA5B0:
				return 0x10;
			case 0xA5B1:
				return 0x10;
			case 0xA5B2:
				return 0x11;
			case 0xA5B3:
				return 0x10;
			case 0xA5B4:
				return 0x10;
			case 0xA5B5:
				return 0x12;
			case 0xA5B6:
				return 0x10;
			case 0xA5B7:
				return 0x10;
			case 0xA5B8:
				return 0x10;
			case 0xA5B9:
				return 0x11;
			case 0xA5BA:
				return 0xF;
			case 0xA5BB:
				return 0x10;
			case 0xA5BC:
				return 0x12;
			case 0xA5BD:
				return 0x10;
			case 0xA5BE:
				return 0x11;
			case 0xA5BF:
				return 0x10;
			case 0xA5C0:
				return 0x11;
			case 0xA5C1:
				return 0x10;
			case 0xA5C2:
				return 0x11;
			case 0xA5C3:
				return 0x10;
			case 0xA5C4:
				return 0x11;
			case 0xA5C5:
				return 0x11;
			case 0xA5C6:
				return 0x12;
			case 0xA5C7:
				return 0x11;
			case 0xA5C8:
				return 0x12;
			case 0xA5C9:
				return 0x10;
			case 0xA5CA:
				return 0x10;
			case 0xA5CB:
				return 0x10;
			case 0xA5CC:
				return 0x11;
			case 0xA5CD:
				return 0x11;
			case 0xA5CE:
				return 0x12;
			case 0xA5CF:
				return 0x10;
			case 0xA5D0:
				return 0x10;
			case 0xA5D1:
				return 0x10;
			case 0xA5D2:
				return 0x11;
			case 0xA5D3:
				return 0x10;
			case 0xA5D4:
				return 0x11;
			case 0xA5D5:
				return 0x10;
			case 0xA5D6:
				return 0x11;
			case 0xA5D7:
				return 0x10;
			case 0xA5D8:
				return 0x10;
			case 0xA5D9:
				return 0x11;
			case 0xA5DA:
				return 0x10;
			case 0xA5DB:
				return 0x10;
			case 0xA5DC:
				return 0x12;
			case 0xA5DD:
				return 0x10;
			case 0xA5DE:
				return 0x10;
			case 0xA5DF:
				return 0x10;
			case 0xA5E0:
				return 0x11;
			case 0xA5E1:
				return 0xF;
			case 0xA5E2:
				return 0x10;
			case 0xA5E3:
				return 0x12;
			case 0xA5E4:
				return 0x10;
			case 0xA5E5:
				return 0x11;
			case 0xA5E6:
				return 0x10;
			case 0xA5E7:
				return 0x11;
			case 0xA5E8:
				return 0x10;
			case 0xA5E9:
				return 0x11;
			case 0xA5EA:
				return 0x10;
			case 0xA5EB:
				return 0x11;
			case 0xA5EC:
				return 0x11;
			case 0xA5ED:
				return 0x12;
			case 0xA5EE:
				return 0x12;
			case 0xA5EF:
				return 0x11;
			case 0xA5F0:
				return 0x12;
			case 0xA5F1:
				return 0x10;
			case 0xA5F2:
				return 0x10;
			case 0xA5F3:
				return 0x10;
			case 0xA5F4:
				return 0x11;
			case 0xA5F5:
				return 0x11;
			case 0xA5F6:
				return 0x12;
			case 0xA5F7:
				return 0x10;
			case 0xA5F8:
				return 0x10;
			case 0xA5F9:
				return 0x10;
			case 0xA5FA:
				return 0x11;
			case 0xA5FB:
				return 0x10;
			case 0xA5FC:
				return 0x11;
			case 0xA5FD:
				return 0x10;
			case 0xA5FE:
				return 0x11;
			case 0xA5FF:
				return 0x10;
			case 0xA600:
				return 0x10;
			case 0xA601:
				return 0x11;
			case 0xA602:
				return 0x10;
			case 0xA603:
				return 0x10;
			case 0xA604:
				return 0x12;
			case 0xA605:
				return 0x13;
			case 0xA606:
				return 0x10;
			case 0xA607:
				return 0x11;
			case 0xA608:
				return 0x10;
			case 0xA609:
				return 0x10;
			case 0xA60A:
				return 0x11;
			case 0xA60B:
				return 0x10;
			case 0xA60C:
				return 0x18;
			case 0xA60D:
				return 0xA;
			case 0xA60E:
				return 0xE;
			case 0xA60F:
				return 0x12;
			case 0xA610:
				return 0x16;
			case 0xA611:
				return 0x16;
			case 0xA612:
				return 0x17;
			case 0xA613:
				return 0x11;
			case 0xA614:
				return 0x11;
			case 0xA615:
				return 0x10;
			case 0xA616:
				return 0xF;
			case 0xA617:
				return 0x10;
			case 0xA618:
				return 0xF;
			case 0xA619:
				return 0xF;
			case 0xA61A:
				return 0x10;
			case 0xA61B:
				return 0x11;
			case 0xA61C:
				return 0x10;
			case 0xA61D:
				return 0x10;
			case 0xA61E:
				return 0x10;
			case 0xA61F:
				return 0x10;
			case 0xA620:
				return 0xF;
			case 0xA621:
				return 0xE;
			case 0xA622:
				return 0xE;
			case 0xA623:
				return 0x10;
			case 0xA624:
				return 0xF;
			case 0xA625:
				return 0xF;
			case 0xA626:
				return 0xE;
			case 0xA627:
				return 0x10;
			case 0xA628:
				return 0x10;
			case 0xA629:
				return 0xF;
			case 0xA62A:
				return 0x16;
			case 0xA62B:
				return 0x16;
			case 0xA640:
				return 0x1F;
			case 0xA641:
				return 0x1D;
			case 0xA642:
				return 0x1E;
			case 0xA643:
				return 0x1C;
			case 0xA644:
				return 0x25;
			case 0xA645:
				return 0x23;
			case 0xA646:
				return 0x1D;
			case 0xA647:
				return 0x1B;
			case 0xA648:
				return 0x1E;
			case 0xA649:
				return 0x1C;
			case 0xA64A:
				return 0x25;
			case 0xA64B:
				return 0x23;
			case 0xA64C:
				return 0x24;
			case 0xA64D:
				return 0x22;
			case 0xA64E:
				return 0x24;
			case 0xA64F:
				return 0x22;
			case 0xA650:
				return 0x2B;
			case 0xA651:
				return 0x29;
			case 0xA652:
				return 0x25;
			case 0xA653:
				return 0x23;
			case 0xA654:
				return 0x24;
			case 0xA655:
				return 0x22;
			case 0xA656:
				return 0x23;
			case 0xA657:
				return 0x21;
			case 0xA658:
				return 0x2A;
			case 0xA659:
				return 0x28;
			case 0xA65A:
				return 0x24;
			case 0xA65B:
				return 0x22;
			case 0xA65C:
				return 0x33;
			case 0xA65D:
				return 0x31;
			case 0xA65E:
				return 0x1B;
			case 0xA65F:
				return 0x19;
			case 0xA660:
				return 0x25;
			case 0xA661:
				return 0x23;
			case 0xA662:
				return 0x20;
			case 0xA663:
				return 0x1E;
			case 0xA664:
				return 0x20;
			case 0xA665:
				return 0x1E;
			case 0xA666:
				return 0x20;
			case 0xA667:
				return 0x1E;
			case 0xA668:
				return 0x24;
			case 0xA669:
				return 0x22;
			case 0xA66A:
				return 0x24;
			case 0xA66B:
				return 0x22;
			case 0xA66C:
				return 0x2B;
			case 0xA66D:
				return 0x29;
			case 0xA66E:
				return 0x1E;
			case 0xA66F:
				return 0x19;
			case 0xA670:
				return 0x25;
			case 0xA671:
				return 0x29;
			case 0xA672:
				return 0x2A;
			case 0xA673:
				return 0x12;
			case 0xA674:
				return 0x27;
			case 0xA675:
				return 0x1C;
			case 0xA676:
				return 0x1D;
			case 0xA677:
				return 0x1C;
			case 0xA678:
				return 0x24;
			case 0xA679:
				return 0x1F;
			case 0xA67A:
				return 0x24;
			case 0xA67B:
				return 0x20;
			case 0xA67C:
				return 0x1A;
			case 0xA67D:
				return 0x1B;
			case 0xA67E:
				return 0x10;
			case 0xA67F:
				return 0x11;
			case 0xA680:
				return 0x1C;
			case 0xA681:
				return 0x1A;
			case 0xA682:
				return 0x1D;
			case 0xA683:
				return 0x1B;
			case 0xA684:
				return 0x1D;
			case 0xA685:
				return 0x1B;
			case 0xA686:
				return 0x1D;
			case 0xA687:
				return 0x1B;
			case 0xA688:
				return 0x1D;
			case 0xA689:
				return 0x1B;
			case 0xA68A:
				return 0x2C;
			case 0xA68B:
				return 0x2A;
			case 0xA68C:
				return 0x1C;
			case 0xA68D:
				return 0x1A;
			case 0xA68E:
				return 0x1D;
			case 0xA68F:
				return 0x1B;
			case 0xA690:
				return 0x1D;
			case 0xA691:
				return 0x1B;
			case 0xA692:
				return 0x1D;
			case 0xA693:
				return 0x1B;
			case 0xA694:
				return 0x1C;
			case 0xA695:
				return 0x1A;
			case 0xA696:
				return 0x1D;
			case 0xA697:
				return 0x1B;
			case 0xA698:
				return 0x21;
			case 0xA699:
				return 0x1F;
			case 0xA69A:
				return 0x22;
			case 0xA69B:
				return 0x20;
			case 0xA69C:
				return 0x23;
			case 0xA69D:
				return 0x23;
			case 0xA69E:
				return 0x1D;
			case 0xA69F:
				return 0x25;
			case 0xA6A0:
				return 0xF;
			case 0xA6A1:
				return 0x10;
			case 0xA6A2:
				return 0xF;
			case 0xA6A3:
				return 0x10;
			case 0xA6A4:
				return 0x10;
			case 0xA6A5:
				return 0x11;
			case 0xA6A6:
				return 0x11;
			case 0xA6A7:
				return 0xF;
			case 0xA6A8:
				return 0x11;
			case 0xA6A9:
				return 0xF;
			case 0xA6AA:
				return 0x10;
			case 0xA6AB:
				return 0x10;
			case 0xA6AC:
				return 0x11;
			case 0xA6AD:
				return 0x12;
			case 0xA6AE:
				return 0x13;
			case 0xA6AF:
				return 0x13;
			case 0xA6B0:
				return 0x11;
			case 0xA6B1:
				return 0x12;
			case 0xA6B2:
				return 0x13;
			case 0xA6B3:
				return 0xF;
			case 0xA6B4:
				return 0x11;
			case 0xA6B5:
				return 0x10;
			case 0xA6B6:
				return 0x12;
			case 0xA6B7:
				return 0x10;
			case 0xA6B8:
				return 0x13;
			case 0xA6B9:
				return 0x12;
			case 0xA6BA:
				return 0x12;
			case 0xA6BB:
				return 0x11;
			case 0xA6BC:
				return 0x12;
			case 0xA6BD:
				return 0x10;
			case 0xA6BE:
				return 0x13;
			case 0xA6BF:
				return 0x11;
			case 0xA6C0:
				return 0x11;
			case 0xA6C1:
				return 0x11;
			case 0xA6C2:
				return 0x10;
			case 0xA6C3:
				return 0x12;
			case 0xA6C4:
				return 0x12;
			case 0xA6C5:
				return 0x12;
			case 0xA6C6:
				return 0x12;
			case 0xA6C7:
				return 0x12;
			case 0xA6C8:
				return 0x11;
			case 0xA6C9:
				return 0x11;
			case 0xA6CA:
				return 0x11;
			case 0xA6CB:
				return 0x11;
			case 0xA6CC:
				return 0x10;
			case 0xA6CD:
				return 0x10;
			case 0xA6CE:
				return 0x10;
			case 0xA6CF:
				return 0x10;
			case 0xA6D0:
				return 0x12;
			case 0xA6D1:
				return 0x11;
			case 0xA6D2:
				return 0x11;
			case 0xA6D3:
				return 0x15;
			case 0xA6D4:
				return 0x12;
			case 0xA6D5:
				return 0x11;
			case 0xA6D6:
				return 0x11;
			case 0xA6D7:
				return 0x12;
			case 0xA6D8:
				return 0x10;
			case 0xA6D9:
				return 0x11;
			case 0xA6DA:
				return 0x10;
			case 0xA6DB:
				return 0x10;
			case 0xA6DC:
				return 0x10;
			case 0xA6DD:
				return 0x10;
			case 0xA6DE:
				return 0x11;
			case 0xA6DF:
				return 0x10;
			case 0xA6E0:
				return 0x12;
			case 0xA6E1:
				return 0x11;
			case 0xA6E2:
				return 0x11;
			case 0xA6E3:
				return 0x10;
			case 0xA6E4:
				return 0x10;
			case 0xA6E5:
				return 0x10;
			case 0xA6E6:
				return 0x10;
			case 0xA6E7:
				return 0x12;
			case 0xA6E8:
				return 0x11;
			case 0xA6E9:
				return 0x11;
			case 0xA6EA:
				return 0x11;
			case 0xA6EB:
				return 0x12;
			case 0xA6EC:
				return 0x13;
			case 0xA6ED:
				return 0x14;
			case 0xA6EE:
				return 0x13;
			case 0xA6EF:
				return 0x14;
			case 0xA6F0:
				return 0x1D;
			case 0xA6F1:
				return 0x1F;
			case 0xA6F2:
				return 0xE;
			case 0xA6F3:
				return 0x10;
			case 0xA6F4:
				return 0xC;
			case 0xA6F5:
				return 0xC;
			case 0xA6F6:
				return 0x10;
			case 0xA6F7:
				return 0x14;
			case 0xA700:
				return 0x26;
			case 0xA701:
				return 0x27;
			case 0xA702:
				return 0x27;
			case 0xA703:
				return 0x28;
			case 0xA704:
				return 0x24;
			case 0xA705:
				return 0x25;
			case 0xA706:
				return 0x24;
			case 0xA707:
				return 0x25;
			case 0xA708:
				return 0x2B;
			case 0xA709:
				return 0x25;
			case 0xA70A:
				return 0x24;
			case 0xA70B:
				return 0x24;
			case 0xA70C:
				return 0x2A;
			case 0xA70D:
				return 0x35;
			case 0xA70E:
				return 0x2F;
			case 0xA70F:
				return 0x2E;
			case 0xA710:
				return 0x2E;
			case 0xA711:
				return 0x34;
			case 0xA712:
				return 0x2E;
			case 0xA713:
				return 0x28;
			case 0xA714:
				return 0x27;
			case 0xA715:
				return 0x27;
			case 0xA716:
				return 0x2D;
			case 0xA717:
				return 0x21;
			case 0xA718:
				return 0x1A;
			case 0xA719:
				return 0x23;
			case 0xA71A:
				return 0x29;
			case 0xA71B:
				return 0x20;
			case 0xA71C:
				return 0x22;
			case 0xA71D:
				return 0x28;
			case 0xA71E:
				return 0x31;
			case 0xA71F:
				return 0x2E;
			case 0xA720:
				return 0x25;
			case 0xA721:
				return 0x24;
			case 0xA722:
				return 0x28;
			case 0xA723:
				return 0x26;
			case 0xA724:
				return 0x27;
			case 0xA725:
				return 0x25;
			case 0xA726:
				return 0x1A;
			case 0xA727:
				return 0x18;
			case 0xA728:
				return 0x18;
			case 0xA729:
				return 0x16;
			case 0xA72A:
				return 0x1E;
			case 0xA72B:
				return 0x1C;
			case 0xA72C:
				return 0x1F;
			case 0xA72D:
				return 0x1D;
			case 0xA72E:
				return 0x2A;
			case 0xA72F:
				return 0x28;
			case 0xA730:
				return 0x1D;
			case 0xA731:
				return 0x1D;
			case 0xA732:
				return 0x18;
			case 0xA733:
				return 0x16;
			case 0xA734:
				return 0x18;
			case 0xA735:
				return 0x16;
			case 0xA736:
				return 0x18;
			case 0xA737:
				return 0x16;
			case 0xA738:
				return 0x18;
			case 0xA739:
				return 0x16;
			case 0xA73A:
				return 0x2C;
			case 0xA73B:
				return 0x2A;
			case 0xA73C:
				return 0x18;
			case 0xA73D:
				return 0x16;
			case 0xA73E:
				return 0x29;
			case 0xA73F:
				return 0x27;
			case 0xA740:
				return 0x23;
			case 0xA741:
				return 0x21;
			case 0xA742:
				return 0x2C;
			case 0xA743:
				return 0x2A;
			case 0xA744:
				return 0x37;
			case 0xA745:
				return 0x35;
			case 0xA746:
				return 0x1E;
			case 0xA747:
				return 0x1C;
			case 0xA748:
				return 0x28;
			case 0xA749:
				return 0x26;
			case 0xA74A:
				return 0x30;
			case 0xA74B:
				return 0x2E;
			case 0xA74C:
				return 0x21;
			case 0xA74D:
				return 0x1F;
			case 0xA74E:
				return 0x18;
			case 0xA74F:
				return 0x16;
			case 0xA750:
				return 0x35;
			case 0xA751:
				return 0x33;
			case 0xA752:
				return 0x25;
			case 0xA753:
				return 0x23;
			case 0xA754:
				return 0x2A;
			case 0xA755:
				return 0x28;
			case 0xA756:
				return 0x35;
			case 0xA757:
				return 0x33;
			case 0xA758:
				return 0x2C;
			case 0xA759:
				return 0x2A;
			case 0xA75A:
				return 0x1F;
			case 0xA75B:
				return 0x1D;
			case 0xA75C:
				return 0x21;
			case 0xA75D:
				return 0x1F;
			case 0xA75E:
				return 0x2C;
			case 0xA75F:
				return 0x2A;
			case 0xA760:
				return 0x18;
			case 0xA761:
				return 0x16;
			case 0xA762:
				return 0x22;
			case 0xA763:
				return 0x20;
			case 0xA764:
				return 0x27;
			case 0xA765:
				return 0x25;
			case 0xA766:
				return 0x39;
			case 0xA767:
				return 0x37;
			case 0xA768:
				return 0x1A;
			case 0xA769:
				return 0x18;
			case 0xA76A:
				return 0x18;
			case 0xA76B:
				return 0x16;
			case 0xA76C:
				return 0x18;
			case 0xA76D:
				return 0x16;
			case 0xA76E:
				return 0x19;
			case 0xA76F:
				return 0x17;
			case 0xA770:
				return 0x13;
			case 0xA771:
				return 0x17;
			case 0xA772:
				return 0x17;
			case 0xA773:
				return 0x17;
			case 0xA774:
				return 0x17;
			case 0xA775:
				return 0x17;
			case 0xA776:
				return 0x1F;
			case 0xA777:
				return 0x17;
			case 0xA778:
				return 0x16;
			case 0xA779:
				return 0x1F;
			case 0xA77A:
				return 0x1D;
			case 0xA77B:
				return 0x1F;
			case 0xA77C:
				return 0x1D;
			case 0xA77D:
				return 0x1F;
			case 0xA77E:
				return 0x26;
			case 0xA77F:
				return 0x24;
			case 0xA780:
				return 0x1E;
			case 0xA781:
				return 0x1C;
			case 0xA782:
				return 0x1F;
			case 0xA783:
				return 0x1D;
			case 0xA784:
				return 0x1F;
			case 0xA785:
				return 0x1D;
			case 0xA786:
				return 0x1F;
			case 0xA787:
				return 0x1D;
			case 0xA788:
				return 0x26;
			case 0xA789:
				return 0x16;
			case 0xA78A:
				return 0x22;
			case 0xA78B:
				return 0x1E;
			case 0xA78C:
				return 0x1C;
			case 0xA78D:
				return 0x1E;
			case 0xA78E:
				return 0x32;
			case 0xA78F:
				return 0x1D;
			case 0xA790:
				return 0x26;
			case 0xA791:
				return 0x24;
			case 0xA792:
				return 0x20;
			case 0xA793:
				return 0x1E;
			case 0xA794:
				return 0x27;
			case 0xA795:
				return 0x27;
			case 0xA796:
				return 0x25;
			case 0xA797:
				return 0x23;
			case 0xA798:
				return 0x23;
			case 0xA799:
				return 0x21;
			case 0xA79A:
				return 0x20;
			case 0xA79B:
				return 0x1E;
			case 0xA79C:
				return 0x20;
			case 0xA79D:
				return 0x1E;
			case 0xA79E:
				return 0x20;
			case 0xA79F:
				return 0x1E;
			case 0xA7A0:
				return 0x2B;
			case 0xA7A1:
				return 0x29;
			case 0xA7A2:
				return 0x2B;
			case 0xA7A3:
				return 0x29;
			case 0xA7A4:
				return 0x2B;
			case 0xA7A5:
				return 0x29;
			case 0xA7A6:
				return 0x2B;
			case 0xA7A7:
				return 0x29;
			case 0xA7A8:
				return 0x2B;
			case 0xA7A9:
				return 0x29;
			case 0xA7AA:
				return 0x21;
			case 0xA7AB:
				return 0x25;
			case 0xA7AC:
				return 0x1E;
			case 0xA7AD:
				return 0x21;
			case 0xA7AE:
				return 0x25;
			case 0xA7AF:
				return 0x1D;
			case 0xA7B0:
				return 0x1E;
			case 0xA7B1:
				return 0x1E;
			case 0xA7B2:
				return 0x29;
			case 0xA7B3:
				return 0x19;
			case 0xA7B4:
				return 0x1A;
			case 0xA7B5:
				return 0x18;
			case 0xA7B6:
				return 0x1B;
			case 0xA7B7:
				return 0x19;
			case 0xA7B8:
				return 0x23;
			case 0xA7B9:
				return 0x21;
			case 0xA7BA:
				return 0x1F;
			case 0xA7BB:
				return 0x1D;
			case 0xA7BC:
				return 0x1F;
			case 0xA7BD:
				return 0x1D;
			case 0xA7BE:
				return 0x1F;
			case 0xA7BF:
				return 0x1D;
			case 0xA7C2:
				return 0x21;
			case 0xA7C3:
				return 0x1F;
			case 0xA7C4:
				return 0x29;
			case 0xA7C5:
				return 0x21;
			case 0xA7C6:
				return 0x29;
			case 0xA7C7:
				return 0x31;
			case 0xA7C8:
				return 0x2F;
			case 0xA7C9:
				return 0x31;
			case 0xA7CA:
				return 0x2F;
			case 0xA7F5:
				return 0x25;
			case 0xA7F6:
				return 0x23;
			case 0xA7F7:
				return 0x23;
			case 0xA7F8:
				return 0x26;
			case 0xA7F9:
				return 0x22;
			case 0xA7FA:
				return 0x24;
			case 0xA7FB:
				return 0x23;
			case 0xA7FC:
				return 0x23;
			case 0xA7FD:
				return 0x23;
			case 0xA7FE:
				return 0x20;
			case 0xA7FF:
				return 0x22;
			case 0xA800:
				return 0x16;
			case 0xA801:
				return 0x16;
			case 0xA802:
				return 0x1B;
			case 0xA803:
				return 0x16;
			case 0xA804:
				return 0x16;
			case 0xA805:
				return 0x16;
			case 0xA806:
				return 0x1A;
			case 0xA807:
				return 0x17;
			case 0xA808:
				return 0x18;
			case 0xA809:
				return 0x17;
			case 0xA80A:
				return 0x18;
			case 0xA80B:
				return 0x1B;
			case 0xA80C:
				return 0x17;
			case 0xA80D:
				return 0x18;
			case 0xA80E:
				return 0x17;
			case 0xA80F:
				return 0x18;
			case 0xA810:
				return 0x18;
			case 0xA811:
				return 0x19;
			case 0xA812:
				return 0x18;
			case 0xA813:
				return 0x19;
			case 0xA814:
				return 0x17;
			case 0xA815:
				return 0x18;
			case 0xA816:
				return 0x17;
			case 0xA817:
				return 0x18;
			case 0xA818:
				return 0x17;
			case 0xA819:
				return 0x17;
			case 0xA81A:
				return 0x18;
			case 0xA81B:
				return 0x17;
			case 0xA81C:
				return 0x18;
			case 0xA81D:
				return 0x17;
			case 0xA81E:
				return 0x17;
			case 0xA81F:
				return 0x17;
			case 0xA820:
				return 0x18;
			case 0xA821:
				return 0x17;
			case 0xA822:
				return 0x17;
			case 0xA823:
				return 0x1A;
			case 0xA824:
				return 0x1A;
			case 0xA825:
				return 0x1A;
			case 0xA826:
				return 0x1A;
			case 0xA827:
				return 0x1B;
			case 0xA828:
				return 0x1B;
			case 0xA829:
				return 0x1B;
			case 0xA82A:
				return 0x1B;
			case 0xA82B:
				return 0x1B;
			case 0xA82C:
				return 0x24;
			case 0xA830:
				return 0x21;
			case 0xA831:
				return 0x1E;
			case 0xA832:
				return 0x24;
			case 0xA833:
				return 0x23;
			case 0xA834:
				return 0x20;
			case 0xA835:
				return 0x26;
			case 0xA836:
				return 0x19;
			case 0xA837:
				return 0x1D;
			case 0xA838:
				return 0x17;
			case 0xA839:
				return 0x1A;
			case 0xA840:
				return 0x13;
			case 0xA841:
				return 0x14;
			case 0xA842:
				return 0x13;
			case 0xA843:
				return 0x14;
			case 0xA844:
				return 0x13;
			case 0xA845:
				return 0x14;
			case 0xA846:
				return 0x13;
			case 0xA847:
				return 0x14;
			case 0xA848:
				return 0x13;
			case 0xA849:
				return 0x14;
			case 0xA84A:
				return 0x13;
			case 0xA84B:
				return 0x13;
			case 0xA84C:
				return 0x13;
			case 0xA84D:
				return 0x14;
			case 0xA84E:
				return 0x13;
			case 0xA84F:
				return 0x13;
			case 0xA850:
				return 0x14;
			case 0xA851:
				return 0x15;
			case 0xA852:
				return 0x14;
			case 0xA853:
				return 0x13;
			case 0xA854:
				return 0x14;
			case 0xA855:
				return 0x13;
			case 0xA856:
				return 0x18;
			case 0xA857:
				return 0x13;
			case 0xA858:
				return 0x13;
			case 0xA859:
				return 0x13;
			case 0xA85A:
				return 0x14;
			case 0xA85B:
				return 0x13;
			case 0xA85C:
				return 0x13;
			case 0xA85D:
				return 0x12;
			case 0xA85E:
				return 0x12;
			case 0xA85F:
				return 0x12;
			case 0xA860:
				return 0x12;
			case 0xA861:
				return 0x12;
			case 0xA862:
				return 0x13;
			case 0xA863:
				return 0x13;
			case 0xA864:
				return 0x13;
			case 0xA865:
				return 0x14;
			case 0xA866:
				return 0x13;
			case 0xA867:
				return 0x1D;
			case 0xA868:
				return 0x1D;
			case 0xA869:
				return 0x14;
			case 0xA86A:
				return 0x15;
			case 0xA86B:
				return 0x14;
			case 0xA86C:
				return 0x14;
			case 0xA86D:
				return 0x1D;
			case 0xA86E:
				return 0x1E;
			case 0xA86F:
				return 0x1A;
			case 0xA870:
				return 0x1D;
			case 0xA871:
				return 0x1D;
			case 0xA872:
				return 0x1E;
			case 0xA873:
				return 0x1C;
			case 0xA874:
				return 0x1A;
			case 0xA875:
				return 0x1A;
			case 0xA876:
				return 0x13;
			case 0xA877:
				return 0x1A;
			case 0xA880:
				return 0x19;
			case 0xA881:
				return 0x18;
			case 0xA882:
				return 0x14;
			case 0xA883:
				return 0x15;
			case 0xA884:
				return 0x14;
			case 0xA885:
				return 0x15;
			case 0xA886:
				return 0x14;
			case 0xA887:
				return 0x15;
			case 0xA888:
				return 0x1C;
			case 0xA889:
				return 0x1D;
			case 0xA88A:
				return 0x1C;
			case 0xA88B:
				return 0x1D;
			case 0xA88C:
				return 0x14;
			case 0xA88D:
				return 0x15;
			case 0xA88E:
				return 0x15;
			case 0xA88F:
				return 0x14;
			case 0xA890:
				return 0x15;
			case 0xA891:
				return 0x15;
			case 0xA892:
				return 0x15;
			case 0xA893:
				return 0x16;
			case 0xA894:
				return 0x15;
			case 0xA895:
				return 0x16;
			case 0xA896:
				return 0x16;
			case 0xA897:
				return 0x15;
			case 0xA898:
				return 0x16;
			case 0xA899:
				return 0x15;
			case 0xA89A:
				return 0x16;
			case 0xA89B:
				return 0x16;
			case 0xA89C:
				return 0x16;
			case 0xA89D:
				return 0x17;
			case 0xA89E:
				return 0x16;
			case 0xA89F:
				return 0x17;
			case 0xA8A0:
				return 0x16;
			case 0xA8A1:
				return 0x15;
			case 0xA8A2:
				return 0x16;
			case 0xA8A3:
				return 0x15;
			case 0xA8A4:
				return 0x16;
			case 0xA8A5:
				return 0x15;
			case 0xA8A6:
				return 0x15;
			case 0xA8A7:
				return 0x16;
			case 0xA8A8:
				return 0x15;
			case 0xA8A9:
				return 0x16;
			case 0xA8AA:
				return 0x15;
			case 0xA8AB:
				return 0x15;
			case 0xA8AC:
				return 0x15;
			case 0xA8AD:
				return 0x15;
			case 0xA8AE:
				return 0x15;
			case 0xA8AF:
				return 0x16;
			case 0xA8B0:
				return 0x16;
			case 0xA8B1:
				return 0x15;
			case 0xA8B2:
				return 0x15;
			case 0xA8B3:
				return 0x16;
			case 0xA8B4:
				return 0x20;
			case 0xA8B5:
				return 0x19;
			case 0xA8B6:
				return 0x18;
			case 0xA8B7:
				return 0x19;
			case 0xA8B8:
				return 0x18;
			case 0xA8B9:
				return 0x19;
			case 0xA8BA:
				return 0x20;
			case 0xA8BB:
				return 0x21;
			case 0xA8BC:
				return 0x20;
			case 0xA8BD:
				return 0x21;
			case 0xA8BE:
				return 0x18;
			case 0xA8BF:
				return 0x19;
			case 0xA8C0:
				return 0x19;
			case 0xA8C1:
				return 0x18;
			case 0xA8C2:
				return 0x19;
			case 0xA8C3:
				return 0x19;
			case 0xA8C4:
				return 0x17;
			case 0xA8C5:
				return 0x1C;
			case 0xA8CE:
				return 0x11;
			case 0xA8CF:
				return 0x18;
			case 0xA8D0:
				return 0x16;
			case 0xA8D1:
				return 0x15;
			case 0xA8D2:
				return 0x15;
			case 0xA8D3:
				return 0x17;
			case 0xA8D4:
				return 0x16;
			case 0xA8D5:
				return 0x16;
			case 0xA8D6:
				return 0x15;
			case 0xA8D7:
				return 0x17;
			case 0xA8D8:
				return 0x17;
			case 0xA8D9:
				return 0x16;
			case 0xA8E0:
				return 0x20;
			case 0xA8E1:
				return 0x1F;
			case 0xA8E2:
				return 0x1F;
			case 0xA8E3:
				return 0x21;
			case 0xA8E4:
				return 0x20;
			case 0xA8E5:
				return 0x20;
			case 0xA8E6:
				return 0x1F;
			case 0xA8E7:
				return 0x21;
			case 0xA8E8:
				return 0x21;
			case 0xA8E9:
				return 0x20;
			case 0xA8EA:
				return 0x1E;
			case 0xA8EB:
				return 0x1E;
			case 0xA8EC:
				return 0x1F;
			case 0xA8ED:
				return 0x1F;
			case 0xA8EE:
				return 0x1F;
			case 0xA8EF:
				return 0x1F;
			case 0xA8F0:
				return 0x1F;
			case 0xA8F1:
				return 0x23;
			case 0xA8F2:
				return 0x24;
			case 0xA8F3:
				return 0x23;
			case 0xA8F4:
				return 0x2A;
			case 0xA8F5:
				return 0x20;
			case 0xA8F6:
				return 0x22;
			case 0xA8F7:
				return 0x25;
			case 0xA8F8:
				return 0x19;
			case 0xA8F9:
				return 0x16;
			case 0xA8FA:
				return 0x11;
			case 0xA8FB:
				return 0x16;
			case 0xA8FC:
				return 0x18;
			case 0xA8FD:
				return 0x13;
			case 0xA8FE:
				return 0x15;
			case 0xA8FF:
				return 0x19;
			case 0xA900:
				return 0x14;
			case 0xA901:
				return 0x13;
			case 0xA902:
				return 0x13;
			case 0xA903:
				return 0x15;
			case 0xA904:
				return 0x14;
			case 0xA905:
				return 0x14;
			case 0xA906:
				return 0x13;
			case 0xA907:
				return 0x15;
			case 0xA908:
				return 0x15;
			case 0xA909:
				return 0x14;
			case 0xA90A:
				return 0x13;
			case 0xA90B:
				return 0x14;
			case 0xA90C:
				return 0x13;
			case 0xA90D:
				return 0x14;
			case 0xA90E:
				return 0x13;
			case 0xA90F:
				return 0x14;
			case 0xA910:
				return 0x13;
			case 0xA911:
				return 0x14;
			case 0xA912:
				return 0x13;
			case 0xA913:
				return 0x14;
			case 0xA914:
				return 0x13;
			case 0xA915:
				return 0x13;
			case 0xA916:
				return 0x14;
			case 0xA917:
				return 0x13;
			case 0xA918:
				return 0x13;
			case 0xA919:
				return 0x13;
			case 0xA91A:
				return 0x13;
			case 0xA91B:
				return 0x13;
			case 0xA91C:
				return 0x13;
			case 0xA91D:
				return 0x13;
			case 0xA91E:
				return 0x14;
			case 0xA91F:
				return 0x13;
			case 0xA920:
				return 0x13;
			case 0xA921:
				return 0x13;
			case 0xA922:
				return 0x12;
			case 0xA923:
				return 0x13;
			case 0xA924:
				return 0x12;
			case 0xA925:
				return 0x13;
			case 0xA926:
				return 0x12;
			case 0xA927:
				return 0x11;
			case 0xA928:
				return 0x11;
			case 0xA929:
				return 0x12;
			case 0xA92A:
				return 0x11;
			case 0xA92B:
				return 0x15;
			case 0xA92C:
				return 0x14;
			case 0xA92D:
				return 0x1B;
			case 0xA92E:
				return 0x12;
			case 0xA92F:
				return 0x13;
			case 0xA930:
				return 0x11;
			case 0xA931:
				return 0x11;
			case 0xA932:
				return 0x12;
			case 0xA933:
				return 0x11;
			case 0xA934:
				return 0x11;
			case 0xA935:
				return 0x11;
			case 0xA936:
				return 0x11;
			case 0xA937:
				return 0x11;
			case 0xA938:
				return 0x11;
			case 0xA939:
				return 0x11;
			case 0xA93A:
				return 0x11;
			case 0xA93B:
				return 0x12;
			case 0xA93C:
				return 0x11;
			case 0xA93D:
				return 0x11;
			case 0xA93E:
				return 0x11;
			case 0xA93F:
				return 0x11;
			case 0xA940:
				return 0x11;
			case 0xA941:
				return 0x11;
			case 0xA942:
				return 0x12;
			case 0xA943:
				return 0x13;
			case 0xA944:
				return 0x12;
			case 0xA945:
				return 0x13;
			case 0xA946:
				return 0x10;
			case 0xA947:
				return 0x14;
			case 0xA948:
				return 0x14;
			case 0xA949:
				return 0x14;
			case 0xA94A:
				return 0x15;
			case 0xA94B:
				return 0x14;
			case 0xA94C:
				return 0x15;
			case 0xA94D:
				return 0x15;
			case 0xA94E:
				return 0x15;
			case 0xA94F:
				return 0x19;
			case 0xA950:
				return 0x18;
			case 0xA951:
				return 0x18;
			case 0xA952:
				return 0x18;
			case 0xA953:
				return 0xE;
			case 0xA95F:
				return 0x14;
			case 0xA960:
				return 0x1D;
			case 0xA961:
				return 0x1D;
			case 0xA962:
				return 0x1C;
			case 0xA963:
				return 0x1D;
			case 0xA964:
				return 0x1D;
			case 0xA965:
				return 0x22;
			case 0xA966:
				return 0x1D;
			case 0xA967:
				return 0x22;
			case 0xA968:
				return 0x1C;
			case 0xA969:
				return 0x1C;
			case 0xA96A:
				return 0x21;
			case 0xA96B:
				return 0x24;
			case 0xA96C:
				return 0x1B;
			case 0xA96D:
				return 0x1C;
			case 0xA96E:
				return 0x1E;
			case 0xA96F:
				return 0x1D;
			case 0xA970:
				return 0x1D;
			case 0xA971:
				return 0x1B;
			case 0xA972:
				return 0x23;
			case 0xA973:
				return 0x1E;
			case 0xA974:
				return 0x1C;
			case 0xA975:
				return 0x20;
			case 0xA976:
				return 0x1C;
			case 0xA977:
				return 0x1C;
			case 0xA978:
				return 0x21;
			case 0xA979:
				return 0x1D;
			case 0xA97A:
				return 0x1E;
			case 0xA97B:
				return 0x1B;
			case 0xA97C:
				return 0x21;
			case 0xA980:
				return 0x18;
			case 0xA981:
				return 0x14;
			case 0xA982:
				return 0x14;
			case 0xA983:
				return 0x16;
			case 0xA984:
				return 0x12;
			case 0xA985:
				return 0x17;
			case 0xA986:
				return 0x12;
			case 0xA987:
				return 0x13;
			case 0xA988:
				return 0x12;
			case 0xA989:
				return 0x19;
			case 0xA98A:
				return 0x1A;
			case 0xA98B:
				return 0x22;
			case 0xA98C:
				return 0x12;
			case 0xA98D:
				return 0x13;
			case 0xA98E:
				return 0x12;
			case 0xA98F:
				return 0x13;
			case 0xA990:
				return 0x19;
			case 0xA991:
				return 0x19;
			case 0xA992:
				return 0x13;
			case 0xA993:
				return 0x19;
			case 0xA994:
				return 0x14;
			case 0xA995:
				return 0x13;
			case 0xA996:
				return 0x19;
			case 0xA997:
				return 0x13;
			case 0xA998:
				return 0x1A;
			case 0xA999:
				return 0x1D;
			case 0xA99A:
				return 0x14;
			case 0xA99B:
				return 0x14;
			case 0xA99C:
				return 0x1E;
			case 0xA99D:
				return 0x14;
			case 0xA99E:
				return 0x1E;
			case 0xA99F:
				return 0x19;
			case 0xA9A0:
				return 0x13;
			case 0xA9A1:
				return 0x19;
			case 0xA9A2:
				return 0x13;
			case 0xA9A3:
				return 0x1D;
			case 0xA9A4:
				return 0x13;
			case 0xA9A5:
				return 0x13;
			case 0xA9A6:
				return 0x19;
			case 0xA9A7:
				return 0x13;
			case 0xA9A8:
				return 0x19;
			case 0xA9A9:
				return 0x13;
			case 0xA9AA:
				return 0x13;
			case 0xA9AB:
				return 0x13;
			case 0xA9AC:
				return 0x19;
			case 0xA9AD:
				return 0x13;
			case 0xA9AE:
				return 0x13;
			case 0xA9AF:
				return 0x19;
			case 0xA9B0:
				return 0x1D;
			case 0xA9B1:
				return 0x13;
			case 0xA9B2:
				return 0x13;
			case 0xA9B3:
				return 0x19;
			case 0xA9B4:
				return 0x1B;
			case 0xA9B5:
				return 0x1B;
			case 0xA9B6:
				return 0x19;
			case 0xA9B7:
				return 0x1F;
			case 0xA9B8:
				return 0x19;
			case 0xA9B9:
				return 0x20;
			case 0xA9BA:
				return 0x1B;
			case 0xA9BB:
				return 0x1F;
			case 0xA9BC:
				return 0x1A;
			case 0xA9BD:
				return 0x1E;
			case 0xA9BE:
				return 0x20;
			case 0xA9BF:
				return 0x1E;
			case 0xA9C0:
				return 0x11;
			case 0xA9C1:
				return 0x18;
			case 0xA9C2:
				return 0x19;
			case 0xA9C3:
				return 0x14;
			case 0xA9C4:
				return 0x14;
			case 0xA9C5:
				return 0x14;
			case 0xA9C6:
				return 0x14;
			case 0xA9C7:
				return 0x16;
			case 0xA9C8:
				return 0x15;
			case 0xA9C9:
				return 0x15;
			case 0xA9CA:
				return 0x13;
			case 0xA9CB:
				return 0x18;
			case 0xA9CC:
				return 0x16;
			case 0xA9CD:
				return 0x1D;
			case 0xA9CF:
				return 0x15;
			case 0xA9D0:
				return 0x14;
			case 0xA9D1:
				return 0x13;
			case 0xA9D2:
				return 0x13;
			case 0xA9D3:
				return 0x15;
			case 0xA9D4:
				return 0x14;
			case 0xA9D5:
				return 0x14;
			case 0xA9D6:
				return 0x13;
			case 0xA9D7:
				return 0x15;
			case 0xA9D8:
				return 0x15;
			case 0xA9D9:
				return 0x14;
			case 0xA9DE:
				return 0x1C;
			case 0xA9DF:
				return 0x18;
			case 0xA9E0:
				return 0x18;
			case 0xA9E1:
				return 0x18;
			case 0xA9E2:
				return 0x18;
			case 0xA9E3:
				return 0x18;
			case 0xA9E4:
				return 0x18;
			case 0xA9E5:
				return 0x16;
			case 0xA9E6:
				return 0x2B;
			case 0xA9E7:
				return 0x1D;
			case 0xA9E8:
				return 0x1C;
			case 0xA9E9:
				return 0x1C;
			case 0xA9EA:
				return 0x1D;
			case 0xA9EB:
				return 0x1C;
			case 0xA9EC:
				return 0x1D;
			case 0xA9ED:
				return 0x1D;
			case 0xA9EE:
				return 0x1E;
			case 0xA9EF:
				return 0x1D;
			case 0xA9F0:
				return 0x1D;
			case 0xA9F1:
				return 0x1C;
			case 0xA9F2:
				return 0x1C;
			case 0xA9F3:
				return 0x1E;
			case 0xA9F4:
				return 0x1D;
			case 0xA9F5:
				return 0x1D;
			case 0xA9F6:
				return 0x1C;
			case 0xA9F7:
				return 0x1E;
			case 0xA9F8:
				return 0x1E;
			case 0xA9F9:
				return 0x1D;
			case 0xA9FA:
				return 0x1D;
			case 0xA9FB:
				return 0x1C;
			case 0xA9FC:
				return 0x1D;
			case 0xA9FD:
				return 0x1C;
			case 0xA9FE:
				return 0x1D;
			case 0xAA00:
				return 0xE;
			case 0xAA01:
				return 0xE;
			case 0xAA02:
				return 0xE;
			case 0xAA03:
				return 0xE;
			case 0xAA04:
				return 0xF;
			case 0xAA05:
				return 0xE;
			case 0xAA06:
				return 0xF;
			case 0xAA07:
				return 0x10;
			case 0xAA08:
				return 0xF;
			case 0xAA09:
				return 0x10;
			case 0xAA0A:
				return 0x11;
			case 0xAA0B:
				return 0x10;
			case 0xAA0C:
				return 0x10;
			case 0xAA0D:
				return 0x11;
			case 0xAA0E:
				return 0xF;
			case 0xAA0F:
				return 0x10;
			case 0xAA10:
				return 0x11;
			case 0xAA11:
				return 0x10;
			case 0xAA12:
				return 0x11;
			case 0xAA13:
				return 0xF;
			case 0xAA14:
				return 0x10;
			case 0xAA15:
				return 0xF;
			case 0xAA16:
				return 0x10;
			case 0xAA17:
				return 0x10;
			case 0xAA18:
				return 0xF;
			case 0xAA19:
				return 0x10;
			case 0xAA1A:
				return 0xF;
			case 0xAA1B:
				return 0x10;
			case 0xAA1C:
				return 0x10;
			case 0xAA1D:
				return 0xF;
			case 0xAA1E:
				return 0x10;
			case 0xAA1F:
				return 0x10;
			case 0xAA20:
				return 0xF;
			case 0xAA21:
				return 0x10;
			case 0xAA22:
				return 0xF;
			case 0xAA23:
				return 0xF;
			case 0xAA24:
				return 0xF;
			case 0xAA25:
				return 0xF;
			case 0xAA26:
				return 0x10;
			case 0xAA27:
				return 0xF;
			case 0xAA28:
				return 0xF;
			case 0xAA29:
				return 0x13;
			case 0xAA2A:
				return 0x12;
			case 0xAA2B:
				return 0x13;
			case 0xAA2C:
				return 0x13;
			case 0xAA2D:
				return 0x12;
			case 0xAA2E:
				return 0x13;
			case 0xAA2F:
				return 0x12;
			case 0xAA30:
				return 0x13;
			case 0xAA31:
				return 0x13;
			case 0xAA32:
				return 0x13;
			case 0xAA33:
				return 0x17;
			case 0xAA34:
				return 0x17;
			case 0xAA35:
				return 0x17;
			case 0xAA36:
				return 0x17;
			case 0xAA40:
				return 0x14;
			case 0xAA41:
				return 0x14;
			case 0xAA42:
				return 0x15;
			case 0xAA43:
				return 0x1D;
			case 0xAA44:
				return 0x15;
			case 0xAA45:
				return 0x14;
			case 0xAA46:
				return 0x14;
			case 0xAA47:
				return 0x14;
			case 0xAA48:
				return 0x14;
			case 0xAA49:
				return 0x14;
			case 0xAA4A:
				return 0x14;
			case 0xAA4B:
				return 0x15;
			case 0xAA4C:
				return 0x1C;
			case 0xAA4D:
				return 0x1C;
			case 0xAA50:
				return 0x10;
			case 0xAA51:
				return 0xF;
			case 0xAA52:
				return 0xF;
			case 0xAA53:
				return 0x11;
			case 0xAA54:
				return 0x10;
			case 0xAA55:
				return 0x10;
			case 0xAA56:
				return 0xF;
			case 0xAA57:
				return 0x11;
			case 0xAA58:
				return 0x11;
			case 0xAA59:
				return 0x10;
			case 0xAA5C:
				return 0x18;
			case 0xAA5D:
				return 0x17;
			case 0xAA5E:
				return 0x1E;
			case 0xAA5F:
				return 0x1E;
			case 0xAA60:
				return 0x19;
			case 0xAA61:
				return 0x19;
			case 0xAA62:
				return 0x1A;
			case 0xAA63:
				return 0x19;
			case 0xAA64:
				return 0x1A;
			case 0xAA65:
				return 0x1A;
			case 0xAA66:
				return 0x1A;
			case 0xAA67:
				return 0x1B;
			case 0xAA68:
				return 0x1A;
			case 0xAA69:
				return 0x1B;
			case 0xAA6A:
				return 0x1A;
			case 0xAA6B:
				return 0x19;
			case 0xAA6C:
				return 0x19;
			case 0xAA6D:
				return 0x19;
			case 0xAA6E:
				return 0x1A;
			case 0xAA6F:
				return 0x19;
			case 0xAA70:
				return 0x2D;
			case 0xAA71:
				return 0x19;
			case 0xAA72:
				return 0x19;
			case 0xAA73:
				return 0x19;
			case 0xAA74:
				return 0x1C;
			case 0xAA75:
				return 0x1B;
			case 0xAA76:
				return 0x1B;
			case 0xAA77:
				return 0x21;
			case 0xAA78:
				return 0x19;
			case 0xAA79:
				return 0x19;
			case 0xAA7A:
				return 0x18;
			case 0xAA7B:
				return 0x1C;
			case 0xAA7C:
				return 0x1E;
			case 0xAA7D:
				return 0x1E;
			case 0xAA7E:
				return 0x20;
			case 0xAA7F:
				return 0x20;
			case 0xAA80:
				return 0x17;
			case 0xAA81:
				return 0x18;
			case 0xAA82:
				return 0x18;
			case 0xAA83:
				return 0x19;
			case 0xAA84:
				return 0x19;
			case 0xAA85:
				return 0x1A;
			case 0xAA86:
				return 0x17;
			case 0xAA87:
				return 0x18;
			case 0xAA88:
				return 0x18;
			case 0xAA89:
				return 0x19;
			case 0xAA8A:
				return 0x17;
			case 0xAA8B:
				return 0x18;
			case 0xAA8C:
				return 0x18;
			case 0xAA8D:
				return 0x19;
			case 0xAA8E:
				return 0x17;
			case 0xAA8F:
				return 0x18;
			case 0xAA90:
				return 0x18;
			case 0xAA91:
				return 0x19;
			case 0xAA92:
				return 0x17;
			case 0xAA93:
				return 0x18;
			case 0xAA94:
				return 0x17;
			case 0xAA95:
				return 0x18;
			case 0xAA96:
				return 0x18;
			case 0xAA97:
				return 0x19;
			case 0xAA98:
				return 0x17;
			case 0xAA99:
				return 0x18;
			case 0xAA9A:
				return 0x17;
			case 0xAA9B:
				return 0x18;
			case 0xAA9C:
				return 0x17;
			case 0xAA9D:
				return 0x18;
			case 0xAA9E:
				return 0x18;
			case 0xAA9F:
				return 0x19;
			case 0xAAA0:
				return 0x17;
			case 0xAAA1:
				return 0x18;
			case 0xAAA2:
				return 0x17;
			case 0xAAA3:
				return 0x18;
			case 0xAAA4:
				return 0x17;
			case 0xAAA5:
				return 0x18;
			case 0xAAA6:
				return 0x17;
			case 0xAAA7:
				return 0x18;
			case 0xAAA8:
				return 0x17;
			case 0xAAA9:
				return 0x18;
			case 0xAAAA:
				return 0x17;
			case 0xAAAB:
				return 0x18;
			case 0xAAAC:
				return 0x17;
			case 0xAAAD:
				return 0x18;
			case 0xAAAE:
				return 0x16;
			case 0xAAAF:
				return 0x17;
			case 0xAAB0:
				return 0x12;
			case 0xAAB1:
				return 0x12;
			case 0xAAB2:
				return 0x11;
			case 0xAAB3:
				return 0x12;
			case 0xAAB4:
				return 0x11;
			case 0xAAB5:
				return 0x11;
			case 0xAAB6:
				return 0x11;
			case 0xAAB7:
				return 0x12;
			case 0xAAB8:
				return 0x12;
			case 0xAAB9:
				return 0x13;
			case 0xAABA:
				return 0x12;
			case 0xAABB:
				return 0x13;
			case 0xAABC:
				return 0x12;
			case 0xAABD:
				return 0x12;
			case 0xAABE:
				return 0x12;
			case 0xAABF:
				return 0x15;
			case 0xAAC0:
				return 0x18;
			case 0xAAC1:
				return 0x16;
			case 0xAAC2:
				return 0x17;
			case 0xAADB:
				return 0x14;
			case 0xAADC:
				return 0x16;
			case 0xAADD:
				return 0x14;
			case 0xAADE:
				return 0x17;
			case 0xAADF:
				return 0x18;
			case 0xAAE0:
				return 0x16;
			case 0xAAE1:
				return 0x16;
			case 0xAAE2:
				return 0x18;
			case 0xAAE3:
				return 0x18;
			case 0xAAE4:
				return 0x18;
			case 0xAAE5:
				return 0x19;
			case 0xAAE6:
				return 0x18;
			case 0xAAE7:
				return 0x19;
			case 0xAAE8:
				return 0x18;
			case 0xAAE9:
				return 0x18;
			case 0xAAEA:
				return 0x18;
			case 0xAAEB:
				return 0x1B;
			case 0xAAEC:
				return 0x1B;
			case 0xAAED:
				return 0x1C;
			case 0xAAEE:
				return 0x1B;
			case 0xAAEF:
				return 0x1C;
			case 0xAAF0:
				return 0x16;
			case 0xAAF1:
				return 0x1A;
			case 0xAAF2:
				return 0x12;
			case 0xAAF3:
				return 0x26;
			case 0xAAF4:
				return 0x22;
			case 0xAAF5:
				return 0x20;
			case 0xAAF6:
				return 0x14;
			case 0xAB01:
				return 0x17;
			case 0xAB02:
				return 0x17;
			case 0xAB03:
				return 0x18;
			case 0xAB04:
				return 0x18;
			case 0xAB05:
				return 0x17;
			case 0xAB06:
				return 0x17;
			case 0xAB09:
				return 0x17;
			case 0xAB0A:
				return 0x17;
			case 0xAB0B:
				return 0x18;
			case 0xAB0C:
				return 0x18;
			case 0xAB0D:
				return 0x17;
			case 0xAB0E:
				return 0x17;
			case 0xAB11:
				return 0x16;
			case 0xAB12:
				return 0x16;
			case 0xAB13:
				return 0x17;
			case 0xAB14:
				return 0x17;
			case 0xAB15:
				return 0x16;
			case 0xAB16:
				return 0x16;
			case 0xAB20:
				return 0x18;
			case 0xAB21:
				return 0x18;
			case 0xAB22:
				return 0x18;
			case 0xAB23:
				return 0x19;
			case 0xAB24:
				return 0x19;
			case 0xAB25:
				return 0x18;
			case 0xAB26:
				return 0x18;
			case 0xAB28:
				return 0x16;
			case 0xAB29:
				return 0x16;
			case 0xAB2A:
				return 0x16;
			case 0xAB2B:
				return 0x17;
			case 0xAB2C:
				return 0x17;
			case 0xAB2D:
				return 0x16;
			case 0xAB2E:
				return 0x16;
			case 0xAB30:
				return 0x20;
			case 0xAB31:
				return 0x24;
			case 0xAB32:
				return 0x21;
			case 0xAB33:
				return 0x1C;
			case 0xAB34:
				return 0x23;
			case 0xAB35:
				return 0x1B;
			case 0xAB36:
				return 0x2E;
			case 0xAB37:
				return 0x2A;
			case 0xAB38:
				return 0x2E;
			case 0xAB39:
				return 0x26;
			case 0xAB3A:
				return 0x27;
			case 0xAB3B:
				return 0x27;
			case 0xAB3C:
				return 0x29;
			case 0xAB3D:
				return 0x21;
			case 0xAB3E:
				return 0x2D;
			case 0xAB3F:
				return 0x26;
			case 0xAB40:
				return 0x1F;
			case 0xAB41:
				return 0x29;
			case 0xAB42:
				return 0x34;
			case 0xAB43:
				return 0x23;
			case 0xAB44:
				return 0x2F;
			case 0xAB45:
				return 0x1D;
			case 0xAB46:
				return 0x2C;
			case 0xAB47:
				return 0x24;
			case 0xAB48:
				return 0x1C;
			case 0xAB49:
				return 0x27;
			case 0xAB4A:
				return 0x2E;
			case 0xAB4B:
				return 0x1C;
			case 0xAB4C:
				return 0x26;
			case 0xAB4D:
				return 0x20;
			case 0xAB4E:
				return 0x2A;
			case 0xAB4F:
				return 0x2E;
			case 0xAB50:
				return 0x16;
			case 0xAB51:
				return 0x1D;
			case 0xAB52:
				return 0x24;
			case 0xAB53:
				return 0x17;
			case 0xAB54:
				return 0x2B;
			case 0xAB55:
				return 0x2B;
			case 0xAB56:
				return 0x29;
			case 0xAB57:
				return 0x28;
			case 0xAB58:
				return 0x3B;
			case 0xAB59:
				return 0x33;
			case 0xAB5A:
				return 0x2A;
			case 0xAB5B:
				return 0x23;
			case 0xAB5C:
				return 0x1B;
			case 0xAB5D:
				return 0x2D;
			case 0xAB5E:
				return 0x2A;
			case 0xAB5F:
				return 0x27;
			case 0xAB60:
				return 0x1D;
			case 0xAB61:
				return 0x1E;
			case 0xAB62:
				return 0x1B;
			case 0xAB63:
				return 0x16;
			case 0xAB64:
				return 0x22;
			case 0xAB65:
				return 0x21;
			case 0xAB66:
				return 0x32;
			case 0xAB67:
				return 0x32;
			case 0xAB68:
				return 0x2E;
			case 0xAB69:
				return 0x1F;
			case 0xAB6A:
				return 0x1A;
			case 0xAB6B:
				return 0x1B;
			case 0xAB70:
				return 0x18;
			case 0xAB71:
				return 0x18;
			case 0xAB72:
				return 0x18;
			case 0xAB73:
				return 0x18;
			case 0xAB74:
				return 0x18;
			case 0xAB75:
				return 0x18;
			case 0xAB76:
				return 0x19;
			case 0xAB77:
				return 0x19;
			case 0xAB78:
				return 0x19;
			case 0xAB79:
				return 0x19;
			case 0xAB7A:
				return 0x19;
			case 0xAB7B:
				return 0x19;
			case 0xAB7C:
				return 0x19;
			case 0xAB7D:
				return 0x19;
			case 0xAB7E:
				return 0x19;
			case 0xAB7F:
				return 0x19;
			case 0xAB80:
				return 0x19;
			case 0xAB81:
				return 0x19;
			case 0xAB82:
				return 0x19;
			case 0xAB83:
				return 0x19;
			case 0xAB84:
				return 0x19;
			case 0xAB85:
				return 0x19;
			case 0xAB86:
				return 0x19;
			case 0xAB87:
				return 0x19;
			case 0xAB88:
				return 0x19;
			case 0xAB89:
				return 0x19;
			case 0xAB8A:
				return 0x19;
			case 0xAB8B:
				return 0x19;
			case 0xAB8C:
				return 0x19;
			case 0xAB8D:
				return 0x19;
			case 0xAB8E:
				return 0x19;
			case 0xAB8F:
				return 0x1A;
			case 0xAB90:
				return 0x1A;
			case 0xAB91:
				return 0x19;
			case 0xAB92:
				return 0x19;
			case 0xAB93:
				return 0x19;
			case 0xAB94:
				return 0x19;
			case 0xAB95:
				return 0x19;
			case 0xAB96:
				return 0x1A;
			case 0xAB97:
				return 0x1A;
			case 0xAB98:
				return 0x1A;
			case 0xAB99:
				return 0x1A;
			case 0xAB9A:
				return 0x1A;
			case 0xAB9B:
				return 0x1A;
			case 0xAB9C:
				return 0x19;
			case 0xAB9D:
				return 0x18;
			case 0xAB9E:
				return 0x19;
			case 0xAB9F:
				return 0x19;
			case 0xABA0:
				return 0x19;
			case 0xABA1:
				return 0x19;
			case 0xABA2:
				return 0x19;
			case 0xABA3:
				return 0x19;
			case 0xABA4:
				return 0x19;
			case 0xABA5:
				return 0x19;
			case 0xABA6:
				return 0x19;
			case 0xABA7:
				return 0x19;
			case 0xABA8:
				return 0x19;
			case 0xABA9:
				return 0x19;
			case 0xABAA:
				return 0x19;
			case 0xABAB:
				return 0x19;
			case 0xABAC:
				return 0x1A;
			case 0xABAD:
				return 0x1A;
			case 0xABAE:
				return 0x1A;
			case 0xABAF:
				return 0x1A;
			case 0xABB0:
				return 0x1A;
			case 0xABB1:
				return 0x1A;
			case 0xABB2:
				return 0x1A;
			case 0xABB3:
				return 0x1A;
			case 0xABB4:
				return 0x1A;
			case 0xABB5:
				return 0x1A;
			case 0xABB6:
				return 0x1A;
			case 0xABB7:
				return 0x1A;
			case 0xABB8:
				return 0x1A;
			case 0xABB9:
				return 0x19;
			case 0xABBA:
				return 0x19;
			case 0xABBB:
				return 0x19;
			case 0xABBC:
				return 0x19;
			case 0xABBD:
				return 0x19;
			case 0xABBE:
				return 0x19;
			case 0xABBF:
				return 0x19;
			case 0xABC0:
				return 0x18;
			case 0xABC1:
				return 0x18;
			case 0xABC2:
				return 0x18;
			case 0xABC3:
				return 0x18;
			case 0xABC4:
				return 0x17;
			case 0xABC5:
				return 0x17;
			case 0xABC6:
				return 0x19;
			case 0xABC7:
				return 0x18;
			case 0xABC8:
				return 0x19;
			case 0xABC9:
				return 0x19;
			case 0xABCA:
				return 0x19;
			case 0xABCB:
				return 0x18;
			case 0xABCC:
				return 0x19;
			case 0xABCD:
				return 0x18;
			case 0xABCE:
				return 0x17;
			case 0xABCF:
				return 0x16;
			case 0xABD0:
				return 0x19;
			case 0xABD1:
				return 0x1A;
			case 0xABD2:
				return 0x18;
			case 0xABD3:
				return 0x19;
			case 0xABD4:
				return 0x18;
			case 0xABD5:
				return 0x17;
			case 0xABD6:
				return 0x18;
			case 0xABD7:
				return 0x18;
			case 0xABD8:
				return 0x19;
			case 0xABD9:
				return 0x19;
			case 0xABDA:
				return 0x19;
			case 0xABDB:
				return 0x1F;
			case 0xABDC:
				return 0x1F;
			case 0xABDD:
				return 0x1F;
			case 0xABDE:
				return 0x1E;
			case 0xABDF:
				return 0x1E;
			case 0xABE0:
				return 0x1F;
			case 0xABE1:
				return 0x20;
			case 0xABE2:
				return 0x1D;
			case 0xABE3:
				return 0x1D;
			case 0xABE4:
				return 0x1D;
			case 0xABE5:
				return 0x1D;
			case 0xABE6:
				return 0x1E;
			case 0xABE7:
				return 0x1F;
			case 0xABE8:
				return 0x1D;
			case 0xABE9:
				return 0x20;
			case 0xABEA:
				return 0x1D;
			case 0xABEB:
				return 0x16;
			case 0xABEC:
				return 0x16;
			case 0xABED:
				return 0x17;
			case 0xABF0:
				return 0x18;
			case 0xABF1:
				return 0x17;
			case 0xABF2:
				return 0x17;
			case 0xABF3:
				return 0x19;
			case 0xABF4:
				return 0x18;
			case 0xABF5:
				return 0x18;
			case 0xABF6:
				return 0x17;
			case 0xABF7:
				return 0x19;
			case 0xABF8:
				return 0x19;
			case 0xABF9:
				return 0x18;
			case 0xAC00:
				return 0x19;
			case 0xD7A3:
				return 0x18;
			case 0xD7B0:
				return 0x17;
			case 0xD7B1:
				return 0x17;
			case 0xD7B2:
				return 0x16;
			case 0xD7B3:
				return 0x17;
			case 0xD7B4:
				return 0x17;
			case 0xD7B5:
				return 0x17;
			case 0xD7B6:
				return 0x17;
			case 0xD7B7:
				return 0x17;
			case 0xD7B8:
				return 0x16;
			case 0xD7B9:
				return 0x16;
			case 0xD7BA:
				return 0x17;
			case 0xD7BB:
				return 0x16;
			case 0xD7BC:
				return 0x16;
			case 0xD7BD:
				return 0x18;
			case 0xD7BE:
				return 0x17;
			case 0xD7BF:
				return 0x17;
			case 0xD7C0:
				return 0x16;
			case 0xD7C1:
				return 0x17;
			case 0xD7C2:
				return 0x16;
			case 0xD7C3:
				return 0x16;
			case 0xD7C4:
				return 0x15;
			case 0xD7C5:
				return 0x19;
			case 0xD7C6:
				return 0x19;
			case 0xD7CB:
				return 0x1D;
			case 0xD7CC:
				return 0x1F;
			case 0xD7CD:
				return 0x1D;
			case 0xD7CE:
				return 0x23;
			case 0xD7CF:
				return 0x1E;
			case 0xD7D0:
				return 0x1D;
			case 0xD7D1:
				return 0x24;
			case 0xD7D2:
				return 0x1E;
			case 0xD7D3:
				return 0x20;
			case 0xD7D4:
				return 0x20;
			case 0xD7D5:
				return 0x23;
			case 0xD7D6:
				return 0x24;
			case 0xD7D7:
				return 0x24;
			case 0xD7D8:
				return 0x23;
			case 0xD7D9:
				return 0x24;
			case 0xD7DA:
				return 0x25;
			case 0xD7DB:
				return 0x20;
			case 0xD7DC:
				return 0x29;
			case 0xD7DD:
				return 0x1F;
			case 0xD7DE:
				return 0x1D;
			case 0xD7DF:
				return 0x22;
			case 0xD7E0:
				return 0x1C;
			case 0xD7E1:
				return 0x22;
			case 0xD7E2:
				return 0x1D;
			case 0xD7E3:
				return 0x1E;
			case 0xD7E4:
				return 0x25;
			case 0xD7E5:
				return 0x1D;
			case 0xD7E6:
				return 0x1C;
			case 0xD7E7:
				return 0x23;
			case 0xD7E8:
				return 0x1D;
			case 0xD7E9:
				return 0x1F;
			case 0xD7EA:
				return 0x1C;
			case 0xD7EB:
				return 0x24;
			case 0xD7EC:
				return 0x22;
			case 0xD7ED:
				return 0x22;
			case 0xD7EE:
				return 0x1E;
			case 0xD7EF:
				return 0x1C;
			case 0xD7F0:
				return 0x1E;
			case 0xD7F1:
				return 0x1E;
			case 0xD7F2:
				return 0x1C;
			case 0xD7F3:
				return 0x1F;
			case 0xD7F4:
				return 0x27;
			case 0xD7F5:
				return 0x20;
			case 0xD7F6:
				return 0x20;
			case 0xD7F7:
				return 0x1D;
			case 0xD7F8:
				return 0x22;
			case 0xD7F9:
				return 0x1C;
			case 0xD7FA:
				return 0x1E;
			case 0xD7FB:
				return 0x21;
			case 0xD800:
				return 0x28;
			case 0xDB7F:
				return 0x27;
			case 0xDB80:
				return 0x24;
			case 0xDBFF:
				return 0x23;
			case 0xDC00:
				return 0x17;
			case 0xDFFF:
				return 0x16;
			case 0xE000:
				return 0x15;
			case 0xF8FF:
				return 0x14;
			case 0xF900:
				return 0x21;
			case 0xF901:
				return 0x21;
			case 0xF902:
				return 0x21;
			case 0xF903:
				return 0x21;
			case 0xF904:
				return 0x21;
			case 0xF905:
				return 0x21;
			case 0xF906:
				return 0x21;
			case 0xF907:
				return 0x21;
			case 0xF908:
				return 0x21;
			case 0xF909:
				return 0x21;
			case 0xF90A:
				return 0x21;
			case 0xF90B:
				return 0x21;
			case 0xF90C:
				return 0x21;
			case 0xF90D:
				return 0x21;
			case 0xF90E:
				return 0x21;
			case 0xF90F:
				return 0x21;
			case 0xF910:
				return 0x21;
			case 0xF911:
				return 0x21;
			case 0xF912:
				return 0x21;
			case 0xF913:
				return 0x21;
			case 0xF914:
				return 0x21;
			case 0xF915:
				return 0x21;
			case 0xF916:
				return 0x21;
			case 0xF917:
				return 0x21;
			case 0xF918:
				return 0x21;
			case 0xF919:
				return 0x21;
			case 0xF91A:
				return 0x21;
			case 0xF91B:
				return 0x21;
			case 0xF91C:
				return 0x21;
			case 0xF91D:
				return 0x21;
			case 0xF91E:
				return 0x21;
			case 0xF91F:
				return 0x21;
			case 0xF920:
				return 0x21;
			case 0xF921:
				return 0x21;
			case 0xF922:
				return 0x21;
			case 0xF923:
				return 0x21;
			case 0xF924:
				return 0x21;
			case 0xF925:
				return 0x21;
			case 0xF926:
				return 0x21;
			case 0xF927:
				return 0x21;
			case 0xF928:
				return 0x21;
			case 0xF929:
				return 0x21;
			case 0xF92A:
				return 0x21;
			case 0xF92B:
				return 0x21;
			case 0xF92C:
				return 0x21;
			case 0xF92D:
				return 0x21;
			case 0xF92E:
				return 0x21;
			case 0xF92F:
				return 0x21;
			case 0xF930:
				return 0x21;
			case 0xF931:
				return 0x21;
			case 0xF932:
				return 0x21;
			case 0xF933:
				return 0x21;
			case 0xF934:
				return 0x21;
			case 0xF935:
				return 0x21;
			case 0xF936:
				return 0x21;
			case 0xF937:
				return 0x21;
			case 0xF938:
				return 0x21;
			case 0xF939:
				return 0x21;
			case 0xF93A:
				return 0x21;
			case 0xF93B:
				return 0x21;
			case 0xF93C:
				return 0x21;
			case 0xF93D:
				return 0x21;
			case 0xF93E:
				return 0x21;
			case 0xF93F:
				return 0x21;
			case 0xF940:
				return 0x21;
			case 0xF941:
				return 0x21;
			case 0xF942:
				return 0x21;
			case 0xF943:
				return 0x21;
			case 0xF944:
				return 0x21;
			case 0xF945:
				return 0x21;
			case 0xF946:
				return 0x21;
			case 0xF947:
				return 0x21;
			case 0xF948:
				return 0x21;
			case 0xF949:
				return 0x21;
			case 0xF94A:
				return 0x21;
			case 0xF94B:
				return 0x21;
			case 0xF94C:
				return 0x21;
			case 0xF94D:
				return 0x21;
			case 0xF94E:
				return 0x21;
			case 0xF94F:
				return 0x21;
			case 0xF950:
				return 0x21;
			case 0xF951:
				return 0x21;
			case 0xF952:
				return 0x21;
			case 0xF953:
				return 0x21;
			case 0xF954:
				return 0x21;
			case 0xF955:
				return 0x21;
			case 0xF956:
				return 0x21;
			case 0xF957:
				return 0x21;
			case 0xF958:
				return 0x21;
			case 0xF959:
				return 0x21;
			case 0xF95A:
				return 0x21;
			case 0xF95B:
				return 0x21;
			case 0xF95C:
				return 0x21;
			case 0xF95D:
				return 0x21;
			case 0xF95E:
				return 0x21;
			case 0xF95F:
				return 0x21;
			case 0xF960:
				return 0x21;
			case 0xF961:
				return 0x21;
			case 0xF962:
				return 0x21;
			case 0xF963:
				return 0x21;
			case 0xF964:
				return 0x21;
			case 0xF965:
				return 0x21;
			case 0xF966:
				return 0x21;
			case 0xF967:
				return 0x21;
			case 0xF968:
				return 0x21;
			case 0xF969:
				return 0x21;
			case 0xF96A:
				return 0x21;
			case 0xF96B:
				return 0x21;
			case 0xF96C:
				return 0x21;
			case 0xF96D:
				return 0x21;
			case 0xF96E:
				return 0x21;
			case 0xF96F:
				return 0x21;
			case 0xF970:
				return 0x21;
			case 0xF971:
				return 0x21;
			case 0xF972:
				return 0x21;
			case 0xF973:
				return 0x21;
			case 0xF974:
				return 0x21;
			case 0xF975:
				return 0x21;
			case 0xF976:
				return 0x21;
			case 0xF977:
				return 0x21;
			case 0xF978:
				return 0x21;
			case 0xF979:
				return 0x21;
			case 0xF97A:
				return 0x21;
			case 0xF97B:
				return 0x21;
			case 0xF97C:
				return 0x21;
			case 0xF97D:
				return 0x21;
			case 0xF97E:
				return 0x21;
			case 0xF97F:
				return 0x21;
			case 0xF980:
				return 0x21;
			case 0xF981:
				return 0x21;
			case 0xF982:
				return 0x21;
			case 0xF983:
				return 0x21;
			case 0xF984:
				return 0x21;
			case 0xF985:
				return 0x21;
			case 0xF986:
				return 0x21;
			case 0xF987:
				return 0x21;
			case 0xF988:
				return 0x21;
			case 0xF989:
				return 0x21;
			case 0xF98A:
				return 0x21;
			case 0xF98B:
				return 0x21;
			case 0xF98C:
				return 0x21;
			case 0xF98D:
				return 0x21;
			case 0xF98E:
				return 0x21;
			case 0xF98F:
				return 0x21;
			case 0xF990:
				return 0x21;
			case 0xF991:
				return 0x21;
			case 0xF992:
				return 0x21;
			case 0xF993:
				return 0x21;
			case 0xF994:
				return 0x21;
			case 0xF995:
				return 0x21;
			case 0xF996:
				return 0x21;
			case 0xF997:
				return 0x21;
			case 0xF998:
				return 0x21;
			case 0xF999:
				return 0x21;
			case 0xF99A:
				return 0x21;
			case 0xF99B:
				return 0x21;
			case 0xF99C:
				return 0x21;
			case 0xF99D:
				return 0x21;
			case 0xF99E:
				return 0x21;
			case 0xF99F:
				return 0x21;
			case 0xF9A0:
				return 0x21;
			case 0xF9A1:
				return 0x21;
			case 0xF9A2:
				return 0x21;
			case 0xF9A3:
				return 0x21;
			case 0xF9A4:
				return 0x21;
			case 0xF9A5:
				return 0x21;
			case 0xF9A6:
				return 0x21;
			case 0xF9A7:
				return 0x21;
			case 0xF9A8:
				return 0x21;
			case 0xF9A9:
				return 0x21;
			case 0xF9AA:
				return 0x21;
			case 0xF9AB:
				return 0x21;
			case 0xF9AC:
				return 0x21;
			case 0xF9AD:
				return 0x21;
			case 0xF9AE:
				return 0x21;
			case 0xF9AF:
				return 0x21;
			case 0xF9B0:
				return 0x21;
			case 0xF9B1:
				return 0x21;
			case 0xF9B2:
				return 0x21;
			case 0xF9B3:
				return 0x21;
			case 0xF9B4:
				return 0x21;
			case 0xF9B5:
				return 0x21;
			case 0xF9B6:
				return 0x21;
			case 0xF9B7:
				return 0x21;
			case 0xF9B8:
				return 0x21;
			case 0xF9B9:
				return 0x21;
			case 0xF9BA:
				return 0x21;
			case 0xF9BB:
				return 0x21;
			case 0xF9BC:
				return 0x21;
			case 0xF9BD:
				return 0x21;
			case 0xF9BE:
				return 0x21;
			case 0xF9BF:
				return 0x21;
			case 0xF9C0:
				return 0x21;
			case 0xF9C1:
				return 0x21;
			case 0xF9C2:
				return 0x21;
			case 0xF9C3:
				return 0x21;
			case 0xF9C4:
				return 0x21;
			case 0xF9C5:
				return 0x21;
			case 0xF9C6:
				return 0x21;
			case 0xF9C7:
				return 0x21;
			case 0xF9C8:
				return 0x21;
			case 0xF9C9:
				return 0x21;
			case 0xF9CA:
				return 0x21;
			case 0xF9CB:
				return 0x21;
			case 0xF9CC:
				return 0x21;
			case 0xF9CD:
				return 0x21;
			case 0xF9CE:
				return 0x21;
			case 0xF9CF:
				return 0x21;
			case 0xF9D0:
				return 0x21;
			case 0xF9D1:
				return 0x21;
			case 0xF9D2:
				return 0x21;
			case 0xF9D3:
				return 0x21;
			case 0xF9D4:
				return 0x21;
			case 0xF9D5:
				return 0x21;
			case 0xF9D6:
				return 0x21;
			case 0xF9D7:
				return 0x21;
			case 0xF9D8:
				return 0x21;
			case 0xF9D9:
				return 0x21;
			case 0xF9DA:
				return 0x21;
			case 0xF9DB:
				return 0x21;
			case 0xF9DC:
				return 0x21;
			case 0xF9DD:
				return 0x21;
			case 0xF9DE:
				return 0x21;
			case 0xF9DF:
				return 0x21;
			case 0xF9E0:
				return 0x21;
			case 0xF9E1:
				return 0x21;
			case 0xF9E2:
				return 0x21;
			case 0xF9E3:
				return 0x21;
			case 0xF9E4:
				return 0x21;
			case 0xF9E5:
				return 0x21;
			case 0xF9E6:
				return 0x21;
			case 0xF9E7:
				return 0x21;
			case 0xF9E8:
				return 0x21;
			case 0xF9E9:
				return 0x21;
			case 0xF9EA:
				return 0x21;
			case 0xF9EB:
				return 0x21;
			case 0xF9EC:
				return 0x21;
			case 0xF9ED:
				return 0x21;
			case 0xF9EE:
				return 0x21;
			case 0xF9EF:
				return 0x21;
			case 0xF9F0:
				return 0x21;
			case 0xF9F1:
				return 0x21;
			case 0xF9F2:
				return 0x21;
			case 0xF9F3:
				return 0x21;
			case 0xF9F4:
				return 0x21;
			case 0xF9F5:
				return 0x21;
			case 0xF9F6:
				return 0x21;
			case 0xF9F7:
				return 0x21;
			case 0xF9F8:
				return 0x21;
			case 0xF9F9:
				return 0x21;
			case 0xF9FA:
				return 0x21;
			case 0xF9FB:
				return 0x21;
			case 0xF9FC:
				return 0x21;
			case 0xF9FD:
				return 0x21;
			case 0xF9FE:
				return 0x21;
			case 0xF9FF:
				return 0x21;
			case 0xFA00:
				return 0x21;
			case 0xFA01:
				return 0x21;
			case 0xFA02:
				return 0x21;
			case 0xFA03:
				return 0x21;
			case 0xFA04:
				return 0x21;
			case 0xFA05:
				return 0x21;
			case 0xFA06:
				return 0x21;
			case 0xFA07:
				return 0x21;
			case 0xFA08:
				return 0x21;
			case 0xFA09:
				return 0x21;
			case 0xFA0A:
				return 0x21;
			case 0xFA0B:
				return 0x21;
			case 0xFA0C:
				return 0x21;
			case 0xFA0D:
				return 0x21;
			case 0xFA0E:
				return 0x21;
			case 0xFA0F:
				return 0x21;
			case 0xFA10:
				return 0x21;
			case 0xFA11:
				return 0x21;
			case 0xFA12:
				return 0x21;
			case 0xFA13:
				return 0x21;
			case 0xFA14:
				return 0x21;
			case 0xFA15:
				return 0x21;
			case 0xFA16:
				return 0x21;
			case 0xFA17:
				return 0x21;
			case 0xFA18:
				return 0x21;
			case 0xFA19:
				return 0x21;
			case 0xFA1A:
				return 0x21;
			case 0xFA1B:
				return 0x21;
			case 0xFA1C:
				return 0x21;
			case 0xFA1D:
				return 0x21;
			case 0xFA1E:
				return 0x21;
			case 0xFA1F:
				return 0x21;
			case 0xFA20:
				return 0x21;
			case 0xFA21:
				return 0x21;
			case 0xFA22:
				return 0x21;
			case 0xFA23:
				return 0x21;
			case 0xFA24:
				return 0x21;
			case 0xFA25:
				return 0x21;
			case 0xFA26:
				return 0x21;
			case 0xFA27:
				return 0x21;
			case 0xFA28:
				return 0x21;
			case 0xFA29:
				return 0x21;
			case 0xFA2A:
				return 0x21;
			case 0xFA2B:
				return 0x21;
			case 0xFA2C:
				return 0x21;
			case 0xFA2D:
				return 0x21;
			case 0xFA2E:
				return 0x21;
			case 0xFA2F:
				return 0x21;
			case 0xFA30:
				return 0x21;
			case 0xFA31:
				return 0x21;
			case 0xFA32:
				return 0x21;
			case 0xFA33:
				return 0x21;
			case 0xFA34:
				return 0x21;
			case 0xFA35:
				return 0x21;
			case 0xFA36:
				return 0x21;
			case 0xFA37:
				return 0x21;
			case 0xFA38:
				return 0x21;
			case 0xFA39:
				return 0x21;
			case 0xFA3A:
				return 0x21;
			case 0xFA3B:
				return 0x21;
			case 0xFA3C:
				return 0x21;
			case 0xFA3D:
				return 0x21;
			case 0xFA3E:
				return 0x21;
			case 0xFA3F:
				return 0x21;
			case 0xFA40:
				return 0x21;
			case 0xFA41:
				return 0x21;
			case 0xFA42:
				return 0x21;
			case 0xFA43:
				return 0x21;
			case 0xFA44:
				return 0x21;
			case 0xFA45:
				return 0x21;
			case 0xFA46:
				return 0x21;
			case 0xFA47:
				return 0x21;
			case 0xFA48:
				return 0x21;
			case 0xFA49:
				return 0x21;
			case 0xFA4A:
				return 0x21;
			case 0xFA4B:
				return 0x21;
			case 0xFA4C:
				return 0x21;
			case 0xFA4D:
				return 0x21;
			case 0xFA4E:
				return 0x21;
			case 0xFA4F:
				return 0x21;
			case 0xFA50:
				return 0x21;
			case 0xFA51:
				return 0x21;
			case 0xFA52:
				return 0x21;
			case 0xFA53:
				return 0x21;
			case 0xFA54:
				return 0x21;
			case 0xFA55:
				return 0x21;
			case 0xFA56:
				return 0x21;
			case 0xFA57:
				return 0x21;
			case 0xFA58:
				return 0x21;
			case 0xFA59:
				return 0x21;
			case 0xFA5A:
				return 0x21;
			case 0xFA5B:
				return 0x21;
			case 0xFA5C:
				return 0x21;
			case 0xFA5D:
				return 0x21;
			case 0xFA5E:
				return 0x21;
			case 0xFA5F:
				return 0x21;
			case 0xFA60:
				return 0x21;
			case 0xFA61:
				return 0x21;
			case 0xFA62:
				return 0x21;
			case 0xFA63:
				return 0x21;
			case 0xFA64:
				return 0x21;
			case 0xFA65:
				return 0x21;
			case 0xFA66:
				return 0x21;
			case 0xFA67:
				return 0x21;
			case 0xFA68:
				return 0x21;
			case 0xFA69:
				return 0x21;
			case 0xFA6A:
				return 0x21;
			case 0xFA6B:
				return 0x21;
			case 0xFA6C:
				return 0x21;
			case 0xFA6D:
				return 0x21;
			case 0xFA70:
				return 0x21;
			case 0xFA71:
				return 0x21;
			case 0xFA72:
				return 0x21;
			case 0xFA73:
				return 0x21;
			case 0xFA74:
				return 0x21;
			case 0xFA75:
				return 0x21;
			case 0xFA76:
				return 0x21;
			case 0xFA77:
				return 0x21;
			case 0xFA78:
				return 0x21;
			case 0xFA79:
				return 0x21;
			case 0xFA7A:
				return 0x21;
			case 0xFA7B:
				return 0x21;
			case 0xFA7C:
				return 0x21;
			case 0xFA7D:
				return 0x21;
			case 0xFA7E:
				return 0x21;
			case 0xFA7F:
				return 0x21;
			case 0xFA80:
				return 0x21;
			case 0xFA81:
				return 0x21;
			case 0xFA82:
				return 0x21;
			case 0xFA83:
				return 0x21;
			case 0xFA84:
				return 0x21;
			case 0xFA85:
				return 0x21;
			case 0xFA86:
				return 0x21;
			case 0xFA87:
				return 0x21;
			case 0xFA88:
				return 0x21;
			case 0xFA89:
				return 0x21;
			case 0xFA8A:
				return 0x21;
			case 0xFA8B:
				return 0x21;
			case 0xFA8C:
				return 0x21;
			case 0xFA8D:
				return 0x21;
			case 0xFA8E:
				return 0x21;
			case 0xFA8F:
				return 0x21;
			case 0xFA90:
				return 0x21;
			case 0xFA91:
				return 0x21;
			case 0xFA92:
				return 0x21;
			case 0xFA93:
				return 0x21;
			case 0xFA94:
				return 0x21;
			case 0xFA95:
				return 0x21;
			case 0xFA96:
				return 0x21;
			case 0xFA97:
				return 0x21;
			case 0xFA98:
				return 0x21;
			case 0xFA99:
				return 0x21;
			case 0xFA9A:
				return 0x21;
			case 0xFA9B:
				return 0x21;
			case 0xFA9C:
				return 0x21;
			case 0xFA9D:
				return 0x21;
			case 0xFA9E:
				return 0x21;
			case 0xFA9F:
				return 0x21;
			case 0xFAA0:
				return 0x21;
			case 0xFAA1:
				return 0x21;
			case 0xFAA2:
				return 0x21;
			case 0xFAA3:
				return 0x21;
			case 0xFAA4:
				return 0x21;
			case 0xFAA5:
				return 0x21;
			case 0xFAA6:
				return 0x21;
			case 0xFAA7:
				return 0x21;
			case 0xFAA8:
				return 0x21;
			case 0xFAA9:
				return 0x21;
			case 0xFAAA:
				return 0x21;
			case 0xFAAB:
				return 0x21;
			case 0xFAAC:
				return 0x21;
			case 0xFAAD:
				return 0x21;
			case 0xFAAE:
				return 0x21;
			case 0xFAAF:
				return 0x21;
			case 0xFAB0:
				return 0x21;
			case 0xFAB1:
				return 0x21;
			case 0xFAB2:
				return 0x21;
			case 0xFAB3:
				return 0x21;
			case 0xFAB4:
				return 0x21;
			case 0xFAB5:
				return 0x21;
			case 0xFAB6:
				return 0x21;
			case 0xFAB7:
				return 0x21;
			case 0xFAB8:
				return 0x21;
			case 0xFAB9:
				return 0x21;
			case 0xFABA:
				return 0x21;
			case 0xFABB:
				return 0x21;
			case 0xFABC:
				return 0x21;
			case 0xFABD:
				return 0x21;
			case 0xFABE:
				return 0x21;
			case 0xFABF:
				return 0x21;
			case 0xFAC0:
				return 0x21;
			case 0xFAC1:
				return 0x21;
			case 0xFAC2:
				return 0x21;
			case 0xFAC3:
				return 0x21;
			case 0xFAC4:
				return 0x21;
			case 0xFAC5:
				return 0x21;
			case 0xFAC6:
				return 0x21;
			case 0xFAC7:
				return 0x21;
			case 0xFAC8:
				return 0x21;
			case 0xFAC9:
				return 0x21;
			case 0xFACA:
				return 0x21;
			case 0xFACB:
				return 0x21;
			case 0xFACC:
				return 0x21;
			case 0xFACD:
				return 0x21;
			case 0xFACE:
				return 0x21;
			case 0xFACF:
				return 0x21;
			case 0xFAD0:
				return 0x21;
			case 0xFAD1:
				return 0x21;
			case 0xFAD2:
				return 0x21;
			case 0xFAD3:
				return 0x21;
			case 0xFAD4:
				return 0x21;
			case 0xFAD5:
				return 0x21;
			case 0xFAD6:
				return 0x21;
			case 0xFAD7:
				return 0x21;
			case 0xFAD8:
				return 0x21;
			case 0xFAD9:
				return 0x21;
			case 0xFB00:
				return 0x18;
			case 0xFB01:
				return 0x18;
			case 0xFB02:
				return 0x18;
			case 0xFB03:
				return 0x19;
			case 0xFB04:
				return 0x19;
			case 0xFB05:
				return 0x1E;
			case 0xFB06:
				return 0x18;
			case 0xFB13:
				return 0x20;
			case 0xFB14:
				return 0x20;
			case 0xFB15:
				return 0x20;
			case 0xFB16:
				return 0x20;
			case 0xFB17:
				return 0x20;
			case 0xFB1D:
				return 0x1D;
			case 0xFB1E:
				return 0x22;
			case 0xFB1F:
				return 0x26;
			case 0xFB20:
				return 0x1F;
			case 0xFB21:
				return 0x18;
			case 0xFB22:
				return 0x19;
			case 0xFB23:
				return 0x16;
			case 0xFB24:
				return 0x17;
			case 0xFB25:
				return 0x19;
			case 0xFB26:
				return 0x1D;
			case 0xFB27:
				return 0x18;
			case 0xFB28:
				return 0x17;
			case 0xFB29:
				return 0x24;
			case 0xFB2A:
				return 0x21;
			case 0xFB2B:
				return 0x20;
			case 0xFB2C:
				return 0x2C;
			case 0xFB2D:
				return 0x2B;
			case 0xFB2E:
				return 0x1E;
			case 0xFB2F:
				return 0x1F;
			case 0xFB30:
				return 0x1E;
			case 0xFB31:
				return 0x1E;
			case 0xFB32:
				return 0x20;
			case 0xFB33:
				return 0x20;
			case 0xFB34:
				return 0x1C;
			case 0xFB35:
				return 0x1E;
			case 0xFB36:
				return 0x20;
			case 0xFB38:
				return 0x1E;
			case 0xFB39:
				return 0x1E;
			case 0xFB3A:
				return 0x24;
			case 0xFB3B:
				return 0x1E;
			case 0xFB3C:
				return 0x20;
			case 0xFB3E:
				return 0x1E;
			case 0xFB40:
				return 0x1E;
			case 0xFB41:
				return 0x21;
			case 0xFB43:
				return 0x23;
			case 0xFB44:
				return 0x1D;
			case 0xFB46:
				return 0x20;
			case 0xFB47:
				return 0x1E;
			case 0xFB48:
				return 0x1F;
			case 0xFB49:
				return 0x1F;
			case 0xFB4A:
				return 0x1E;
			case 0xFB4B:
				return 0x1D;
			case 0xFB4C:
				return 0x1C;
			case 0xFB4D:
				return 0x1C;
			case 0xFB4E:
				return 0x1B;
			case 0xFB4F:
				return 0x1B;
			case 0xFB50:
				return 0x27;
			case 0xFB51:
				return 0x24;
			case 0xFB52:
				return 0x21;
			case 0xFB53:
				return 0x1E;
			case 0xFB54:
				return 0x20;
			case 0xFB55:
				return 0x1F;
			case 0xFB56:
				return 0x20;
			case 0xFB57:
				return 0x1D;
			case 0xFB58:
				return 0x1F;
			case 0xFB59:
				return 0x1E;
			case 0xFB5A:
				return 0x22;
			case 0xFB5B:
				return 0x1F;
			case 0xFB5C:
				return 0x21;
			case 0xFB5D:
				return 0x20;
			case 0xFB5E:
				return 0x23;
			case 0xFB5F:
				return 0x20;
			case 0xFB60:
				return 0x22;
			case 0xFB61:
				return 0x21;
			case 0xFB62:
				return 0x22;
			case 0xFB63:
				return 0x1F;
			case 0xFB64:
				return 0x21;
			case 0xFB65:
				return 0x20;
			case 0xFB66:
				return 0x21;
			case 0xFB67:
				return 0x1E;
			case 0xFB68:
				return 0x20;
			case 0xFB69:
				return 0x1F;
			case 0xFB6A:
				return 0x20;
			case 0xFB6B:
				return 0x1D;
			case 0xFB6C:
				return 0x1F;
			case 0xFB6D:
				return 0x1E;
			case 0xFB6E:
				return 0x22;
			case 0xFB6F:
				return 0x1F;
			case 0xFB70:
				return 0x21;
			case 0xFB71:
				return 0x20;
			case 0xFB72:
				return 0x21;
			case 0xFB73:
				return 0x1E;
			case 0xFB74:
				return 0x20;
			case 0xFB75:
				return 0x1F;
			case 0xFB76:
				return 0x21;
			case 0xFB77:
				return 0x1E;
			case 0xFB78:
				return 0x20;
			case 0xFB79:
				return 0x1F;
			case 0xFB7A:
				return 0x22;
			case 0xFB7B:
				return 0x1F;
			case 0xFB7C:
				return 0x21;
			case 0xFB7D:
				return 0x20;
			case 0xFB7E:
				return 0x24;
			case 0xFB7F:
				return 0x21;
			case 0xFB80:
				return 0x23;
			case 0xFB81:
				return 0x22;
			case 0xFB82:
				return 0x23;
			case 0xFB83:
				return 0x20;
			case 0xFB84:
				return 0x22;
			case 0xFB85:
				return 0x1F;
			case 0xFB86:
				return 0x20;
			case 0xFB87:
				return 0x1D;
			case 0xFB88:
				return 0x21;
			case 0xFB89:
				return 0x1E;
			case 0xFB8A:
				return 0x20;
			case 0xFB8B:
				return 0x1D;
			case 0xFB8C:
				return 0x21;
			case 0xFB8D:
				return 0x1E;
			case 0xFB8E:
				return 0x22;
			case 0xFB8F:
				return 0x1F;
			case 0xFB90:
				return 0x21;
			case 0xFB91:
				return 0x20;
			case 0xFB92:
				return 0x20;
			case 0xFB93:
				return 0x1D;
			case 0xFB94:
				return 0x1F;
			case 0xFB95:
				return 0x1E;
			case 0xFB96:
				return 0x21;
			case 0xFB97:
				return 0x1E;
			case 0xFB98:
				return 0x20;
			case 0xFB99:
				return 0x1F;
			case 0xFB9A:
				return 0x22;
			case 0xFB9B:
				return 0x1F;
			case 0xFB9C:
				return 0x21;
			case 0xFB9D:
				return 0x20;
			case 0xFB9E:
				return 0x28;
			case 0xFB9F:
				return 0x25;
			case 0xFBA0:
				return 0x22;
			case 0xFBA1:
				return 0x1F;
			case 0xFBA2:
				return 0x21;
			case 0xFBA3:
				return 0x20;
			case 0xFBA4:
				return 0x2F;
			case 0xFBA5:
				return 0x2C;
			case 0xFBA6:
				return 0x25;
			case 0xFBA7:
				return 0x22;
			case 0xFBA8:
				return 0x24;
			case 0xFBA9:
				return 0x23;
			case 0xFBAA:
				return 0x2C;
			case 0xFBAB:
				return 0x29;
			case 0xFBAC:
				return 0x2B;
			case 0xFBAD:
				return 0x2A;
			case 0xFBAE:
				return 0x27;
			case 0xFBAF:
				return 0x24;
			case 0xFBB0:
				return 0x38;
			case 0xFBB1:
				return 0x35;
			case 0xFBB2:
				return 0x18;
			case 0xFBB3:
				return 0x18;
			case 0xFBB4:
				return 0x1D;
			case 0xFBB5:
				return 0x1D;
			case 0xFBB6:
				return 0x1F;
			case 0xFBB7:
				return 0x1F;
			case 0xFBB8:
				return 0x32;
			case 0xFBB9:
				return 0x32;
			case 0xFBBA:
				return 0x1E;
			case 0xFBBB:
				return 0x1E;
			case 0xFBBC:
				return 0x28;
			case 0xFBBD:
				return 0x28;
			case 0xFBBE:
				return 0x28;
			case 0xFBBF:
				return 0x13;
			case 0xFBC0:
				return 0x1E;
			case 0xFBC1:
				return 0x1E;
			case 0xFBD3:
				return 0x1F;
			case 0xFBD4:
				return 0x1C;
			case 0xFBD5:
				return 0x1E;
			case 0xFBD6:
				return 0x1D;
			case 0xFBD7:
				return 0x1E;
			case 0xFBD8:
				return 0x1B;
			case 0xFBD9:
				return 0x1F;
			case 0xFBDA:
				return 0x1C;
			case 0xFBDB:
				return 0x1F;
			case 0xFBDC:
				return 0x1C;
			case 0xFBDD:
				return 0x2F;
			case 0xFBDE:
				return 0x1F;
			case 0xFBDF:
				return 0x1C;
			case 0xFBE0:
				return 0x27;
			case 0xFBE1:
				return 0x24;
			case 0xFBE2:
				return 0x27;
			case 0xFBE3:
				return 0x24;
			case 0xFBE4:
				return 0x1E;
			case 0xFBE5:
				return 0x1B;
			case 0xFBE6:
				return 0x1D;
			case 0xFBE7:
				return 0x1C;
			case 0xFBE8:
				return 0x3E;
			case 0xFBE9:
				return 0x3D;
			case 0xFBEA:
				return 0x3D;
			case 0xFBEB:
				return 0x3A;
			case 0xFBEC:
				return 0x3B;
			case 0xFBED:
				return 0x38;
			case 0xFBEE:
				return 0x3C;
			case 0xFBEF:
				return 0x39;
			case 0xFBF0:
				return 0x3A;
			case 0xFBF1:
				return 0x37;
			case 0xFBF2:
				return 0x3B;
			case 0xFBF3:
				return 0x38;
			case 0xFBF4:
				return 0x3B;
			case 0xFBF5:
				return 0x38;
			case 0xFBF6:
				return 0x3A;
			case 0xFBF7:
				return 0x37;
			case 0xFBF8:
				return 0x39;
			case 0xFBF9:
				return 0x54;
			case 0xFBFA:
				return 0x51;
			case 0xFBFB:
				return 0x53;
			case 0xFBFC:
				return 0x26;
			case 0xFBFD:
				return 0x23;
			case 0xFBFE:
				return 0x25;
			case 0xFBFF:
				return 0x24;
			case 0xFC00:
				return 0x3D;
			case 0xFC01:
				return 0x3C;
			case 0xFC02:
				return 0x3D;
			case 0xFC03:
				return 0x45;
			case 0xFC04:
				return 0x3C;
			case 0xFC05:
				return 0x2C;
			case 0xFC06:
				return 0x2B;
			case 0xFC07:
				return 0x2C;
			case 0xFC08:
				return 0x2C;
			case 0xFC09:
				return 0x34;
			case 0xFC0A:
				return 0x2B;
			case 0xFC0B:
				return 0x2C;
			case 0xFC0C:
				return 0x2B;
			case 0xFC0D:
				return 0x2C;
			case 0xFC0E:
				return 0x2C;
			case 0xFC0F:
				return 0x34;
			case 0xFC10:
				return 0x2B;
			case 0xFC11:
				return 0x2D;
			case 0xFC12:
				return 0x2D;
			case 0xFC13:
				return 0x35;
			case 0xFC14:
				return 0x2C;
			case 0xFC15:
				return 0x2C;
			case 0xFC16:
				return 0x2D;
			case 0xFC17:
				return 0x2C;
			case 0xFC18:
				return 0x2C;
			case 0xFC19:
				return 0x2D;
			case 0xFC1A:
				return 0x2C;
			case 0xFC1B:
				return 0x2D;
			case 0xFC1C:
				return 0x2D;
			case 0xFC1D:
				return 0x2C;
			case 0xFC1E:
				return 0x2D;
			case 0xFC1F:
				return 0x2D;
			case 0xFC20:
				return 0x2B;
			case 0xFC21:
				return 0x2C;
			case 0xFC22:
				return 0x2C;
			case 0xFC23:
				return 0x2B;
			case 0xFC24:
				return 0x2C;
			case 0xFC25:
				return 0x2C;
			case 0xFC26:
				return 0x2B;
			case 0xFC27:
				return 0x2C;
			case 0xFC28:
				return 0x2C;
			case 0xFC29:
				return 0x2C;
			case 0xFC2A:
				return 0x2C;
			case 0xFC2B:
				return 0x2E;
			case 0xFC2C:
				return 0x2E;
			case 0xFC2D:
				return 0x2C;
			case 0xFC2E:
				return 0x2B;
			case 0xFC2F:
				return 0x2C;
			case 0xFC30:
				return 0x2C;
			case 0xFC31:
				return 0x34;
			case 0xFC32:
				return 0x2B;
			case 0xFC33:
				return 0x2B;
			case 0xFC34:
				return 0x2C;
			case 0xFC35:
				return 0x34;
			case 0xFC36:
				return 0x2B;
			case 0xFC37:
				return 0x2C;
			case 0xFC38:
				return 0x2C;
			case 0xFC39:
				return 0x2B;
			case 0xFC3A:
				return 0x2C;
			case 0xFC3B:
				return 0x2B;
			case 0xFC3C:
				return 0x2C;
			case 0xFC3D:
				return 0x34;
			case 0xFC3E:
				return 0x2B;
			case 0xFC3F:
				return 0x2C;
			case 0xFC40:
				return 0x2B;
			case 0xFC41:
				return 0x2C;
			case 0xFC42:
				return 0x2C;
			case 0xFC43:
				return 0x34;
			case 0xFC44:
				return 0x2B;
			case 0xFC45:
				return 0x2D;
			case 0xFC46:
				return 0x2C;
			case 0xFC47:
				return 0x2D;
			case 0xFC48:
				return 0x2D;
			case 0xFC49:
				return 0x35;
			case 0xFC4A:
				return 0x2C;
			case 0xFC4B:
				return 0x2D;
			case 0xFC4C:
				return 0x2C;
			case 0xFC4D:
				return 0x2D;
			case 0xFC4E:
				return 0x2D;
			case 0xFC4F:
				return 0x35;
			case 0xFC50:
				return 0x2C;
			case 0xFC51:
				return 0x2C;
			case 0xFC52:
				return 0x2C;
			case 0xFC53:
				return 0x34;
			case 0xFC54:
				return 0x2B;
			case 0xFC55:
				return 0x2C;
			case 0xFC56:
				return 0x2B;
			case 0xFC57:
				return 0x2C;
			case 0xFC58:
				return 0x2C;
			case 0xFC59:
				return 0x34;
			case 0xFC5A:
				return 0x2B;
			case 0xFC5B:
				return 0x39;
			case 0xFC5C:
				return 0x38;
			case 0xFC5D:
				return 0x41;
			case 0xFC5E:
				return 0x33;
			case 0xFC5F:
				return 0x33;
			case 0xFC60:
				return 0x30;
			case 0xFC61:
				return 0x30;
			case 0xFC62:
				return 0x30;
			case 0xFC63:
				return 0x3B;
			case 0xFC64:
				return 0x39;
			case 0xFC65:
				return 0x3A;
			case 0xFC66:
				return 0x3A;
			case 0xFC67:
				return 0x3A;
			case 0xFC68:
				return 0x42;
			case 0xFC69:
				return 0x39;
			case 0xFC6A:
				return 0x28;
			case 0xFC6B:
				return 0x29;
			case 0xFC6C:
				return 0x29;
			case 0xFC6D:
				return 0x29;
			case 0xFC6E:
				return 0x31;
			case 0xFC6F:
				return 0x28;
			case 0xFC70:
				return 0x28;
			case 0xFC71:
				return 0x29;
			case 0xFC72:
				return 0x29;
			case 0xFC73:
				return 0x29;
			case 0xFC74:
				return 0x31;
			case 0xFC75:
				return 0x28;
			case 0xFC76:
				return 0x29;
			case 0xFC77:
				return 0x2A;
			case 0xFC78:
				return 0x2A;
			case 0xFC79:
				return 0x2A;
			case 0xFC7A:
				return 0x32;
			case 0xFC7B:
				return 0x29;
			case 0xFC7C:
				return 0x31;
			case 0xFC7D:
				return 0x28;
			case 0xFC7E:
				return 0x31;
			case 0xFC7F:
				return 0x28;
			case 0xFC80:
				return 0x29;
			case 0xFC81:
				return 0x28;
			case 0xFC82:
				return 0x29;
			case 0xFC83:
				return 0x31;
			case 0xFC84:
				return 0x28;
			case 0xFC85:
				return 0x29;
			case 0xFC86:
				return 0x31;
			case 0xFC87:
				return 0x28;
			case 0xFC88:
				return 0x2A;
			case 0xFC89:
				return 0x2A;
			case 0xFC8A:
				return 0x29;
			case 0xFC8B:
				return 0x2A;
			case 0xFC8C:
				return 0x2A;
			case 0xFC8D:
				return 0x2A;
			case 0xFC8E:
				return 0x32;
			case 0xFC8F:
				return 0x29;
			case 0xFC90:
				return 0x3E;
			case 0xFC91:
				return 0x28;
			case 0xFC92:
				return 0x29;
			case 0xFC93:
				return 0x29;
			case 0xFC94:
				return 0x29;
			case 0xFC95:
				return 0x31;
			case 0xFC96:
				return 0x28;
			case 0xFC97:
				return 0x3C;
			case 0xFC98:
				return 0x3B;
			case 0xFC99:
				return 0x3C;
			case 0xFC9A:
				return 0x3C;
			case 0xFC9B:
				return 0x3B;
			case 0xFC9C:
				return 0x2B;
			case 0xFC9D:
				return 0x2A;
			case 0xFC9E:
				return 0x2B;
			case 0xFC9F:
				return 0x2B;
			case 0xFCA0:
				return 0x2A;
			case 0xFCA1:
				return 0x2B;
			case 0xFCA2:
				return 0x2A;
			case 0xFCA3:
				return 0x2B;
			case 0xFCA4:
				return 0x2B;
			case 0xFCA5:
				return 0x2A;
			case 0xFCA6:
				return 0x2C;
			case 0xFCA7:
				return 0x2B;
			case 0xFCA8:
				return 0x2C;
			case 0xFCA9:
				return 0x2B;
			case 0xFCAA:
				return 0x2B;
			case 0xFCAB:
				return 0x2C;
			case 0xFCAC:
				return 0x2C;
			case 0xFCAD:
				return 0x2C;
			case 0xFCAE:
				return 0x2B;
			case 0xFCAF:
				return 0x2C;
			case 0xFCB0:
				return 0x2C;
			case 0xFCB1:
				return 0x2A;
			case 0xFCB2:
				return 0x2B;
			case 0xFCB3:
				return 0x2B;
			case 0xFCB4:
				return 0x2B;
			case 0xFCB5:
				return 0x2A;
			case 0xFCB6:
				return 0x2B;
			case 0xFCB7:
				return 0x2B;
			case 0xFCB8:
				return 0x2A;
			case 0xFCB9:
				return 0x2B;
			case 0xFCBA:
				return 0x2B;
			case 0xFCBB:
				return 0x2B;
			case 0xFCBC:
				return 0x2D;
			case 0xFCBD:
				return 0x2D;
			case 0xFCBE:
				return 0x2B;
			case 0xFCBF:
				return 0x2A;
			case 0xFCC0:
				return 0x2B;
			case 0xFCC1:
				return 0x2B;
			case 0xFCC2:
				return 0x2A;
			case 0xFCC3:
				return 0x2B;
			case 0xFCC4:
				return 0x2B;
			case 0xFCC5:
				return 0x2A;
			case 0xFCC6:
				return 0x2B;
			case 0xFCC7:
				return 0x2A;
			case 0xFCC8:
				return 0x2B;
			case 0xFCC9:
				return 0x2B;
			case 0xFCCA:
				return 0x2A;
			case 0xFCCB:
				return 0x2B;
			case 0xFCCC:
				return 0x2B;
			case 0xFCCD:
				return 0x2A;
			case 0xFCCE:
				return 0x2C;
			case 0xFCCF:
				return 0x2B;
			case 0xFCD0:
				return 0x2C;
			case 0xFCD1:
				return 0x2C;
			case 0xFCD2:
				return 0x2C;
			case 0xFCD3:
				return 0x2B;
			case 0xFCD4:
				return 0x2C;
			case 0xFCD5:
				return 0x2C;
			case 0xFCD6:
				return 0x2B;
			case 0xFCD7:
				return 0x2B;
			case 0xFCD8:
				return 0x2B;
			case 0xFCD9:
				return 0x37;
			case 0xFCDA:
				return 0x2B;
			case 0xFCDB:
				return 0x2A;
			case 0xFCDC:
				return 0x2B;
			case 0xFCDD:
				return 0x2B;
			case 0xFCDE:
				return 0x2A;
			case 0xFCDF:
				return 0x3B;
			case 0xFCE0:
				return 0x3A;
			case 0xFCE1:
				return 0x2A;
			case 0xFCE2:
				return 0x29;
			case 0xFCE3:
				return 0x2A;
			case 0xFCE4:
				return 0x29;
			case 0xFCE5:
				return 0x2B;
			case 0xFCE6:
				return 0x2A;
			case 0xFCE7:
				return 0x2B;
			case 0xFCE8:
				return 0x2A;
			case 0xFCE9:
				return 0x2C;
			case 0xFCEA:
				return 0x2B;
			case 0xFCEB:
				return 0x29;
			case 0xFCEC:
				return 0x2A;
			case 0xFCED:
				return 0x2A;
			case 0xFCEE:
				return 0x2B;
			case 0xFCEF:
				return 0x2A;
			case 0xFCF0:
				return 0x2A;
			case 0xFCF1:
				return 0x29;
			case 0xFCF2:
				return 0x2E;
			case 0xFCF3:
				return 0x2E;
			case 0xFCF4:
				return 0x2E;
			case 0xFCF5:
				return 0x34;
			case 0xFCF6:
				return 0x2B;
			case 0xFCF7:
				return 0x34;
			case 0xFCF8:
				return 0x2B;
			case 0xFCF9:
				return 0x36;
			case 0xFCFA:
				return 0x2D;
			case 0xFCFB:
				return 0x35;
			case 0xFCFC:
				return 0x2C;
			case 0xFCFD:
				return 0x36;
			case 0xFCFE:
				return 0x2D;
			case 0xFCFF:
				return 0x34;
			case 0xFD00:
				return 0x2B;
			case 0xFD01:
				return 0x35;
			case 0xFD02:
				return 0x2C;
			case 0xFD03:
				return 0x35;
			case 0xFD04:
				return 0x2C;
			case 0xFD05:
				return 0x34;
			case 0xFD06:
				return 0x2B;
			case 0xFD07:
				return 0x34;
			case 0xFD08:
				return 0x2B;
			case 0xFD09:
				return 0x2E;
			case 0xFD0A:
				return 0x2D;
			case 0xFD0B:
				return 0x2E;
			case 0xFD0C:
				return 0x2E;
			case 0xFD0D:
				return 0x2D;
			case 0xFD0E:
				return 0x2C;
			case 0xFD0F:
				return 0x2B;
			case 0xFD10:
				return 0x2B;
			case 0xFD11:
				return 0x31;
			case 0xFD12:
				return 0x28;
			case 0xFD13:
				return 0x31;
			case 0xFD14:
				return 0x28;
			case 0xFD15:
				return 0x33;
			case 0xFD16:
				return 0x2A;
			case 0xFD17:
				return 0x32;
			case 0xFD18:
				return 0x29;
			case 0xFD19:
				return 0x33;
			case 0xFD1A:
				return 0x2A;
			case 0xFD1B:
				return 0x31;
			case 0xFD1C:
				return 0x28;
			case 0xFD1D:
				return 0x32;
			case 0xFD1E:
				return 0x29;
			case 0xFD1F:
				return 0x32;
			case 0xFD20:
				return 0x29;
			case 0xFD21:
				return 0x31;
			case 0xFD22:
				return 0x28;
			case 0xFD23:
				return 0x31;
			case 0xFD24:
				return 0x28;
			case 0xFD25:
				return 0x2B;
			case 0xFD26:
				return 0x2A;
			case 0xFD27:
				return 0x2B;
			case 0xFD28:
				return 0x2B;
			case 0xFD29:
				return 0x2A;
			case 0xFD2A:
				return 0x29;
			case 0xFD2B:
				return 0x28;
			case 0xFD2C:
				return 0x28;
			case 0xFD2D:
				return 0x2D;
			case 0xFD2E:
				return 0x2C;
			case 0xFD2F:
				return 0x2D;
			case 0xFD30:
				return 0x2D;
			case 0xFD31:
				return 0x2B;
			case 0xFD32:
				return 0x2C;
			case 0xFD33:
				return 0x2B;
			case 0xFD34:
				return 0x2B;
			case 0xFD35:
				return 0x2A;
			case 0xFD36:
				return 0x2B;
			case 0xFD37:
				return 0x2C;
			case 0xFD38:
				return 0x2B;
			case 0xFD39:
				return 0x2C;
			case 0xFD3A:
				return 0x2A;
			case 0xFD3B:
				return 0x2A;
			case 0xFD3C:
				return 0x2E;
			case 0xFD3D:
				return 0x31;
			case 0xFD3E:
				return 0x18;
			case 0xFD3F:
				return 0x19;
			case 0xFD50:
				return 0x35;
			case 0xFD51:
				return 0x32;
			case 0xFD52:
				return 0x34;
			case 0xFD53:
				return 0x34;
			case 0xFD54:
				return 0x35;
			case 0xFD55:
				return 0x35;
			case 0xFD56:
				return 0x34;
			case 0xFD57:
				return 0x35;
			case 0xFD58:
				return 0x33;
			case 0xFD59:
				return 0x35;
			case 0xFD5A:
				return 0x32;
			case 0xFD5B:
				return 0x3B;
			case 0xFD5C:
				return 0x35;
			case 0xFD5D:
				return 0x35;
			case 0xFD5E:
				return 0x3C;
			case 0xFD5F:
				return 0x33;
			case 0xFD60:
				return 0x35;
			case 0xFD61:
				return 0x36;
			case 0xFD62:
				return 0x34;
			case 0xFD63:
				return 0x36;
			case 0xFD64:
				return 0x31;
			case 0xFD65:
				return 0x33;
			case 0xFD66:
				return 0x33;
			case 0xFD67:
				return 0x34;
			case 0xFD68:
				return 0x36;
			case 0xFD69:
				return 0x34;
			case 0xFD6A:
				return 0x35;
			case 0xFD6B:
				return 0x37;
			case 0xFD6C:
				return 0x35;
			case 0xFD6D:
				return 0x37;
			case 0xFD6E:
				return 0x3A;
			case 0xFD6F:
				return 0x33;
			case 0xFD70:
				return 0x35;
			case 0xFD71:
				return 0x32;
			case 0xFD72:
				return 0x34;
			case 0xFD73:
				return 0x35;
			case 0xFD74:
				return 0x32;
			case 0xFD75:
				return 0x33;
			case 0xFD76:
				return 0x33;
			case 0xFD77:
				return 0x35;
			case 0xFD78:
				return 0x3B;
			case 0xFD79:
				return 0x35;
			case 0xFD7A:
				return 0x34;
			case 0xFD7B:
				return 0x3D;
			case 0xFD7C:
				return 0x33;
			case 0xFD7D:
				return 0x35;
			case 0xFD7E:
				return 0x32;
			case 0xFD7F:
				return 0x33;
			case 0xFD80:
				return 0x32;
			case 0xFD81:
				return 0x31;
			case 0xFD82:
				return 0x3A;
			case 0xFD83:
				return 0x35;
			case 0xFD84:
				return 0x33;
			case 0xFD85:
				return 0x33;
			case 0xFD86:
				return 0x35;
			case 0xFD87:
				return 0x32;
			case 0xFD88:
				return 0x34;
			case 0xFD89:
				return 0x35;
			case 0xFD8A:
				return 0x35;
			case 0xFD8B:
				return 0x32;
			case 0xFD8C:
				return 0x35;
			case 0xFD8D:
				return 0x36;
			case 0xFD8E:
				return 0x36;
			case 0xFD8F:
				return 0x36;
			case 0xFD92:
				return 0x36;
			case 0xFD93:
				return 0x35;
			case 0xFD94:
				return 0x35;
			case 0xFD95:
				return 0x35;
			case 0xFD96:
				return 0x3B;
			case 0xFD97:
				return 0x34;
			case 0xFD98:
				return 0x36;
			case 0xFD99:
				return 0x3C;
			case 0xFD9A:
				return 0x33;
			case 0xFD9B:
				return 0x3C;
			case 0xFD9C:
				return 0x33;
			case 0xFD9D:
				return 0x35;
			case 0xFD9E:
				return 0x32;
			case 0xFD9F:
				return 0x32;
			case 0xFDA0:
				return 0x3B;
			case 0xFDA1:
				return 0x32;
			case 0xFDA2:
				return 0x3B;
			case 0xFDA3:
				return 0x32;
			case 0xFDA4:
				return 0x3B;
			case 0xFDA5:
				return 0x33;
			case 0xFDA6:
				return 0x3B;
			case 0xFDA7:
				return 0x3C;
			case 0xFDA8:
				return 0x3C;
			case 0xFDA9:
				return 0x31;
			case 0xFDAA:
				return 0x33;
			case 0xFDAB:
				return 0x31;
			case 0xFDAC:
				return 0x32;
			case 0xFDAD:
				return 0x32;
			case 0xFDAE:
				return 0x31;
			case 0xFDAF:
				return 0x32;
			case 0xFDB0:
				return 0x32;
			case 0xFDB1:
				return 0x33;
			case 0xFDB2:
				return 0x32;
			case 0xFDB3:
				return 0x32;
			case 0xFDB4:
				return 0x34;
			case 0xFDB5:
				return 0x34;
			case 0xFDB6:
				return 0x32;
			case 0xFDB7:
				return 0x32;
			case 0xFDB8:
				return 0x35;
			case 0xFDB9:
				return 0x33;
			case 0xFDBA:
				return 0x35;
			case 0xFDBB:
				return 0x33;
			case 0xFDBC:
				return 0x33;
			case 0xFDBD:
				return 0x33;
			case 0xFDBE:
				return 0x32;
			case 0xFDBF:
				return 0x32;
			case 0xFDC0:
				return 0x33;
			case 0xFDC1:
				return 0x32;
			case 0xFDC2:
				return 0x31;
			case 0xFDC3:
				return 0x35;
			case 0xFDC4:
				return 0x35;
			case 0xFDC5:
				return 0x35;
			case 0xFDC6:
				return 0x33;
			case 0xFDC7:
				return 0x33;
			case 0xFDF0:
				return 0x3E;
			case 0xFDF1:
				return 0x3D;
			case 0xFDF2:
				return 0x24;
			case 0xFDF3:
				return 0x24;
			case 0xFDF4:
				return 0x27;
			case 0xFDF5:
				return 0x24;
			case 0xFDF6:
				return 0x25;
			case 0xFDF7:
				return 0x25;
			case 0xFDF8:
				return 0x27;
			case 0xFDF9:
				return 0x24;
			case 0xFDFA:
				return 0x2C;
			case 0xFDFB:
				return 0x20;
			case 0xFDFC:
				return 0xA;
			case 0xFDFD:
				return 0x2E;
			case 0xFE00:
				return 0x15;
			case 0xFE01:
				return 0x15;
			case 0xFE02:
				return 0x15;
			case 0xFE03:
				return 0x15;
			case 0xFE04:
				return 0x15;
			case 0xFE05:
				return 0x15;
			case 0xFE06:
				return 0x15;
			case 0xFE07:
				return 0x15;
			case 0xFE08:
				return 0x15;
			case 0xFE09:
				return 0x16;
			case 0xFE0A:
				return 0x16;
			case 0xFE0B:
				return 0x16;
			case 0xFE0C:
				return 0x16;
			case 0xFE0D:
				return 0x16;
			case 0xFE0E:
				return 0x16;
			case 0xFE0F:
				return 0x16;
			case 0xFE10:
				return 0x25;
			case 0xFE11:
				return 0x31;
			case 0xFE12:
				return 0x35;
			case 0xFE13:
				return 0x25;
			case 0xFE14:
				return 0x29;
			case 0xFE15:
				return 0x30;
			case 0xFE16:
				return 0x2D;
			case 0xFE17:
				return 0x3D;
			case 0xFE18:
				return 0x3E;
			case 0xFE19:
				return 0x33;
			case 0xFE20:
				return 0x1D;
			case 0xFE21:
				return 0x1E;
			case 0xFE22:
				return 0x21;
			case 0xFE23:
				return 0x22;
			case 0xFE24:
				return 0x1B;
			case 0xFE25:
				return 0x1C;
			case 0xFE26:
				return 0x1C;
			case 0xFE27:
				return 0x23;
			case 0xFE28:
				return 0x24;
			case 0xFE29:
				return 0x20;
			case 0xFE2A:
				return 0x21;
			case 0xFE2B:
				return 0x21;
			case 0xFE2C:
				return 0x22;
			case 0xFE2D:
				return 0x22;
			case 0xFE2E:
				return 0x23;
			case 0xFE2F:
				return 0x24;
			case 0xFE30:
				return 0x2E;
			case 0xFE31:
				return 0x27;
			case 0xFE32:
				return 0x27;
			case 0xFE33:
				return 0x28;
			case 0xFE34:
				return 0x2D;
			case 0xFE35:
				return 0x30;
			case 0xFE36:
				return 0x31;
			case 0xFE37:
				return 0x32;
			case 0xFE38:
				return 0x33;
			case 0xFE39:
				return 0x3B;
			case 0xFE3A:
				return 0x3C;
			case 0xFE3B:
				return 0x3D;
			case 0xFE3C:
				return 0x3E;
			case 0xFE3D:
				return 0x39;
			case 0xFE3E:
				return 0x3A;
			case 0xFE3F:
				return 0x32;
			case 0xFE40:
				return 0x33;
			case 0xFE41:
				return 0x33;
			case 0xFE42:
				return 0x34;
			case 0xFE43:
				return 0x39;
			case 0xFE44:
				return 0x3A;
			case 0xFE45:
				return 0xB;
			case 0xFE46:
				return 0x11;
			case 0xFE47:
				return 0x33;
			case 0xFE48:
				return 0x34;
			case 0xFE49:
				return 0x10;
			case 0xFE4A:
				return 0x14;
			case 0xFE4B:
				return 0xE;
			case 0xFE4C:
				return 0x15;
			case 0xFE4D:
				return 0x10;
			case 0xFE4E:
				return 0x14;
			case 0xFE4F:
				return 0xE;
			case 0xFE50:
				return 0xC;
			case 0xFE51:
				return 0x18;
			case 0xFE52:
				return 0x10;
			case 0xFE54:
				return 0x10;
			case 0xFE55:
				return 0xC;
			case 0xFE56:
				return 0x14;
			case 0xFE57:
				return 0x17;
			case 0xFE58:
				return 0xE;
			case 0xFE59:
				return 0x17;
			case 0xFE5A:
				return 0x18;
			case 0xFE5B:
				return 0x19;
			case 0xFE5C:
				return 0x1A;
			case 0xFE5D:
				return 0x22;
			case 0xFE5E:
				return 0x23;
			case 0xFE5F:
				return 0x12;
			case 0xFE60:
				return 0x10;
			case 0xFE61:
				return 0xF;
			case 0xFE62:
				return 0x10;
			case 0xFE63:
				return 0x13;
			case 0xFE64:
				return 0x15;
			case 0xFE65:
				return 0x18;
			case 0xFE66:
				return 0x12;
			case 0xFE68:
				return 0x16;
			case 0xFE69:
				return 0x12;
			case 0xFE6A:
				return 0x13;
			case 0xFE6B:
				return 0x14;
			case 0xFE70:
				return 0x1E;
			case 0xFE71:
				return 0x23;
			case 0xFE72:
				return 0x1E;
			case 0xFE73:
				return 0x15;
			case 0xFE74:
				return 0x1E;
			case 0xFE76:
				return 0x1B;
			case 0xFE77:
				return 0x19;
			case 0xFE78:
				return 0x1B;
			case 0xFE79:
				return 0x19;
			case 0xFE7A:
				return 0x1B;
			case 0xFE7B:
				return 0x19;
			case 0xFE7C:
				return 0x1C;
			case 0xFE7D:
				return 0x1A;
			case 0xFE7E:
				return 0x1B;
			case 0xFE7F:
				return 0x19;
			case 0xFE80:
				return 0x22;
			case 0xFE81:
				return 0x32;
			case 0xFE82:
				return 0x2F;
			case 0xFE83:
				return 0x32;
			case 0xFE84:
				return 0x2F;
			case 0xFE85:
				return 0x31;
			case 0xFE86:
				return 0x2E;
			case 0xFE87:
				return 0x32;
			case 0xFE88:
				return 0x2F;
			case 0xFE89:
				return 0x31;
			case 0xFE8A:
				return 0x2E;
			case 0xFE8B:
				return 0x30;
			case 0xFE8C:
				return 0x2F;
			case 0xFE8D:
				return 0x21;
			case 0xFE8E:
				return 0x1E;
			case 0xFE8F:
				return 0x20;
			case 0xFE90:
				return 0x1D;
			case 0xFE91:
				return 0x1F;
			case 0xFE92:
				return 0x1E;
			case 0xFE93:
				return 0x28;
			case 0xFE94:
				return 0x25;
			case 0xFE95:
				return 0x20;
			case 0xFE96:
				return 0x1D;
			case 0xFE97:
				return 0x1F;
			case 0xFE98:
				return 0x1E;
			case 0xFE99:
				return 0x21;
			case 0xFE9A:
				return 0x1E;
			case 0xFE9B:
				return 0x20;
			case 0xFE9C:
				return 0x1F;
			case 0xFE9D:
				return 0x21;
			case 0xFE9E:
				return 0x1E;
			case 0xFE9F:
				return 0x20;
			case 0xFEA0:
				return 0x1F;
			case 0xFEA1:
				return 0x20;
			case 0xFEA2:
				return 0x1D;
			case 0xFEA3:
				return 0x1F;
			case 0xFEA4:
				return 0x1E;
			case 0xFEA5:
				return 0x21;
			case 0xFEA6:
				return 0x1E;
			case 0xFEA7:
				return 0x20;
			case 0xFEA8:
				return 0x1F;
			case 0xFEA9:
				return 0x20;
			case 0xFEAA:
				return 0x1D;
			case 0xFEAB:
				return 0x21;
			case 0xFEAC:
				return 0x1E;
			case 0xFEAD:
				return 0x20;
			case 0xFEAE:
				return 0x1D;
			case 0xFEAF:
				return 0x21;
			case 0xFEB0:
				return 0x1E;
			case 0xFEB1:
				return 0x21;
			case 0xFEB2:
				return 0x1E;
			case 0xFEB3:
				return 0x20;
			case 0xFEB4:
				return 0x1F;
			case 0xFEB5:
				return 0x22;
			case 0xFEB6:
				return 0x1F;
			case 0xFEB7:
				return 0x21;
			case 0xFEB8:
				return 0x20;
			case 0xFEB9:
				return 0x20;
			case 0xFEBA:
				return 0x1D;
			case 0xFEBB:
				return 0x1F;
			case 0xFEBC:
				return 0x1E;
			case 0xFEBD:
				return 0x20;
			case 0xFEBE:
				return 0x1D;
			case 0xFEBF:
				return 0x1F;
			case 0xFEC0:
				return 0x1E;
			case 0xFEC1:
				return 0x20;
			case 0xFEC2:
				return 0x1D;
			case 0xFEC3:
				return 0x1F;
			case 0xFEC4:
				return 0x1E;
			case 0xFEC5:
				return 0x20;
			case 0xFEC6:
				return 0x1D;
			case 0xFEC7:
				return 0x1F;
			case 0xFEC8:
				return 0x1E;
			case 0xFEC9:
				return 0x20;
			case 0xFECA:
				return 0x1D;
			case 0xFECB:
				return 0x1F;
			case 0xFECC:
				return 0x1E;
			case 0xFECD:
				return 0x22;
			case 0xFECE:
				return 0x1F;
			case 0xFECF:
				return 0x21;
			case 0xFED0:
				return 0x20;
			case 0xFED1:
				return 0x20;
			case 0xFED2:
				return 0x1D;
			case 0xFED3:
				return 0x1F;
			case 0xFED4:
				return 0x1E;
			case 0xFED5:
				return 0x20;
			case 0xFED6:
				return 0x1D;
			case 0xFED7:
				return 0x1F;
			case 0xFED8:
				return 0x1E;
			case 0xFED9:
				return 0x20;
			case 0xFEDA:
				return 0x1D;
			case 0xFEDB:
				return 0x1F;
			case 0xFEDC:
				return 0x1E;
			case 0xFEDD:
				return 0x20;
			case 0xFEDE:
				return 0x1D;
			case 0xFEDF:
				return 0x1F;
			case 0xFEE0:
				return 0x1E;
			case 0xFEE1:
				return 0x21;
			case 0xFEE2:
				return 0x1E;
			case 0xFEE3:
				return 0x20;
			case 0xFEE4:
				return 0x1F;
			case 0xFEE5:
				return 0x21;
			case 0xFEE6:
				return 0x1E;
			case 0xFEE7:
				return 0x20;
			case 0xFEE8:
				return 0x1F;
			case 0xFEE9:
				return 0x20;
			case 0xFEEA:
				return 0x1D;
			case 0xFEEB:
				return 0x1F;
			case 0xFEEC:
				return 0x1E;
			case 0xFEED:
				return 0x20;
			case 0xFEEE:
				return 0x1D;
			case 0xFEEF:
				return 0x29;
			case 0xFEF0:
				return 0x26;
			case 0xFEF1:
				return 0x20;
			case 0xFEF2:
				return 0x1D;
			case 0xFEF3:
				return 0x1F;
			case 0xFEF4:
				return 0x1E;
			case 0xFEF5:
				return 0x3D;
			case 0xFEF6:
				return 0x3A;
			case 0xFEF7:
				return 0x3D;
			case 0xFEF8:
				return 0x3A;
			case 0xFEF9:
				return 0x3D;
			case 0xFEFA:
				return 0x3A;
			case 0xFEFB:
				return 0x2C;
			case 0xFEFC:
				return 0x29;
			case 0xFEFF:
				return 0x1A;
			case 0xFF01:
				return 0x1B;
			case 0xFF02:
				return 0x19;
			case 0xFF03:
				return 0x16;
			case 0xFF04:
				return 0x16;
			case 0xFF05:
				return 0x17;
			case 0xFF06:
				return 0x14;
			case 0xFF07:
				return 0x15;
			case 0xFF08:
				return 0x1B;
			case 0xFF09:
				return 0x1C;
			case 0xFF0A:
				return 0x13;
			case 0xFF0B:
				return 0x14;
			case 0xFF0C:
				return 0x10;
			case 0xFF0D:
				return 0x17;
			case 0xFF0E:
				return 0x14;
			case 0xFF0F:
				return 0x12;
			case 0xFF10:
				return 0x15;
			case 0xFF11:
				return 0x14;
			case 0xFF12:
				return 0x14;
			case 0xFF13:
				return 0x16;
			case 0xFF14:
				return 0x15;
			case 0xFF15:
				return 0x15;
			case 0xFF16:
				return 0x14;
			case 0xFF17:
				return 0x16;
			case 0xFF18:
				return 0x16;
			case 0xFF19:
				return 0x15;
			case 0xFF1A:
				return 0x10;
			case 0xFF1B:
				return 0x14;
			case 0xFF1C:
				return 0x19;
			case 0xFF1D:
				return 0x16;
			case 0xFF1E:
				return 0x1C;
			case 0xFF1F:
				return 0x18;
			case 0xFF20:
				return 0x18;
			case 0xFF21:
				return 0x21;
			case 0xFF22:
				return 0x21;
			case 0xFF23:
				return 0x21;
			case 0xFF24:
				return 0x21;
			case 0xFF25:
				return 0x21;
			case 0xFF26:
				return 0x21;
			case 0xFF27:
				return 0x21;
			case 0xFF28:
				return 0x21;
			case 0xFF29:
				return 0x21;
			case 0xFF2A:
				return 0x21;
			case 0xFF2B:
				return 0x21;
			case 0xFF2C:
				return 0x21;
			case 0xFF2D:
				return 0x21;
			case 0xFF2E:
				return 0x21;
			case 0xFF2F:
				return 0x21;
			case 0xFF30:
				return 0x21;
			case 0xFF31:
				return 0x21;
			case 0xFF32:
				return 0x21;
			case 0xFF33:
				return 0x21;
			case 0xFF34:
				return 0x21;
			case 0xFF35:
				return 0x21;
			case 0xFF36:
				return 0x21;
			case 0xFF37:
				return 0x21;
			case 0xFF38:
				return 0x21;
			case 0xFF39:
				return 0x21;
			case 0xFF3A:
				return 0x21;
			case 0xFF3B:
				return 0x1E;
			case 0xFF3C:
				return 0x1A;
			case 0xFF3D:
				return 0x1F;
			case 0xFF3E:
				return 0x1C;
			case 0xFF3F:
				return 0x13;
			case 0xFF40:
				return 0x17;
			case 0xFF41:
				return 0x1F;
			case 0xFF42:
				return 0x1F;
			case 0xFF43:
				return 0x1F;
			case 0xFF44:
				return 0x1F;
			case 0xFF45:
				return 0x1F;
			case 0xFF46:
				return 0x1F;
			case 0xFF47:
				return 0x1F;
			case 0xFF48:
				return 0x1F;
			case 0xFF49:
				return 0x1F;
			case 0xFF4A:
				return 0x1F;
			case 0xFF4B:
				return 0x1F;
			case 0xFF4C:
				return 0x1F;
			case 0xFF4D:
				return 0x1F;
			case 0xFF4E:
				return 0x1F;
			case 0xFF4F:
				return 0x1F;
			case 0xFF50:
				return 0x1F;
			case 0xFF51:
				return 0x1F;
			case 0xFF52:
				return 0x1F;
			case 0xFF53:
				return 0x1F;
			case 0xFF54:
				return 0x1F;
			case 0xFF55:
				return 0x1F;
			case 0xFF56:
				return 0x1F;
			case 0xFF57:
				return 0x1F;
			case 0xFF58:
				return 0x1F;
			case 0xFF59:
				return 0x1F;
			case 0xFF5A:
				return 0x1F;
			case 0xFF5B:
				return 0x1D;
			case 0xFF5C:
				return 0x18;
			case 0xFF5D:
				return 0x1E;
			case 0xFF5E:
				return 0x10;
			case 0xFF5F:
				return 0x21;
			case 0xFF60:
				return 0x22;
			case 0xFF61:
				return 0x20;
			case 0xFF62:
				return 0x1E;
			case 0xFF63:
				return 0x1F;
			case 0xFF64:
				return 0x1C;
			case 0xFF65:
				return 0x1E;
			case 0xFF66:
				return 0x1D;
			case 0xFF67:
				return 0x22;
			case 0xFF68:
				return 0x22;
			case 0xFF69:
				return 0x22;
			case 0xFF6A:
				return 0x22;
			case 0xFF6B:
				return 0x22;
			case 0xFF6C:
				return 0x23;
			case 0xFF6D:
				return 0x23;
			case 0xFF6E:
				return 0x23;
			case 0xFF6F:
				return 0x23;
			case 0xFF70:
				return 0x31;
			case 0xFF71:
				return 0x1C;
			case 0xFF72:
				return 0x1C;
			case 0xFF73:
				return 0x1C;
			case 0xFF74:
				return 0x1C;
			case 0xFF75:
				return 0x1C;
			case 0xFF76:
				return 0x1D;
			case 0xFF77:
				return 0x1D;
			case 0xFF78:
				return 0x1D;
			case 0xFF79:
				return 0x1D;
			case 0xFF7A:
				return 0x1D;
			case 0xFF7B:
				return 0x1D;
			case 0xFF7C:
				return 0x1D;
			case 0xFF7D:
				return 0x1D;
			case 0xFF7E:
				return 0x1D;
			case 0xFF7F:
				return 0x1D;
			case 0xFF80:
				return 0x1D;
			case 0xFF81:
				return 0x1D;
			case 0xFF82:
				return 0x1D;
			case 0xFF83:
				return 0x1D;
			case 0xFF84:
				return 0x1D;
			case 0xFF85:
				return 0x1D;
			case 0xFF86:
				return 0x1D;
			case 0xFF87:
				return 0x1D;
			case 0xFF88:
				return 0x1D;
			case 0xFF89:
				return 0x1D;
			case 0xFF8A:
				return 0x1D;
			case 0xFF8B:
				return 0x1D;
			case 0xFF8C:
				return 0x1D;
			case 0xFF8D:
				return 0x1D;
			case 0xFF8E:
				return 0x1D;
			case 0xFF8F:
				return 0x1D;
			case 0xFF90:
				return 0x1D;
			case 0xFF91:
				return 0x1D;
			case 0xFF92:
				return 0x1D;
			case 0xFF93:
				return 0x1D;
			case 0xFF94:
				return 0x1D;
			case 0xFF95:
				return 0x1D;
			case 0xFF96:
				return 0x1D;
			case 0xFF97:
				return 0x1D;
			case 0xFF98:
				return 0x1D;
			case 0xFF99:
				return 0x1D;
			case 0xFF9A:
				return 0x1D;
			case 0xFF9B:
				return 0x1D;
			case 0xFF9C:
				return 0x1D;
			case 0xFF9D:
				return 0x1C;
			case 0xFF9E:
				return 0x25;
			case 0xFF9F:
				return 0x2A;
			case 0xFFA0:
				return 0x18;
			case 0xFFA1:
				return 0x1F;
			case 0xFFA2:
				return 0x24;
			case 0xFFA3:
				return 0x24;
			case 0xFFA4:
				return 0x1E;
			case 0xFFA5:
				return 0x24;
			case 0xFFA6:
				return 0x24;
			case 0xFFA7:
				return 0x1F;
			case 0xFFA8:
				return 0x24;
			case 0xFFA9:
				return 0x1E;
			case 0xFFAA:
				return 0x25;
			case 0xFFAB:
				return 0x24;
			case 0xFFAC:
				return 0x24;
			case 0xFFAD:
				return 0x23;
			case 0xFFAE:
				return 0x26;
			case 0xFFAF:
				return 0x26;
			case 0xFFB0:
				return 0x24;
			case 0xFFB1:
				return 0x1E;
			case 0xFFB2:
				return 0x1E;
			case 0xFFB3:
				return 0x23;
			case 0xFFB4:
				return 0x23;
			case 0xFFB5:
				return 0x1D;
			case 0xFFB6:
				return 0x22;
			case 0xFFB7:
				return 0x1E;
			case 0xFFB8:
				return 0x1E;
			case 0xFFB9:
				return 0x23;
			case 0xFFBA:
				return 0x20;
			case 0xFFBB:
				return 0x20;
			case 0xFFBC:
				return 0x20;
			case 0xFFBD:
				return 0x20;
			case 0xFFBE:
				return 0x1E;
			case 0xFFC2:
				return 0x1A;
			case 0xFFC3:
				return 0x1B;
			case 0xFFC4:
				return 0x1B;
			case 0xFFC5:
				return 0x1C;
			case 0xFFC6:
				return 0x1B;
			case 0xFFC7:
				return 0x1A;
			case 0xFFCA:
				return 0x1C;
			case 0xFFCB:
				return 0x1B;
			case 0xFFCC:
				return 0x1A;
			case 0xFFCD:
				return 0x1B;
			case 0xFFCE:
				return 0x1C;
			case 0xFFCF:
				return 0x1B;
			case 0xFFD2:
				return 0x1B;
			case 0xFFD3:
				return 0x1A;
			case 0xFFD4:
				return 0x1C;
			case 0xFFD5:
				return 0x1B;
			case 0xFFD6:
				return 0x1B;
			case 0xFFD7:
				return 0x1B;
			case 0xFFDA:
				return 0x1B;
			case 0xFFDB:
				return 0x1B;
			case 0xFFDC:
				return 0x1A;
			case 0xFFE0:
				return 0x14;
			case 0xFFE1:
				return 0x15;
			case 0xFFE2:
				return 0x13;
			case 0xFFE3:
				return 0x11;
			case 0xFFE4:
				return 0x15;
			case 0xFFE5:
				return 0x13;
			case 0xFFE6:
				return 0x13;
			case 0xFFE8:
				return 0x1F;
			case 0xFFE9:
				return 0x1A;
			case 0xFFEA:
				return 0x18;
			case 0xFFEB:
				return 0x1B;
			case 0xFFEC:
				return 0x1A;
			case 0xFFED:
				return 0x17;
			case 0xFFEE:
				return 0x17;
			case 0xFFF9:
				return 0x1E;
			case 0xFFFA:
				return 0x21;
			case 0xFFFB:
				return 0x22;
			case 0xFFFC:
				return 0x1D;
			case 0xFFFD:
				return 0x16;
			case 0x10000:
				return 0x19;
			case 0x10001:
				return 0x19;
			case 0x10002:
				return 0x19;
			case 0x10003:
				return 0x19;
			case 0x10004:
				return 0x19;
			case 0x10005:
				return 0x1A;
			case 0x10006:
				return 0x1A;
			case 0x10007:
				return 0x1A;
			case 0x10008:
				return 0x1A;
			case 0x10009:
				return 0x1A;
			case 0x1000A:
				return 0x1A;
			case 0x1000B:
				return 0x1A;
			case 0x1000D:
				return 0x1A;
			case 0x1000E:
				return 0x1A;
			case 0x1000F:
				return 0x1A;
			case 0x10010:
				return 0x1A;
			case 0x10011:
				return 0x1A;
			case 0x10012:
				return 0x1A;
			case 0x10013:
				return 0x1A;
			case 0x10014:
				return 0x1A;
			case 0x10015:
				return 0x1A;
			case 0x10016:
				return 0x1A;
			case 0x10017:
				return 0x1A;
			case 0x10018:
				return 0x1A;
			case 0x10019:
				return 0x1A;
			case 0x1001A:
				return 0x1A;
			case 0x1001B:
				return 0x1A;
			case 0x1001C:
				return 0x1A;
			case 0x1001D:
				return 0x1A;
			case 0x1001E:
				return 0x1A;
			case 0x1001F:
				return 0x1A;
			case 0x10020:
				return 0x1A;
			case 0x10021:
				return 0x1A;
			case 0x10022:
				return 0x1A;
			case 0x10023:
				return 0x1A;
			case 0x10024:
				return 0x1A;
			case 0x10025:
				return 0x1A;
			case 0x10026:
				return 0x1A;
			case 0x10028:
				return 0x1A;
			case 0x10029:
				return 0x1A;
			case 0x1002A:
				return 0x1A;
			case 0x1002B:
				return 0x1A;
			case 0x1002C:
				return 0x1A;
			case 0x1002D:
				return 0x1A;
			case 0x1002E:
				return 0x1A;
			case 0x1002F:
				return 0x1A;
			case 0x10030:
				return 0x1A;
			case 0x10031:
				return 0x1A;
			case 0x10032:
				return 0x1A;
			case 0x10033:
				return 0x1A;
			case 0x10034:
				return 0x1A;
			case 0x10035:
				return 0x1A;
			case 0x10036:
				return 0x1A;
			case 0x10037:
				return 0x1A;
			case 0x10038:
				return 0x1A;
			case 0x10039:
				return 0x1A;
			case 0x1003A:
				return 0x1A;
			case 0x1003C:
				return 0x1A;
			case 0x1003D:
				return 0x1A;
			case 0x1003F:
				return 0x1A;
			case 0x10040:
				return 0x1A;
			case 0x10041:
				return 0x1A;
			case 0x10042:
				return 0x1A;
			case 0x10043:
				return 0x1B;
			case 0x10044:
				return 0x1B;
			case 0x10045:
				return 0x1B;
			case 0x10046:
				return 0x1B;
			case 0x10047:
				return 0x1B;
			case 0x10048:
				return 0x1B;
			case 0x10049:
				return 0x1B;
			case 0x1004A:
				return 0x1B;
			case 0x1004B:
				return 0x1B;
			case 0x1004C:
				return 0x1B;
			case 0x1004D:
				return 0x1B;
			case 0x10050:
				return 0x15;
			case 0x10051:
				return 0x15;
			case 0x10052:
				return 0x15;
			case 0x10053:
				return 0x15;
			case 0x10054:
				return 0x15;
			case 0x10055:
				return 0x15;
			case 0x10056:
				return 0x15;
			case 0x10057:
				return 0x15;
			case 0x10058:
				return 0x15;
			case 0x10059:
				return 0x15;
			case 0x1005A:
				return 0x15;
			case 0x1005B:
				return 0x15;
			case 0x1005C:
				return 0x15;
			case 0x1005D:
				return 0x15;
			case 0x10080:
				return 0x1B;
			case 0x10081:
				return 0x1D;
			case 0x10082:
				return 0x1C;
			case 0x10083:
				return 0x1D;
			case 0x10084:
				return 0x1D;
			case 0x10085:
				return 0x21;
			case 0x10086:
				return 0x1C;
			case 0x10087:
				return 0x1C;
			case 0x10088:
				return 0x21;
			case 0x10089:
				return 0x20;
			case 0x1008A:
				return 0x1C;
			case 0x1008B:
				return 0x1D;
			case 0x1008C:
				return 0x1C;
			case 0x1008D:
				return 0x1D;
			case 0x1008E:
				return 0x1D;
			case 0x1008F:
				return 0x1E;
			case 0x10090:
				return 0x1D;
			case 0x10091:
				return 0x1D;
			case 0x10092:
				return 0x1F;
			case 0x10093:
				return 0x1C;
			case 0x10094:
				return 0x1E;
			case 0x10095:
				return 0x1B;
			case 0x10096:
				return 0x1C;
			case 0x10097:
				return 0x17;
			case 0x10098:
				return 0x1D;
			case 0x10099:
				return 0x1C;
			case 0x1009A:
				return 0x1E;
			case 0x1009B:
				return 0x1C;
			case 0x1009C:
				return 0x17;
			case 0x1009D:
				return 0x1C;
			case 0x1009E:
				return 0x17;
			case 0x1009F:
				return 0x17;
			case 0x100A0:
				return 0x1C;
			case 0x100A1:
				return 0x17;
			case 0x100A2:
				return 0x17;
			case 0x100A3:
				return 0x17;
			case 0x100A4:
				return 0x1D;
			case 0x100A5:
				return 0x17;
			case 0x100A6:
				return 0x17;
			case 0x100A7:
				return 0x1D;
			case 0x100A8:
				return 0x17;
			case 0x100A9:
				return 0x17;
			case 0x100AA:
				return 0x1F;
			case 0x100AB:
				return 0x1E;
			case 0x100AC:
				return 0x17;
			case 0x100AD:
				return 0x17;
			case 0x100AE:
				return 0x17;
			case 0x100AF:
				return 0x17;
			case 0x100B0:
				return 0x17;
			case 0x100B1:
				return 0x17;
			case 0x100B2:
				return 0x17;
			case 0x100B3:
				return 0x17;
			case 0x100B4:
				return 0x17;
			case 0x100B5:
				return 0x1D;
			case 0x100B6:
				return 0x17;
			case 0x100B7:
				return 0x1C;
			case 0x100B8:
				return 0x17;
			case 0x100B9:
				return 0x17;
			case 0x100BA:
				return 0x17;
			case 0x100BB:
				return 0x17;
			case 0x100BC:
				return 0x17;
			case 0x100BD:
				return 0x17;
			case 0x100BE:
				return 0x17;
			case 0x100BF:
				return 0x17;
			case 0x100C0:
				return 0x17;
			case 0x100C1:
				return 0x17;
			case 0x100C2:
				return 0x17;
			case 0x100C3:
				return 0x1E;
			case 0x100C4:
				return 0x21;
			case 0x100C5:
				return 0x1F;
			case 0x100C6:
				return 0x1D;
			case 0x100C7:
				return 0x1D;
			case 0x100C8:
				return 0x17;
			case 0x100C9:
				return 0x1D;
			case 0x100CA:
				return 0x17;
			case 0x100CB:
				return 0x17;
			case 0x100CC:
				return 0x27;
			case 0x100CD:
				return 0x1F;
			case 0x100CE:
				return 0x25;
			case 0x100CF:
				return 0x1D;
			case 0x100D0:
				return 0x17;
			case 0x100D1:
				return 0x17;
			case 0x100D2:
				return 0x1D;
			case 0x100D3:
				return 0x17;
			case 0x100D4:
				return 0x17;
			case 0x100D5:
				return 0x17;
			case 0x100D6:
				return 0x17;
			case 0x100D7:
				return 0x17;
			case 0x100D8:
				return 0x1C;
			case 0x100D9:
				return 0x17;
			case 0x100DA:
				return 0x17;
			case 0x100DB:
				return 0x17;
			case 0x100DC:
				return 0x17;
			case 0x100DD:
				return 0x17;
			case 0x100DE:
				return 0x1E;
			case 0x100DF:
				return 0x1E;
			case 0x100E0:
				return 0x1E;
			case 0x100E1:
				return 0x1E;
			case 0x100E2:
				return 0x1E;
			case 0x100E3:
				return 0x1E;
			case 0x100E4:
				return 0x1E;
			case 0x100E5:
				return 0x1E;
			case 0x100E6:
				return 0x1E;
			case 0x100E7:
				return 0x1E;
			case 0x100E8:
				return 0x1E;
			case 0x100E9:
				return 0x1E;
			case 0x100EA:
				return 0x1E;
			case 0x100EB:
				return 0x1E;
			case 0x100EC:
				return 0x1E;
			case 0x100ED:
				return 0x1E;
			case 0x100EE:
				return 0x1E;
			case 0x100EF:
				return 0x1E;
			case 0x100F0:
				return 0x1E;
			case 0x100F1:
				return 0x1E;
			case 0x100F2:
				return 0x1E;
			case 0x100F3:
				return 0x1E;
			case 0x100F4:
				return 0x1E;
			case 0x100F5:
				return 0x1E;
			case 0x100F6:
				return 0x1E;
			case 0x100F7:
				return 0x1E;
			case 0x100F8:
				return 0x1E;
			case 0x100F9:
				return 0x1E;
			case 0x100FA:
				return 0x1E;
			case 0x10100:
				return 0x1B;
			case 0x10101:
				return 0x1A;
			case 0x10102:
				return 0x12;
			case 0x10107:
				return 0x12;
			case 0x10108:
				return 0x12;
			case 0x10109:
				return 0x14;
			case 0x1010A:
				return 0x13;
			case 0x1010B:
				return 0x13;
			case 0x1010C:
				return 0x12;
			case 0x1010D:
				return 0x14;
			case 0x1010E:
				return 0x14;
			case 0x1010F:
				return 0x13;
			case 0x10110:
				return 0x12;
			case 0x10111:
				return 0x15;
			case 0x10112:
				return 0x15;
			case 0x10113:
				return 0x14;
			case 0x10114:
				return 0x14;
			case 0x10115:
				return 0x14;
			case 0x10116:
				return 0x16;
			case 0x10117:
				return 0x15;
			case 0x10118:
				return 0x15;
			case 0x10119:
				return 0x1A;
			case 0x1011A:
				return 0x1A;
			case 0x1011B:
				return 0x1C;
			case 0x1011C:
				return 0x1B;
			case 0x1011D:
				return 0x1B;
			case 0x1011E:
				return 0x1A;
			case 0x1011F:
				return 0x1C;
			case 0x10120:
				return 0x1C;
			case 0x10121:
				return 0x1B;
			case 0x10122:
				return 0x1B;
			case 0x10123:
				return 0x1B;
			case 0x10124:
				return 0x1D;
			case 0x10125:
				return 0x1C;
			case 0x10126:
				return 0x1C;
			case 0x10127:
				return 0x1B;
			case 0x10128:
				return 0x1D;
			case 0x10129:
				return 0x1D;
			case 0x1012A:
				return 0x1C;
			case 0x1012B:
				return 0x1B;
			case 0x1012C:
				return 0x1E;
			case 0x1012D:
				return 0x1E;
			case 0x1012E:
				return 0x1D;
			case 0x1012F:
				return 0x1D;
			case 0x10130:
				return 0x1D;
			case 0x10131:
				return 0x1F;
			case 0x10132:
				return 0x1E;
			case 0x10133:
				return 0x1E;
			case 0x10137:
				return 0x18;
			case 0x10138:
				return 0x1C;
			case 0x10139:
				return 0x1D;
			case 0x1013A:
				return 0x1C;
			case 0x1013B:
				return 0x1D;
			case 0x1013C:
				return 0x21;
			case 0x1013D:
				return 0x24;
			case 0x1013E:
				return 0x1E;
			case 0x1013F:
				return 0x1D;
			case 0x10140:
				return 0x23;
			case 0x10141:
				return 0x20;
			case 0x10142:
				return 0x23;
			case 0x10143:
				return 0x1C;
			case 0x10144:
				return 0x1D;
			case 0x10145:
				return 0x24;
			case 0x10146:
				return 0x25;
			case 0x10147:
				return 0x26;
			case 0x10148:
				return 0x24;
			case 0x10149:
				return 0x23;
			case 0x1014A:
				return 0x25;
			case 0x1014B:
				return 0x2B;
			case 0x1014C:
				return 0x2C;
			case 0x1014D:
				return 0x2C;
			case 0x1014E:
				return 0x2D;
			case 0x1014F:
				return 0x24;
			case 0x10150:
				return 0x23;
			case 0x10151:
				return 0x25;
			case 0x10152:
				return 0x2B;
			case 0x10153:
				return 0x2C;
			case 0x10154:
				return 0x2C;
			case 0x10155:
				return 0x2C;
			case 0x10156:
				return 0x2E;
			case 0x10157:
				return 0x20;
			case 0x10158:
				return 0x26;
			case 0x10159:
				return 0x1E;
			case 0x1015A:
				return 0x20;
			case 0x1015B:
				return 0x20;
			case 0x1015C:
				return 0x1E;
			case 0x1015D:
				return 0x27;
			case 0x1015E:
				return 0x29;
			case 0x1015F:
				return 0x21;
			case 0x10160:
				return 0x20;
			case 0x10161:
				return 0x2F;
			case 0x10162:
				return 0x20;
			case 0x10163:
				return 0x1F;
			case 0x10164:
				return 0x1E;
			case 0x10165:
				return 0x21;
			case 0x10166:
				return 0x22;
			case 0x10167:
				return 0x31;
			case 0x10168:
				return 0x22;
			case 0x10169:
				return 0x20;
			case 0x1016A:
				return 0x26;
			case 0x1016B:
				return 0x28;
			case 0x1016C:
				return 0x29;
			case 0x1016D:
				return 0x29;
			case 0x1016E:
				return 0x27;
			case 0x1016F:
				return 0x28;
			case 0x10170:
				return 0x25;
			case 0x10171:
				return 0x27;
			case 0x10172:
				return 0x28;
			case 0x10173:
				return 0x23;
			case 0x10174:
				return 0x25;
			case 0x10175:
				return 0x14;
			case 0x10176:
				return 0x23;
			case 0x10177:
				return 0x16;
			case 0x10178:
				return 0x1A;
			case 0x10179:
				return 0x10;
			case 0x1017A:
				return 0x12;
			case 0x1017B:
				return 0x13;
			case 0x1017C:
				return 0x10;
			case 0x1017D:
				return 0x15;
			case 0x1017E:
				return 0x17;
			case 0x1017F:
				return 0x16;
			case 0x10180:
				return 0x16;
			case 0x10181:
				return 0x14;
			case 0x10182:
				return 0x18;
			case 0x10183:
				return 0x11;
			case 0x10184:
				return 0x12;
			case 0x10185:
				return 0x12;
			case 0x10186:
				return 0x12;
			case 0x10187:
				return 0x12;
			case 0x10188:
				return 0x12;
			case 0x10189:
				return 0x19;
			case 0x1018A:
				return 0x10;
			case 0x1018B:
				return 0x17;
			case 0x1018C:
				return 0x14;
			case 0x1018D:
				return 0x15;
			case 0x1018E:
				return 0xD;
			case 0x10190:
				return 0x13;
			case 0x10191:
				return 0x11;
			case 0x10192:
				return 0x14;
			case 0x10193:
				return 0x13;
			case 0x10194:
				return 0x1B;
			case 0x10195:
				return 0x13;
			case 0x10196:
				return 0x14;
			case 0x10197:
				return 0x15;
			case 0x10198:
				return 0x16;
			case 0x10199:
				return 0x15;
			case 0x1019A:
				return 0xE;
			case 0x1019B:
				return 0x15;
			case 0x1019C:
				return 0xD;
			case 0x101A0:
				return 0x15;
			case 0x101D0:
				return 0x1E;
			case 0x101D1:
				return 0x1F;
			case 0x101D2:
				return 0x21;
			case 0x101D3:
				return 0x1B;
			case 0x101D4:
				return 0x19;
			case 0x101D5:
				return 0x19;
			case 0x101D6:
				return 0x1A;
			case 0x101D7:
				return 0x1C;
			case 0x101D8:
				return 0x19;
			case 0x101D9:
				return 0x19;
			case 0x101DA:
				return 0x17;
			case 0x101DB:
				return 0x1A;
			case 0x101DC:
				return 0x18;
			case 0x101DD:
				return 0x1C;
			case 0x101DE:
				return 0x1B;
			case 0x101DF:
				return 0x17;
			case 0x101E0:
				return 0x17;
			case 0x101E1:
				return 0x1D;
			case 0x101E2:
				return 0x23;
			case 0x101E3:
				return 0x1A;
			case 0x101E4:
				return 0x18;
			case 0x101E5:
				return 0x19;
			case 0x101E6:
				return 0x1A;
			case 0x101E7:
				return 0x1B;
			case 0x101E8:
				return 0x18;
			case 0x101E9:
				return 0x18;
			case 0x101EA:
				return 0x18;
			case 0x101EB:
				return 0x1D;
			case 0x101EC:
				return 0x17;
			case 0x101ED:
				return 0x17;
			case 0x101EE:
				return 0x19;
			case 0x101EF:
				return 0x18;
			case 0x101F0:
				return 0x19;
			case 0x101F1:
				return 0x17;
			case 0x101F2:
				return 0x1E;
			case 0x101F3:
				return 0x18;
			case 0x101F4:
				return 0x1B;
			case 0x101F5:
				return 0x1B;
			case 0x101F6:
				return 0x18;
			case 0x101F7:
				return 0x1B;
			case 0x101F8:
				return 0x19;
			case 0x101F9:
				return 0x1A;
			case 0x101FA:
				return 0x1C;
			case 0x101FB:
				return 0x1D;
			case 0x101FC:
				return 0x1D;
			case 0x101FD:
				return 0x2C;
			case 0x10280:
				return 0x10;
			case 0x10281:
				return 0x10;
			case 0x10282:
				return 0x10;
			case 0x10283:
				return 0x11;
			case 0x10284:
				return 0x10;
			case 0x10285:
				return 0x10;
			case 0x10286:
				return 0x10;
			case 0x10287:
				return 0x10;
			case 0x10288:
				return 0x10;
			case 0x10289:
				return 0x11;
			case 0x1028A:
				return 0x10;
			case 0x1028B:
				return 0x10;
			case 0x1028C:
				return 0x10;
			case 0x1028D:
				return 0x10;
			case 0x1028E:
				return 0x10;
			case 0x1028F:
				return 0x10;
			case 0x10290:
				return 0x11;
			case 0x10291:
				return 0x11;
			case 0x10292:
				return 0x10;
			case 0x10293:
				return 0x10;
			case 0x10294:
				return 0x11;
			case 0x10295:
				return 0x10;
			case 0x10296:
				return 0x10;
			case 0x10297:
				return 0x10;
			case 0x10298:
				return 0x11;
			case 0x10299:
				return 0x11;
			case 0x1029A:
				return 0x11;
			case 0x1029B:
				return 0x10;
			case 0x1029C:
				return 0x10;
			case 0x102A0:
				return 0x10;
			case 0x102A1:
				return 0x11;
			case 0x102A2:
				return 0x10;
			case 0x102A3:
				return 0x10;
			case 0x102A4:
				return 0x12;
			case 0x102A5:
				return 0x10;
			case 0x102A6:
				return 0x11;
			case 0x102A7:
				return 0x11;
			case 0x102A8:
				return 0x10;
			case 0x102A9:
				return 0x10;
			case 0x102AA:
				return 0x10;
			case 0x102AB:
				return 0x10;
			case 0x102AC:
				return 0x11;
			case 0x102AD:
				return 0x10;
			case 0x102AE:
				return 0x11;
			case 0x102AF:
				return 0x12;
			case 0x102B0:
				return 0x10;
			case 0x102B1:
				return 0x13;
			case 0x102B2:
				return 0x10;
			case 0x102B3:
				return 0x11;
			case 0x102B4:
				return 0x10;
			case 0x102B5:
				return 0x10;
			case 0x102B6:
				return 0x12;
			case 0x102B7:
				return 0x10;
			case 0x102B8:
				return 0x11;
			case 0x102B9:
				return 0x10;
			case 0x102BA:
				return 0x10;
			case 0x102BB:
				return 0x13;
			case 0x102BC:
				return 0x10;
			case 0x102BD:
				return 0x11;
			case 0x102BE:
				return 0x11;
			case 0x102BF:
				return 0x11;
			case 0x102C0:
				return 0x10;
			case 0x102C1:
				return 0x11;
			case 0x102C2:
				return 0x11;
			case 0x102C3:
				return 0x12;
			case 0x102C4:
				return 0x11;
			case 0x102C5:
				return 0x11;
			case 0x102C6:
				return 0x13;
			case 0x102C7:
				return 0x11;
			case 0x102C8:
				return 0x13;
			case 0x102C9:
				return 0x11;
			case 0x102CA:
				return 0x11;
			case 0x102CB:
				return 0x12;
			case 0x102CC:
				return 0x12;
			case 0x102CD:
				return 0x12;
			case 0x102CE:
				return 0x12;
			case 0x102CF:
				return 0x11;
			case 0x102D0:
				return 0x13;
			case 0x102E0:
				return 0x1C;
			case 0x102E1:
				return 0x17;
			case 0x102E2:
				return 0x17;
			case 0x102E3:
				return 0x19;
			case 0x102E4:
				return 0x18;
			case 0x102E5:
				return 0x18;
			case 0x102E6:
				return 0x17;
			case 0x102E7:
				return 0x19;
			case 0x102E8:
				return 0x19;
			case 0x102E9:
				return 0x18;
			case 0x102EA:
				return 0x18;
			case 0x102EB:
				return 0x1B;
			case 0x102EC:
				return 0x1B;
			case 0x102ED:
				return 0x1A;
			case 0x102EE:
				return 0x1A;
			case 0x102EF:
				return 0x1A;
			case 0x102F0:
				return 0x1C;
			case 0x102F1:
				return 0x1B;
			case 0x102F2:
				return 0x1B;
			case 0x102F3:
				return 0x20;
			case 0x102F4:
				return 0x20;
			case 0x102F5:
				return 0x22;
			case 0x102F6:
				return 0x21;
			case 0x102F7:
				return 0x21;
			case 0x102F8:
				return 0x20;
			case 0x102F9:
				return 0x22;
			case 0x102FA:
				return 0x22;
			case 0x102FB:
				return 0x21;
			case 0x10300:
				return 0x14;
			case 0x10301:
				return 0x15;
			case 0x10302:
				return 0x15;
			case 0x10303:
				return 0x15;
			case 0x10304:
				return 0x14;
			case 0x10305:
				return 0x15;
			case 0x10306:
				return 0x15;
			case 0x10307:
				return 0x15;
			case 0x10308:
				return 0x16;
			case 0x10309:
				return 0x14;
			case 0x1030A:
				return 0x15;
			case 0x1030B:
				return 0x15;
			case 0x1030C:
				return 0x15;
			case 0x1030D:
				return 0x15;
			case 0x1030E:
				return 0x16;
			case 0x1030F:
				return 0x14;
			case 0x10310:
				return 0x15;
			case 0x10311:
				return 0x16;
			case 0x10312:
				return 0x15;
			case 0x10313:
				return 0x15;
			case 0x10314:
				return 0x15;
			case 0x10315:
				return 0x15;
			case 0x10316:
				return 0x14;
			case 0x10317:
				return 0x16;
			case 0x10318:
				return 0x16;
			case 0x10319:
				return 0x16;
			case 0x1031A:
				return 0x15;
			case 0x1031B:
				return 0x16;
			case 0x1031C:
				return 0x16;
			case 0x1031D:
				return 0x15;
			case 0x1031E:
				return 0x15;
			case 0x1031F:
				return 0x16;
			case 0x10320:
				return 0x17;
			case 0x10321:
				return 0x18;
			case 0x10322:
				return 0x17;
			case 0x10323:
				return 0x19;
			case 0x1032D:
				return 0x15;
			case 0x1032E:
				return 0x1F;
			case 0x1032F:
				return 0x1F;
			case 0x10330:
				return 0x13;
			case 0x10331:
				return 0x16;
			case 0x10332:
				return 0x13;
			case 0x10333:
				return 0x13;
			case 0x10334:
				return 0x15;
			case 0x10335:
				return 0x17;
			case 0x10336:
				return 0x13;
			case 0x10337:
				return 0x13;
			case 0x10338:
				return 0x15;
			case 0x10339:
				return 0x12;
			case 0x1033A:
				return 0x14;
			case 0x1033B:
				return 0x14;
			case 0x1033C:
				return 0x14;
			case 0x1033D:
				return 0x15;
			case 0x1033E:
				return 0x12;
			case 0x1033F:
				return 0x13;
			case 0x10340:
				return 0x17;
			case 0x10341:
				return 0x15;
			case 0x10342:
				return 0x14;
			case 0x10343:
				return 0x14;
			case 0x10344:
				return 0x14;
			case 0x10345:
				return 0x14;
			case 0x10346:
				return 0x14;
			case 0x10347:
				return 0x14;
			case 0x10348:
				return 0x14;
			case 0x10349:
				return 0x14;
			case 0x1034A:
				return 0x1B;
			case 0x10350:
				return 0x15;
			case 0x10351:
				return 0x16;
			case 0x10352:
				return 0x16;
			case 0x10353:
				return 0x16;
			case 0x10354:
				return 0x14;
			case 0x10355:
				return 0x17;
			case 0x10356:
				return 0x18;
			case 0x10357:
				return 0x17;
			case 0x10358:
				return 0x18;
			case 0x10359:
				return 0x14;
			case 0x1035A:
				return 0x17;
			case 0x1035B:
				return 0x16;
			case 0x1035C:
				return 0x18;
			case 0x1035D:
				return 0x18;
			case 0x1035E:
				return 0x17;
			case 0x1035F:
				return 0x17;
			case 0x10360:
				return 0x16;
			case 0x10361:
				return 0x16;
			case 0x10362:
				return 0x16;
			case 0x10363:
				return 0x14;
			case 0x10364:
				return 0x18;
			case 0x10365:
				return 0x18;
			case 0x10366:
				return 0x1A;
			case 0x10367:
				return 0x16;
			case 0x10368:
				return 0x17;
			case 0x10369:
				return 0x14;
			case 0x1036A:
				return 0x15;
			case 0x1036B:
				return 0x15;
			case 0x1036C:
				return 0x15;
			case 0x1036D:
				return 0x17;
			case 0x1036E:
				return 0x16;
			case 0x1036F:
				return 0x16;
			case 0x10370:
				return 0x17;
			case 0x10371:
				return 0x16;
			case 0x10372:
				return 0x15;
			case 0x10373:
				return 0x15;
			case 0x10374:
				return 0x15;
			case 0x10375:
				return 0x15;
			case 0x10376:
				return 0x1F;
			case 0x10377:
				return 0x20;
			case 0x10378:
				return 0x21;
			case 0x10379:
				return 0x22;
			case 0x1037A:
				return 0x20;
			case 0x10380:
				return 0x15;
			case 0x10381:
				return 0x15;
			case 0x10382:
				return 0x16;
			case 0x10383:
				return 0x14;
			case 0x10384:
				return 0x16;
			case 0x10385:
				return 0x13;
			case 0x10386:
				return 0x13;
			case 0x10387:
				return 0x15;
			case 0x10388:
				return 0x15;
			case 0x10389:
				return 0x14;
			case 0x1038A:
				return 0x14;
			case 0x1038B:
				return 0x14;
			case 0x1038C:
				return 0x15;
			case 0x1038D:
				return 0x16;
			case 0x1038E:
				return 0x14;
			case 0x1038F:
				return 0x15;
			case 0x10390:
				return 0x14;
			case 0x10391:
				return 0x13;
			case 0x10392:
				return 0x16;
			case 0x10393:
				return 0x14;
			case 0x10394:
				return 0x13;
			case 0x10395:
				return 0x15;
			case 0x10396:
				return 0x15;
			case 0x10397:
				return 0x16;
			case 0x10398:
				return 0x17;
			case 0x10399:
				return 0x16;
			case 0x1039A:
				return 0x13;
			case 0x1039B:
				return 0x12;
			case 0x1039C:
				return 0x12;
			case 0x1039D:
				return 0x14;
			case 0x1039F:
				return 0x16;
			case 0x103A0:
				return 0x13;
			case 0x103A1:
				return 0x13;
			case 0x103A2:
				return 0x13;
			case 0x103A3:
				return 0x14;
			case 0x103A4:
				return 0x14;
			case 0x103A5:
				return 0x14;
			case 0x103A6:
				return 0x14;
			case 0x103A7:
				return 0x14;
			case 0x103A8:
				return 0x14;
			case 0x103A9:
				return 0x14;
			case 0x103AA:
				return 0x14;
			case 0x103AB:
				return 0x14;
			case 0x103AC:
				return 0x14;
			case 0x103AD:
				return 0x14;
			case 0x103AE:
				return 0x14;
			case 0x103AF:
				return 0x14;
			case 0x103B0:
				return 0x15;
			case 0x103B1:
				return 0x14;
			case 0x103B2:
				return 0x14;
			case 0x103B3:
				return 0x14;
			case 0x103B4:
				return 0x14;
			case 0x103B5:
				return 0x14;
			case 0x103B6:
				return 0x14;
			case 0x103B7:
				return 0x14;
			case 0x103B8:
				return 0x14;
			case 0x103B9:
				return 0x14;
			case 0x103BA:
				return 0x14;
			case 0x103BB:
				return 0x14;
			case 0x103BC:
				return 0x14;
			case 0x103BD:
				return 0x14;
			case 0x103BE:
				return 0x14;
			case 0x103BF:
				return 0x14;
			case 0x103C0:
				return 0x14;
			case 0x103C1:
				return 0x15;
			case 0x103C2:
				return 0x15;
			case 0x103C3:
				return 0x14;
			case 0x103C8:
				return 0x1C;
			case 0x103C9:
				return 0x1E;
			case 0x103CA:
				return 0x1E;
			case 0x103CB:
				return 0x1E;
			case 0x103CC:
				return 0x1B;
			case 0x103CD:
				return 0x1D;
			case 0x103CE:
				return 0x16;
			case 0x103CF:
				return 0x19;
			case 0x103D0:
				return 0x19;
			case 0x103D1:
				return 0x17;
			case 0x103D2:
				return 0x17;
			case 0x103D3:
				return 0x17;
			case 0x103D4:
				return 0x1A;
			case 0x103D5:
				return 0x1B;
			case 0x10400:
				return 0x1E;
			case 0x10401:
				return 0x1E;
			case 0x10402:
				return 0x1E;
			case 0x10403:
				return 0x1F;
			case 0x10404:
				return 0x1E;
			case 0x10405:
				return 0x1F;
			case 0x10406:
				return 0x1F;
			case 0x10407:
				return 0x1F;
			case 0x10408:
				return 0x1F;
			case 0x10409:
				return 0x20;
			case 0x1040A:
				return 0x1F;
			case 0x1040B:
				return 0x20;
			case 0x1040C:
				return 0x1A;
			case 0x1040D:
				return 0x1A;
			case 0x1040E:
				return 0x1A;
			case 0x1040F:
				return 0x1B;
			case 0x10410:
				return 0x19;
			case 0x10411:
				return 0x1B;
			case 0x10412:
				return 0x1B;
			case 0x10413:
				return 0x1B;
			case 0x10414:
				return 0x1B;
			case 0x10415:
				return 0x1C;
			case 0x10416:
				return 0x1B;
			case 0x10417:
				return 0x1B;
			case 0x10418:
				return 0x1B;
			case 0x10419:
				return 0x1A;
			case 0x1041A:
				return 0x1B;
			case 0x1041B:
				return 0x1B;
			case 0x1041C:
				return 0x1C;
			case 0x1041D:
				return 0x1A;
			case 0x1041E:
				return 0x1B;
			case 0x1041F:
				return 0x1B;
			case 0x10420:
				return 0x1C;
			case 0x10421:
				return 0x1A;
			case 0x10422:
				return 0x1A;
			case 0x10423:
				return 0x1A;
			case 0x10424:
				return 0x1A;
			case 0x10425:
				return 0x1B;
			case 0x10426:
				return 0x1A;
			case 0x10427:
				return 0x1A;
			case 0x10428:
				return 0x1C;
			case 0x10429:
				return 0x1C;
			case 0x1042A:
				return 0x1C;
			case 0x1042B:
				return 0x1D;
			case 0x1042C:
				return 0x1C;
			case 0x1042D:
				return 0x1D;
			case 0x1042E:
				return 0x1D;
			case 0x1042F:
				return 0x1D;
			case 0x10430:
				return 0x1D;
			case 0x10431:
				return 0x1E;
			case 0x10432:
				return 0x1D;
			case 0x10433:
				return 0x1E;
			case 0x10434:
				return 0x18;
			case 0x10435:
				return 0x18;
			case 0x10436:
				return 0x18;
			case 0x10437:
				return 0x19;
			case 0x10438:
				return 0x17;
			case 0x10439:
				return 0x19;
			case 0x1043A:
				return 0x19;
			case 0x1043B:
				return 0x19;
			case 0x1043C:
				return 0x19;
			case 0x1043D:
				return 0x1A;
			case 0x1043E:
				return 0x19;
			case 0x1043F:
				return 0x19;
			case 0x10440:
				return 0x19;
			case 0x10441:
				return 0x18;
			case 0x10442:
				return 0x19;
			case 0x10443:
				return 0x19;
			case 0x10444:
				return 0x1A;
			case 0x10445:
				return 0x18;
			case 0x10446:
				return 0x19;
			case 0x10447:
				return 0x19;
			case 0x10448:
				return 0x1A;
			case 0x10449:
				return 0x18;
			case 0x1044A:
				return 0x18;
			case 0x1044B:
				return 0x18;
			case 0x1044C:
				return 0x18;
			case 0x1044D:
				return 0x19;
			case 0x1044E:
				return 0x18;
			case 0x1044F:
				return 0x18;
			case 0x10450:
				return 0x14;
			case 0x10451:
				return 0x13;
			case 0x10452:
				return 0x14;
			case 0x10453:
				return 0x13;
			case 0x10454:
				return 0x15;
			case 0x10455:
				return 0x12;
			case 0x10456:
				return 0x14;
			case 0x10457:
				return 0x16;
			case 0x10458:
				return 0x13;
			case 0x10459:
				return 0x14;
			case 0x1045A:
				return 0x13;
			case 0x1045B:
				return 0x14;
			case 0x1045C:
				return 0x13;
			case 0x1045D:
				return 0x13;
			case 0x1045E:
				return 0x14;
			case 0x1045F:
				return 0x13;
			case 0x10460:
				return 0x17;
			case 0x10461:
				return 0x15;
			case 0x10462:
				return 0x13;
			case 0x10463:
				return 0x15;
			case 0x10464:
				return 0x14;
			case 0x10465:
				return 0x14;
			case 0x10466:
				return 0x12;
			case 0x10467:
				return 0x13;
			case 0x10468:
				return 0x13;
			case 0x10469:
				return 0x13;
			case 0x1046A:
				return 0x12;
			case 0x1046B:
				return 0x14;
			case 0x1046C:
				return 0x13;
			case 0x1046D:
				return 0x12;
			case 0x1046E:
				return 0x14;
			case 0x1046F:
				return 0x13;
			case 0x10470:
				return 0x13;
			case 0x10471:
				return 0x13;
			case 0x10472:
				return 0x13;
			case 0x10473:
				return 0x12;
			case 0x10474:
				return 0x13;
			case 0x10475:
				return 0x14;
			case 0x10476:
				return 0x13;
			case 0x10477:
				return 0x13;
			case 0x10478:
				return 0x13;
			case 0x10479:
				return 0x12;
			case 0x1047A:
				return 0x13;
			case 0x1047B:
				return 0x13;
			case 0x1047C:
				return 0x15;
			case 0x1047D:
				return 0x13;
			case 0x1047E:
				return 0x13;
			case 0x1047F:
				return 0x13;
			case 0x10480:
				return 0x14;
			case 0x10481:
				return 0x12;
			case 0x10482:
				return 0x12;
			case 0x10483:
				return 0x12;
			case 0x10484:
				return 0x12;
			case 0x10485:
				return 0x13;
			case 0x10486:
				return 0x14;
			case 0x10487:
				return 0x12;
			case 0x10488:
				return 0x12;
			case 0x10489:
				return 0x15;
			case 0x1048A:
				return 0x13;
			case 0x1048B:
				return 0x14;
			case 0x1048C:
				return 0x12;
			case 0x1048D:
				return 0x12;
			case 0x1048E:
				return 0x14;
			case 0x1048F:
				return 0x14;
			case 0x10490:
				return 0x14;
			case 0x10491:
				return 0x14;
			case 0x10492:
				return 0x14;
			case 0x10493:
				return 0x13;
			case 0x10494:
				return 0x12;
			case 0x10495:
				return 0x12;
			case 0x10496:
				return 0x11;
			case 0x10497:
				return 0x11;
			case 0x10498:
				return 0x11;
			case 0x10499:
				return 0x11;
			case 0x1049A:
				return 0x11;
			case 0x1049B:
				return 0x12;
			case 0x1049C:
				return 0x12;
			case 0x1049D:
				return 0x12;
			case 0x104A0:
				return 0x13;
			case 0x104A1:
				return 0x12;
			case 0x104A2:
				return 0x12;
			case 0x104A3:
				return 0x14;
			case 0x104A4:
				return 0x13;
			case 0x104A5:
				return 0x13;
			case 0x104A6:
				return 0x12;
			case 0x104A7:
				return 0x14;
			case 0x104A8:
				return 0x14;
			case 0x104A9:
				return 0x13;
			case 0x104B0:
				return 0x17;
			case 0x104B1:
				return 0x18;
			case 0x104B2:
				return 0x19;
			case 0x104B3:
				return 0x18;
			case 0x104B4:
				return 0x19;
			case 0x104B5:
				return 0x19;
			case 0x104B6:
				return 0x1B;
			case 0x104B7:
				return 0x17;
			case 0x104B8:
				return 0x19;
			case 0x104B9:
				return 0x18;
			case 0x104BA:
				return 0x19;
			case 0x104BB:
				return 0x17;
			case 0x104BC:
				return 0x18;
			case 0x104BD:
				return 0x1A;
			case 0x104BE:
				return 0x19;
			case 0x104BF:
				return 0x18;
			case 0x104C0:
				return 0x18;
			case 0x104C1:
				return 0x18;
			case 0x104C2:
				return 0x17;
			case 0x104C3:
				return 0x19;
			case 0x104C4:
				return 0x18;
			case 0x104C5:
				return 0x1A;
			case 0x104C6:
				return 0x18;
			case 0x104C7:
				return 0x19;
			case 0x104C8:
				return 0x18;
			case 0x104C9:
				return 0x1A;
			case 0x104CA:
				return 0x19;
			case 0x104CB:
				return 0x1B;
			case 0x104CC:
				return 0x1A;
			case 0x104CD:
				return 0x19;
			case 0x104CE:
				return 0x17;
			case 0x104CF:
				return 0x18;
			case 0x104D0:
				return 0x19;
			case 0x104D1:
				return 0x19;
			case 0x104D2:
				return 0x18;
			case 0x104D3:
				return 0x19;
			case 0x104D8:
				return 0x15;
			case 0x104D9:
				return 0x16;
			case 0x104DA:
				return 0x17;
			case 0x104DB:
				return 0x16;
			case 0x104DC:
				return 0x17;
			case 0x104DD:
				return 0x17;
			case 0x104DE:
				return 0x19;
			case 0x104DF:
				return 0x15;
			case 0x104E0:
				return 0x17;
			case 0x104E1:
				return 0x16;
			case 0x104E2:
				return 0x17;
			case 0x104E3:
				return 0x15;
			case 0x104E4:
				return 0x16;
			case 0x104E5:
				return 0x18;
			case 0x104E6:
				return 0x17;
			case 0x104E7:
				return 0x16;
			case 0x104E8:
				return 0x16;
			case 0x104E9:
				return 0x16;
			case 0x104EA:
				return 0x15;
			case 0x104EB:
				return 0x17;
			case 0x104EC:
				return 0x16;
			case 0x104ED:
				return 0x18;
			case 0x104EE:
				return 0x16;
			case 0x104EF:
				return 0x17;
			case 0x104F0:
				return 0x16;
			case 0x104F1:
				return 0x18;
			case 0x104F2:
				return 0x17;
			case 0x104F3:
				return 0x19;
			case 0x104F4:
				return 0x18;
			case 0x104F5:
				return 0x17;
			case 0x104F6:
				return 0x15;
			case 0x104F7:
				return 0x16;
			case 0x104F8:
				return 0x17;
			case 0x104F9:
				return 0x17;
			case 0x104FA:
				return 0x16;
			case 0x104FB:
				return 0x17;
			case 0x10500:
				return 0x11;
			case 0x10501:
				return 0x12;
			case 0x10502:
				return 0x12;
			case 0x10503:
				return 0x13;
			case 0x10504:
				return 0x12;
			case 0x10505:
				return 0x13;
			case 0x10506:
				return 0x13;
			case 0x10507:
				return 0x12;
			case 0x10508:
				return 0x11;
			case 0x10509:
				return 0x12;
			case 0x1050A:
				return 0x12;
			case 0x1050B:
				return 0x13;
			case 0x1050C:
				return 0x12;
			case 0x1050D:
				return 0x11;
			case 0x1050E:
				return 0x12;
			case 0x1050F:
				return 0x12;
			case 0x10510:
				return 0x12;
			case 0x10511:
				return 0x13;
			case 0x10512:
				return 0x12;
			case 0x10513:
				return 0x12;
			case 0x10514:
				return 0x12;
			case 0x10515:
				return 0x13;
			case 0x10516:
				return 0x11;
			case 0x10517:
				return 0x12;
			case 0x10518:
				return 0x12;
			case 0x10519:
				return 0x12;
			case 0x1051A:
				return 0x13;
			case 0x1051B:
				return 0x12;
			case 0x1051C:
				return 0x13;
			case 0x1051D:
				return 0x12;
			case 0x1051E:
				return 0x13;
			case 0x1051F:
				return 0x11;
			case 0x10520:
				return 0x12;
			case 0x10521:
				return 0x12;
			case 0x10522:
				return 0x11;
			case 0x10523:
				return 0x12;
			case 0x10524:
				return 0x13;
			case 0x10525:
				return 0x13;
			case 0x10526:
				return 0x16;
			case 0x10527:
				return 0x13;
			case 0x10530:
				return 0x1E;
			case 0x10531:
				return 0x1E;
			case 0x10532:
				return 0x1E;
			case 0x10533:
				return 0x1E;
			case 0x10534:
				return 0x1D;
			case 0x10535:
				return 0x1F;
			case 0x10536:
				return 0x1E;
			case 0x10537:
				return 0x1F;
			case 0x10538:
				return 0x1E;
			case 0x10539:
				return 0x1E;
			case 0x1053A:
				return 0x1F;
			case 0x1053B:
				return 0x1E;
			case 0x1053C:
				return 0x1E;
			case 0x1053D:
				return 0x1E;
			case 0x1053E:
				return 0x1E;
			case 0x1053F:
				return 0x1F;
			case 0x10540:
				return 0x1F;
			case 0x10541:
				return 0x1F;
			case 0x10542:
				return 0x1E;
			case 0x10543:
				return 0x1F;
			case 0x10544:
				return 0x1E;
			case 0x10545:
				return 0x1F;
			case 0x10546:
				return 0x1F;
			case 0x10547:
				return 0x1E;
			case 0x10548:
				return 0x1E;
			case 0x10549:
				return 0x1F;
			case 0x1054A:
				return 0x1E;
			case 0x1054B:
				return 0x1F;
			case 0x1054C:
				return 0x1E;
			case 0x1054D:
				return 0x1E;
			case 0x1054E:
				return 0x1F;
			case 0x1054F:
				return 0x20;
			case 0x10550:
				return 0x1F;
			case 0x10551:
				return 0x1F;
			case 0x10552:
				return 0x1D;
			case 0x10553:
				return 0x1F;
			case 0x10554:
				return 0x1E;
			case 0x10555:
				return 0x1F;
			case 0x10556:
				return 0x1F;
			case 0x10557:
				return 0x1E;
			case 0x10558:
				return 0x20;
			case 0x10559:
				return 0x1E;
			case 0x1055A:
				return 0x1F;
			case 0x1055B:
				return 0x1F;
			case 0x1055C:
				return 0x1F;
			case 0x1055D:
				return 0x1F;
			case 0x1055E:
				return 0x1E;
			case 0x1055F:
				return 0x1F;
			case 0x10560:
				return 0x1F;
			case 0x10561:
				return 0x1F;
			case 0x10562:
				return 0x1F;
			case 0x10563:
				return 0x1E;
			case 0x1056F:
				return 0x21;
			case 0x10600:
				return 0x14;
			case 0x10601:
				return 0x14;
			case 0x10602:
				return 0x14;
			case 0x10603:
				return 0x14;
			case 0x10604:
				return 0x14;
			case 0x10605:
				return 0x14;
			case 0x10606:
				return 0x14;
			case 0x10607:
				return 0x14;
			case 0x10608:
				return 0x14;
			case 0x10609:
				return 0x14;
			case 0x1060A:
				return 0x14;
			case 0x1060B:
				return 0x14;
			case 0x1060C:
				return 0x14;
			case 0x1060D:
				return 0x14;
			case 0x1060E:
				return 0x14;
			case 0x1060F:
				return 0x14;
			case 0x10610:
				return 0x15;
			case 0x10611:
				return 0x15;
			case 0x10612:
				return 0x14;
			case 0x10613:
				return 0x15;
			case 0x10614:
				return 0x15;
			case 0x10615:
				return 0x14;
			case 0x10616:
				return 0x15;
			case 0x10617:
				return 0x14;
			case 0x10618:
				return 0x14;
			case 0x10619:
				return 0x14;
			case 0x1061A:
				return 0x14;
			case 0x1061B:
				return 0x14;
			case 0x1061C:
				return 0x14;
			case 0x1061D:
				return 0x14;
			case 0x1061E:
				return 0x14;
			case 0x1061F:
				return 0x14;
			case 0x10620:
				return 0x14;
			case 0x10621:
				return 0x14;
			case 0x10622:
				return 0x14;
			case 0x10623:
				return 0x14;
			case 0x10624:
				return 0x14;
			case 0x10625:
				return 0x14;
			case 0x10626:
				return 0x14;
			case 0x10627:
				return 0x14;
			case 0x10628:
				return 0x14;
			case 0x10629:
				return 0x14;
			case 0x1062A:
				return 0x14;
			case 0x1062B:
				return 0x14;
			case 0x1062C:
				return 0x14;
			case 0x1062D:
				return 0x14;
			case 0x1062E:
				return 0x14;
			case 0x1062F:
				return 0x14;
			case 0x10630:
				return 0x14;
			case 0x10631:
				return 0x14;
			case 0x10632:
				return 0x14;
			case 0x10633:
				return 0x14;
			case 0x10634:
				return 0x14;
			case 0x10635:
				return 0x14;
			case 0x10636:
				return 0x14;
			case 0x10637:
				return 0x14;
			case 0x10638:
				return 0x14;
			case 0x10639:
				return 0x14;
			case 0x1063A:
				return 0x14;
			case 0x1063B:
				return 0x14;
			case 0x1063C:
				return 0x14;
			case 0x1063D:
				return 0x14;
			case 0x1063E:
				return 0x14;
			case 0x1063F:
				return 0x14;
			case 0x10640:
				return 0x14;
			case 0x10641:
				return 0x14;
			case 0x10642:
				return 0x14;
			case 0x10643:
				return 0x14;
			case 0x10644:
				return 0x14;
			case 0x10645:
				return 0x14;
			case 0x10646:
				return 0x14;
			case 0x10647:
				return 0x17;
			case 0x10648:
				return 0x14;
			case 0x10649:
				return 0x14;
			case 0x1064A:
				return 0x14;
			case 0x1064B:
				return 0x14;
			case 0x1064C:
				return 0x14;
			case 0x1064D:
				return 0x15;
			case 0x1064E:
				return 0x15;
			case 0x1064F:
				return 0x14;
			case 0x10650:
				return 0x14;
			case 0x10651:
				return 0x14;
			case 0x10652:
				return 0x14;
			case 0x10653:
				return 0x14;
			case 0x10654:
				return 0x14;
			case 0x10655:
				return 0x13;
			case 0x10656:
				return 0x13;
			case 0x10657:
				return 0x13;
			case 0x10658:
				return 0x13;
			case 0x10659:
				return 0x13;
			case 0x1065A:
				return 0x13;
			case 0x1065B:
				return 0x13;
			case 0x1065C:
				return 0x13;
			case 0x1065D:
				return 0x14;
			case 0x1065E:
				return 0x14;
			case 0x1065F:
				return 0x14;
			case 0x10660:
				return 0x13;
			case 0x10661:
				return 0x13;
			case 0x10662:
				return 0x13;
			case 0x10663:
				return 0x14;
			case 0x10664:
				return 0x14;
			case 0x10665:
				return 0x14;
			case 0x10666:
				return 0x13;
			case 0x10667:
				return 0x13;
			case 0x10668:
				return 0x13;
			case 0x10669:
				return 0x13;
			case 0x1066A:
				return 0x13;
			case 0x1066B:
				return 0x13;
			case 0x1066C:
				return 0x13;
			case 0x1066D:
				return 0x13;
			case 0x1066E:
				return 0x13;
			case 0x1066F:
				return 0x13;
			case 0x10670:
				return 0x13;
			case 0x10671:
				return 0x13;
			case 0x10672:
				return 0x13;
			case 0x10673:
				return 0x13;
			case 0x10674:
				return 0x13;
			case 0x10675:
				return 0x13;
			case 0x10676:
				return 0x13;
			case 0x10677:
				return 0x13;
			case 0x10678:
				return 0x13;
			case 0x10679:
				return 0x13;
			case 0x1067A:
				return 0x13;
			case 0x1067B:
				return 0x13;
			case 0x1067C:
				return 0x13;
			case 0x1067D:
				return 0x13;
			case 0x1067E:
				return 0x13;
			case 0x1067F:
				return 0x13;
			case 0x10680:
				return 0x13;
			case 0x10681:
				return 0x13;
			case 0x10682:
				return 0x13;
			case 0x10683:
				return 0x13;
			case 0x10684:
				return 0x13;
			case 0x10685:
				return 0x13;
			case 0x10686:
				return 0x13;
			case 0x10687:
				return 0x13;
			case 0x10688:
				return 0x13;
			case 0x10689:
				return 0x13;
			case 0x1068A:
				return 0x13;
			case 0x1068B:
				return 0x13;
			case 0x1068C:
				return 0x13;
			case 0x1068D:
				return 0x13;
			case 0x1068E:
				return 0x13;
			case 0x1068F:
				return 0x13;
			case 0x10690:
				return 0x13;
			case 0x10691:
				return 0x13;
			case 0x10692:
				return 0x13;
			case 0x10693:
				return 0x13;
			case 0x10694:
				return 0x13;
			case 0x10695:
				return 0x13;
			case 0x10696:
				return 0x13;
			case 0x10697:
				return 0x13;
			case 0x10698:
				return 0x13;
			case 0x10699:
				return 0x13;
			case 0x1069A:
				return 0x13;
			case 0x1069B:
				return 0x13;
			case 0x1069C:
				return 0x13;
			case 0x1069D:
				return 0x13;
			case 0x1069E:
				return 0x13;
			case 0x1069F:
				return 0x13;
			case 0x106A0:
				return 0x17;
			case 0x106A1:
				return 0x17;
			case 0x106A2:
				return 0x17;
			case 0x106A3:
				return 0x17;
			case 0x106A4:
				return 0x17;
			case 0x106A5:
				return 0x17;
			case 0x106A6:
				return 0x17;
			case 0x106A7:
				return 0x17;
			case 0x106A8:
				return 0x17;
			case 0x106A9:
				return 0x17;
			case 0x106AA:
				return 0x17;
			case 0x106AB:
				return 0x17;
			case 0x106AC:
				return 0x17;
			case 0x106AD:
				return 0x17;
			case 0x106AE:
				return 0x17;
			case 0x106AF:
				return 0x17;
			case 0x106B0:
				return 0x17;
			case 0x106B1:
				return 0x17;
			case 0x106B2:
				return 0x17;
			case 0x106B3:
				return 0x13;
			case 0x106B4:
				return 0x13;
			case 0x106B5:
				return 0x13;
			case 0x106B6:
				return 0x13;
			case 0x106B7:
				return 0x13;
			case 0x106B8:
				return 0x13;
			case 0x106B9:
				return 0x13;
			case 0x106BA:
				return 0x13;
			case 0x106BB:
				return 0x13;
			case 0x106BC:
				return 0x13;
			case 0x106BD:
				return 0x13;
			case 0x106BE:
				return 0x13;
			case 0x106BF:
				return 0x13;
			case 0x106C0:
				return 0x13;
			case 0x106C1:
				return 0x13;
			case 0x106C2:
				return 0x13;
			case 0x106C3:
				return 0x13;
			case 0x106C4:
				return 0x13;
			case 0x106C5:
				return 0x13;
			case 0x106C6:
				return 0x13;
			case 0x106C7:
				return 0x13;
			case 0x106C8:
				return 0x13;
			case 0x106C9:
				return 0x13;
			case 0x106CA:
				return 0x13;
			case 0x106CB:
				return 0x13;
			case 0x106CC:
				return 0x13;
			case 0x106CD:
				return 0x13;
			case 0x106CE:
				return 0x13;
			case 0x106CF:
				return 0x13;
			case 0x106D0:
				return 0x13;
			case 0x106D1:
				return 0x13;
			case 0x106D2:
				return 0x13;
			case 0x106D3:
				return 0x13;
			case 0x106D4:
				return 0x13;
			case 0x106D5:
				return 0x13;
			case 0x106D6:
				return 0x13;
			case 0x106D7:
				return 0x13;
			case 0x106D8:
				return 0x13;
			case 0x106D9:
				return 0x13;
			case 0x106DA:
				return 0x13;
			case 0x106DB:
				return 0x13;
			case 0x106DC:
				return 0x13;
			case 0x106DD:
				return 0x13;
			case 0x106DE:
				return 0x13;
			case 0x106DF:
				return 0x13;
			case 0x106E0:
				return 0x13;
			case 0x106E1:
				return 0x13;
			case 0x106E2:
				return 0x13;
			case 0x106E3:
				return 0x13;
			case 0x106E4:
				return 0x13;
			case 0x106E5:
				return 0x13;
			case 0x106E6:
				return 0x13;
			case 0x106E7:
				return 0x13;
			case 0x106E8:
				return 0x13;
			case 0x106E9:
				return 0x13;
			case 0x106EA:
				return 0x13;
			case 0x106EB:
				return 0x13;
			case 0x106EC:
				return 0x13;
			case 0x106ED:
				return 0x13;
			case 0x106EE:
				return 0x13;
			case 0x106EF:
				return 0x13;
			case 0x106F0:
				return 0x13;
			case 0x106F1:
				return 0x13;
			case 0x106F2:
				return 0x13;
			case 0x106F3:
				return 0x13;
			case 0x106F4:
				return 0x13;
			case 0x106F5:
				return 0x13;
			case 0x106F6:
				return 0x13;
			case 0x106F7:
				return 0x13;
			case 0x106F8:
				return 0x13;
			case 0x106F9:
				return 0x13;
			case 0x106FA:
				return 0x13;
			case 0x106FB:
				return 0x13;
			case 0x106FC:
				return 0x13;
			case 0x106FD:
				return 0x13;
			case 0x106FE:
				return 0x13;
			case 0x106FF:
				return 0x13;
			case 0x10700:
				return 0x13;
			case 0x10701:
				return 0x13;
			case 0x10702:
				return 0x13;
			case 0x10703:
				return 0x13;
			case 0x10704:
				return 0x13;
			case 0x10705:
				return 0x13;
			case 0x10706:
				return 0x13;
			case 0x10707:
				return 0x13;
			case 0x10708:
				return 0x13;
			case 0x10709:
				return 0x13;
			case 0x1070A:
				return 0x13;
			case 0x1070B:
				return 0x13;
			case 0x1070C:
				return 0x13;
			case 0x1070D:
				return 0x13;
			case 0x1070E:
				return 0x13;
			case 0x1070F:
				return 0x13;
			case 0x10710:
				return 0x13;
			case 0x10711:
				return 0x13;
			case 0x10712:
				return 0x13;
			case 0x10713:
				return 0x13;
			case 0x10714:
				return 0x13;
			case 0x10715:
				return 0x13;
			case 0x10716:
				return 0x13;
			case 0x10717:
				return 0x13;
			case 0x10718:
				return 0x13;
			case 0x10719:
				return 0x13;
			case 0x1071A:
				return 0x13;
			case 0x1071B:
				return 0x13;
			case 0x1071C:
				return 0x13;
			case 0x1071D:
				return 0x13;
			case 0x1071E:
				return 0x13;
			case 0x1071F:
				return 0x13;
			case 0x10720:
				return 0x13;
			case 0x10721:
				return 0x13;
			case 0x10722:
				return 0x13;
			case 0x10723:
				return 0x13;
			case 0x10724:
				return 0x13;
			case 0x10725:
				return 0x13;
			case 0x10726:
				return 0x13;
			case 0x10727:
				return 0x13;
			case 0x10728:
				return 0x13;
			case 0x10729:
				return 0x13;
			case 0x1072A:
				return 0x13;
			case 0x1072B:
				return 0x13;
			case 0x1072C:
				return 0x13;
			case 0x1072D:
				return 0x13;
			case 0x1072E:
				return 0x13;
			case 0x1072F:
				return 0x13;
			case 0x10730:
				return 0x13;
			case 0x10731:
				return 0x13;
			case 0x10732:
				return 0x13;
			case 0x10733:
				return 0x13;
			case 0x10734:
				return 0x13;
			case 0x10735:
				return 0x13;
			case 0x10736:
				return 0x13;
			case 0x10740:
				return 0x15;
			case 0x10741:
				return 0x15;
			case 0x10742:
				return 0x15;
			case 0x10743:
				return 0x15;
			case 0x10744:
				return 0x15;
			case 0x10745:
				return 0x15;
			case 0x10746:
				return 0x15;
			case 0x10747:
				return 0x15;
			case 0x10748:
				return 0x15;
			case 0x10749:
				return 0x18;
			case 0x1074A:
				return 0x18;
			case 0x1074B:
				return 0x18;
			case 0x1074C:
				return 0x18;
			case 0x1074D:
				return 0x15;
			case 0x1074E:
				return 0x15;
			case 0x1074F:
				return 0x15;
			case 0x10750:
				return 0x19;
			case 0x10751:
				return 0x17;
			case 0x10752:
				return 0x16;
			case 0x10753:
				return 0x16;
			case 0x10754:
				return 0x18;
			case 0x10755:
				return 0x16;
			case 0x10760:
				return 0x13;
			case 0x10761:
				return 0x13;
			case 0x10762:
				return 0x13;
			case 0x10763:
				return 0x13;
			case 0x10764:
				return 0x13;
			case 0x10765:
				return 0x13;
			case 0x10766:
				return 0x13;
			case 0x10767:
				return 0x13;
			case 0x10800:
				return 0x13;
			case 0x10801:
				return 0x13;
			case 0x10802:
				return 0x13;
			case 0x10803:
				return 0x13;
			case 0x10804:
				return 0x13;
			case 0x10805:
				return 0x14;
			case 0x10808:
				return 0x14;
			case 0x1080A:
				return 0x14;
			case 0x1080B:
				return 0x14;
			case 0x1080C:
				return 0x14;
			case 0x1080D:
				return 0x14;
			case 0x1080E:
				return 0x14;
			case 0x1080F:
				return 0x14;
			case 0x10810:
				return 0x14;
			case 0x10811:
				return 0x14;
			case 0x10812:
				return 0x14;
			case 0x10813:
				return 0x14;
			case 0x10814:
				return 0x14;
			case 0x10815:
				return 0x14;
			case 0x10816:
				return 0x14;
			case 0x10817:
				return 0x14;
			case 0x10818:
				return 0x14;
			case 0x10819:
				return 0x14;
			case 0x1081A:
				return 0x14;
			case 0x1081B:
				return 0x14;
			case 0x1081C:
				return 0x14;
			case 0x1081D:
				return 0x14;
			case 0x1081E:
				return 0x14;
			case 0x1081F:
				return 0x14;
			case 0x10820:
				return 0x14;
			case 0x10821:
				return 0x14;
			case 0x10822:
				return 0x14;
			case 0x10823:
				return 0x14;
			case 0x10824:
				return 0x14;
			case 0x10825:
				return 0x14;
			case 0x10826:
				return 0x14;
			case 0x10827:
				return 0x14;
			case 0x10828:
				return 0x14;
			case 0x10829:
				return 0x14;
			case 0x1082A:
				return 0x14;
			case 0x1082B:
				return 0x14;
			case 0x1082C:
				return 0x14;
			case 0x1082D:
				return 0x14;
			case 0x1082E:
				return 0x14;
			case 0x1082F:
				return 0x14;
			case 0x10830:
				return 0x14;
			case 0x10831:
				return 0x14;
			case 0x10832:
				return 0x14;
			case 0x10833:
				return 0x14;
			case 0x10834:
				return 0x14;
			case 0x10835:
				return 0x14;
			case 0x10837:
				return 0x14;
			case 0x10838:
				return 0x14;
			case 0x1083C:
				return 0x14;
			case 0x1083F:
				return 0x14;
			case 0x10840:
				return 0x1E;
			case 0x10841:
				return 0x1D;
			case 0x10842:
				return 0x1E;
			case 0x10843:
				return 0x1F;
			case 0x10844:
				return 0x1B;
			case 0x10845:
				return 0x1C;
			case 0x10846:
				return 0x1E;
			case 0x10847:
				return 0x1D;
			case 0x10848:
				return 0x1D;
			case 0x10849:
				return 0x1D;
			case 0x1084A:
				return 0x1D;
			case 0x1084B:
				return 0x1F;
			case 0x1084C:
				return 0x1C;
			case 0x1084D:
				return 0x1C;
			case 0x1084E:
				return 0x1F;
			case 0x1084F:
				return 0x1D;
			case 0x10850:
				return 0x1B;
			case 0x10851:
				return 0x1E;
			case 0x10852:
				return 0x1D;
			case 0x10853:
				return 0x1D;
			case 0x10854:
				return 0x1D;
			case 0x10855:
				return 0x1C;
			case 0x10857:
				return 0x1E;
			case 0x10858:
				return 0x1C;
			case 0x10859:
				return 0x1C;
			case 0x1085A:
				return 0x1E;
			case 0x1085B:
				return 0x1C;
			case 0x1085C:
				return 0x1F;
			case 0x1085D:
				return 0x24;
			case 0x1085E:
				return 0x25;
			case 0x1085F:
				return 0x25;
			case 0x10860:
				return 0x17;
			case 0x10861:
				return 0x16;
			case 0x10862:
				return 0x17;
			case 0x10863:
				return 0x18;
			case 0x10864:
				return 0x14;
			case 0x10865:
				return 0x15;
			case 0x10866:
				return 0x17;
			case 0x10867:
				return 0x16;
			case 0x10868:
				return 0x16;
			case 0x10869:
				return 0x16;
			case 0x1086A:
				return 0x16;
			case 0x1086B:
				return 0x18;
			case 0x1086C:
				return 0x15;
			case 0x1086D:
				return 0x1B;
			case 0x1086E:
				return 0x15;
			case 0x1086F:
				return 0x18;
			case 0x10870:
				return 0x16;
			case 0x10871:
				return 0x14;
			case 0x10872:
				return 0x17;
			case 0x10873:
				return 0x16;
			case 0x10874:
				return 0x16;
			case 0x10875:
				return 0x16;
			case 0x10876:
				return 0x15;
			case 0x10877:
				return 0x20;
			case 0x10878:
				return 0x21;
			case 0x10879:
				return 0x15;
			case 0x1087A:
				return 0x15;
			case 0x1087B:
				return 0x17;
			case 0x1087C:
				return 0x16;
			case 0x1087D:
				return 0x16;
			case 0x1087E:
				return 0x15;
			case 0x1087F:
				return 0x18;
			case 0x10880:
				return 0x1D;
			case 0x10881:
				return 0x17;
			case 0x10882:
				return 0x1C;
			case 0x10883:
				return 0x16;
			case 0x10884:
				return 0x17;
			case 0x10885:
				return 0x18;
			case 0x10886:
				return 0x1A;
			case 0x10887:
				return 0x14;
			case 0x10888:
				return 0x15;
			case 0x10889:
				return 0x17;
			case 0x1088A:
				return 0x16;
			case 0x1088B:
				return 0x16;
			case 0x1088C:
				return 0x1C;
			case 0x1088D:
				return 0x16;
			case 0x1088E:
				return 0x1C;
			case 0x1088F:
				return 0x16;
			case 0x10890:
				return 0x1E;
			case 0x10891:
				return 0x18;
			case 0x10892:
				return 0x1B;
			case 0x10893:
				return 0x15;
			case 0x10894:
				return 0x1B;
			case 0x10895:
				return 0x15;
			case 0x10896:
				return 0x18;
			case 0x10897:
				return 0x16;
			case 0x10898:
				return 0x14;
			case 0x10899:
				return 0x17;
			case 0x1089A:
				return 0x16;
			case 0x1089B:
				return 0x16;
			case 0x1089C:
				return 0x1C;
			case 0x1089D:
				return 0x16;
			case 0x1089E:
				return 0x15;
			case 0x108A7:
				return 0x15;
			case 0x108A8:
				return 0x15;
			case 0x108A9:
				return 0x17;
			case 0x108AA:
				return 0x16;
			case 0x108AB:
				return 0x20;
			case 0x108AC:
				return 0x16;
			case 0x108AD:
				return 0x15;
			case 0x108AE:
				return 0x18;
			case 0x108AF:
				return 0x1D;
			case 0x108E0:
				return 0x14;
			case 0x108E1:
				return 0x13;
			case 0x108E2:
				return 0x14;
			case 0x108E3:
				return 0x1A;
			case 0x108E4:
				return 0x11;
			case 0x108E5:
				return 0x12;
			case 0x108E6:
				return 0x13;
			case 0x108E7:
				return 0x13;
			case 0x108E8:
				return 0x13;
			case 0x108E9:
				return 0x13;
			case 0x108EA:
				return 0x13;
			case 0x108EB:
				return 0x15;
			case 0x108EC:
				return 0x12;
			case 0x108ED:
				return 0x12;
			case 0x108EE:
				return 0x15;
			case 0x108EF:
				return 0x12;
			case 0x108F0:
				return 0x11;
			case 0x108F1:
				return 0x14;
			case 0x108F2:
				return 0x13;
			case 0x108F4:
				return 0x13;
			case 0x108F5:
				return 0x12;
			case 0x108FB:
				return 0x12;
			case 0x108FC:
				return 0x13;
			case 0x108FD:
				return 0x12;
			case 0x108FE:
				return 0x15;
			case 0x108FF:
				return 0x1A;
			case 0x10900:
				return 0x16;
			case 0x10901:
				return 0x16;
			case 0x10902:
				return 0x17;
			case 0x10903:
				return 0x17;
			case 0x10904:
				return 0x15;
			case 0x10905:
				return 0x16;
			case 0x10906:
				return 0x16;
			case 0x10907:
				return 0x16;
			case 0x10908:
				return 0x16;
			case 0x10909:
				return 0x16;
			case 0x1090A:
				return 0x16;
			case 0x1090B:
				return 0x17;
			case 0x1090C:
				return 0x16;
			case 0x1090D:
				return 0x16;
			case 0x1090E:
				return 0x17;
			case 0x1090F:
				return 0x16;
			case 0x10910:
				return 0x15;
			case 0x10911:
				return 0x17;
			case 0x10912:
				return 0x16;
			case 0x10913:
				return 0x17;
			case 0x10914:
				return 0x17;
			case 0x10915:
				return 0x16;
			case 0x10916:
				return 0x16;
			case 0x10917:
				return 0x16;
			case 0x10918:
				return 0x19;
			case 0x10919:
				return 0x1E;
			case 0x1091A:
				return 0x16;
			case 0x1091B:
				return 0x18;
			case 0x1091F:
				return 0x1A;
			case 0x10920:
				return 0x10;
			case 0x10921:
				return 0x10;
			case 0x10922:
				return 0x10;
			case 0x10923:
				return 0x10;
			case 0x10924:
				return 0x10;
			case 0x10925:
				return 0x10;
			case 0x10926:
				return 0x10;
			case 0x10927:
				return 0x10;
			case 0x10928:
				return 0x10;
			case 0x10929:
				return 0x10;
			case 0x1092A:
				return 0x10;
			case 0x1092B:
				return 0x10;
			case 0x1092C:
				return 0x10;
			case 0x1092D:
				return 0x10;
			case 0x1092E:
				return 0x11;
			case 0x1092F:
				return 0x10;
			case 0x10930:
				return 0x10;
			case 0x10931:
				return 0x10;
			case 0x10932:
				return 0x10;
			case 0x10933:
				return 0x10;
			case 0x10934:
				return 0x11;
			case 0x10935:
				return 0x11;
			case 0x10936:
				return 0x11;
			case 0x10937:
				return 0x11;
			case 0x10938:
				return 0x11;
			case 0x10939:
				return 0x10;
			case 0x1093F:
				return 0x17;
			case 0x10980:
				return 0x1F;
			case 0x10981:
				return 0x1F;
			case 0x10982:
				return 0x1F;
			case 0x10983:
				return 0x1F;
			case 0x10984:
				return 0x20;
			case 0x10985:
				return 0x20;
			case 0x10986:
				return 0x20;
			case 0x10987:
				return 0x22;
			case 0x10988:
				return 0x20;
			case 0x10989:
				return 0x20;
			case 0x1098A:
				return 0x20;
			case 0x1098B:
				return 0x22;
			case 0x1098C:
				return 0x20;
			case 0x1098D:
				return 0x22;
			case 0x1098E:
				return 0x20;
			case 0x1098F:
				return 0x22;
			case 0x10990:
				return 0x20;
			case 0x10991:
				return 0x21;
			case 0x10992:
				return 0x21;
			case 0x10993:
				return 0x20;
			case 0x10994:
				return 0x22;
			case 0x10995:
				return 0x20;
			case 0x10996:
				return 0x20;
			case 0x10997:
				return 0x20;
			case 0x10998:
				return 0x20;
			case 0x10999:
				return 0x22;
			case 0x1099A:
				return 0x20;
			case 0x1099B:
				return 0x22;
			case 0x1099C:
				return 0x20;
			case 0x1099D:
				return 0x20;
			case 0x1099E:
				return 0x22;
			case 0x1099F:
				return 0x24;
			case 0x109A0:
				return 0x1A;
			case 0x109A1:
				return 0x1A;
			case 0x109A2:
				return 0x1A;
			case 0x109A3:
				return 0x1A;
			case 0x109A4:
				return 0x1B;
			case 0x109A5:
				return 0x1B;
			case 0x109A6:
				return 0x1B;
			case 0x109A7:
				return 0x1B;
			case 0x109A8:
				return 0x1B;
			case 0x109A9:
				return 0x1B;
			case 0x109AA:
				return 0x1B;
			case 0x109AB:
				return 0x1B;
			case 0x109AC:
				return 0x1B;
			case 0x109AD:
				return 0x1C;
			case 0x109AE:
				return 0x1C;
			case 0x109AF:
				return 0x1B;
			case 0x109B0:
				return 0x23;
			case 0x109B1:
				return 0x1B;
			case 0x109B2:
				return 0x1B;
			case 0x109B3:
				return 0x1B;
			case 0x109B4:
				return 0x1B;
			case 0x109B5:
				return 0x1B;
			case 0x109B6:
				return 0x1B;
			case 0x109B7:
				return 0x1B;
			case 0x109BC:
				return 0x2A;
			case 0x109BD:
				return 0x23;
			case 0x109BE:
				return 0x1E;
			case 0x109BF:
				return 0x1E;
			case 0x109C0:
				return 0x1C;
			case 0x109C1:
				return 0x1C;
			case 0x109C2:
				return 0x1E;
			case 0x109C3:
				return 0x1D;
			case 0x109C4:
				return 0x1D;
			case 0x109C5:
				return 0x1C;
			case 0x109C6:
				return 0x1E;
			case 0x109C7:
				return 0x1E;
			case 0x109C8:
				return 0x1D;
			case 0x109C9:
				return 0x1C;
			case 0x109CA:
				return 0x1F;
			case 0x109CB:
				return 0x1F;
			case 0x109CC:
				return 0x1E;
			case 0x109CD:
				return 0x1E;
			case 0x109CE:
				return 0x1E;
			case 0x109CF:
				return 0x20;
			case 0x109D2:
				return 0x24;
			case 0x109D3:
				return 0x24;
			case 0x109D4:
				return 0x26;
			case 0x109D5:
				return 0x25;
			case 0x109D6:
				return 0x25;
			case 0x109D7:
				return 0x24;
			case 0x109D8:
				return 0x26;
			case 0x109D9:
				return 0x26;
			case 0x109DA:
				return 0x25;
			case 0x109DB:
				return 0x25;
			case 0x109DC:
				return 0x25;
			case 0x109DD:
				return 0x27;
			case 0x109DE:
				return 0x26;
			case 0x109DF:
				return 0x26;
			case 0x109E0:
				return 0x25;
			case 0x109E1:
				return 0x27;
			case 0x109E2:
				return 0x27;
			case 0x109E3:
				return 0x26;
			case 0x109E4:
				return 0x25;
			case 0x109E5:
				return 0x28;
			case 0x109E6:
				return 0x28;
			case 0x109E7:
				return 0x27;
			case 0x109E8:
				return 0x27;
			case 0x109E9:
				return 0x27;
			case 0x109EA:
				return 0x29;
			case 0x109EB:
				return 0x28;
			case 0x109EC:
				return 0x28;
			case 0x109ED:
				return 0x2D;
			case 0x109EE:
				return 0x2D;
			case 0x109EF:
				return 0x2F;
			case 0x109F0:
				return 0x2E;
			case 0x109F1:
				return 0x2E;
			case 0x109F2:
				return 0x2D;
			case 0x109F3:
				return 0x2F;
			case 0x109F4:
				return 0x2F;
			case 0x109F5:
				return 0x2E;
			case 0x109F6:
				return 0x26;
			case 0x109F7:
				return 0x27;
			case 0x109F8:
				return 0x29;
			case 0x109F9:
				return 0x28;
			case 0x109FA:
				return 0x28;
			case 0x109FB:
				return 0x27;
			case 0x109FC:
				return 0x29;
			case 0x109FD:
				return 0x29;
			case 0x109FE:
				return 0x28;
			case 0x109FF:
				return 0x27;
			case 0x10A00:
				return 0x14;
			case 0x10A01:
				return 0x18;
			case 0x10A02:
				return 0x18;
			case 0x10A03:
				return 0x20;
			case 0x10A05:
				return 0x18;
			case 0x10A06:
				return 0x18;
			case 0x10A0C:
				return 0x1D;
			case 0x10A0D:
				return 0x22;
			case 0x10A0E:
				return 0x19;
			case 0x10A0F:
				return 0x18;
			case 0x10A10:
				return 0x15;
			case 0x10A11:
				return 0x16;
			case 0x10A12:
				return 0x15;
			case 0x10A13:
				return 0x16;
			case 0x10A15:
				return 0x15;
			case 0x10A16:
				return 0x16;
			case 0x10A17:
				return 0x15;
			case 0x10A19:
				return 0x16;
			case 0x10A1A:
				return 0x16;
			case 0x10A1B:
				return 0x17;
			case 0x10A1C:
				return 0x16;
			case 0x10A1D:
				return 0x17;
			case 0x10A1E:
				return 0x16;
			case 0x10A1F:
				return 0x15;
			case 0x10A20:
				return 0x16;
			case 0x10A21:
				return 0x15;
			case 0x10A22:
				return 0x16;
			case 0x10A23:
				return 0x15;
			case 0x10A24:
				return 0x15;
			case 0x10A25:
				return 0x16;
			case 0x10A26:
				return 0x15;
			case 0x10A27:
				return 0x16;
			case 0x10A28:
				return 0x15;
			case 0x10A29:
				return 0x15;
			case 0x10A2A:
				return 0x15;
			case 0x10A2B:
				return 0x15;
			case 0x10A2C:
				return 0x15;
			case 0x10A2D:
				return 0x16;
			case 0x10A2E:
				return 0x16;
			case 0x10A2F:
				return 0x15;
			case 0x10A30:
				return 0x15;
			case 0x10A31:
				return 0x15;
			case 0x10A32:
				return 0x16;
			case 0x10A33:
				return 0x18;
			case 0x10A34:
				return 0x17;
			case 0x10A35:
				return 0x16;
			case 0x10A38:
				return 0x1A;
			case 0x10A39:
				return 0x16;
			case 0x10A3A:
				return 0x1A;
			case 0x10A3F:
				return 0x12;
			case 0x10A40:
				return 0x15;
			case 0x10A41:
				return 0x15;
			case 0x10A42:
				return 0x17;
			case 0x10A43:
				return 0x16;
			case 0x10A44:
				return 0x16;
			case 0x10A45:
				return 0x19;
			case 0x10A46:
				return 0x1E;
			case 0x10A47:
				return 0x1F;
			case 0x10A48:
				return 0x1D;
			case 0x10A50:
				return 0x1B;
			case 0x10A51:
				return 0x24;
			case 0x10A52:
				return 0x1E;
			case 0x10A53:
				return 0x24;
			case 0x10A54:
				return 0x20;
			case 0x10A55:
				return 0x1D;
			case 0x10A56:
				return 0x1D;
			case 0x10A57:
				return 0x24;
			case 0x10A58:
				return 0x1D;
			case 0x10A60:
				return 0x1C;
			case 0x10A61:
				return 0x20;
			case 0x10A62:
				return 0x1E;
			case 0x10A63:
				return 0x1D;
			case 0x10A64:
				return 0x1E;
			case 0x10A65:
				return 0x1D;
			case 0x10A66:
				return 0x1E;
			case 0x10A67:
				return 0x1E;
			case 0x10A68:
				return 0x1E;
			case 0x10A69:
				return 0x1D;
			case 0x10A6A:
				return 0x1D;
			case 0x10A6B:
				return 0x1E;
			case 0x10A6C:
				return 0x1D;
			case 0x10A6D:
				return 0x1F;
			case 0x10A6E:
				return 0x1F;
			case 0x10A6F:
				return 0x20;
			case 0x10A70:
				return 0x1C;
			case 0x10A71:
				return 0x1E;
			case 0x10A72:
				return 0x1D;
			case 0x10A73:
				return 0x20;
			case 0x10A74:
				return 0x1F;
			case 0x10A75:
				return 0x20;
			case 0x10A76:
				return 0x1F;
			case 0x10A77:
				return 0x1E;
			case 0x10A78:
				return 0x1E;
			case 0x10A79:
				return 0x21;
			case 0x10A7A:
				return 0x1E;
			case 0x10A7B:
				return 0x1E;
			case 0x10A7C:
				return 0x1F;
			case 0x10A7D:
				return 0x1D;
			case 0x10A7E:
				return 0x1F;
			case 0x10A7F:
				return 0x24;
			case 0x10A80:
				return 0x1D;
			case 0x10A81:
				return 0x1D;
			case 0x10A82:
				return 0x1D;
			case 0x10A83:
				return 0x1E;
			case 0x10A84:
				return 0x1D;
			case 0x10A85:
				return 0x1D;
			case 0x10A86:
				return 0x1E;
			case 0x10A87:
				return 0x1D;
			case 0x10A88:
				return 0x1D;
			case 0x10A89:
				return 0x1D;
			case 0x10A8A:
				return 0x1E;
			case 0x10A8B:
				return 0x1D;
			case 0x10A8C:
				return 0x1E;
			case 0x10A8D:
				return 0x1E;
			case 0x10A8E:
				return 0x1D;
			case 0x10A8F:
				return 0x1E;
			case 0x10A90:
				return 0x1D;
			case 0x10A91:
				return 0x1E;
			case 0x10A92:
				return 0x1D;
			case 0x10A93:
				return 0x1D;
			case 0x10A94:
				return 0x1E;
			case 0x10A95:
				return 0x1D;
			case 0x10A96:
				return 0x1F;
			case 0x10A97:
				return 0x1D;
			case 0x10A98:
				return 0x1E;
			case 0x10A99:
				return 0x1E;
			case 0x10A9A:
				return 0x1D;
			case 0x10A9B:
				return 0x1E;
			case 0x10A9C:
				return 0x1D;
			case 0x10A9D:
				return 0x1D;
			case 0x10A9E:
				return 0x1D;
			case 0x10A9F:
				return 0x20;
			case 0x10AC0:
				return 0x18;
			case 0x10AC1:
				return 0x17;
			case 0x10AC2:
				return 0x18;
			case 0x10AC3:
				return 0x18;
			case 0x10AC4:
				return 0x19;
			case 0x10AC5:
				return 0x19;
			case 0x10AC6:
				return 0x15;
			case 0x10AC7:
				return 0x16;
			case 0x10AC8:
				return 0x13;
			case 0x10AC9:
				return 0x18;
			case 0x10ACA:
				return 0x19;
			case 0x10ACB:
				return 0x18;
			case 0x10ACC:
				return 0x19;
			case 0x10ACD:
				return 0x17;
			case 0x10ACE:
				return 0x17;
			case 0x10ACF:
				return 0x17;
			case 0x10AD0:
				return 0x17;
			case 0x10AD1:
				return 0x17;
			case 0x10AD2:
				return 0x18;
			case 0x10AD3:
				return 0x19;
			case 0x10AD4:
				return 0x1A;
			case 0x10AD5:
				return 0x1A;
			case 0x10AD6:
				return 0x16;
			case 0x10AD7:
				return 0x16;
			case 0x10AD8:
				return 0x19;
			case 0x10AD9:
				return 0x17;
			case 0x10ADA:
				return 0x18;
			case 0x10ADB:
				return 0x15;
			case 0x10ADC:
				return 0x15;
			case 0x10ADD:
				return 0x18;
			case 0x10ADE:
				return 0x17;
			case 0x10ADF:
				return 0x17;
			case 0x10AE0:
				return 0x18;
			case 0x10AE1:
				return 0x17;
			case 0x10AE2:
				return 0x17;
			case 0x10AE3:
				return 0x18;
			case 0x10AE4:
				return 0x16;
			case 0x10AE5:
				return 0x23;
			case 0x10AE6:
				return 0x23;
			case 0x10AEB:
				return 0x16;
			case 0x10AEC:
				return 0x17;
			case 0x10AED:
				return 0x16;
			case 0x10AEE:
				return 0x19;
			case 0x10AEF:
				return 0x1E;
			case 0x10AF0:
				return 0x1C;
			case 0x10AF1:
				return 0x1F;
			case 0x10AF2:
				return 0x2D;
			case 0x10AF3:
				return 0x26;
			case 0x10AF4:
				return 0x1B;
			case 0x10AF5:
				return 0x20;
			case 0x10AF6:
				return 0x23;
			case 0x10B00:
				return 0x11;
			case 0x10B01:
				return 0x12;
			case 0x10B02:
				return 0x12;
			case 0x10B03:
				return 0x13;
			case 0x10B04:
				return 0x12;
			case 0x10B05:
				return 0x13;
			case 0x10B06:
				return 0x12;
			case 0x10B07:
				return 0x13;
			case 0x10B08:
				return 0x11;
			case 0x10B09:
				return 0x12;
			case 0x10B0A:
				return 0x11;
			case 0x10B0B:
				return 0x12;
			case 0x10B0C:
				return 0x11;
			case 0x10B0D:
				return 0x12;
			case 0x10B0E:
				return 0x11;
			case 0x10B0F:
				return 0x12;
			case 0x10B10:
				return 0x12;
			case 0x10B11:
				return 0x12;
			case 0x10B12:
				return 0x13;
			case 0x10B13:
				return 0x13;
			case 0x10B14:
				return 0x12;
			case 0x10B15:
				return 0x13;
			case 0x10B16:
				return 0x13;
			case 0x10B17:
				return 0x12;
			case 0x10B18:
				return 0x12;
			case 0x10B19:
				return 0x12;
			case 0x10B1A:
				return 0x13;
			case 0x10B1B:
				return 0x12;
			case 0x10B1C:
				return 0x13;
			case 0x10B1D:
				return 0x13;
			case 0x10B1E:
				return 0x12;
			case 0x10B1F:
				return 0x12;
			case 0x10B20:
				return 0x12;
			case 0x10B21:
				return 0x13;
			case 0x10B22:
				return 0x13;
			case 0x10B23:
				return 0x14;
			case 0x10B24:
				return 0x14;
			case 0x10B25:
				return 0x12;
			case 0x10B26:
				return 0x13;
			case 0x10B27:
				return 0x13;
			case 0x10B28:
				return 0x12;
			case 0x10B29:
				return 0x13;
			case 0x10B2A:
				return 0x13;
			case 0x10B2B:
				return 0x12;
			case 0x10B2C:
				return 0x12;
			case 0x10B2D:
				return 0x12;
			case 0x10B2E:
				return 0x12;
			case 0x10B2F:
				return 0x12;
			case 0x10B30:
				return 0x12;
			case 0x10B31:
				return 0x13;
			case 0x10B32:
				return 0x13;
			case 0x10B33:
				return 0x14;
			case 0x10B34:
				return 0x14;
			case 0x10B35:
				return 0x12;
			case 0x10B39:
				return 0x1A;
			case 0x10B3A:
				return 0x27;
			case 0x10B3B:
				return 0x28;
			case 0x10B3C:
				return 0x28;
			case 0x10B3D:
				return 0x28;
			case 0x10B3E:
				return 0x2A;
			case 0x10B3F:
				return 0x2A;
			case 0x10B40:
				return 0x24;
			case 0x10B41:
				return 0x23;
			case 0x10B42:
				return 0x24;
			case 0x10B43:
				return 0x25;
			case 0x10B44:
				return 0x21;
			case 0x10B45:
				return 0x22;
			case 0x10B46:
				return 0x24;
			case 0x10B47:
				return 0x23;
			case 0x10B48:
				return 0x23;
			case 0x10B49:
				return 0x23;
			case 0x10B4A:
				return 0x23;
			case 0x10B4B:
				return 0x25;
			case 0x10B4C:
				return 0x22;
			case 0x10B4D:
				return 0x22;
			case 0x10B4E:
				return 0x25;
			case 0x10B4F:
				return 0x23;
			case 0x10B50:
				return 0x21;
			case 0x10B51:
				return 0x24;
			case 0x10B52:
				return 0x23;
			case 0x10B53:
				return 0x23;
			case 0x10B54:
				return 0x23;
			case 0x10B55:
				return 0x22;
			case 0x10B58:
				return 0x22;
			case 0x10B59:
				return 0x22;
			case 0x10B5A:
				return 0x24;
			case 0x10B5B:
				return 0x23;
			case 0x10B5C:
				return 0x22;
			case 0x10B5D:
				return 0x25;
			case 0x10B5E:
				return 0x2A;
			case 0x10B5F:
				return 0x2B;
			case 0x10B60:
				return 0x23;
			case 0x10B61:
				return 0x22;
			case 0x10B62:
				return 0x23;
			case 0x10B63:
				return 0x24;
			case 0x10B64:
				return 0x20;
			case 0x10B65:
				return 0x2B;
			case 0x10B66:
				return 0x23;
			case 0x10B67:
				return 0x22;
			case 0x10B68:
				return 0x22;
			case 0x10B69:
				return 0x22;
			case 0x10B6A:
				return 0x22;
			case 0x10B6B:
				return 0x24;
			case 0x10B6C:
				return 0x26;
			case 0x10B6D:
				return 0x21;
			case 0x10B6E:
				return 0x24;
			case 0x10B6F:
				return 0x20;
			case 0x10B70:
				return 0x23;
			case 0x10B71:
				return 0x22;
			case 0x10B72:
				return 0x21;
			case 0x10B78:
				return 0x21;
			case 0x10B79:
				return 0x21;
			case 0x10B7A:
				return 0x23;
			case 0x10B7B:
				return 0x22;
			case 0x10B7C:
				return 0x21;
			case 0x10B7D:
				return 0x24;
			case 0x10B7E:
				return 0x29;
			case 0x10B7F:
				return 0x2A;
			case 0x10B80:
				return 0x1D;
			case 0x10B81:
				return 0x1C;
			case 0x10B82:
				return 0x1D;
			case 0x10B83:
				return 0x1E;
			case 0x10B84:
				return 0x1A;
			case 0x10B85:
				return 0x25;
			case 0x10B86:
				return 0x1D;
			case 0x10B87:
				return 0x1C;
			case 0x10B88:
				return 0x1C;
			case 0x10B89:
				return 0x1C;
			case 0x10B8A:
				return 0x1E;
			case 0x10B8B:
				return 0x20;
			case 0x10B8C:
				return 0x1B;
			case 0x10B8D:
				return 0x1E;
			case 0x10B8E:
				return 0x1A;
			case 0x10B8F:
				return 0x1D;
			case 0x10B90:
				return 0x1C;
			case 0x10B91:
				return 0x1B;
			case 0x10B99:
				return 0x1D;
			case 0x10B9A:
				return 0x24;
			case 0x10B9B:
				return 0x25;
			case 0x10B9C:
				return 0x23;
			case 0x10BA9:
				return 0x1B;
			case 0x10BAA:
				return 0x1B;
			case 0x10BAB:
				return 0x1D;
			case 0x10BAC:
				return 0x1C;
			case 0x10BAD:
				return 0x1B;
			case 0x10BAE:
				return 0x1E;
			case 0x10BAF:
				return 0x23;
			case 0x10C00:
				return 0x1B;
			case 0x10C01:
				return 0x1C;
			case 0x10C02:
				return 0x1D;
			case 0x10C03:
				return 0x1B;
			case 0x10C04:
				return 0x1C;
			case 0x10C05:
				return 0x1C;
			case 0x10C06:
				return 0x1B;
			case 0x10C07:
				return 0x1C;
			case 0x10C08:
				return 0x1D;
			case 0x10C09:
				return 0x1C;
			case 0x10C0A:
				return 0x1D;
			case 0x10C0B:
				return 0x1D;
			case 0x10C0C:
				return 0x1E;
			case 0x10C0D:
				return 0x1C;
			case 0x10C0E:
				return 0x1D;
			case 0x10C0F:
				return 0x1D;
			case 0x10C10:
				return 0x1E;
			case 0x10C11:
				return 0x1C;
			case 0x10C12:
				return 0x1D;
			case 0x10C13:
				return 0x1D;
			case 0x10C14:
				return 0x1C;
			case 0x10C15:
				return 0x1D;
			case 0x10C16:
				return 0x1C;
			case 0x10C17:
				return 0x1D;
			case 0x10C18:
				return 0x1D;
			case 0x10C19:
				return 0x1E;
			case 0x10C1A:
				return 0x1D;
			case 0x10C1B:
				return 0x1E;
			case 0x10C1C:
				return 0x1D;
			case 0x10C1D:
				return 0x1E;
			case 0x10C1E:
				return 0x1C;
			case 0x10C1F:
				return 0x1D;
			case 0x10C20:
				return 0x1D;
			case 0x10C21:
				return 0x1D;
			case 0x10C22:
				return 0x1C;
			case 0x10C23:
				return 0x1C;
			case 0x10C24:
				return 0x1D;
			case 0x10C25:
				return 0x1E;
			case 0x10C26:
				return 0x1D;
			case 0x10C27:
				return 0x1E;
			case 0x10C28:
				return 0x1D;
			case 0x10C29:
				return 0x1E;
			case 0x10C2A:
				return 0x1D;
			case 0x10C2B:
				return 0x1E;
			case 0x10C2C:
				return 0x1E;
			case 0x10C2D:
				return 0x1D;
			case 0x10C2E:
				return 0x1F;
			case 0x10C2F:
				return 0x1C;
			case 0x10C30:
				return 0x1C;
			case 0x10C31:
				return 0x1C;
			case 0x10C32:
				return 0x1C;
			case 0x10C33:
				return 0x1D;
			case 0x10C34:
				return 0x1C;
			case 0x10C35:
				return 0x1D;
			case 0x10C36:
				return 0x1C;
			case 0x10C37:
				return 0x1D;
			case 0x10C38:
				return 0x1C;
			case 0x10C39:
				return 0x1D;
			case 0x10C3A:
				return 0x1C;
			case 0x10C3B:
				return 0x1D;
			case 0x10C3C:
				return 0x1D;
			case 0x10C3D:
				return 0x1C;
			case 0x10C3E:
				return 0x1D;
			case 0x10C3F:
				return 0x1D;
			case 0x10C40:
				return 0x1E;
			case 0x10C41:
				return 0x1D;
			case 0x10C42:
				return 0x1E;
			case 0x10C43:
				return 0x1C;
			case 0x10C44:
				return 0x1D;
			case 0x10C45:
				return 0x1D;
			case 0x10C46:
				return 0x1E;
			case 0x10C47:
				return 0x1C;
			case 0x10C48:
				return 0x1E;
			case 0x10C80:
				return 0x1F;
			case 0x10C81:
				return 0x20;
			case 0x10C82:
				return 0x20;
			case 0x10C83:
				return 0x21;
			case 0x10C84:
				return 0x20;
			case 0x10C85:
				return 0x21;
			case 0x10C86:
				return 0x21;
			case 0x10C87:
				return 0x20;
			case 0x10C88:
				return 0x21;
			case 0x10C89:
				return 0x1F;
			case 0x10C8A:
				return 0x25;
			case 0x10C8B:
				return 0x20;
			case 0x10C8C:
				return 0x20;
			case 0x10C8D:
				return 0x20;
			case 0x10C8E:
				return 0x21;
			case 0x10C8F:
				return 0x20;
			case 0x10C90:
				return 0x1F;
			case 0x10C91:
				return 0x20;
			case 0x10C92:
				return 0x20;
			case 0x10C93:
				return 0x20;
			case 0x10C94:
				return 0x20;
			case 0x10C95:
				return 0x21;
			case 0x10C96:
				return 0x20;
			case 0x10C97:
				return 0x21;
			case 0x10C98:
				return 0x20;
			case 0x10C99:
				return 0x20;
			case 0x10C9A:
				return 0x21;
			case 0x10C9B:
				return 0x1F;
			case 0x10C9C:
				return 0x20;
			case 0x10C9D:
				return 0x2B;
			case 0x10C9E:
				return 0x2A;
			case 0x10C9F:
				return 0x21;
			case 0x10CA0:
				return 0x20;
			case 0x10CA1:
				return 0x21;
			case 0x10CA2:
				return 0x20;
			case 0x10CA3:
				return 0x26;
			case 0x10CA4:
				return 0x20;
			case 0x10CA5:
				return 0x21;
			case 0x10CA6:
				return 0x20;
			case 0x10CA7:
				return 0x21;
			case 0x10CA8:
				return 0x21;
			case 0x10CA9:
				return 0x21;
			case 0x10CAA:
				return 0x1F;
			case 0x10CAB:
				return 0x20;
			case 0x10CAC:
				return 0x2B;
			case 0x10CAD:
				return 0x2A;
			case 0x10CAE:
				return 0x20;
			case 0x10CAF:
				return 0x20;
			case 0x10CB0:
				return 0x21;
			case 0x10CB1:
				return 0x2D;
			case 0x10CB2:
				return 0x20;
			case 0x10CC0:
				return 0x1D;
			case 0x10CC1:
				return 0x1E;
			case 0x10CC2:
				return 0x1E;
			case 0x10CC3:
				return 0x1F;
			case 0x10CC4:
				return 0x1E;
			case 0x10CC5:
				return 0x1F;
			case 0x10CC6:
				return 0x1F;
			case 0x10CC7:
				return 0x1E;
			case 0x10CC8:
				return 0x1F;
			case 0x10CC9:
				return 0x1D;
			case 0x10CCA:
				return 0x23;
			case 0x10CCB:
				return 0x1E;
			case 0x10CCC:
				return 0x1E;
			case 0x10CCD:
				return 0x1E;
			case 0x10CCE:
				return 0x1F;
			case 0x10CCF:
				return 0x1E;
			case 0x10CD0:
				return 0x1D;
			case 0x10CD1:
				return 0x1E;
			case 0x10CD2:
				return 0x1E;
			case 0x10CD3:
				return 0x1E;
			case 0x10CD4:
				return 0x1E;
			case 0x10CD5:
				return 0x1F;
			case 0x10CD6:
				return 0x1E;
			case 0x10CD7:
				return 0x1F;
			case 0x10CD8:
				return 0x1E;
			case 0x10CD9:
				return 0x1E;
			case 0x10CDA:
				return 0x1F;
			case 0x10CDB:
				return 0x1D;
			case 0x10CDC:
				return 0x1E;
			case 0x10CDD:
				return 0x29;
			case 0x10CDE:
				return 0x28;
			case 0x10CDF:
				return 0x1F;
			case 0x10CE0:
				return 0x1E;
			case 0x10CE1:
				return 0x1F;
			case 0x10CE2:
				return 0x1E;
			case 0x10CE3:
				return 0x24;
			case 0x10CE4:
				return 0x1E;
			case 0x10CE5:
				return 0x1F;
			case 0x10CE6:
				return 0x1E;
			case 0x10CE7:
				return 0x1F;
			case 0x10CE8:
				return 0x1F;
			case 0x10CE9:
				return 0x1F;
			case 0x10CEA:
				return 0x1D;
			case 0x10CEB:
				return 0x1E;
			case 0x10CEC:
				return 0x29;
			case 0x10CED:
				return 0x28;
			case 0x10CEE:
				return 0x1E;
			case 0x10CEF:
				return 0x1E;
			case 0x10CF0:
				return 0x1F;
			case 0x10CF1:
				return 0x2B;
			case 0x10CF2:
				return 0x1E;
			case 0x10CFA:
				return 0x19;
			case 0x10CFB:
				return 0x1A;
			case 0x10CFC:
				return 0x19;
			case 0x10CFD:
				return 0x1B;
			case 0x10CFE:
				return 0x21;
			case 0x10CFF:
				return 0x22;
			case 0x10D00:
				return 0x19;
			case 0x10D01:
				return 0x1A;
			case 0x10D02:
				return 0x1A;
			case 0x10D03:
				return 0x1A;
			case 0x10D04:
				return 0x1B;
			case 0x10D05:
				return 0x1A;
			case 0x10D06:
				return 0x1A;
			case 0x10D07:
				return 0x1A;
			case 0x10D08:
				return 0x1B;
			case 0x10D09:
				return 0x1A;
			case 0x10D0A:
				return 0x1A;
			case 0x10D0B:
				return 0x1B;
			case 0x10D0C:
				return 0x1A;
			case 0x10D0D:
				return 0x1B;
			case 0x10D0E:
				return 0x1A;
			case 0x10D0F:
				return 0x1A;
			case 0x10D10:
				return 0x1B;
			case 0x10D11:
				return 0x1A;
			case 0x10D12:
				return 0x1A;
			case 0x10D13:
				return 0x1A;
			case 0x10D14:
				return 0x1A;
			case 0x10D15:
				return 0x1A;
			case 0x10D16:
				return 0x1A;
			case 0x10D17:
				return 0x20;
			case 0x10D18:
				return 0x1A;
			case 0x10D19:
				return 0x20;
			case 0x10D1A:
				return 0x1B;
			case 0x10D1B:
				return 0x1B;
			case 0x10D1C:
				return 0x1A;
			case 0x10D1D:
				return 0x18;
			case 0x10D1E:
				return 0x18;
			case 0x10D1F:
				return 0x18;
			case 0x10D20:
				return 0x18;
			case 0x10D21:
				return 0x18;
			case 0x10D22:
				return 0x1B;
			case 0x10D23:
				return 0x1F;
			case 0x10D24:
				return 0x1E;
			case 0x10D25:
				return 0x1C;
			case 0x10D26:
				return 0x1A;
			case 0x10D27:
				return 0x1B;
			case 0x10D30:
				return 0x1B;
			case 0x10D31:
				return 0x1A;
			case 0x10D32:
				return 0x1A;
			case 0x10D33:
				return 0x1C;
			case 0x10D34:
				return 0x1B;
			case 0x10D35:
				return 0x1B;
			case 0x10D36:
				return 0x1A;
			case 0x10D37:
				return 0x1C;
			case 0x10D38:
				return 0x1C;
			case 0x10D39:
				return 0x1B;
			case 0x10E60:
				return 0xF;
			case 0x10E61:
				return 0xF;
			case 0x10E62:
				return 0x11;
			case 0x10E63:
				return 0x10;
			case 0x10E64:
				return 0x10;
			case 0x10E65:
				return 0xF;
			case 0x10E66:
				return 0x11;
			case 0x10E67:
				return 0x11;
			case 0x10E68:
				return 0x10;
			case 0x10E69:
				return 0x10;
			case 0x10E6A:
				return 0x13;
			case 0x10E6B:
				return 0x13;
			case 0x10E6C:
				return 0x12;
			case 0x10E6D:
				return 0x12;
			case 0x10E6E:
				return 0x12;
			case 0x10E6F:
				return 0x14;
			case 0x10E70:
				return 0x13;
			case 0x10E71:
				return 0x13;
			case 0x10E72:
				return 0x18;
			case 0x10E73:
				return 0x18;
			case 0x10E74:
				return 0x1A;
			case 0x10E75:
				return 0x19;
			case 0x10E76:
				return 0x19;
			case 0x10E77:
				return 0x18;
			case 0x10E78:
				return 0x1A;
			case 0x10E79:
				return 0x1A;
			case 0x10E7A:
				return 0x19;
			case 0x10E7B:
				return 0x17;
			case 0x10E7C:
				return 0x1A;
			case 0x10E7D:
				return 0x18;
			case 0x10E7E:
				return 0x19;
			case 0x10E80:
				return 0x13;
			case 0x10E81:
				return 0x11;
			case 0x10E82:
				return 0x11;
			case 0x10E83:
				return 0x12;
			case 0x10E84:
				return 0x12;
			case 0x10E85:
				return 0x11;
			case 0x10E86:
				return 0x12;
			case 0x10E87:
				return 0x13;
			case 0x10E88:
				return 0x14;
			case 0x10E89:
				return 0x12;
			case 0x10E8A:
				return 0x11;
			case 0x10E8B:
				return 0x12;
			case 0x10E8C:
				return 0x12;
			case 0x10E8D:
				return 0x11;
			case 0x10E8E:
				return 0x12;
			case 0x10E8F:
				return 0x11;
			case 0x10E90:
				return 0x11;
			case 0x10E91:
				return 0x12;
			case 0x10E92:
				return 0x13;
			case 0x10E93:
				return 0x12;
			case 0x10E94:
				return 0x12;
			case 0x10E95:
				return 0x11;
			case 0x10E96:
				return 0x11;
			case 0x10E97:
				return 0x12;
			case 0x10E98:
				return 0x14;
			case 0x10E99:
				return 0x11;
			case 0x10E9A:
				return 0x11;
			case 0x10E9B:
				return 0x20;
			case 0x10E9C:
				return 0x12;
			case 0x10E9D:
				return 0x12;
			case 0x10E9E:
				return 0x13;
			case 0x10E9F:
				return 0x12;
			case 0x10EA0:
				return 0x12;
			case 0x10EA1:
				return 0x12;
			case 0x10EA2:
				return 0x12;
			case 0x10EA3:
				return 0x11;
			case 0x10EA4:
				return 0x12;
			case 0x10EA5:
				return 0x11;
			case 0x10EA6:
				return 0x11;
			case 0x10EA7:
				return 0x12;
			case 0x10EA8:
				return 0x12;
			case 0x10EA9:
				return 0x11;
			case 0x10EAB:
				return 0x1C;
			case 0x10EAC:
				return 0x1C;
			case 0x10EAD:
				return 0x18;
			case 0x10EB0:
				return 0x21;
			case 0x10EB1:
				return 0x28;
			case 0x10F00:
				return 0x19;
			case 0x10F01:
				return 0x1F;
			case 0x10F02:
				return 0x18;
			case 0x10F03:
				return 0x1E;
			case 0x10F04:
				return 0x19;
			case 0x10F05:
				return 0x16;
			case 0x10F06:
				return 0x1C;
			case 0x10F07:
				return 0x17;
			case 0x10F08:
				return 0x19;
			case 0x10F09:
				return 0x18;
			case 0x10F0A:
				return 0x18;
			case 0x10F0B:
				return 0x18;
			case 0x10F0C:
				return 0x1A;
			case 0x10F0D:
				return 0x17;
			case 0x10F0E:
				return 0x17;
			case 0x10F0F:
				return 0x1D;
			case 0x10F10:
				return 0x30;
			case 0x10F11:
				return 0x1A;
			case 0x10F12:
				return 0x18;
			case 0x10F13:
				return 0x22;
			case 0x10F14:
				return 0x16;
			case 0x10F15:
				return 0x19;
			case 0x10F16:
				return 0x1F;
			case 0x10F17:
				return 0x32;
			case 0x10F18:
				return 0x24;
			case 0x10F19:
				return 0x18;
			case 0x10F1A:
				return 0x17;
			case 0x10F1B:
				return 0x1D;
			case 0x10F1C:
				return 0x30;
			case 0x10F1D:
				return 0x17;
			case 0x10F1E:
				return 0x17;
			case 0x10F1F:
				return 0x19;
			case 0x10F20:
				return 0x18;
			case 0x10F21:
				return 0x18;
			case 0x10F22:
				return 0x17;
			case 0x10F23:
				return 0x1A;
			case 0x10F24:
				return 0x1A;
			case 0x10F25:
				return 0x1F;
			case 0x10F26:
				return 0x1E;
			case 0x10F27:
				return 0x21;
			case 0x10F30:
				return 0x15;
			case 0x10F31:
				return 0x14;
			case 0x10F32:
				return 0x15;
			case 0x10F33:
				return 0x12;
			case 0x10F34:
				return 0x13;
			case 0x10F35:
				return 0x15;
			case 0x10F36:
				return 0x14;
			case 0x10F37:
				return 0x14;
			case 0x10F38:
				return 0x14;
			case 0x10F39:
				return 0x16;
			case 0x10F3A:
				return 0x13;
			case 0x10F3B:
				return 0x13;
			case 0x10F3C:
				return 0x16;
			case 0x10F3D:
				return 0x14;
			case 0x10F3E:
				return 0x12;
			case 0x10F3F:
				return 0x15;
			case 0x10F40:
				return 0x19;
			case 0x10F41:
				return 0x14;
			case 0x10F42:
				return 0x13;
			case 0x10F43:
				return 0x14;
			case 0x10F44:
				return 0x14;
			case 0x10F45:
				return 0x19;
			case 0x10F46:
				return 0x1C;
			case 0x10F47:
				return 0x21;
			case 0x10F48:
				return 0x1C;
			case 0x10F49:
				return 0x21;
			case 0x10F4A:
				return 0x1E;
			case 0x10F4B:
				return 0x1E;
			case 0x10F4C:
				return 0x1D;
			case 0x10F4D:
				return 0x1D;
			case 0x10F4E:
				return 0x22;
			case 0x10F4F:
				return 0x1D;
			case 0x10F50:
				return 0x1F;
			case 0x10F51:
				return 0x13;
			case 0x10F52:
				return 0x13;
			case 0x10F53:
				return 0x16;
			case 0x10F54:
				return 0x1B;
			case 0x10F55:
				return 0x26;
			case 0x10F56:
				return 0x30;
			case 0x10F57:
				return 0x24;
			case 0x10F58:
				return 0x2A;
			case 0x10F59:
				return 0x29;
			case 0x10FB0:
				return 0x18;
			case 0x10FB1:
				return 0x1E;
			case 0x10FB2:
				return 0x17;
			case 0x10FB3:
				return 0x18;
			case 0x10FB4:
				return 0x19;
			case 0x10FB5:
				return 0x15;
			case 0x10FB6:
				return 0x16;
			case 0x10FB7:
				return 0x1D;
			case 0x10FB8:
				return 0x18;
			case 0x10FB9:
				return 0x17;
			case 0x10FBA:
				return 0x17;
			case 0x10FBB:
				return 0x17;
			case 0x10FBC:
				return 0x19;
			case 0x10FBD:
				return 0x16;
			case 0x10FBE:
				return 0x16;
			case 0x10FBF:
				return 0x19;
			case 0x10FC0:
				return 0x17;
			case 0x10FC1:
				return 0x15;
			case 0x10FC2:
				return 0x17;
			case 0x10FC3:
				return 0x17;
			case 0x10FC4:
				return 0x16;
			case 0x10FC5:
				return 0x16;
			case 0x10FC6:
				return 0x16;
			case 0x10FC7:
				return 0x18;
			case 0x10FC8:
				return 0x17;
			case 0x10FC9:
				return 0x16;
			case 0x10FCA:
				return 0x19;
			case 0x10FCB:
				return 0x1E;
			case 0x10FE0:
				return 0x15;
			case 0x10FE1:
				return 0x14;
			case 0x10FE2:
				return 0x15;
			case 0x10FE3:
				return 0x16;
			case 0x10FE4:
				return 0x12;
			case 0x10FE5:
				return 0x13;
			case 0x10FE6:
				return 0x15;
			case 0x10FE7:
				return 0x14;
			case 0x10FE8:
				return 0x14;
			case 0x10FE9:
				return 0x14;
			case 0x10FEA:
				return 0x14;
			case 0x10FEB:
				return 0x16;
			case 0x10FEC:
				return 0x13;
			case 0x10FED:
				return 0x13;
			case 0x10FEE:
				return 0x16;
			case 0x10FEF:
				return 0x14;
			case 0x10FF0:
				return 0x12;
			case 0x10FF1:
				return 0x15;
			case 0x10FF2:
				return 0x14;
			case 0x10FF3:
				return 0x14;
			case 0x10FF4:
				return 0x14;
			case 0x10FF5:
				return 0x13;
			case 0x10FF6:
				return 0x1C;
			case 0x11000:
				return 0x18;
			case 0x11001:
				return 0x15;
			case 0x11002:
				return 0x14;
			case 0x11003:
				return 0x18;
			case 0x11004:
				return 0x18;
			case 0x11005:
				return 0x10;
			case 0x11006:
				return 0x11;
			case 0x11007:
				return 0x10;
			case 0x11008:
				return 0x11;
			case 0x11009:
				return 0x10;
			case 0x1100A:
				return 0x11;
			case 0x1100B:
				return 0x18;
			case 0x1100C:
				return 0x19;
			case 0x1100D:
				return 0x18;
			case 0x1100E:
				return 0x19;
			case 0x1100F:
				return 0x10;
			case 0x11010:
				return 0x11;
			case 0x11011:
				return 0x10;
			case 0x11012:
				return 0x11;
			case 0x11013:
				return 0x11;
			case 0x11014:
				return 0x12;
			case 0x11015:
				return 0x11;
			case 0x11016:
				return 0x12;
			case 0x11017:
				return 0x12;
			case 0x11018:
				return 0x11;
			case 0x11019:
				return 0x12;
			case 0x1101A:
				return 0x11;
			case 0x1101B:
				return 0x12;
			case 0x1101C:
				return 0x12;
			case 0x1101D:
				return 0x12;
			case 0x1101E:
				return 0x13;
			case 0x1101F:
				return 0x12;
			case 0x11020:
				return 0x13;
			case 0x11021:
				return 0x12;
			case 0x11022:
				return 0x11;
			case 0x11023:
				return 0x12;
			case 0x11024:
				return 0x11;
			case 0x11025:
				return 0x12;
			case 0x11026:
				return 0x11;
			case 0x11027:
				return 0x11;
			case 0x11028:
				return 0x12;
			case 0x11029:
				return 0x11;
			case 0x1102A:
				return 0x12;
			case 0x1102B:
				return 0x11;
			case 0x1102C:
				return 0x11;
			case 0x1102D:
				return 0x11;
			case 0x1102E:
				return 0x11;
			case 0x1102F:
				return 0x11;
			case 0x11030:
				return 0x12;
			case 0x11031:
				return 0x12;
			case 0x11032:
				return 0x11;
			case 0x11033:
				return 0x11;
			case 0x11034:
				return 0x12;
			case 0x11035:
				return 0x1D;
			case 0x11036:
				return 0x1C;
			case 0x11037:
				return 0x1D;
			case 0x11038:
				return 0x15;
			case 0x11039:
				return 0x21;
			case 0x1103A:
				return 0x14;
			case 0x1103B:
				return 0x15;
			case 0x1103C:
				return 0x14;
			case 0x1103D:
				return 0x15;
			case 0x1103E:
				return 0x1C;
			case 0x1103F:
				return 0x1D;
			case 0x11040:
				return 0x1C;
			case 0x11041:
				return 0x1D;
			case 0x11042:
				return 0x14;
			case 0x11043:
				return 0x15;
			case 0x11044:
				return 0x14;
			case 0x11045:
				return 0x15;
			case 0x11046:
				return 0xE;
			case 0x11047:
				return 0xD;
			case 0x11048:
				return 0x14;
			case 0x11049:
				return 0x17;
			case 0x1104A:
				return 0x1E;
			case 0x1104B:
				return 0x18;
			case 0x1104C:
				return 0x20;
			case 0x1104D:
				return 0x19;
			case 0x11052:
				return 0x12;
			case 0x11053:
				return 0x12;
			case 0x11054:
				return 0x14;
			case 0x11055:
				return 0x13;
			case 0x11056:
				return 0x13;
			case 0x11057:
				return 0x12;
			case 0x11058:
				return 0x14;
			case 0x11059:
				return 0x14;
			case 0x1105A:
				return 0x13;
			case 0x1105B:
				return 0x12;
			case 0x1105C:
				return 0x15;
			case 0x1105D:
				return 0x15;
			case 0x1105E:
				return 0x14;
			case 0x1105F:
				return 0x14;
			case 0x11060:
				return 0x14;
			case 0x11061:
				return 0x16;
			case 0x11062:
				return 0x15;
			case 0x11063:
				return 0x15;
			case 0x11064:
				return 0x1A;
			case 0x11065:
				return 0x1B;
			case 0x11066:
				return 0x12;
			case 0x11067:
				return 0x11;
			case 0x11068:
				return 0x11;
			case 0x11069:
				return 0x13;
			case 0x1106A:
				return 0x12;
			case 0x1106B:
				return 0x12;
			case 0x1106C:
				return 0x11;
			case 0x1106D:
				return 0x13;
			case 0x1106E:
				return 0x13;
			case 0x1106F:
				return 0x12;
			case 0x1107F:
				return 0x15;
			case 0x11080:
				return 0x18;
			case 0x11081:
				return 0x15;
			case 0x11082:
				return 0x14;
			case 0x11083:
				return 0x10;
			case 0x11084:
				return 0x11;
			case 0x11085:
				return 0x10;
			case 0x11086:
				return 0x11;
			case 0x11087:
				return 0x10;
			case 0x11088:
				return 0x11;
			case 0x11089:
				return 0x10;
			case 0x1108A:
				return 0x11;
			case 0x1108B:
				return 0x10;
			case 0x1108C:
				return 0x11;
			case 0x1108D:
				return 0x11;
			case 0x1108E:
				return 0x12;
			case 0x1108F:
				return 0x11;
			case 0x11090:
				return 0x12;
			case 0x11091:
				return 0x12;
			case 0x11092:
				return 0x11;
			case 0x11093:
				return 0x12;
			case 0x11094:
				return 0x11;
			case 0x11095:
				return 0x12;
			case 0x11096:
				return 0x12;
			case 0x11097:
				return 0x12;
			case 0x11098:
				return 0x13;
			case 0x11099:
				return 0x12;
			case 0x1109A:
				return 0x14;
			case 0x1109B:
				return 0x13;
			case 0x1109C:
				return 0x12;
			case 0x1109D:
				return 0x12;
			case 0x1109E:
				return 0x11;
			case 0x1109F:
				return 0x12;
			case 0x110A0:
				return 0x11;
			case 0x110A1:
				return 0x12;
			case 0x110A2:
				return 0x11;
			case 0x110A3:
				return 0x11;
			case 0x110A4:
				return 0x12;
			case 0x110A5:
				return 0x11;
			case 0x110A6:
				return 0x12;
			case 0x110A7:
				return 0x11;
			case 0x110A8:
				return 0x11;
			case 0x110A9:
				return 0x11;
			case 0x110AA:
				return 0x11;
			case 0x110AB:
				return 0x11;
			case 0x110AC:
				return 0x12;
			case 0x110AD:
				return 0x12;
			case 0x110AE:
				return 0x11;
			case 0x110AF:
				return 0x11;
			case 0x110B0:
				return 0x15;
			case 0x110B1:
				return 0x14;
			case 0x110B2:
				return 0x15;
			case 0x110B3:
				return 0x14;
			case 0x110B4:
				return 0x15;
			case 0x110B5:
				return 0x14;
			case 0x110B6:
				return 0x15;
			case 0x110B7:
				return 0x14;
			case 0x110B8:
				return 0x15;
			case 0x110B9:
				return 0x13;
			case 0x110BA:
				return 0x12;
			case 0x110BB:
				return 0x19;
			case 0x110BC:
				return 0x18;
			case 0x110BD:
				return 0x13;
			case 0x110BE:
				return 0x14;
			case 0x110BF:
				return 0x1B;
			case 0x110C0:
				return 0xD;
			case 0x110C1:
				return 0x14;
			case 0x110CD:
				return 0x19;
			case 0x110D0:
				return 0x18;
			case 0x110D1:
				return 0x18;
			case 0x110D2:
				return 0x18;
			case 0x110D3:
				return 0x18;
			case 0x110D4:
				return 0x18;
			case 0x110D5:
				return 0x18;
			case 0x110D6:
				return 0x18;
			case 0x110D7:
				return 0x19;
			case 0x110D8:
				return 0x18;
			case 0x110D9:
				return 0x18;
			case 0x110DA:
				return 0x18;
			case 0x110DB:
				return 0x18;
			case 0x110DC:
				return 0x18;
			case 0x110DD:
				return 0x18;
			case 0x110DE:
				return 0x18;
			case 0x110DF:
				return 0x18;
			case 0x110E0:
				return 0x18;
			case 0x110E1:
				return 0x19;
			case 0x110E2:
				return 0x17;
			case 0x110E3:
				return 0x18;
			case 0x110E4:
				return 0x17;
			case 0x110E5:
				return 0x17;
			case 0x110E6:
				return 0x17;
			case 0x110E7:
				return 0x17;
			case 0x110E8:
				return 0x18;
			case 0x110F0:
				return 0x18;
			case 0x110F1:
				return 0x17;
			case 0x110F2:
				return 0x17;
			case 0x110F3:
				return 0x19;
			case 0x110F4:
				return 0x18;
			case 0x110F5:
				return 0x18;
			case 0x110F6:
				return 0x17;
			case 0x110F7:
				return 0x19;
			case 0x110F8:
				return 0x19;
			case 0x110F9:
				return 0x18;
			case 0x11100:
				return 0x18;
			case 0x11101:
				return 0x15;
			case 0x11102:
				return 0x14;
			case 0x11103:
				return 0x11;
			case 0x11104:
				return 0x10;
			case 0x11105:
				return 0x10;
			case 0x11106:
				return 0x10;
			case 0x11107:
				return 0x12;
			case 0x11108:
				return 0x13;
			case 0x11109:
				return 0x12;
			case 0x1110A:
				return 0x13;
			case 0x1110B:
				return 0x13;
			case 0x1110C:
				return 0x12;
			case 0x1110D:
				return 0x13;
			case 0x1110E:
				return 0x12;
			case 0x1110F:
				return 0x13;
			case 0x11110:
				return 0x13;
			case 0x11111:
				return 0x13;
			case 0x11112:
				return 0x14;
			case 0x11113:
				return 0x13;
			case 0x11114:
				return 0x14;
			case 0x11115:
				return 0x13;
			case 0x11116:
				return 0x12;
			case 0x11117:
				return 0x13;
			case 0x11118:
				return 0x12;
			case 0x11119:
				return 0x13;
			case 0x1111A:
				return 0x12;
			case 0x1111B:
				return 0x12;
			case 0x1111C:
				return 0x13;
			case 0x1111D:
				return 0x12;
			case 0x1111E:
				return 0x13;
			case 0x1111F:
				return 0x12;
			case 0x11120:
				return 0x13;
			case 0x11121:
				return 0x12;
			case 0x11122:
				return 0x12;
			case 0x11123:
				return 0x12;
			case 0x11124:
				return 0x12;
			case 0x11125:
				return 0x12;
			case 0x11126:
				return 0x12;
			case 0x11127:
				return 0x14;
			case 0x11128:
				return 0x14;
			case 0x11129:
				return 0x15;
			case 0x1112A:
				return 0x14;
			case 0x1112B:
				return 0x15;
			case 0x1112C:
				return 0x14;
			case 0x1112D:
				return 0x15;
			case 0x1112E:
				return 0x14;
			case 0x1112F:
				return 0x15;
			case 0x11130:
				return 0x15;
			case 0x11131:
				return 0xE;
			case 0x11132:
				return 0xF;
			case 0x11133:
				return 0xE;
			case 0x11134:
				return 0xF;
			case 0x11136:
				return 0x12;
			case 0x11137:
				return 0x11;
			case 0x11138:
				return 0x11;
			case 0x11139:
				return 0x13;
			case 0x1113A:
				return 0x12;
			case 0x1113B:
				return 0x12;
			case 0x1113C:
				return 0x11;
			case 0x1113D:
				return 0x13;
			case 0x1113E:
				return 0x13;
			case 0x1113F:
				return 0x12;
			case 0x11140:
				return 0x14;
			case 0x11141:
				return 0xD;
			case 0x11142:
				return 0x14;
			case 0x11143:
				return 0x15;
			case 0x11144:
				return 0x13;
			case 0x11145:
				return 0x15;
			case 0x11146:
				return 0x15;
			case 0x11147:
				return 0x12;
			case 0x11150:
				return 0x12;
			case 0x11151:
				return 0x12;
			case 0x11152:
				return 0x12;
			case 0x11153:
				return 0x12;
			case 0x11154:
				return 0x12;
			case 0x11155:
				return 0x13;
			case 0x11156:
				return 0x14;
			case 0x11157:
				return 0x13;
			case 0x11158:
				return 0x14;
			case 0x11159:
				return 0x13;
			case 0x1115A:
				return 0x14;
			case 0x1115B:
				return 0x13;
			case 0x1115C:
				return 0x14;
			case 0x1115D:
				return 0x14;
			case 0x1115E:
				return 0x14;
			case 0x1115F:
				return 0x15;
			case 0x11160:
				return 0x14;
			case 0x11161:
				return 0x15;
			case 0x11162:
				return 0x14;
			case 0x11163:
				return 0x13;
			case 0x11164:
				return 0x14;
			case 0x11165:
				return 0x13;
			case 0x11166:
				return 0x14;
			case 0x11167:
				return 0x13;
			case 0x11168:
				return 0x13;
			case 0x11169:
				return 0x14;
			case 0x1116A:
				return 0x13;
			case 0x1116B:
				return 0x14;
			case 0x1116C:
				return 0x13;
			case 0x1116D:
				return 0x13;
			case 0x1116E:
				return 0x13;
			case 0x1116F:
				return 0x13;
			case 0x11170:
				return 0x13;
			case 0x11171:
				return 0x13;
			case 0x11172:
				return 0x14;
			case 0x11173:
				return 0x14;
			case 0x11174:
				return 0x1B;
			case 0x11175:
				return 0x16;
			case 0x11176:
				return 0x17;
			case 0x11180:
				return 0x19;
			case 0x11181:
				return 0x16;
			case 0x11182:
				return 0x15;
			case 0x11183:
				return 0x11;
			case 0x11184:
				return 0x12;
			case 0x11185:
				return 0x11;
			case 0x11186:
				return 0x12;
			case 0x11187:
				return 0x11;
			case 0x11188:
				return 0x12;
			case 0x11189:
				return 0x19;
			case 0x1118A:
				return 0x1A;
			case 0x1118B:
				return 0x19;
			case 0x1118C:
				return 0x1A;
			case 0x1118D:
				return 0x11;
			case 0x1118E:
				return 0x12;
			case 0x1118F:
				return 0x11;
			case 0x11190:
				return 0x12;
			case 0x11191:
				return 0x12;
			case 0x11192:
				return 0x13;
			case 0x11193:
				return 0x12;
			case 0x11194:
				return 0x13;
			case 0x11195:
				return 0x13;
			case 0x11196:
				return 0x12;
			case 0x11197:
				return 0x13;
			case 0x11198:
				return 0x12;
			case 0x11199:
				return 0x13;
			case 0x1119A:
				return 0x13;
			case 0x1119B:
				return 0x13;
			case 0x1119C:
				return 0x14;
			case 0x1119D:
				return 0x13;
			case 0x1119E:
				return 0x14;
			case 0x1119F:
				return 0x13;
			case 0x111A0:
				return 0x12;
			case 0x111A1:
				return 0x13;
			case 0x111A2:
				return 0x12;
			case 0x111A3:
				return 0x13;
			case 0x111A4:
				return 0x12;
			case 0x111A5:
				return 0x12;
			case 0x111A6:
				return 0x13;
			case 0x111A7:
				return 0x12;
			case 0x111A8:
				return 0x13;
			case 0x111A9:
				return 0x12;
			case 0x111AA:
				return 0x12;
			case 0x111AB:
				return 0x12;
			case 0x111AC:
				return 0x12;
			case 0x111AD:
				return 0x13;
			case 0x111AE:
				return 0x12;
			case 0x111AF:
				return 0x13;
			case 0x111B0:
				return 0x13;
			case 0x111B1:
				return 0x12;
			case 0x111B2:
				return 0x12;
			case 0x111B3:
				return 0x16;
			case 0x111B4:
				return 0x15;
			case 0x111B5:
				return 0x16;
			case 0x111B6:
				return 0x15;
			case 0x111B7:
				return 0x16;
			case 0x111B8:
				return 0x1D;
			case 0x111B9:
				return 0x1E;
			case 0x111BA:
				return 0x1D;
			case 0x111BB:
				return 0x1E;
			case 0x111BC:
				return 0x15;
			case 0x111BD:
				return 0x16;
			case 0x111BE:
				return 0x15;
			case 0x111BF:
				return 0x16;
			case 0x111C0:
				return 0x14;
			case 0x111C1:
				return 0x16;
			case 0x111C2:
				return 0x19;
			case 0x111C3:
				return 0x19;
			case 0x111C4:
				return 0xB;
			case 0x111C5:
				return 0xE;
			case 0x111C6:
				return 0x15;
			case 0x111C7:
				return 0x1A;
			case 0x111C8:
				return 0x12;
			case 0x111C9:
				return 0x14;
			case 0x111CA:
				return 0x13;
			case 0x111CB:
				return 0x1C;
			case 0x111CC:
				return 0x1F;
			case 0x111CD:
				return 0x13;
			case 0x111CE:
				return 0x23;
			case 0x111CF:
				return 0x22;
			case 0x111D0:
				return 0x13;
			case 0x111D1:
				return 0x12;
			case 0x111D2:
				return 0x12;
			case 0x111D3:
				return 0x14;
			case 0x111D4:
				return 0x13;
			case 0x111D5:
				return 0x13;
			case 0x111D6:
				return 0x12;
			case 0x111D7:
				return 0x14;
			case 0x111D8:
				return 0x14;
			case 0x111D9:
				return 0x13;
			case 0x111DA:
				return 0xD;
			case 0x111DB:
				return 0x15;
			case 0x111DC:
				return 0x13;
			case 0x111DD:
				return 0x1A;
			case 0x111DE:
				return 0x17;
			case 0x111DF:
				return 0x17;
			case 0x111E1:
				return 0x1A;
			case 0x111E2:
				return 0x1A;
			case 0x111E3:
				return 0x1C;
			case 0x111E4:
				return 0x1B;
			case 0x111E5:
				return 0x1B;
			case 0x111E6:
				return 0x1A;
			case 0x111E7:
				return 0x1C;
			case 0x111E8:
				return 0x1C;
			case 0x111E9:
				return 0x1B;
			case 0x111EA:
				return 0x1B;
			case 0x111EB:
				return 0x1E;
			case 0x111EC:
				return 0x1E;
			case 0x111ED:
				return 0x1D;
			case 0x111EE:
				return 0x1D;
			case 0x111EF:
				return 0x1D;
			case 0x111F0:
				return 0x1F;
			case 0x111F1:
				return 0x1E;
			case 0x111F2:
				return 0x1E;
			case 0x111F3:
				return 0x23;
			case 0x111F4:
				return 0x24;
			case 0x11200:
				return 0x10;
			case 0x11201:
				return 0x11;
			case 0x11202:
				return 0x10;
			case 0x11203:
				return 0x10;
			case 0x11204:
				return 0x10;
			case 0x11205:
				return 0x11;
			case 0x11206:
				return 0x10;
			case 0x11207:
				return 0x11;
			case 0x11208:
				return 0x11;
			case 0x11209:
				return 0x12;
			case 0x1120A:
				return 0x11;
			case 0x1120B:
				return 0x12;
			case 0x1120C:
				return 0x12;
			case 0x1120D:
				return 0x12;
			case 0x1120E:
				return 0x11;
			case 0x1120F:
				return 0x12;
			case 0x11210:
				return 0x11;
			case 0x11211:
				return 0x12;
			case 0x11213:
				return 0x12;
			case 0x11214:
				return 0x12;
			case 0x11215:
				return 0x13;
			case 0x11216:
				return 0x12;
			case 0x11217:
				return 0x13;
			case 0x11218:
				return 0x12;
			case 0x11219:
				return 0x11;
			case 0x1121A:
				return 0x12;
			case 0x1121B:
				return 0x11;
			case 0x1121C:
				return 0x13;
			case 0x1121D:
				return 0x12;
			case 0x1121E:
				return 0x11;
			case 0x1121F:
				return 0x11;
			case 0x11220:
				return 0x12;
			case 0x11221:
				return 0x11;
			case 0x11222:
				return 0x12;
			case 0x11223:
				return 0x12;
			case 0x11224:
				return 0x11;
			case 0x11225:
				return 0x11;
			case 0x11226:
				return 0x11;
			case 0x11227:
				return 0x11;
			case 0x11228:
				return 0x11;
			case 0x11229:
				return 0x11;
			case 0x1122A:
				return 0x11;
			case 0x1122B:
				return 0x12;
			case 0x1122C:
				return 0x15;
			case 0x1122D:
				return 0x14;
			case 0x1122E:
				return 0x15;
			case 0x1122F:
				return 0x14;
			case 0x11230:
				return 0x14;
			case 0x11231:
				return 0x15;
			case 0x11232:
				return 0x14;
			case 0x11233:
				return 0x15;
			case 0x11234:
				return 0x15;
			case 0x11235:
				return 0x13;
			case 0x11236:
				return 0x12;
			case 0x11237:
				return 0x13;
			case 0x11238:
				return 0xD;
			case 0x11239:
				return 0x14;
			case 0x1123A:
				return 0x16;
			case 0x1123B:
				return 0x14;
			case 0x1123C:
				return 0x1B;
			case 0x1123D:
				return 0x19;
			case 0x1123E:
				return 0x12;
			case 0x11280:
				return 0x11;
			case 0x11281:
				return 0x11;
			case 0x11282:
				return 0x11;
			case 0x11283:
				return 0x11;
			case 0x11284:
				return 0x12;
			case 0x11285:
				return 0x13;
			case 0x11286:
				return 0x12;
			case 0x11288:
				return 0x13;
			case 0x1128A:
				return 0x12;
			case 0x1128B:
				return 0x13;
			case 0x1128C:
				return 0x12;
			case 0x1128D:
				return 0x13;
			case 0x1128F:
				return 0x13;
			case 0x11290:
				return 0x13;
			case 0x11291:
				return 0x14;
			case 0x11292:
				return 0x13;
			case 0x11293:
				return 0x14;
			case 0x11294:
				return 0x14;
			case 0x11295:
				return 0x13;
			case 0x11296:
				return 0x12;
			case 0x11297:
				return 0x13;
			case 0x11298:
				return 0x12;
			case 0x11299:
				return 0x13;
			case 0x1129A:
				return 0x12;
			case 0x1129B:
				return 0x12;
			case 0x1129C:
				return 0x13;
			case 0x1129D:
				return 0x12;
			case 0x1129F:
				return 0x13;
			case 0x112A0:
				return 0x12;
			case 0x112A1:
				return 0x12;
			case 0x112A2:
				return 0x12;
			case 0x112A3:
				return 0x12;
			case 0x112A4:
				return 0x12;
			case 0x112A5:
				return 0x12;
			case 0x112A6:
				return 0x12;
			case 0x112A7:
				return 0x13;
			case 0x112A8:
				return 0x13;
			case 0x112A9:
				return 0x15;
			case 0x112B0:
				return 0x13;
			case 0x112B1:
				return 0x14;
			case 0x112B2:
				return 0x13;
			case 0x112B3:
				return 0x14;
			case 0x112B4:
				return 0x13;
			case 0x112B5:
				return 0x14;
			case 0x112B6:
				return 0x13;
			case 0x112B7:
				return 0x14;
			case 0x112B8:
				return 0x13;
			case 0x112B9:
				return 0x14;
			case 0x112BA:
				return 0x14;
			case 0x112BB:
				return 0x15;
			case 0x112BC:
				return 0x14;
			case 0x112BD:
				return 0x15;
			case 0x112BE:
				return 0x15;
			case 0x112BF:
				return 0x15;
			case 0x112C0:
				return 0x14;
			case 0x112C1:
				return 0x15;
			case 0x112C2:
				return 0x14;
			case 0x112C3:
				return 0x15;
			case 0x112C4:
				return 0x15;
			case 0x112C5:
				return 0x15;
			case 0x112C6:
				return 0x15;
			case 0x112C7:
				return 0x16;
			case 0x112C8:
				return 0x15;
			case 0x112C9:
				return 0x16;
			case 0x112CA:
				return 0x15;
			case 0x112CB:
				return 0x16;
			case 0x112CC:
				return 0x15;
			case 0x112CD:
				return 0x14;
			case 0x112CE:
				return 0x15;
			case 0x112CF:
				return 0x14;
			case 0x112D0:
				return 0x15;
			case 0x112D1:
				return 0x14;
			case 0x112D2:
				return 0x14;
			case 0x112D3:
				return 0x15;
			case 0x112D4:
				return 0x14;
			case 0x112D5:
				return 0x15;
			case 0x112D6:
				return 0x15;
			case 0x112D7:
				return 0x14;
			case 0x112D8:
				return 0x14;
			case 0x112D9:
				return 0x14;
			case 0x112DA:
				return 0x14;
			case 0x112DB:
				return 0x14;
			case 0x112DC:
				return 0x15;
			case 0x112DD:
				return 0x14;
			case 0x112DE:
				return 0x14;
			case 0x112DF:
				return 0x18;
			case 0x112E0:
				return 0x18;
			case 0x112E1:
				return 0x17;
			case 0x112E2:
				return 0x18;
			case 0x112E3:
				return 0x17;
			case 0x112E4:
				return 0x18;
			case 0x112E5:
				return 0x17;
			case 0x112E6:
				return 0x18;
			case 0x112E7:
				return 0x17;
			case 0x112E8:
				return 0x18;
			case 0x112E9:
				return 0x15;
			case 0x112EA:
				return 0x16;
			case 0x112F0:
				return 0x15;
			case 0x112F1:
				return 0x14;
			case 0x112F2:
				return 0x14;
			case 0x112F3:
				return 0x16;
			case 0x112F4:
				return 0x15;
			case 0x112F5:
				return 0x15;
			case 0x112F6:
				return 0x14;
			case 0x112F7:
				return 0x16;
			case 0x112F8:
				return 0x16;
			case 0x112F9:
				return 0x15;
			case 0x11300:
				return 0x26;
			case 0x11301:
				return 0x19;
			case 0x11302:
				return 0x16;
			case 0x11303:
				return 0x15;
			case 0x11305:
				return 0x11;
			case 0x11306:
				return 0x12;
			case 0x11307:
				return 0x11;
			case 0x11308:
				return 0x12;
			case 0x11309:
				return 0x11;
			case 0x1130A:
				return 0x12;
			case 0x1130B:
				return 0x19;
			case 0x1130C:
				return 0x19;
			case 0x1130F:
				return 0x12;
			case 0x11310:
				return 0x12;
			case 0x11313:
				return 0x12;
			case 0x11314:
				return 0x12;
			case 0x11315:
				return 0x12;
			case 0x11316:
				return 0x13;
			case 0x11317:
				return 0x12;
			case 0x11318:
				return 0x13;
			case 0x11319:
				return 0x13;
			case 0x1131A:
				return 0x12;
			case 0x1131B:
				return 0x13;
			case 0x1131C:
				return 0x12;
			case 0x1131D:
				return 0x13;
			case 0x1131E:
				return 0x13;
			case 0x1131F:
				return 0x13;
			case 0x11320:
				return 0x14;
			case 0x11321:
				return 0x13;
			case 0x11322:
				return 0x14;
			case 0x11323:
				return 0x13;
			case 0x11324:
				return 0x12;
			case 0x11325:
				return 0x13;
			case 0x11326:
				return 0x12;
			case 0x11327:
				return 0x13;
			case 0x11328:
				return 0x12;
			case 0x1132A:
				return 0x12;
			case 0x1132B:
				return 0x13;
			case 0x1132C:
				return 0x12;
			case 0x1132D:
				return 0x13;
			case 0x1132E:
				return 0x12;
			case 0x1132F:
				return 0x12;
			case 0x11330:
				return 0x12;
			case 0x11332:
				return 0x12;
			case 0x11333:
				return 0x13;
			case 0x11335:
				return 0x12;
			case 0x11336:
				return 0x13;
			case 0x11337:
				return 0x13;
			case 0x11338:
				return 0x12;
			case 0x11339:
				return 0x12;
			case 0x1133B:
				return 0x16;
			case 0x1133C:
				return 0x13;
			case 0x1133D:
				return 0x16;
			case 0x1133E:
				return 0x16;
			case 0x1133F:
				return 0x15;
			case 0x11340:
				return 0x16;
			case 0x11341:
				return 0x15;
			case 0x11342:
				return 0x16;
			case 0x11343:
				return 0x1D;
			case 0x11344:
				return 0x1E;
			case 0x11347:
				return 0x16;
			case 0x11348:
				return 0x16;
			case 0x1134B:
				return 0x16;
			case 0x1134C:
				return 0x16;
			case 0x1134D:
				return 0x14;
			case 0x11350:
				return 0xB;
			case 0x11357:
				return 0x17;
			case 0x1135D:
				return 0x13;
			case 0x1135E:
				return 0x1E;
			case 0x1135F:
				return 0x25;
			case 0x11360:
				return 0x1A;
			case 0x11361:
				return 0x1A;
			case 0x11362:
				return 0x1D;
			case 0x11363:
				return 0x1E;
			case 0x11366:
				return 0x1D;
			case 0x11367:
				return 0x1C;
			case 0x11368:
				return 0x1C;
			case 0x11369:
				return 0x1E;
			case 0x1136A:
				return 0x1D;
			case 0x1136B:
				return 0x1D;
			case 0x1136C:
				return 0x1C;
			case 0x11370:
				return 0x1B;
			case 0x11371:
				return 0x1C;
			case 0x11372:
				return 0x1C;
			case 0x11373:
				return 0x1C;
			case 0x11374:
				return 0x1C;
			case 0x11400:
				return 0xE;
			case 0x11401:
				return 0xF;
			case 0x11402:
				return 0xE;
			case 0x11403:
				return 0xF;
			case 0x11404:
				return 0xE;
			case 0x11405:
				return 0xF;
			case 0x11406:
				return 0x16;
			case 0x11407:
				return 0x17;
			case 0x11408:
				return 0x16;
			case 0x11409:
				return 0x17;
			case 0x1140A:
				return 0xE;
			case 0x1140B:
				return 0xF;
			case 0x1140C:
				return 0xE;
			case 0x1140D:
				return 0xF;
			case 0x1140E:
				return 0xF;
			case 0x1140F:
				return 0x10;
			case 0x11410:
				return 0xF;
			case 0x11411:
				return 0x10;
			case 0x11412:
				return 0x10;
			case 0x11413:
				return 0x11;
			case 0x11414:
				return 0xF;
			case 0x11415:
				return 0x10;
			case 0x11416:
				return 0xF;
			case 0x11417:
				return 0x10;
			case 0x11418:
				return 0x10;
			case 0x11419:
				return 0x11;
			case 0x1141A:
				return 0x10;
			case 0x1141B:
				return 0x11;
			case 0x1141C:
				return 0x10;
			case 0x1141D:
				return 0x11;
			case 0x1141E:
				return 0x10;
			case 0x1141F:
				return 0xF;
			case 0x11420:
				return 0x10;
			case 0x11421:
				return 0xF;
			case 0x11422:
				return 0x10;
			case 0x11423:
				return 0xF;
			case 0x11424:
				return 0x10;
			case 0x11425:
				return 0xF;
			case 0x11426:
				return 0x10;
			case 0x11427:
				return 0xF;
			case 0x11428:
				return 0x10;
			case 0x11429:
				return 0xF;
			case 0x1142A:
				return 0x10;
			case 0x1142B:
				return 0xF;
			case 0x1142C:
				return 0xF;
			case 0x1142D:
				return 0x10;
			case 0x1142E:
				return 0xF;
			case 0x1142F:
				return 0x10;
			case 0x11430:
				return 0xF;
			case 0x11431:
				return 0x10;
			case 0x11432:
				return 0x10;
			case 0x11433:
				return 0xF;
			case 0x11434:
				return 0xF;
			case 0x11435:
				return 0x13;
			case 0x11436:
				return 0x12;
			case 0x11437:
				return 0x13;
			case 0x11438:
				return 0x12;
			case 0x11439:
				return 0x13;
			case 0x1143A:
				return 0x1A;
			case 0x1143B:
				return 0x1B;
			case 0x1143C:
				return 0x1A;
			case 0x1143D:
				return 0x1B;
			case 0x1143E:
				return 0x12;
			case 0x1143F:
				return 0x13;
			case 0x11440:
				return 0x12;
			case 0x11441:
				return 0x13;
			case 0x11442:
				return 0x11;
			case 0x11443:
				return 0x16;
			case 0x11444:
				return 0x13;
			case 0x11445:
				return 0x12;
			case 0x11446:
				return 0x10;
			case 0x11447:
				return 0x13;
			case 0x11448:
				return 0x19;
			case 0x11449:
				return 0x8;
			case 0x1144A:
				return 0xC;
			case 0x1144B:
				return 0xB;
			case 0x1144C:
				return 0x12;
			case 0x1144D:
				return 0xB;
			case 0x1144E:
				return 0x10;
			case 0x1144F:
				return 0x17;
			case 0x11450:
				return 0x10;
			case 0x11451:
				return 0xF;
			case 0x11452:
				return 0xF;
			case 0x11453:
				return 0x11;
			case 0x11454:
				return 0x10;
			case 0x11455:
				return 0x10;
			case 0x11456:
				return 0xF;
			case 0x11457:
				return 0x11;
			case 0x11458:
				return 0x11;
			case 0x11459:
				return 0x10;
			case 0x1145A:
				return 0x12;
			case 0x1145B:
				return 0x16;
			case 0x1145D:
				return 0x14;
			case 0x1145E:
				return 0x11;
			case 0x1145F:
				return 0x1B;
			case 0x11460:
				return 0x16;
			case 0x11461:
				return 0x16;
			case 0x11480:
				return 0xD;
			case 0x11481:
				return 0x11;
			case 0x11482:
				return 0x12;
			case 0x11483:
				return 0x11;
			case 0x11484:
				return 0x12;
			case 0x11485:
				return 0x11;
			case 0x11486:
				return 0x12;
			case 0x11487:
				return 0x19;
			case 0x11488:
				return 0x1A;
			case 0x11489:
				return 0x19;
			case 0x1148A:
				return 0x1A;
			case 0x1148B:
				return 0x11;
			case 0x1148C:
				return 0x12;
			case 0x1148D:
				return 0x11;
			case 0x1148E:
				return 0x12;
			case 0x1148F:
				return 0x12;
			case 0x11490:
				return 0x13;
			case 0x11491:
				return 0x12;
			case 0x11492:
				return 0x13;
			case 0x11493:
				return 0x13;
			case 0x11494:
				return 0x12;
			case 0x11495:
				return 0x13;
			case 0x11496:
				return 0x12;
			case 0x11497:
				return 0x13;
			case 0x11498:
				return 0x13;
			case 0x11499:
				return 0x13;
			case 0x1149A:
				return 0x14;
			case 0x1149B:
				return 0x13;
			case 0x1149C:
				return 0x14;
			case 0x1149D:
				return 0x13;
			case 0x1149E:
				return 0x12;
			case 0x1149F:
				return 0x13;
			case 0x114A0:
				return 0x12;
			case 0x114A1:
				return 0x13;
			case 0x114A2:
				return 0x12;
			case 0x114A3:
				return 0x12;
			case 0x114A4:
				return 0x13;
			case 0x114A5:
				return 0x12;
			case 0x114A6:
				return 0x13;
			case 0x114A7:
				return 0x12;
			case 0x114A8:
				return 0x12;
			case 0x114A9:
				return 0x12;
			case 0x114AA:
				return 0x12;
			case 0x114AB:
				return 0x12;
			case 0x114AC:
				return 0x13;
			case 0x114AD:
				return 0x13;
			case 0x114AE:
				return 0x12;
			case 0x114AF:
				return 0x12;
			case 0x114B0:
				return 0x16;
			case 0x114B1:
				return 0x15;
			case 0x114B2:
				return 0x16;
			case 0x114B3:
				return 0x15;
			case 0x114B4:
				return 0x16;
			case 0x114B5:
				return 0x1D;
			case 0x114B6:
				return 0x1E;
			case 0x114B7:
				return 0x1D;
			case 0x114B8:
				return 0x1E;
			case 0x114B9:
				return 0x15;
			case 0x114BA:
				return 0x1B;
			case 0x114BB:
				return 0x16;
			case 0x114BC:
				return 0x15;
			case 0x114BD:
				return 0x1B;
			case 0x114BE:
				return 0x16;
			case 0x114BF:
				return 0x19;
			case 0x114C0:
				return 0x16;
			case 0x114C1:
				return 0x15;
			case 0x114C2:
				return 0x14;
			case 0x114C3:
				return 0x13;
			case 0x114C4:
				return 0x16;
			case 0x114C5:
				return 0xE;
			case 0x114C6:
				return 0x1A;
			case 0x114C7:
				return 0xB;
			case 0x114D0:
				return 0x13;
			case 0x114D1:
				return 0x12;
			case 0x114D2:
				return 0x12;
			case 0x114D3:
				return 0x14;
			case 0x114D4:
				return 0x13;
			case 0x114D5:
				return 0x13;
			case 0x114D6:
				return 0x12;
			case 0x114D7:
				return 0x14;
			case 0x114D8:
				return 0x14;
			case 0x114D9:
				return 0x13;
			case 0x11580:
				return 0x11;
			case 0x11581:
				return 0x12;
			case 0x11582:
				return 0x11;
			case 0x11583:
				return 0x12;
			case 0x11584:
				return 0x11;
			case 0x11585:
				return 0x12;
			case 0x11586:
				return 0x19;
			case 0x11587:
				return 0x1A;
			case 0x11588:
				return 0x19;
			case 0x11589:
				return 0x1A;
			case 0x1158A:
				return 0x11;
			case 0x1158B:
				return 0x12;
			case 0x1158C:
				return 0x11;
			case 0x1158D:
				return 0x12;
			case 0x1158E:
				return 0x12;
			case 0x1158F:
				return 0x13;
			case 0x11590:
				return 0x12;
			case 0x11591:
				return 0x13;
			case 0x11592:
				return 0x13;
			case 0x11593:
				return 0x12;
			case 0x11594:
				return 0x13;
			case 0x11595:
				return 0x12;
			case 0x11596:
				return 0x13;
			case 0x11597:
				return 0x13;
			case 0x11598:
				return 0x13;
			case 0x11599:
				return 0x14;
			case 0x1159A:
				return 0x13;
			case 0x1159B:
				return 0x14;
			case 0x1159C:
				return 0x13;
			case 0x1159D:
				return 0x12;
			case 0x1159E:
				return 0x13;
			case 0x1159F:
				return 0x12;
			case 0x115A0:
				return 0x13;
			case 0x115A1:
				return 0x12;
			case 0x115A2:
				return 0x12;
			case 0x115A3:
				return 0x13;
			case 0x115A4:
				return 0x12;
			case 0x115A5:
				return 0x13;
			case 0x115A6:
				return 0x12;
			case 0x115A7:
				return 0x12;
			case 0x115A8:
				return 0x12;
			case 0x115A9:
				return 0x12;
			case 0x115AA:
				return 0x12;
			case 0x115AB:
				return 0x13;
			case 0x115AC:
				return 0x13;
			case 0x115AD:
				return 0x12;
			case 0x115AE:
				return 0x12;
			case 0x115AF:
				return 0x16;
			case 0x115B0:
				return 0x15;
			case 0x115B1:
				return 0x16;
			case 0x115B2:
				return 0x15;
			case 0x115B3:
				return 0x16;
			case 0x115B4:
				return 0x1D;
			case 0x115B5:
				return 0x1E;
			case 0x115B8:
				return 0x15;
			case 0x115B9:
				return 0x16;
			case 0x115BA:
				return 0x15;
			case 0x115BB:
				return 0x16;
			case 0x115BC:
				return 0x19;
			case 0x115BD:
				return 0x16;
			case 0x115BE:
				return 0x15;
			case 0x115BF:
				return 0x14;
			case 0x115C0:
				return 0x13;
			case 0x115C1:
				return 0x15;
			case 0x115C2:
				return 0xE;
			case 0x115C3:
				return 0x15;
			case 0x115C4:
				return 0x16;
			case 0x115C5:
				return 0x16;
			case 0x115C6:
				return 0x1A;
			case 0x115C7:
				return 0x1A;
			case 0x115C8:
				return 0x1A;
			case 0x115C9:
				return 0x19;
			case 0x115CA:
				return 0x39;
			case 0x115CB:
				return 0x37;
			case 0x115CC:
				return 0x34;
			case 0x115CD:
				return 0x3B;
			case 0x115CE:
				return 0x3B;
			case 0x115CF:
				return 0x21;
			case 0x115D0:
				return 0x2B;
			case 0x115D1:
				return 0x2B;
			case 0x115D2:
				return 0x2B;
			case 0x115D3:
				return 0x2E;
			case 0x115D4:
				return 0x2D;
			case 0x115D5:
				return 0x2B;
			case 0x115D6:
				return 0x35;
			case 0x115D7:
				return 0x36;
			case 0x115D8:
				return 0x28;
			case 0x115D9:
				return 0x26;
			case 0x115DA:
				return 0x27;
			case 0x115DB:
				return 0x1B;
			case 0x115DC:
				return 0x1F;
			case 0x115DD:
				return 0x20;
			case 0x11600:
				return 0xE;
			case 0x11601:
				return 0xF;
			case 0x11602:
				return 0xE;
			case 0x11603:
				return 0xF;
			case 0x11604:
				return 0xE;
			case 0x11605:
				return 0xF;
			case 0x11606:
				return 0x16;
			case 0x11607:
				return 0x17;
			case 0x11608:
				return 0x16;
			case 0x11609:
				return 0x17;
			case 0x1160A:
				return 0xE;
			case 0x1160B:
				return 0xF;
			case 0x1160C:
				return 0xE;
			case 0x1160D:
				return 0xF;
			case 0x1160E:
				return 0xF;
			case 0x1160F:
				return 0x10;
			case 0x11610:
				return 0xF;
			case 0x11611:
				return 0x10;
			case 0x11612:
				return 0x10;
			case 0x11613:
				return 0xF;
			case 0x11614:
				return 0x10;
			case 0x11615:
				return 0xF;
			case 0x11616:
				return 0x10;
			case 0x11617:
				return 0x10;
			case 0x11618:
				return 0x10;
			case 0x11619:
				return 0x11;
			case 0x1161A:
				return 0x10;
			case 0x1161B:
				return 0x11;
			case 0x1161C:
				return 0x10;
			case 0x1161D:
				return 0xF;
			case 0x1161E:
				return 0x10;
			case 0x1161F:
				return 0xF;
			case 0x11620:
				return 0x10;
			case 0x11621:
				return 0xF;
			case 0x11622:
				return 0xF;
			case 0x11623:
				return 0x10;
			case 0x11624:
				return 0xF;
			case 0x11625:
				return 0x10;
			case 0x11626:
				return 0xF;
			case 0x11627:
				return 0xF;
			case 0x11628:
				return 0xF;
			case 0x11629:
				return 0xF;
			case 0x1162A:
				return 0xF;
			case 0x1162B:
				return 0x10;
			case 0x1162C:
				return 0x10;
			case 0x1162D:
				return 0xF;
			case 0x1162E:
				return 0xF;
			case 0x1162F:
				return 0x10;
			case 0x11630:
				return 0x13;
			case 0x11631:
				return 0x12;
			case 0x11632:
				return 0x13;
			case 0x11633:
				return 0x12;
			case 0x11634:
				return 0x13;
			case 0x11635:
				return 0x1A;
			case 0x11636:
				return 0x1B;
			case 0x11637:
				return 0x1A;
			case 0x11638:
				return 0x1B;
			case 0x11639:
				return 0x12;
			case 0x1163A:
				return 0x13;
			case 0x1163B:
				return 0x12;
			case 0x1163C:
				return 0x13;
			case 0x1163D:
				return 0x13;
			case 0x1163E:
				return 0x12;
			case 0x1163F:
				return 0x11;
			case 0x11640:
				return 0x16;
			case 0x11641:
				return 0xB;
			case 0x11642:
				return 0x12;
			case 0x11643:
				return 0x17;
			case 0x11644:
				return 0xF;
			case 0x11650:
				return 0x10;
			case 0x11651:
				return 0xF;
			case 0x11652:
				return 0xF;
			case 0x11653:
				return 0x11;
			case 0x11654:
				return 0x10;
			case 0x11655:
				return 0x10;
			case 0x11656:
				return 0xF;
			case 0x11657:
				return 0x11;
			case 0x11658:
				return 0x11;
			case 0x11659:
				return 0x10;
			case 0x11660:
				return 0x1E;
			case 0x11661:
				return 0x18;
			case 0x11662:
				return 0x25;
			case 0x11663:
				return 0x25;
			case 0x11664:
				return 0x25;
			case 0x11665:
				return 0x26;
			case 0x11666:
				return 0x2D;
			case 0x11667:
				return 0x19;
			case 0x11668:
				return 0x2E;
			case 0x11669:
				return 0x16;
			case 0x1166A:
				return 0x24;
			case 0x1166B:
				return 0x2B;
			case 0x1166C:
				return 0x32;
			case 0x11680:
				return 0xF;
			case 0x11681:
				return 0x10;
			case 0x11682:
				return 0xF;
			case 0x11683:
				return 0x10;
			case 0x11684:
				return 0xF;
			case 0x11685:
				return 0x10;
			case 0x11686:
				return 0xF;
			case 0x11687:
				return 0x10;
			case 0x11688:
				return 0xF;
			case 0x11689:
				return 0x10;
			case 0x1168A:
				return 0x10;
			case 0x1168B:
				return 0x11;
			case 0x1168C:
				return 0x10;
			case 0x1168D:
				return 0x11;
			case 0x1168E:
				return 0x11;
			case 0x1168F:
				return 0x10;
			case 0x11690:
				return 0x11;
			case 0x11691:
				return 0x10;
			case 0x11692:
				return 0x11;
			case 0x11693:
				return 0x11;
			case 0x11694:
				return 0x11;
			case 0x11695:
				return 0x12;
			case 0x11696:
				return 0x11;
			case 0x11697:
				return 0x12;
			case 0x11698:
				return 0x11;
			case 0x11699:
				return 0x10;
			case 0x1169A:
				return 0x11;
			case 0x1169B:
				return 0x10;
			case 0x1169C:
				return 0x11;
			case 0x1169D:
				return 0x10;
			case 0x1169E:
				return 0x10;
			case 0x1169F:
				return 0x11;
			case 0x116A0:
				return 0x10;
			case 0x116A1:
				return 0x11;
			case 0x116A2:
				return 0x10;
			case 0x116A3:
				return 0x10;
			case 0x116A4:
				return 0x10;
			case 0x116A5:
				return 0x10;
			case 0x116A6:
				return 0x10;
			case 0x116A7:
				return 0x11;
			case 0x116A8:
				return 0x10;
			case 0x116A9:
				return 0x10;
			case 0x116AA:
				return 0x11;
			case 0x116AB:
				return 0x14;
			case 0x116AC:
				return 0x13;
			case 0x116AD:
				return 0x14;
			case 0x116AE:
				return 0x13;
			case 0x116AF:
				return 0x14;
			case 0x116B0:
				return 0x13;
			case 0x116B1:
				return 0x14;
			case 0x116B2:
				return 0x13;
			case 0x116B3:
				return 0x14;
			case 0x116B4:
				return 0x13;
			case 0x116B5:
				return 0x14;
			case 0x116B6:
				return 0x12;
			case 0x116B7:
				return 0x11;
			case 0x116B8:
				return 0x19;
			case 0x116C0:
				return 0x11;
			case 0x116C1:
				return 0x10;
			case 0x116C2:
				return 0x10;
			case 0x116C3:
				return 0x12;
			case 0x116C4:
				return 0x11;
			case 0x116C5:
				return 0x11;
			case 0x116C6:
				return 0x10;
			case 0x116C7:
				return 0x12;
			case 0x116C8:
				return 0x12;
			case 0x116C9:
				return 0x11;
			case 0x11700:
				return 0xF;
			case 0x11701:
				return 0x10;
			case 0x11702:
				return 0x10;
			case 0x11703:
				return 0xF;
			case 0x11704:
				return 0xF;
			case 0x11705:
				return 0x19;
			case 0x11706:
				return 0xF;
			case 0x11707:
				return 0x10;
			case 0x11708:
				return 0xF;
			case 0x11709:
				return 0xF;
			case 0x1170A:
				return 0xF;
			case 0x1170B:
				return 0x10;
			case 0x1170C:
				return 0x10;
			case 0x1170D:
				return 0xF;
			case 0x1170E:
				return 0xF;
			case 0x1170F:
				return 0xF;
			case 0x11710:
				return 0x10;
			case 0x11711:
				return 0xF;
			case 0x11712:
				return 0xE;
			case 0x11713:
				return 0xF;
			case 0x11714:
				return 0x10;
			case 0x11715:
				return 0xF;
			case 0x11716:
				return 0x19;
			case 0x11717:
				return 0x10;
			case 0x11718:
				return 0x10;
			case 0x11719:
				return 0x10;
			case 0x1171A:
				return 0x19;
			case 0x1171D:
				return 0x1E;
			case 0x1171E:
				return 0x1E;
			case 0x1171F:
				return 0x27;
			case 0x11720:
				return 0x12;
			case 0x11721:
				return 0x13;
			case 0x11722:
				return 0x12;
			case 0x11723:
				return 0x13;
			case 0x11724:
				return 0x12;
			case 0x11725:
				return 0x13;
			case 0x11726:
				return 0x12;
			case 0x11727:
				return 0x13;
			case 0x11728:
				return 0x12;
			case 0x11729:
				return 0x13;
			case 0x1172A:
				return 0x13;
			case 0x1172B:
				return 0x11;
			case 0x11730:
				return 0x10;
			case 0x11731:
				return 0xF;
			case 0x11732:
				return 0xF;
			case 0x11733:
				return 0x11;
			case 0x11734:
				return 0x10;
			case 0x11735:
				return 0x10;
			case 0x11736:
				return 0xF;
			case 0x11737:
				return 0x11;
			case 0x11738:
				return 0x11;
			case 0x11739:
				return 0x10;
			case 0x1173A:
				return 0x10;
			case 0x1173B:
				return 0x13;
			case 0x1173C:
				return 0x18;
			case 0x1173D:
				return 0x12;
			case 0x1173E:
				return 0x10;
			case 0x1173F:
				return 0xF;
			case 0x11800:
				return 0xF;
			case 0x11801:
				return 0x10;
			case 0x11802:
				return 0xF;
			case 0x11803:
				return 0x10;
			case 0x11804:
				return 0xF;
			case 0x11805:
				return 0x10;
			case 0x11806:
				return 0xF;
			case 0x11807:
				return 0x10;
			case 0x11808:
				return 0xF;
			case 0x11809:
				return 0x10;
			case 0x1180A:
				return 0x10;
			case 0x1180B:
				return 0x11;
			case 0x1180C:
				return 0x10;
			case 0x1180D:
				return 0x11;
			case 0x1180E:
				return 0x11;
			case 0x1180F:
				return 0x10;
			case 0x11810:
				return 0x11;
			case 0x11811:
				return 0x10;
			case 0x11812:
				return 0x11;
			case 0x11813:
				return 0x11;
			case 0x11814:
				return 0x11;
			case 0x11815:
				return 0x12;
			case 0x11816:
				return 0x11;
			case 0x11817:
				return 0x12;
			case 0x11818:
				return 0x11;
			case 0x11819:
				return 0x10;
			case 0x1181A:
				return 0x11;
			case 0x1181B:
				return 0x10;
			case 0x1181C:
				return 0x11;
			case 0x1181D:
				return 0x10;
			case 0x1181E:
				return 0x10;
			case 0x1181F:
				return 0x11;
			case 0x11820:
				return 0x10;
			case 0x11821:
				return 0x11;
			case 0x11822:
				return 0x10;
			case 0x11823:
				return 0x10;
			case 0x11824:
				return 0x10;
			case 0x11825:
				return 0x10;
			case 0x11826:
				return 0x10;
			case 0x11827:
				return 0x11;
			case 0x11828:
				return 0x11;
			case 0x11829:
				return 0x10;
			case 0x1182A:
				return 0x10;
			case 0x1182B:
				return 0x11;
			case 0x1182C:
				return 0x14;
			case 0x1182D:
				return 0x13;
			case 0x1182E:
				return 0x14;
			case 0x1182F:
				return 0x13;
			case 0x11830:
				return 0x14;
			case 0x11831:
				return 0x1B;
			case 0x11832:
				return 0x1C;
			case 0x11833:
				return 0x13;
			case 0x11834:
				return 0x14;
			case 0x11835:
				return 0x13;
			case 0x11836:
				return 0x14;
			case 0x11837:
				return 0x14;
			case 0x11838:
				return 0x13;
			case 0x11839:
				return 0x12;
			case 0x1183A:
				return 0x11;
			case 0x1183B:
				return 0x18;
			case 0x118A0:
				return 0x20;
			case 0x118A1:
				return 0x1D;
			case 0x118A2:
				return 0x1E;
			case 0x118A3:
				return 0x1E;
			case 0x118A4:
				return 0x1E;
			case 0x118A5:
				return 0x1E;
			case 0x118A6:
				return 0x1E;
			case 0x118A7:
				return 0x1E;
			case 0x118A8:
				return 0x1D;
			case 0x118A9:
				return 0x1D;
			case 0x118AA:
				return 0x1F;
			case 0x118AB:
				return 0x1E;
			case 0x118AC:
				return 0x1E;
			case 0x118AD:
				return 0x1F;
			case 0x118AE:
				return 0x1F;
			case 0x118AF:
				return 0x1E;
			case 0x118B0:
				return 0x1F;
			case 0x118B1:
				return 0x1F;
			case 0x118B2:
				return 0x1F;
			case 0x118B3:
				return 0x20;
			case 0x118B4:
				return 0x1E;
			case 0x118B5:
				return 0x1E;
			case 0x118B6:
				return 0x1E;
			case 0x118B7:
				return 0x1E;
			case 0x118B8:
				return 0x1E;
			case 0x118B9:
				return 0x20;
			case 0x118BA:
				return 0x20;
			case 0x118BB:
				return 0x20;
			case 0x118BC:
				return 0x1F;
			case 0x118BD:
				return 0x20;
			case 0x118BE:
				return 0x1F;
			case 0x118BF:
				return 0x20;
			case 0x118C0:
				return 0x1E;
			case 0x118C1:
				return 0x1B;
			case 0x118C2:
				return 0x1C;
			case 0x118C3:
				return 0x1C;
			case 0x118C4:
				return 0x1C;
			case 0x118C5:
				return 0x1C;
			case 0x118C6:
				return 0x1C;
			case 0x118C7:
				return 0x1C;
			case 0x118C8:
				return 0x1B;
			case 0x118C9:
				return 0x1B;
			case 0x118CA:
				return 0x1D;
			case 0x118CB:
				return 0x1C;
			case 0x118CC:
				return 0x1C;
			case 0x118CD:
				return 0x1D;
			case 0x118CE:
				return 0x1D;
			case 0x118CF:
				return 0x1C;
			case 0x118D0:
				return 0x1D;
			case 0x118D1:
				return 0x1D;
			case 0x118D2:
				return 0x1D;
			case 0x118D3:
				return 0x1E;
			case 0x118D4:
				return 0x1C;
			case 0x118D5:
				return 0x1C;
			case 0x118D6:
				return 0x1C;
			case 0x118D7:
				return 0x1C;
			case 0x118D8:
				return 0x1C;
			case 0x118D9:
				return 0x1E;
			case 0x118DA:
				return 0x1E;
			case 0x118DB:
				return 0x1E;
			case 0x118DC:
				return 0x1D;
			case 0x118DD:
				return 0x1E;
			case 0x118DE:
				return 0x1D;
			case 0x118DF:
				return 0x1E;
			case 0x118E0:
				return 0x17;
			case 0x118E1:
				return 0x16;
			case 0x118E2:
				return 0x16;
			case 0x118E3:
				return 0x18;
			case 0x118E4:
				return 0x17;
			case 0x118E5:
				return 0x17;
			case 0x118E6:
				return 0x16;
			case 0x118E7:
				return 0x18;
			case 0x118E8:
				return 0x18;
			case 0x118E9:
				return 0x17;
			case 0x118EA:
				return 0x17;
			case 0x118EB:
				return 0x1A;
			case 0x118EC:
				return 0x1A;
			case 0x118ED:
				return 0x19;
			case 0x118EE:
				return 0x19;
			case 0x118EF:
				return 0x19;
			case 0x118F0:
				return 0x1B;
			case 0x118F1:
				return 0x1A;
			case 0x118F2:
				return 0x1A;
			case 0x118FF:
				return 0xF;
			case 0x11900:
				return 0x15;
			case 0x11901:
				return 0x16;
			case 0x11902:
				return 0x15;
			case 0x11903:
				return 0x16;
			case 0x11904:
				return 0x15;
			case 0x11905:
				return 0x16;
			case 0x11906:
				return 0x15;
			case 0x11909:
				return 0x15;
			case 0x1190C:
				return 0x16;
			case 0x1190D:
				return 0x17;
			case 0x1190E:
				return 0x16;
			case 0x1190F:
				return 0x17;
			case 0x11910:
				return 0x17;
			case 0x11911:
				return 0x16;
			case 0x11912:
				return 0x17;
			case 0x11913:
				return 0x16;
			case 0x11915:
				return 0x17;
			case 0x11916:
				return 0x17;
			case 0x11918:
				return 0x17;
			case 0x11919:
				return 0x18;
			case 0x1191A:
				return 0x17;
			case 0x1191B:
				return 0x16;
			case 0x1191C:
				return 0x17;
			case 0x1191D:
				return 0x16;
			case 0x1191E:
				return 0x17;
			case 0x1191F:
				return 0x16;
			case 0x11920:
				return 0x16;
			case 0x11921:
				return 0x17;
			case 0x11922:
				return 0x16;
			case 0x11923:
				return 0x17;
			case 0x11924:
				return 0x16;
			case 0x11925:
				return 0x16;
			case 0x11926:
				return 0x17;
			case 0x11927:
				return 0x16;
			case 0x11928:
				return 0x16;
			case 0x11929:
				return 0x16;
			case 0x1192A:
				return 0x17;
			case 0x1192B:
				return 0x17;
			case 0x1192C:
				return 0x16;
			case 0x1192D:
				return 0x16;
			case 0x1192E:
				return 0x17;
			case 0x1192F:
				return 0x16;
			case 0x11930:
				return 0x1A;
			case 0x11931:
				return 0x19;
			case 0x11932:
				return 0x1A;
			case 0x11933:
				return 0x19;
			case 0x11934:
				return 0x1A;
			case 0x11935:
				return 0x19;
			case 0x11937:
				return 0x1A;
			case 0x11938:
				return 0x19;
			case 0x1193B:
				return 0x1A;
			case 0x1193C:
				return 0x1D;
			case 0x1193D:
				return 0x19;
			case 0x1193E:
				return 0x13;
			case 0x1193F:
				return 0x20;
			case 0x11940:
				return 0x16;
			case 0x11941:
				return 0x17;
			case 0x11942:
				return 0x16;
			case 0x11943:
				return 0x17;
			case 0x11944:
				return 0x19;
			case 0x11945:
				return 0x17;
			case 0x11946:
				return 0x1D;
			case 0x11950:
				return 0x17;
			case 0x11951:
				return 0x16;
			case 0x11952:
				return 0x16;
			case 0x11953:
				return 0x18;
			case 0x11954:
				return 0x17;
			case 0x11955:
				return 0x17;
			case 0x11956:
				return 0x16;
			case 0x11957:
				return 0x18;
			case 0x11958:
				return 0x18;
			case 0x11959:
				return 0x17;
			case 0x119A0:
				return 0x15;
			case 0x119A1:
				return 0x16;
			case 0x119A2:
				return 0x15;
			case 0x119A3:
				return 0x16;
			case 0x119A4:
				return 0x15;
			case 0x119A5:
				return 0x16;
			case 0x119A6:
				return 0x1D;
			case 0x119A7:
				return 0x1E;
			case 0x119AA:
				return 0x15;
			case 0x119AB:
				return 0x16;
			case 0x119AC:
				return 0x15;
			case 0x119AD:
				return 0x16;
			case 0x119AE:
				return 0x16;
			case 0x119AF:
				return 0x17;
			case 0x119B0:
				return 0x16;
			case 0x119B1:
				return 0x17;
			case 0x119B2:
				return 0x17;
			case 0x119B3:
				return 0x16;
			case 0x119B4:
				return 0x17;
			case 0x119B5:
				return 0x16;
			case 0x119B6:
				return 0x17;
			case 0x119B7:
				return 0x17;
			case 0x119B8:
				return 0x17;
			case 0x119B9:
				return 0x18;
			case 0x119BA:
				return 0x17;
			case 0x119BB:
				return 0x18;
			case 0x119BC:
				return 0x17;
			case 0x119BD:
				return 0x16;
			case 0x119BE:
				return 0x17;
			case 0x119BF:
				return 0x16;
			case 0x119C0:
				return 0x17;
			case 0x119C1:
				return 0x16;
			case 0x119C2:
				return 0x16;
			case 0x119C3:
				return 0x17;
			case 0x119C4:
				return 0x16;
			case 0x119C5:
				return 0x17;
			case 0x119C6:
				return 0x16;
			case 0x119C7:
				return 0x16;
			case 0x119C8:
				return 0x16;
			case 0x119C9:
				return 0x16;
			case 0x119CA:
				return 0x16;
			case 0x119CB:
				return 0x17;
			case 0x119CC:
				return 0x17;
			case 0x119CD:
				return 0x16;
			case 0x119CE:
				return 0x16;
			case 0x119CF:
				return 0x17;
			case 0x119D0:
				return 0x17;
			case 0x119D1:
				return 0x1A;
			case 0x119D2:
				return 0x19;
			case 0x119D3:
				return 0x1A;
			case 0x119D4:
				return 0x19;
			case 0x119D5:
				return 0x1A;
			case 0x119D6:
				return 0x21;
			case 0x119D7:
				return 0x22;
			case 0x119DA:
				return 0x19;
			case 0x119DB:
				return 0x1A;
			case 0x119DC:
				return 0x19;
			case 0x119DD:
				return 0x1A;
			case 0x119DE:
				return 0x1A;
			case 0x119DF:
				return 0x19;
			case 0x119E0:
				return 0x18;
			case 0x119E1:
				return 0x1A;
			case 0x119E2:
				return 0x19;
			case 0x119E3:
				return 0x17;
			case 0x119E4:
				return 0x27;
			case 0x11A00:
				return 0x1A;
			case 0x11A01:
				return 0x1E;
			case 0x11A02:
				return 0x1F;
			case 0x11A03:
				return 0x1E;
			case 0x11A04:
				return 0x1E;
			case 0x11A05:
				return 0x1F;
			case 0x11A06:
				return 0x1E;
			case 0x11A07:
				return 0x1F;
			case 0x11A08:
				return 0x1F;
			case 0x11A09:
				return 0x27;
			case 0x11A0A:
				return 0x23;
			case 0x11A0B:
				return 0x1B;
			case 0x11A0C:
				return 0x1C;
			case 0x11A0D:
				return 0x1B;
			case 0x11A0E:
				return 0x1C;
			case 0x11A0F:
				return 0x1C;
			case 0x11A10:
				return 0x1B;
			case 0x11A11:
				return 0x1C;
			case 0x11A12:
				return 0x1B;
			case 0x11A13:
				return 0x1C;
			case 0x11A14:
				return 0x1C;
			case 0x11A15:
				return 0x1D;
			case 0x11A16:
				return 0x1C;
			case 0x11A17:
				return 0x1D;
			case 0x11A18:
				return 0x1C;
			case 0x11A19:
				return 0x1B;
			case 0x11A1A:
				return 0x1C;
			case 0x11A1B:
				return 0x1B;
			case 0x11A1C:
				return 0x1C;
			case 0x11A1D:
				return 0x1B;
			case 0x11A1E:
				return 0x1B;
			case 0x11A1F:
				return 0x1C;
			case 0x11A20:
				return 0x1B;
			case 0x11A21:
				return 0x1C;
			case 0x11A22:
				return 0x1B;
			case 0x11A23:
				return 0x1C;
			case 0x11A24:
				return 0x1D;
			case 0x11A25:
				return 0x1C;
			case 0x11A26:
				return 0x1D;
			case 0x11A27:
				return 0x1C;
			case 0x11A28:
				return 0x1B;
			case 0x11A29:
				return 0x1B;
			case 0x11A2A:
				return 0x1B;
			case 0x11A2B:
				return 0x1B;
			case 0x11A2C:
				return 0x1B;
			case 0x11A2D:
				return 0x1B;
			case 0x11A2E:
				return 0x1C;
			case 0x11A2F:
				return 0x1C;
			case 0x11A30:
				return 0x1B;
			case 0x11A31:
				return 0x1B;
			case 0x11A32:
				return 0x1D;
			case 0x11A33:
				return 0x26;
			case 0x11A34:
				return 0x1D;
			case 0x11A35:
				return 0x22;
			case 0x11A36:
				return 0x30;
			case 0x11A37:
				return 0x2B;
			case 0x11A38:
				return 0x1F;
			case 0x11A39:
				return 0x1E;
			case 0x11A3A:
				return 0x2B;
			case 0x11A3B:
				return 0x29;
			case 0x11A3C:
				return 0x29;
			case 0x11A3D:
				return 0x29;
			case 0x11A3E:
				return 0x29;
			case 0x11A3F:
				return 0x23;
			case 0x11A40:
				return 0x23;
			case 0x11A41:
				return 0x1C;
			case 0x11A42:
				return 0x1B;
			case 0x11A43:
				return 0x22;
			case 0x11A44:
				return 0x21;
			case 0x11A45:
				return 0x30;
			case 0x11A46:
				return 0x30;
			case 0x11A47:
				return 0x1B;
			case 0x11A50:
				return 0x11;
			case 0x11A51:
				return 0x15;
			case 0x11A52:
				return 0x16;
			case 0x11A53:
				return 0x15;
			case 0x11A54:
				return 0x15;
			case 0x11A55:
				return 0x15;
			case 0x11A56:
				return 0x16;
			case 0x11A57:
				return 0x16;
			case 0x11A58:
				return 0x16;
			case 0x11A59:
				return 0x1D;
			case 0x11A5A:
				return 0x1D;
			case 0x11A5B:
				return 0x1A;
			case 0x11A5C:
				return 0x12;
			case 0x11A5D:
				return 0x13;
			case 0x11A5E:
				return 0x12;
			case 0x11A5F:
				return 0x13;
			case 0x11A60:
				return 0x13;
			case 0x11A61:
				return 0x12;
			case 0x11A62:
				return 0x13;
			case 0x11A63:
				return 0x12;
			case 0x11A64:
				return 0x13;
			case 0x11A65:
				return 0x13;
			case 0x11A66:
				return 0x13;
			case 0x11A67:
				return 0x14;
			case 0x11A68:
				return 0x13;
			case 0x11A69:
				return 0x14;
			case 0x11A6A:
				return 0x13;
			case 0x11A6B:
				return 0x12;
			case 0x11A6C:
				return 0x13;
			case 0x11A6D:
				return 0x12;
			case 0x11A6E:
				return 0x13;
			case 0x11A6F:
				return 0x12;
			case 0x11A70:
				return 0x12;
			case 0x11A71:
				return 0x13;
			case 0x11A72:
				return 0x12;
			case 0x11A73:
				return 0x13;
			case 0x11A74:
				return 0x12;
			case 0x11A75:
				return 0x13;
			case 0x11A76:
				return 0x14;
			case 0x11A77:
				return 0x13;
			case 0x11A78:
				return 0x13;
			case 0x11A79:
				return 0x12;
			case 0x11A7A:
				return 0x12;
			case 0x11A7B:
				return 0x12;
			case 0x11A7C:
				return 0x12;
			case 0x11A7D:
				return 0x12;
			case 0x11A7E:
				return 0x12;
			case 0x11A7F:
				return 0x13;
			case 0x11A80:
				return 0x13;
			case 0x11A81:
				return 0x12;
			case 0x11A82:
				return 0x12;
			case 0x11A83:
				return 0x14;
			case 0x11A84:
				return 0x19;
			case 0x11A85:
				return 0x19;
			case 0x11A86:
				return 0x22;
			case 0x11A87:
				return 0x22;
			case 0x11A88:
				return 0x23;
			case 0x11A89:
				return 0x22;
			case 0x11A8A:
				return 0x1F;
			case 0x11A8B:
				return 0x1F;
			case 0x11A8C:
				return 0x20;
			case 0x11A8D:
				return 0x1F;
			case 0x11A8E:
				return 0x1F;
			case 0x11A8F:
				return 0x1F;
			case 0x11A90:
				return 0x1F;
			case 0x11A91:
				return 0x1F;
			case 0x11A92:
				return 0x1F;
			case 0x11A93:
				return 0x20;
			case 0x11A94:
				return 0x1F;
			case 0x11A95:
				return 0x20;
			case 0x11A96:
				return 0x16;
			case 0x11A97:
				return 0x15;
			case 0x11A98:
				return 0x18;
			case 0x11A99:
				return 0x12;
			case 0x11A9A:
				return 0x13;
			case 0x11A9B:
				return 0x12;
			case 0x11A9C:
				return 0x19;
			case 0x11A9D:
				return 0x13;
			case 0x11A9E:
				return 0x35;
			case 0x11A9F:
				return 0x2E;
			case 0x11AA0:
				return 0x24;
			case 0x11AA1:
				return 0x18;
			case 0x11AA2:
				return 0x18;
			case 0x11AC0:
				return 0x16;
			case 0x11AC1:
				return 0x16;
			case 0x11AC2:
				return 0x16;
			case 0x11AC3:
				return 0x16;
			case 0x11AC4:
				return 0x16;
			case 0x11AC5:
				return 0x16;
			case 0x11AC6:
				return 0x16;
			case 0x11AC7:
				return 0x17;
			case 0x11AC8:
				return 0x16;
			case 0x11AC9:
				return 0x16;
			case 0x11ACA:
				return 0x17;
			case 0x11ACB:
				return 0x16;
			case 0x11ACC:
				return 0x16;
			case 0x11ACD:
				return 0x16;
			case 0x11ACE:
				return 0x16;
			case 0x11ACF:
				return 0x17;
			case 0x11AD0:
				return 0x16;
			case 0x11AD1:
				return 0x17;
			case 0x11AD2:
				return 0x16;
			case 0x11AD3:
				return 0x16;
			case 0x11AD4:
				return 0x17;
			case 0x11AD5:
				return 0x15;
			case 0x11AD6:
				return 0x15;
			case 0x11AD7:
				return 0x15;
			case 0x11AD8:
				return 0x15;
			case 0x11AD9:
				return 0x15;
			case 0x11ADA:
				return 0x16;
			case 0x11ADB:
				return 0x16;
			case 0x11ADC:
				return 0x1B;
			case 0x11ADD:
				return 0x1B;
			case 0x11ADE:
				return 0x1B;
			case 0x11ADF:
				return 0x1B;
			case 0x11AE0:
				return 0x1B;
			case 0x11AE1:
				return 0x1B;
			case 0x11AE2:
				return 0x1B;
			case 0x11AE3:
				return 0x1C;
			case 0x11AE4:
				return 0x1B;
			case 0x11AE5:
				return 0x1D;
			case 0x11AE6:
				return 0x18;
			case 0x11AE7:
				return 0x20;
			case 0x11AE8:
				return 0x23;
			case 0x11AE9:
				return 0x1E;
			case 0x11AEA:
				return 0x26;
			case 0x11AEB:
				return 0x1D;
			case 0x11AEC:
				return 0x18;
			case 0x11AED:
				return 0x23;
			case 0x11AEE:
				return 0x1E;
			case 0x11AEF:
				return 0x1B;
			case 0x11AF0:
				return 0x21;
			case 0x11AF1:
				return 0x26;
			case 0x11AF2:
				return 0x21;
			case 0x11AF3:
				return 0x22;
			case 0x11AF4:
				return 0x1D;
			case 0x11AF5:
				return 0x19;
			case 0x11AF6:
				return 0x28;
			case 0x11AF7:
				return 0x23;
			case 0x11AF8:
				return 0x1F;
			case 0x11C00:
				return 0x13;
			case 0x11C01:
				return 0x14;
			case 0x11C02:
				return 0x13;
			case 0x11C03:
				return 0x14;
			case 0x11C04:
				return 0x13;
			case 0x11C05:
				return 0x14;
			case 0x11C06:
				return 0x1B;
			case 0x11C07:
				return 0x1C;
			case 0x11C08:
				return 0x1B;
			case 0x11C0A:
				return 0x13;
			case 0x11C0B:
				return 0x14;
			case 0x11C0C:
				return 0x13;
			case 0x11C0D:
				return 0x14;
			case 0x11C0E:
				return 0x14;
			case 0x11C0F:
				return 0x15;
			case 0x11C10:
				return 0x14;
			case 0x11C11:
				return 0x15;
			case 0x11C12:
				return 0x15;
			case 0x11C13:
				return 0x14;
			case 0x11C14:
				return 0x15;
			case 0x11C15:
				return 0x14;
			case 0x11C16:
				return 0x15;
			case 0x11C17:
				return 0x15;
			case 0x11C18:
				return 0x15;
			case 0x11C19:
				return 0x16;
			case 0x11C1A:
				return 0x15;
			case 0x11C1B:
				return 0x16;
			case 0x11C1C:
				return 0x15;
			case 0x11C1D:
				return 0x14;
			case 0x11C1E:
				return 0x15;
			case 0x11C1F:
				return 0x14;
			case 0x11C20:
				return 0x15;
			case 0x11C21:
				return 0x14;
			case 0x11C22:
				return 0x14;
			case 0x11C23:
				return 0x15;
			case 0x11C24:
				return 0x14;
			case 0x11C25:
				return 0x15;
			case 0x11C26:
				return 0x14;
			case 0x11C27:
				return 0x14;
			case 0x11C28:
				return 0x14;
			case 0x11C29:
				return 0x14;
			case 0x11C2A:
				return 0x14;
			case 0x11C2B:
				return 0x15;
			case 0x11C2C:
				return 0x15;
			case 0x11C2D:
				return 0x14;
			case 0x11C2E:
				return 0x14;
			case 0x11C2F:
				return 0x18;
			case 0x11C30:
				return 0x17;
			case 0x11C31:
				return 0x18;
			case 0x11C32:
				return 0x17;
			case 0x11C33:
				return 0x18;
			case 0x11C34:
				return 0x1F;
			case 0x11C35:
				return 0x20;
			case 0x11C36:
				return 0x1F;
			case 0x11C38:
				return 0x17;
			case 0x11C39:
				return 0x18;
			case 0x11C3A:
				return 0x17;
			case 0x11C3B:
				return 0x18;
			case 0x11C3C:
				return 0x1B;
			case 0x11C3D:
				return 0x18;
			case 0x11C3E:
				return 0x17;
			case 0x11C3F:
				return 0x16;
			case 0x11C40:
				return 0x18;
			case 0x11C41:
				return 0x10;
			case 0x11C42:
				return 0x17;
			case 0x11C43:
				return 0x19;
			case 0x11C44:
				return 0x17;
			case 0x11C45:
				return 0x17;
			case 0x11C50:
				return 0x15;
			case 0x11C51:
				return 0x14;
			case 0x11C52:
				return 0x14;
			case 0x11C53:
				return 0x16;
			case 0x11C54:
				return 0x15;
			case 0x11C55:
				return 0x15;
			case 0x11C56:
				return 0x14;
			case 0x11C57:
				return 0x16;
			case 0x11C58:
				return 0x16;
			case 0x11C59:
				return 0x15;
			case 0x11C5A:
				return 0x15;
			case 0x11C5B:
				return 0x15;
			case 0x11C5C:
				return 0x17;
			case 0x11C5D:
				return 0x16;
			case 0x11C5E:
				return 0x16;
			case 0x11C5F:
				return 0x15;
			case 0x11C60:
				return 0x17;
			case 0x11C61:
				return 0x17;
			case 0x11C62:
				return 0x16;
			case 0x11C63:
				return 0x15;
			case 0x11C64:
				return 0x18;
			case 0x11C65:
				return 0x18;
			case 0x11C66:
				return 0x17;
			case 0x11C67:
				return 0x17;
			case 0x11C68:
				return 0x17;
			case 0x11C69:
				return 0x19;
			case 0x11C6A:
				return 0x18;
			case 0x11C6B:
				return 0x18;
			case 0x11C6C:
				return 0x1D;
			case 0x11C70:
				return 0x12;
			case 0x11C71:
				return 0x12;
			case 0x11C72:
				return 0x12;
			case 0x11C73:
				return 0x13;
			case 0x11C74:
				return 0x12;
			case 0x11C75:
				return 0x13;
			case 0x11C76:
				return 0x12;
			case 0x11C77:
				return 0x13;
			case 0x11C78:
				return 0x12;
			case 0x11C79:
				return 0x13;
			case 0x11C7A:
				return 0x12;
			case 0x11C7B:
				return 0x13;
			case 0x11C7C:
				return 0x12;
			case 0x11C7D:
				return 0x12;
			case 0x11C7E:
				return 0x12;
			case 0x11C7F:
				return 0x13;
			case 0x11C80:
				return 0x12;
			case 0x11C81:
				return 0x12;
			case 0x11C82:
				return 0x13;
			case 0x11C83:
				return 0x14;
			case 0x11C84:
				return 0x13;
			case 0x11C85:
				return 0x12;
			case 0x11C86:
				return 0x13;
			case 0x11C87:
				return 0x12;
			case 0x11C88:
				return 0x12;
			case 0x11C89:
				return 0x12;
			case 0x11C8A:
				return 0x12;
			case 0x11C8B:
				return 0x12;
			case 0x11C8C:
				return 0x13;
			case 0x11C8D:
				return 0x12;
			case 0x11C8E:
				return 0x12;
			case 0x11C8F:
				return 0x11;
			case 0x11C92:
				return 0x1C;
			case 0x11C93:
				return 0x1D;
			case 0x11C94:
				return 0x1C;
			case 0x11C95:
				return 0x1D;
			case 0x11C96:
				return 0x1C;
			case 0x11C97:
				return 0x1D;
			case 0x11C98:
				return 0x1C;
			case 0x11C99:
				return 0x1D;
			case 0x11C9A:
				return 0x1C;
			case 0x11C9B:
				return 0x1D;
			case 0x11C9C:
				return 0x1C;
			case 0x11C9D:
				return 0x1C;
			case 0x11C9E:
				return 0x1C;
			case 0x11C9F:
				return 0x1D;
			case 0x11CA0:
				return 0x1C;
			case 0x11CA1:
				return 0x1C;
			case 0x11CA2:
				return 0x1D;
			case 0x11CA3:
				return 0x1E;
			case 0x11CA4:
				return 0x1D;
			case 0x11CA5:
				return 0x1C;
			case 0x11CA6:
				return 0x1D;
			case 0x11CA7:
				return 0x1C;
			case 0x11CA9:
				return 0x1C;
			case 0x11CAA:
				return 0x1C;
			case 0x11CAB:
				return 0x1C;
			case 0x11CAC:
				return 0x1D;
			case 0x11CAD:
				return 0x1C;
			case 0x11CAE:
				return 0x1C;
			case 0x11CAF:
				return 0x1B;
			case 0x11CB0:
				return 0x16;
			case 0x11CB1:
				return 0x15;
			case 0x11CB2:
				return 0x15;
			case 0x11CB3:
				return 0x15;
			case 0x11CB4:
				return 0x15;
			case 0x11CB5:
				return 0x16;
			case 0x11CB6:
				return 0x19;
			case 0x11D00:
				return 0x17;
			case 0x11D01:
				return 0x18;
			case 0x11D02:
				return 0x17;
			case 0x11D03:
				return 0x18;
			case 0x11D04:
				return 0x17;
			case 0x11D05:
				return 0x18;
			case 0x11D06:
				return 0x17;
			case 0x11D08:
				return 0x18;
			case 0x11D09:
				return 0x17;
			case 0x11D0B:
				return 0x18;
			case 0x11D0C:
				return 0x18;
			case 0x11D0D:
				return 0x19;
			case 0x11D0E:
				return 0x18;
			case 0x11D0F:
				return 0x19;
			case 0x11D10:
				return 0x19;
			case 0x11D11:
				return 0x18;
			case 0x11D12:
				return 0x19;
			case 0x11D13:
				return 0x18;
			case 0x11D14:
				return 0x19;
			case 0x11D15:
				return 0x19;
			case 0x11D16:
				return 0x19;
			case 0x11D17:
				return 0x1A;
			case 0x11D18:
				return 0x19;
			case 0x11D19:
				return 0x1A;
			case 0x11D1A:
				return 0x19;
			case 0x11D1B:
				return 0x18;
			case 0x11D1C:
				return 0x19;
			case 0x11D1D:
				return 0x18;
			case 0x11D1E:
				return 0x19;
			case 0x11D1F:
				return 0x18;
			case 0x11D20:
				return 0x18;
			case 0x11D21:
				return 0x19;
			case 0x11D22:
				return 0x18;
			case 0x11D23:
				return 0x19;
			case 0x11D24:
				return 0x18;
			case 0x11D25:
				return 0x18;
			case 0x11D26:
				return 0x18;
			case 0x11D27:
				return 0x18;
			case 0x11D28:
				return 0x18;
			case 0x11D29:
				return 0x19;
			case 0x11D2A:
				return 0x19;
			case 0x11D2B:
				return 0x18;
			case 0x11D2C:
				return 0x18;
			case 0x11D2D:
				return 0x19;
			case 0x11D2E:
				return 0x1A;
			case 0x11D2F:
				return 0x1A;
			case 0x11D30:
				return 0x19;
			case 0x11D31:
				return 0x1C;
			case 0x11D32:
				return 0x1B;
			case 0x11D33:
				return 0x1C;
			case 0x11D34:
				return 0x1B;
			case 0x11D35:
				return 0x1C;
			case 0x11D36:
				return 0x23;
			case 0x11D3A:
				return 0x1B;
			case 0x11D3C:
				return 0x1C;
			case 0x11D3D:
				return 0x1B;
			case 0x11D3F:
				return 0x1C;
			case 0x11D40:
				return 0x1C;
			case 0x11D41:
				return 0x1B;
			case 0x11D42:
				return 0x19;
			case 0x11D43:
				return 0x1A;
			case 0x11D44:
				return 0x1B;
			case 0x11D45:
				return 0x15;
			case 0x11D46:
				return 0x14;
			case 0x11D47:
				return 0x16;
			case 0x11D50:
				return 0x19;
			case 0x11D51:
				return 0x18;
			case 0x11D52:
				return 0x18;
			case 0x11D53:
				return 0x1A;
			case 0x11D54:
				return 0x19;
			case 0x11D55:
				return 0x19;
			case 0x11D56:
				return 0x18;
			case 0x11D57:
				return 0x1A;
			case 0x11D58:
				return 0x1A;
			case 0x11D59:
				return 0x19;
			case 0x11D60:
				return 0x17;
			case 0x11D61:
				return 0x18;
			case 0x11D62:
				return 0x17;
			case 0x11D63:
				return 0x18;
			case 0x11D64:
				return 0x17;
			case 0x11D65:
				return 0x18;
			case 0x11D67:
				return 0x18;
			case 0x11D68:
				return 0x18;
			case 0x11D6A:
				return 0x18;
			case 0x11D6B:
				return 0x18;
			case 0x11D6C:
				return 0x18;
			case 0x11D6D:
				return 0x18;
			case 0x11D6E:
				return 0x18;
			case 0x11D6F:
				return 0x19;
			case 0x11D70:
				return 0x18;
			case 0x11D71:
				return 0x18;
			case 0x11D72:
				return 0x19;
			case 0x11D73:
				return 0x18;
			case 0x11D74:
				return 0x19;
			case 0x11D75:
				return 0x18;
			case 0x11D76:
				return 0x18;
			case 0x11D77:
				return 0x19;
			case 0x11D78:
				return 0x18;
			case 0x11D79:
				return 0x19;
			case 0x11D7A:
				return 0x18;
			case 0x11D7B:
				return 0x18;
			case 0x11D7C:
				return 0x19;
			case 0x11D7D:
				return 0x19;
			case 0x11D7E:
				return 0x1A;
			case 0x11D7F:
				return 0x19;
			case 0x11D80:
				return 0x18;
			case 0x11D81:
				return 0x19;
			case 0x11D82:
				return 0x19;
			case 0x11D83:
				return 0x1A;
			case 0x11D84:
				return 0x19;
			case 0x11D85:
				return 0x18;
			case 0x11D86:
				return 0x19;
			case 0x11D87:
				return 0x18;
			case 0x11D88:
				return 0x18;
			case 0x11D89:
				return 0x18;
			case 0x11D8A:
				return 0x1C;
			case 0x11D8B:
				return 0x1B;
			case 0x11D8C:
				return 0x1C;
			case 0x11D8D:
				return 0x1B;
			case 0x11D8E:
				return 0x1C;
			case 0x11D90:
				return 0x1C;
			case 0x11D91:
				return 0x1C;
			case 0x11D93:
				return 0x1C;
			case 0x11D94:
				return 0x1C;
			case 0x11D95:
				return 0x1C;
			case 0x11D96:
				return 0x1B;
			case 0x11D97:
				return 0x15;
			case 0x11D98:
				return 0x11;
			case 0x11DA0:
				return 0x19;
			case 0x11DA1:
				return 0x18;
			case 0x11DA2:
				return 0x18;
			case 0x11DA3:
				return 0x1A;
			case 0x11DA4:
				return 0x19;
			case 0x11DA5:
				return 0x19;
			case 0x11DA6:
				return 0x18;
			case 0x11DA7:
				return 0x1A;
			case 0x11DA8:
				return 0x1A;
			case 0x11DA9:
				return 0x19;
			case 0x11EE0:
				return 0x12;
			case 0x11EE1:
				return 0x12;
			case 0x11EE2:
				return 0x13;
			case 0x11EE3:
				return 0x12;
			case 0x11EE4:
				return 0x12;
			case 0x11EE5:
				return 0x12;
			case 0x11EE6:
				return 0x12;
			case 0x11EE7:
				return 0x12;
			case 0x11EE8:
				return 0x12;
			case 0x11EE9:
				return 0x12;
			case 0x11EEA:
				return 0x12;
			case 0x11EEB:
				return 0x13;
			case 0x11EEC:
				return 0x12;
			case 0x11EED:
				return 0x12;
			case 0x11EEE:
				return 0x12;
			case 0x11EEF:
				return 0x12;
			case 0x11EF0:
				return 0x12;
			case 0x11EF1:
				return 0x11;
			case 0x11EF2:
				return 0xE;
			case 0x11EF3:
				return 0x15;
			case 0x11EF4:
				return 0x15;
			case 0x11EF5:
				return 0x15;
			case 0x11EF6:
				return 0x15;
			case 0x11EF7:
				return 0x13;
			case 0x11EF8:
				return 0x17;
			case 0x11FB0:
				return 0x10;
			case 0x11FC0:
				return 0x2F;
			case 0x11FC1:
				return 0x2C;
			case 0x11FC2:
				return 0x1D;
			case 0x11FC3:
				return 0x20;
			case 0x11FC4:
				return 0x1C;
			case 0x11FC5:
				return 0x21;
			case 0x11FC6:
				return 0x20;
			case 0x11FC7:
				return 0x23;
			case 0x11FC8:
				return 0x1D;
			case 0x11FC9:
				return 0x1F;
			case 0x11FCA:
				return 0x1F;
			case 0x11FCB:
				return 0x19;
			case 0x11FCC:
				return 0x1A;
			case 0x11FCD:
				return 0x20;
			case 0x11FCE:
				return 0x20;
			case 0x11FCF:
				return 0x19;
			case 0x11FD0:
				return 0x1B;
			case 0x11FD1:
				return 0x1A;
			case 0x11FD2:
				return 0x1A;
			case 0x11FD3:
				return 0x1E;
			case 0x11FD4:
				return 0x28;
			case 0x11FD5:
				return 0xF;
			case 0x11FD6:
				return 0x12;
			case 0x11FD7:
				return 0x15;
			case 0x11FD8:
				return 0x13;
			case 0x11FD9:
				return 0x17;
			case 0x11FDA:
				return 0x12;
			case 0x11FDB:
				return 0x14;
			case 0x11FDC:
				return 0x15;
			case 0x11FDD:
				return 0x11;
			case 0x11FDE:
				return 0x11;
			case 0x11FDF:
				return 0xF;
			case 0x11FE0:
				return 0x14;
			case 0x11FE1:
				return 0x12;
			case 0x11FE2:
				return 0x11;
			case 0x11FE3:
				return 0x10;
			case 0x11FE4:
				return 0x1B;
			case 0x11FE5:
				return 0x1B;
			case 0x11FE6:
				return 0x10;
			case 0x11FE7:
				return 0x14;
			case 0x11FE8:
				return 0x1E;
			case 0x11FE9:
				return 0x1E;
			case 0x11FEA:
				return 0x13;
			case 0x11FEB:
				return 0x13;
			case 0x11FEC:
				return 0x11;
			case 0x11FED:
				return 0x11;
			case 0x11FEE:
				return 0x19;
			case 0x11FEF:
				return 0x19;
			case 0x11FF0:
				return 0x15;
			case 0x11FF1:
				return 0x16;
			case 0x11FFF:
				return 0x1E;
			case 0x12000:
				return 0x11;
			case 0x12001:
				return 0x19;
			case 0x12002:
				return 0x1B;
			case 0x12003:
				return 0x21;
			case 0x12004:
				return 0x1A;
			case 0x12005:
				return 0x1B;
			case 0x12006:
				return 0x22;
			case 0x12007:
				return 0x1C;
			case 0x12008:
				return 0x1B;
			case 0x12009:
				return 0x12;
			case 0x1200A:
				return 0x12;
			case 0x1200B:
				return 0x1D;
			case 0x1200C:
				return 0x22;
			case 0x1200D:
				return 0x1C;
			case 0x1200E:
				return 0x22;
			case 0x1200F:
				return 0x1B;
			case 0x12010:
				return 0x21;
			case 0x12011:
				return 0x1D;
			case 0x12012:
				return 0x1E;
			case 0x12013:
				return 0x1E;
			case 0x12014:
				return 0x28;
			case 0x12015:
				return 0x17;
			case 0x12016:
				return 0x13;
			case 0x12017:
				return 0x1F;
			case 0x12018:
				return 0x23;
			case 0x12019:
				return 0x24;
			case 0x1201A:
				return 0x1E;
			case 0x1201B:
				return 0x1E;
			case 0x1201C:
				return 0x12;
			case 0x1201D:
				return 0x12;
			case 0x1201E:
				return 0x1E;
			case 0x1201F:
				return 0x28;
			case 0x12020:
				return 0x12;
			case 0x12021:
				return 0x1B;
			case 0x12022:
				return 0x1D;
			case 0x12023:
				return 0x1D;
			case 0x12024:
				return 0x1B;
			case 0x12025:
				return 0x1D;
			case 0x12026:
				return 0x1B;
			case 0x12027:
				return 0x1C;
			case 0x12028:
				return 0x1C;
			case 0x12029:
				return 0x14;
			case 0x1202A:
				return 0x15;
			case 0x1202B:
				return 0x14;
			case 0x1202C:
				return 0x1E;
			case 0x1202D:
				return 0x12;
			case 0x1202E:
				return 0x1A;
			case 0x1202F:
				return 0x1E;
			case 0x12030:
				return 0x32;
			case 0x12031:
				return 0x24;
			case 0x12032:
				return 0x15;
			case 0x12033:
				return 0x14;
			case 0x12034:
				return 0x14;
			case 0x12035:
				return 0x1E;
			case 0x12036:
				return 0x15;
			case 0x12037:
				return 0x15;
			case 0x12038:
				return 0x13;
			case 0x12039:
				return 0x1D;
			case 0x1203A:
				return 0x1D;
			case 0x1203B:
				return 0x3E;
			case 0x1203C:
				return 0x25;
			case 0x1203D:
				return 0x44;
			case 0x1203E:
				return 0x14;
			case 0x1203F:
				return 0x16;
			case 0x12040:
				return 0x12;
			case 0x12041:
				return 0x13;
			case 0x12042:
				return 0x14;
			case 0x12043:
				return 0x16;
			case 0x12044:
				return 0x13;
			case 0x12045:
				return 0x1C;
			case 0x12046:
				return 0x15;
			case 0x12047:
				return 0x13;
			case 0x12048:
				return 0x15;
			case 0x12049:
				return 0x12;
			case 0x1204A:
				return 0x1A;
			case 0x1204B:
				return 0x1C;
			case 0x1204C:
				return 0x21;
			case 0x1204D:
				return 0x12;
			case 0x1204E:
				return 0x1D;
			case 0x1204F:
				return 0x1D;
			case 0x12050:
				return 0x1E;
			case 0x12051:
				return 0x15;
			case 0x12052:
				return 0x20;
			case 0x12053:
				return 0x13;
			case 0x12054:
				return 0x14;
			case 0x12055:
				return 0x12;
			case 0x12056:
				return 0x13;
			case 0x12057:
				return 0x2C;
			case 0x12058:
				return 0x25;
			case 0x12059:
				return 0x26;
			case 0x1205A:
				return 0x23;
			case 0x1205B:
				return 0x23;
			case 0x1205C:
				return 0x2D;
			case 0x1205D:
				return 0x23;
			case 0x1205E:
				return 0x25;
			case 0x1205F:
				return 0x24;
			case 0x12060:
				return 0x23;
			case 0x12061:
				return 0x23;
			case 0x12062:
				return 0x2B;
			case 0x12063:
				return 0x24;
			case 0x12064:
				return 0x23;
			case 0x12065:
				return 0x23;
			case 0x12066:
				return 0x2E;
			case 0x12067:
				return 0x24;
			case 0x12068:
				return 0x23;
			case 0x12069:
				return 0x2D;
			case 0x1206A:
				return 0x23;
			case 0x1206B:
				return 0x25;
			case 0x1206C:
				return 0x2D;
			case 0x1206D:
				return 0x24;
			case 0x1206E:
				return 0x13;
			case 0x1206F:
				return 0x13;
			case 0x12070:
				return 0x15;
			case 0x12071:
				return 0x15;
			case 0x12072:
				return 0x12;
			case 0x12073:
				return 0x13;
			case 0x12074:
				return 0x13;
			case 0x12075:
				return 0x1D;
			case 0x12076:
				return 0x14;
			case 0x12077:
				return 0x13;
			case 0x12078:
				return 0x26;
			case 0x12079:
				return 0x14;
			case 0x1207A:
				return 0x12;
			case 0x1207B:
				return 0x1A;
			case 0x1207C:
				return 0x17;
			case 0x1207D:
				return 0x1A;
			case 0x1207E:
				return 0x13;
			case 0x1207F:
				return 0x1E;
			case 0x12080:
				return 0x14;
			case 0x12081:
				return 0x13;
			case 0x12082:
				return 0x15;
			case 0x12083:
				return 0x13;
			case 0x12084:
				return 0x13;
			case 0x12085:
				return 0x14;
			case 0x12086:
				return 0x19;
			case 0x12087:
				return 0x1E;
			case 0x12088:
				return 0x14;
			case 0x12089:
				return 0x14;
			case 0x1208A:
				return 0x11;
			case 0x1208B:
				return 0x1B;
			case 0x1208C:
				return 0x25;
			case 0x1208D:
				return 0x12;
			case 0x1208E:
				return 0x2A;
			case 0x1208F:
				return 0x1C;
			case 0x12090:
				return 0x1B;
			case 0x12091:
				return 0x1C;
			case 0x12092:
				return 0x1C;
			case 0x12093:
				return 0x1A;
			case 0x12094:
				return 0x14;
			case 0x12095:
				return 0x14;
			case 0x12096:
				return 0x12;
			case 0x12097:
				return 0x12;
			case 0x12098:
				return 0x1D;
			case 0x12099:
				return 0x22;
			case 0x1209A:
				return 0x1B;
			case 0x1209B:
				return 0x1E;
			case 0x1209C:
				return 0x1E;
			case 0x1209D:
				return 0x1A;
			case 0x1209E:
				return 0x14;
			case 0x1209F:
				return 0x15;
			case 0x120A0:
				return 0x14;
			case 0x120A1:
				return 0x14;
			case 0x120A2:
				return 0x1C;
			case 0x120A3:
				return 0x25;
			case 0x120A4:
				return 0x2F;
			case 0x120A5:
				return 0x1D;
			case 0x120A6:
				return 0x1E;
			case 0x120A7:
				return 0x24;
			case 0x120A8:
				return 0x29;
			case 0x120A9:
				return 0x1D;
			case 0x120AA:
				return 0x22;
			case 0x120AB:
				return 0x23;
			case 0x120AC:
				return 0x21;
			case 0x120AD:
				return 0x29;
			case 0x120AE:
				return 0x1E;
			case 0x120AF:
				return 0x1D;
			case 0x120B0:
				return 0x28;
			case 0x120B1:
				return 0x1D;
			case 0x120B2:
				return 0x1D;
			case 0x120B3:
				return 0x1D;
			case 0x120B4:
				return 0x1D;
			case 0x120B5:
				return 0x12;
			case 0x120B6:
				return 0x17;
			case 0x120B7:
				return 0x13;
			case 0x120B8:
				return 0x2B;
			case 0x120B9:
				return 0x23;
			case 0x120BA:
				return 0x24;
			case 0x120BB:
				return 0x2B;
			case 0x120BC:
				return 0x1C;
			case 0x120BD:
				return 0x1D;
			case 0x120BE:
				return 0x27;
			case 0x120BF:
				return 0x1D;
			case 0x120C0:
				return 0x25;
			case 0x120C1:
				return 0x1D;
			case 0x120C2:
				return 0x25;
			case 0x120C3:
				return 0x1C;
			case 0x120C4:
				return 0x1C;
			case 0x120C5:
				return 0x27;
			case 0x120C6:
				return 0x1D;
			case 0x120C7:
				return 0x1C;
			case 0x120C8:
				return 0x24;
			case 0x120C9:
				return 0x1C;
			case 0x120CA:
				return 0x2C;
			case 0x120CB:
				return 0x23;
			case 0x120CC:
				return 0x1D;
			case 0x120CD:
				return 0x1C;
			case 0x120CE:
				return 0x1D;
			case 0x120CF:
				return 0x24;
			case 0x120D0:
				return 0x26;
			case 0x120D1:
				return 0x2E;
			case 0x120D2:
				return 0x1D;
			case 0x120D3:
				return 0x25;
			case 0x120D4:
				return 0x24;
			case 0x120D5:
				return 0x1E;
			case 0x120D6:
				return 0x22;
			case 0x120D7:
				return 0x2E;
			case 0x120D8:
				return 0x1D;
			case 0x120D9:
				return 0x20;
			case 0x120DA:
				return 0x1D;
			case 0x120DB:
				return 0x26;
			case 0x120DC:
				return 0x25;
			case 0x120DD:
				return 0x1C;
			case 0x120DE:
				return 0x24;
			case 0x120DF:
				return 0x1C;
			case 0x120E0:
				return 0x1D;
			case 0x120E1:
				return 0x26;
			case 0x120E2:
				return 0x1C;
			case 0x120E3:
				return 0x1D;
			case 0x120E4:
				return 0x1D;
			case 0x120E5:
				return 0x1D;
			case 0x120E6:
				return 0x26;
			case 0x120E7:
				return 0x1E;
			case 0x120E8:
				return 0x1D;
			case 0x120E9:
				return 0x1E;
			case 0x120EA:
				return 0x1B;
			case 0x120EB:
				return 0x1C;
			case 0x120EC:
				return 0x24;
			case 0x120ED:
				return 0x1C;
			case 0x120EE:
				return 0x14;
			case 0x120EF:
				return 0x22;
			case 0x120F0:
				return 0x13;
			case 0x120F1:
				return 0x29;
			case 0x120F2:
				return 0x13;
			case 0x120F3:
				return 0x2D;
			case 0x120F4:
				return 0x15;
			case 0x120F5:
				return 0x13;
			case 0x120F6:
				return 0x13;
			case 0x120F7:
				return 0x14;
			case 0x120F8:
				return 0x19;
			case 0x120F9:
				return 0x1E;
			case 0x120FA:
				return 0x22;
			case 0x120FB:
				return 0x13;
			case 0x120FC:
				return 0x14;
			case 0x120FD:
				return 0x16;
			case 0x120FE:
				return 0x17;
			case 0x120FF:
				return 0x21;
			case 0x12100:
				return 0x12;
			case 0x12101:
				return 0x1A;
			case 0x12102:
				return 0x1A;
			case 0x12103:
				return 0x1E;
			case 0x12104:
				return 0x13;
			case 0x12105:
				return 0x1C;
			case 0x12106:
				return 0x20;
			case 0x12107:
				return 0x15;
			case 0x12108:
				return 0x14;
			case 0x12109:
				return 0x19;
			case 0x1210A:
				return 0x14;
			case 0x1210B:
				return 0x25;
			case 0x1210C:
				return 0x24;
			case 0x1210D:
				return 0x1E;
			case 0x1210E:
				return 0x26;
			case 0x1210F:
				return 0x1D;
			case 0x12110:
				return 0x15;
			case 0x12111:
				return 0x14;
			case 0x12112:
				return 0x22;
			case 0x12113:
				return 0x1E;
			case 0x12114:
				return 0x1F;
			case 0x12115:
				return 0x19;
			case 0x12116:
				return 0x12;
			case 0x12117:
				return 0x1E;
			case 0x12118:
				return 0x13;
			case 0x12119:
				return 0x1D;
			case 0x1211A:
				return 0x2C;
			case 0x1211B:
				return 0x1D;
			case 0x1211C:
				return 0x27;
			case 0x1211D:
				return 0x18;
			case 0x1211E:
				return 0x13;
			case 0x1211F:
				return 0x24;
			case 0x12120:
				return 0x1D;
			case 0x12121:
				return 0x22;
			case 0x12122:
				return 0x13;
			case 0x12123:
				return 0x13;
			case 0x12124:
				return 0x1D;
			case 0x12125:
				return 0x13;
			case 0x12126:
				return 0x14;
			case 0x12127:
				return 0x15;
			case 0x12128:
				return 0x16;
			case 0x12129:
				return 0x12;
			case 0x1212A:
				return 0x17;
			case 0x1212B:
				return 0x17;
			case 0x1212C:
				return 0x13;
			case 0x1212D:
				return 0x12;
			case 0x1212E:
				return 0x1C;
			case 0x1212F:
				return 0x1D;
			case 0x12130:
				return 0x1C;
			case 0x12131:
				return 0x1D;
			case 0x12132:
				return 0x1C;
			case 0x12133:
				return 0x1C;
			case 0x12134:
				return 0x1C;
			case 0x12135:
				return 0x1C;
			case 0x12136:
				return 0x1A;
			case 0x12137:
				return 0x12;
			case 0x12138:
				return 0x14;
			case 0x12139:
				return 0x1D;
			case 0x1213A:
				return 0x1E;
			case 0x1213B:
				return 0x21;
			case 0x1213C:
				return 0x1F;
			case 0x1213D:
				return 0x1D;
			case 0x1213E:
				return 0x14;
			case 0x1213F:
				return 0x11;
			case 0x12140:
				return 0x13;
			case 0x12141:
				return 0x12;
			case 0x12142:
				return 0x14;
			case 0x12143:
				return 0x22;
			case 0x12144:
				return 0x26;
			case 0x12145:
				return 0x12;
			case 0x12146:
				return 0x13;
			case 0x12147:
				return 0x17;
			case 0x12148:
				return 0x16;
			case 0x12149:
				return 0x36;
			case 0x1214A:
				return 0x18;
			case 0x1214B:
				return 0x12;
			case 0x1214C:
				return 0x22;
			case 0x1214D:
				return 0x13;
			case 0x1214E:
				return 0x12;
			case 0x1214F:
				return 0x1D;
			case 0x12150:
				return 0x1E;
			case 0x12151:
				return 0x1E;
			case 0x12152:
				return 0x1A;
			case 0x12153:
				return 0x14;
			case 0x12154:
				return 0x12;
			case 0x12155:
				return 0x12;
			case 0x12156:
				return 0x13;
			case 0x12157:
				return 0x12;
			case 0x12158:
				return 0x1A;
			case 0x12159:
				return 0x1B;
			case 0x1215A:
				return 0x24;
			case 0x1215B:
				return 0x1D;
			case 0x1215C:
				return 0x1C;
			case 0x1215D:
				return 0x1E;
			case 0x1215E:
				return 0x1C;
			case 0x1215F:
				return 0x1B;
			case 0x12160:
				return 0x1E;
			case 0x12161:
				return 0x1D;
			case 0x12162:
				return 0x1B;
			case 0x12163:
				return 0x1C;
			case 0x12164:
				return 0x22;
			case 0x12165:
				return 0x1C;
			case 0x12166:
				return 0x2D;
			case 0x12167:
				return 0x1B;
			case 0x12168:
				return 0x1D;
			case 0x12169:
				return 0x26;
			case 0x1216A:
				return 0x2B;
			case 0x1216B:
				return 0x1B;
			case 0x1216C:
				return 0x1D;
			case 0x1216D:
				return 0x1C;
			case 0x1216E:
				return 0x1B;
			case 0x1216F:
				return 0x1C;
			case 0x12170:
				return 0x1B;
			case 0x12171:
				return 0x1C;
			case 0x12172:
				return 0x1B;
			case 0x12173:
				return 0x1B;
			case 0x12174:
				return 0x1B;
			case 0x12175:
				return 0x23;
			case 0x12176:
				return 0x23;
			case 0x12177:
				return 0x23;
			case 0x12178:
				return 0x1B;
			case 0x12179:
				return 0x26;
			case 0x1217A:
				return 0x1B;
			case 0x1217B:
				return 0x1C;
			case 0x1217C:
				return 0x1B;
			case 0x1217D:
				return 0x1B;
			case 0x1217E:
				return 0x1B;
			case 0x1217F:
				return 0x1C;
			case 0x12180:
				return 0x1C;
			case 0x12181:
				return 0x1C;
			case 0x12182:
				return 0x1D;
			case 0x12183:
				return 0x1C;
			case 0x12184:
				return 0x1C;
			case 0x12185:
				return 0x1E;
			case 0x12186:
				return 0x1C;
			case 0x12187:
				return 0x1A;
			case 0x12188:
				return 0x1B;
			case 0x12189:
				return 0x1B;
			case 0x1218A:
				return 0x26;
			case 0x1218B:
				return 0x1C;
			case 0x1218C:
				return 0x1B;
			case 0x1218D:
				return 0x13;
			case 0x1218E:
				return 0x20;
			case 0x1218F:
				return 0x13;
			case 0x12190:
				return 0x14;
			case 0x12191:
				return 0x14;
			case 0x12192:
				return 0x14;
			case 0x12193:
				return 0x14;
			case 0x12194:
				return 0x1E;
			case 0x12195:
				return 0x13;
			case 0x12196:
				return 0x22;
			case 0x12197:
				return 0x13;
			case 0x12198:
				return 0x1D;
			case 0x12199:
				return 0x20;
			case 0x1219A:
				return 0x14;
			case 0x1219B:
				return 0x14;
			case 0x1219C:
				return 0x16;
			case 0x1219D:
				return 0x37;
			case 0x1219E:
				return 0x43;
			case 0x1219F:
				return 0x15;
			case 0x121A0:
				return 0x12;
			case 0x121A1:
				return 0x1C;
			case 0x121A2:
				return 0x1A;
			case 0x121A3:
				return 0x1B;
			case 0x121A4:
				return 0x13;
			case 0x121A5:
				return 0x13;
			case 0x121A6:
				return 0x15;
			case 0x121A7:
				return 0x14;
			case 0x121A8:
				return 0x16;
			case 0x121A9:
				return 0x22;
			case 0x121AA:
				return 0x12;
			case 0x121AB:
				return 0x3B;
			case 0x121AC:
				return 0x13;
			case 0x121AD:
				return 0x13;
			case 0x121AE:
				return 0x20;
			case 0x121AF:
				return 0x13;
			case 0x121B0:
				return 0x13;
			case 0x121B1:
				return 0x18;
			case 0x121B2:
				return 0x13;
			case 0x121B3:
				return 0x13;
			case 0x121B4:
				return 0x20;
			case 0x121B5:
				return 0x16;
			case 0x121B6:
				return 0x16;
			case 0x121B7:
				return 0x12;
			case 0x121B8:
				return 0x15;
			case 0x121B9:
				return 0x1D;
			case 0x121BA:
				return 0x2D;
			case 0x121BB:
				return 0x26;
			case 0x121BC:
				return 0x26;
			case 0x121BD:
				return 0x1E;
			case 0x121BE:
				return 0x1E;
			case 0x121BF:
				return 0x29;
			case 0x121C0:
				return 0x1F;
			case 0x121C1:
				return 0x1E;
			case 0x121C2:
				return 0x1F;
			case 0x121C3:
				return 0x1E;
			case 0x121C4:
				return 0x1E;
			case 0x121C5:
				return 0x1F;
			case 0x121C6:
				return 0x1F;
			case 0x121C7:
				return 0x28;
			case 0x121C8:
				return 0x1E;
			case 0x121C9:
				return 0x1F;
			case 0x121CA:
				return 0x28;
			case 0x121CB:
				return 0x24;
			case 0x121CC:
				return 0x1E;
			case 0x121CD:
				return 0x26;
			case 0x121CE:
				return 0x26;
			case 0x121CF:
				return 0x1E;
			case 0x121D0:
				return 0x1F;
			case 0x121D1:
				return 0x1F;
			case 0x121D2:
				return 0x1F;
			case 0x121D3:
				return 0x2E;
			case 0x121D4:
				return 0x21;
			case 0x121D5:
				return 0x20;
			case 0x121D6:
				return 0x1E;
			case 0x121D7:
				return 0x1F;
			case 0x121D8:
				return 0x1E;
			case 0x121D9:
				return 0x26;
			case 0x121DA:
				return 0x20;
			case 0x121DB:
				return 0x1E;
			case 0x121DC:
				return 0x28;
			case 0x121DD:
				return 0x36;
			case 0x121DE:
				return 0x30;
			case 0x121DF:
				return 0x20;
			case 0x121E0:
				return 0x2A;
			case 0x121E1:
				return 0x1F;
			case 0x121E2:
				return 0x1F;
			case 0x121E3:
				return 0x20;
			case 0x121E4:
				return 0x35;
			case 0x121E5:
				return 0x1D;
			case 0x121E6:
				return 0x24;
			case 0x121E7:
				return 0x2B;
			case 0x121E8:
				return 0x27;
			case 0x121E9:
				return 0x1E;
			case 0x121EA:
				return 0x1F;
			case 0x121EB:
				return 0x1D;
			case 0x121EC:
				return 0x15;
			case 0x121ED:
				return 0x1F;
			case 0x121EE:
				return 0x28;
			case 0x121EF:
				return 0x1A;
			case 0x121F0:
				return 0x2E;
			case 0x121F1:
				return 0x16;
			case 0x121F2:
				return 0x13;
			case 0x121F3:
				return 0x1D;
			case 0x121F4:
				return 0x13;
			case 0x121F5:
				return 0x1D;
			case 0x121F6:
				return 0x25;
			case 0x121F7:
				return 0x12;
			case 0x121F8:
				return 0x13;
			case 0x121F9:
				return 0x16;
			case 0x121FA:
				return 0x14;
			case 0x121FB:
				return 0x12;
			case 0x121FC:
				return 0x1C;
			case 0x121FD:
				return 0x13;
			case 0x121FE:
				return 0x1C;
			case 0x121FF:
				return 0x1D;
			case 0x12200:
				return 0x1E;
			case 0x12201:
				return 0x23;
			case 0x12202:
				return 0x23;
			case 0x12203:
				return 0x26;
			case 0x12204:
				return 0x1C;
			case 0x12205:
				return 0x1E;
			case 0x12206:
				return 0x1E;
			case 0x12207:
				return 0x27;
			case 0x12208:
				return 0x1C;
			case 0x12209:
				return 0x25;
			case 0x1220A:
				return 0x1F;
			case 0x1220B:
				return 0x24;
			case 0x1220C:
				return 0x1C;
			case 0x1220D:
				return 0x1C;
			case 0x1220E:
				return 0x25;
			case 0x1220F:
				return 0x26;
			case 0x12210:
				return 0x1E;
			case 0x12211:
				return 0x18;
			case 0x12212:
				return 0x20;
			case 0x12213:
				return 0x20;
			case 0x12214:
				return 0x1B;
			case 0x12215:
				return 0x1B;
			case 0x12216:
				return 0x13;
			case 0x12217:
				return 0x15;
			case 0x12218:
				return 0x20;
			case 0x12219:
				return 0x24;
			case 0x1221A:
				return 0x1D;
			case 0x1221B:
				return 0x13;
			case 0x1221C:
				return 0x13;
			case 0x1221D:
				return 0x13;
			case 0x1221E:
				return 0x1C;
			case 0x1221F:
				return 0x29;
			case 0x12220:
				return 0x12;
			case 0x12221:
				return 0x1D;
			case 0x12222:
				return 0x17;
			case 0x12223:
				return 0x13;
			case 0x12224:
				return 0x13;
			case 0x12225:
				return 0x13;
			case 0x12226:
				return 0x14;
			case 0x12227:
				return 0x15;
			case 0x12228:
				return 0x12;
			case 0x12229:
				return 0x13;
			case 0x1222A:
				return 0x12;
			case 0x1222B:
				return 0x13;
			case 0x1222C:
				return 0x12;
			case 0x1222D:
				return 0x1A;
			case 0x1222E:
				return 0x13;
			case 0x1222F:
				return 0x18;
			case 0x12230:
				return 0x16;
			case 0x12231:
				return 0x16;
			case 0x12232:
				return 0x14;
			case 0x12233:
				return 0x1C;
			case 0x12234:
				return 0x1E;
			case 0x12235:
				return 0x1D;
			case 0x12236:
				return 0x1E;
			case 0x12237:
				return 0x2E;
			case 0x12238:
				return 0x22;
			case 0x12239:
				return 0x15;
			case 0x1223A:
				return 0x1D;
			case 0x1223B:
				return 0x25;
			case 0x1223C:
				return 0x1E;
			case 0x1223D:
				return 0x1A;
			case 0x1223E:
				return 0x12;
			case 0x1223F:
				return 0x13;
			case 0x12240:
				return 0x14;
			case 0x12241:
				return 0x1D;
			case 0x12242:
				return 0x23;
			case 0x12243:
				return 0x22;
			case 0x12244:
				return 0x15;
			case 0x12245:
				return 0x1B;
			case 0x12246:
				return 0x13;
			case 0x12247:
				return 0x14;
			case 0x12248:
				return 0x12;
			case 0x12249:
				return 0x1A;
			case 0x1224A:
				return 0x1B;
			case 0x1224B:
				return 0x1A;
			case 0x1224C:
				return 0x12;
			case 0x1224D:
				return 0x1A;
			case 0x1224E:
				return 0x13;
			case 0x1224F:
				return 0x13;
			case 0x12250:
				return 0x23;
			case 0x12251:
				return 0x2C;
			case 0x12252:
				return 0x16;
			case 0x12253:
				return 0x1F;
			case 0x12254:
				return 0x20;
			case 0x12255:
				return 0x29;
			case 0x12256:
				return 0x20;
			case 0x12257:
				return 0x2E;
			case 0x12258:
				return 0x1F;
			case 0x12259:
				return 0x20;
			case 0x1225A:
				return 0x20;
			case 0x1225B:
				return 0x2A;
			case 0x1225C:
				return 0x29;
			case 0x1225D:
				return 0x32;
			case 0x1225E:
				return 0x28;
			case 0x1225F:
				return 0x20;
			case 0x12260:
				return 0x15;
			case 0x12261:
				return 0x12;
			case 0x12262:
				return 0x14;
			case 0x12263:
				return 0x13;
			case 0x12264:
				return 0x23;
			case 0x12265:
				return 0x24;
			case 0x12266:
				return 0x23;
			case 0x12267:
				return 0x3C;
			case 0x12268:
				return 0x23;
			case 0x12269:
				return 0x18;
			case 0x1226A:
				return 0x1C;
			case 0x1226B:
				return 0x20;
			case 0x1226C:
				return 0x31;
			case 0x1226D:
				return 0x15;
			case 0x1226E:
				return 0x26;
			case 0x1226F:
				return 0x22;
			case 0x12270:
				return 0x23;
			case 0x12271:
				return 0x23;
			case 0x12272:
				return 0x28;
			case 0x12273:
				return 0x24;
			case 0x12274:
				return 0x22;
			case 0x12275:
				return 0x22;
			case 0x12276:
				return 0x25;
			case 0x12277:
				return 0x22;
			case 0x12278:
				return 0x25;
			case 0x12279:
				return 0x27;
			case 0x1227A:
				return 0x12;
			case 0x1227B:
				return 0x13;
			case 0x1227C:
				return 0x13;
			case 0x1227D:
				return 0x13;
			case 0x1227E:
				return 0x15;
			case 0x1227F:
				return 0x12;
			case 0x12280:
				return 0x1A;
			case 0x12281:
				return 0x1B;
			case 0x12282:
				return 0x1B;
			case 0x12283:
				return 0x1B;
			case 0x12284:
				return 0x1A;
			case 0x12285:
				return 0x1A;
			case 0x12286:
				return 0x1B;
			case 0x12287:
				return 0x1A;
			case 0x12288:
				return 0x1B;
			case 0x12289:
				return 0x1E;
			case 0x1228A:
				return 0x15;
			case 0x1228B:
				return 0x1F;
			case 0x1228C:
				return 0x1E;
			case 0x1228D:
				return 0x1E;
			case 0x1228E:
				return 0x24;
			case 0x1228F:
				return 0x12;
			case 0x12290:
				return 0x13;
			case 0x12291:
				return 0x12;
			case 0x12292:
				return 0x12;
			case 0x12293:
				return 0x12;
			case 0x12294:
				return 0x1B;
			case 0x12295:
				return 0x13;
			case 0x12296:
				return 0x1B;
			case 0x12297:
				return 0x1C;
			case 0x12298:
				return 0x1D;
			case 0x12299:
				return 0x1C;
			case 0x1229A:
				return 0x1D;
			case 0x1229B:
				return 0x1D;
			case 0x1229C:
				return 0x1D;
			case 0x1229D:
				return 0x1C;
			case 0x1229E:
				return 0x1D;
			case 0x1229F:
				return 0x1D;
			case 0x122A0:
				return 0x1E;
			case 0x122A1:
				return 0x1D;
			case 0x122A2:
				return 0x1C;
			case 0x122A3:
				return 0x1C;
			case 0x122A4:
				return 0x1C;
			case 0x122A5:
				return 0x1C;
			case 0x122A6:
				return 0x1D;
			case 0x122A7:
				return 0x1C;
			case 0x122A8:
				return 0x18;
			case 0x122A9:
				return 0x13;
			case 0x122AA:
				return 0x24;
			case 0x122AB:
				return 0x16;
			case 0x122AC:
				return 0x13;
			case 0x122AD:
				return 0x13;
			case 0x122AE:
				return 0x14;
			case 0x122AF:
				return 0x1C;
			case 0x122B0:
				return 0x1E;
			case 0x122B1:
				return 0x1F;
			case 0x122B2:
				return 0x1D;
			case 0x122B3:
				return 0x1F;
			case 0x122B4:
				return 0x1E;
			case 0x122B5:
				return 0x1C;
			case 0x122B6:
				return 0x23;
			case 0x122B7:
				return 0x14;
			case 0x122B8:
				return 0x15;
			case 0x122B9:
				return 0x15;
			case 0x122BA:
				return 0x13;
			case 0x122BB:
				return 0x16;
			case 0x122BC:
				return 0x36;
			case 0x122BD:
				return 0x36;
			case 0x122BE:
				return 0x15;
			case 0x122BF:
				return 0x14;
			case 0x122C0:
				return 0x15;
			case 0x122C1:
				return 0x16;
			case 0x122C2:
				return 0x18;
			case 0x122C3:
				return 0x14;
			case 0x122C4:
				return 0x1C;
			case 0x122C5:
				return 0x1D;
			case 0x122C6:
				return 0x14;
			case 0x122C7:
				return 0x1C;
			case 0x122C8:
				return 0x1E;
			case 0x122C9:
				return 0x20;
			case 0x122CA:
				return 0x1E;
			case 0x122CB:
				return 0x1E;
			case 0x122CC:
				return 0x1E;
			case 0x122CD:
				return 0x23;
			case 0x122CE:
				return 0x21;
			case 0x122CF:
				return 0x1E;
			case 0x122D0:
				return 0x1E;
			case 0x122D1:
				return 0x1E;
			case 0x122D2:
				return 0x16;
			case 0x122D3:
				return 0x14;
			case 0x122D4:
				return 0x19;
			case 0x122D5:
				return 0x2B;
			case 0x122D6:
				return 0x15;
			case 0x122D7:
				return 0x13;
			case 0x122D8:
				return 0x25;
			case 0x122D9:
				return 0x14;
			case 0x122DA:
				return 0x16;
			case 0x122DB:
				return 0x12;
			case 0x122DC:
				return 0x17;
			case 0x122DD:
				return 0x13;
			case 0x122DE:
				return 0x14;
			case 0x122DF:
				return 0x23;
			case 0x122E0:
				return 0x14;
			case 0x122E1:
				return 0x15;
			case 0x122E2:
				return 0x12;
			case 0x122E3:
				return 0x1A;
			case 0x122E4:
				return 0x13;
			case 0x122E5:
				return 0x14;
			case 0x122E6:
				return 0x15;
			case 0x122E7:
				return 0x13;
			case 0x122E8:
				return 0x16;
			case 0x122E9:
				return 0x13;
			case 0x122EA:
				return 0x14;
			case 0x122EB:
				return 0x12;
			case 0x122EC:
				return 0x1B;
			case 0x122ED:
				return 0x1B;
			case 0x122EE:
				return 0x1B;
			case 0x122EF:
				return 0x17;
			case 0x122F0:
				return 0x13;
			case 0x122F1:
				return 0x36;
			case 0x122F2:
				return 0x1B;
			case 0x122F3:
				return 0x13;
			case 0x122F4:
				return 0x1C;
			case 0x122F5:
				return 0x1D;
			case 0x122F6:
				return 0x1D;
			case 0x122F7:
				return 0x1D;
			case 0x122F8:
				return 0x1E;
			case 0x122F9:
				return 0x1C;
			case 0x122FA:
				return 0x14;
			case 0x122FB:
				return 0x13;
			case 0x122FC:
				return 0x12;
			case 0x122FD:
				return 0x17;
			case 0x122FE:
				return 0x12;
			case 0x122FF:
				return 0x17;
			case 0x12300:
				return 0x13;
			case 0x12301:
				return 0x13;
			case 0x12302:
				return 0x1E;
			case 0x12303:
				return 0x1C;
			case 0x12304:
				return 0x36;
			case 0x12305:
				return 0x12;
			case 0x12306:
				return 0x14;
			case 0x12307:
				return 0x13;
			case 0x12308:
				return 0x13;
			case 0x12309:
				return 0x13;
			case 0x1230A:
				return 0x27;
			case 0x1230B:
				return 0x11;
			case 0x1230C:
				return 0x15;
			case 0x1230D:
				return 0x15;
			case 0x1230E:
				return 0x30;
			case 0x1230F:
				return 0x25;
			case 0x12310:
				return 0x33;
			case 0x12311:
				return 0x12;
			case 0x12312:
				return 0x12;
			case 0x12313:
				return 0x12;
			case 0x12314:
				return 0x19;
			case 0x12315:
				return 0x1C;
			case 0x12316:
				return 0x1B;
			case 0x12317:
				return 0x28;
			case 0x12318:
				return 0x2D;
			case 0x12319:
				return 0x17;
			case 0x1231A:
				return 0x1A;
			case 0x1231B:
				return 0x24;
			case 0x1231C:
				return 0x14;
			case 0x1231D:
				return 0x12;
			case 0x1231E:
				return 0x1E;
			case 0x1231F:
				return 0x23;
			case 0x12320:
				return 0x1D;
			case 0x12321:
				return 0x1A;
			case 0x12322:
				return 0x15;
			case 0x12323:
				return 0x14;
			case 0x12324:
				return 0x21;
			case 0x12325:
				return 0x1D;
			case 0x12326:
				return 0x12;
			case 0x12327:
				return 0x17;
			case 0x12328:
				return 0x12;
			case 0x12329:
				return 0x1E;
			case 0x1232A:
				return 0x1A;
			case 0x1232B:
				return 0x13;
			case 0x1232C:
				return 0x23;
			case 0x1232D:
				return 0x23;
			case 0x1232E:
				return 0x1C;
			case 0x1232F:
				return 0x1C;
			case 0x12330:
				return 0x1D;
			case 0x12331:
				return 0x1C;
			case 0x12332:
				return 0x25;
			case 0x12333:
				return 0x24;
			case 0x12334:
				return 0x13;
			case 0x12335:
				return 0x13;
			case 0x12336:
				return 0x14;
			case 0x12337:
				return 0x13;
			case 0x12338:
				return 0x1B;
			case 0x12339:
				return 0x20;
			case 0x1233A:
				return 0x1D;
			case 0x1233B:
				return 0x1D;
			case 0x1233C:
				return 0x1C;
			case 0x1233D:
				return 0x1D;
			case 0x1233E:
				return 0x23;
			case 0x1233F:
				return 0x1D;
			case 0x12340:
				return 0x1C;
			case 0x12341:
				return 0x1C;
			case 0x12342:
				return 0x1D;
			case 0x12343:
				return 0x1C;
			case 0x12344:
				return 0x1D;
			case 0x12345:
				return 0x1C;
			case 0x12346:
				return 0x1D;
			case 0x12347:
				return 0x1D;
			case 0x12348:
				return 0x1C;
			case 0x12349:
				return 0x1D;
			case 0x1234A:
				return 0x1E;
			case 0x1234B:
				return 0x1C;
			case 0x1234C:
				return 0x24;
			case 0x1234D:
				return 0x1C;
			case 0x1234E:
				return 0x1F;
			case 0x1234F:
				return 0x15;
			case 0x12350:
				return 0x1D;
			case 0x12351:
				return 0x13;
			case 0x12352:
				return 0x1B;
			case 0x12353:
				return 0x1C;
			case 0x12354:
				return 0x1D;
			case 0x12355:
				return 0x1E;
			case 0x12356:
				return 0x14;
			case 0x12357:
				return 0x14;
			case 0x12358:
				return 0x16;
			case 0x12359:
				return 0x15;
			case 0x1235A:
				return 0x13;
			case 0x1235B:
				return 0x20;
			case 0x1235C:
				return 0x13;
			case 0x1235D:
				return 0x12;
			case 0x1235E:
				return 0x17;
			case 0x1235F:
				return 0x24;
			case 0x12360:
				return 0x13;
			case 0x12361:
				return 0x14;
			case 0x12362:
				return 0x13;
			case 0x12363:
				return 0x12;
			case 0x12364:
				return 0x1A;
			case 0x12365:
				return 0x13;
			case 0x12366:
				return 0x13;
			case 0x12367:
				return 0x1D;
			case 0x12368:
				return 0x13;
			case 0x12369:
				return 0x14;
			case 0x1236A:
				return 0x12;
			case 0x1236B:
				return 0x13;
			case 0x1236C:
				return 0x1B;
			case 0x1236D:
				return 0x15;
			case 0x1236E:
				return 0x13;
			case 0x1236F:
				return 0x1B;
			case 0x12370:
				return 0x1C;
			case 0x12371:
				return 0x1B;
			case 0x12372:
				return 0x1E;
			case 0x12373:
				return 0x2D;
			case 0x12374:
				return 0x14;
			case 0x12375:
				return 0x1D;
			case 0x12376:
				return 0x1D;
			case 0x12377:
				return 0x1E;
			case 0x12378:
				return 0x1E;
			case 0x12379:
				return 0x2C;
			case 0x1237A:
				return 0x1E;
			case 0x1237B:
				return 0x14;
			case 0x1237C:
				return 0x13;
			case 0x1237D:
				return 0x14;
			case 0x1237E:
				return 0x1E;
			case 0x1237F:
				return 0x1D;
			case 0x12380:
				return 0x1D;
			case 0x12381:
				return 0x1C;
			case 0x12382:
				return 0x26;
			case 0x12383:
				return 0x1C;
			case 0x12384:
				return 0x1B;
			case 0x12385:
				return 0x1D;
			case 0x12386:
				return 0x1B;
			case 0x12387:
				return 0x1C;
			case 0x12388:
				return 0x1E;
			case 0x12389:
				return 0x25;
			case 0x1238A:
				return 0x27;
			case 0x1238B:
				return 0x1D;
			case 0x1238C:
				return 0x14;
			case 0x1238D:
				return 0x1E;
			case 0x1238E:
				return 0x13;
			case 0x1238F:
				return 0x13;
			case 0x12390:
				return 0x14;
			case 0x12391:
				return 0x20;
			case 0x12392:
				return 0x1F;
			case 0x12393:
				return 0x2B;
			case 0x12394:
				return 0x1E;
			case 0x12395:
				return 0x14;
			case 0x12396:
				return 0x22;
			case 0x12397:
				return 0x13;
			case 0x12398:
				return 0x1B;
			case 0x12399:
				return 0x13;
			case 0x12400:
				return 0x1F;
			case 0x12401:
				return 0x21;
			case 0x12402:
				return 0x20;
			case 0x12403:
				return 0x20;
			case 0x12404:
				return 0x1F;
			case 0x12405:
				return 0x21;
			case 0x12406:
				return 0x21;
			case 0x12407:
				return 0x20;
			case 0x12408:
				return 0x22;
			case 0x12409:
				return 0x21;
			case 0x1240A:
				return 0x21;
			case 0x1240B:
				return 0x20;
			case 0x1240C:
				return 0x22;
			case 0x1240D:
				return 0x22;
			case 0x1240E:
				return 0x21;
			case 0x1240F:
				return 0x1E;
			case 0x12410:
				return 0x1E;
			case 0x12411:
				return 0x1D;
			case 0x12412:
				return 0x1F;
			case 0x12413:
				return 0x1F;
			case 0x12414:
				return 0x1E;
			case 0x12415:
				return 0x21;
			case 0x12416:
				return 0x21;
			case 0x12417:
				return 0x23;
			case 0x12418:
				return 0x22;
			case 0x12419:
				return 0x22;
			case 0x1241A:
				return 0x21;
			case 0x1241B:
				return 0x23;
			case 0x1241C:
				return 0x23;
			case 0x1241D:
				return 0x22;
			case 0x1241E:
				return 0x21;
			case 0x1241F:
				return 0x21;
			case 0x12420:
				return 0x23;
			case 0x12421:
				return 0x22;
			case 0x12422:
				return 0x22;
			case 0x12423:
				return 0x21;
			case 0x12424:
				return 0x23;
			case 0x12425:
				return 0x30;
			case 0x12426:
				return 0x22;
			case 0x12427:
				return 0x22;
			case 0x12428:
				return 0x21;
			case 0x12429:
				return 0x23;
			case 0x1242A:
				return 0x23;
			case 0x1242B:
				return 0x22;
			case 0x1242C:
				return 0x21;
			case 0x1242D:
				return 0x21;
			case 0x1242E:
				return 0x23;
			case 0x1242F:
				return 0x30;
			case 0x12430:
				return 0x22;
			case 0x12431:
				return 0x22;
			case 0x12432:
				return 0x31;
			case 0x12433:
				return 0x30;
			case 0x12434:
				return 0x20;
			case 0x12435:
				return 0x20;
			case 0x12436:
				return 0x22;
			case 0x12437:
				return 0x2F;
			case 0x12438:
				return 0x21;
			case 0x12439:
				return 0x21;
			case 0x1243A:
				return 0x30;
			case 0x1243B:
				return 0x30;
			case 0x1243C:
				return 0x2F;
			case 0x1243D:
				return 0x30;
			case 0x1243E:
				return 0x31;
			case 0x1243F:
				return 0x31;
			case 0x12440:
				return 0x2D;
			case 0x12441:
				return 0x30;
			case 0x12442:
				return 0x31;
			case 0x12443:
				return 0x31;
			case 0x12444:
				return 0x2F;
			case 0x12445:
				return 0x30;
			case 0x12446:
				return 0x30;
			case 0x12447:
				return 0x31;
			case 0x12448:
				return 0x31;
			case 0x12449:
				return 0x32;
			case 0x1244A:
				return 0x24;
			case 0x1244B:
				return 0x26;
			case 0x1244C:
				return 0x25;
			case 0x1244D:
				return 0x25;
			case 0x1244E:
				return 0x24;
			case 0x1244F:
				return 0x20;
			case 0x12450:
				return 0x20;
			case 0x12451:
				return 0x22;
			case 0x12452:
				return 0x21;
			case 0x12453:
				return 0x2E;
			case 0x12454:
				return 0x21;
			case 0x12455:
				return 0x2E;
			case 0x12456:
				return 0x21;
			case 0x12457:
				return 0x21;
			case 0x12458:
				return 0x21;
			case 0x12459:
				return 0x21;
			case 0x1245A:
				return 0x26;
			case 0x1245B:
				return 0x27;
			case 0x1245C:
				return 0x28;
			case 0x1245D:
				return 0x30;
			case 0x1245E:
				return 0x31;
			case 0x1245F:
				return 0x26;
			case 0x12460:
				return 0x27;
			case 0x12461:
				return 0x2E;
			case 0x12462:
				return 0x30;
			case 0x12463:
				return 0x27;
			case 0x12464:
				return 0x24;
			case 0x12465:
				return 0x29;
			case 0x12466:
				return 0x2A;
			case 0x12467:
				return 0x25;
			case 0x12468:
				return 0x25;
			case 0x12469:
				return 0x2B;
			case 0x1246A:
				return 0x2B;
			case 0x1246B:
				return 0x2A;
			case 0x1246C:
				return 0x2C;
			case 0x1246D:
				return 0x2C;
			case 0x1246E:
				return 0x2B;
			case 0x12470:
				return 0x35;
			case 0x12471:
				return 0x2A;
			case 0x12472:
				return 0x2A;
			case 0x12473:
				return 0x2D;
			case 0x12474:
				return 0x2E;
			case 0x12480:
				return 0x21;
			case 0x12481:
				return 0x1D;
			case 0x12482:
				return 0x1D;
			case 0x12483:
				return 0x23;
			case 0x12484:
				return 0x20;
			case 0x12485:
				return 0x1F;
			case 0x12486:
				return 0x1F;
			case 0x12487:
				return 0x24;
			case 0x12488:
				return 0x1D;
			case 0x12489:
				return 0x1D;
			case 0x1248A:
				return 0x1D;
			case 0x1248B:
				return 0x1F;
			case 0x1248C:
				return 0x1D;
			case 0x1248D:
				return 0x1F;
			case 0x1248E:
				return 0x1D;
			case 0x1248F:
				return 0x25;
			case 0x12490:
				return 0x1D;
			case 0x12491:
				return 0x1D;
			case 0x12492:
				return 0x1F;
			case 0x12493:
				return 0x1C;
			case 0x12494:
				return 0x1C;
			case 0x12495:
				return 0x23;
			case 0x12496:
				return 0x1E;
			case 0x12497:
				return 0x1C;
			case 0x12498:
				return 0x1C;
			case 0x12499:
				return 0x22;
			case 0x1249A:
				return 0x20;
			case 0x1249B:
				return 0x1D;
			case 0x1249C:
				return 0x20;
			case 0x1249D:
				return 0x2C;
			case 0x1249E:
				return 0x21;
			case 0x1249F:
				return 0x1D;
			case 0x124A0:
				return 0x27;
			case 0x124A1:
				return 0x27;
			case 0x124A2:
				return 0x1E;
			case 0x124A3:
				return 0x1D;
			case 0x124A4:
				return 0x1C;
			case 0x124A5:
				return 0x1C;
			case 0x124A6:
				return 0x1C;
			case 0x124A7:
				return 0x1D;
			case 0x124A8:
				return 0x21;
			case 0x124A9:
				return 0x1C;
			case 0x124AA:
				return 0x1C;
			case 0x124AB:
				return 0x17;
			case 0x124AC:
				return 0x22;
			case 0x124AD:
				return 0x26;
			case 0x124AE:
				return 0x25;
			case 0x124AF:
				return 0x2B;
			case 0x124B0:
				return 0x25;
			case 0x124B1:
				return 0x26;
			case 0x124B2:
				return 0x25;
			case 0x124B3:
				return 0x26;
			case 0x124B4:
				return 0x25;
			case 0x124B5:
				return 0x1D;
			case 0x124B6:
				return 0x20;
			case 0x124B7:
				return 0x22;
			case 0x124B8:
				return 0x2C;
			case 0x124B9:
				return 0x2A;
			case 0x124BA:
				return 0x1E;
			case 0x124BB:
				return 0x1C;
			case 0x124BC:
				return 0x25;
			case 0x124BD:
				return 0x25;
			case 0x124BE:
				return 0x23;
			case 0x124BF:
				return 0x2C;
			case 0x124C0:
				return 0x1D;
			case 0x124C1:
				return 0x27;
			case 0x124C2:
				return 0x1D;
			case 0x124C3:
				return 0x1E;
			case 0x124C4:
				return 0x1C;
			case 0x124C5:
				return 0x24;
			case 0x124C6:
				return 0x24;
			case 0x124C7:
				return 0x1E;
			case 0x124C8:
				return 0x1E;
			case 0x124C9:
				return 0x2B;
			case 0x124CA:
				return 0x1F;
			case 0x124CB:
				return 0x2D;
			case 0x124CC:
				return 0x22;
			case 0x124CD:
				return 0x28;
			case 0x124CE:
				return 0x1C;
			case 0x124CF:
				return 0x2E;
			case 0x124D0:
				return 0x1B;
			case 0x124D1:
				return 0x1B;
			case 0x124D2:
				return 0x1E;
			case 0x124D3:
				return 0x1B;
			case 0x124D4:
				return 0x26;
			case 0x124D5:
				return 0x17;
			case 0x124D6:
				return 0x17;
			case 0x124D7:
				return 0x17;
			case 0x124D8:
				return 0x17;
			case 0x124D9:
				return 0x17;
			case 0x124DA:
				return 0x17;
			case 0x124DB:
				return 0x17;
			case 0x124DC:
				return 0x29;
			case 0x124DD:
				return 0x17;
			case 0x124DE:
				return 0x24;
			case 0x124DF:
				return 0x17;
			case 0x124E0:
				return 0x17;
			case 0x124E1:
				return 0x17;
			case 0x124E2:
				return 0x17;
			case 0x124E3:
				return 0x17;
			case 0x124E4:
				return 0x17;
			case 0x124E5:
				return 0x17;
			case 0x124E6:
				return 0x17;
			case 0x124E7:
				return 0x17;
			case 0x124E8:
				return 0x17;
			case 0x124E9:
				return 0x17;
			case 0x124EA:
				return 0x17;
			case 0x124EB:
				return 0x17;
			case 0x124EC:
				return 0x17;
			case 0x124ED:
				return 0x17;
			case 0x124EE:
				return 0x17;
			case 0x124EF:
				return 0x17;
			case 0x124F0:
				return 0x17;
			case 0x124F1:
				return 0x17;
			case 0x124F2:
				return 0x20;
			case 0x124F3:
				return 0x21;
			case 0x124F4:
				return 0x2A;
			case 0x124F5:
				return 0x33;
			case 0x124F6:
				return 0x28;
			case 0x124F7:
				return 0x17;
			case 0x124F8:
				return 0x17;
			case 0x124F9:
				return 0x17;
			case 0x124FA:
				return 0x17;
			case 0x124FB:
				return 0x17;
			case 0x124FC:
				return 0x17;
			case 0x124FD:
				return 0x17;
			case 0x124FE:
				return 0x17;
			case 0x124FF:
				return 0x17;
			case 0x12500:
				return 0x17;
			case 0x12501:
				return 0x17;
			case 0x12502:
				return 0x21;
			case 0x12503:
				return 0x21;
			case 0x12504:
				return 0x2C;
			case 0x12505:
				return 0x21;
			case 0x12506:
				return 0x20;
			case 0x12507:
				return 0x21;
			case 0x12508:
				return 0x20;
			case 0x12509:
				return 0x20;
			case 0x1250A:
				return 0x20;
			case 0x1250B:
				return 0x23;
			case 0x1250C:
				return 0x17;
			case 0x1250D:
				return 0x17;
			case 0x1250E:
				return 0x21;
			case 0x1250F:
				return 0x20;
			case 0x12510:
				return 0x21;
			case 0x12511:
				return 0x26;
			case 0x12512:
				return 0x20;
			case 0x12513:
				return 0x33;
			case 0x12514:
				return 0x2B;
			case 0x12515:
				return 0x20;
			case 0x12516:
				return 0x23;
			case 0x12517:
				return 0x17;
			case 0x12518:
				return 0x17;
			case 0x12519:
				return 0x22;
			case 0x1251A:
				return 0x1E;
			case 0x1251B:
				return 0x1D;
			case 0x1251C:
				return 0x1D;
			case 0x1251D:
				return 0x2F;
			case 0x1251E:
				return 0x1E;
			case 0x1251F:
				return 0x1B;
			case 0x12520:
				return 0x27;
			case 0x12521:
				return 0x28;
			case 0x12522:
				return 0x25;
			case 0x12523:
				return 0x21;
			case 0x12524:
				return 0x20;
			case 0x12525:
				return 0x1F;
			case 0x12526:
				return 0x22;
			case 0x12527:
				return 0x24;
			case 0x12528:
				return 0x21;
			case 0x12529:
				return 0x29;
			case 0x1252A:
				return 0x1E;
			case 0x1252B:
				return 0x25;
			case 0x1252C:
				return 0x22;
			case 0x1252D:
				return 0x21;
			case 0x1252E:
				return 0x1C;
			case 0x1252F:
				return 0x25;
			case 0x12530:
				return 0x1E;
			case 0x12531:
				return 0x19;
			case 0x12532:
				return 0x1C;
			case 0x12533:
				return 0x1D;
			case 0x12534:
				return 0x1D;
			case 0x12535:
				return 0x1C;
			case 0x12536:
				return 0x26;
			case 0x12537:
				return 0x25;
			case 0x12538:
				return 0x1D;
			case 0x12539:
				return 0x1D;
			case 0x1253A:
				return 0x23;
			case 0x1253B:
				return 0x24;
			case 0x1253C:
				return 0x1C;
			case 0x1253D:
				return 0x1C;
			case 0x1253E:
				return 0x1F;
			case 0x1253F:
				return 0x21;
			case 0x12540:
				return 0x1D;
			case 0x12541:
				return 0x13;
			case 0x12542:
				return 0x23;
			case 0x12543:
				return 0x29;
			case 0x13000:
				return 0x19;
			case 0x13001:
				return 0x19;
			case 0x13002:
				return 0x19;
			case 0x13003:
				return 0x19;
			case 0x13004:
				return 0x19;
			case 0x13005:
				return 0x1A;
			case 0x13006:
				return 0x19;
			case 0x13007:
				return 0x1A;
			case 0x13008:
				return 0x1A;
			case 0x13009:
				return 0x19;
			case 0x1300A:
				return 0x19;
			case 0x1300B:
				return 0x19;
			case 0x1300C:
				return 0x19;
			case 0x1300D:
				return 0x19;
			case 0x1300E:
				return 0x19;
			case 0x1300F:
				return 0x19;
			case 0x13010:
				return 0x19;
			case 0x13011:
				return 0x1A;
			case 0x13012:
				return 0x19;
			case 0x13013:
				return 0x19;
			case 0x13014:
				return 0x19;
			case 0x13015:
				return 0x1A;
			case 0x13016:
				return 0x19;
			case 0x13017:
				return 0x19;
			case 0x13018:
				return 0x19;
			case 0x13019:
				return 0x19;
			case 0x1301A:
				return 0x19;
			case 0x1301B:
				return 0x19;
			case 0x1301C:
				return 0x19;
			case 0x1301D:
				return 0x19;
			case 0x1301E:
				return 0x19;
			case 0x1301F:
				return 0x19;
			case 0x13020:
				return 0x19;
			case 0x13021:
				return 0x19;
			case 0x13022:
				return 0x19;
			case 0x13023:
				return 0x19;
			case 0x13024:
				return 0x19;
			case 0x13025:
				return 0x1A;
			case 0x13026:
				return 0x19;
			case 0x13027:
				return 0x19;
			case 0x13028:
				return 0x19;
			case 0x13029:
				return 0x19;
			case 0x1302A:
				return 0x19;
			case 0x1302B:
				return 0x19;
			case 0x1302C:
				return 0x19;
			case 0x1302D:
				return 0x19;
			case 0x1302E:
				return 0x1A;
			case 0x1302F:
				return 0x19;
			case 0x13030:
				return 0x19;
			case 0x13031:
				return 0x1A;
			case 0x13032:
				return 0x19;
			case 0x13033:
				return 0x1A;
			case 0x13034:
				return 0x19;
			case 0x13035:
				return 0x19;
			case 0x13036:
				return 0x1A;
			case 0x13037:
				return 0x19;
			case 0x13038:
				return 0x19;
			case 0x13039:
				return 0x19;
			case 0x1303A:
				return 0x19;
			case 0x1303B:
				return 0x19;
			case 0x1303C:
				return 0x19;
			case 0x1303D:
				return 0x19;
			case 0x1303E:
				return 0x19;
			case 0x1303F:
				return 0x19;
			case 0x13040:
				return 0x19;
			case 0x13041:
				return 0x19;
			case 0x13042:
				return 0x19;
			case 0x13043:
				return 0x19;
			case 0x13044:
				return 0x19;
			case 0x13045:
				return 0x19;
			case 0x13046:
				return 0x19;
			case 0x13047:
				return 0x19;
			case 0x13048:
				return 0x19;
			case 0x13049:
				return 0x19;
			case 0x1304A:
				return 0x19;
			case 0x1304B:
				return 0x19;
			case 0x1304C:
				return 0x19;
			case 0x1304D:
				return 0x19;
			case 0x1304E:
				return 0x19;
			case 0x1304F:
				return 0x19;
			case 0x13050:
				return 0x19;
			case 0x13051:
				return 0x19;
			case 0x13052:
				return 0x19;
			case 0x13053:
				return 0x19;
			case 0x13054:
				return 0x19;
			case 0x13055:
				return 0x1A;
			case 0x13056:
				return 0x19;
			case 0x13057:
				return 0x19;
			case 0x13058:
				return 0x19;
			case 0x13059:
				return 0x19;
			case 0x1305A:
				return 0x19;
			case 0x1305B:
				return 0x19;
			case 0x1305C:
				return 0x1A;
			case 0x1305D:
				return 0x1A;
			case 0x1305E:
				return 0x1A;
			case 0x1305F:
				return 0x19;
			case 0x13060:
				return 0x19;
			case 0x13061:
				return 0x19;
			case 0x13062:
				return 0x19;
			case 0x13063:
				return 0x19;
			case 0x13064:
				return 0x19;
			case 0x13065:
				return 0x19;
			case 0x13066:
				return 0x19;
			case 0x13067:
				return 0x1A;
			case 0x13068:
				return 0x19;
			case 0x13069:
				return 0x19;
			case 0x1306A:
				return 0x19;
			case 0x1306B:
				return 0x19;
			case 0x1306C:
				return 0x19;
			case 0x1306D:
				return 0x19;
			case 0x1306E:
				return 0x19;
			case 0x1306F:
				return 0x19;
			case 0x13070:
				return 0x19;
			case 0x13071:
				return 0x19;
			case 0x13072:
				return 0x19;
			case 0x13073:
				return 0x19;
			case 0x13074:
				return 0x19;
			case 0x13075:
				return 0x19;
			case 0x13076:
				return 0x19;
			case 0x13077:
				return 0x19;
			case 0x13078:
				return 0x19;
			case 0x13079:
				return 0x19;
			case 0x1307A:
				return 0x19;
			case 0x1307B:
				return 0x19;
			case 0x1307C:
				return 0x19;
			case 0x1307D:
				return 0x19;
			case 0x1307E:
				return 0x1A;
			case 0x1307F:
				return 0x19;
			case 0x13080:
				return 0x19;
			case 0x13081:
				return 0x19;
			case 0x13082:
				return 0x19;
			case 0x13083:
				return 0x19;
			case 0x13084:
				return 0x19;
			case 0x13085:
				return 0x19;
			case 0x13086:
				return 0x19;
			case 0x13087:
				return 0x19;
			case 0x13088:
				return 0x19;
			case 0x13089:
				return 0x19;
			case 0x1308A:
				return 0x19;
			case 0x1308B:
				return 0x19;
			case 0x1308C:
				return 0x19;
			case 0x1308D:
				return 0x19;
			case 0x1308E:
				return 0x19;
			case 0x1308F:
				return 0x19;
			case 0x13090:
				return 0x19;
			case 0x13091:
				return 0x19;
			case 0x13092:
				return 0x1A;
			case 0x13093:
				return 0x19;
			case 0x13094:
				return 0x19;
			case 0x13095:
				return 0x19;
			case 0x13096:
				return 0x19;
			case 0x13097:
				return 0x1A;
			case 0x13098:
				return 0x19;
			case 0x13099:
				return 0x19;
			case 0x1309A:
				return 0x19;
			case 0x1309B:
				return 0x1A;
			case 0x1309C:
				return 0x19;
			case 0x1309D:
				return 0x19;
			case 0x1309E:
				return 0x19;
			case 0x1309F:
				return 0x19;
			case 0x130A0:
				return 0x19;
			case 0x130A1:
				return 0x19;
			case 0x130A2:
				return 0x19;
			case 0x130A3:
				return 0x19;
			case 0x130A4:
				return 0x19;
			case 0x130A5:
				return 0x19;
			case 0x130A6:
				return 0x19;
			case 0x130A7:
				return 0x19;
			case 0x130A8:
				return 0x1A;
			case 0x130A9:
				return 0x19;
			case 0x130AA:
				return 0x19;
			case 0x130AB:
				return 0x1A;
			case 0x130AC:
				return 0x19;
			case 0x130AD:
				return 0x19;
			case 0x130AE:
				return 0x1A;
			case 0x130AF:
				return 0x1A;
			case 0x130B0:
				return 0x1A;
			case 0x130B1:
				return 0x1A;
			case 0x130B2:
				return 0x1A;
			case 0x130B3:
				return 0x1A;
			case 0x130B4:
				return 0x1A;
			case 0x130B5:
				return 0x1A;
			case 0x130B6:
				return 0x1A;
			case 0x130B7:
				return 0x19;
			case 0x130B8:
				return 0x19;
			case 0x130B9:
				return 0x1A;
			case 0x130BA:
				return 0x19;
			case 0x130BB:
				return 0x19;
			case 0x130BC:
				return 0x1A;
			case 0x130BD:
				return 0x19;
			case 0x130BE:
				return 0x19;
			case 0x130BF:
				return 0x19;
			case 0x130C0:
				return 0x19;
			case 0x130C1:
				return 0x19;
			case 0x130C2:
				return 0x19;
			case 0x130C3:
				return 0x19;
			case 0x130C4:
				return 0x19;
			case 0x130C5:
				return 0x19;
			case 0x130C6:
				return 0x19;
			case 0x130C7:
				return 0x19;
			case 0x130C8:
				return 0x19;
			case 0x130C9:
				return 0x19;
			case 0x130CA:
				return 0x1A;
			case 0x130CB:
				return 0x1A;
			case 0x130CC:
				return 0x1A;
			case 0x130CD:
				return 0x1A;
			case 0x130CE:
				return 0x1A;
			case 0x130CF:
				return 0x1A;
			case 0x130D0:
				return 0x1A;
			case 0x130D1:
				return 0x1A;
			case 0x130D2:
				return 0x19;
			case 0x130D3:
				return 0x19;
			case 0x130D4:
				return 0x19;
			case 0x130D5:
				return 0x19;
			case 0x130D6:
				return 0x19;
			case 0x130D7:
				return 0x19;
			case 0x130D8:
				return 0x19;
			case 0x130D9:
				return 0x19;
			case 0x130DA:
				return 0x1A;
			case 0x130DB:
				return 0x19;
			case 0x130DC:
				return 0x1A;
			case 0x130DD:
				return 0x19;
			case 0x130DE:
				return 0x19;
			case 0x130DF:
				return 0x19;
			case 0x130E0:
				return 0x19;
			case 0x130E1:
				return 0x19;
			case 0x130E2:
				return 0x19;
			case 0x130E3:
				return 0x19;
			case 0x130E4:
				return 0x1A;
			case 0x130E5:
				return 0x19;
			case 0x130E6:
				return 0x1A;
			case 0x130E7:
				return 0x19;
			case 0x130E8:
				return 0x19;
			case 0x130E9:
				return 0x19;
			case 0x130EA:
				return 0x1A;
			case 0x130EB:
				return 0x19;
			case 0x130EC:
				return 0x19;
			case 0x130ED:
				return 0x19;
			case 0x130EE:
				return 0x19;
			case 0x130EF:
				return 0x19;
			case 0x130F0:
				return 0x19;
			case 0x130F1:
				return 0x19;
			case 0x130F2:
				return 0x19;
			case 0x130F3:
				return 0x1A;
			case 0x130F4:
				return 0x19;
			case 0x130F5:
				return 0x19;
			case 0x130F6:
				return 0x19;
			case 0x130F7:
				return 0x19;
			case 0x130F8:
				return 0x19;
			case 0x130F9:
				return 0x19;
			case 0x130FA:
				return 0x1A;
			case 0x130FB:
				return 0x19;
			case 0x130FC:
				return 0x19;
			case 0x130FD:
				return 0x19;
			case 0x130FE:
				return 0x19;
			case 0x130FF:
				return 0x1A;
			case 0x13100:
				return 0x19;
			case 0x13101:
				return 0x19;
			case 0x13102:
				return 0x19;
			case 0x13103:
				return 0x19;
			case 0x13104:
				return 0x19;
			case 0x13105:
				return 0x19;
			case 0x13106:
				return 0x19;
			case 0x13107:
				return 0x19;
			case 0x13108:
				return 0x19;
			case 0x13109:
				return 0x19;
			case 0x1310A:
				return 0x19;
			case 0x1310B:
				return 0x19;
			case 0x1310C:
				return 0x1A;
			case 0x1310D:
				return 0x19;
			case 0x1310E:
				return 0x19;
			case 0x1310F:
				return 0x19;
			case 0x13110:
				return 0x19;
			case 0x13111:
				return 0x19;
			case 0x13112:
				return 0x19;
			case 0x13113:
				return 0x19;
			case 0x13114:
				return 0x19;
			case 0x13115:
				return 0x1A;
			case 0x13116:
				return 0x19;
			case 0x13117:
				return 0x19;
			case 0x13118:
				return 0x19;
			case 0x13119:
				return 0x19;
			case 0x1311A:
				return 0x19;
			case 0x1311B:
				return 0x19;
			case 0x1311C:
				return 0x19;
			case 0x1311D:
				return 0x19;
			case 0x1311E:
				return 0x19;
			case 0x1311F:
				return 0x19;
			case 0x13120:
				return 0x1A;
			case 0x13121:
				return 0x19;
			case 0x13122:
				return 0x19;
			case 0x13123:
				return 0x19;
			case 0x13124:
				return 0x19;
			case 0x13125:
				return 0x19;
			case 0x13126:
				return 0x19;
			case 0x13127:
				return 0x1A;
			case 0x13128:
				return 0x19;
			case 0x13129:
				return 0x1A;
			case 0x1312A:
				return 0x19;
			case 0x1312B:
				return 0x19;
			case 0x1312C:
				return 0x19;
			case 0x1312D:
				return 0x19;
			case 0x1312E:
				return 0x19;
			case 0x1312F:
				return 0x19;
			case 0x13130:
				return 0x19;
			case 0x13131:
				return 0x1A;
			case 0x13132:
				return 0x19;
			case 0x13133:
				return 0x1A;
			case 0x13134:
				return 0x19;
			case 0x13135:
				return 0x1A;
			case 0x13136:
				return 0x19;
			case 0x13137:
				return 0x19;
			case 0x13138:
				return 0x19;
			case 0x13139:
				return 0x19;
			case 0x1313A:
				return 0x1A;
			case 0x1313B:
				return 0x1A;
			case 0x1313C:
				return 0x1A;
			case 0x1313D:
				return 0x19;
			case 0x1313E:
				return 0x19;
			case 0x1313F:
				return 0x19;
			case 0x13140:
				return 0x19;
			case 0x13141:
				return 0x19;
			case 0x13142:
				return 0x19;
			case 0x13143:
				return 0x19;
			case 0x13144:
				return 0x19;
			case 0x13145:
				return 0x1A;
			case 0x13146:
				return 0x19;
			case 0x13147:
				return 0x1A;
			case 0x13148:
				return 0x1A;
			case 0x13149:
				return 0x19;
			case 0x1314A:
				return 0x19;
			case 0x1314B:
				return 0x19;
			case 0x1314C:
				return 0x19;
			case 0x1314D:
				return 0x1A;
			case 0x1314E:
				return 0x19;
			case 0x1314F:
				return 0x19;
			case 0x13150:
				return 0x19;
			case 0x13151:
				return 0x19;
			case 0x13152:
				return 0x19;
			case 0x13153:
				return 0x19;
			case 0x13154:
				return 0x19;
			case 0x13155:
				return 0x19;
			case 0x13156:
				return 0x19;
			case 0x13157:
				return 0x1A;
			case 0x13158:
				return 0x19;
			case 0x13159:
				return 0x19;
			case 0x1315A:
				return 0x19;
			case 0x1315B:
				return 0x19;
			case 0x1315C:
				return 0x19;
			case 0x1315D:
				return 0x19;
			case 0x1315E:
				return 0x1A;
			case 0x1315F:
				return 0x19;
			case 0x13160:
				return 0x19;
			case 0x13161:
				return 0x19;
			case 0x13162:
				return 0x19;
			case 0x13163:
				return 0x19;
			case 0x13164:
				return 0x19;
			case 0x13165:
				return 0x19;
			case 0x13166:
				return 0x19;
			case 0x13167:
				return 0x19;
			case 0x13168:
				return 0x19;
			case 0x13169:
				return 0x1A;
			case 0x1316A:
				return 0x19;
			case 0x1316B:
				return 0x1A;
			case 0x1316C:
				return 0x19;
			case 0x1316D:
				return 0x19;
			case 0x1316E:
				return 0x19;
			case 0x1316F:
				return 0x19;
			case 0x13170:
				return 0x19;
			case 0x13171:
				return 0x19;
			case 0x13172:
				return 0x1A;
			case 0x13173:
				return 0x19;
			case 0x13174:
				return 0x19;
			case 0x13175:
				return 0x1A;
			case 0x13176:
				return 0x19;
			case 0x13177:
				return 0x19;
			case 0x13178:
				return 0x19;
			case 0x13179:
				return 0x19;
			case 0x1317A:
				return 0x19;
			case 0x1317B:
				return 0x19;
			case 0x1317C:
				return 0x19;
			case 0x1317D:
				return 0x19;
			case 0x1317E:
				return 0x19;
			case 0x1317F:
				return 0x19;
			case 0x13180:
				return 0x19;
			case 0x13181:
				return 0x19;
			case 0x13182:
				return 0x19;
			case 0x13183:
				return 0x19;
			case 0x13184:
				return 0x19;
			case 0x13185:
				return 0x1A;
			case 0x13186:
				return 0x19;
			case 0x13187:
				return 0x19;
			case 0x13188:
				return 0x19;
			case 0x13189:
				return 0x19;
			case 0x1318A:
				return 0x19;
			case 0x1318B:
				return 0x19;
			case 0x1318C:
				return 0x19;
			case 0x1318D:
				return 0x1A;
			case 0x1318E:
				return 0x19;
			case 0x1318F:
				return 0x19;
			case 0x13190:
				return 0x19;
			case 0x13191:
				return 0x19;
			case 0x13192:
				return 0x1A;
			case 0x13193:
				return 0x19;
			case 0x13194:
				return 0x1A;
			case 0x13195:
				return 0x19;
			case 0x13196:
				return 0x1A;
			case 0x13197:
				return 0x19;
			case 0x13198:
				return 0x19;
			case 0x13199:
				return 0x19;
			case 0x1319A:
				return 0x19;
			case 0x1319B:
				return 0x19;
			case 0x1319C:
				return 0x19;
			case 0x1319D:
				return 0x19;
			case 0x1319E:
				return 0x19;
			case 0x1319F:
				return 0x19;
			case 0x131A0:
				return 0x19;
			case 0x131A1:
				return 0x19;
			case 0x131A2:
				return 0x19;
			case 0x131A3:
				return 0x19;
			case 0x131A4:
				return 0x19;
			case 0x131A5:
				return 0x1A;
			case 0x131A6:
				return 0x19;
			case 0x131A7:
				return 0x19;
			case 0x131A8:
				return 0x19;
			case 0x131A9:
				return 0x19;
			case 0x131AA:
				return 0x1A;
			case 0x131AB:
				return 0x19;
			case 0x131AC:
				return 0x19;
			case 0x131AD:
				return 0x19;
			case 0x131AE:
				return 0x1A;
			case 0x131AF:
				return 0x1A;
			case 0x131B0:
				return 0x19;
			case 0x131B1:
				return 0x19;
			case 0x131B2:
				return 0x1A;
			case 0x131B3:
				return 0x19;
			case 0x131B4:
				return 0x19;
			case 0x131B5:
				return 0x19;
			case 0x131B6:
				return 0x19;
			case 0x131B7:
				return 0x19;
			case 0x131B8:
				return 0x19;
			case 0x131B9:
				return 0x19;
			case 0x131BA:
				return 0x1A;
			case 0x131BB:
				return 0x19;
			case 0x131BC:
				return 0x19;
			case 0x131BD:
				return 0x1A;
			case 0x131BE:
				return 0x1A;
			case 0x131BF:
				return 0x1A;
			case 0x131C0:
				return 0x1A;
			case 0x131C1:
				return 0x1A;
			case 0x131C2:
				return 0x1A;
			case 0x131C3:
				return 0x1A;
			case 0x131C4:
				return 0x1A;
			case 0x131C5:
				return 0x19;
			case 0x131C6:
				return 0x19;
			case 0x131C7:
				return 0x19;
			case 0x131C8:
				return 0x1A;
			case 0x131C9:
				return 0x19;
			case 0x131CA:
				return 0x1A;
			case 0x131CB:
				return 0x19;
			case 0x131CC:
				return 0x1A;
			case 0x131CD:
				return 0x19;
			case 0x131CE:
				return 0x19;
			case 0x131CF:
				return 0x19;
			case 0x131D0:
				return 0x19;
			case 0x131D1:
				return 0x19;
			case 0x131D2:
				return 0x1A;
			case 0x131D3:
				return 0x19;
			case 0x131D4:
				return 0x19;
			case 0x131D5:
				return 0x1A;
			case 0x131D6:
				return 0x19;
			case 0x131D7:
				return 0x19;
			case 0x131D8:
				return 0x19;
			case 0x131D9:
				return 0x19;
			case 0x131DA:
				return 0x1A;
			case 0x131DB:
				return 0x19;
			case 0x131DC:
				return 0x19;
			case 0x131DD:
				return 0x19;
			case 0x131DE:
				return 0x1A;
			case 0x131DF:
				return 0x19;
			case 0x131E0:
				return 0x19;
			case 0x131E1:
				return 0x1A;
			case 0x131E2:
				return 0x1A;
			case 0x131E3:
				return 0x19;
			case 0x131E4:
				return 0x19;
			case 0x131E5:
				return 0x19;
			case 0x131E6:
				return 0x19;
			case 0x131E7:
				return 0x19;
			case 0x131E8:
				return 0x19;
			case 0x131E9:
				return 0x19;
			case 0x131EA:
				return 0x1A;
			case 0x131EB:
				return 0x19;
			case 0x131EC:
				return 0x19;
			case 0x131ED:
				return 0x19;
			case 0x131EE:
				return 0x19;
			case 0x131EF:
				return 0x19;
			case 0x131F0:
				return 0x19;
			case 0x131F1:
				return 0x19;
			case 0x131F2:
				return 0x19;
			case 0x131F3:
				return 0x19;
			case 0x131F4:
				return 0x19;
			case 0x131F5:
				return 0x19;
			case 0x131F6:
				return 0x19;
			case 0x131F7:
				return 0x19;
			case 0x131F8:
				return 0x19;
			case 0x131F9:
				return 0x19;
			case 0x131FA:
				return 0x19;
			case 0x131FB:
				return 0x19;
			case 0x131FC:
				return 0x19;
			case 0x131FD:
				return 0x19;
			case 0x131FE:
				return 0x19;
			case 0x131FF:
				return 0x19;
			case 0x13200:
				return 0x19;
			case 0x13201:
				return 0x1A;
			case 0x13202:
				return 0x1A;
			case 0x13203:
				return 0x19;
			case 0x13204:
				return 0x19;
			case 0x13205:
				return 0x19;
			case 0x13206:
				return 0x19;
			case 0x13207:
				return 0x19;
			case 0x13208:
				return 0x19;
			case 0x13209:
				return 0x19;
			case 0x1320A:
				return 0x1A;
			case 0x1320B:
				return 0x19;
			case 0x1320C:
				return 0x19;
			case 0x1320D:
				return 0x19;
			case 0x1320E:
				return 0x19;
			case 0x1320F:
				return 0x19;
			case 0x13210:
				return 0x19;
			case 0x13211:
				return 0x19;
			case 0x13212:
				return 0x19;
			case 0x13213:
				return 0x1A;
			case 0x13214:
				return 0x19;
			case 0x13215:
				return 0x1A;
			case 0x13216:
				return 0x19;
			case 0x13217:
				return 0x1A;
			case 0x13218:
				return 0x19;
			case 0x13219:
				return 0x19;
			case 0x1321A:
				return 0x1A;
			case 0x1321B:
				return 0x19;
			case 0x1321C:
				return 0x19;
			case 0x1321D:
				return 0x19;
			case 0x1321E:
				return 0x19;
			case 0x1321F:
				return 0x19;
			case 0x13220:
				return 0x1A;
			case 0x13221:
				return 0x1A;
			case 0x13222:
				return 0x1A;
			case 0x13223:
				return 0x1A;
			case 0x13224:
				return 0x1A;
			case 0x13225:
				return 0x1B;
			case 0x13226:
				return 0x1A;
			case 0x13227:
				return 0x1A;
			case 0x13228:
				return 0x1A;
			case 0x13229:
				return 0x1A;
			case 0x1322A:
				return 0x1A;
			case 0x1322B:
				return 0x1A;
			case 0x1322C:
				return 0x1A;
			case 0x1322D:
				return 0x1A;
			case 0x1322E:
				return 0x1A;
			case 0x1322F:
				return 0x1A;
			case 0x13230:
				return 0x1A;
			case 0x13231:
				return 0x1A;
			case 0x13232:
				return 0x1B;
			case 0x13233:
				return 0x1A;
			case 0x13234:
				return 0x1A;
			case 0x13235:
				return 0x1A;
			case 0x13236:
				return 0x1A;
			case 0x13237:
				return 0x1A;
			case 0x13238:
				return 0x1A;
			case 0x13239:
				return 0x1A;
			case 0x1323A:
				return 0x1A;
			case 0x1323B:
				return 0x1A;
			case 0x1323C:
				return 0x1A;
			case 0x1323D:
				return 0x1A;
			case 0x1323E:
				return 0x1A;
			case 0x1323F:
				return 0x1A;
			case 0x13240:
				return 0x1B;
			case 0x13241:
				return 0x1A;
			case 0x13242:
				return 0x1B;
			case 0x13243:
				return 0x1A;
			case 0x13244:
				return 0x1A;
			case 0x13245:
				return 0x1A;
			case 0x13246:
				return 0x1A;
			case 0x13247:
				return 0x1A;
			case 0x13248:
				return 0x1A;
			case 0x13249:
				return 0x1A;
			case 0x1324A:
				return 0x1B;
			case 0x1324B:
				return 0x1A;
			case 0x1324C:
				return 0x1A;
			case 0x1324D:
				return 0x1A;
			case 0x1324E:
				return 0x1A;
			case 0x1324F:
				return 0x1B;
			case 0x13250:
				return 0x19;
			case 0x13251:
				return 0x1A;
			case 0x13252:
				return 0x19;
			case 0x13253:
				return 0x19;
			case 0x13254:
				return 0x19;
			case 0x13255:
				return 0x19;
			case 0x13256:
				return 0x1A;
			case 0x13257:
				return 0x19;
			case 0x13258:
				return 0x1A;
			case 0x13259:
				return 0x1A;
			case 0x1325A:
				return 0x1A;
			case 0x1325B:
				return 0x1A;
			case 0x1325C:
				return 0x1A;
			case 0x1325D:
				return 0x1A;
			case 0x1325E:
				return 0x19;
			case 0x1325F:
				return 0x19;
			case 0x13260:
				return 0x19;
			case 0x13261:
				return 0x19;
			case 0x13262:
				return 0x1A;
			case 0x13263:
				return 0x1A;
			case 0x13264:
				return 0x1A;
			case 0x13265:
				return 0x19;
			case 0x13266:
				return 0x19;
			case 0x13267:
				return 0x19;
			case 0x13268:
				return 0x19;
			case 0x13269:
				return 0x19;
			case 0x1326A:
				return 0x19;
			case 0x1326B:
				return 0x19;
			case 0x1326C:
				return 0x19;
			case 0x1326D:
				return 0x19;
			case 0x1326E:
				return 0x1A;
			case 0x1326F:
				return 0x19;
			case 0x13270:
				return 0x1A;
			case 0x13271:
				return 0x19;
			case 0x13272:
				return 0x19;
			case 0x13273:
				return 0x19;
			case 0x13274:
				return 0x19;
			case 0x13275:
				return 0x1A;
			case 0x13276:
				return 0x19;
			case 0x13277:
				return 0x1A;
			case 0x13278:
				return 0x19;
			case 0x13279:
				return 0x19;
			case 0x1327A:
				return 0x19;
			case 0x1327B:
				return 0x19;
			case 0x1327C:
				return 0x1A;
			case 0x1327D:
				return 0x19;
			case 0x1327E:
				return 0x1A;
			case 0x1327F:
				return 0x19;
			case 0x13280:
				return 0x19;
			case 0x13281:
				return 0x19;
			case 0x13282:
				return 0x1A;
			case 0x13283:
				return 0x19;
			case 0x13284:
				return 0x19;
			case 0x13285:
				return 0x19;
			case 0x13286:
				return 0x1A;
			case 0x13287:
				return 0x1A;
			case 0x13288:
				return 0x1A;
			case 0x13289:
				return 0x1A;
			case 0x1328A:
				return 0x19;
			case 0x1328B:
				return 0x19;
			case 0x1328C:
				return 0x19;
			case 0x1328D:
				return 0x19;
			case 0x1328E:
				return 0x19;
			case 0x1328F:
				return 0x19;
			case 0x13290:
				return 0x19;
			case 0x13291:
				return 0x19;
			case 0x13292:
				return 0x19;
			case 0x13293:
				return 0x19;
			case 0x13294:
				return 0x19;
			case 0x13295:
				return 0x19;
			case 0x13296:
				return 0x19;
			case 0x13297:
				return 0x19;
			case 0x13298:
				return 0x1A;
			case 0x13299:
				return 0x1A;
			case 0x1329A:
				return 0x19;
			case 0x1329B:
				return 0x19;
			case 0x1329C:
				return 0x1A;
			case 0x1329D:
				return 0x19;
			case 0x1329E:
				return 0x19;
			case 0x1329F:
				return 0x1A;
			case 0x132A0:
				return 0x19;
			case 0x132A1:
				return 0x19;
			case 0x132A2:
				return 0x19;
			case 0x132A3:
				return 0x19;
			case 0x132A4:
				return 0x19;
			case 0x132A5:
				return 0x19;
			case 0x132A6:
				return 0x19;
			case 0x132A7:
				return 0x19;
			case 0x132A8:
				return 0x19;
			case 0x132A9:
				return 0x19;
			case 0x132AA:
				return 0x19;
			case 0x132AB:
				return 0x19;
			case 0x132AC:
				return 0x19;
			case 0x132AD:
				return 0x19;
			case 0x132AE:
				return 0x19;
			case 0x132AF:
				return 0x19;
			case 0x132B0:
				return 0x19;
			case 0x132B1:
				return 0x1A;
			case 0x132B2:
				return 0x19;
			case 0x132B3:
				return 0x1A;
			case 0x132B4:
				return 0x1A;
			case 0x132B5:
				return 0x19;
			case 0x132B6:
				return 0x19;
			case 0x132B7:
				return 0x19;
			case 0x132B8:
				return 0x19;
			case 0x132B9:
				return 0x19;
			case 0x132BA:
				return 0x19;
			case 0x132BB:
				return 0x19;
			case 0x132BC:
				return 0x1A;
			case 0x132BD:
				return 0x19;
			case 0x132BE:
				return 0x19;
			case 0x132BF:
				return 0x19;
			case 0x132C0:
				return 0x19;
			case 0x132C1:
				return 0x19;
			case 0x132C2:
				return 0x19;
			case 0x132C3:
				return 0x1A;
			case 0x132C4:
				return 0x19;
			case 0x132C5:
				return 0x19;
			case 0x132C6:
				return 0x19;
			case 0x132C7:
				return 0x19;
			case 0x132C8:
				return 0x19;
			case 0x132C9:
				return 0x19;
			case 0x132CA:
				return 0x19;
			case 0x132CB:
				return 0x19;
			case 0x132CC:
				return 0x19;
			case 0x132CD:
				return 0x19;
			case 0x132CE:
				return 0x19;
			case 0x132CF:
				return 0x19;
			case 0x132D0:
				return 0x19;
			case 0x132D1:
				return 0x19;
			case 0x132D2:
				return 0x19;
			case 0x132D3:
				return 0x1A;
			case 0x132D4:
				return 0x19;
			case 0x132D5:
				return 0x19;
			case 0x132D6:
				return 0x19;
			case 0x132D7:
				return 0x19;
			case 0x132D8:
				return 0x1A;
			case 0x132D9:
				return 0x19;
			case 0x132DA:
				return 0x19;
			case 0x132DB:
				return 0x19;
			case 0x132DC:
				return 0x19;
			case 0x132DD:
				return 0x19;
			case 0x132DE:
				return 0x19;
			case 0x132DF:
				return 0x19;
			case 0x132E0:
				return 0x19;
			case 0x132E1:
				return 0x1A;
			case 0x132E2:
				return 0x1A;
			case 0x132E3:
				return 0x19;
			case 0x132E4:
				return 0x19;
			case 0x132E5:
				return 0x19;
			case 0x132E6:
				return 0x1A;
			case 0x132E7:
				return 0x19;
			case 0x132E8:
				return 0x19;
			case 0x132E9:
				return 0x19;
			case 0x132EA:
				return 0x19;
			case 0x132EB:
				return 0x19;
			case 0x132EC:
				return 0x19;
			case 0x132ED:
				return 0x19;
			case 0x132EE:
				return 0x19;
			case 0x132EF:
				return 0x19;
			case 0x132F0:
				return 0x1A;
			case 0x132F1:
				return 0x1A;
			case 0x132F2:
				return 0x19;
			case 0x132F3:
				return 0x19;
			case 0x132F4:
				return 0x19;
			case 0x132F5:
				return 0x19;
			case 0x132F6:
				return 0x19;
			case 0x132F7:
				return 0x19;
			case 0x132F8:
				return 0x19;
			case 0x132F9:
				return 0x19;
			case 0x132FA:
				return 0x19;
			case 0x132FB:
				return 0x1A;
			case 0x132FC:
				return 0x19;
			case 0x132FD:
				return 0x19;
			case 0x132FE:
				return 0x19;
			case 0x132FF:
				return 0x19;
			case 0x13300:
				return 0x19;
			case 0x13301:
				return 0x19;
			case 0x13302:
				return 0x19;
			case 0x13303:
				return 0x19;
			case 0x13304:
				return 0x19;
			case 0x13305:
				return 0x19;
			case 0x13306:
				return 0x19;
			case 0x13307:
				return 0x19;
			case 0x13308:
				return 0x19;
			case 0x13309:
				return 0x19;
			case 0x1330A:
				return 0x1A;
			case 0x1330B:
				return 0x19;
			case 0x1330C:
				return 0x19;
			case 0x1330D:
				return 0x19;
			case 0x1330E:
				return 0x19;
			case 0x1330F:
				return 0x1A;
			case 0x13310:
				return 0x19;
			case 0x13311:
				return 0x1A;
			case 0x13312:
				return 0x19;
			case 0x13313:
				return 0x1A;
			case 0x13314:
				return 0x19;
			case 0x13315:
				return 0x19;
			case 0x13316:
				return 0x1A;
			case 0x13317:
				return 0x19;
			case 0x13318:
				return 0x19;
			case 0x13319:
				return 0x19;
			case 0x1331A:
				return 0x19;
			case 0x1331B:
				return 0x19;
			case 0x1331C:
				return 0x1A;
			case 0x1331D:
				return 0x19;
			case 0x1331E:
				return 0x19;
			case 0x1331F:
				return 0x19;
			case 0x13320:
				return 0x19;
			case 0x13321:
				return 0x19;
			case 0x13322:
				return 0x19;
			case 0x13323:
				return 0x19;
			case 0x13324:
				return 0x19;
			case 0x13325:
				return 0x19;
			case 0x13326:
				return 0x19;
			case 0x13327:
				return 0x19;
			case 0x13328:
				return 0x19;
			case 0x13329:
				return 0x19;
			case 0x1332A:
				return 0x19;
			case 0x1332B:
				return 0x19;
			case 0x1332C:
				return 0x19;
			case 0x1332D:
				return 0x1A;
			case 0x1332E:
				return 0x19;
			case 0x1332F:
				return 0x1A;
			case 0x13330:
				return 0x19;
			case 0x13331:
				return 0x19;
			case 0x13332:
				return 0x19;
			case 0x13333:
				return 0x19;
			case 0x13334:
				return 0x19;
			case 0x13335:
				return 0x19;
			case 0x13336:
				return 0x19;
			case 0x13337:
				return 0x19;
			case 0x13338:
				return 0x19;
			case 0x13339:
				return 0x1A;
			case 0x1333A:
				return 0x1A;
			case 0x1333B:
				return 0x19;
			case 0x1333C:
				return 0x19;
			case 0x1333D:
				return 0x19;
			case 0x1333E:
				return 0x19;
			case 0x1333F:
				return 0x19;
			case 0x13340:
				return 0x19;
			case 0x13341:
				return 0x19;
			case 0x13342:
				return 0x19;
			case 0x13343:
				return 0x19;
			case 0x13344:
				return 0x19;
			case 0x13345:
				return 0x19;
			case 0x13346:
				return 0x19;
			case 0x13347:
				return 0x19;
			case 0x13348:
				return 0x19;
			case 0x13349:
				return 0x19;
			case 0x1334A:
				return 0x19;
			case 0x1334B:
				return 0x19;
			case 0x1334C:
				return 0x1A;
			case 0x1334D:
				return 0x19;
			case 0x1334E:
				return 0x19;
			case 0x1334F:
				return 0x19;
			case 0x13350:
				return 0x19;
			case 0x13351:
				return 0x19;
			case 0x13352:
				return 0x19;
			case 0x13353:
				return 0x1A;
			case 0x13354:
				return 0x19;
			case 0x13355:
				return 0x19;
			case 0x13356:
				return 0x19;
			case 0x13357:
				return 0x1A;
			case 0x13358:
				return 0x19;
			case 0x13359:
				return 0x19;
			case 0x1335A:
				return 0x19;
			case 0x1335B:
				return 0x19;
			case 0x1335C:
				return 0x19;
			case 0x1335D:
				return 0x19;
			case 0x1335E:
				return 0x19;
			case 0x1335F:
				return 0x19;
			case 0x13360:
				return 0x19;
			case 0x13361:
				return 0x19;
			case 0x13362:
				return 0x19;
			case 0x13363:
				return 0x1A;
			case 0x13364:
				return 0x1A;
			case 0x13365:
				return 0x1A;
			case 0x13366:
				return 0x1A;
			case 0x13367:
				return 0x1A;
			case 0x13368:
				return 0x1A;
			case 0x13369:
				return 0x1A;
			case 0x1336A:
				return 0x1A;
			case 0x1336B:
				return 0x1A;
			case 0x1336C:
				return 0x19;
			case 0x1336D:
				return 0x1A;
			case 0x1336E:
				return 0x19;
			case 0x1336F:
				return 0x19;
			case 0x13370:
				return 0x19;
			case 0x13371:
				return 0x19;
			case 0x13372:
				return 0x19;
			case 0x13373:
				return 0x1A;
			case 0x13374:
				return 0x1A;
			case 0x13375:
				return 0x19;
			case 0x13376:
				return 0x19;
			case 0x13377:
				return 0x19;
			case 0x13378:
				return 0x19;
			case 0x13379:
				return 0x1A;
			case 0x1337A:
				return 0x1A;
			case 0x1337B:
				return 0x1A;
			case 0x1337C:
				return 0x19;
			case 0x1337D:
				return 0x1A;
			case 0x1337E:
				return 0x1A;
			case 0x1337F:
				return 0x19;
			case 0x13380:
				return 0x19;
			case 0x13381:
				return 0x19;
			case 0x13382:
				return 0x19;
			case 0x13383:
				return 0x19;
			case 0x13384:
				return 0x19;
			case 0x13385:
				return 0x19;
			case 0x13386:
				return 0x19;
			case 0x13387:
				return 0x1A;
			case 0x13388:
				return 0x1A;
			case 0x13389:
				return 0x1A;
			case 0x1338A:
				return 0x1A;
			case 0x1338B:
				return 0x1A;
			case 0x1338C:
				return 0x1A;
			case 0x1338D:
				return 0x1A;
			case 0x1338E:
				return 0x1A;
			case 0x1338F:
				return 0x1A;
			case 0x13390:
				return 0x1A;
			case 0x13391:
				return 0x1A;
			case 0x13392:
				return 0x1A;
			case 0x13393:
				return 0x19;
			case 0x13394:
				return 0x19;
			case 0x13395:
				return 0x19;
			case 0x13396:
				return 0x1A;
			case 0x13397:
				return 0x19;
			case 0x13398:
				return 0x19;
			case 0x13399:
				return 0x19;
			case 0x1339A:
				return 0x19;
			case 0x1339B:
				return 0x19;
			case 0x1339C:
				return 0x1A;
			case 0x1339D:
				return 0x19;
			case 0x1339E:
				return 0x1A;
			case 0x1339F:
				return 0x19;
			case 0x133A0:
				return 0x1A;
			case 0x133A1:
				return 0x19;
			case 0x133A2:
				return 0x1A;
			case 0x133A3:
				return 0x19;
			case 0x133A4:
				return 0x19;
			case 0x133A5:
				return 0x1A;
			case 0x133A6:
				return 0x19;
			case 0x133A7:
				return 0x19;
			case 0x133A8:
				return 0x19;
			case 0x133A9:
				return 0x19;
			case 0x133AA:
				return 0x1A;
			case 0x133AB:
				return 0x19;
			case 0x133AC:
				return 0x19;
			case 0x133AD:
				return 0x19;
			case 0x133AE:
				return 0x1A;
			case 0x133AF:
				return 0x19;
			case 0x133B0:
				return 0x19;
			case 0x133B1:
				return 0x19;
			case 0x133B2:
				return 0x1A;
			case 0x133B3:
				return 0x19;
			case 0x133B4:
				return 0x19;
			case 0x133B5:
				return 0x19;
			case 0x133B6:
				return 0x19;
			case 0x133B7:
				return 0x19;
			case 0x133B8:
				return 0x19;
			case 0x133B9:
				return 0x1A;
			case 0x133BA:
				return 0x19;
			case 0x133BB:
				return 0x1A;
			case 0x133BC:
				return 0x19;
			case 0x133BD:
				return 0x19;
			case 0x133BE:
				return 0x19;
			case 0x133BF:
				return 0x19;
			case 0x133C0:
				return 0x1A;
			case 0x133C1:
				return 0x19;
			case 0x133C2:
				return 0x19;
			case 0x133C3:
				return 0x19;
			case 0x133C4:
				return 0x1A;
			case 0x133C5:
				return 0x19;
			case 0x133C6:
				return 0x1A;
			case 0x133C7:
				return 0x19;
			case 0x133C8:
				return 0x19;
			case 0x133C9:
				return 0x19;
			case 0x133CA:
				return 0x19;
			case 0x133CB:
				return 0x19;
			case 0x133CC:
				return 0x19;
			case 0x133CD:
				return 0x1A;
			case 0x133CE:
				return 0x19;
			case 0x133CF:
				return 0x19;
			case 0x133D0:
				return 0x19;
			case 0x133D1:
				return 0x19;
			case 0x133D2:
				return 0x19;
			case 0x133D3:
				return 0x1A;
			case 0x133D4:
				return 0x1A;
			case 0x133D5:
				return 0x19;
			case 0x133D6:
				return 0x19;
			case 0x133D7:
				return 0x1A;
			case 0x133D8:
				return 0x19;
			case 0x133D9:
				return 0x19;
			case 0x133DA:
				return 0x1A;
			case 0x133DB:
				return 0x19;
			case 0x133DC:
				return 0x1A;
			case 0x133DD:
				return 0x19;
			case 0x133DE:
				return 0x19;
			case 0x133DF:
				return 0x19;
			case 0x133E0:
				return 0x19;
			case 0x133E1:
				return 0x19;
			case 0x133E2:
				return 0x19;
			case 0x133E3:
				return 0x19;
			case 0x133E4:
				return 0x19;
			case 0x133E5:
				return 0x19;
			case 0x133E6:
				return 0x1A;
			case 0x133E7:
				return 0x1A;
			case 0x133E8:
				return 0x1A;
			case 0x133E9:
				return 0x1A;
			case 0x133EA:
				return 0x19;
			case 0x133EB:
				return 0x1A;
			case 0x133EC:
				return 0x1A;
			case 0x133ED:
				return 0x19;
			case 0x133EE:
				return 0x1A;
			case 0x133EF:
				return 0x19;
			case 0x133F0:
				return 0x1A;
			case 0x133F1:
				return 0x19;
			case 0x133F2:
				return 0x19;
			case 0x133F3:
				return 0x19;
			case 0x133F4:
				return 0x19;
			case 0x133F5:
				return 0x19;
			case 0x133F6:
				return 0x19;
			case 0x133F7:
				return 0x19;
			case 0x133F8:
				return 0x19;
			case 0x133F9:
				return 0x19;
			case 0x133FA:
				return 0x19;
			case 0x133FB:
				return 0x1A;
			case 0x133FC:
				return 0x1A;
			case 0x133FD:
				return 0x1A;
			case 0x133FE:
				return 0x1A;
			case 0x133FF:
				return 0x1A;
			case 0x13400:
				return 0x1A;
			case 0x13401:
				return 0x1A;
			case 0x13402:
				return 0x1A;
			case 0x13403:
				return 0x1A;
			case 0x13404:
				return 0x19;
			case 0x13405:
				return 0x1A;
			case 0x13406:
				return 0x1A;
			case 0x13407:
				return 0x1A;
			case 0x13408:
				return 0x1A;
			case 0x13409:
				return 0x1A;
			case 0x1340A:
				return 0x1A;
			case 0x1340B:
				return 0x1A;
			case 0x1340C:
				return 0x1A;
			case 0x1340D:
				return 0x1A;
			case 0x1340E:
				return 0x1A;
			case 0x1340F:
				return 0x1A;
			case 0x13410:
				return 0x1A;
			case 0x13411:
				return 0x1A;
			case 0x13412:
				return 0x1A;
			case 0x13413:
				return 0x1A;
			case 0x13414:
				return 0x1B;
			case 0x13415:
				return 0x1B;
			case 0x13416:
				return 0x1A;
			case 0x13417:
				return 0x1A;
			case 0x13418:
				return 0x1A;
			case 0x13419:
				return 0x1A;
			case 0x1341A:
				return 0x1A;
			case 0x1341B:
				return 0x1A;
			case 0x1341C:
				return 0x1A;
			case 0x1341D:
				return 0x1A;
			case 0x1341E:
				return 0x1A;
			case 0x1341F:
				return 0x1A;
			case 0x13420:
				return 0x1A;
			case 0x13421:
				return 0x1A;
			case 0x13422:
				return 0x1A;
			case 0x13423:
				return 0x1A;
			case 0x13424:
				return 0x1A;
			case 0x13425:
				return 0x1A;
			case 0x13426:
				return 0x1A;
			case 0x13427:
				return 0x1A;
			case 0x13428:
				return 0x1A;
			case 0x13429:
				return 0x1A;
			case 0x1342A:
				return 0x1A;
			case 0x1342B:
				return 0x1A;
			case 0x1342C:
				return 0x1A;
			case 0x1342D:
				return 0x1A;
			case 0x1342E:
				return 0x1A;
			case 0x13430:
				return 0x24;
			case 0x13431:
				return 0x26;
			case 0x13432:
				return 0x28;
			case 0x13433:
				return 0x2B;
			case 0x13434:
				return 0x26;
			case 0x13435:
				return 0x29;
			case 0x13436:
				return 0x23;
			case 0x13437:
				return 0x22;
			case 0x13438:
				return 0x20;
			case 0x14400:
				return 0x1A;
			case 0x14401:
				return 0x1A;
			case 0x14402:
				return 0x1A;
			case 0x14403:
				return 0x1A;
			case 0x14404:
				return 0x1A;
			case 0x14405:
				return 0x1A;
			case 0x14406:
				return 0x1A;
			case 0x14407:
				return 0x1A;
			case 0x14408:
				return 0x1A;
			case 0x14409:
				return 0x1A;
			case 0x1440A:
				return 0x1B;
			case 0x1440B:
				return 0x1A;
			case 0x1440C:
				return 0x1A;
			case 0x1440D:
				return 0x1A;
			case 0x1440E:
				return 0x1A;
			case 0x1440F:
				return 0x1A;
			case 0x14410:
				return 0x1A;
			case 0x14411:
				return 0x1A;
			case 0x14412:
				return 0x1A;
			case 0x14413:
				return 0x1A;
			case 0x14414:
				return 0x1A;
			case 0x14415:
				return 0x1A;
			case 0x14416:
				return 0x1A;
			case 0x14417:
				return 0x1A;
			case 0x14418:
				return 0x1A;
			case 0x14419:
				return 0x1A;
			case 0x1441A:
				return 0x1A;
			case 0x1441B:
				return 0x1B;
			case 0x1441C:
				return 0x1A;
			case 0x1441D:
				return 0x1A;
			case 0x1441E:
				return 0x1A;
			case 0x1441F:
				return 0x1A;
			case 0x14420:
				return 0x1A;
			case 0x14421:
				return 0x1A;
			case 0x14422:
				return 0x1A;
			case 0x14423:
				return 0x1A;
			case 0x14424:
				return 0x1A;
			case 0x14425:
				return 0x1A;
			case 0x14426:
				return 0x1A;
			case 0x14427:
				return 0x1A;
			case 0x14428:
				return 0x1A;
			case 0x14429:
				return 0x1B;
			case 0x1442A:
				return 0x1A;
			case 0x1442B:
				return 0x1A;
			case 0x1442C:
				return 0x1B;
			case 0x1442D:
				return 0x1A;
			case 0x1442E:
				return 0x1A;
			case 0x1442F:
				return 0x1A;
			case 0x14430:
				return 0x1A;
			case 0x14431:
				return 0x1B;
			case 0x14432:
				return 0x1A;
			case 0x14433:
				return 0x1B;
			case 0x14434:
				return 0x1B;
			case 0x14435:
				return 0x1A;
			case 0x14436:
				return 0x1A;
			case 0x14437:
				return 0x1A;
			case 0x14438:
				return 0x1A;
			case 0x14439:
				return 0x1A;
			case 0x1443A:
				return 0x1A;
			case 0x1443B:
				return 0x1A;
			case 0x1443C:
				return 0x1A;
			case 0x1443D:
				return 0x1A;
			case 0x1443E:
				return 0x1A;
			case 0x1443F:
				return 0x1A;
			case 0x14440:
				return 0x1A;
			case 0x14441:
				return 0x1A;
			case 0x14442:
				return 0x1A;
			case 0x14443:
				return 0x1A;
			case 0x14444:
				return 0x1A;
			case 0x14445:
				return 0x1A;
			case 0x14446:
				return 0x1A;
			case 0x14447:
				return 0x1A;
			case 0x14448:
				return 0x1A;
			case 0x14449:
				return 0x1B;
			case 0x1444A:
				return 0x1B;
			case 0x1444B:
				return 0x1B;
			case 0x1444C:
				return 0x1A;
			case 0x1444D:
				return 0x1A;
			case 0x1444E:
				return 0x1A;
			case 0x1444F:
				return 0x1A;
			case 0x14450:
				return 0x1A;
			case 0x14451:
				return 0x1A;
			case 0x14452:
				return 0x1A;
			case 0x14453:
				return 0x1A;
			case 0x14454:
				return 0x1A;
			case 0x14455:
				return 0x1A;
			case 0x14456:
				return 0x1A;
			case 0x14457:
				return 0x1A;
			case 0x14458:
				return 0x1A;
			case 0x14459:
				return 0x1A;
			case 0x1445A:
				return 0x1A;
			case 0x1445B:
				return 0x1A;
			case 0x1445C:
				return 0x1A;
			case 0x1445D:
				return 0x1A;
			case 0x1445E:
				return 0x1A;
			case 0x1445F:
				return 0x1A;
			case 0x14460:
				return 0x1A;
			case 0x14461:
				return 0x1A;
			case 0x14462:
				return 0x1A;
			case 0x14463:
				return 0x1A;
			case 0x14464:
				return 0x1A;
			case 0x14465:
				return 0x1A;
			case 0x14466:
				return 0x1A;
			case 0x14467:
				return 0x1A;
			case 0x14468:
				return 0x1A;
			case 0x14469:
				return 0x1A;
			case 0x1446A:
				return 0x1A;
			case 0x1446B:
				return 0x1B;
			case 0x1446C:
				return 0x1A;
			case 0x1446D:
				return 0x1B;
			case 0x1446E:
				return 0x1A;
			case 0x1446F:
				return 0x1A;
			case 0x14470:
				return 0x1B;
			case 0x14471:
				return 0x1A;
			case 0x14472:
				return 0x1B;
			case 0x14473:
				return 0x1A;
			case 0x14474:
				return 0x1B;
			case 0x14475:
				return 0x1A;
			case 0x14476:
				return 0x1A;
			case 0x14477:
				return 0x1B;
			case 0x14478:
				return 0x1B;
			case 0x14479:
				return 0x1B;
			case 0x1447A:
				return 0x1A;
			case 0x1447B:
				return 0x1B;
			case 0x1447C:
				return 0x1B;
			case 0x1447D:
				return 0x1A;
			case 0x1447E:
				return 0x1A;
			case 0x1447F:
				return 0x1B;
			case 0x14480:
				return 0x1B;
			case 0x14481:
				return 0x1B;
			case 0x14482:
				return 0x1A;
			case 0x14483:
				return 0x1A;
			case 0x14484:
				return 0x1A;
			case 0x14485:
				return 0x1B;
			case 0x14486:
				return 0x1B;
			case 0x14487:
				return 0x1A;
			case 0x14488:
				return 0x1A;
			case 0x14489:
				return 0x1A;
			case 0x1448A:
				return 0x1A;
			case 0x1448B:
				return 0x1A;
			case 0x1448C:
				return 0x1B;
			case 0x1448D:
				return 0x1A;
			case 0x1448E:
				return 0x1A;
			case 0x1448F:
				return 0x1A;
			case 0x14490:
				return 0x1A;
			case 0x14491:
				return 0x1A;
			case 0x14492:
				return 0x1A;
			case 0x14493:
				return 0x1A;
			case 0x14494:
				return 0x1A;
			case 0x14495:
				return 0x1A;
			case 0x14496:
				return 0x1A;
			case 0x14497:
				return 0x1B;
			case 0x14498:
				return 0x1A;
			case 0x14499:
				return 0x1A;
			case 0x1449A:
				return 0x1A;
			case 0x1449B:
				return 0x1A;
			case 0x1449C:
				return 0x1A;
			case 0x1449D:
				return 0x1A;
			case 0x1449E:
				return 0x1A;
			case 0x1449F:
				return 0x1A;
			case 0x144A0:
				return 0x1A;
			case 0x144A1:
				return 0x1A;
			case 0x144A2:
				return 0x1B;
			case 0x144A3:
				return 0x1A;
			case 0x144A4:
				return 0x1A;
			case 0x144A5:
				return 0x1A;
			case 0x144A6:
				return 0x1A;
			case 0x144A7:
				return 0x1A;
			case 0x144A8:
				return 0x1A;
			case 0x144A9:
				return 0x1A;
			case 0x144AA:
				return 0x1A;
			case 0x144AB:
				return 0x1A;
			case 0x144AC:
				return 0x1A;
			case 0x144AD:
				return 0x1A;
			case 0x144AE:
				return 0x1A;
			case 0x144AF:
				return 0x1A;
			case 0x144B0:
				return 0x1A;
			case 0x144B1:
				return 0x1A;
			case 0x144B2:
				return 0x1A;
			case 0x144B3:
				return 0x1A;
			case 0x144B4:
				return 0x1A;
			case 0x144B5:
				return 0x1A;
			case 0x144B6:
				return 0x1A;
			case 0x144B7:
				return 0x1A;
			case 0x144B8:
				return 0x1A;
			case 0x144B9:
				return 0x1A;
			case 0x144BA:
				return 0x1A;
			case 0x144BB:
				return 0x1A;
			case 0x144BC:
				return 0x1A;
			case 0x144BD:
				return 0x1A;
			case 0x144BE:
				return 0x1A;
			case 0x144BF:
				return 0x1A;
			case 0x144C0:
				return 0x1A;
			case 0x144C1:
				return 0x1A;
			case 0x144C2:
				return 0x1A;
			case 0x144C3:
				return 0x1A;
			case 0x144C4:
				return 0x1A;
			case 0x144C5:
				return 0x1A;
			case 0x144C6:
				return 0x1A;
			case 0x144C7:
				return 0x1A;
			case 0x144C8:
				return 0x1A;
			case 0x144C9:
				return 0x1A;
			case 0x144CA:
				return 0x1A;
			case 0x144CB:
				return 0x1A;
			case 0x144CC:
				return 0x1A;
			case 0x144CD:
				return 0x1A;
			case 0x144CE:
				return 0x1A;
			case 0x144CF:
				return 0x1A;
			case 0x144D0:
				return 0x1A;
			case 0x144D1:
				return 0x1A;
			case 0x144D2:
				return 0x1A;
			case 0x144D3:
				return 0x1A;
			case 0x144D4:
				return 0x1A;
			case 0x144D5:
				return 0x1A;
			case 0x144D6:
				return 0x1A;
			case 0x144D7:
				return 0x1A;
			case 0x144D8:
				return 0x1A;
			case 0x144D9:
				return 0x1A;
			case 0x144DA:
				return 0x1A;
			case 0x144DB:
				return 0x1A;
			case 0x144DC:
				return 0x1A;
			case 0x144DD:
				return 0x1A;
			case 0x144DE:
				return 0x1A;
			case 0x144DF:
				return 0x1A;
			case 0x144E0:
				return 0x1A;
			case 0x144E1:
				return 0x1A;
			case 0x144E2:
				return 0x1A;
			case 0x144E3:
				return 0x1A;
			case 0x144E4:
				return 0x1A;
			case 0x144E5:
				return 0x1A;
			case 0x144E6:
				return 0x1B;
			case 0x144E7:
				return 0x1B;
			case 0x144E8:
				return 0x1A;
			case 0x144E9:
				return 0x1A;
			case 0x144EA:
				return 0x1A;
			case 0x144EB:
				return 0x1A;
			case 0x144EC:
				return 0x1A;
			case 0x144ED:
				return 0x1B;
			case 0x144EE:
				return 0x1A;
			case 0x144EF:
				return 0x1A;
			case 0x144F0:
				return 0x1B;
			case 0x144F1:
				return 0x1A;
			case 0x144F2:
				return 0x1A;
			case 0x144F3:
				return 0x1A;
			case 0x144F4:
				return 0x1A;
			case 0x144F5:
				return 0x1A;
			case 0x144F6:
				return 0x1A;
			case 0x144F7:
				return 0x1B;
			case 0x144F8:
				return 0x1A;
			case 0x144F9:
				return 0x1B;
			case 0x144FA:
				return 0x1A;
			case 0x144FB:
				return 0x1A;
			case 0x144FC:
				return 0x1A;
			case 0x144FD:
				return 0x1A;
			case 0x144FE:
				return 0x1A;
			case 0x144FF:
				return 0x1A;
			case 0x14500:
				return 0x1A;
			case 0x14501:
				return 0x1A;
			case 0x14502:
				return 0x1A;
			case 0x14503:
				return 0x1A;
			case 0x14504:
				return 0x1A;
			case 0x14505:
				return 0x1B;
			case 0x14506:
				return 0x1A;
			case 0x14507:
				return 0x1A;
			case 0x14508:
				return 0x1A;
			case 0x14509:
				return 0x1A;
			case 0x1450A:
				return 0x1A;
			case 0x1450B:
				return 0x1A;
			case 0x1450C:
				return 0x1A;
			case 0x1450D:
				return 0x1A;
			case 0x1450E:
				return 0x1A;
			case 0x1450F:
				return 0x1A;
			case 0x14510:
				return 0x1A;
			case 0x14511:
				return 0x1A;
			case 0x14512:
				return 0x1A;
			case 0x14513:
				return 0x1A;
			case 0x14514:
				return 0x1A;
			case 0x14515:
				return 0x1A;
			case 0x14516:
				return 0x1A;
			case 0x14517:
				return 0x1A;
			case 0x14518:
				return 0x1A;
			case 0x14519:
				return 0x1A;
			case 0x1451A:
				return 0x1A;
			case 0x1451B:
				return 0x1A;
			case 0x1451C:
				return 0x1A;
			case 0x1451D:
				return 0x1A;
			case 0x1451E:
				return 0x1A;
			case 0x1451F:
				return 0x1A;
			case 0x14520:
				return 0x1A;
			case 0x14521:
				return 0x1A;
			case 0x14522:
				return 0x1A;
			case 0x14523:
				return 0x1A;
			case 0x14524:
				return 0x1A;
			case 0x14525:
				return 0x1A;
			case 0x14526:
				return 0x1A;
			case 0x14527:
				return 0x1A;
			case 0x14528:
				return 0x1A;
			case 0x14529:
				return 0x1A;
			case 0x1452A:
				return 0x1A;
			case 0x1452B:
				return 0x1A;
			case 0x1452C:
				return 0x1A;
			case 0x1452D:
				return 0x1A;
			case 0x1452E:
				return 0x1B;
			case 0x1452F:
				return 0x1A;
			case 0x14530:
				return 0x1A;
			case 0x14531:
				return 0x1A;
			case 0x14532:
				return 0x1A;
			case 0x14533:
				return 0x1A;
			case 0x14534:
				return 0x1A;
			case 0x14535:
				return 0x1A;
			case 0x14536:
				return 0x1A;
			case 0x14537:
				return 0x1A;
			case 0x14538:
				return 0x1A;
			case 0x14539:
				return 0x1A;
			case 0x1453A:
				return 0x1A;
			case 0x1453B:
				return 0x1A;
			case 0x1453C:
				return 0x1A;
			case 0x1453D:
				return 0x1A;
			case 0x1453E:
				return 0x1A;
			case 0x1453F:
				return 0x1A;
			case 0x14540:
				return 0x1A;
			case 0x14541:
				return 0x1A;
			case 0x14542:
				return 0x1A;
			case 0x14543:
				return 0x1A;
			case 0x14544:
				return 0x1A;
			case 0x14545:
				return 0x1B;
			case 0x14546:
				return 0x1A;
			case 0x14547:
				return 0x1A;
			case 0x14548:
				return 0x1A;
			case 0x14549:
				return 0x1A;
			case 0x1454A:
				return 0x1A;
			case 0x1454B:
				return 0x1B;
			case 0x1454C:
				return 0x1A;
			case 0x1454D:
				return 0x1A;
			case 0x1454E:
				return 0x1A;
			case 0x1454F:
				return 0x1A;
			case 0x14550:
				return 0x1A;
			case 0x14551:
				return 0x1B;
			case 0x14552:
				return 0x1A;
			case 0x14553:
				return 0x1A;
			case 0x14554:
				return 0x1A;
			case 0x14555:
				return 0x1A;
			case 0x14556:
				return 0x1A;
			case 0x14557:
				return 0x1A;
			case 0x14558:
				return 0x1A;
			case 0x14559:
				return 0x1A;
			case 0x1455A:
				return 0x1A;
			case 0x1455B:
				return 0x1A;
			case 0x1455C:
				return 0x1B;
			case 0x1455D:
				return 0x1A;
			case 0x1455E:
				return 0x1A;
			case 0x1455F:
				return 0x1A;
			case 0x14560:
				return 0x1A;
			case 0x14561:
				return 0x1A;
			case 0x14562:
				return 0x1A;
			case 0x14563:
				return 0x1A;
			case 0x14564:
				return 0x1A;
			case 0x14565:
				return 0x1A;
			case 0x14566:
				return 0x1A;
			case 0x14567:
				return 0x1A;
			case 0x14568:
				return 0x1A;
			case 0x14569:
				return 0x1A;
			case 0x1456A:
				return 0x1A;
			case 0x1456B:
				return 0x1A;
			case 0x1456C:
				return 0x1A;
			case 0x1456D:
				return 0x1A;
			case 0x1456E:
				return 0x1A;
			case 0x1456F:
				return 0x1A;
			case 0x14570:
				return 0x1A;
			case 0x14571:
				return 0x1B;
			case 0x14572:
				return 0x1A;
			case 0x14573:
				return 0x1A;
			case 0x14574:
				return 0x1B;
			case 0x14575:
				return 0x1B;
			case 0x14576:
				return 0x1B;
			case 0x14577:
				return 0x1A;
			case 0x14578:
				return 0x1A;
			case 0x14579:
				return 0x1A;
			case 0x1457A:
				return 0x1A;
			case 0x1457B:
				return 0x1B;
			case 0x1457C:
				return 0x1B;
			case 0x1457D:
				return 0x1B;
			case 0x1457E:
				return 0x1A;
			case 0x1457F:
				return 0x1A;
			case 0x14580:
				return 0x1A;
			case 0x14581:
				return 0x1A;
			case 0x14582:
				return 0x1A;
			case 0x14583:
				return 0x1A;
			case 0x14584:
				return 0x1A;
			case 0x14585:
				return 0x1A;
			case 0x14586:
				return 0x1A;
			case 0x14587:
				return 0x1A;
			case 0x14588:
				return 0x1A;
			case 0x14589:
				return 0x1A;
			case 0x1458A:
				return 0x1A;
			case 0x1458B:
				return 0x1A;
			case 0x1458C:
				return 0x1A;
			case 0x1458D:
				return 0x1A;
			case 0x1458E:
				return 0x1A;
			case 0x1458F:
				return 0x1A;
			case 0x14590:
				return 0x1A;
			case 0x14591:
				return 0x1A;
			case 0x14592:
				return 0x1A;
			case 0x14593:
				return 0x1A;
			case 0x14594:
				return 0x1A;
			case 0x14595:
				return 0x1B;
			case 0x14596:
				return 0x1A;
			case 0x14597:
				return 0x1A;
			case 0x14598:
				return 0x1A;
			case 0x14599:
				return 0x1A;
			case 0x1459A:
				return 0x1A;
			case 0x1459B:
				return 0x1B;
			case 0x1459C:
				return 0x1A;
			case 0x1459D:
				return 0x1A;
			case 0x1459E:
				return 0x1A;
			case 0x1459F:
				return 0x1A;
			case 0x145A0:
				return 0x1B;
			case 0x145A1:
				return 0x1A;
			case 0x145A2:
				return 0x1A;
			case 0x145A3:
				return 0x1A;
			case 0x145A4:
				return 0x1B;
			case 0x145A5:
				return 0x1A;
			case 0x145A6:
				return 0x1A;
			case 0x145A7:
				return 0x1A;
			case 0x145A8:
				return 0x1A;
			case 0x145A9:
				return 0x1A;
			case 0x145AA:
				return 0x1A;
			case 0x145AB:
				return 0x1A;
			case 0x145AC:
				return 0x1A;
			case 0x145AD:
				return 0x1A;
			case 0x145AE:
				return 0x1A;
			case 0x145AF:
				return 0x1B;
			case 0x145B0:
				return 0x1A;
			case 0x145B1:
				return 0x23;
			case 0x145B2:
				return 0x1B;
			case 0x145B3:
				return 0x1A;
			case 0x145B4:
				return 0x1A;
			case 0x145B5:
				return 0x1A;
			case 0x145B6:
				return 0x1B;
			case 0x145B7:
				return 0x1A;
			case 0x145B8:
				return 0x1A;
			case 0x145B9:
				return 0x1A;
			case 0x145BA:
				return 0x1A;
			case 0x145BB:
				return 0x1A;
			case 0x145BC:
				return 0x1A;
			case 0x145BD:
				return 0x20;
			case 0x145BE:
				return 0x1A;
			case 0x145BF:
				return 0x1A;
			case 0x145C0:
				return 0x1A;
			case 0x145C1:
				return 0x1A;
			case 0x145C2:
				return 0x1A;
			case 0x145C3:
				return 0x1A;
			case 0x145C4:
				return 0x1A;
			case 0x145C5:
				return 0x1A;
			case 0x145C6:
				return 0x1A;
			case 0x145C7:
				return 0x1A;
			case 0x145C8:
				return 0x1A;
			case 0x145C9:
				return 0x1A;
			case 0x145CA:
				return 0x1A;
			case 0x145CB:
				return 0x1A;
			case 0x145CC:
				return 0x1A;
			case 0x145CD:
				return 0x1A;
			case 0x145CE:
				return 0x2E;
			case 0x145CF:
				return 0x2D;
			case 0x145D0:
				return 0x1A;
			case 0x145D1:
				return 0x1A;
			case 0x145D2:
				return 0x1A;
			case 0x145D3:
				return 0x1A;
			case 0x145D4:
				return 0x1A;
			case 0x145D5:
				return 0x1A;
			case 0x145D6:
				return 0x1A;
			case 0x145D7:
				return 0x1A;
			case 0x145D8:
				return 0x1A;
			case 0x145D9:
				return 0x1A;
			case 0x145DA:
				return 0x1A;
			case 0x145DB:
				return 0x1A;
			case 0x145DC:
				return 0x1A;
			case 0x145DD:
				return 0x1A;
			case 0x145DE:
				return 0x1A;
			case 0x145DF:
				return 0x1A;
			case 0x145E0:
				return 0x1A;
			case 0x145E1:
				return 0x1A;
			case 0x145E2:
				return 0x1A;
			case 0x145E3:
				return 0x1A;
			case 0x145E4:
				return 0x1A;
			case 0x145E5:
				return 0x1A;
			case 0x145E6:
				return 0x1A;
			case 0x145E7:
				return 0x1A;
			case 0x145E8:
				return 0x1A;
			case 0x145E9:
				return 0x1A;
			case 0x145EA:
				return 0x1A;
			case 0x145EB:
				return 0x1A;
			case 0x145EC:
				return 0x1A;
			case 0x145ED:
				return 0x1A;
			case 0x145EE:
				return 0x1A;
			case 0x145EF:
				return 0x1A;
			case 0x145F0:
				return 0x1A;
			case 0x145F1:
				return 0x1A;
			case 0x145F2:
				return 0x1A;
			case 0x145F3:
				return 0x1A;
			case 0x145F4:
				return 0x1A;
			case 0x145F5:
				return 0x1A;
			case 0x145F6:
				return 0x1A;
			case 0x145F7:
				return 0x1A;
			case 0x145F8:
				return 0x1B;
			case 0x145F9:
				return 0x1A;
			case 0x145FA:
				return 0x1A;
			case 0x145FB:
				return 0x1A;
			case 0x145FC:
				return 0x1A;
			case 0x145FD:
				return 0x1A;
			case 0x145FE:
				return 0x1A;
			case 0x145FF:
				return 0x1A;
			case 0x14600:
				return 0x1B;
			case 0x14601:
				return 0x1A;
			case 0x14602:
				return 0x1A;
			case 0x14603:
				return 0x1A;
			case 0x14604:
				return 0x1A;
			case 0x14605:
				return 0x1A;
			case 0x14606:
				return 0x1A;
			case 0x14607:
				return 0x1A;
			case 0x14608:
				return 0x1A;
			case 0x14609:
				return 0x1A;
			case 0x1460A:
				return 0x1A;
			case 0x1460B:
				return 0x1A;
			case 0x1460C:
				return 0x1A;
			case 0x1460D:
				return 0x1A;
			case 0x1460E:
				return 0x1A;
			case 0x1460F:
				return 0x1A;
			case 0x14610:
				return 0x1A;
			case 0x14611:
				return 0x1A;
			case 0x14612:
				return 0x1A;
			case 0x14613:
				return 0x1A;
			case 0x14614:
				return 0x1A;
			case 0x14615:
				return 0x1A;
			case 0x14616:
				return 0x1A;
			case 0x14617:
				return 0x1A;
			case 0x14618:
				return 0x1A;
			case 0x14619:
				return 0x1A;
			case 0x1461A:
				return 0x1A;
			case 0x1461B:
				return 0x1A;
			case 0x1461C:
				return 0x1A;
			case 0x1461D:
				return 0x1A;
			case 0x1461E:
				return 0x1A;
			case 0x1461F:
				return 0x1A;
			case 0x14620:
				return 0x1A;
			case 0x14621:
				return 0x1A;
			case 0x14622:
				return 0x1A;
			case 0x14623:
				return 0x1A;
			case 0x14624:
				return 0x1A;
			case 0x14625:
				return 0x1A;
			case 0x14626:
				return 0x1A;
			case 0x14627:
				return 0x1A;
			case 0x14628:
				return 0x1A;
			case 0x14629:
				return 0x1A;
			case 0x1462A:
				return 0x1A;
			case 0x1462B:
				return 0x1A;
			case 0x1462C:
				return 0x1A;
			case 0x1462D:
				return 0x1A;
			case 0x1462E:
				return 0x1A;
			case 0x1462F:
				return 0x1A;
			case 0x14630:
				return 0x1A;
			case 0x14631:
				return 0x1A;
			case 0x14632:
				return 0x1A;
			case 0x14633:
				return 0x1A;
			case 0x14634:
				return 0x1A;
			case 0x14635:
				return 0x1A;
			case 0x14636:
				return 0x1A;
			case 0x14637:
				return 0x1A;
			case 0x14638:
				return 0x1A;
			case 0x14639:
				return 0x1A;
			case 0x1463A:
				return 0x1A;
			case 0x1463B:
				return 0x1A;
			case 0x1463C:
				return 0x1A;
			case 0x1463D:
				return 0x1A;
			case 0x1463E:
				return 0x1A;
			case 0x1463F:
				return 0x1A;
			case 0x14640:
				return 0x1A;
			case 0x14641:
				return 0x1A;
			case 0x14642:
				return 0x1A;
			case 0x14643:
				return 0x1A;
			case 0x14644:
				return 0x1A;
			case 0x14645:
				return 0x1A;
			case 0x14646:
				return 0x1A;
			case 0x16800:
				return 0x20;
			case 0x16801:
				return 0x1F;
			case 0x16802:
				return 0x2A;
			case 0x16803:
				return 0x27;
			case 0x16804:
				return 0x1E;
			case 0x16805:
				return 0x20;
			case 0x16806:
				return 0x1F;
			case 0x16807:
				return 0x1E;
			case 0x16808:
				return 0x23;
			case 0x16809:
				return 0x2C;
			case 0x1680A:
				return 0x29;
			case 0x1680B:
				return 0x20;
			case 0x1680C:
				return 0x1F;
			case 0x1680D:
				return 0x1C;
			case 0x1680E:
				return 0x1E;
			case 0x1680F:
				return 0x1D;
			case 0x16810:
				return 0x20;
			case 0x16811:
				return 0x1D;
			case 0x16812:
				return 0x1D;
			case 0x16813:
				return 0x20;
			case 0x16814:
				return 0x1C;
			case 0x16815:
				return 0x19;
			case 0x16816:
				return 0x20;
			case 0x16817:
				return 0x1B;
			case 0x16818:
				return 0x1D;
			case 0x16819:
				return 0x1F;
			case 0x1681A:
				return 0x1D;
			case 0x1681B:
				return 0x1C;
			case 0x1681C:
				return 0x1F;
			case 0x1681D:
				return 0x1D;
			case 0x1681E:
				return 0x22;
			case 0x1681F:
				return 0x1F;
			case 0x16820:
				return 0x1F;
			case 0x16821:
				return 0x22;
			case 0x16822:
				return 0x1F;
			case 0x16823:
				return 0x1A;
			case 0x16824:
				return 0x1C;
			case 0x16825:
				return 0x22;
			case 0x16826:
				return 0x1D;
			case 0x16827:
				return 0x1A;
			case 0x16828:
				return 0x21;
			case 0x16829:
				return 0x22;
			case 0x1682A:
				return 0x19;
			case 0x1682B:
				return 0x1E;
			case 0x1682C:
				return 0x1A;
			case 0x1682D:
				return 0x19;
			case 0x1682E:
				return 0x1B;
			case 0x1682F:
				return 0x1B;
			case 0x16830:
				return 0x1C;
			case 0x16831:
				return 0x1F;
			case 0x16832:
				return 0x1C;
			case 0x16833:
				return 0x19;
			case 0x16834:
				return 0x22;
			case 0x16835:
				return 0x1A;
			case 0x16836:
				return 0x1D;
			case 0x16837:
				return 0x1A;
			case 0x16838:
				return 0x1C;
			case 0x16839:
				return 0x1A;
			case 0x1683A:
				return 0x19;
			case 0x1683B:
				return 0x1A;
			case 0x1683C:
				return 0x19;
			case 0x1683D:
				return 0x1F;
			case 0x1683E:
				return 0x1C;
			case 0x1683F:
				return 0x1A;
			case 0x16840:
				return 0x24;
			case 0x16841:
				return 0x25;
			case 0x16842:
				return 0x1C;
			case 0x16843:
				return 0x1D;
			case 0x16844:
				return 0x1D;
			case 0x16845:
				return 0x1B;
			case 0x16846:
				return 0x1B;
			case 0x16847:
				return 0x1A;
			case 0x16848:
				return 0x1C;
			case 0x16849:
				return 0x1A;
			case 0x1684A:
				return 0x1C;
			case 0x1684B:
				return 0x19;
			case 0x1684C:
				return 0x1A;
			case 0x1684D:
				return 0x1C;
			case 0x1684E:
				return 0x1A;
			case 0x1684F:
				return 0x19;
			case 0x16850:
				return 0x19;
			case 0x16851:
				return 0x1A;
			case 0x16852:
				return 0x19;
			case 0x16853:
				return 0x18;
			case 0x16854:
				return 0x19;
			case 0x16855:
				return 0x19;
			case 0x16856:
				return 0x1A;
			case 0x16857:
				return 0x1C;
			case 0x16858:
				return 0x22;
			case 0x16859:
				return 0x1A;
			case 0x1685A:
				return 0x1C;
			case 0x1685B:
				return 0x1F;
			case 0x1685C:
				return 0x20;
			case 0x1685D:
				return 0x1B;
			case 0x1685E:
				return 0x1C;
			case 0x1685F:
				return 0x1D;
			case 0x16860:
				return 0x19;
			case 0x16861:
				return 0x1C;
			case 0x16862:
				return 0x23;
			case 0x16863:
				return 0x24;
			case 0x16864:
				return 0x22;
			case 0x16865:
				return 0x1E;
			case 0x16866:
				return 0x21;
			case 0x16867:
				return 0x19;
			case 0x16868:
				return 0x1E;
			case 0x16869:
				return 0x1F;
			case 0x1686A:
				return 0x1F;
			case 0x1686B:
				return 0x21;
			case 0x1686C:
				return 0x22;
			case 0x1686D:
				return 0x1F;
			case 0x1686E:
				return 0x1C;
			case 0x1686F:
				return 0x1E;
			case 0x16870:
				return 0x1D;
			case 0x16871:
				return 0x1C;
			case 0x16872:
				return 0x1B;
			case 0x16873:
				return 0x1A;
			case 0x16874:
				return 0x22;
			case 0x16875:
				return 0x1F;
			case 0x16876:
				return 0x1B;
			case 0x16877:
				return 0x1D;
			case 0x16878:
				return 0x1A;
			case 0x16879:
				return 0x1A;
			case 0x1687A:
				return 0x1C;
			case 0x1687B:
				return 0x22;
			case 0x1687C:
				return 0x1C;
			case 0x1687D:
				return 0x19;
			case 0x1687E:
				return 0x1C;
			case 0x1687F:
				return 0x1E;
			case 0x16880:
				return 0x1D;
			case 0x16881:
				return 0x1D;
			case 0x16882:
				return 0x21;
			case 0x16883:
				return 0x1A;
			case 0x16884:
				return 0x1B;
			case 0x16885:
				return 0x19;
			case 0x16886:
				return 0x1C;
			case 0x16887:
				return 0x21;
			case 0x16888:
				return 0x1E;
			case 0x16889:
				return 0x19;
			case 0x1688A:
				return 0x1C;
			case 0x1688B:
				return 0x1A;
			case 0x1688C:
				return 0x18;
			case 0x1688D:
				return 0x19;
			case 0x1688E:
				return 0x1A;
			case 0x1688F:
				return 0x22;
			case 0x16890:
				return 0x19;
			case 0x16891:
				return 0x19;
			case 0x16892:
				return 0x1E;
			case 0x16893:
				return 0x1B;
			case 0x16894:
				return 0x1F;
			case 0x16895:
				return 0x1B;
			case 0x16896:
				return 0x1C;
			case 0x16897:
				return 0x1E;
			case 0x16898:
				return 0x1B;
			case 0x16899:
				return 0x27;
			case 0x1689A:
				return 0x1E;
			case 0x1689B:
				return 0x1B;
			case 0x1689C:
				return 0x1D;
			case 0x1689D:
				return 0x1C;
			case 0x1689E:
				return 0x27;
			case 0x1689F:
				return 0x20;
			case 0x168A0:
				return 0x1A;
			case 0x168A1:
				return 0x1C;
			case 0x168A2:
				return 0x1F;
			case 0x168A3:
				return 0x1B;
			case 0x168A4:
				return 0x1A;
			case 0x168A5:
				return 0x1D;
			case 0x168A6:
				return 0x1A;
			case 0x168A7:
				return 0x1A;
			case 0x168A8:
				return 0x1C;
			case 0x168A9:
				return 0x19;
			case 0x168AA:
				return 0x1A;
			case 0x168AB:
				return 0x1B;
			case 0x168AC:
				return 0x1D;
			case 0x168AD:
				return 0x1B;
			case 0x168AE:
				return 0x1E;
			case 0x168AF:
				return 0x1B;
			case 0x168B0:
				return 0x22;
			case 0x168B1:
				return 0x1A;
			case 0x168B2:
				return 0x1E;
			case 0x168B3:
				return 0x20;
			case 0x168B4:
				return 0x1A;
			case 0x168B5:
				return 0x1C;
			case 0x168B6:
				return 0x19;
			case 0x168B7:
				return 0x1E;
			case 0x168B8:
				return 0x1D;
			case 0x168B9:
				return 0x1E;
			case 0x168BA:
				return 0x1D;
			case 0x168BB:
				return 0x1B;
			case 0x168BC:
				return 0x19;
			case 0x168BD:
				return 0x1B;
			case 0x168BE:
				return 0x19;
			case 0x168BF:
				return 0x1B;
			case 0x168C0:
				return 0x1A;
			case 0x168C1:
				return 0x1E;
			case 0x168C2:
				return 0x1C;
			case 0x168C3:
				return 0x18;
			case 0x168C4:
				return 0x1B;
			case 0x168C5:
				return 0x19;
			case 0x168C6:
				return 0x1D;
			case 0x168C7:
				return 0x20;
			case 0x168C8:
				return 0x1C;
			case 0x168C9:
				return 0x19;
			case 0x168CA:
				return 0x1A;
			case 0x168CB:
				return 0x1B;
			case 0x168CC:
				return 0x1C;
			case 0x168CD:
				return 0x18;
			case 0x168CE:
				return 0x19;
			case 0x168CF:
				return 0x1A;
			case 0x168D0:
				return 0x1A;
			case 0x168D1:
				return 0x19;
			case 0x168D2:
				return 0x1D;
			case 0x168D3:
				return 0x1A;
			case 0x168D4:
				return 0x1A;
			case 0x168D5:
				return 0x22;
			case 0x168D6:
				return 0x1A;
			case 0x168D7:
				return 0x1A;
			case 0x168D8:
				return 0x1E;
			case 0x168D9:
				return 0x19;
			case 0x168DA:
				return 0x1A;
			case 0x168DB:
				return 0x1B;
			case 0x168DC:
				return 0x1C;
			case 0x168DD:
				return 0x19;
			case 0x168DE:
				return 0x1C;
			case 0x168DF:
				return 0x1C;
			case 0x168E0:
				return 0x1D;
			case 0x168E1:
				return 0x1B;
			case 0x168E2:
				return 0x1A;
			case 0x168E3:
				return 0x21;
			case 0x168E4:
				return 0x1B;
			case 0x168E5:
				return 0x1B;
			case 0x168E6:
				return 0x1A;
			case 0x168E7:
				return 0x1A;
			case 0x168E8:
				return 0x1A;
			case 0x168E9:
				return 0x1D;
			case 0x168EA:
				return 0x21;
			case 0x168EB:
				return 0x1A;
			case 0x168EC:
				return 0x19;
			case 0x168ED:
				return 0x19;
			case 0x168EE:
				return 0x19;
			case 0x168EF:
				return 0x19;
			case 0x168F0:
				return 0x19;
			case 0x168F1:
				return 0x1A;
			case 0x168F2:
				return 0x19;
			case 0x168F3:
				return 0x19;
			case 0x168F4:
				return 0x1A;
			case 0x168F5:
				return 0x1B;
			case 0x168F6:
				return 0x1A;
			case 0x168F7:
				return 0x1B;
			case 0x168F8:
				return 0x1B;
			case 0x168F9:
				return 0x1E;
			case 0x168FA:
				return 0x1A;
			case 0x168FB:
				return 0x1B;
			case 0x168FC:
				return 0x1B;
			case 0x168FD:
				return 0x1A;
			case 0x168FE:
				return 0x1B;
			case 0x168FF:
				return 0x20;
			case 0x16900:
				return 0x1A;
			case 0x16901:
				return 0x1C;
			case 0x16902:
				return 0x1A;
			case 0x16903:
				return 0x19;
			case 0x16904:
				return 0x19;
			case 0x16905:
				return 0x1D;
			case 0x16906:
				return 0x1A;
			case 0x16907:
				return 0x19;
			case 0x16908:
				return 0x1B;
			case 0x16909:
				return 0x1B;
			case 0x1690A:
				return 0x1D;
			case 0x1690B:
				return 0x1A;
			case 0x1690C:
				return 0x1C;
			case 0x1690D:
				return 0x19;
			case 0x1690E:
				return 0x1D;
			case 0x1690F:
				return 0x21;
			case 0x16910:
				return 0x1D;
			case 0x16911:
				return 0x18;
			case 0x16912:
				return 0x1A;
			case 0x16913:
				return 0x1C;
			case 0x16914:
				return 0x1F;
			case 0x16915:
				return 0x1A;
			case 0x16916:
				return 0x1D;
			case 0x16917:
				return 0x1C;
			case 0x16918:
				return 0x1A;
			case 0x16919:
				return 0x1A;
			case 0x1691A:
				return 0x1C;
			case 0x1691B:
				return 0x1A;
			case 0x1691C:
				return 0x1C;
			case 0x1691D:
				return 0x19;
			case 0x1691E:
				return 0x19;
			case 0x1691F:
				return 0x1C;
			case 0x16920:
				return 0x1A;
			case 0x16921:
				return 0x1B;
			case 0x16922:
				return 0x1A;
			case 0x16923:
				return 0x1C;
			case 0x16924:
				return 0x19;
			case 0x16925:
				return 0x1B;
			case 0x16926:
				return 0x1A;
			case 0x16927:
				return 0x1A;
			case 0x16928:
				return 0x1B;
			case 0x16929:
				return 0x1E;
			case 0x1692A:
				return 0x1C;
			case 0x1692B:
				return 0x1C;
			case 0x1692C:
				return 0x1A;
			case 0x1692D:
				return 0x19;
			case 0x1692E:
				return 0x1C;
			case 0x1692F:
				return 0x1A;
			case 0x16930:
				return 0x19;
			case 0x16931:
				return 0x1C;
			case 0x16932:
				return 0x1B;
			case 0x16933:
				return 0x1D;
			case 0x16934:
				return 0x1A;
			case 0x16935:
				return 0x19;
			case 0x16936:
				return 0x1A;
			case 0x16937:
				return 0x1A;
			case 0x16938:
				return 0x1B;
			case 0x16939:
				return 0x1A;
			case 0x1693A:
				return 0x19;
			case 0x1693B:
				return 0x1C;
			case 0x1693C:
				return 0x1C;
			case 0x1693D:
				return 0x1A;
			case 0x1693E:
				return 0x1A;
			case 0x1693F:
				return 0x19;
			case 0x16940:
				return 0x1A;
			case 0x16941:
				return 0x1A;
			case 0x16942:
				return 0x1D;
			case 0x16943:
				return 0x1B;
			case 0x16944:
				return 0x1A;
			case 0x16945:
				return 0x1C;
			case 0x16946:
				return 0x1B;
			case 0x16947:
				return 0x1B;
			case 0x16948:
				return 0x1C;
			case 0x16949:
				return 0x18;
			case 0x1694A:
				return 0x1D;
			case 0x1694B:
				return 0x19;
			case 0x1694C:
				return 0x19;
			case 0x1694D:
				return 0x19;
			case 0x1694E:
				return 0x19;
			case 0x1694F:
				return 0x1B;
			case 0x16950:
				return 0x1B;
			case 0x16951:
				return 0x17;
			case 0x16952:
				return 0x19;
			case 0x16953:
				return 0x18;
			case 0x16954:
				return 0x1A;
			case 0x16955:
				return 0x1B;
			case 0x16956:
				return 0x1A;
			case 0x16957:
				return 0x18;
			case 0x16958:
				return 0x19;
			case 0x16959:
				return 0x1A;
			case 0x1695A:
				return 0x19;
			case 0x1695B:
				return 0x18;
			case 0x1695C:
				return 0x1A;
			case 0x1695D:
				return 0x19;
			case 0x1695E:
				return 0x1A;
			case 0x1695F:
				return 0x19;
			case 0x16960:
				return 0x1E;
			case 0x16961:
				return 0x18;
			case 0x16962:
				return 0x1A;
			case 0x16963:
				return 0x20;
			case 0x16964:
				return 0x19;
			case 0x16965:
				return 0x19;
			case 0x16966:
				return 0x1A;
			case 0x16967:
				return 0x1A;
			case 0x16968:
				return 0x1B;
			case 0x16969:
				return 0x19;
			case 0x1696A:
				return 0x19;
			case 0x1696B:
				return 0x1A;
			case 0x1696C:
				return 0x19;
			case 0x1696D:
				return 0x19;
			case 0x1696E:
				return 0x19;
			case 0x1696F:
				return 0x1C;
			case 0x16970:
				return 0x1A;
			case 0x16971:
				return 0x1A;
			case 0x16972:
				return 0x19;
			case 0x16973:
				return 0x1A;
			case 0x16974:
				return 0x1B;
			case 0x16975:
				return 0x19;
			case 0x16976:
				return 0x19;
			case 0x16977:
				return 0x1E;
			case 0x16978:
				return 0x1A;
			case 0x16979:
				return 0x19;
			case 0x1697A:
				return 0x1A;
			case 0x1697B:
				return 0x19;
			case 0x1697C:
				return 0x1C;
			case 0x1697D:
				return 0x1A;
			case 0x1697E:
				return 0x1A;
			case 0x1697F:
				return 0x1C;
			case 0x16980:
				return 0x1A;
			case 0x16981:
				return 0x1B;
			case 0x16982:
				return 0x1C;
			case 0x16983:
				return 0x1B;
			case 0x16984:
				return 0x1A;
			case 0x16985:
				return 0x19;
			case 0x16986:
				return 0x1D;
			case 0x16987:
				return 0x1A;
			case 0x16988:
				return 0x1B;
			case 0x16989:
				return 0x1E;
			case 0x1698A:
				return 0x1D;
			case 0x1698B:
				return 0x19;
			case 0x1698C:
				return 0x1A;
			case 0x1698D:
				return 0x1D;
			case 0x1698E:
				return 0x1A;
			case 0x1698F:
				return 0x20;
			case 0x16990:
				return 0x19;
			case 0x16991:
				return 0x19;
			case 0x16992:
				return 0x23;
			case 0x16993:
				return 0x25;
			case 0x16994:
				return 0x1A;
			case 0x16995:
				return 0x1B;
			case 0x16996:
				return 0x1A;
			case 0x16997:
				return 0x1B;
			case 0x16998:
				return 0x18;
			case 0x16999:
				return 0x1B;
			case 0x1699A:
				return 0x1B;
			case 0x1699B:
				return 0x1B;
			case 0x1699C:
				return 0x1C;
			case 0x1699D:
				return 0x1B;
			case 0x1699E:
				return 0x1A;
			case 0x1699F:
				return 0x1A;
			case 0x169A0:
				return 0x18;
			case 0x169A1:
				return 0x1A;
			case 0x169A2:
				return 0x1D;
			case 0x169A3:
				return 0x1E;
			case 0x169A4:
				return 0x1D;
			case 0x169A5:
				return 0x1B;
			case 0x169A6:
				return 0x1A;
			case 0x169A7:
				return 0x1A;
			case 0x169A8:
				return 0x1A;
			case 0x169A9:
				return 0x1A;
			case 0x169AA:
				return 0x19;
			case 0x169AB:
				return 0x1A;
			case 0x169AC:
				return 0x19;
			case 0x169AD:
				return 0x21;
			case 0x169AE:
				return 0x19;
			case 0x169AF:
				return 0x1B;
			case 0x169B0:
				return 0x1B;
			case 0x169B1:
				return 0x1B;
			case 0x169B2:
				return 0x1A;
			case 0x169B3:
				return 0x1C;
			case 0x169B4:
				return 0x19;
			case 0x169B5:
				return 0x1B;
			case 0x169B6:
				return 0x1B;
			case 0x169B7:
				return 0x19;
			case 0x169B8:
				return 0x19;
			case 0x169B9:
				return 0x1D;
			case 0x169BA:
				return 0x1A;
			case 0x169BB:
				return 0x18;
			case 0x169BC:
				return 0x1A;
			case 0x169BD:
				return 0x1A;
			case 0x169BE:
				return 0x1A;
			case 0x169BF:
				return 0x1D;
			case 0x169C0:
				return 0x21;
			case 0x169C1:
				return 0x1A;
			case 0x169C2:
				return 0x1A;
			case 0x169C3:
				return 0x1A;
			case 0x169C4:
				return 0x1A;
			case 0x169C5:
				return 0x19;
			case 0x169C6:
				return 0x1A;
			case 0x169C7:
				return 0x1C;
			case 0x169C8:
				return 0x1A;
			case 0x169C9:
				return 0x19;
			case 0x169CA:
				return 0x1A;
			case 0x169CB:
				return 0x1B;
			case 0x169CC:
				return 0x19;
			case 0x169CD:
				return 0x1A;
			case 0x169CE:
				return 0x1A;
			case 0x169CF:
				return 0x1C;
			case 0x169D0:
				return 0x1B;
			case 0x169D1:
				return 0x1F;
			case 0x169D2:
				return 0x1D;
			case 0x169D3:
				return 0x19;
			case 0x169D4:
				return 0x1A;
			case 0x169D5:
				return 0x17;
			case 0x169D6:
				return 0x19;
			case 0x169D7:
				return 0x17;
			case 0x169D8:
				return 0x17;
			case 0x169D9:
				return 0x19;
			case 0x169DA:
				return 0x1F;
			case 0x169DB:
				return 0x19;
			case 0x169DC:
				return 0x19;
			case 0x169DD:
				return 0x23;
			case 0x169DE:
				return 0x1A;
			case 0x169DF:
				return 0x1A;
			case 0x169E0:
				return 0x1B;
			case 0x169E1:
				return 0x1B;
			case 0x169E2:
				return 0x22;
			case 0x169E3:
				return 0x1F;
			case 0x169E4:
				return 0x19;
			case 0x169E5:
				return 0x19;
			case 0x169E6:
				return 0x1A;
			case 0x169E7:
				return 0x1A;
			case 0x169E8:
				return 0x20;
			case 0x169E9:
				return 0x19;
			case 0x169EA:
				return 0x19;
			case 0x169EB:
				return 0x19;
			case 0x169EC:
				return 0x19;
			case 0x169ED:
				return 0x18;
			case 0x169EE:
				return 0x18;
			case 0x169EF:
				return 0x1A;
			case 0x169F0:
				return 0x19;
			case 0x169F1:
				return 0x1C;
			case 0x169F2:
				return 0x19;
			case 0x169F3:
				return 0x19;
			case 0x169F4:
				return 0x1A;
			case 0x169F5:
				return 0x1F;
			case 0x169F6:
				return 0x18;
			case 0x169F7:
				return 0x18;
			case 0x169F8:
				return 0x19;
			case 0x169F9:
				return 0x18;
			case 0x169FA:
				return 0x19;
			case 0x169FB:
				return 0x18;
			case 0x169FC:
				return 0x19;
			case 0x169FD:
				return 0x19;
			case 0x169FE:
				return 0x18;
			case 0x169FF:
				return 0x19;
			case 0x16A00:
				return 0x19;
			case 0x16A01:
				return 0x19;
			case 0x16A02:
				return 0x1A;
			case 0x16A03:
				return 0x18;
			case 0x16A04:
				return 0x17;
			case 0x16A05:
				return 0x18;
			case 0x16A06:
				return 0x18;
			case 0x16A07:
				return 0x19;
			case 0x16A08:
				return 0x19;
			case 0x16A09:
				return 0x19;
			case 0x16A0A:
				return 0x18;
			case 0x16A0B:
				return 0x19;
			case 0x16A0C:
				return 0x1A;
			case 0x16A0D:
				return 0x1B;
			case 0x16A0E:
				return 0x19;
			case 0x16A0F:
				return 0x1A;
			case 0x16A10:
				return 0x1B;
			case 0x16A11:
				return 0x17;
			case 0x16A12:
				return 0x19;
			case 0x16A13:
				return 0x1A;
			case 0x16A14:
				return 0x18;
			case 0x16A15:
				return 0x1A;
			case 0x16A16:
				return 0x1A;
			case 0x16A17:
				return 0x19;
			case 0x16A18:
				return 0x1A;
			case 0x16A19:
				return 0x18;
			case 0x16A1A:
				return 0x1B;
			case 0x16A1B:
				return 0x19;
			case 0x16A1C:
				return 0x19;
			case 0x16A1D:
				return 0x18;
			case 0x16A1E:
				return 0x1A;
			case 0x16A1F:
				return 0x1A;
			case 0x16A20:
				return 0x1A;
			case 0x16A21:
				return 0x19;
			case 0x16A22:
				return 0x19;
			case 0x16A23:
				return 0x18;
			case 0x16A24:
				return 0x18;
			case 0x16A25:
				return 0x1A;
			case 0x16A26:
				return 0x19;
			case 0x16A27:
				return 0x1D;
			case 0x16A28:
				return 0x1A;
			case 0x16A29:
				return 0x19;
			case 0x16A2A:
				return 0x1A;
			case 0x16A2B:
				return 0x19;
			case 0x16A2C:
				return 0x18;
			case 0x16A2D:
				return 0x18;
			case 0x16A2E:
				return 0x19;
			case 0x16A2F:
				return 0x18;
			case 0x16A30:
				return 0x1A;
			case 0x16A31:
				return 0x19;
			case 0x16A32:
				return 0x18;
			case 0x16A33:
				return 0x18;
			case 0x16A34:
				return 0x1A;
			case 0x16A35:
				return 0x19;
			case 0x16A36:
				return 0x19;
			case 0x16A37:
				return 0x1B;
			case 0x16A38:
				return 0x1A;
			case 0x16A40:
				return 0xE;
			case 0x16A41:
				return 0xF;
			case 0x16A42:
				return 0xE;
			case 0x16A43:
				return 0xF;
			case 0x16A44:
				return 0xE;
			case 0x16A45:
				return 0xE;
			case 0x16A46:
				return 0xD;
			case 0x16A47:
				return 0xF;
			case 0x16A48:
				return 0x10;
			case 0x16A49:
				return 0xF;
			case 0x16A4A:
				return 0xF;
			case 0x16A4B:
				return 0xF;
			case 0x16A4C:
				return 0x11;
			case 0x16A4D:
				return 0xE;
			case 0x16A4E:
				return 0x10;
			case 0x16A4F:
				return 0xF;
			case 0x16A50:
				return 0xE;
			case 0x16A51:
				return 0xE;
			case 0x16A52:
				return 0xD;
			case 0x16A53:
				return 0xE;
			case 0x16A54:
				return 0xF;
			case 0x16A55:
				return 0x10;
			case 0x16A56:
				return 0xE;
			case 0x16A57:
				return 0xE;
			case 0x16A58:
				return 0xD;
			case 0x16A59:
				return 0xE;
			case 0x16A5A:
				return 0xF;
			case 0x16A5B:
				return 0xE;
			case 0x16A5C:
				return 0xF;
			case 0x16A5D:
				return 0xE;
			case 0x16A5E:
				return 0xF;
			case 0x16A60:
				return 0xF;
			case 0x16A61:
				return 0xE;
			case 0x16A62:
				return 0xE;
			case 0x16A63:
				return 0x10;
			case 0x16A64:
				return 0xF;
			case 0x16A65:
				return 0xF;
			case 0x16A66:
				return 0xE;
			case 0x16A67:
				return 0x10;
			case 0x16A68:
				return 0x10;
			case 0x16A69:
				return 0xF;
			case 0x16A6E:
				return 0xA;
			case 0x16A6F:
				return 0x11;
			case 0x16AD0:
				return 0x16;
			case 0x16AD1:
				return 0x14;
			case 0x16AD2:
				return 0x14;
			case 0x16AD3:
				return 0x14;
			case 0x16AD4:
				return 0x15;
			case 0x16AD5:
				return 0x15;
			case 0x16AD6:
				return 0x15;
			case 0x16AD7:
				return 0x16;
			case 0x16AD8:
				return 0x16;
			case 0x16AD9:
				return 0x14;
			case 0x16ADA:
				return 0x16;
			case 0x16ADB:
				return 0x14;
			case 0x16ADC:
				return 0x14;
			case 0x16ADD:
				return 0x15;
			case 0x16ADE:
				return 0x14;
			case 0x16ADF:
				return 0x14;
			case 0x16AE0:
				return 0x15;
			case 0x16AE1:
				return 0x14;
			case 0x16AE2:
				return 0x14;
			case 0x16AE3:
				return 0x14;
			case 0x16AE4:
				return 0x16;
			case 0x16AE5:
				return 0x14;
			case 0x16AE6:
				return 0x17;
			case 0x16AE7:
				return 0x13;
			case 0x16AE8:
				return 0x13;
			case 0x16AE9:
				return 0x14;
			case 0x16AEA:
				return 0x13;
			case 0x16AEB:
				return 0x14;
			case 0x16AEC:
				return 0x13;
			case 0x16AED:
				return 0x13;
			case 0x16AF0:
				return 0x1E;
			case 0x16AF1:
				return 0x1D;
			case 0x16AF2:
				return 0x1D;
			case 0x16AF3:
				return 0x21;
			case 0x16AF4:
				return 0x22;
			case 0x16AF5:
				return 0x14;
			case 0x16B00:
				return 0x18;
			case 0x16B01:
				return 0x18;
			case 0x16B02:
				return 0x17;
			case 0x16B03:
				return 0x17;
			case 0x16B04:
				return 0x18;
			case 0x16B05:
				return 0x18;
			case 0x16B06:
				return 0x17;
			case 0x16B07:
				return 0x17;
			case 0x16B08:
				return 0x17;
			case 0x16B09:
				return 0x17;
			case 0x16B0A:
				return 0x18;
			case 0x16B0B:
				return 0x18;
			case 0x16B0C:
				return 0x18;
			case 0x16B0D:
				return 0x18;
			case 0x16B0E:
				return 0x18;
			case 0x16B0F:
				return 0x18;
			case 0x16B10:
				return 0x18;
			case 0x16B11:
				return 0x18;
			case 0x16B12:
				return 0x17;
			case 0x16B13:
				return 0x17;
			case 0x16B14:
				return 0x18;
			case 0x16B15:
				return 0x18;
			case 0x16B16:
				return 0x17;
			case 0x16B17:
				return 0x17;
			case 0x16B18:
				return 0x17;
			case 0x16B19:
				return 0x17;
			case 0x16B1A:
				return 0x18;
			case 0x16B1B:
				return 0x18;
			case 0x16B1C:
				return 0x1B;
			case 0x16B1D:
				return 0x1D;
			case 0x16B1E:
				return 0x1B;
			case 0x16B1F:
				return 0x1B;
			case 0x16B20:
				return 0x1C;
			case 0x16B21:
				return 0x1B;
			case 0x16B22:
				return 0x1C;
			case 0x16B23:
				return 0x1C;
			case 0x16B24:
				return 0x1B;
			case 0x16B25:
				return 0x1C;
			case 0x16B26:
				return 0x1B;
			case 0x16B27:
				return 0x1C;
			case 0x16B28:
				return 0x1D;
			case 0x16B29:
				return 0x1C;
			case 0x16B2A:
				return 0x1D;
			case 0x16B2B:
				return 0x1D;
			case 0x16B2C:
				return 0x1B;
			case 0x16B2D:
				return 0x1A;
			case 0x16B2E:
				return 0x1B;
			case 0x16B2F:
				return 0x1B;
			case 0x16B30:
				return 0x1A;
			case 0x16B31:
				return 0x19;
			case 0x16B32:
				return 0x1A;
			case 0x16B33:
				return 0x1B;
			case 0x16B34:
				return 0x1B;
			case 0x16B35:
				return 0x1A;
			case 0x16B36:
				return 0x1B;
			case 0x16B37:
				return 0x1B;
			case 0x16B38:
				return 0x21;
			case 0x16B39:
				return 0x1C;
			case 0x16B3A:
				return 0x1C;
			case 0x16B3B:
				return 0x1B;
			case 0x16B3C:
				return 0x1E;
			case 0x16B3D:
				return 0x1C;
			case 0x16B3E:
				return 0x1C;
			case 0x16B3F:
				return 0x1D;
			case 0x16B40:
				return 0x1B;
			case 0x16B41:
				return 0x1C;
			case 0x16B42:
				return 0x1B;
			case 0x16B43:
				return 0x19;
			case 0x16B44:
				return 0x17;
			case 0x16B45:
				return 0x1F;
			case 0x16B50:
				return 0x18;
			case 0x16B51:
				return 0x17;
			case 0x16B52:
				return 0x17;
			case 0x16B53:
				return 0x19;
			case 0x16B54:
				return 0x18;
			case 0x16B55:
				return 0x18;
			case 0x16B56:
				return 0x17;
			case 0x16B57:
				return 0x19;
			case 0x16B58:
				return 0x19;
			case 0x16B59:
				return 0x18;
			case 0x16B5B:
				return 0x19;
			case 0x16B5C:
				return 0x1D;
			case 0x16B5D:
				return 0x22;
			case 0x16B5E:
				return 0x1D;
			case 0x16B5F:
				return 0x25;
			case 0x16B60:
				return 0x21;
			case 0x16B61:
				return 0x1E;
			case 0x16B63:
				return 0x1A;
			case 0x16B64:
				return 0x17;
			case 0x16B65:
				return 0x16;
			case 0x16B66:
				return 0x22;
			case 0x16B67:
				return 0x1B;
			case 0x16B68:
				return 0x17;
			case 0x16B69:
				return 0x17;
			case 0x16B6A:
				return 0x17;
			case 0x16B6B:
				return 0x17;
			case 0x16B6C:
				return 0x15;
			case 0x16B6D:
				return 0x1E;
			case 0x16B6E:
				return 0x1D;
			case 0x16B6F:
				return 0x16;
			case 0x16B70:
				return 0x16;
			case 0x16B71:
				return 0x16;
			case 0x16B72:
				return 0x29;
			case 0x16B73:
				return 0x22;
			case 0x16B74:
				return 0x1B;
			case 0x16B75:
				return 0x20;
			case 0x16B76:
				return 0x1F;
			case 0x16B77:
				return 0x1F;
			case 0x16B7D:
				return 0x1E;
			case 0x16B7E:
				return 0x1C;
			case 0x16B7F:
				return 0x1B;
			case 0x16B80:
				return 0x1C;
			case 0x16B81:
				return 0x1D;
			case 0x16B82:
				return 0x1B;
			case 0x16B83:
				return 0x1C;
			case 0x16B84:
				return 0x1C;
			case 0x16B85:
				return 0x1C;
			case 0x16B86:
				return 0x1C;
			case 0x16B87:
				return 0x1C;
			case 0x16B88:
				return 0x1C;
			case 0x16B89:
				return 0x1B;
			case 0x16B8A:
				return 0x1B;
			case 0x16B8B:
				return 0x1B;
			case 0x16B8C:
				return 0x1B;
			case 0x16B8D:
				return 0x1C;
			case 0x16B8E:
				return 0x1B;
			case 0x16B8F:
				return 0x1B;
			case 0x16E40:
				return 0x1D;
			case 0x16E41:
				return 0x1D;
			case 0x16E42:
				return 0x1D;
			case 0x16E43:
				return 0x1D;
			case 0x16E44:
				return 0x20;
			case 0x16E45:
				return 0x1D;
			case 0x16E46:
				return 0x1E;
			case 0x16E47:
				return 0x1D;
			case 0x16E48:
				return 0x1D;
			case 0x16E49:
				return 0x1D;
			case 0x16E4A:
				return 0x1D;
			case 0x16E4B:
				return 0x1D;
			case 0x16E4C:
				return 0x1D;
			case 0x16E4D:
				return 0x1D;
			case 0x16E4E:
				return 0x1D;
			case 0x16E4F:
				return 0x1D;
			case 0x16E50:
				return 0x1D;
			case 0x16E51:
				return 0x1D;
			case 0x16E52:
				return 0x1D;
			case 0x16E53:
				return 0x1E;
			case 0x16E54:
				return 0x1D;
			case 0x16E55:
				return 0x1D;
			case 0x16E56:
				return 0x1E;
			case 0x16E57:
				return 0x1E;
			case 0x16E58:
				return 0x1D;
			case 0x16E59:
				return 0x1D;
			case 0x16E5A:
				return 0x1E;
			case 0x16E5B:
				return 0x1D;
			case 0x16E5C:
				return 0x1D;
			case 0x16E5D:
				return 0x1D;
			case 0x16E5E:
				return 0x1E;
			case 0x16E5F:
				return 0x1D;
			case 0x16E60:
				return 0x1B;
			case 0x16E61:
				return 0x1B;
			case 0x16E62:
				return 0x1B;
			case 0x16E63:
				return 0x1B;
			case 0x16E64:
				return 0x1E;
			case 0x16E65:
				return 0x1B;
			case 0x16E66:
				return 0x1C;
			case 0x16E67:
				return 0x1B;
			case 0x16E68:
				return 0x1B;
			case 0x16E69:
				return 0x1B;
			case 0x16E6A:
				return 0x1B;
			case 0x16E6B:
				return 0x1B;
			case 0x16E6C:
				return 0x1B;
			case 0x16E6D:
				return 0x1B;
			case 0x16E6E:
				return 0x1B;
			case 0x16E6F:
				return 0x1B;
			case 0x16E70:
				return 0x1B;
			case 0x16E71:
				return 0x1B;
			case 0x16E72:
				return 0x1B;
			case 0x16E73:
				return 0x1C;
			case 0x16E74:
				return 0x1B;
			case 0x16E75:
				return 0x1B;
			case 0x16E76:
				return 0x1C;
			case 0x16E77:
				return 0x1C;
			case 0x16E78:
				return 0x1B;
			case 0x16E79:
				return 0x1B;
			case 0x16E7A:
				return 0x1C;
			case 0x16E7B:
				return 0x1B;
			case 0x16E7C:
				return 0x1B;
			case 0x16E7D:
				return 0x1B;
			case 0x16E7E:
				return 0x1C;
			case 0x16E7F:
				return 0x1B;
			case 0x16E80:
				return 0x17;
			case 0x16E81:
				return 0x16;
			case 0x16E82:
				return 0x16;
			case 0x16E83:
				return 0x18;
			case 0x16E84:
				return 0x17;
			case 0x16E85:
				return 0x17;
			case 0x16E86:
				return 0x16;
			case 0x16E87:
				return 0x18;
			case 0x16E88:
				return 0x18;
			case 0x16E89:
				return 0x17;
			case 0x16E8A:
				return 0x17;
			case 0x16E8B:
				return 0x1A;
			case 0x16E8C:
				return 0x1A;
			case 0x16E8D:
				return 0x1C;
			case 0x16E8E:
				return 0x1C;
			case 0x16E8F:
				return 0x1B;
			case 0x16E90:
				return 0x1B;
			case 0x16E91:
				return 0x1D;
			case 0x16E92:
				return 0x1C;
			case 0x16E93:
				return 0x1C;
			case 0x16E94:
				return 0x25;
			case 0x16E95:
				return 0x25;
			case 0x16E96:
				return 0x27;
			case 0x16E97:
				return 0x12;
			case 0x16E98:
				return 0x16;
			case 0x16E99:
				return 0x18;
			case 0x16E9A:
				return 0x1B;
			case 0x16F00:
				return 0xF;
			case 0x16F01:
				return 0xF;
			case 0x16F02:
				return 0x12;
			case 0x16F03:
				return 0x10;
			case 0x16F04:
				return 0xF;
			case 0x16F05:
				return 0x10;
			case 0x16F06:
				return 0x17;
			case 0x16F07:
				return 0xF;
			case 0x16F08:
				return 0xF;
			case 0x16F09:
				return 0x10;
			case 0x16F0A:
				return 0xF;
			case 0x16F0B:
				return 0xF;
			case 0x16F0C:
				return 0x13;
			case 0x16F0D:
				return 0x12;
			case 0x16F0E:
				return 0x10;
			case 0x16F0F:
				return 0x10;
			case 0x16F10:
				return 0xF;
			case 0x16F11:
				return 0x10;
			case 0x16F12:
				return 0x13;
			case 0x16F13:
				return 0x17;
			case 0x16F14:
				return 0x10;
			case 0x16F15:
				return 0x11;
			case 0x16F16:
				return 0xF;
			case 0x16F17:
				return 0x10;
			case 0x16F18:
				return 0x10;
			case 0x16F19:
				return 0x11;
			case 0x16F1A:
				return 0x11;
			case 0x16F1B:
				return 0x11;
			case 0x16F1C:
				return 0x12;
			case 0x16F1D:
				return 0x12;
			case 0x16F1E:
				return 0xF;
			case 0x16F1F:
				return 0xF;
			case 0x16F20:
				return 0x12;
			case 0x16F21:
				return 0xF;
			case 0x16F22:
				return 0x10;
			case 0x16F23:
				return 0x10;
			case 0x16F24:
				return 0x11;
			case 0x16F25:
				return 0x18;
			case 0x16F26:
				return 0xF;
			case 0x16F27:
				return 0xF;
			case 0x16F28:
				return 0x10;
			case 0x16F29:
				return 0x11;
			case 0x16F2A:
				return 0x11;
			case 0x16F2B:
				return 0x11;
			case 0x16F2C:
				return 0x10;
			case 0x16F2D:
				return 0x11;
			case 0x16F2E:
				return 0x11;
			case 0x16F2F:
				return 0x11;
			case 0x16F30:
				return 0x14;
			case 0x16F31:
				return 0x14;
			case 0x16F32:
				return 0x1A;
			case 0x16F33:
				return 0x10;
			case 0x16F34:
				return 0x10;
			case 0x16F35:
				return 0x10;
			case 0x16F36:
				return 0x11;
			case 0x16F37:
				return 0x10;
			case 0x16F38:
				return 0x10;
			case 0x16F39:
				return 0x13;
			case 0x16F3A:
				return 0xF;
			case 0x16F3B:
				return 0xF;
			case 0x16F3C:
				return 0x10;
			case 0x16F3D:
				return 0x10;
			case 0x16F3E:
				return 0x11;
			case 0x16F3F:
				return 0x18;
			case 0x16F40:
				return 0x11;
			case 0x16F41:
				return 0x12;
			case 0x16F42:
				return 0xF;
			case 0x16F43:
				return 0xF;
			case 0x16F44:
				return 0x10;
			case 0x16F45:
				return 0x10;
			case 0x16F46:
				return 0x10;
			case 0x16F47:
				return 0x11;
			case 0x16F48:
				return 0xF;
			case 0x16F49:
				return 0x10;
			case 0x16F4A:
				return 0x10;
			case 0x16F4F:
				return 0x21;
			case 0x16F50:
				return 0x19;
			case 0x16F51:
				return 0x15;
			case 0x16F52:
				return 0x1B;
			case 0x16F53:
				return 0x1E;
			case 0x16F54:
				return 0x12;
			case 0x16F55:
				return 0x13;
			case 0x16F56:
				return 0x14;
			case 0x16F57:
				return 0x13;
			case 0x16F58:
				return 0x14;
			case 0x16F59:
				return 0x12;
			case 0x16F5A:
				return 0x13;
			case 0x16F5B:
				return 0x13;
			case 0x16F5C:
				return 0x12;
			case 0x16F5D:
				return 0x12;
			case 0x16F5E:
				return 0x13;
			case 0x16F5F:
				return 0x14;
			case 0x16F60:
				return 0x14;
			case 0x16F61:
				return 0x12;
			case 0x16F62:
				return 0x13;
			case 0x16F63:
				return 0x14;
			case 0x16F64:
				return 0x15;
			case 0x16F65:
				return 0x13;
			case 0x16F66:
				return 0x13;
			case 0x16F67:
				return 0x13;
			case 0x16F68:
				return 0x13;
			case 0x16F69:
				return 0x14;
			case 0x16F6A:
				return 0x12;
			case 0x16F6B:
				return 0x13;
			case 0x16F6C:
				return 0x14;
			case 0x16F6D:
				return 0x15;
			case 0x16F6E:
				return 0x13;
			case 0x16F6F:
				return 0x14;
			case 0x16F70:
				return 0x14;
			case 0x16F71:
				return 0x12;
			case 0x16F72:
				return 0x13;
			case 0x16F73:
				return 0x13;
			case 0x16F74:
				return 0x14;
			case 0x16F75:
				return 0x14;
			case 0x16F76:
				return 0x1C;
			case 0x16F77:
				return 0x13;
			case 0x16F78:
				return 0x1B;
			case 0x16F79:
				return 0x13;
			case 0x16F7A:
				return 0x13;
			case 0x16F7B:
				return 0x13;
			case 0x16F7C:
				return 0x13;
			case 0x16F7D:
				return 0x12;
			case 0x16F7E:
				return 0x13;
			case 0x16F7F:
				return 0x14;
			case 0x16F80:
				return 0x14;
			case 0x16F81:
				return 0x13;
			case 0x16F82:
				return 0x14;
			case 0x16F83:
				return 0x13;
			case 0x16F84:
				return 0x13;
			case 0x16F85:
				return 0x13;
			case 0x16F86:
				return 0x15;
			case 0x16F87:
				return 0x13;
			case 0x16F8F:
				return 0x10;
			case 0x16F90:
				return 0x14;
			case 0x16F91:
				return 0x10;
			case 0x16F92:
				return 0x10;
			case 0x16F93:
				return 0x13;
			case 0x16F94:
				return 0x13;
			case 0x16F95:
				return 0x13;
			case 0x16F96:
				return 0x13;
			case 0x16F97:
				return 0x13;
			case 0x16F98:
				return 0x13;
			case 0x16F99:
				return 0x13;
			case 0x16F9A:
				return 0x1C;
			case 0x16F9B:
				return 0x1C;
			case 0x16F9C:
				return 0x1C;
			case 0x16F9D:
				return 0x1C;
			case 0x16F9E:
				return 0x1C;
			case 0x16F9F:
				return 0x1C;
			case 0x16FE0:
				return 0x16;
			case 0x16FE1:
				return 0x15;
			case 0x16FE2:
				return 0x16;
			case 0x16FE3:
				return 0x1B;
			case 0x16FE4:
				return 0x1B;
			case 0x16FF0:
				return 0x25;
			case 0x16FF1:
				return 0x27;
			case 0x17000:
				return 0x1A;
			case 0x187F7:
				return 0x19;
			case 0x18800:
				return 0x15;
			case 0x18801:
				return 0x15;
			case 0x18802:
				return 0x15;
			case 0x18803:
				return 0x15;
			case 0x18804:
				return 0x15;
			case 0x18805:
				return 0x15;
			case 0x18806:
				return 0x15;
			case 0x18807:
				return 0x15;
			case 0x18808:
				return 0x15;
			case 0x18809:
				return 0x15;
			case 0x1880A:
				return 0x15;
			case 0x1880B:
				return 0x15;
			case 0x1880C:
				return 0x15;
			case 0x1880D:
				return 0x15;
			case 0x1880E:
				return 0x15;
			case 0x1880F:
				return 0x15;
			case 0x18810:
				return 0x15;
			case 0x18811:
				return 0x15;
			case 0x18812:
				return 0x15;
			case 0x18813:
				return 0x15;
			case 0x18814:
				return 0x15;
			case 0x18815:
				return 0x15;
			case 0x18816:
				return 0x15;
			case 0x18817:
				return 0x15;
			case 0x18818:
				return 0x15;
			case 0x18819:
				return 0x15;
			case 0x1881A:
				return 0x15;
			case 0x1881B:
				return 0x15;
			case 0x1881C:
				return 0x15;
			case 0x1881D:
				return 0x15;
			case 0x1881E:
				return 0x15;
			case 0x1881F:
				return 0x15;
			case 0x18820:
				return 0x15;
			case 0x18821:
				return 0x15;
			case 0x18822:
				return 0x15;
			case 0x18823:
				return 0x15;
			case 0x18824:
				return 0x15;
			case 0x18825:
				return 0x15;
			case 0x18826:
				return 0x15;
			case 0x18827:
				return 0x15;
			case 0x18828:
				return 0x15;
			case 0x18829:
				return 0x15;
			case 0x1882A:
				return 0x15;
			case 0x1882B:
				return 0x15;
			case 0x1882C:
				return 0x15;
			case 0x1882D:
				return 0x15;
			case 0x1882E:
				return 0x15;
			case 0x1882F:
				return 0x15;
			case 0x18830:
				return 0x15;
			case 0x18831:
				return 0x15;
			case 0x18832:
				return 0x15;
			case 0x18833:
				return 0x15;
			case 0x18834:
				return 0x15;
			case 0x18835:
				return 0x15;
			case 0x18836:
				return 0x15;
			case 0x18837:
				return 0x15;
			case 0x18838:
				return 0x15;
			case 0x18839:
				return 0x15;
			case 0x1883A:
				return 0x15;
			case 0x1883B:
				return 0x15;
			case 0x1883C:
				return 0x15;
			case 0x1883D:
				return 0x15;
			case 0x1883E:
				return 0x15;
			case 0x1883F:
				return 0x15;
			case 0x18840:
				return 0x15;
			case 0x18841:
				return 0x15;
			case 0x18842:
				return 0x15;
			case 0x18843:
				return 0x15;
			case 0x18844:
				return 0x15;
			case 0x18845:
				return 0x15;
			case 0x18846:
				return 0x15;
			case 0x18847:
				return 0x15;
			case 0x18848:
				return 0x15;
			case 0x18849:
				return 0x15;
			case 0x1884A:
				return 0x15;
			case 0x1884B:
				return 0x15;
			case 0x1884C:
				return 0x15;
			case 0x1884D:
				return 0x15;
			case 0x1884E:
				return 0x15;
			case 0x1884F:
				return 0x15;
			case 0x18850:
				return 0x15;
			case 0x18851:
				return 0x15;
			case 0x18852:
				return 0x15;
			case 0x18853:
				return 0x15;
			case 0x18854:
				return 0x15;
			case 0x18855:
				return 0x15;
			case 0x18856:
				return 0x15;
			case 0x18857:
				return 0x15;
			case 0x18858:
				return 0x15;
			case 0x18859:
				return 0x15;
			case 0x1885A:
				return 0x15;
			case 0x1885B:
				return 0x15;
			case 0x1885C:
				return 0x15;
			case 0x1885D:
				return 0x15;
			case 0x1885E:
				return 0x15;
			case 0x1885F:
				return 0x15;
			case 0x18860:
				return 0x15;
			case 0x18861:
				return 0x15;
			case 0x18862:
				return 0x15;
			case 0x18863:
				return 0x15;
			case 0x18864:
				return 0x15;
			case 0x18865:
				return 0x15;
			case 0x18866:
				return 0x15;
			case 0x18867:
				return 0x15;
			case 0x18868:
				return 0x15;
			case 0x18869:
				return 0x15;
			case 0x1886A:
				return 0x15;
			case 0x1886B:
				return 0x15;
			case 0x1886C:
				return 0x15;
			case 0x1886D:
				return 0x15;
			case 0x1886E:
				return 0x15;
			case 0x1886F:
				return 0x15;
			case 0x18870:
				return 0x15;
			case 0x18871:
				return 0x15;
			case 0x18872:
				return 0x15;
			case 0x18873:
				return 0x15;
			case 0x18874:
				return 0x15;
			case 0x18875:
				return 0x15;
			case 0x18876:
				return 0x15;
			case 0x18877:
				return 0x15;
			case 0x18878:
				return 0x15;
			case 0x18879:
				return 0x15;
			case 0x1887A:
				return 0x15;
			case 0x1887B:
				return 0x15;
			case 0x1887C:
				return 0x15;
			case 0x1887D:
				return 0x15;
			case 0x1887E:
				return 0x15;
			case 0x1887F:
				return 0x15;
			case 0x18880:
				return 0x15;
			case 0x18881:
				return 0x15;
			case 0x18882:
				return 0x15;
			case 0x18883:
				return 0x15;
			case 0x18884:
				return 0x15;
			case 0x18885:
				return 0x15;
			case 0x18886:
				return 0x15;
			case 0x18887:
				return 0x15;
			case 0x18888:
				return 0x15;
			case 0x18889:
				return 0x15;
			case 0x1888A:
				return 0x15;
			case 0x1888B:
				return 0x15;
			case 0x1888C:
				return 0x15;
			case 0x1888D:
				return 0x15;
			case 0x1888E:
				return 0x15;
			case 0x1888F:
				return 0x15;
			case 0x18890:
				return 0x15;
			case 0x18891:
				return 0x15;
			case 0x18892:
				return 0x15;
			case 0x18893:
				return 0x15;
			case 0x18894:
				return 0x15;
			case 0x18895:
				return 0x15;
			case 0x18896:
				return 0x15;
			case 0x18897:
				return 0x15;
			case 0x18898:
				return 0x15;
			case 0x18899:
				return 0x15;
			case 0x1889A:
				return 0x15;
			case 0x1889B:
				return 0x15;
			case 0x1889C:
				return 0x15;
			case 0x1889D:
				return 0x15;
			case 0x1889E:
				return 0x15;
			case 0x1889F:
				return 0x15;
			case 0x188A0:
				return 0x15;
			case 0x188A1:
				return 0x15;
			case 0x188A2:
				return 0x15;
			case 0x188A3:
				return 0x15;
			case 0x188A4:
				return 0x15;
			case 0x188A5:
				return 0x15;
			case 0x188A6:
				return 0x15;
			case 0x188A7:
				return 0x15;
			case 0x188A8:
				return 0x15;
			case 0x188A9:
				return 0x15;
			case 0x188AA:
				return 0x15;
			case 0x188AB:
				return 0x15;
			case 0x188AC:
				return 0x15;
			case 0x188AD:
				return 0x15;
			case 0x188AE:
				return 0x15;
			case 0x188AF:
				return 0x15;
			case 0x188B0:
				return 0x15;
			case 0x188B1:
				return 0x15;
			case 0x188B2:
				return 0x15;
			case 0x188B3:
				return 0x15;
			case 0x188B4:
				return 0x15;
			case 0x188B5:
				return 0x15;
			case 0x188B6:
				return 0x15;
			case 0x188B7:
				return 0x15;
			case 0x188B8:
				return 0x15;
			case 0x188B9:
				return 0x15;
			case 0x188BA:
				return 0x15;
			case 0x188BB:
				return 0x15;
			case 0x188BC:
				return 0x15;
			case 0x188BD:
				return 0x15;
			case 0x188BE:
				return 0x15;
			case 0x188BF:
				return 0x15;
			case 0x188C0:
				return 0x15;
			case 0x188C1:
				return 0x15;
			case 0x188C2:
				return 0x15;
			case 0x188C3:
				return 0x15;
			case 0x188C4:
				return 0x15;
			case 0x188C5:
				return 0x15;
			case 0x188C6:
				return 0x15;
			case 0x188C7:
				return 0x15;
			case 0x188C8:
				return 0x15;
			case 0x188C9:
				return 0x15;
			case 0x188CA:
				return 0x15;
			case 0x188CB:
				return 0x15;
			case 0x188CC:
				return 0x15;
			case 0x188CD:
				return 0x15;
			case 0x188CE:
				return 0x15;
			case 0x188CF:
				return 0x15;
			case 0x188D0:
				return 0x15;
			case 0x188D1:
				return 0x15;
			case 0x188D2:
				return 0x15;
			case 0x188D3:
				return 0x15;
			case 0x188D4:
				return 0x15;
			case 0x188D5:
				return 0x15;
			case 0x188D6:
				return 0x15;
			case 0x188D7:
				return 0x15;
			case 0x188D8:
				return 0x15;
			case 0x188D9:
				return 0x15;
			case 0x188DA:
				return 0x15;
			case 0x188DB:
				return 0x15;
			case 0x188DC:
				return 0x15;
			case 0x188DD:
				return 0x15;
			case 0x188DE:
				return 0x15;
			case 0x188DF:
				return 0x15;
			case 0x188E0:
				return 0x15;
			case 0x188E1:
				return 0x15;
			case 0x188E2:
				return 0x15;
			case 0x188E3:
				return 0x15;
			case 0x188E4:
				return 0x15;
			case 0x188E5:
				return 0x15;
			case 0x188E6:
				return 0x15;
			case 0x188E7:
				return 0x15;
			case 0x188E8:
				return 0x15;
			case 0x188E9:
				return 0x15;
			case 0x188EA:
				return 0x15;
			case 0x188EB:
				return 0x15;
			case 0x188EC:
				return 0x15;
			case 0x188ED:
				return 0x15;
			case 0x188EE:
				return 0x15;
			case 0x188EF:
				return 0x15;
			case 0x188F0:
				return 0x15;
			case 0x188F1:
				return 0x15;
			case 0x188F2:
				return 0x15;
			case 0x188F3:
				return 0x15;
			case 0x188F4:
				return 0x15;
			case 0x188F5:
				return 0x15;
			case 0x188F6:
				return 0x15;
			case 0x188F7:
				return 0x15;
			case 0x188F8:
				return 0x15;
			case 0x188F9:
				return 0x15;
			case 0x188FA:
				return 0x15;
			case 0x188FB:
				return 0x15;
			case 0x188FC:
				return 0x15;
			case 0x188FD:
				return 0x15;
			case 0x188FE:
				return 0x15;
			case 0x188FF:
				return 0x15;
			case 0x18900:
				return 0x15;
			case 0x18901:
				return 0x15;
			case 0x18902:
				return 0x15;
			case 0x18903:
				return 0x15;
			case 0x18904:
				return 0x15;
			case 0x18905:
				return 0x15;
			case 0x18906:
				return 0x15;
			case 0x18907:
				return 0x15;
			case 0x18908:
				return 0x15;
			case 0x18909:
				return 0x15;
			case 0x1890A:
				return 0x15;
			case 0x1890B:
				return 0x15;
			case 0x1890C:
				return 0x15;
			case 0x1890D:
				return 0x15;
			case 0x1890E:
				return 0x15;
			case 0x1890F:
				return 0x15;
			case 0x18910:
				return 0x15;
			case 0x18911:
				return 0x15;
			case 0x18912:
				return 0x15;
			case 0x18913:
				return 0x15;
			case 0x18914:
				return 0x15;
			case 0x18915:
				return 0x15;
			case 0x18916:
				return 0x15;
			case 0x18917:
				return 0x15;
			case 0x18918:
				return 0x15;
			case 0x18919:
				return 0x15;
			case 0x1891A:
				return 0x15;
			case 0x1891B:
				return 0x15;
			case 0x1891C:
				return 0x15;
			case 0x1891D:
				return 0x15;
			case 0x1891E:
				return 0x15;
			case 0x1891F:
				return 0x15;
			case 0x18920:
				return 0x15;
			case 0x18921:
				return 0x15;
			case 0x18922:
				return 0x15;
			case 0x18923:
				return 0x15;
			case 0x18924:
				return 0x15;
			case 0x18925:
				return 0x15;
			case 0x18926:
				return 0x15;
			case 0x18927:
				return 0x15;
			case 0x18928:
				return 0x15;
			case 0x18929:
				return 0x15;
			case 0x1892A:
				return 0x15;
			case 0x1892B:
				return 0x15;
			case 0x1892C:
				return 0x15;
			case 0x1892D:
				return 0x15;
			case 0x1892E:
				return 0x15;
			case 0x1892F:
				return 0x15;
			case 0x18930:
				return 0x15;
			case 0x18931:
				return 0x15;
			case 0x18932:
				return 0x15;
			case 0x18933:
				return 0x15;
			case 0x18934:
				return 0x15;
			case 0x18935:
				return 0x15;
			case 0x18936:
				return 0x15;
			case 0x18937:
				return 0x15;
			case 0x18938:
				return 0x15;
			case 0x18939:
				return 0x15;
			case 0x1893A:
				return 0x15;
			case 0x1893B:
				return 0x15;
			case 0x1893C:
				return 0x15;
			case 0x1893D:
				return 0x15;
			case 0x1893E:
				return 0x15;
			case 0x1893F:
				return 0x15;
			case 0x18940:
				return 0x15;
			case 0x18941:
				return 0x15;
			case 0x18942:
				return 0x15;
			case 0x18943:
				return 0x15;
			case 0x18944:
				return 0x15;
			case 0x18945:
				return 0x15;
			case 0x18946:
				return 0x15;
			case 0x18947:
				return 0x15;
			case 0x18948:
				return 0x15;
			case 0x18949:
				return 0x15;
			case 0x1894A:
				return 0x15;
			case 0x1894B:
				return 0x15;
			case 0x1894C:
				return 0x15;
			case 0x1894D:
				return 0x15;
			case 0x1894E:
				return 0x15;
			case 0x1894F:
				return 0x15;
			case 0x18950:
				return 0x15;
			case 0x18951:
				return 0x15;
			case 0x18952:
				return 0x15;
			case 0x18953:
				return 0x15;
			case 0x18954:
				return 0x15;
			case 0x18955:
				return 0x15;
			case 0x18956:
				return 0x15;
			case 0x18957:
				return 0x15;
			case 0x18958:
				return 0x15;
			case 0x18959:
				return 0x15;
			case 0x1895A:
				return 0x15;
			case 0x1895B:
				return 0x15;
			case 0x1895C:
				return 0x15;
			case 0x1895D:
				return 0x15;
			case 0x1895E:
				return 0x15;
			case 0x1895F:
				return 0x15;
			case 0x18960:
				return 0x15;
			case 0x18961:
				return 0x15;
			case 0x18962:
				return 0x15;
			case 0x18963:
				return 0x15;
			case 0x18964:
				return 0x15;
			case 0x18965:
				return 0x15;
			case 0x18966:
				return 0x15;
			case 0x18967:
				return 0x15;
			case 0x18968:
				return 0x15;
			case 0x18969:
				return 0x15;
			case 0x1896A:
				return 0x15;
			case 0x1896B:
				return 0x15;
			case 0x1896C:
				return 0x15;
			case 0x1896D:
				return 0x15;
			case 0x1896E:
				return 0x15;
			case 0x1896F:
				return 0x15;
			case 0x18970:
				return 0x15;
			case 0x18971:
				return 0x15;
			case 0x18972:
				return 0x15;
			case 0x18973:
				return 0x15;
			case 0x18974:
				return 0x15;
			case 0x18975:
				return 0x15;
			case 0x18976:
				return 0x15;
			case 0x18977:
				return 0x15;
			case 0x18978:
				return 0x15;
			case 0x18979:
				return 0x15;
			case 0x1897A:
				return 0x15;
			case 0x1897B:
				return 0x15;
			case 0x1897C:
				return 0x15;
			case 0x1897D:
				return 0x15;
			case 0x1897E:
				return 0x15;
			case 0x1897F:
				return 0x15;
			case 0x18980:
				return 0x15;
			case 0x18981:
				return 0x15;
			case 0x18982:
				return 0x15;
			case 0x18983:
				return 0x15;
			case 0x18984:
				return 0x15;
			case 0x18985:
				return 0x15;
			case 0x18986:
				return 0x15;
			case 0x18987:
				return 0x15;
			case 0x18988:
				return 0x15;
			case 0x18989:
				return 0x15;
			case 0x1898A:
				return 0x15;
			case 0x1898B:
				return 0x15;
			case 0x1898C:
				return 0x15;
			case 0x1898D:
				return 0x15;
			case 0x1898E:
				return 0x15;
			case 0x1898F:
				return 0x15;
			case 0x18990:
				return 0x15;
			case 0x18991:
				return 0x15;
			case 0x18992:
				return 0x15;
			case 0x18993:
				return 0x15;
			case 0x18994:
				return 0x15;
			case 0x18995:
				return 0x15;
			case 0x18996:
				return 0x15;
			case 0x18997:
				return 0x15;
			case 0x18998:
				return 0x15;
			case 0x18999:
				return 0x15;
			case 0x1899A:
				return 0x15;
			case 0x1899B:
				return 0x15;
			case 0x1899C:
				return 0x15;
			case 0x1899D:
				return 0x15;
			case 0x1899E:
				return 0x15;
			case 0x1899F:
				return 0x15;
			case 0x189A0:
				return 0x15;
			case 0x189A1:
				return 0x15;
			case 0x189A2:
				return 0x15;
			case 0x189A3:
				return 0x15;
			case 0x189A4:
				return 0x15;
			case 0x189A5:
				return 0x15;
			case 0x189A6:
				return 0x15;
			case 0x189A7:
				return 0x15;
			case 0x189A8:
				return 0x15;
			case 0x189A9:
				return 0x15;
			case 0x189AA:
				return 0x15;
			case 0x189AB:
				return 0x15;
			case 0x189AC:
				return 0x15;
			case 0x189AD:
				return 0x15;
			case 0x189AE:
				return 0x15;
			case 0x189AF:
				return 0x15;
			case 0x189B0:
				return 0x15;
			case 0x189B1:
				return 0x15;
			case 0x189B2:
				return 0x15;
			case 0x189B3:
				return 0x15;
			case 0x189B4:
				return 0x15;
			case 0x189B5:
				return 0x15;
			case 0x189B6:
				return 0x15;
			case 0x189B7:
				return 0x15;
			case 0x189B8:
				return 0x15;
			case 0x189B9:
				return 0x15;
			case 0x189BA:
				return 0x15;
			case 0x189BB:
				return 0x15;
			case 0x189BC:
				return 0x15;
			case 0x189BD:
				return 0x15;
			case 0x189BE:
				return 0x15;
			case 0x189BF:
				return 0x15;
			case 0x189C0:
				return 0x15;
			case 0x189C1:
				return 0x15;
			case 0x189C2:
				return 0x15;
			case 0x189C3:
				return 0x15;
			case 0x189C4:
				return 0x15;
			case 0x189C5:
				return 0x15;
			case 0x189C6:
				return 0x15;
			case 0x189C7:
				return 0x15;
			case 0x189C8:
				return 0x15;
			case 0x189C9:
				return 0x15;
			case 0x189CA:
				return 0x15;
			case 0x189CB:
				return 0x15;
			case 0x189CC:
				return 0x15;
			case 0x189CD:
				return 0x15;
			case 0x189CE:
				return 0x15;
			case 0x189CF:
				return 0x15;
			case 0x189D0:
				return 0x15;
			case 0x189D1:
				return 0x15;
			case 0x189D2:
				return 0x15;
			case 0x189D3:
				return 0x15;
			case 0x189D4:
				return 0x15;
			case 0x189D5:
				return 0x15;
			case 0x189D6:
				return 0x15;
			case 0x189D7:
				return 0x15;
			case 0x189D8:
				return 0x15;
			case 0x189D9:
				return 0x15;
			case 0x189DA:
				return 0x15;
			case 0x189DB:
				return 0x15;
			case 0x189DC:
				return 0x15;
			case 0x189DD:
				return 0x15;
			case 0x189DE:
				return 0x15;
			case 0x189DF:
				return 0x15;
			case 0x189E0:
				return 0x15;
			case 0x189E1:
				return 0x15;
			case 0x189E2:
				return 0x15;
			case 0x189E3:
				return 0x15;
			case 0x189E4:
				return 0x15;
			case 0x189E5:
				return 0x15;
			case 0x189E6:
				return 0x15;
			case 0x189E7:
				return 0x15;
			case 0x189E8:
				return 0x15;
			case 0x189E9:
				return 0x15;
			case 0x189EA:
				return 0x15;
			case 0x189EB:
				return 0x15;
			case 0x189EC:
				return 0x15;
			case 0x189ED:
				return 0x15;
			case 0x189EE:
				return 0x15;
			case 0x189EF:
				return 0x15;
			case 0x189F0:
				return 0x15;
			case 0x189F1:
				return 0x15;
			case 0x189F2:
				return 0x15;
			case 0x189F3:
				return 0x15;
			case 0x189F4:
				return 0x15;
			case 0x189F5:
				return 0x15;
			case 0x189F6:
				return 0x15;
			case 0x189F7:
				return 0x15;
			case 0x189F8:
				return 0x15;
			case 0x189F9:
				return 0x15;
			case 0x189FA:
				return 0x15;
			case 0x189FB:
				return 0x15;
			case 0x189FC:
				return 0x15;
			case 0x189FD:
				return 0x15;
			case 0x189FE:
				return 0x15;
			case 0x189FF:
				return 0x15;
			case 0x18A00:
				return 0x15;
			case 0x18A01:
				return 0x15;
			case 0x18A02:
				return 0x15;
			case 0x18A03:
				return 0x15;
			case 0x18A04:
				return 0x15;
			case 0x18A05:
				return 0x15;
			case 0x18A06:
				return 0x15;
			case 0x18A07:
				return 0x15;
			case 0x18A08:
				return 0x15;
			case 0x18A09:
				return 0x15;
			case 0x18A0A:
				return 0x15;
			case 0x18A0B:
				return 0x15;
			case 0x18A0C:
				return 0x15;
			case 0x18A0D:
				return 0x15;
			case 0x18A0E:
				return 0x15;
			case 0x18A0F:
				return 0x15;
			case 0x18A10:
				return 0x15;
			case 0x18A11:
				return 0x15;
			case 0x18A12:
				return 0x15;
			case 0x18A13:
				return 0x15;
			case 0x18A14:
				return 0x15;
			case 0x18A15:
				return 0x15;
			case 0x18A16:
				return 0x15;
			case 0x18A17:
				return 0x15;
			case 0x18A18:
				return 0x15;
			case 0x18A19:
				return 0x15;
			case 0x18A1A:
				return 0x15;
			case 0x18A1B:
				return 0x15;
			case 0x18A1C:
				return 0x15;
			case 0x18A1D:
				return 0x15;
			case 0x18A1E:
				return 0x15;
			case 0x18A1F:
				return 0x15;
			case 0x18A20:
				return 0x15;
			case 0x18A21:
				return 0x15;
			case 0x18A22:
				return 0x15;
			case 0x18A23:
				return 0x15;
			case 0x18A24:
				return 0x15;
			case 0x18A25:
				return 0x15;
			case 0x18A26:
				return 0x15;
			case 0x18A27:
				return 0x15;
			case 0x18A28:
				return 0x15;
			case 0x18A29:
				return 0x15;
			case 0x18A2A:
				return 0x15;
			case 0x18A2B:
				return 0x15;
			case 0x18A2C:
				return 0x15;
			case 0x18A2D:
				return 0x15;
			case 0x18A2E:
				return 0x15;
			case 0x18A2F:
				return 0x15;
			case 0x18A30:
				return 0x15;
			case 0x18A31:
				return 0x15;
			case 0x18A32:
				return 0x15;
			case 0x18A33:
				return 0x15;
			case 0x18A34:
				return 0x15;
			case 0x18A35:
				return 0x15;
			case 0x18A36:
				return 0x15;
			case 0x18A37:
				return 0x15;
			case 0x18A38:
				return 0x15;
			case 0x18A39:
				return 0x15;
			case 0x18A3A:
				return 0x15;
			case 0x18A3B:
				return 0x15;
			case 0x18A3C:
				return 0x15;
			case 0x18A3D:
				return 0x15;
			case 0x18A3E:
				return 0x15;
			case 0x18A3F:
				return 0x15;
			case 0x18A40:
				return 0x15;
			case 0x18A41:
				return 0x15;
			case 0x18A42:
				return 0x15;
			case 0x18A43:
				return 0x15;
			case 0x18A44:
				return 0x15;
			case 0x18A45:
				return 0x15;
			case 0x18A46:
				return 0x15;
			case 0x18A47:
				return 0x15;
			case 0x18A48:
				return 0x15;
			case 0x18A49:
				return 0x15;
			case 0x18A4A:
				return 0x15;
			case 0x18A4B:
				return 0x15;
			case 0x18A4C:
				return 0x15;
			case 0x18A4D:
				return 0x15;
			case 0x18A4E:
				return 0x15;
			case 0x18A4F:
				return 0x15;
			case 0x18A50:
				return 0x15;
			case 0x18A51:
				return 0x15;
			case 0x18A52:
				return 0x15;
			case 0x18A53:
				return 0x15;
			case 0x18A54:
				return 0x15;
			case 0x18A55:
				return 0x15;
			case 0x18A56:
				return 0x15;
			case 0x18A57:
				return 0x15;
			case 0x18A58:
				return 0x15;
			case 0x18A59:
				return 0x15;
			case 0x18A5A:
				return 0x15;
			case 0x18A5B:
				return 0x15;
			case 0x18A5C:
				return 0x15;
			case 0x18A5D:
				return 0x15;
			case 0x18A5E:
				return 0x15;
			case 0x18A5F:
				return 0x15;
			case 0x18A60:
				return 0x15;
			case 0x18A61:
				return 0x15;
			case 0x18A62:
				return 0x15;
			case 0x18A63:
				return 0x15;
			case 0x18A64:
				return 0x15;
			case 0x18A65:
				return 0x15;
			case 0x18A66:
				return 0x15;
			case 0x18A67:
				return 0x15;
			case 0x18A68:
				return 0x15;
			case 0x18A69:
				return 0x15;
			case 0x18A6A:
				return 0x15;
			case 0x18A6B:
				return 0x15;
			case 0x18A6C:
				return 0x15;
			case 0x18A6D:
				return 0x15;
			case 0x18A6E:
				return 0x15;
			case 0x18A6F:
				return 0x15;
			case 0x18A70:
				return 0x15;
			case 0x18A71:
				return 0x15;
			case 0x18A72:
				return 0x15;
			case 0x18A73:
				return 0x15;
			case 0x18A74:
				return 0x15;
			case 0x18A75:
				return 0x15;
			case 0x18A76:
				return 0x15;
			case 0x18A77:
				return 0x15;
			case 0x18A78:
				return 0x15;
			case 0x18A79:
				return 0x15;
			case 0x18A7A:
				return 0x15;
			case 0x18A7B:
				return 0x15;
			case 0x18A7C:
				return 0x15;
			case 0x18A7D:
				return 0x15;
			case 0x18A7E:
				return 0x15;
			case 0x18A7F:
				return 0x15;
			case 0x18A80:
				return 0x15;
			case 0x18A81:
				return 0x15;
			case 0x18A82:
				return 0x15;
			case 0x18A83:
				return 0x15;
			case 0x18A84:
				return 0x15;
			case 0x18A85:
				return 0x15;
			case 0x18A86:
				return 0x15;
			case 0x18A87:
				return 0x15;
			case 0x18A88:
				return 0x15;
			case 0x18A89:
				return 0x15;
			case 0x18A8A:
				return 0x15;
			case 0x18A8B:
				return 0x15;
			case 0x18A8C:
				return 0x15;
			case 0x18A8D:
				return 0x15;
			case 0x18A8E:
				return 0x15;
			case 0x18A8F:
				return 0x15;
			case 0x18A90:
				return 0x15;
			case 0x18A91:
				return 0x15;
			case 0x18A92:
				return 0x15;
			case 0x18A93:
				return 0x15;
			case 0x18A94:
				return 0x15;
			case 0x18A95:
				return 0x15;
			case 0x18A96:
				return 0x15;
			case 0x18A97:
				return 0x15;
			case 0x18A98:
				return 0x15;
			case 0x18A99:
				return 0x15;
			case 0x18A9A:
				return 0x15;
			case 0x18A9B:
				return 0x15;
			case 0x18A9C:
				return 0x15;
			case 0x18A9D:
				return 0x15;
			case 0x18A9E:
				return 0x15;
			case 0x18A9F:
				return 0x15;
			case 0x18AA0:
				return 0x15;
			case 0x18AA1:
				return 0x15;
			case 0x18AA2:
				return 0x15;
			case 0x18AA3:
				return 0x15;
			case 0x18AA4:
				return 0x15;
			case 0x18AA5:
				return 0x15;
			case 0x18AA6:
				return 0x15;
			case 0x18AA7:
				return 0x15;
			case 0x18AA8:
				return 0x15;
			case 0x18AA9:
				return 0x15;
			case 0x18AAA:
				return 0x15;
			case 0x18AAB:
				return 0x15;
			case 0x18AAC:
				return 0x15;
			case 0x18AAD:
				return 0x15;
			case 0x18AAE:
				return 0x15;
			case 0x18AAF:
				return 0x15;
			case 0x18AB0:
				return 0x15;
			case 0x18AB1:
				return 0x15;
			case 0x18AB2:
				return 0x15;
			case 0x18AB3:
				return 0x15;
			case 0x18AB4:
				return 0x15;
			case 0x18AB5:
				return 0x15;
			case 0x18AB6:
				return 0x15;
			case 0x18AB7:
				return 0x15;
			case 0x18AB8:
				return 0x15;
			case 0x18AB9:
				return 0x15;
			case 0x18ABA:
				return 0x15;
			case 0x18ABB:
				return 0x15;
			case 0x18ABC:
				return 0x15;
			case 0x18ABD:
				return 0x15;
			case 0x18ABE:
				return 0x15;
			case 0x18ABF:
				return 0x15;
			case 0x18AC0:
				return 0x15;
			case 0x18AC1:
				return 0x15;
			case 0x18AC2:
				return 0x15;
			case 0x18AC3:
				return 0x15;
			case 0x18AC4:
				return 0x15;
			case 0x18AC5:
				return 0x15;
			case 0x18AC6:
				return 0x15;
			case 0x18AC7:
				return 0x15;
			case 0x18AC8:
				return 0x15;
			case 0x18AC9:
				return 0x15;
			case 0x18ACA:
				return 0x15;
			case 0x18ACB:
				return 0x15;
			case 0x18ACC:
				return 0x15;
			case 0x18ACD:
				return 0x15;
			case 0x18ACE:
				return 0x15;
			case 0x18ACF:
				return 0x15;
			case 0x18AD0:
				return 0x15;
			case 0x18AD1:
				return 0x15;
			case 0x18AD2:
				return 0x15;
			case 0x18AD3:
				return 0x15;
			case 0x18AD4:
				return 0x15;
			case 0x18AD5:
				return 0x15;
			case 0x18AD6:
				return 0x15;
			case 0x18AD7:
				return 0x15;
			case 0x18AD8:
				return 0x15;
			case 0x18AD9:
				return 0x15;
			case 0x18ADA:
				return 0x15;
			case 0x18ADB:
				return 0x15;
			case 0x18ADC:
				return 0x15;
			case 0x18ADD:
				return 0x15;
			case 0x18ADE:
				return 0x15;
			case 0x18ADF:
				return 0x15;
			case 0x18AE0:
				return 0x15;
			case 0x18AE1:
				return 0x15;
			case 0x18AE2:
				return 0x15;
			case 0x18AE3:
				return 0x15;
			case 0x18AE4:
				return 0x15;
			case 0x18AE5:
				return 0x15;
			case 0x18AE6:
				return 0x15;
			case 0x18AE7:
				return 0x15;
			case 0x18AE8:
				return 0x15;
			case 0x18AE9:
				return 0x15;
			case 0x18AEA:
				return 0x15;
			case 0x18AEB:
				return 0x15;
			case 0x18AEC:
				return 0x15;
			case 0x18AED:
				return 0x15;
			case 0x18AEE:
				return 0x15;
			case 0x18AEF:
				return 0x15;
			case 0x18AF0:
				return 0x15;
			case 0x18AF1:
				return 0x15;
			case 0x18AF2:
				return 0x15;
			case 0x18AF3:
				return 0x15;
			case 0x18AF4:
				return 0x15;
			case 0x18AF5:
				return 0x15;
			case 0x18AF6:
				return 0x15;
			case 0x18AF7:
				return 0x15;
			case 0x18AF8:
				return 0x15;
			case 0x18AF9:
				return 0x15;
			case 0x18AFA:
				return 0x15;
			case 0x18AFB:
				return 0x15;
			case 0x18AFC:
				return 0x15;
			case 0x18AFD:
				return 0x15;
			case 0x18AFE:
				return 0x15;
			case 0x18AFF:
				return 0x15;
			case 0x18B00:
				return 0x24;
			case 0x18B01:
				return 0x24;
			case 0x18B02:
				return 0x24;
			case 0x18B03:
				return 0x24;
			case 0x18B04:
				return 0x24;
			case 0x18B05:
				return 0x24;
			case 0x18B06:
				return 0x24;
			case 0x18B07:
				return 0x24;
			case 0x18B08:
				return 0x24;
			case 0x18B09:
				return 0x24;
			case 0x18B0A:
				return 0x24;
			case 0x18B0B:
				return 0x24;
			case 0x18B0C:
				return 0x24;
			case 0x18B0D:
				return 0x24;
			case 0x18B0E:
				return 0x24;
			case 0x18B0F:
				return 0x24;
			case 0x18B10:
				return 0x24;
			case 0x18B11:
				return 0x24;
			case 0x18B12:
				return 0x24;
			case 0x18B13:
				return 0x24;
			case 0x18B14:
				return 0x24;
			case 0x18B15:
				return 0x24;
			case 0x18B16:
				return 0x24;
			case 0x18B17:
				return 0x24;
			case 0x18B18:
				return 0x24;
			case 0x18B19:
				return 0x24;
			case 0x18B1A:
				return 0x24;
			case 0x18B1B:
				return 0x24;
			case 0x18B1C:
				return 0x24;
			case 0x18B1D:
				return 0x24;
			case 0x18B1E:
				return 0x24;
			case 0x18B1F:
				return 0x24;
			case 0x18B20:
				return 0x24;
			case 0x18B21:
				return 0x24;
			case 0x18B22:
				return 0x24;
			case 0x18B23:
				return 0x24;
			case 0x18B24:
				return 0x24;
			case 0x18B25:
				return 0x24;
			case 0x18B26:
				return 0x24;
			case 0x18B27:
				return 0x24;
			case 0x18B28:
				return 0x24;
			case 0x18B29:
				return 0x24;
			case 0x18B2A:
				return 0x24;
			case 0x18B2B:
				return 0x24;
			case 0x18B2C:
				return 0x24;
			case 0x18B2D:
				return 0x24;
			case 0x18B2E:
				return 0x24;
			case 0x18B2F:
				return 0x24;
			case 0x18B30:
				return 0x24;
			case 0x18B31:
				return 0x24;
			case 0x18B32:
				return 0x24;
			case 0x18B33:
				return 0x24;
			case 0x18B34:
				return 0x24;
			case 0x18B35:
				return 0x24;
			case 0x18B36:
				return 0x24;
			case 0x18B37:
				return 0x24;
			case 0x18B38:
				return 0x24;
			case 0x18B39:
				return 0x24;
			case 0x18B3A:
				return 0x24;
			case 0x18B3B:
				return 0x24;
			case 0x18B3C:
				return 0x24;
			case 0x18B3D:
				return 0x24;
			case 0x18B3E:
				return 0x24;
			case 0x18B3F:
				return 0x24;
			case 0x18B40:
				return 0x24;
			case 0x18B41:
				return 0x24;
			case 0x18B42:
				return 0x24;
			case 0x18B43:
				return 0x24;
			case 0x18B44:
				return 0x24;
			case 0x18B45:
				return 0x24;
			case 0x18B46:
				return 0x24;
			case 0x18B47:
				return 0x24;
			case 0x18B48:
				return 0x24;
			case 0x18B49:
				return 0x24;
			case 0x18B4A:
				return 0x24;
			case 0x18B4B:
				return 0x24;
			case 0x18B4C:
				return 0x24;
			case 0x18B4D:
				return 0x24;
			case 0x18B4E:
				return 0x24;
			case 0x18B4F:
				return 0x24;
			case 0x18B50:
				return 0x24;
			case 0x18B51:
				return 0x24;
			case 0x18B52:
				return 0x24;
			case 0x18B53:
				return 0x24;
			case 0x18B54:
				return 0x24;
			case 0x18B55:
				return 0x24;
			case 0x18B56:
				return 0x24;
			case 0x18B57:
				return 0x24;
			case 0x18B58:
				return 0x24;
			case 0x18B59:
				return 0x24;
			case 0x18B5A:
				return 0x24;
			case 0x18B5B:
				return 0x24;
			case 0x18B5C:
				return 0x24;
			case 0x18B5D:
				return 0x24;
			case 0x18B5E:
				return 0x24;
			case 0x18B5F:
				return 0x24;
			case 0x18B60:
				return 0x24;
			case 0x18B61:
				return 0x24;
			case 0x18B62:
				return 0x24;
			case 0x18B63:
				return 0x24;
			case 0x18B64:
				return 0x24;
			case 0x18B65:
				return 0x24;
			case 0x18B66:
				return 0x24;
			case 0x18B67:
				return 0x24;
			case 0x18B68:
				return 0x24;
			case 0x18B69:
				return 0x24;
			case 0x18B6A:
				return 0x24;
			case 0x18B6B:
				return 0x24;
			case 0x18B6C:
				return 0x24;
			case 0x18B6D:
				return 0x24;
			case 0x18B6E:
				return 0x24;
			case 0x18B6F:
				return 0x24;
			case 0x18B70:
				return 0x24;
			case 0x18B71:
				return 0x24;
			case 0x18B72:
				return 0x24;
			case 0x18B73:
				return 0x24;
			case 0x18B74:
				return 0x24;
			case 0x18B75:
				return 0x24;
			case 0x18B76:
				return 0x24;
			case 0x18B77:
				return 0x24;
			case 0x18B78:
				return 0x24;
			case 0x18B79:
				return 0x24;
			case 0x18B7A:
				return 0x24;
			case 0x18B7B:
				return 0x24;
			case 0x18B7C:
				return 0x24;
			case 0x18B7D:
				return 0x24;
			case 0x18B7E:
				return 0x24;
			case 0x18B7F:
				return 0x24;
			case 0x18B80:
				return 0x24;
			case 0x18B81:
				return 0x24;
			case 0x18B82:
				return 0x24;
			case 0x18B83:
				return 0x24;
			case 0x18B84:
				return 0x24;
			case 0x18B85:
				return 0x24;
			case 0x18B86:
				return 0x24;
			case 0x18B87:
				return 0x24;
			case 0x18B88:
				return 0x24;
			case 0x18B89:
				return 0x24;
			case 0x18B8A:
				return 0x24;
			case 0x18B8B:
				return 0x24;
			case 0x18B8C:
				return 0x24;
			case 0x18B8D:
				return 0x24;
			case 0x18B8E:
				return 0x24;
			case 0x18B8F:
				return 0x24;
			case 0x18B90:
				return 0x24;
			case 0x18B91:
				return 0x24;
			case 0x18B92:
				return 0x24;
			case 0x18B93:
				return 0x24;
			case 0x18B94:
				return 0x24;
			case 0x18B95:
				return 0x24;
			case 0x18B96:
				return 0x24;
			case 0x18B97:
				return 0x24;
			case 0x18B98:
				return 0x24;
			case 0x18B99:
				return 0x24;
			case 0x18B9A:
				return 0x24;
			case 0x18B9B:
				return 0x24;
			case 0x18B9C:
				return 0x24;
			case 0x18B9D:
				return 0x24;
			case 0x18B9E:
				return 0x24;
			case 0x18B9F:
				return 0x24;
			case 0x18BA0:
				return 0x24;
			case 0x18BA1:
				return 0x24;
			case 0x18BA2:
				return 0x24;
			case 0x18BA3:
				return 0x24;
			case 0x18BA4:
				return 0x24;
			case 0x18BA5:
				return 0x24;
			case 0x18BA6:
				return 0x24;
			case 0x18BA7:
				return 0x24;
			case 0x18BA8:
				return 0x24;
			case 0x18BA9:
				return 0x24;
			case 0x18BAA:
				return 0x24;
			case 0x18BAB:
				return 0x24;
			case 0x18BAC:
				return 0x24;
			case 0x18BAD:
				return 0x24;
			case 0x18BAE:
				return 0x24;
			case 0x18BAF:
				return 0x24;
			case 0x18BB0:
				return 0x24;
			case 0x18BB1:
				return 0x24;
			case 0x18BB2:
				return 0x24;
			case 0x18BB3:
				return 0x24;
			case 0x18BB4:
				return 0x24;
			case 0x18BB5:
				return 0x24;
			case 0x18BB6:
				return 0x24;
			case 0x18BB7:
				return 0x24;
			case 0x18BB8:
				return 0x24;
			case 0x18BB9:
				return 0x24;
			case 0x18BBA:
				return 0x24;
			case 0x18BBB:
				return 0x24;
			case 0x18BBC:
				return 0x24;
			case 0x18BBD:
				return 0x24;
			case 0x18BBE:
				return 0x24;
			case 0x18BBF:
				return 0x24;
			case 0x18BC0:
				return 0x24;
			case 0x18BC1:
				return 0x24;
			case 0x18BC2:
				return 0x24;
			case 0x18BC3:
				return 0x24;
			case 0x18BC4:
				return 0x24;
			case 0x18BC5:
				return 0x24;
			case 0x18BC6:
				return 0x24;
			case 0x18BC7:
				return 0x24;
			case 0x18BC8:
				return 0x24;
			case 0x18BC9:
				return 0x24;
			case 0x18BCA:
				return 0x24;
			case 0x18BCB:
				return 0x24;
			case 0x18BCC:
				return 0x24;
			case 0x18BCD:
				return 0x24;
			case 0x18BCE:
				return 0x24;
			case 0x18BCF:
				return 0x24;
			case 0x18BD0:
				return 0x24;
			case 0x18BD1:
				return 0x24;
			case 0x18BD2:
				return 0x24;
			case 0x18BD3:
				return 0x24;
			case 0x18BD4:
				return 0x24;
			case 0x18BD5:
				return 0x24;
			case 0x18BD6:
				return 0x24;
			case 0x18BD7:
				return 0x24;
			case 0x18BD8:
				return 0x24;
			case 0x18BD9:
				return 0x24;
			case 0x18BDA:
				return 0x24;
			case 0x18BDB:
				return 0x24;
			case 0x18BDC:
				return 0x24;
			case 0x18BDD:
				return 0x24;
			case 0x18BDE:
				return 0x24;
			case 0x18BDF:
				return 0x24;
			case 0x18BE0:
				return 0x24;
			case 0x18BE1:
				return 0x24;
			case 0x18BE2:
				return 0x24;
			case 0x18BE3:
				return 0x24;
			case 0x18BE4:
				return 0x24;
			case 0x18BE5:
				return 0x24;
			case 0x18BE6:
				return 0x24;
			case 0x18BE7:
				return 0x24;
			case 0x18BE8:
				return 0x24;
			case 0x18BE9:
				return 0x24;
			case 0x18BEA:
				return 0x24;
			case 0x18BEB:
				return 0x24;
			case 0x18BEC:
				return 0x24;
			case 0x18BED:
				return 0x24;
			case 0x18BEE:
				return 0x24;
			case 0x18BEF:
				return 0x24;
			case 0x18BF0:
				return 0x24;
			case 0x18BF1:
				return 0x24;
			case 0x18BF2:
				return 0x24;
			case 0x18BF3:
				return 0x24;
			case 0x18BF4:
				return 0x24;
			case 0x18BF5:
				return 0x24;
			case 0x18BF6:
				return 0x24;
			case 0x18BF7:
				return 0x24;
			case 0x18BF8:
				return 0x24;
			case 0x18BF9:
				return 0x24;
			case 0x18BFA:
				return 0x24;
			case 0x18BFB:
				return 0x24;
			case 0x18BFC:
				return 0x24;
			case 0x18BFD:
				return 0x24;
			case 0x18BFE:
				return 0x24;
			case 0x18BFF:
				return 0x24;
			case 0x18C00:
				return 0x24;
			case 0x18C01:
				return 0x24;
			case 0x18C02:
				return 0x24;
			case 0x18C03:
				return 0x24;
			case 0x18C04:
				return 0x24;
			case 0x18C05:
				return 0x24;
			case 0x18C06:
				return 0x24;
			case 0x18C07:
				return 0x24;
			case 0x18C08:
				return 0x24;
			case 0x18C09:
				return 0x24;
			case 0x18C0A:
				return 0x24;
			case 0x18C0B:
				return 0x24;
			case 0x18C0C:
				return 0x24;
			case 0x18C0D:
				return 0x24;
			case 0x18C0E:
				return 0x24;
			case 0x18C0F:
				return 0x24;
			case 0x18C10:
				return 0x24;
			case 0x18C11:
				return 0x24;
			case 0x18C12:
				return 0x24;
			case 0x18C13:
				return 0x24;
			case 0x18C14:
				return 0x24;
			case 0x18C15:
				return 0x24;
			case 0x18C16:
				return 0x24;
			case 0x18C17:
				return 0x24;
			case 0x18C18:
				return 0x24;
			case 0x18C19:
				return 0x24;
			case 0x18C1A:
				return 0x24;
			case 0x18C1B:
				return 0x24;
			case 0x18C1C:
				return 0x24;
			case 0x18C1D:
				return 0x24;
			case 0x18C1E:
				return 0x24;
			case 0x18C1F:
				return 0x24;
			case 0x18C20:
				return 0x24;
			case 0x18C21:
				return 0x24;
			case 0x18C22:
				return 0x24;
			case 0x18C23:
				return 0x24;
			case 0x18C24:
				return 0x24;
			case 0x18C25:
				return 0x24;
			case 0x18C26:
				return 0x24;
			case 0x18C27:
				return 0x24;
			case 0x18C28:
				return 0x24;
			case 0x18C29:
				return 0x24;
			case 0x18C2A:
				return 0x24;
			case 0x18C2B:
				return 0x24;
			case 0x18C2C:
				return 0x24;
			case 0x18C2D:
				return 0x24;
			case 0x18C2E:
				return 0x24;
			case 0x18C2F:
				return 0x24;
			case 0x18C30:
				return 0x24;
			case 0x18C31:
				return 0x24;
			case 0x18C32:
				return 0x24;
			case 0x18C33:
				return 0x24;
			case 0x18C34:
				return 0x24;
			case 0x18C35:
				return 0x24;
			case 0x18C36:
				return 0x24;
			case 0x18C37:
				return 0x24;
			case 0x18C38:
				return 0x24;
			case 0x18C39:
				return 0x24;
			case 0x18C3A:
				return 0x24;
			case 0x18C3B:
				return 0x24;
			case 0x18C3C:
				return 0x24;
			case 0x18C3D:
				return 0x24;
			case 0x18C3E:
				return 0x24;
			case 0x18C3F:
				return 0x24;
			case 0x18C40:
				return 0x24;
			case 0x18C41:
				return 0x24;
			case 0x18C42:
				return 0x24;
			case 0x18C43:
				return 0x24;
			case 0x18C44:
				return 0x24;
			case 0x18C45:
				return 0x24;
			case 0x18C46:
				return 0x24;
			case 0x18C47:
				return 0x24;
			case 0x18C48:
				return 0x24;
			case 0x18C49:
				return 0x24;
			case 0x18C4A:
				return 0x24;
			case 0x18C4B:
				return 0x24;
			case 0x18C4C:
				return 0x24;
			case 0x18C4D:
				return 0x24;
			case 0x18C4E:
				return 0x24;
			case 0x18C4F:
				return 0x24;
			case 0x18C50:
				return 0x24;
			case 0x18C51:
				return 0x24;
			case 0x18C52:
				return 0x24;
			case 0x18C53:
				return 0x24;
			case 0x18C54:
				return 0x24;
			case 0x18C55:
				return 0x24;
			case 0x18C56:
				return 0x24;
			case 0x18C57:
				return 0x24;
			case 0x18C58:
				return 0x24;
			case 0x18C59:
				return 0x24;
			case 0x18C5A:
				return 0x24;
			case 0x18C5B:
				return 0x24;
			case 0x18C5C:
				return 0x24;
			case 0x18C5D:
				return 0x24;
			case 0x18C5E:
				return 0x24;
			case 0x18C5F:
				return 0x24;
			case 0x18C60:
				return 0x24;
			case 0x18C61:
				return 0x24;
			case 0x18C62:
				return 0x24;
			case 0x18C63:
				return 0x24;
			case 0x18C64:
				return 0x24;
			case 0x18C65:
				return 0x24;
			case 0x18C66:
				return 0x24;
			case 0x18C67:
				return 0x24;
			case 0x18C68:
				return 0x24;
			case 0x18C69:
				return 0x24;
			case 0x18C6A:
				return 0x24;
			case 0x18C6B:
				return 0x24;
			case 0x18C6C:
				return 0x24;
			case 0x18C6D:
				return 0x24;
			case 0x18C6E:
				return 0x24;
			case 0x18C6F:
				return 0x24;
			case 0x18C70:
				return 0x24;
			case 0x18C71:
				return 0x24;
			case 0x18C72:
				return 0x24;
			case 0x18C73:
				return 0x24;
			case 0x18C74:
				return 0x24;
			case 0x18C75:
				return 0x24;
			case 0x18C76:
				return 0x24;
			case 0x18C77:
				return 0x24;
			case 0x18C78:
				return 0x24;
			case 0x18C79:
				return 0x24;
			case 0x18C7A:
				return 0x24;
			case 0x18C7B:
				return 0x24;
			case 0x18C7C:
				return 0x24;
			case 0x18C7D:
				return 0x24;
			case 0x18C7E:
				return 0x24;
			case 0x18C7F:
				return 0x24;
			case 0x18C80:
				return 0x24;
			case 0x18C81:
				return 0x24;
			case 0x18C82:
				return 0x24;
			case 0x18C83:
				return 0x24;
			case 0x18C84:
				return 0x24;
			case 0x18C85:
				return 0x24;
			case 0x18C86:
				return 0x24;
			case 0x18C87:
				return 0x24;
			case 0x18C88:
				return 0x24;
			case 0x18C89:
				return 0x24;
			case 0x18C8A:
				return 0x24;
			case 0x18C8B:
				return 0x24;
			case 0x18C8C:
				return 0x24;
			case 0x18C8D:
				return 0x24;
			case 0x18C8E:
				return 0x24;
			case 0x18C8F:
				return 0x24;
			case 0x18C90:
				return 0x24;
			case 0x18C91:
				return 0x24;
			case 0x18C92:
				return 0x24;
			case 0x18C93:
				return 0x24;
			case 0x18C94:
				return 0x24;
			case 0x18C95:
				return 0x24;
			case 0x18C96:
				return 0x24;
			case 0x18C97:
				return 0x24;
			case 0x18C98:
				return 0x24;
			case 0x18C99:
				return 0x24;
			case 0x18C9A:
				return 0x24;
			case 0x18C9B:
				return 0x24;
			case 0x18C9C:
				return 0x24;
			case 0x18C9D:
				return 0x24;
			case 0x18C9E:
				return 0x24;
			case 0x18C9F:
				return 0x24;
			case 0x18CA0:
				return 0x24;
			case 0x18CA1:
				return 0x24;
			case 0x18CA2:
				return 0x24;
			case 0x18CA3:
				return 0x24;
			case 0x18CA4:
				return 0x24;
			case 0x18CA5:
				return 0x24;
			case 0x18CA6:
				return 0x24;
			case 0x18CA7:
				return 0x24;
			case 0x18CA8:
				return 0x24;
			case 0x18CA9:
				return 0x24;
			case 0x18CAA:
				return 0x24;
			case 0x18CAB:
				return 0x24;
			case 0x18CAC:
				return 0x24;
			case 0x18CAD:
				return 0x24;
			case 0x18CAE:
				return 0x24;
			case 0x18CAF:
				return 0x24;
			case 0x18CB0:
				return 0x24;
			case 0x18CB1:
				return 0x24;
			case 0x18CB2:
				return 0x24;
			case 0x18CB3:
				return 0x24;
			case 0x18CB4:
				return 0x24;
			case 0x18CB5:
				return 0x24;
			case 0x18CB6:
				return 0x24;
			case 0x18CB7:
				return 0x24;
			case 0x18CB8:
				return 0x24;
			case 0x18CB9:
				return 0x24;
			case 0x18CBA:
				return 0x24;
			case 0x18CBB:
				return 0x24;
			case 0x18CBC:
				return 0x24;
			case 0x18CBD:
				return 0x24;
			case 0x18CBE:
				return 0x24;
			case 0x18CBF:
				return 0x24;
			case 0x18CC0:
				return 0x24;
			case 0x18CC1:
				return 0x24;
			case 0x18CC2:
				return 0x24;
			case 0x18CC3:
				return 0x24;
			case 0x18CC4:
				return 0x24;
			case 0x18CC5:
				return 0x24;
			case 0x18CC6:
				return 0x24;
			case 0x18CC7:
				return 0x24;
			case 0x18CC8:
				return 0x24;
			case 0x18CC9:
				return 0x24;
			case 0x18CCA:
				return 0x24;
			case 0x18CCB:
				return 0x24;
			case 0x18CCC:
				return 0x24;
			case 0x18CCD:
				return 0x24;
			case 0x18CCE:
				return 0x24;
			case 0x18CCF:
				return 0x24;
			case 0x18CD0:
				return 0x24;
			case 0x18CD1:
				return 0x24;
			case 0x18CD2:
				return 0x24;
			case 0x18CD3:
				return 0x24;
			case 0x18CD4:
				return 0x24;
			case 0x18CD5:
				return 0x24;
			case 0x18D00:
				return 0x25;
			case 0x18D08:
				return 0x24;
			case 0x1B000:
				return 0x1A;
			case 0x1B001:
				return 0x1B;
			case 0x1B002:
				return 0x16;
			case 0x1B003:
				return 0x16;
			case 0x1B004:
				return 0x16;
			case 0x1B005:
				return 0x17;
			case 0x1B006:
				return 0x16;
			case 0x1B007:
				return 0x16;
			case 0x1B008:
				return 0x16;
			case 0x1B009:
				return 0x16;
			case 0x1B00A:
				return 0x16;
			case 0x1B00B:
				return 0x16;
			case 0x1B00C:
				return 0x16;
			case 0x1B00D:
				return 0x16;
			case 0x1B00E:
				return 0x16;
			case 0x1B00F:
				return 0x16;
			case 0x1B010:
				return 0x16;
			case 0x1B011:
				return 0x16;
			case 0x1B012:
				return 0x16;
			case 0x1B013:
				return 0x16;
			case 0x1B014:
				return 0x16;
			case 0x1B015:
				return 0x16;
			case 0x1B016:
				return 0x16;
			case 0x1B017:
				return 0x17;
			case 0x1B018:
				return 0x17;
			case 0x1B019:
				return 0x17;
			case 0x1B01A:
				return 0x17;
			case 0x1B01B:
				return 0x17;
			case 0x1B01C:
				return 0x17;
			case 0x1B01D:
				return 0x17;
			case 0x1B01E:
				return 0x17;
			case 0x1B01F:
				return 0x17;
			case 0x1B020:
				return 0x18;
			case 0x1B021:
				return 0x18;
			case 0x1B022:
				return 0x18;
			case 0x1B023:
				return 0x17;
			case 0x1B024:
				return 0x17;
			case 0x1B025:
				return 0x17;
			case 0x1B026:
				return 0x17;
			case 0x1B027:
				return 0x17;
			case 0x1B028:
				return 0x17;
			case 0x1B029:
				return 0x17;
			case 0x1B02A:
				return 0x17;
			case 0x1B02B:
				return 0x17;
			case 0x1B02C:
				return 0x17;
			case 0x1B02D:
				return 0x17;
			case 0x1B02E:
				return 0x17;
			case 0x1B02F:
				return 0x17;
			case 0x1B030:
				return 0x17;
			case 0x1B031:
				return 0x17;
			case 0x1B032:
				return 0x17;
			case 0x1B033:
				return 0x17;
			case 0x1B034:
				return 0x17;
			case 0x1B035:
				return 0x17;
			case 0x1B036:
				return 0x17;
			case 0x1B037:
				return 0x17;
			case 0x1B038:
				return 0x17;
			case 0x1B039:
				return 0x17;
			case 0x1B03A:
				return 0x17;
			case 0x1B03B:
				return 0x18;
			case 0x1B03C:
				return 0x17;
			case 0x1B03D:
				return 0x17;
			case 0x1B03E:
				return 0x17;
			case 0x1B03F:
				return 0x17;
			case 0x1B040:
				return 0x17;
			case 0x1B041:
				return 0x17;
			case 0x1B042:
				return 0x17;
			case 0x1B043:
				return 0x17;
			case 0x1B044:
				return 0x17;
			case 0x1B045:
				return 0x17;
			case 0x1B046:
				return 0x17;
			case 0x1B047:
				return 0x17;
			case 0x1B048:
				return 0x17;
			case 0x1B049:
				return 0x17;
			case 0x1B04A:
				return 0x17;
			case 0x1B04B:
				return 0x17;
			case 0x1B04C:
				return 0x17;
			case 0x1B04D:
				return 0x17;
			case 0x1B04E:
				return 0x17;
			case 0x1B04F:
				return 0x17;
			case 0x1B050:
				return 0x17;
			case 0x1B051:
				return 0x17;
			case 0x1B052:
				return 0x17;
			case 0x1B053:
				return 0x17;
			case 0x1B054:
				return 0x17;
			case 0x1B055:
				return 0x17;
			case 0x1B056:
				return 0x17;
			case 0x1B057:
				return 0x17;
			case 0x1B058:
				return 0x17;
			case 0x1B059:
				return 0x17;
			case 0x1B05A:
				return 0x17;
			case 0x1B05B:
				return 0x17;
			case 0x1B05C:
				return 0x17;
			case 0x1B05D:
				return 0x17;
			case 0x1B05E:
				return 0x17;
			case 0x1B05F:
				return 0x17;
			case 0x1B060:
				return 0x17;
			case 0x1B061:
				return 0x17;
			case 0x1B062:
				return 0x17;
			case 0x1B063:
				return 0x17;
			case 0x1B064:
				return 0x17;
			case 0x1B065:
				return 0x17;
			case 0x1B066:
				return 0x17;
			case 0x1B067:
				return 0x17;
			case 0x1B068:
				return 0x17;
			case 0x1B069:
				return 0x17;
			case 0x1B06A:
				return 0x17;
			case 0x1B06B:
				return 0x17;
			case 0x1B06C:
				return 0x17;
			case 0x1B06D:
				return 0x18;
			case 0x1B06E:
				return 0x17;
			case 0x1B06F:
				return 0x17;
			case 0x1B070:
				return 0x17;
			case 0x1B071:
				return 0x17;
			case 0x1B072:
				return 0x17;
			case 0x1B073:
				return 0x17;
			case 0x1B074:
				return 0x17;
			case 0x1B075:
				return 0x17;
			case 0x1B076:
				return 0x17;
			case 0x1B077:
				return 0x17;
			case 0x1B078:
				return 0x17;
			case 0x1B079:
				return 0x17;
			case 0x1B07A:
				return 0x17;
			case 0x1B07B:
				return 0x17;
			case 0x1B07C:
				return 0x17;
			case 0x1B07D:
				return 0x18;
			case 0x1B07E:
				return 0x17;
			case 0x1B07F:
				return 0x17;
			case 0x1B080:
				return 0x17;
			case 0x1B081:
				return 0x17;
			case 0x1B082:
				return 0x17;
			case 0x1B083:
				return 0x17;
			case 0x1B084:
				return 0x17;
			case 0x1B085:
				return 0x17;
			case 0x1B086:
				return 0x17;
			case 0x1B087:
				return 0x17;
			case 0x1B088:
				return 0x17;
			case 0x1B089:
				return 0x17;
			case 0x1B08A:
				return 0x17;
			case 0x1B08B:
				return 0x17;
			case 0x1B08C:
				return 0x17;
			case 0x1B08D:
				return 0x17;
			case 0x1B08E:
				return 0x18;
			case 0x1B08F:
				return 0x17;
			case 0x1B090:
				return 0x17;
			case 0x1B091:
				return 0x17;
			case 0x1B092:
				return 0x17;
			case 0x1B093:
				return 0x17;
			case 0x1B094:
				return 0x17;
			case 0x1B095:
				return 0x17;
			case 0x1B096:
				return 0x17;
			case 0x1B097:
				return 0x17;
			case 0x1B098:
				return 0x18;
			case 0x1B099:
				return 0x17;
			case 0x1B09A:
				return 0x17;
			case 0x1B09B:
				return 0x17;
			case 0x1B09C:
				return 0x17;
			case 0x1B09D:
				return 0x17;
			case 0x1B09E:
				return 0x17;
			case 0x1B09F:
				return 0x17;
			case 0x1B0A0:
				return 0x17;
			case 0x1B0A1:
				return 0x17;
			case 0x1B0A2:
				return 0x17;
			case 0x1B0A3:
				return 0x17;
			case 0x1B0A4:
				return 0x17;
			case 0x1B0A5:
				return 0x17;
			case 0x1B0A6:
				return 0x17;
			case 0x1B0A7:
				return 0x18;
			case 0x1B0A8:
				return 0x18;
			case 0x1B0A9:
				return 0x17;
			case 0x1B0AA:
				return 0x17;
			case 0x1B0AB:
				return 0x17;
			case 0x1B0AC:
				return 0x17;
			case 0x1B0AD:
				return 0x17;
			case 0x1B0AE:
				return 0x17;
			case 0x1B0AF:
				return 0x17;
			case 0x1B0B0:
				return 0x17;
			case 0x1B0B1:
				return 0x17;
			case 0x1B0B2:
				return 0x17;
			case 0x1B0B3:
				return 0x17;
			case 0x1B0B4:
				return 0x17;
			case 0x1B0B5:
				return 0x17;
			case 0x1B0B6:
				return 0x17;
			case 0x1B0B7:
				return 0x17;
			case 0x1B0B8:
				return 0x17;
			case 0x1B0B9:
				return 0x17;
			case 0x1B0BA:
				return 0x17;
			case 0x1B0BB:
				return 0x17;
			case 0x1B0BC:
				return 0x17;
			case 0x1B0BD:
				return 0x17;
			case 0x1B0BE:
				return 0x17;
			case 0x1B0BF:
				return 0x17;
			case 0x1B0C0:
				return 0x17;
			case 0x1B0C1:
				return 0x17;
			case 0x1B0C2:
				return 0x17;
			case 0x1B0C3:
				return 0x17;
			case 0x1B0C4:
				return 0x17;
			case 0x1B0C5:
				return 0x17;
			case 0x1B0C6:
				return 0x17;
			case 0x1B0C7:
				return 0x17;
			case 0x1B0C8:
				return 0x17;
			case 0x1B0C9:
				return 0x17;
			case 0x1B0CA:
				return 0x17;
			case 0x1B0CB:
				return 0x17;
			case 0x1B0CC:
				return 0x17;
			case 0x1B0CD:
				return 0x17;
			case 0x1B0CE:
				return 0x17;
			case 0x1B0CF:
				return 0x17;
			case 0x1B0D0:
				return 0x17;
			case 0x1B0D1:
				return 0x17;
			case 0x1B0D2:
				return 0x17;
			case 0x1B0D3:
				return 0x17;
			case 0x1B0D4:
				return 0x17;
			case 0x1B0D5:
				return 0x17;
			case 0x1B0D6:
				return 0x18;
			case 0x1B0D7:
				return 0x17;
			case 0x1B0D8:
				return 0x17;
			case 0x1B0D9:
				return 0x17;
			case 0x1B0DA:
				return 0x17;
			case 0x1B0DB:
				return 0x17;
			case 0x1B0DC:
				return 0x17;
			case 0x1B0DD:
				return 0x17;
			case 0x1B0DE:
				return 0x17;
			case 0x1B0DF:
				return 0x17;
			case 0x1B0E0:
				return 0x17;
			case 0x1B0E1:
				return 0x17;
			case 0x1B0E2:
				return 0x18;
			case 0x1B0E3:
				return 0x17;
			case 0x1B0E4:
				return 0x17;
			case 0x1B0E5:
				return 0x17;
			case 0x1B0E6:
				return 0x17;
			case 0x1B0E7:
				return 0x17;
			case 0x1B0E8:
				return 0x17;
			case 0x1B0E9:
				return 0x17;
			case 0x1B0EA:
				return 0x17;
			case 0x1B0EB:
				return 0x17;
			case 0x1B0EC:
				return 0x17;
			case 0x1B0ED:
				return 0x17;
			case 0x1B0EE:
				return 0x17;
			case 0x1B0EF:
				return 0x17;
			case 0x1B0F0:
				return 0x17;
			case 0x1B0F1:
				return 0x17;
			case 0x1B0F2:
				return 0x17;
			case 0x1B0F3:
				return 0x17;
			case 0x1B0F4:
				return 0x17;
			case 0x1B0F5:
				return 0x17;
			case 0x1B0F6:
				return 0x17;
			case 0x1B0F7:
				return 0x17;
			case 0x1B0F8:
				return 0x17;
			case 0x1B0F9:
				return 0x17;
			case 0x1B0FA:
				return 0x17;
			case 0x1B0FB:
				return 0x17;
			case 0x1B0FC:
				return 0x17;
			case 0x1B0FD:
				return 0x17;
			case 0x1B0FE:
				return 0x17;
			case 0x1B0FF:
				return 0x17;
			case 0x1B100:
				return 0x17;
			case 0x1B101:
				return 0x17;
			case 0x1B102:
				return 0x17;
			case 0x1B103:
				return 0x17;
			case 0x1B104:
				return 0x17;
			case 0x1B105:
				return 0x17;
			case 0x1B106:
				return 0x17;
			case 0x1B107:
				return 0x17;
			case 0x1B108:
				return 0x17;
			case 0x1B109:
				return 0x17;
			case 0x1B10A:
				return 0x17;
			case 0x1B10B:
				return 0x17;
			case 0x1B10C:
				return 0x17;
			case 0x1B10D:
				return 0x17;
			case 0x1B10E:
				return 0x17;
			case 0x1B10F:
				return 0x17;
			case 0x1B110:
				return 0x17;
			case 0x1B111:
				return 0x17;
			case 0x1B112:
				return 0x17;
			case 0x1B113:
				return 0x17;
			case 0x1B114:
				return 0x17;
			case 0x1B115:
				return 0x17;
			case 0x1B116:
				return 0x17;
			case 0x1B117:
				return 0x17;
			case 0x1B118:
				return 0x17;
			case 0x1B119:
				return 0x17;
			case 0x1B11A:
				return 0x17;
			case 0x1B11B:
				return 0x17;
			case 0x1B11C:
				return 0x17;
			case 0x1B11D:
				return 0x1C;
			case 0x1B11E:
				return 0x1C;
			case 0x1B150:
				return 0x19;
			case 0x1B151:
				return 0x19;
			case 0x1B152:
				return 0x19;
			case 0x1B164:
				return 0x19;
			case 0x1B165:
				return 0x19;
			case 0x1B166:
				return 0x19;
			case 0x1B167:
				return 0x18;
			case 0x1B170:
				return 0x16;
			case 0x1B171:
				return 0x16;
			case 0x1B172:
				return 0x16;
			case 0x1B173:
				return 0x16;
			case 0x1B174:
				return 0x16;
			case 0x1B175:
				return 0x16;
			case 0x1B176:
				return 0x16;
			case 0x1B177:
				return 0x16;
			case 0x1B178:
				return 0x16;
			case 0x1B179:
				return 0x16;
			case 0x1B17A:
				return 0x16;
			case 0x1B17B:
				return 0x16;
			case 0x1B17C:
				return 0x16;
			case 0x1B17D:
				return 0x16;
			case 0x1B17E:
				return 0x16;
			case 0x1B17F:
				return 0x16;
			case 0x1B180:
				return 0x16;
			case 0x1B181:
				return 0x16;
			case 0x1B182:
				return 0x16;
			case 0x1B183:
				return 0x16;
			case 0x1B184:
				return 0x16;
			case 0x1B185:
				return 0x16;
			case 0x1B186:
				return 0x16;
			case 0x1B187:
				return 0x16;
			case 0x1B188:
				return 0x16;
			case 0x1B189:
				return 0x16;
			case 0x1B18A:
				return 0x16;
			case 0x1B18B:
				return 0x16;
			case 0x1B18C:
				return 0x16;
			case 0x1B18D:
				return 0x16;
			case 0x1B18E:
				return 0x16;
			case 0x1B18F:
				return 0x16;
			case 0x1B190:
				return 0x16;
			case 0x1B191:
				return 0x16;
			case 0x1B192:
				return 0x16;
			case 0x1B193:
				return 0x16;
			case 0x1B194:
				return 0x16;
			case 0x1B195:
				return 0x16;
			case 0x1B196:
				return 0x16;
			case 0x1B197:
				return 0x16;
			case 0x1B198:
				return 0x16;
			case 0x1B199:
				return 0x16;
			case 0x1B19A:
				return 0x16;
			case 0x1B19B:
				return 0x16;
			case 0x1B19C:
				return 0x16;
			case 0x1B19D:
				return 0x16;
			case 0x1B19E:
				return 0x16;
			case 0x1B19F:
				return 0x16;
			case 0x1B1A0:
				return 0x16;
			case 0x1B1A1:
				return 0x16;
			case 0x1B1A2:
				return 0x16;
			case 0x1B1A3:
				return 0x16;
			case 0x1B1A4:
				return 0x16;
			case 0x1B1A5:
				return 0x16;
			case 0x1B1A6:
				return 0x16;
			case 0x1B1A7:
				return 0x16;
			case 0x1B1A8:
				return 0x16;
			case 0x1B1A9:
				return 0x16;
			case 0x1B1AA:
				return 0x16;
			case 0x1B1AB:
				return 0x16;
			case 0x1B1AC:
				return 0x16;
			case 0x1B1AD:
				return 0x16;
			case 0x1B1AE:
				return 0x16;
			case 0x1B1AF:
				return 0x16;
			case 0x1B1B0:
				return 0x16;
			case 0x1B1B1:
				return 0x16;
			case 0x1B1B2:
				return 0x16;
			case 0x1B1B3:
				return 0x16;
			case 0x1B1B4:
				return 0x16;
			case 0x1B1B5:
				return 0x16;
			case 0x1B1B6:
				return 0x16;
			case 0x1B1B7:
				return 0x16;
			case 0x1B1B8:
				return 0x16;
			case 0x1B1B9:
				return 0x16;
			case 0x1B1BA:
				return 0x16;
			case 0x1B1BB:
				return 0x16;
			case 0x1B1BC:
				return 0x16;
			case 0x1B1BD:
				return 0x16;
			case 0x1B1BE:
				return 0x16;
			case 0x1B1BF:
				return 0x16;
			case 0x1B1C0:
				return 0x16;
			case 0x1B1C1:
				return 0x16;
			case 0x1B1C2:
				return 0x16;
			case 0x1B1C3:
				return 0x16;
			case 0x1B1C4:
				return 0x16;
			case 0x1B1C5:
				return 0x16;
			case 0x1B1C6:
				return 0x16;
			case 0x1B1C7:
				return 0x16;
			case 0x1B1C8:
				return 0x16;
			case 0x1B1C9:
				return 0x16;
			case 0x1B1CA:
				return 0x16;
			case 0x1B1CB:
				return 0x16;
			case 0x1B1CC:
				return 0x16;
			case 0x1B1CD:
				return 0x16;
			case 0x1B1CE:
				return 0x16;
			case 0x1B1CF:
				return 0x16;
			case 0x1B1D0:
				return 0x16;
			case 0x1B1D1:
				return 0x16;
			case 0x1B1D2:
				return 0x16;
			case 0x1B1D3:
				return 0x16;
			case 0x1B1D4:
				return 0x16;
			case 0x1B1D5:
				return 0x16;
			case 0x1B1D6:
				return 0x16;
			case 0x1B1D7:
				return 0x16;
			case 0x1B1D8:
				return 0x16;
			case 0x1B1D9:
				return 0x16;
			case 0x1B1DA:
				return 0x16;
			case 0x1B1DB:
				return 0x16;
			case 0x1B1DC:
				return 0x16;
			case 0x1B1DD:
				return 0x16;
			case 0x1B1DE:
				return 0x16;
			case 0x1B1DF:
				return 0x16;
			case 0x1B1E0:
				return 0x16;
			case 0x1B1E1:
				return 0x16;
			case 0x1B1E2:
				return 0x16;
			case 0x1B1E3:
				return 0x16;
			case 0x1B1E4:
				return 0x16;
			case 0x1B1E5:
				return 0x16;
			case 0x1B1E6:
				return 0x16;
			case 0x1B1E7:
				return 0x16;
			case 0x1B1E8:
				return 0x16;
			case 0x1B1E9:
				return 0x16;
			case 0x1B1EA:
				return 0x16;
			case 0x1B1EB:
				return 0x16;
			case 0x1B1EC:
				return 0x16;
			case 0x1B1ED:
				return 0x16;
			case 0x1B1EE:
				return 0x16;
			case 0x1B1EF:
				return 0x16;
			case 0x1B1F0:
				return 0x16;
			case 0x1B1F1:
				return 0x16;
			case 0x1B1F2:
				return 0x16;
			case 0x1B1F3:
				return 0x16;
			case 0x1B1F4:
				return 0x16;
			case 0x1B1F5:
				return 0x16;
			case 0x1B1F6:
				return 0x16;
			case 0x1B1F7:
				return 0x16;
			case 0x1B1F8:
				return 0x16;
			case 0x1B1F9:
				return 0x16;
			case 0x1B1FA:
				return 0x16;
			case 0x1B1FB:
				return 0x16;
			case 0x1B1FC:
				return 0x16;
			case 0x1B1FD:
				return 0x16;
			case 0x1B1FE:
				return 0x16;
			case 0x1B1FF:
				return 0x16;
			case 0x1B200:
				return 0x16;
			case 0x1B201:
				return 0x16;
			case 0x1B202:
				return 0x16;
			case 0x1B203:
				return 0x16;
			case 0x1B204:
				return 0x16;
			case 0x1B205:
				return 0x16;
			case 0x1B206:
				return 0x16;
			case 0x1B207:
				return 0x16;
			case 0x1B208:
				return 0x16;
			case 0x1B209:
				return 0x16;
			case 0x1B20A:
				return 0x16;
			case 0x1B20B:
				return 0x16;
			case 0x1B20C:
				return 0x16;
			case 0x1B20D:
				return 0x16;
			case 0x1B20E:
				return 0x16;
			case 0x1B20F:
				return 0x16;
			case 0x1B210:
				return 0x16;
			case 0x1B211:
				return 0x16;
			case 0x1B212:
				return 0x16;
			case 0x1B213:
				return 0x16;
			case 0x1B214:
				return 0x16;
			case 0x1B215:
				return 0x16;
			case 0x1B216:
				return 0x16;
			case 0x1B217:
				return 0x16;
			case 0x1B218:
				return 0x16;
			case 0x1B219:
				return 0x16;
			case 0x1B21A:
				return 0x16;
			case 0x1B21B:
				return 0x16;
			case 0x1B21C:
				return 0x16;
			case 0x1B21D:
				return 0x16;
			case 0x1B21E:
				return 0x16;
			case 0x1B21F:
				return 0x16;
			case 0x1B220:
				return 0x16;
			case 0x1B221:
				return 0x16;
			case 0x1B222:
				return 0x16;
			case 0x1B223:
				return 0x16;
			case 0x1B224:
				return 0x16;
			case 0x1B225:
				return 0x16;
			case 0x1B226:
				return 0x16;
			case 0x1B227:
				return 0x16;
			case 0x1B228:
				return 0x16;
			case 0x1B229:
				return 0x16;
			case 0x1B22A:
				return 0x16;
			case 0x1B22B:
				return 0x16;
			case 0x1B22C:
				return 0x16;
			case 0x1B22D:
				return 0x16;
			case 0x1B22E:
				return 0x16;
			case 0x1B22F:
				return 0x16;
			case 0x1B230:
				return 0x16;
			case 0x1B231:
				return 0x16;
			case 0x1B232:
				return 0x16;
			case 0x1B233:
				return 0x16;
			case 0x1B234:
				return 0x16;
			case 0x1B235:
				return 0x16;
			case 0x1B236:
				return 0x16;
			case 0x1B237:
				return 0x16;
			case 0x1B238:
				return 0x16;
			case 0x1B239:
				return 0x16;
			case 0x1B23A:
				return 0x16;
			case 0x1B23B:
				return 0x16;
			case 0x1B23C:
				return 0x16;
			case 0x1B23D:
				return 0x16;
			case 0x1B23E:
				return 0x16;
			case 0x1B23F:
				return 0x16;
			case 0x1B240:
				return 0x16;
			case 0x1B241:
				return 0x16;
			case 0x1B242:
				return 0x16;
			case 0x1B243:
				return 0x16;
			case 0x1B244:
				return 0x16;
			case 0x1B245:
				return 0x16;
			case 0x1B246:
				return 0x16;
			case 0x1B247:
				return 0x16;
			case 0x1B248:
				return 0x16;
			case 0x1B249:
				return 0x16;
			case 0x1B24A:
				return 0x16;
			case 0x1B24B:
				return 0x16;
			case 0x1B24C:
				return 0x16;
			case 0x1B24D:
				return 0x16;
			case 0x1B24E:
				return 0x16;
			case 0x1B24F:
				return 0x16;
			case 0x1B250:
				return 0x16;
			case 0x1B251:
				return 0x16;
			case 0x1B252:
				return 0x16;
			case 0x1B253:
				return 0x16;
			case 0x1B254:
				return 0x16;
			case 0x1B255:
				return 0x16;
			case 0x1B256:
				return 0x16;
			case 0x1B257:
				return 0x16;
			case 0x1B258:
				return 0x16;
			case 0x1B259:
				return 0x16;
			case 0x1B25A:
				return 0x16;
			case 0x1B25B:
				return 0x16;
			case 0x1B25C:
				return 0x16;
			case 0x1B25D:
				return 0x16;
			case 0x1B25E:
				return 0x16;
			case 0x1B25F:
				return 0x16;
			case 0x1B260:
				return 0x16;
			case 0x1B261:
				return 0x16;
			case 0x1B262:
				return 0x16;
			case 0x1B263:
				return 0x16;
			case 0x1B264:
				return 0x16;
			case 0x1B265:
				return 0x16;
			case 0x1B266:
				return 0x16;
			case 0x1B267:
				return 0x16;
			case 0x1B268:
				return 0x16;
			case 0x1B269:
				return 0x16;
			case 0x1B26A:
				return 0x16;
			case 0x1B26B:
				return 0x16;
			case 0x1B26C:
				return 0x16;
			case 0x1B26D:
				return 0x16;
			case 0x1B26E:
				return 0x16;
			case 0x1B26F:
				return 0x16;
			case 0x1B270:
				return 0x16;
			case 0x1B271:
				return 0x16;
			case 0x1B272:
				return 0x16;
			case 0x1B273:
				return 0x16;
			case 0x1B274:
				return 0x16;
			case 0x1B275:
				return 0x16;
			case 0x1B276:
				return 0x16;
			case 0x1B277:
				return 0x16;
			case 0x1B278:
				return 0x16;
			case 0x1B279:
				return 0x16;
			case 0x1B27A:
				return 0x16;
			case 0x1B27B:
				return 0x16;
			case 0x1B27C:
				return 0x16;
			case 0x1B27D:
				return 0x16;
			case 0x1B27E:
				return 0x16;
			case 0x1B27F:
				return 0x16;
			case 0x1B280:
				return 0x16;
			case 0x1B281:
				return 0x16;
			case 0x1B282:
				return 0x16;
			case 0x1B283:
				return 0x16;
			case 0x1B284:
				return 0x16;
			case 0x1B285:
				return 0x16;
			case 0x1B286:
				return 0x16;
			case 0x1B287:
				return 0x16;
			case 0x1B288:
				return 0x16;
			case 0x1B289:
				return 0x16;
			case 0x1B28A:
				return 0x16;
			case 0x1B28B:
				return 0x16;
			case 0x1B28C:
				return 0x16;
			case 0x1B28D:
				return 0x16;
			case 0x1B28E:
				return 0x16;
			case 0x1B28F:
				return 0x16;
			case 0x1B290:
				return 0x16;
			case 0x1B291:
				return 0x16;
			case 0x1B292:
				return 0x16;
			case 0x1B293:
				return 0x16;
			case 0x1B294:
				return 0x16;
			case 0x1B295:
				return 0x16;
			case 0x1B296:
				return 0x16;
			case 0x1B297:
				return 0x16;
			case 0x1B298:
				return 0x16;
			case 0x1B299:
				return 0x16;
			case 0x1B29A:
				return 0x16;
			case 0x1B29B:
				return 0x16;
			case 0x1B29C:
				return 0x16;
			case 0x1B29D:
				return 0x16;
			case 0x1B29E:
				return 0x16;
			case 0x1B29F:
				return 0x16;
			case 0x1B2A0:
				return 0x16;
			case 0x1B2A1:
				return 0x16;
			case 0x1B2A2:
				return 0x16;
			case 0x1B2A3:
				return 0x16;
			case 0x1B2A4:
				return 0x16;
			case 0x1B2A5:
				return 0x16;
			case 0x1B2A6:
				return 0x16;
			case 0x1B2A7:
				return 0x16;
			case 0x1B2A8:
				return 0x16;
			case 0x1B2A9:
				return 0x16;
			case 0x1B2AA:
				return 0x16;
			case 0x1B2AB:
				return 0x16;
			case 0x1B2AC:
				return 0x16;
			case 0x1B2AD:
				return 0x16;
			case 0x1B2AE:
				return 0x16;
			case 0x1B2AF:
				return 0x16;
			case 0x1B2B0:
				return 0x16;
			case 0x1B2B1:
				return 0x16;
			case 0x1B2B2:
				return 0x16;
			case 0x1B2B3:
				return 0x16;
			case 0x1B2B4:
				return 0x16;
			case 0x1B2B5:
				return 0x16;
			case 0x1B2B6:
				return 0x16;
			case 0x1B2B7:
				return 0x16;
			case 0x1B2B8:
				return 0x16;
			case 0x1B2B9:
				return 0x16;
			case 0x1B2BA:
				return 0x16;
			case 0x1B2BB:
				return 0x16;
			case 0x1B2BC:
				return 0x16;
			case 0x1B2BD:
				return 0x16;
			case 0x1B2BE:
				return 0x16;
			case 0x1B2BF:
				return 0x16;
			case 0x1B2C0:
				return 0x16;
			case 0x1B2C1:
				return 0x16;
			case 0x1B2C2:
				return 0x16;
			case 0x1B2C3:
				return 0x16;
			case 0x1B2C4:
				return 0x16;
			case 0x1B2C5:
				return 0x16;
			case 0x1B2C6:
				return 0x16;
			case 0x1B2C7:
				return 0x16;
			case 0x1B2C8:
				return 0x16;
			case 0x1B2C9:
				return 0x16;
			case 0x1B2CA:
				return 0x16;
			case 0x1B2CB:
				return 0x16;
			case 0x1B2CC:
				return 0x16;
			case 0x1B2CD:
				return 0x16;
			case 0x1B2CE:
				return 0x16;
			case 0x1B2CF:
				return 0x16;
			case 0x1B2D0:
				return 0x16;
			case 0x1B2D1:
				return 0x16;
			case 0x1B2D2:
				return 0x16;
			case 0x1B2D3:
				return 0x16;
			case 0x1B2D4:
				return 0x16;
			case 0x1B2D5:
				return 0x16;
			case 0x1B2D6:
				return 0x16;
			case 0x1B2D7:
				return 0x16;
			case 0x1B2D8:
				return 0x16;
			case 0x1B2D9:
				return 0x16;
			case 0x1B2DA:
				return 0x16;
			case 0x1B2DB:
				return 0x16;
			case 0x1B2DC:
				return 0x16;
			case 0x1B2DD:
				return 0x16;
			case 0x1B2DE:
				return 0x16;
			case 0x1B2DF:
				return 0x16;
			case 0x1B2E0:
				return 0x16;
			case 0x1B2E1:
				return 0x16;
			case 0x1B2E2:
				return 0x16;
			case 0x1B2E3:
				return 0x16;
			case 0x1B2E4:
				return 0x16;
			case 0x1B2E5:
				return 0x16;
			case 0x1B2E6:
				return 0x16;
			case 0x1B2E7:
				return 0x16;
			case 0x1B2E8:
				return 0x16;
			case 0x1B2E9:
				return 0x16;
			case 0x1B2EA:
				return 0x16;
			case 0x1B2EB:
				return 0x16;
			case 0x1B2EC:
				return 0x16;
			case 0x1B2ED:
				return 0x16;
			case 0x1B2EE:
				return 0x16;
			case 0x1B2EF:
				return 0x16;
			case 0x1B2F0:
				return 0x16;
			case 0x1B2F1:
				return 0x16;
			case 0x1B2F2:
				return 0x16;
			case 0x1B2F3:
				return 0x16;
			case 0x1B2F4:
				return 0x16;
			case 0x1B2F5:
				return 0x16;
			case 0x1B2F6:
				return 0x16;
			case 0x1B2F7:
				return 0x16;
			case 0x1B2F8:
				return 0x16;
			case 0x1B2F9:
				return 0x16;
			case 0x1B2FA:
				return 0x16;
			case 0x1B2FB:
				return 0x16;
			case 0x1BC00:
				return 0x12;
			case 0x1BC01:
				return 0x12;
			case 0x1BC02:
				return 0x12;
			case 0x1BC03:
				return 0x12;
			case 0x1BC04:
				return 0x12;
			case 0x1BC05:
				return 0x12;
			case 0x1BC06:
				return 0x12;
			case 0x1BC07:
				return 0x12;
			case 0x1BC08:
				return 0x12;
			case 0x1BC09:
				return 0x12;
			case 0x1BC0A:
				return 0x12;
			case 0x1BC0B:
				return 0x12;
			case 0x1BC0C:
				return 0x14;
			case 0x1BC0D:
				return 0x14;
			case 0x1BC0E:
				return 0x14;
			case 0x1BC0F:
				return 0x14;
			case 0x1BC10:
				return 0x14;
			case 0x1BC11:
				return 0x13;
			case 0x1BC12:
				return 0x19;
			case 0x1BC13:
				return 0x13;
			case 0x1BC14:
				return 0x13;
			case 0x1BC15:
				return 0x18;
			case 0x1BC16:
				return 0x13;
			case 0x1BC17:
				return 0x13;
			case 0x1BC18:
				return 0x13;
			case 0x1BC19:
				return 0x12;
			case 0x1BC1A:
				return 0x12;
			case 0x1BC1B:
				return 0x12;
			case 0x1BC1C:
				return 0x12;
			case 0x1BC1D:
				return 0x14;
			case 0x1BC1E:
				return 0x14;
			case 0x1BC1F:
				return 0x14;
			case 0x1BC20:
				return 0x14;
			case 0x1BC21:
				return 0x1B;
			case 0x1BC22:
				return 0x1B;
			case 0x1BC23:
				return 0x1B;
			case 0x1BC24:
				return 0x2D;
			case 0x1BC25:
				return 0x1B;
			case 0x1BC26:
				return 0x21;
			case 0x1BC27:
				return 0x14;
			case 0x1BC28:
				return 0x14;
			case 0x1BC29:
				return 0x14;
			case 0x1BC2A:
				return 0x14;
			case 0x1BC2B:
				return 0x16;
			case 0x1BC2C:
				return 0x16;
			case 0x1BC2D:
				return 0x16;
			case 0x1BC2E:
				return 0x16;
			case 0x1BC2F:
				return 0x1D;
			case 0x1BC30:
				return 0x14;
			case 0x1BC31:
				return 0x16;
			case 0x1BC32:
				return 0x14;
			case 0x1BC33:
				return 0x16;
			case 0x1BC34:
				return 0x14;
			case 0x1BC35:
				return 0x16;
			case 0x1BC36:
				return 0x14;
			case 0x1BC37:
				return 0x16;
			case 0x1BC38:
				return 0x12;
			case 0x1BC39:
				return 0x13;
			case 0x1BC3A:
				return 0x14;
			case 0x1BC3B:
				return 0x14;
			case 0x1BC3C:
				return 0x14;
			case 0x1BC3D:
				return 0x16;
			case 0x1BC3E:
				return 0x16;
			case 0x1BC3F:
				return 0x14;
			case 0x1BC40:
				return 0x16;
			case 0x1BC41:
				return 0x12;
			case 0x1BC42:
				return 0x19;
			case 0x1BC43:
				return 0x13;
			case 0x1BC44:
				return 0x12;
			case 0x1BC45:
				return 0x14;
			case 0x1BC46:
				return 0x12;
			case 0x1BC47:
				return 0x12;
			case 0x1BC48:
				return 0x13;
			case 0x1BC49:
				return 0x18;
			case 0x1BC4A:
				return 0x13;
			case 0x1BC4B:
				return 0x13;
			case 0x1BC4C:
				return 0x19;
			case 0x1BC4D:
				return 0x1B;
			case 0x1BC4E:
				return 0x19;
			case 0x1BC4F:
				return 0x17;
			case 0x1BC50:
				return 0x13;
			case 0x1BC51:
				return 0x12;
			case 0x1BC52:
				return 0x13;
			case 0x1BC53:
				return 0x13;
			case 0x1BC54:
				return 0x14;
			case 0x1BC55:
				return 0x17;
			case 0x1BC56:
				return 0x1B;
			case 0x1BC57:
				return 0x13;
			case 0x1BC58:
				return 0x18;
			case 0x1BC59:
				return 0x14;
			case 0x1BC5A:
				return 0x13;
			case 0x1BC5B:
				return 0x13;
			case 0x1BC5C:
				return 0x13;
			case 0x1BC5D:
				return 0x13;
			case 0x1BC5E:
				return 0x13;
			case 0x1BC5F:
				return 0x14;
			case 0x1BC60:
				return 0x14;
			case 0x1BC61:
				return 0x18;
			case 0x1BC62:
				return 0x18;
			case 0x1BC63:
				return 0x18;
			case 0x1BC64:
				return 0x18;
			case 0x1BC65:
				return 0x1A;
			case 0x1BC66:
				return 0x1A;
			case 0x1BC67:
				return 0x19;
			case 0x1BC68:
				return 0x19;
			case 0x1BC69:
				return 0x19;
			case 0x1BC6A:
				return 0x1A;
			case 0x1BC70:
				return 0x26;
			case 0x1BC71:
				return 0x25;
			case 0x1BC72:
				return 0x27;
			case 0x1BC73:
				return 0x23;
			case 0x1BC74:
				return 0x23;
			case 0x1BC75:
				return 0x24;
			case 0x1BC76:
				return 0x1F;
			case 0x1BC77:
				return 0x2D;
			case 0x1BC78:
				return 0x20;
			case 0x1BC79:
				return 0x1D;
			case 0x1BC7A:
				return 0x1F;
			case 0x1BC7B:
				return 0x1F;
			case 0x1BC7C:
				return 0x25;
			case 0x1BC80:
				return 0x1A;
			case 0x1BC81:
				return 0x20;
			case 0x1BC82:
				return 0x1A;
			case 0x1BC83:
				return 0x1F;
			case 0x1BC84:
				return 0x18;
			case 0x1BC85:
				return 0x1B;
			case 0x1BC86:
				return 0x19;
			case 0x1BC87:
				return 0x19;
			case 0x1BC88:
				return 0x1D;
			case 0x1BC90:
				return 0x19;
			case 0x1BC91:
				return 0x1F;
			case 0x1BC92:
				return 0x19;
			case 0x1BC93:
				return 0x1E;
			case 0x1BC94:
				return 0x17;
			case 0x1BC95:
				return 0x1A;
			case 0x1BC96:
				return 0x18;
			case 0x1BC97:
				return 0x18;
			case 0x1BC98:
				return 0x1C;
			case 0x1BC99:
				return 0x19;
			case 0x1BC9C:
				return 0x1B;
			case 0x1BC9D:
				return 0x1F;
			case 0x1BC9E:
				return 0x15;
			case 0x1BC9F:
				return 0x27;
			case 0x1BCA0:
				return 0x20;
			case 0x1BCA1:
				return 0x24;
			case 0x1BCA2:
				return 0x1B;
			case 0x1BCA3:
				return 0x19;
			case 0x1D000:
				return 0x1F;
			case 0x1D001:
				return 0x20;
			case 0x1D002:
				return 0x25;
			case 0x1D003:
				return 0x2B;
			case 0x1D004:
				return 0x25;
			case 0x1D005:
				return 0x2C;
			case 0x1D006:
				return 0x26;
			case 0x1D007:
				return 0x22;
			case 0x1D008:
				return 0x23;
			case 0x1D009:
				return 0x25;
			case 0x1D00A:
				return 0x23;
			case 0x1D00B:
				return 0x29;
			case 0x1D00C:
				return 0x22;
			case 0x1D00D:
				return 0x2B;
			case 0x1D00E:
				return 0x29;
			case 0x1D00F:
				return 0x20;
			case 0x1D010:
				return 0x23;
			case 0x1D011:
				return 0x24;
			case 0x1D012:
				return 0x2A;
			case 0x1D013:
				return 0x21;
			case 0x1D014:
				return 0x1F;
			case 0x1D015:
				return 0x29;
			case 0x1D016:
				return 0x29;
			case 0x1D017:
				return 0x20;
			case 0x1D018:
				return 0x22;
			case 0x1D019:
				return 0x1F;
			case 0x1D01A:
				return 0x27;
			case 0x1D01B:
				return 0x2A;
			case 0x1D01C:
				return 0x2C;
			case 0x1D01D:
				return 0x22;
			case 0x1D01E:
				return 0x22;
			case 0x1D01F:
				return 0x2A;
			case 0x1D020:
				return 0x29;
			case 0x1D021:
				return 0x2A;
			case 0x1D022:
				return 0x2B;
			case 0x1D023:
				return 0x22;
			case 0x1D024:
				return 0x20;
			case 0x1D025:
				return 0x1F;
			case 0x1D026:
				return 0x29;
			case 0x1D027:
				return 0x21;
			case 0x1D028:
				return 0x26;
			case 0x1D029:
				return 0x20;
			case 0x1D02A:
				return 0x2A;
			case 0x1D02B:
				return 0x2E;
			case 0x1D02C:
				return 0x2C;
			case 0x1D02D:
				return 0x1F;
			case 0x1D02E:
				return 0x1F;
			case 0x1D02F:
				return 0x1D;
			case 0x1D030:
				return 0x1E;
			case 0x1D031:
				return 0x21;
			case 0x1D032:
				return 0x23;
			case 0x1D033:
				return 0x27;
			case 0x1D034:
				return 0x29;
			case 0x1D035:
				return 0x23;
			case 0x1D036:
				return 0x2B;
			case 0x1D037:
				return 0x29;
			case 0x1D038:
				return 0x22;
			case 0x1D039:
				return 0x23;
			case 0x1D03A:
				return 0x22;
			case 0x1D03B:
				return 0x2B;
			case 0x1D03C:
				return 0x21;
			case 0x1D03D:
				return 0x2E;
			case 0x1D03E:
				return 0x2E;
			case 0x1D03F:
				return 0x21;
			case 0x1D040:
				return 0x1E;
			case 0x1D041:
				return 0x21;
			case 0x1D042:
				return 0x27;
			case 0x1D043:
				return 0x27;
			case 0x1D044:
				return 0x26;
			case 0x1D045:
				return 0x26;
			case 0x1D046:
				return 0x22;
			case 0x1D047:
				return 0x24;
			case 0x1D048:
				return 0x23;
			case 0x1D049:
				return 0x21;
			case 0x1D04A:
				return 0x22;
			case 0x1D04B:
				return 0x29;
			case 0x1D04C:
				return 0x29;
			case 0x1D04D:
				return 0x26;
			case 0x1D04E:
				return 0x2B;
			case 0x1D04F:
				return 0x29;
			case 0x1D050:
				return 0x20;
			case 0x1D051:
				return 0x28;
			case 0x1D052:
				return 0x32;
			case 0x1D053:
				return 0x21;
			case 0x1D054:
				return 0x29;
			case 0x1D055:
				return 0x21;
			case 0x1D056:
				return 0x21;
			case 0x1D057:
				return 0x25;
			case 0x1D058:
				return 0x24;
			case 0x1D059:
				return 0x24;
			case 0x1D05A:
				return 0x27;
			case 0x1D05B:
				return 0x20;
			case 0x1D05C:
				return 0x24;
			case 0x1D05D:
				return 0x21;
			case 0x1D05E:
				return 0x29;
			case 0x1D05F:
				return 0x29;
			case 0x1D060:
				return 0x2C;
			case 0x1D061:
				return 0x21;
			case 0x1D062:
				return 0x29;
			case 0x1D063:
				return 0x26;
			case 0x1D064:
				return 0x24;
			case 0x1D065:
				return 0x25;
			case 0x1D066:
				return 0x1F;
			case 0x1D067:
				return 0x26;
			case 0x1D068:
				return 0x22;
			case 0x1D069:
				return 0x24;
			case 0x1D06A:
				return 0x26;
			case 0x1D06B:
				return 0x2A;
			case 0x1D06C:
				return 0x29;
			case 0x1D06D:
				return 0x28;
			case 0x1D06E:
				return 0x2C;
			case 0x1D06F:
				return 0x2D;
			case 0x1D070:
				return 0x28;
			case 0x1D071:
				return 0x29;
			case 0x1D072:
				return 0x28;
			case 0x1D073:
				return 0x27;
			case 0x1D074:
				return 0x2E;
			case 0x1D075:
				return 0x27;
			case 0x1D076:
				return 0x29;
			case 0x1D077:
				return 0x29;
			case 0x1D078:
				return 0x26;
			case 0x1D079:
				return 0x2A;
			case 0x1D07A:
				return 0x23;
			case 0x1D07B:
				return 0x23;
			case 0x1D07C:
				return 0x23;
			case 0x1D07D:
				return 0x22;
			case 0x1D07E:
				return 0x21;
			case 0x1D07F:
				return 0x24;
			case 0x1D080:
				return 0x28;
			case 0x1D081:
				return 0x2A;
			case 0x1D082:
				return 0x26;
			case 0x1D083:
				return 0x25;
			case 0x1D084:
				return 0x26;
			case 0x1D085:
				return 0x1E;
			case 0x1D086:
				return 0x1F;
			case 0x1D087:
				return 0x20;
			case 0x1D088:
				return 0x22;
			case 0x1D089:
				return 0x21;
			case 0x1D08A:
				return 0x2D;
			case 0x1D08B:
				return 0x2C;
			case 0x1D08C:
				return 0x2E;
			case 0x1D08D:
				return 0x31;
			case 0x1D08E:
				return 0x30;
			case 0x1D08F:
				return 0x28;
			case 0x1D090:
				return 0x37;
			case 0x1D091:
				return 0x34;
			case 0x1D092:
				return 0x22;
			case 0x1D093:
				return 0x3E;
			case 0x1D094:
				return 0x3D;
			case 0x1D095:
				return 0x36;
			case 0x1D096:
				return 0x23;
			case 0x1D097:
				return 0x1F;
			case 0x1D098:
				return 0x24;
			case 0x1D099:
				return 0x21;
			case 0x1D09A:
				return 0x29;
			case 0x1D09B:
				return 0x28;
			case 0x1D09C:
				return 0x24;
			case 0x1D09D:
				return 0x26;
			case 0x1D09E:
				return 0x24;
			case 0x1D09F:
				return 0x25;
			case 0x1D0A0:
				return 0x29;
			case 0x1D0A1:
				return 0x2A;
			case 0x1D0A2:
				return 0x2F;
			case 0x1D0A3:
				return 0x34;
			case 0x1D0A4:
				return 0x31;
			case 0x1D0A5:
				return 0x36;
			case 0x1D0A6:
				return 0x2F;
			case 0x1D0A7:
				return 0x2C;
			case 0x1D0A8:
				return 0x31;
			case 0x1D0A9:
				return 0x39;
			case 0x1D0AA:
				return 0x30;
			case 0x1D0AB:
				return 0x30;
			case 0x1D0AC:
				return 0x31;
			case 0x1D0AD:
				return 0x35;
			case 0x1D0AE:
				return 0x2F;
			case 0x1D0AF:
				return 0x2E;
			case 0x1D0B0:
				return 0x2C;
			case 0x1D0B1:
				return 0x2E;
			case 0x1D0B2:
				return 0x33;
			case 0x1D0B3:
				return 0x39;
			case 0x1D0B4:
				return 0x2D;
			case 0x1D0B5:
				return 0x2E;
			case 0x1D0B6:
				return 0x30;
			case 0x1D0B7:
				return 0x22;
			case 0x1D0B8:
				return 0x24;
			case 0x1D0B9:
				return 0x38;
			case 0x1D0BA:
				return 0x2D;
			case 0x1D0BB:
				return 0x2F;
			case 0x1D0BC:
				return 0x2B;
			case 0x1D0BD:
				return 0x2D;
			case 0x1D0BE:
				return 0x34;
			case 0x1D0BF:
				return 0x2D;
			case 0x1D0C0:
				return 0x2D;
			case 0x1D0C1:
				return 0x32;
			case 0x1D0C2:
				return 0x31;
			case 0x1D0C3:
				return 0x38;
			case 0x1D0C4:
				return 0x3A;
			case 0x1D0C5:
				return 0x35;
			case 0x1D0C6:
				return 0x36;
			case 0x1D0C7:
				return 0x27;
			case 0x1D0C8:
				return 0x25;
			case 0x1D0C9:
				return 0x26;
			case 0x1D0CA:
				return 0x26;
			case 0x1D0CB:
				return 0x37;
			case 0x1D0CC:
				return 0x35;
			case 0x1D0CD:
				return 0x2C;
			case 0x1D0CE:
				return 0x2C;
			case 0x1D0CF:
				return 0x2E;
			case 0x1D0D0:
				return 0x32;
			case 0x1D0D1:
				return 0x3D;
			case 0x1D0D2:
				return 0x36;
			case 0x1D0D3:
				return 0x39;
			case 0x1D0D4:
				return 0x32;
			case 0x1D0D5:
				return 0x3D;
			case 0x1D0D6:
				return 0x36;
			case 0x1D0D7:
				return 0x39;
			case 0x1D0D8:
				return 0x27;
			case 0x1D0D9:
				return 0x27;
			case 0x1D0DA:
				return 0x2D;
			case 0x1D0DB:
				return 0x2E;
			case 0x1D0DC:
				return 0x28;
			case 0x1D0DD:
				return 0x2A;
			case 0x1D0DE:
				return 0x2A;
			case 0x1D0DF:
				return 0x32;
			case 0x1D0E0:
				return 0x33;
			case 0x1D0E1:
				return 0x35;
			case 0x1D0E2:
				return 0x29;
			case 0x1D0E3:
				return 0x31;
			case 0x1D0E4:
				return 0x32;
			case 0x1D0E5:
				return 0x34;
			case 0x1D0E6:
				return 0x25;
			case 0x1D0E7:
				return 0x26;
			case 0x1D0E8:
				return 0x20;
			case 0x1D0E9:
				return 0x24;
			case 0x1D0EA:
				return 0x25;
			case 0x1D0EB:
				return 0x24;
			case 0x1D0EC:
				return 0x24;
			case 0x1D0ED:
				return 0x24;
			case 0x1D0EE:
				return 0x24;
			case 0x1D0EF:
				return 0x24;
			case 0x1D0F0:
				return 0x2C;
			case 0x1D0F1:
				return 0x2A;
			case 0x1D0F2:
				return 0x2C;
			case 0x1D0F3:
				return 0x2A;
			case 0x1D0F4:
				return 0x25;
			case 0x1D0F5:
				return 0x29;
			case 0x1D100:
				return 0x1E;
			case 0x1D101:
				return 0x1E;
			case 0x1D102:
				return 0x1D;
			case 0x1D103:
				return 0x25;
			case 0x1D104:
				return 0x1E;
			case 0x1D105:
				return 0x1D;
			case 0x1D106:
				return 0x20;
			case 0x1D107:
				return 0x21;
			case 0x1D108:
				return 0x1B;
			case 0x1D109:
				return 0x19;
			case 0x1D10A:
				return 0x17;
			case 0x1D10B:
				return 0x15;
			case 0x1D10C:
				return 0x14;
			case 0x1D10D:
				return 0x21;
			case 0x1D10E:
				return 0x21;
			case 0x1D10F:
				return 0x21;
			case 0x1D110:
				return 0x17;
			case 0x1D111:
				return 0x1D;
			case 0x1D112:
				return 0x1B;
			case 0x1D113:
				return 0x17;
			case 0x1D114:
				return 0x15;
			case 0x1D115:
				return 0x17;
			case 0x1D116:
				return 0x1E;
			case 0x1D117:
				return 0x1E;
			case 0x1D118:
				return 0x20;
			case 0x1D119:
				return 0x1F;
			case 0x1D11A:
				return 0x1F;
			case 0x1D11B:
				return 0x1E;
			case 0x1D11C:
				return 0x24;
			case 0x1D11D:
				return 0x25;
			case 0x1D11E:
				return 0x16;
			case 0x1D11F:
				return 0x22;
			case 0x1D120:
				return 0x23;
			case 0x1D121:
				return 0x16;
			case 0x1D122:
				return 0x16;
			case 0x1D123:
				return 0x22;
			case 0x1D124:
				return 0x23;
			case 0x1D125:
				return 0x1B;
			case 0x1D126:
				return 0x1B;
			case 0x1D129:
				return 0x25;
			case 0x1D12A:
				return 0x1C;
			case 0x1D12B:
				return 0x1B;
			case 0x1D12C:
				return 0x17;
			case 0x1D12D:
				return 0x19;
			case 0x1D12E:
				return 0x1A;
			case 0x1D12F:
				return 0x1C;
			case 0x1D130:
				return 0x18;
			case 0x1D131:
				return 0x1A;
			case 0x1D132:
				return 0x22;
			case 0x1D133:
				return 0x21;
			case 0x1D134:
				return 0x1B;
			case 0x1D135:
				return 0x18;
			case 0x1D136:
				return 0x1B;
			case 0x1D137:
				return 0x1C;
			case 0x1D138:
				return 0x21;
			case 0x1D139:
				return 0x22;
			case 0x1D13A:
				return 0x1A;
			case 0x1D13B:
				return 0x1A;
			case 0x1D13C:
				return 0x19;
			case 0x1D13D:
				return 0x1C;
			case 0x1D13E:
				return 0x1B;
			case 0x1D13F:
				return 0x1E;
			case 0x1D140:
				return 0x22;
			case 0x1D141:
				return 0x21;
			case 0x1D142:
				return 0x2E;
			case 0x1D143:
				return 0x1A;
			case 0x1D144:
				return 0x1D;
			case 0x1D145:
				return 0x21;
			case 0x1D146:
				return 0x25;
			case 0x1D147:
				return 0x25;
			case 0x1D148:
				return 0x2A;
			case 0x1D149:
				return 0x2A;
			case 0x1D14A:
				return 0x2C;
			case 0x1D14B:
				return 0x2C;
			case 0x1D14C:
				return 0x2D;
			case 0x1D14D:
				return 0x2D;
			case 0x1D14E:
				return 0x2C;
			case 0x1D14F:
				return 0x2C;
			case 0x1D150:
				return 0x30;
			case 0x1D151:
				return 0x30;
			case 0x1D152:
				return 0x23;
			case 0x1D153:
				return 0x23;
			case 0x1D154:
				return 0x32;
			case 0x1D155:
				return 0x32;
			case 0x1D156:
				return 0x24;
			case 0x1D157:
				return 0x1D;
			case 0x1D158:
				return 0x1E;
			case 0x1D159:
				return 0x1D;
			case 0x1D15A:
				return 0x26;
			case 0x1D15B:
				return 0x26;
			case 0x1D15C:
				return 0x15;
			case 0x1D15D:
				return 0x1A;
			case 0x1D15E:
				return 0x19;
			case 0x1D15F:
				return 0x1C;
			case 0x1D160:
				return 0x1B;
			case 0x1D161:
				return 0x1E;
			case 0x1D162:
				return 0x22;
			case 0x1D163:
				return 0x21;
			case 0x1D164:
				return 0x2E;
			case 0x1D165:
				return 0x1E;
			case 0x1D166:
				return 0x2B;
			case 0x1D167:
				return 0x23;
			case 0x1D168:
				return 0x23;
			case 0x1D169:
				return 0x23;
			case 0x1D16A:
				return 0x22;
			case 0x1D16B:
				return 0x22;
			case 0x1D16C:
				return 0x22;
			case 0x1D16D:
				return 0x2A;
			case 0x1D16E:
				return 0x20;
			case 0x1D16F:
				return 0x20;
			case 0x1D170:
				return 0x20;
			case 0x1D171:
				return 0x20;
			case 0x1D172:
				return 0x20;
			case 0x1D173:
				return 0x1A;
			case 0x1D174:
				return 0x18;
			case 0x1D175:
				return 0x19;
			case 0x1D176:
				return 0x17;
			case 0x1D177:
				return 0x1A;
			case 0x1D178:
				return 0x18;
			case 0x1D179:
				return 0x1C;
			case 0x1D17A:
				return 0x1A;
			case 0x1D17B:
				return 0x20;
			case 0x1D17C:
				return 0x22;
			case 0x1D17D:
				return 0x20;
			case 0x1D17E:
				return 0x27;
			case 0x1D17F:
				return 0x21;
			case 0x1D180:
				return 0x2A;
			case 0x1D181:
				return 0x29;
			case 0x1D182:
				return 0x1F;
			case 0x1D183:
				return 0x1D;
			case 0x1D184:
				return 0x1F;
			case 0x1D185:
				return 0x1E;
			case 0x1D186:
				return 0x1D;
			case 0x1D187:
				return 0x1E;
			case 0x1D188:
				return 0x1F;
			case 0x1D189:
				return 0x1E;
			case 0x1D18A:
				return 0x27;
			case 0x1D18B:
				return 0x27;
			case 0x1D18C:
				return 0x1B;
			case 0x1D18D:
				return 0x16;
			case 0x1D18E:
				return 0x11;
			case 0x1D18F:
				return 0x15;
			case 0x1D190:
				return 0x15;
			case 0x1D191:
				return 0x15;
			case 0x1D192:
				return 0x19;
			case 0x1D193:
				return 0x1B;
			case 0x1D194:
				return 0x20;
			case 0x1D195:
				return 0x23;
			case 0x1D196:
				return 0x12;
			case 0x1D197:
				return 0x14;
			case 0x1D198:
				return 0x1D;
			case 0x1D199:
				return 0x1A;
			case 0x1D19A:
				return 0x17;
			case 0x1D19B:
				return 0x21;
			case 0x1D19C:
				return 0x21;
			case 0x1D19D:
				return 0x21;
			case 0x1D19E:
				return 0x21;
			case 0x1D19F:
				return 0x21;
			case 0x1D1A0:
				return 0x21;
			case 0x1D1A1:
				return 0x21;
			case 0x1D1A2:
				return 0x21;
			case 0x1D1A3:
				return 0x21;
			case 0x1D1A4:
				return 0x22;
			case 0x1D1A5:
				return 0x22;
			case 0x1D1A6:
				return 0x1B;
			case 0x1D1A7:
				return 0x1B;
			case 0x1D1A8:
				return 0x1D;
			case 0x1D1A9:
				return 0x1C;
			case 0x1D1AA:
				return 0x22;
			case 0x1D1AB:
				return 0x20;
			case 0x1D1AC:
				return 0x22;
			case 0x1D1AD:
				return 0x28;
			case 0x1D1AE:
				return 0x1A;
			case 0x1D1AF:
				return 0x1D;
			case 0x1D1B0:
				return 0x1F;
			case 0x1D1B1:
				return 0x1C;
			case 0x1D1B2:
				return 0x1E;
			case 0x1D1B3:
				return 0x20;
			case 0x1D1B4:
				return 0x14;
			case 0x1D1B5:
				return 0x18;
			case 0x1D1B6:
				return 0x16;
			case 0x1D1B7:
				return 0x15;
			case 0x1D1B8:
				return 0x16;
			case 0x1D1B9:
				return 0x20;
			case 0x1D1BA:
				return 0x20;
			case 0x1D1BB:
				return 0x16;
			case 0x1D1BC:
				return 0x1C;
			case 0x1D1BD:
				return 0x20;
			case 0x1D1BE:
				return 0x20;
			case 0x1D1BF:
				return 0x1A;
			case 0x1D1C0:
				return 0x1A;
			case 0x1D1C1:
				return 0x23;
			case 0x1D1C2:
				return 0x25;
			case 0x1D1C3:
				return 0x1B;
			case 0x1D1C4:
				return 0x1F;
			case 0x1D1C5:
				return 0x1B;
			case 0x1D1C6:
				return 0x1F;
			case 0x1D1C7:
				return 0x38;
			case 0x1D1C8:
				return 0x3A;
			case 0x1D1C9:
				return 0x45;
			case 0x1D1CA:
				return 0x3A;
			case 0x1D1CB:
				return 0x3C;
			case 0x1D1CC:
				return 0x49;
			case 0x1D1CD:
				return 0x49;
			case 0x1D1CE:
				return 0x49;
			case 0x1D1CF:
				return 0x15;
			case 0x1D1D0:
				return 0x20;
			case 0x1D1D1:
				return 0x20;
			case 0x1D1D2:
				return 0x18;
			case 0x1D1D3:
				return 0x15;
			case 0x1D1D4:
				return 0x17;
			case 0x1D1D5:
				return 0x16;
			case 0x1D1D6:
				return 0x19;
			case 0x1D1D7:
				return 0x18;
			case 0x1D1D8:
				return 0x18;
			case 0x1D1D9:
				return 0x19;
			case 0x1D1DA:
				return 0x20;
			case 0x1D1DB:
				return 0x20;
			case 0x1D1DC:
				return 0x22;
			case 0x1D1DD:
				return 0x1E;
			case 0x1D1DE:
				return 0x1D;
			case 0x1D1DF:
				return 0x23;
			case 0x1D1E0:
				return 0x21;
			case 0x1D1E1:
				return 0x26;
			case 0x1D1E2:
				return 0x21;
			case 0x1D1E3:
				return 0x20;
			case 0x1D1E4:
				return 0x2D;
			case 0x1D1E5:
				return 0x2B;
			case 0x1D1E6:
				return 0x2C;
			case 0x1D1E7:
				return 0x2A;
			case 0x1D1E8:
				return 0x20;
			case 0x1D200:
				return 0x1E;
			case 0x1D201:
				return 0x1E;
			case 0x1D202:
				return 0x1E;
			case 0x1D203:
				return 0x1E;
			case 0x1D204:
				return 0x1E;
			case 0x1D205:
				return 0x1E;
			case 0x1D206:
				return 0x1E;
			case 0x1D207:
				return 0x1E;
			case 0x1D208:
				return 0x1E;
			case 0x1D209:
				return 0x1F;
			case 0x1D20A:
				return 0x1F;
			case 0x1D20B:
				return 0x1F;
			case 0x1D20C:
				return 0x1F;
			case 0x1D20D:
				return 0x1F;
			case 0x1D20E:
				return 0x1F;
			case 0x1D20F:
				return 0x1F;
			case 0x1D210:
				return 0x1F;
			case 0x1D211:
				return 0x1F;
			case 0x1D212:
				return 0x1F;
			case 0x1D213:
				return 0x1F;
			case 0x1D214:
				return 0x1F;
			case 0x1D215:
				return 0x1F;
			case 0x1D216:
				return 0x1F;
			case 0x1D217:
				return 0x1F;
			case 0x1D218:
				return 0x1F;
			case 0x1D219:
				return 0x1F;
			case 0x1D21A:
				return 0x1F;
			case 0x1D21B:
				return 0x1F;
			case 0x1D21C:
				return 0x1F;
			case 0x1D21D:
				return 0x25;
			case 0x1D21E:
				return 0x25;
			case 0x1D21F:
				return 0x25;
			case 0x1D220:
				return 0x25;
			case 0x1D221:
				return 0x25;
			case 0x1D222:
				return 0x25;
			case 0x1D223:
				return 0x26;
			case 0x1D224:
				return 0x26;
			case 0x1D225:
				return 0x26;
			case 0x1D226:
				return 0x26;
			case 0x1D227:
				return 0x26;
			case 0x1D228:
				return 0x26;
			case 0x1D229:
				return 0x26;
			case 0x1D22A:
				return 0x26;
			case 0x1D22B:
				return 0x26;
			case 0x1D22C:
				return 0x26;
			case 0x1D22D:
				return 0x26;
			case 0x1D22E:
				return 0x26;
			case 0x1D22F:
				return 0x26;
			case 0x1D230:
				return 0x26;
			case 0x1D231:
				return 0x26;
			case 0x1D232:
				return 0x26;
			case 0x1D233:
				return 0x26;
			case 0x1D234:
				return 0x26;
			case 0x1D235:
				return 0x26;
			case 0x1D236:
				return 0x26;
			case 0x1D237:
				return 0x26;
			case 0x1D238:
				return 0x26;
			case 0x1D239:
				return 0x26;
			case 0x1D23A:
				return 0x26;
			case 0x1D23B:
				return 0x26;
			case 0x1D23C:
				return 0x26;
			case 0x1D23D:
				return 0x26;
			case 0x1D23E:
				return 0x26;
			case 0x1D23F:
				return 0x26;
			case 0x1D240:
				return 0x26;
			case 0x1D241:
				return 0x26;
			case 0x1D242:
				return 0x20;
			case 0x1D243:
				return 0x22;
			case 0x1D244:
				return 0x22;
			case 0x1D245:
				return 0x15;
			case 0x1D2E0:
				return 0x13;
			case 0x1D2E1:
				return 0x12;
			case 0x1D2E2:
				return 0x12;
			case 0x1D2E3:
				return 0x14;
			case 0x1D2E4:
				return 0x13;
			case 0x1D2E5:
				return 0x13;
			case 0x1D2E6:
				return 0x12;
			case 0x1D2E7:
				return 0x14;
			case 0x1D2E8:
				return 0x14;
			case 0x1D2E9:
				return 0x13;
			case 0x1D2EA:
				return 0x12;
			case 0x1D2EB:
				return 0x15;
			case 0x1D2EC:
				return 0x15;
			case 0x1D2ED:
				return 0x17;
			case 0x1D2EE:
				return 0x17;
			case 0x1D2EF:
				return 0x16;
			case 0x1D2F0:
				return 0x16;
			case 0x1D2F1:
				return 0x18;
			case 0x1D2F2:
				return 0x17;
			case 0x1D2F3:
				return 0x17;
			case 0x1D300:
				return 0x13;
			case 0x1D301:
				return 0x1A;
			case 0x1D302:
				return 0x17;
			case 0x1D303:
				return 0x1A;
			case 0x1D304:
				return 0x19;
			case 0x1D305:
				return 0x11;
			case 0x1D306:
				return 0x15;
			case 0x1D307:
				return 0x1A;
			case 0x1D308:
				return 0x14;
			case 0x1D309:
				return 0x16;
			case 0x1D30A:
				return 0x1C;
			case 0x1D30B:
				return 0x1A;
			case 0x1D30C:
				return 0x15;
			case 0x1D30D:
				return 0x19;
			case 0x1D30E:
				return 0x1C;
			case 0x1D30F:
				return 0x2A;
			case 0x1D310:
				return 0x19;
			case 0x1D311:
				return 0x1B;
			case 0x1D312:
				return 0x17;
			case 0x1D313:
				return 0x1A;
			case 0x1D314:
				return 0x14;
			case 0x1D315:
				return 0x16;
			case 0x1D316:
				return 0x1B;
			case 0x1D317:
				return 0x16;
			case 0x1D318:
				return 0x18;
			case 0x1D319:
				return 0x16;
			case 0x1D31A:
				return 0x16;
			case 0x1D31B:
				return 0x19;
			case 0x1D31C:
				return 0x13;
			case 0x1D31D:
				return 0x12;
			case 0x1D31E:
				return 0x19;
			case 0x1D31F:
				return 0x18;
			case 0x1D320:
				return 0x15;
			case 0x1D321:
				return 0x15;
			case 0x1D322:
				return 0x1B;
			case 0x1D323:
				return 0x1E;
			case 0x1D324:
				return 0x16;
			case 0x1D325:
				return 0x15;
			case 0x1D326:
				return 0x18;
			case 0x1D327:
				return 0x16;
			case 0x1D328:
				return 0x18;
			case 0x1D329:
				return 0x17;
			case 0x1D32A:
				return 0x15;
			case 0x1D32B:
				return 0x17;
			case 0x1D32C:
				return 0x18;
			case 0x1D32D:
				return 0x1B;
			case 0x1D32E:
				return 0x17;
			case 0x1D32F:
				return 0x1C;
			case 0x1D330:
				return 0x19;
			case 0x1D331:
				return 0x14;
			case 0x1D332:
				return 0x18;
			case 0x1D333:
				return 0x1A;
			case 0x1D334:
				return 0x16;
			case 0x1D335:
				return 0x15;
			case 0x1D336:
				return 0x15;
			case 0x1D337:
				return 0x22;
			case 0x1D338:
				return 0x18;
			case 0x1D339:
				return 0x16;
			case 0x1D33A:
				return 0x17;
			case 0x1D33B:
				return 0x14;
			case 0x1D33C:
				return 0x1B;
			case 0x1D33D:
				return 0x1B;
			case 0x1D33E:
				return 0x1A;
			case 0x1D33F:
				return 0x1B;
			case 0x1D340:
				return 0x16;
			case 0x1D341:
				return 0x1B;
			case 0x1D342:
				return 0x1C;
			case 0x1D343:
				return 0x14;
			case 0x1D344:
				return 0x14;
			case 0x1D345:
				return 0x16;
			case 0x1D346:
				return 0x14;
			case 0x1D347:
				return 0x18;
			case 0x1D348:
				return 0x18;
			case 0x1D349:
				return 0x16;
			case 0x1D34A:
				return 0x19;
			case 0x1D34B:
				return 0x18;
			case 0x1D34C:
				return 0x17;
			case 0x1D34D:
				return 0x17;
			case 0x1D34E:
				return 0x19;
			case 0x1D34F:
				return 0x16;
			case 0x1D350:
				return 0x16;
			case 0x1D351:
				return 0x1A;
			case 0x1D352:
				return 0x19;
			case 0x1D353:
				return 0x1B;
			case 0x1D354:
				return 0x1B;
			case 0x1D355:
				return 0x18;
			case 0x1D356:
				return 0x18;
			case 0x1D360:
				return 0x1C;
			case 0x1D361:
				return 0x1C;
			case 0x1D362:
				return 0x1E;
			case 0x1D363:
				return 0x1D;
			case 0x1D364:
				return 0x1D;
			case 0x1D365:
				return 0x1C;
			case 0x1D366:
				return 0x1E;
			case 0x1D367:
				return 0x1E;
			case 0x1D368:
				return 0x1D;
			case 0x1D369:
				return 0x1C;
			case 0x1D36A:
				return 0x1C;
			case 0x1D36B:
				return 0x1E;
			case 0x1D36C:
				return 0x1D;
			case 0x1D36D:
				return 0x1D;
			case 0x1D36E:
				return 0x1C;
			case 0x1D36F:
				return 0x1E;
			case 0x1D370:
				return 0x1E;
			case 0x1D371:
				return 0x1D;
			case 0x1D372:
				return 0x1B;
			case 0x1D373:
				return 0x1B;
			case 0x1D374:
				return 0x1D;
			case 0x1D375:
				return 0x1C;
			case 0x1D376:
				return 0x1C;
			case 0x1D377:
				return 0xF;
			case 0x1D378:
				return 0x10;
			case 0x1D400:
				return 0x1C;
			case 0x1D401:
				return 0x1C;
			case 0x1D402:
				return 0x1C;
			case 0x1D403:
				return 0x1C;
			case 0x1D404:
				return 0x1C;
			case 0x1D405:
				return 0x1C;
			case 0x1D406:
				return 0x1C;
			case 0x1D407:
				return 0x1C;
			case 0x1D408:
				return 0x1C;
			case 0x1D409:
				return 0x1C;
			case 0x1D40A:
				return 0x1C;
			case 0x1D40B:
				return 0x1C;
			case 0x1D40C:
				return 0x1C;
			case 0x1D40D:
				return 0x1C;
			case 0x1D40E:
				return 0x1C;
			case 0x1D40F:
				return 0x1C;
			case 0x1D410:
				return 0x1C;
			case 0x1D411:
				return 0x1C;
			case 0x1D412:
				return 0x1C;
			case 0x1D413:
				return 0x1C;
			case 0x1D414:
				return 0x1C;
			case 0x1D415:
				return 0x1C;
			case 0x1D416:
				return 0x1C;
			case 0x1D417:
				return 0x1C;
			case 0x1D418:
				return 0x1C;
			case 0x1D419:
				return 0x1C;
			case 0x1D41A:
				return 0x1A;
			case 0x1D41B:
				return 0x1A;
			case 0x1D41C:
				return 0x1A;
			case 0x1D41D:
				return 0x1A;
			case 0x1D41E:
				return 0x1A;
			case 0x1D41F:
				return 0x1A;
			case 0x1D420:
				return 0x1A;
			case 0x1D421:
				return 0x1A;
			case 0x1D422:
				return 0x1A;
			case 0x1D423:
				return 0x1A;
			case 0x1D424:
				return 0x1A;
			case 0x1D425:
				return 0x1A;
			case 0x1D426:
				return 0x1A;
			case 0x1D427:
				return 0x1A;
			case 0x1D428:
				return 0x1A;
			case 0x1D429:
				return 0x1A;
			case 0x1D42A:
				return 0x1A;
			case 0x1D42B:
				return 0x1A;
			case 0x1D42C:
				return 0x1A;
			case 0x1D42D:
				return 0x1A;
			case 0x1D42E:
				return 0x1A;
			case 0x1D42F:
				return 0x1A;
			case 0x1D430:
				return 0x1A;
			case 0x1D431:
				return 0x1A;
			case 0x1D432:
				return 0x1A;
			case 0x1D433:
				return 0x1A;
			case 0x1D434:
				return 0x1E;
			case 0x1D435:
				return 0x1E;
			case 0x1D436:
				return 0x1E;
			case 0x1D437:
				return 0x1E;
			case 0x1D438:
				return 0x1E;
			case 0x1D439:
				return 0x1E;
			case 0x1D43A:
				return 0x1E;
			case 0x1D43B:
				return 0x1E;
			case 0x1D43C:
				return 0x1E;
			case 0x1D43D:
				return 0x1E;
			case 0x1D43E:
				return 0x1E;
			case 0x1D43F:
				return 0x1E;
			case 0x1D440:
				return 0x1E;
			case 0x1D441:
				return 0x1E;
			case 0x1D442:
				return 0x1E;
			case 0x1D443:
				return 0x1E;
			case 0x1D444:
				return 0x1E;
			case 0x1D445:
				return 0x1E;
			case 0x1D446:
				return 0x1E;
			case 0x1D447:
				return 0x1E;
			case 0x1D448:
				return 0x1E;
			case 0x1D449:
				return 0x1E;
			case 0x1D44A:
				return 0x1E;
			case 0x1D44B:
				return 0x1E;
			case 0x1D44C:
				return 0x1E;
			case 0x1D44D:
				return 0x1E;
			case 0x1D44E:
				return 0x1C;
			case 0x1D44F:
				return 0x1C;
			case 0x1D450:
				return 0x1C;
			case 0x1D451:
				return 0x1C;
			case 0x1D452:
				return 0x1C;
			case 0x1D453:
				return 0x1C;
			case 0x1D454:
				return 0x1C;
			case 0x1D456:
				return 0x1C;
			case 0x1D457:
				return 0x1C;
			case 0x1D458:
				return 0x1C;
			case 0x1D459:
				return 0x1C;
			case 0x1D45A:
				return 0x1C;
			case 0x1D45B:
				return 0x1C;
			case 0x1D45C:
				return 0x1C;
			case 0x1D45D:
				return 0x1C;
			case 0x1D45E:
				return 0x1C;
			case 0x1D45F:
				return 0x1C;
			case 0x1D460:
				return 0x1C;
			case 0x1D461:
				return 0x1C;
			case 0x1D462:
				return 0x1C;
			case 0x1D463:
				return 0x1C;
			case 0x1D464:
				return 0x1C;
			case 0x1D465:
				return 0x1C;
			case 0x1D466:
				return 0x1C;
			case 0x1D467:
				return 0x1C;
			case 0x1D468:
				return 0x23;
			case 0x1D469:
				return 0x23;
			case 0x1D46A:
				return 0x23;
			case 0x1D46B:
				return 0x23;
			case 0x1D46C:
				return 0x23;
			case 0x1D46D:
				return 0x23;
			case 0x1D46E:
				return 0x23;
			case 0x1D46F:
				return 0x23;
			case 0x1D470:
				return 0x23;
			case 0x1D471:
				return 0x23;
			case 0x1D472:
				return 0x23;
			case 0x1D473:
				return 0x23;
			case 0x1D474:
				return 0x23;
			case 0x1D475:
				return 0x23;
			case 0x1D476:
				return 0x23;
			case 0x1D477:
				return 0x23;
			case 0x1D478:
				return 0x23;
			case 0x1D479:
				return 0x23;
			case 0x1D47A:
				return 0x23;
			case 0x1D47B:
				return 0x23;
			case 0x1D47C:
				return 0x23;
			case 0x1D47D:
				return 0x23;
			case 0x1D47E:
				return 0x23;
			case 0x1D47F:
				return 0x23;
			case 0x1D480:
				return 0x23;
			case 0x1D481:
				return 0x23;
			case 0x1D482:
				return 0x21;
			case 0x1D483:
				return 0x21;
			case 0x1D484:
				return 0x21;
			case 0x1D485:
				return 0x21;
			case 0x1D486:
				return 0x21;
			case 0x1D487:
				return 0x21;
			case 0x1D488:
				return 0x21;
			case 0x1D489:
				return 0x21;
			case 0x1D48A:
				return 0x21;
			case 0x1D48B:
				return 0x21;
			case 0x1D48C:
				return 0x21;
			case 0x1D48D:
				return 0x21;
			case 0x1D48E:
				return 0x21;
			case 0x1D48F:
				return 0x21;
			case 0x1D490:
				return 0x21;
			case 0x1D491:
				return 0x21;
			case 0x1D492:
				return 0x21;
			case 0x1D493:
				return 0x21;
			case 0x1D494:
				return 0x21;
			case 0x1D495:
				return 0x21;
			case 0x1D496:
				return 0x21;
			case 0x1D497:
				return 0x21;
			case 0x1D498:
				return 0x21;
			case 0x1D499:
				return 0x21;
			case 0x1D49A:
				return 0x21;
			case 0x1D49B:
				return 0x21;
			case 0x1D49C:
				return 0x1E;
			case 0x1D49E:
				return 0x1E;
			case 0x1D49F:
				return 0x1E;
			case 0x1D4A2:
				return 0x1E;
			case 0x1D4A5:
				return 0x1E;
			case 0x1D4A6:
				return 0x1E;
			case 0x1D4A9:
				return 0x1E;
			case 0x1D4AA:
				return 0x1E;
			case 0x1D4AB:
				return 0x1E;
			case 0x1D4AC:
				return 0x1E;
			case 0x1D4AE:
				return 0x1E;
			case 0x1D4AF:
				return 0x1E;
			case 0x1D4B0:
				return 0x1E;
			case 0x1D4B1:
				return 0x1E;
			case 0x1D4B2:
				return 0x1E;
			case 0x1D4B3:
				return 0x1E;
			case 0x1D4B4:
				return 0x1E;
			case 0x1D4B5:
				return 0x1E;
			case 0x1D4B6:
				return 0x1C;
			case 0x1D4B7:
				return 0x1C;
			case 0x1D4B8:
				return 0x1C;
			case 0x1D4B9:
				return 0x1C;
			case 0x1D4BB:
				return 0x1C;
			case 0x1D4BD:
				return 0x1C;
			case 0x1D4BE:
				return 0x1C;
			case 0x1D4BF:
				return 0x1C;
			case 0x1D4C0:
				return 0x1C;
			case 0x1D4C1:
				return 0x1C;
			case 0x1D4C2:
				return 0x1C;
			case 0x1D4C3:
				return 0x1C;
			case 0x1D4C5:
				return 0x1C;
			case 0x1D4C6:
				return 0x1C;
			case 0x1D4C7:
				return 0x1C;
			case 0x1D4C8:
				return 0x1C;
			case 0x1D4C9:
				return 0x1C;
			case 0x1D4CA:
				return 0x1C;
			case 0x1D4CB:
				return 0x1C;
			case 0x1D4CC:
				return 0x1C;
			case 0x1D4CD:
				return 0x1C;
			case 0x1D4CE:
				return 0x1C;
			case 0x1D4CF:
				return 0x1C;
			case 0x1D4D0:
				return 0x23;
			case 0x1D4D1:
				return 0x23;
			case 0x1D4D2:
				return 0x23;
			case 0x1D4D3:
				return 0x23;
			case 0x1D4D4:
				return 0x23;
			case 0x1D4D5:
				return 0x23;
			case 0x1D4D6:
				return 0x23;
			case 0x1D4D7:
				return 0x23;
			case 0x1D4D8:
				return 0x23;
			case 0x1D4D9:
				return 0x23;
			case 0x1D4DA:
				return 0x23;
			case 0x1D4DB:
				return 0x23;
			case 0x1D4DC:
				return 0x23;
			case 0x1D4DD:
				return 0x23;
			case 0x1D4DE:
				return 0x23;
			case 0x1D4DF:
				return 0x23;
			case 0x1D4E0:
				return 0x23;
			case 0x1D4E1:
				return 0x23;
			case 0x1D4E2:
				return 0x23;
			case 0x1D4E3:
				return 0x23;
			case 0x1D4E4:
				return 0x23;
			case 0x1D4E5:
				return 0x23;
			case 0x1D4E6:
				return 0x23;
			case 0x1D4E7:
				return 0x23;
			case 0x1D4E8:
				return 0x23;
			case 0x1D4E9:
				return 0x23;
			case 0x1D4EA:
				return 0x21;
			case 0x1D4EB:
				return 0x21;
			case 0x1D4EC:
				return 0x21;
			case 0x1D4ED:
				return 0x21;
			case 0x1D4EE:
				return 0x21;
			case 0x1D4EF:
				return 0x21;
			case 0x1D4F0:
				return 0x21;
			case 0x1D4F1:
				return 0x21;
			case 0x1D4F2:
				return 0x21;
			case 0x1D4F3:
				return 0x21;
			case 0x1D4F4:
				return 0x21;
			case 0x1D4F5:
				return 0x21;
			case 0x1D4F6:
				return 0x21;
			case 0x1D4F7:
				return 0x21;
			case 0x1D4F8:
				return 0x21;
			case 0x1D4F9:
				return 0x21;
			case 0x1D4FA:
				return 0x21;
			case 0x1D4FB:
				return 0x21;
			case 0x1D4FC:
				return 0x21;
			case 0x1D4FD:
				return 0x21;
			case 0x1D4FE:
				return 0x21;
			case 0x1D4FF:
				return 0x21;
			case 0x1D500:
				return 0x21;
			case 0x1D501:
				return 0x21;
			case 0x1D502:
				return 0x21;
			case 0x1D503:
				return 0x21;
			case 0x1D504:
				return 0x1F;
			case 0x1D505:
				return 0x1F;
			case 0x1D507:
				return 0x1F;
			case 0x1D508:
				return 0x1F;
			case 0x1D509:
				return 0x1F;
			case 0x1D50A:
				return 0x1F;
			case 0x1D50D:
				return 0x1F;
			case 0x1D50E:
				return 0x1F;
			case 0x1D50F:
				return 0x1F;
			case 0x1D510:
				return 0x1F;
			case 0x1D511:
				return 0x1F;
			case 0x1D512:
				return 0x1F;
			case 0x1D513:
				return 0x1F;
			case 0x1D514:
				return 0x1F;
			case 0x1D516:
				return 0x1F;
			case 0x1D517:
				return 0x1F;
			case 0x1D518:
				return 0x1F;
			case 0x1D519:
				return 0x1F;
			case 0x1D51A:
				return 0x1F;
			case 0x1D51B:
				return 0x1F;
			case 0x1D51C:
				return 0x1F;
			case 0x1D51E:
				return 0x1D;
			case 0x1D51F:
				return 0x1D;
			case 0x1D520:
				return 0x1D;
			case 0x1D521:
				return 0x1D;
			case 0x1D522:
				return 0x1D;
			case 0x1D523:
				return 0x1D;
			case 0x1D524:
				return 0x1D;
			case 0x1D525:
				return 0x1D;
			case 0x1D526:
				return 0x1D;
			case 0x1D527:
				return 0x1D;
			case 0x1D528:
				return 0x1D;
			case 0x1D529:
				return 0x1D;
			case 0x1D52A:
				return 0x1D;
			case 0x1D52B:
				return 0x1D;
			case 0x1D52C:
				return 0x1D;
			case 0x1D52D:
				return 0x1D;
			case 0x1D52E:
				return 0x1D;
			case 0x1D52F:
				return 0x1D;
			case 0x1D530:
				return 0x1D;
			case 0x1D531:
				return 0x1D;
			case 0x1D532:
				return 0x1D;
			case 0x1D533:
				return 0x1D;
			case 0x1D534:
				return 0x1D;
			case 0x1D535:
				return 0x1D;
			case 0x1D536:
				return 0x1D;
			case 0x1D537:
				return 0x1D;
			case 0x1D538:
				return 0x25;
			case 0x1D539:
				return 0x25;
			case 0x1D53B:
				return 0x25;
			case 0x1D53C:
				return 0x25;
			case 0x1D53D:
				return 0x25;
			case 0x1D53E:
				return 0x25;
			case 0x1D540:
				return 0x25;
			case 0x1D541:
				return 0x25;
			case 0x1D542:
				return 0x25;
			case 0x1D543:
				return 0x25;
			case 0x1D544:
				return 0x25;
			case 0x1D546:
				return 0x25;
			case 0x1D54A:
				return 0x25;
			case 0x1D54B:
				return 0x25;
			case 0x1D54C:
				return 0x25;
			case 0x1D54D:
				return 0x25;
			case 0x1D54E:
				return 0x25;
			case 0x1D54F:
				return 0x25;
			case 0x1D550:
				return 0x25;
			case 0x1D552:
				return 0x23;
			case 0x1D553:
				return 0x23;
			case 0x1D554:
				return 0x23;
			case 0x1D555:
				return 0x23;
			case 0x1D556:
				return 0x23;
			case 0x1D557:
				return 0x23;
			case 0x1D558:
				return 0x23;
			case 0x1D559:
				return 0x23;
			case 0x1D55A:
				return 0x23;
			case 0x1D55B:
				return 0x23;
			case 0x1D55C:
				return 0x23;
			case 0x1D55D:
				return 0x23;
			case 0x1D55E:
				return 0x23;
			case 0x1D55F:
				return 0x23;
			case 0x1D560:
				return 0x23;
			case 0x1D561:
				return 0x23;
			case 0x1D562:
				return 0x23;
			case 0x1D563:
				return 0x23;
			case 0x1D564:
				return 0x23;
			case 0x1D565:
				return 0x23;
			case 0x1D566:
				return 0x23;
			case 0x1D567:
				return 0x23;
			case 0x1D568:
				return 0x23;
			case 0x1D569:
				return 0x23;
			case 0x1D56A:
				return 0x23;
			case 0x1D56B:
				return 0x23;
			case 0x1D56C:
				return 0x24;
			case 0x1D56D:
				return 0x24;
			case 0x1D56E:
				return 0x24;
			case 0x1D56F:
				return 0x24;
			case 0x1D570:
				return 0x24;
			case 0x1D571:
				return 0x24;
			case 0x1D572:
				return 0x24;
			case 0x1D573:
				return 0x24;
			case 0x1D574:
				return 0x24;
			case 0x1D575:
				return 0x24;
			case 0x1D576:
				return 0x24;
			case 0x1D577:
				return 0x24;
			case 0x1D578:
				return 0x24;
			case 0x1D579:
				return 0x24;
			case 0x1D57A:
				return 0x24;
			case 0x1D57B:
				return 0x24;
			case 0x1D57C:
				return 0x24;
			case 0x1D57D:
				return 0x24;
			case 0x1D57E:
				return 0x24;
			case 0x1D57F:
				return 0x24;
			case 0x1D580:
				return 0x24;
			case 0x1D581:
				return 0x24;
			case 0x1D582:
				return 0x24;
			case 0x1D583:
				return 0x24;
			case 0x1D584:
				return 0x24;
			case 0x1D585:
				return 0x24;
			case 0x1D586:
				return 0x22;
			case 0x1D587:
				return 0x22;
			case 0x1D588:
				return 0x22;
			case 0x1D589:
				return 0x22;
			case 0x1D58A:
				return 0x22;
			case 0x1D58B:
				return 0x22;
			case 0x1D58C:
				return 0x22;
			case 0x1D58D:
				return 0x22;
			case 0x1D58E:
				return 0x22;
			case 0x1D58F:
				return 0x22;
			case 0x1D590:
				return 0x22;
			case 0x1D591:
				return 0x22;
			case 0x1D592:
				return 0x22;
			case 0x1D593:
				return 0x22;
			case 0x1D594:
				return 0x22;
			case 0x1D595:
				return 0x22;
			case 0x1D596:
				return 0x22;
			case 0x1D597:
				return 0x22;
			case 0x1D598:
				return 0x22;
			case 0x1D599:
				return 0x22;
			case 0x1D59A:
				return 0x22;
			case 0x1D59B:
				return 0x22;
			case 0x1D59C:
				return 0x22;
			case 0x1D59D:
				return 0x22;
			case 0x1D59E:
				return 0x22;
			case 0x1D59F:
				return 0x22;
			case 0x1D5A0:
				return 0x22;
			case 0x1D5A1:
				return 0x22;
			case 0x1D5A2:
				return 0x22;
			case 0x1D5A3:
				return 0x22;
			case 0x1D5A4:
				return 0x22;
			case 0x1D5A5:
				return 0x22;
			case 0x1D5A6:
				return 0x22;
			case 0x1D5A7:
				return 0x22;
			case 0x1D5A8:
				return 0x22;
			case 0x1D5A9:
				return 0x22;
			case 0x1D5AA:
				return 0x22;
			case 0x1D5AB:
				return 0x22;
			case 0x1D5AC:
				return 0x22;
			case 0x1D5AD:
				return 0x22;
			case 0x1D5AE:
				return 0x22;
			case 0x1D5AF:
				return 0x22;
			case 0x1D5B0:
				return 0x22;
			case 0x1D5B1:
				return 0x22;
			case 0x1D5B2:
				return 0x22;
			case 0x1D5B3:
				return 0x22;
			case 0x1D5B4:
				return 0x22;
			case 0x1D5B5:
				return 0x22;
			case 0x1D5B6:
				return 0x22;
			case 0x1D5B7:
				return 0x22;
			case 0x1D5B8:
				return 0x22;
			case 0x1D5B9:
				return 0x22;
			case 0x1D5BA:
				return 0x20;
			case 0x1D5BB:
				return 0x20;
			case 0x1D5BC:
				return 0x20;
			case 0x1D5BD:
				return 0x20;
			case 0x1D5BE:
				return 0x20;
			case 0x1D5BF:
				return 0x20;
			case 0x1D5C0:
				return 0x20;
			case 0x1D5C1:
				return 0x20;
			case 0x1D5C2:
				return 0x20;
			case 0x1D5C3:
				return 0x20;
			case 0x1D5C4:
				return 0x20;
			case 0x1D5C5:
				return 0x20;
			case 0x1D5C6:
				return 0x20;
			case 0x1D5C7:
				return 0x20;
			case 0x1D5C8:
				return 0x20;
			case 0x1D5C9:
				return 0x20;
			case 0x1D5CA:
				return 0x20;
			case 0x1D5CB:
				return 0x20;
			case 0x1D5CC:
				return 0x20;
			case 0x1D5CD:
				return 0x20;
			case 0x1D5CE:
				return 0x20;
			case 0x1D5CF:
				return 0x20;
			case 0x1D5D0:
				return 0x20;
			case 0x1D5D1:
				return 0x20;
			case 0x1D5D2:
				return 0x20;
			case 0x1D5D3:
				return 0x20;
			case 0x1D5D4:
				return 0x27;
			case 0x1D5D5:
				return 0x27;
			case 0x1D5D6:
				return 0x27;
			case 0x1D5D7:
				return 0x27;
			case 0x1D5D8:
				return 0x27;
			case 0x1D5D9:
				return 0x27;
			case 0x1D5DA:
				return 0x27;
			case 0x1D5DB:
				return 0x27;
			case 0x1D5DC:
				return 0x27;
			case 0x1D5DD:
				return 0x27;
			case 0x1D5DE:
				return 0x27;
			case 0x1D5DF:
				return 0x27;
			case 0x1D5E0:
				return 0x27;
			case 0x1D5E1:
				return 0x27;
			case 0x1D5E2:
				return 0x27;
			case 0x1D5E3:
				return 0x27;
			case 0x1D5E4:
				return 0x27;
			case 0x1D5E5:
				return 0x27;
			case 0x1D5E6:
				return 0x27;
			case 0x1D5E7:
				return 0x27;
			case 0x1D5E8:
				return 0x27;
			case 0x1D5E9:
				return 0x27;
			case 0x1D5EA:
				return 0x27;
			case 0x1D5EB:
				return 0x27;
			case 0x1D5EC:
				return 0x27;
			case 0x1D5ED:
				return 0x27;
			case 0x1D5EE:
				return 0x25;
			case 0x1D5EF:
				return 0x25;
			case 0x1D5F0:
				return 0x25;
			case 0x1D5F1:
				return 0x25;
			case 0x1D5F2:
				return 0x25;
			case 0x1D5F3:
				return 0x25;
			case 0x1D5F4:
				return 0x25;
			case 0x1D5F5:
				return 0x25;
			case 0x1D5F6:
				return 0x25;
			case 0x1D5F7:
				return 0x25;
			case 0x1D5F8:
				return 0x25;
			case 0x1D5F9:
				return 0x25;
			case 0x1D5FA:
				return 0x25;
			case 0x1D5FB:
				return 0x25;
			case 0x1D5FC:
				return 0x25;
			case 0x1D5FD:
				return 0x25;
			case 0x1D5FE:
				return 0x25;
			case 0x1D5FF:
				return 0x25;
			case 0x1D600:
				return 0x25;
			case 0x1D601:
				return 0x25;
			case 0x1D602:
				return 0x25;
			case 0x1D603:
				return 0x25;
			case 0x1D604:
				return 0x25;
			case 0x1D605:
				return 0x25;
			case 0x1D606:
				return 0x25;
			case 0x1D607:
				return 0x25;
			case 0x1D608:
				return 0x29;
			case 0x1D609:
				return 0x29;
			case 0x1D60A:
				return 0x29;
			case 0x1D60B:
				return 0x29;
			case 0x1D60C:
				return 0x29;
			case 0x1D60D:
				return 0x29;
			case 0x1D60E:
				return 0x29;
			case 0x1D60F:
				return 0x29;
			case 0x1D610:
				return 0x29;
			case 0x1D611:
				return 0x29;
			case 0x1D612:
				return 0x29;
			case 0x1D613:
				return 0x29;
			case 0x1D614:
				return 0x29;
			case 0x1D615:
				return 0x29;
			case 0x1D616:
				return 0x29;
			case 0x1D617:
				return 0x29;
			case 0x1D618:
				return 0x29;
			case 0x1D619:
				return 0x29;
			case 0x1D61A:
				return 0x29;
			case 0x1D61B:
				return 0x29;
			case 0x1D61C:
				return 0x29;
			case 0x1D61D:
				return 0x29;
			case 0x1D61E:
				return 0x29;
			case 0x1D61F:
				return 0x29;
			case 0x1D620:
				return 0x29;
			case 0x1D621:
				return 0x29;
			case 0x1D622:
				return 0x27;
			case 0x1D623:
				return 0x27;
			case 0x1D624:
				return 0x27;
			case 0x1D625:
				return 0x27;
			case 0x1D626:
				return 0x27;
			case 0x1D627:
				return 0x27;
			case 0x1D628:
				return 0x27;
			case 0x1D629:
				return 0x27;
			case 0x1D62A:
				return 0x27;
			case 0x1D62B:
				return 0x27;
			case 0x1D62C:
				return 0x27;
			case 0x1D62D:
				return 0x27;
			case 0x1D62E:
				return 0x27;
			case 0x1D62F:
				return 0x27;
			case 0x1D630:
				return 0x27;
			case 0x1D631:
				return 0x27;
			case 0x1D632:
				return 0x27;
			case 0x1D633:
				return 0x27;
			case 0x1D634:
				return 0x27;
			case 0x1D635:
				return 0x27;
			case 0x1D636:
				return 0x27;
			case 0x1D637:
				return 0x27;
			case 0x1D638:
				return 0x27;
			case 0x1D639:
				return 0x27;
			case 0x1D63A:
				return 0x27;
			case 0x1D63B:
				return 0x27;
			case 0x1D63C:
				return 0x2E;
			case 0x1D63D:
				return 0x2E;
			case 0x1D63E:
				return 0x2E;
			case 0x1D63F:
				return 0x2E;
			case 0x1D640:
				return 0x2E;
			case 0x1D641:
				return 0x2E;
			case 0x1D642:
				return 0x2E;
			case 0x1D643:
				return 0x2E;
			case 0x1D644:
				return 0x2E;
			case 0x1D645:
				return 0x2E;
			case 0x1D646:
				return 0x2E;
			case 0x1D647:
				return 0x2E;
			case 0x1D648:
				return 0x2E;
			case 0x1D649:
				return 0x2E;
			case 0x1D64A:
				return 0x2E;
			case 0x1D64B:
				return 0x2E;
			case 0x1D64C:
				return 0x2E;
			case 0x1D64D:
				return 0x2E;
			case 0x1D64E:
				return 0x2E;
			case 0x1D64F:
				return 0x2E;
			case 0x1D650:
				return 0x2E;
			case 0x1D651:
				return 0x2E;
			case 0x1D652:
				return 0x2E;
			case 0x1D653:
				return 0x2E;
			case 0x1D654:
				return 0x2E;
			case 0x1D655:
				return 0x2E;
			case 0x1D656:
				return 0x2C;
			case 0x1D657:
				return 0x2C;
			case 0x1D658:
				return 0x2C;
			case 0x1D659:
				return 0x2C;
			case 0x1D65A:
				return 0x2C;
			case 0x1D65B:
				return 0x2C;
			case 0x1D65C:
				return 0x2C;
			case 0x1D65D:
				return 0x2C;
			case 0x1D65E:
				return 0x2C;
			case 0x1D65F:
				return 0x2C;
			case 0x1D660:
				return 0x2C;
			case 0x1D661:
				return 0x2C;
			case 0x1D662:
				return 0x2C;
			case 0x1D663:
				return 0x2C;
			case 0x1D664:
				return 0x2C;
			case 0x1D665:
				return 0x2C;
			case 0x1D666:
				return 0x2C;
			case 0x1D667:
				return 0x2C;
			case 0x1D668:
				return 0x2C;
			case 0x1D669:
				return 0x2C;
			case 0x1D66A:
				return 0x2C;
			case 0x1D66B:
				return 0x2C;
			case 0x1D66C:
				return 0x2C;
			case 0x1D66D:
				return 0x2C;
			case 0x1D66E:
				return 0x2C;
			case 0x1D66F:
				return 0x2C;
			case 0x1D670:
				return 0x21;
			case 0x1D671:
				return 0x21;
			case 0x1D672:
				return 0x21;
			case 0x1D673:
				return 0x21;
			case 0x1D674:
				return 0x21;
			case 0x1D675:
				return 0x21;
			case 0x1D676:
				return 0x21;
			case 0x1D677:
				return 0x21;
			case 0x1D678:
				return 0x21;
			case 0x1D679:
				return 0x21;
			case 0x1D67A:
				return 0x21;
			case 0x1D67B:
				return 0x21;
			case 0x1D67C:
				return 0x21;
			case 0x1D67D:
				return 0x21;
			case 0x1D67E:
				return 0x21;
			case 0x1D67F:
				return 0x21;
			case 0x1D680:
				return 0x21;
			case 0x1D681:
				return 0x21;
			case 0x1D682:
				return 0x21;
			case 0x1D683:
				return 0x21;
			case 0x1D684:
				return 0x21;
			case 0x1D685:
				return 0x21;
			case 0x1D686:
				return 0x21;
			case 0x1D687:
				return 0x21;
			case 0x1D688:
				return 0x21;
			case 0x1D689:
				return 0x21;
			case 0x1D68A:
				return 0x1F;
			case 0x1D68B:
				return 0x1F;
			case 0x1D68C:
				return 0x1F;
			case 0x1D68D:
				return 0x1F;
			case 0x1D68E:
				return 0x1F;
			case 0x1D68F:
				return 0x1F;
			case 0x1D690:
				return 0x1F;
			case 0x1D691:
				return 0x1F;
			case 0x1D692:
				return 0x1F;
			case 0x1D693:
				return 0x1F;
			case 0x1D694:
				return 0x1F;
			case 0x1D695:
				return 0x1F;
			case 0x1D696:
				return 0x1F;
			case 0x1D697:
				return 0x1F;
			case 0x1D698:
				return 0x1F;
			case 0x1D699:
				return 0x1F;
			case 0x1D69A:
				return 0x1F;
			case 0x1D69B:
				return 0x1F;
			case 0x1D69C:
				return 0x1F;
			case 0x1D69D:
				return 0x1F;
			case 0x1D69E:
				return 0x1F;
			case 0x1D69F:
				return 0x1F;
			case 0x1D6A0:
				return 0x1F;
			case 0x1D6A1:
				return 0x1F;
			case 0x1D6A2:
				return 0x1F;
			case 0x1D6A3:
				return 0x1F;
			case 0x1D6A4:
				return 0x24;
			case 0x1D6A5:
				return 0x24;
			case 0x1D6A8:
				return 0x20;
			case 0x1D6A9:
				return 0x1F;
			case 0x1D6AA:
				return 0x20;
			case 0x1D6AB:
				return 0x20;
			case 0x1D6AC:
				return 0x22;
			case 0x1D6AD:
				return 0x1F;
			case 0x1D6AE:
				return 0x1E;
			case 0x1D6AF:
				return 0x20;
			case 0x1D6B0:
				return 0x1F;
			case 0x1D6B1:
				return 0x20;
			case 0x1D6B2:
				return 0x20;
			case 0x1D6B3:
				return 0x1D;
			case 0x1D6B4:
				return 0x1D;
			case 0x1D6B5:
				return 0x1D;
			case 0x1D6B6:
				return 0x22;
			case 0x1D6B7:
				return 0x1D;
			case 0x1D6B8:
				return 0x1E;
			case 0x1D6B9:
				return 0x27;
			case 0x1D6BA:
				return 0x20;
			case 0x1D6BB:
				return 0x1E;
			case 0x1D6BC:
				return 0x22;
			case 0x1D6BD:
				return 0x1E;
			case 0x1D6BE:
				return 0x1E;
			case 0x1D6BF:
				return 0x1E;
			case 0x1D6C0:
				return 0x20;
			case 0x1D6C1:
				return 0x18;
			case 0x1D6C2:
				return 0x1E;
			case 0x1D6C3:
				return 0x1D;
			case 0x1D6C4:
				return 0x1E;
			case 0x1D6C5:
				return 0x1E;
			case 0x1D6C6:
				return 0x20;
			case 0x1D6C7:
				return 0x1D;
			case 0x1D6C8:
				return 0x1C;
			case 0x1D6C9:
				return 0x1E;
			case 0x1D6CA:
				return 0x1D;
			case 0x1D6CB:
				return 0x1E;
			case 0x1D6CC:
				return 0x1E;
			case 0x1D6CD:
				return 0x1B;
			case 0x1D6CE:
				return 0x1B;
			case 0x1D6CF:
				return 0x1B;
			case 0x1D6D0:
				return 0x20;
			case 0x1D6D1:
				return 0x1B;
			case 0x1D6D2:
				return 0x1C;
			case 0x1D6D3:
				return 0x24;
			case 0x1D6D4:
				return 0x1E;
			case 0x1D6D5:
				return 0x1C;
			case 0x1D6D6:
				return 0x20;
			case 0x1D6D7:
				return 0x1C;
			case 0x1D6D8:
				return 0x1C;
			case 0x1D6D9:
				return 0x1C;
			case 0x1D6DA:
				return 0x1E;
			case 0x1D6DB:
				return 0x27;
			case 0x1D6DC:
				return 0x21;
			case 0x1D6DD:
				return 0x1F;
			case 0x1D6DE:
				return 0x1F;
			case 0x1D6DF:
				return 0x1D;
			case 0x1D6E0:
				return 0x1D;
			case 0x1D6E1:
				return 0x1C;
			case 0x1D6E2:
				return 0x22;
			case 0x1D6E3:
				return 0x21;
			case 0x1D6E4:
				return 0x22;
			case 0x1D6E5:
				return 0x22;
			case 0x1D6E6:
				return 0x24;
			case 0x1D6E7:
				return 0x21;
			case 0x1D6E8:
				return 0x20;
			case 0x1D6E9:
				return 0x22;
			case 0x1D6EA:
				return 0x21;
			case 0x1D6EB:
				return 0x22;
			case 0x1D6EC:
				return 0x22;
			case 0x1D6ED:
				return 0x1F;
			case 0x1D6EE:
				return 0x1F;
			case 0x1D6EF:
				return 0x1F;
			case 0x1D6F0:
				return 0x24;
			case 0x1D6F1:
				return 0x1F;
			case 0x1D6F2:
				return 0x20;
			case 0x1D6F3:
				return 0x29;
			case 0x1D6F4:
				return 0x22;
			case 0x1D6F5:
				return 0x20;
			case 0x1D6F6:
				return 0x24;
			case 0x1D6F7:
				return 0x20;
			case 0x1D6F8:
				return 0x20;
			case 0x1D6F9:
				return 0x20;
			case 0x1D6FA:
				return 0x22;
			case 0x1D6FB:
				return 0x1A;
			case 0x1D6FC:
				return 0x20;
			case 0x1D6FD:
				return 0x1F;
			case 0x1D6FE:
				return 0x20;
			case 0x1D6FF:
				return 0x20;
			case 0x1D700:
				return 0x22;
			case 0x1D701:
				return 0x1F;
			case 0x1D702:
				return 0x1E;
			case 0x1D703:
				return 0x20;
			case 0x1D704:
				return 0x1F;
			case 0x1D705:
				return 0x20;
			case 0x1D706:
				return 0x20;
			case 0x1D707:
				return 0x1D;
			case 0x1D708:
				return 0x1D;
			case 0x1D709:
				return 0x1D;
			case 0x1D70A:
				return 0x22;
			case 0x1D70B:
				return 0x1D;
			case 0x1D70C:
				return 0x1E;
			case 0x1D70D:
				return 0x26;
			case 0x1D70E:
				return 0x20;
			case 0x1D70F:
				return 0x1E;
			case 0x1D710:
				return 0x22;
			case 0x1D711:
				return 0x1E;
			case 0x1D712:
				return 0x1E;
			case 0x1D713:
				return 0x1E;
			case 0x1D714:
				return 0x20;
			case 0x1D715:
				return 0x29;
			case 0x1D716:
				return 0x23;
			case 0x1D717:
				return 0x21;
			case 0x1D718:
				return 0x21;
			case 0x1D719:
				return 0x1F;
			case 0x1D71A:
				return 0x1F;
			case 0x1D71B:
				return 0x1E;
			case 0x1D71C:
				return 0x27;
			case 0x1D71D:
				return 0x26;
			case 0x1D71E:
				return 0x27;
			case 0x1D71F:
				return 0x27;
			case 0x1D720:
				return 0x29;
			case 0x1D721:
				return 0x26;
			case 0x1D722:
				return 0x25;
			case 0x1D723:
				return 0x27;
			case 0x1D724:
				return 0x26;
			case 0x1D725:
				return 0x27;
			case 0x1D726:
				return 0x27;
			case 0x1D727:
				return 0x24;
			case 0x1D728:
				return 0x24;
			case 0x1D729:
				return 0x24;
			case 0x1D72A:
				return 0x29;
			case 0x1D72B:
				return 0x24;
			case 0x1D72C:
				return 0x25;
			case 0x1D72D:
				return 0x2E;
			case 0x1D72E:
				return 0x27;
			case 0x1D72F:
				return 0x25;
			case 0x1D730:
				return 0x29;
			case 0x1D731:
				return 0x25;
			case 0x1D732:
				return 0x25;
			case 0x1D733:
				return 0x25;
			case 0x1D734:
				return 0x27;
			case 0x1D735:
				return 0x1F;
			case 0x1D736:
				return 0x25;
			case 0x1D737:
				return 0x24;
			case 0x1D738:
				return 0x25;
			case 0x1D739:
				return 0x25;
			case 0x1D73A:
				return 0x27;
			case 0x1D73B:
				return 0x24;
			case 0x1D73C:
				return 0x23;
			case 0x1D73D:
				return 0x25;
			case 0x1D73E:
				return 0x24;
			case 0x1D73F:
				return 0x25;
			case 0x1D740:
				return 0x25;
			case 0x1D741:
				return 0x22;
			case 0x1D742:
				return 0x22;
			case 0x1D743:
				return 0x22;
			case 0x1D744:
				return 0x27;
			case 0x1D745:
				return 0x22;
			case 0x1D746:
				return 0x23;
			case 0x1D747:
				return 0x2B;
			case 0x1D748:
				return 0x25;
			case 0x1D749:
				return 0x23;
			case 0x1D74A:
				return 0x27;
			case 0x1D74B:
				return 0x23;
			case 0x1D74C:
				return 0x23;
			case 0x1D74D:
				return 0x23;
			case 0x1D74E:
				return 0x25;
			case 0x1D74F:
				return 0x2E;
			case 0x1D750:
				return 0x28;
			case 0x1D751:
				return 0x26;
			case 0x1D752:
				return 0x26;
			case 0x1D753:
				return 0x24;
			case 0x1D754:
				return 0x24;
			case 0x1D755:
				return 0x23;
			case 0x1D756:
				return 0x2B;
			case 0x1D757:
				return 0x2A;
			case 0x1D758:
				return 0x2B;
			case 0x1D759:
				return 0x2B;
			case 0x1D75A:
				return 0x2D;
			case 0x1D75B:
				return 0x2A;
			case 0x1D75C:
				return 0x29;
			case 0x1D75D:
				return 0x2B;
			case 0x1D75E:
				return 0x2A;
			case 0x1D75F:
				return 0x2B;
			case 0x1D760:
				return 0x2B;
			case 0x1D761:
				return 0x28;
			case 0x1D762:
				return 0x28;
			case 0x1D763:
				return 0x28;
			case 0x1D764:
				return 0x2D;
			case 0x1D765:
				return 0x28;
			case 0x1D766:
				return 0x29;
			case 0x1D767:
				return 0x32;
			case 0x1D768:
				return 0x2B;
			case 0x1D769:
				return 0x29;
			case 0x1D76A:
				return 0x2D;
			case 0x1D76B:
				return 0x29;
			case 0x1D76C:
				return 0x29;
			case 0x1D76D:
				return 0x29;
			case 0x1D76E:
				return 0x2B;
			case 0x1D76F:
				return 0x23;
			case 0x1D770:
				return 0x29;
			case 0x1D771:
				return 0x28;
			case 0x1D772:
				return 0x29;
			case 0x1D773:
				return 0x29;
			case 0x1D774:
				return 0x2B;
			case 0x1D775:
				return 0x28;
			case 0x1D776:
				return 0x27;
			case 0x1D777:
				return 0x29;
			case 0x1D778:
				return 0x28;
			case 0x1D779:
				return 0x29;
			case 0x1D77A:
				return 0x29;
			case 0x1D77B:
				return 0x26;
			case 0x1D77C:
				return 0x26;
			case 0x1D77D:
				return 0x26;
			case 0x1D77E:
				return 0x2B;
			case 0x1D77F:
				return 0x26;
			case 0x1D780:
				return 0x27;
			case 0x1D781:
				return 0x2F;
			case 0x1D782:
				return 0x29;
			case 0x1D783:
				return 0x27;
			case 0x1D784:
				return 0x2B;
			case 0x1D785:
				return 0x27;
			case 0x1D786:
				return 0x27;
			case 0x1D787:
				return 0x27;
			case 0x1D788:
				return 0x29;
			case 0x1D789:
				return 0x32;
			case 0x1D78A:
				return 0x2C;
			case 0x1D78B:
				return 0x2A;
			case 0x1D78C:
				return 0x2A;
			case 0x1D78D:
				return 0x28;
			case 0x1D78E:
				return 0x28;
			case 0x1D78F:
				return 0x27;
			case 0x1D790:
				return 0x32;
			case 0x1D791:
				return 0x31;
			case 0x1D792:
				return 0x32;
			case 0x1D793:
				return 0x32;
			case 0x1D794:
				return 0x34;
			case 0x1D795:
				return 0x31;
			case 0x1D796:
				return 0x30;
			case 0x1D797:
				return 0x32;
			case 0x1D798:
				return 0x31;
			case 0x1D799:
				return 0x32;
			case 0x1D79A:
				return 0x32;
			case 0x1D79B:
				return 0x2F;
			case 0x1D79C:
				return 0x2F;
			case 0x1D79D:
				return 0x2F;
			case 0x1D79E:
				return 0x34;
			case 0x1D79F:
				return 0x2F;
			case 0x1D7A0:
				return 0x30;
			case 0x1D7A1:
				return 0x39;
			case 0x1D7A2:
				return 0x32;
			case 0x1D7A3:
				return 0x30;
			case 0x1D7A4:
				return 0x34;
			case 0x1D7A5:
				return 0x30;
			case 0x1D7A6:
				return 0x30;
			case 0x1D7A7:
				return 0x30;
			case 0x1D7A8:
				return 0x32;
			case 0x1D7A9:
				return 0x2A;
			case 0x1D7AA:
				return 0x30;
			case 0x1D7AB:
				return 0x2F;
			case 0x1D7AC:
				return 0x30;
			case 0x1D7AD:
				return 0x30;
			case 0x1D7AE:
				return 0x32;
			case 0x1D7AF:
				return 0x2F;
			case 0x1D7B0:
				return 0x2E;
			case 0x1D7B1:
				return 0x30;
			case 0x1D7B2:
				return 0x2F;
			case 0x1D7B3:
				return 0x30;
			case 0x1D7B4:
				return 0x30;
			case 0x1D7B5:
				return 0x2D;
			case 0x1D7B6:
				return 0x2D;
			case 0x1D7B7:
				return 0x2D;
			case 0x1D7B8:
				return 0x32;
			case 0x1D7B9:
				return 0x2D;
			case 0x1D7BA:
				return 0x2E;
			case 0x1D7BB:
				return 0x36;
			case 0x1D7BC:
				return 0x30;
			case 0x1D7BD:
				return 0x2E;
			case 0x1D7BE:
				return 0x32;
			case 0x1D7BF:
				return 0x2E;
			case 0x1D7C0:
				return 0x2E;
			case 0x1D7C1:
				return 0x2E;
			case 0x1D7C2:
				return 0x30;
			case 0x1D7C3:
				return 0x39;
			case 0x1D7C4:
				return 0x33;
			case 0x1D7C5:
				return 0x31;
			case 0x1D7C6:
				return 0x31;
			case 0x1D7C7:
				return 0x2F;
			case 0x1D7C8:
				return 0x2F;
			case 0x1D7C9:
				return 0x2E;
			case 0x1D7CA:
				return 0x22;
			case 0x1D7CB:
				return 0x20;
			case 0x1D7CE:
				return 0x1D;
			case 0x1D7CF:
				return 0x1C;
			case 0x1D7D0:
				return 0x1C;
			case 0x1D7D1:
				return 0x1E;
			case 0x1D7D2:
				return 0x1D;
			case 0x1D7D3:
				return 0x1D;
			case 0x1D7D4:
				return 0x1C;
			case 0x1D7D5:
				return 0x1E;
			case 0x1D7D6:
				return 0x1E;
			case 0x1D7D7:
				return 0x1D;
			case 0x1D7D8:
				return 0x26;
			case 0x1D7D9:
				return 0x25;
			case 0x1D7DA:
				return 0x25;
			case 0x1D7DB:
				return 0x27;
			case 0x1D7DC:
				return 0x26;
			case 0x1D7DD:
				return 0x26;
			case 0x1D7DE:
				return 0x25;
			case 0x1D7DF:
				return 0x27;
			case 0x1D7E0:
				return 0x27;
			case 0x1D7E1:
				return 0x26;
			case 0x1D7E2:
				return 0x23;
			case 0x1D7E3:
				return 0x22;
			case 0x1D7E4:
				return 0x22;
			case 0x1D7E5:
				return 0x24;
			case 0x1D7E6:
				return 0x23;
			case 0x1D7E7:
				return 0x23;
			case 0x1D7E8:
				return 0x22;
			case 0x1D7E9:
				return 0x24;
			case 0x1D7EA:
				return 0x24;
			case 0x1D7EB:
				return 0x23;
			case 0x1D7EC:
				return 0x28;
			case 0x1D7ED:
				return 0x27;
			case 0x1D7EE:
				return 0x27;
			case 0x1D7EF:
				return 0x29;
			case 0x1D7F0:
				return 0x28;
			case 0x1D7F1:
				return 0x28;
			case 0x1D7F2:
				return 0x27;
			case 0x1D7F3:
				return 0x29;
			case 0x1D7F4:
				return 0x29;
			case 0x1D7F5:
				return 0x28;
			case 0x1D7F6:
				return 0x22;
			case 0x1D7F7:
				return 0x21;
			case 0x1D7F8:
				return 0x21;
			case 0x1D7F9:
				return 0x23;
			case 0x1D7FA:
				return 0x22;
			case 0x1D7FB:
				return 0x22;
			case 0x1D7FC:
				return 0x21;
			case 0x1D7FD:
				return 0x23;
			case 0x1D7FE:
				return 0x23;
			case 0x1D7FF:
				return 0x22;
			case 0x1D800:
				return 0x1C;
			case 0x1D801:
				return 0x1E;
			case 0x1D802:
				return 0x1B;
			case 0x1D803:
				return 0x1C;
			case 0x1D804:
				return 0x1D;
			case 0x1D805:
				return 0x1D;
			case 0x1D806:
				return 0x21;
			case 0x1D807:
				return 0x23;
			case 0x1D808:
				return 0x2D;
			case 0x1D809:
				return 0x2B;
			case 0x1D80A:
				return 0x23;
			case 0x1D80B:
				return 0x23;
			case 0x1D80C:
				return 0x27;
			case 0x1D80D:
				return 0x24;
			case 0x1D80E:
				return 0x23;
			case 0x1D80F:
				return 0x25;
			case 0x1D810:
				return 0x28;
			case 0x1D811:
				return 0x33;
			case 0x1D812:
				return 0x2A;
			case 0x1D813:
				return 0x2D;
			case 0x1D814:
				return 0x2D;
			case 0x1D815:
				return 0x2D;
			case 0x1D816:
				return 0x38;
			case 0x1D817:
				return 0x39;
			case 0x1D818:
				return 0x34;
			case 0x1D819:
				return 0x34;
			case 0x1D81A:
				return 0x2B;
			case 0x1D81B:
				return 0x2D;
			case 0x1D81C:
				return 0x2D;
			case 0x1D81D:
				return 0x2D;
			case 0x1D81E:
				return 0x29;
			case 0x1D81F:
				return 0x2B;
			case 0x1D820:
				return 0x37;
			case 0x1D821:
				return 0x37;
			case 0x1D822:
				return 0x2E;
			case 0x1D823:
				return 0x3C;
			case 0x1D824:
				return 0x38;
			case 0x1D825:
				return 0x3D;
			case 0x1D826:
				return 0x38;
			case 0x1D827:
				return 0x3B;
			case 0x1D828:
				return 0x30;
			case 0x1D829:
				return 0x31;
			case 0x1D82A:
				return 0x30;
			case 0x1D82B:
				return 0x30;
			case 0x1D82C:
				return 0x3A;
			case 0x1D82D:
				return 0x38;
			case 0x1D82E:
				return 0x42;
			case 0x1D82F:
				return 0x3D;
			case 0x1D830:
				return 0x33;
			case 0x1D831:
				return 0x33;
			case 0x1D832:
				return 0x3F;
			case 0x1D833:
				return 0x36;
			case 0x1D834:
				return 0x3B;
			case 0x1D835:
				return 0x42;
			case 0x1D836:
				return 0x33;
			case 0x1D837:
				return 0x33;
			case 0x1D838:
				return 0x34;
			case 0x1D839:
				return 0x38;
			case 0x1D83A:
				return 0x37;
			case 0x1D83B:
				return 0x36;
			case 0x1D83C:
				return 0x34;
			case 0x1D83D:
				return 0x3A;
			case 0x1D83E:
				return 0x34;
			case 0x1D83F:
				return 0x30;
			case 0x1D840:
				return 0x37;
			case 0x1D841:
				return 0x3C;
			case 0x1D842:
				return 0x33;
			case 0x1D843:
				return 0x37;
			case 0x1D844:
				return 0x23;
			case 0x1D845:
				return 0x28;
			case 0x1D846:
				return 0x2A;
			case 0x1D847:
				return 0x2D;
			case 0x1D848:
				return 0x33;
			case 0x1D849:
				return 0x2D;
			case 0x1D84A:
				return 0x32;
			case 0x1D84B:
				return 0x2E;
			case 0x1D84C:
				return 0x2A;
			case 0x1D84D:
				return 0x2F;
			case 0x1D84E:
				return 0x34;
			case 0x1D84F:
				return 0x39;
			case 0x1D850:
				return 0x2F;
			case 0x1D851:
				return 0x34;
			case 0x1D852:
				return 0x38;
			case 0x1D853:
				return 0x29;
			case 0x1D854:
				return 0x2E;
			case 0x1D855:
				return 0x30;
			case 0x1D856:
				return 0x2A;
			case 0x1D857:
				return 0x31;
			case 0x1D858:
				return 0x3C;
			case 0x1D859:
				return 0x3A;
			case 0x1D85A:
				return 0x16;
			case 0x1D85B:
				return 0x2B;
			case 0x1D85C:
				return 0x1B;
			case 0x1D85D:
				return 0x21;
			case 0x1D85E:
				return 0x26;
			case 0x1D85F:
				return 0x21;
			case 0x1D860:
				return 0x24;
			case 0x1D861:
				return 0x2D;
			case 0x1D862:
				return 0x23;
			case 0x1D863:
				return 0x2E;
			case 0x1D864:
				return 0x33;
			case 0x1D865:
				return 0x23;
			case 0x1D866:
				return 0x16;
			case 0x1D867:
				return 0x21;
			case 0x1D868:
				return 0x1F;
			case 0x1D869:
				return 0x24;
			case 0x1D86A:
				return 0x1F;
			case 0x1D86B:
				return 0x16;
			case 0x1D86C:
				return 0x1A;
			case 0x1D86D:
				return 0x15;
			case 0x1D86E:
				return 0x25;
			case 0x1D86F:
				return 0x20;
			case 0x1D870:
				return 0x23;
			case 0x1D871:
				return 0x1E;
			case 0x1D872:
				return 0x28;
			case 0x1D873:
				return 0x23;
			case 0x1D874:
				return 0x1F;
			case 0x1D875:
				return 0x1A;
			case 0x1D876:
				return 0x18;
			case 0x1D877:
				return 0x16;
			case 0x1D878:
				return 0x21;
			case 0x1D879:
				return 0x1F;
			case 0x1D87A:
				return 0x24;
			case 0x1D87B:
				return 0x1C;
			case 0x1D87C:
				return 0x2A;
			case 0x1D87D:
				return 0x17;
			case 0x1D87E:
				return 0x1D;
			case 0x1D87F:
				return 0x27;
			case 0x1D880:
				return 0x22;
			case 0x1D881:
				return 0x25;
			case 0x1D882:
				return 0x20;
			case 0x1D883:
				return 0x31;
			case 0x1D884:
				return 0x31;
			case 0x1D885:
				return 0x17;
			case 0x1D886:
				return 0x28;
			case 0x1D887:
				return 0x2A;
			case 0x1D888:
				return 0x29;
			case 0x1D889:
				return 0x29;
			case 0x1D88A:
				return 0x1E;
			case 0x1D88B:
				return 0x2D;
			case 0x1D88C:
				return 0x32;
			case 0x1D88D:
				return 0x33;
			case 0x1D88E:
				return 0x22;
			case 0x1D88F:
				return 0x32;
			case 0x1D890:
				return 0x30;
			case 0x1D891:
				return 0x31;
			case 0x1D892:
				return 0x20;
			case 0x1D893:
				return 0x2C;
			case 0x1D894:
				return 0x22;
			case 0x1D895:
				return 0x20;
			case 0x1D896:
				return 0x21;
			case 0x1D897:
				return 0x2C;
			case 0x1D898:
				return 0x22;
			case 0x1D899:
				return 0x2B;
			case 0x1D89A:
				return 0x23;
			case 0x1D89B:
				return 0x24;
			case 0x1D89C:
				return 0x29;
			case 0x1D89D:
				return 0x2A;
			case 0x1D89E:
				return 0x3A;
			case 0x1D89F:
				return 0x36;
			case 0x1D8A0:
				return 0x23;
			case 0x1D8A1:
				return 0x25;
			case 0x1D8A2:
				return 0x24;
			case 0x1D8A3:
				return 0x24;
			case 0x1D8A4:
				return 0x2A;
			case 0x1D8A5:
				return 0x2C;
			case 0x1D8A6:
				return 0x2B;
			case 0x1D8A7:
				return 0x1C;
			case 0x1D8A8:
				return 0x2B;
			case 0x1D8A9:
				return 0x30;
			case 0x1D8AA:
				return 0x32;
			case 0x1D8AB:
				return 0x20;
			case 0x1D8AC:
				return 0x39;
			case 0x1D8AD:
				return 0x3A;
			case 0x1D8AE:
				return 0x1E;
			case 0x1D8AF:
				return 0x2A;
			case 0x1D8B0:
				return 0x22;
			case 0x1D8B1:
				return 0x24;
			case 0x1D8B2:
				return 0x22;
			case 0x1D8B3:
				return 0x23;
			case 0x1D8B4:
				return 0x22;
			case 0x1D8B5:
				return 0x2C;
			case 0x1D8B6:
				return 0x32;
			case 0x1D8B7:
				return 0x21;
			case 0x1D8B8:
				return 0x21;
			case 0x1D8B9:
				return 0x21;
			case 0x1D8BA:
				return 0x28;
			case 0x1D8BB:
				return 0x2A;
			case 0x1D8BC:
				return 0x2F;
			case 0x1D8BD:
				return 0x2C;
			case 0x1D8BE:
				return 0x2B;
			case 0x1D8BF:
				return 0x2E;
			case 0x1D8C0:
				return 0x27;
			case 0x1D8C1:
				return 0x29;
			case 0x1D8C2:
				return 0x2D;
			case 0x1D8C3:
				return 0x29;
			case 0x1D8C4:
				return 0x22;
			case 0x1D8C5:
				return 0x1E;
			case 0x1D8C6:
				return 0x20;
			case 0x1D8C7:
				return 0x22;
			case 0x1D8C8:
				return 0x2C;
			case 0x1D8C9:
				return 0x2B;
			case 0x1D8CA:
				return 0x23;
			case 0x1D8CB:
				return 0x2A;
			case 0x1D8CC:
				return 0x24;
			case 0x1D8CD:
				return 0x29;
			case 0x1D8CE:
				return 0x2B;
			case 0x1D8CF:
				return 0x30;
			case 0x1D8D0:
				return 0x28;
			case 0x1D8D1:
				return 0x2A;
			case 0x1D8D2:
				return 0x2E;
			case 0x1D8D3:
				return 0x2D;
			case 0x1D8D4:
				return 0x2A;
			case 0x1D8D5:
				return 0x30;
			case 0x1D8D6:
				return 0x33;
			case 0x1D8D7:
				return 0x38;
			case 0x1D8D8:
				return 0x37;
			case 0x1D8D9:
				return 0x36;
			case 0x1D8DA:
				return 0x33;
			case 0x1D8DB:
				return 0x24;
			case 0x1D8DC:
				return 0x27;
			case 0x1D8DD:
				return 0x28;
			case 0x1D8DE:
				return 0x36;
			case 0x1D8DF:
				return 0x37;
			case 0x1D8E0:
				return 0x32;
			case 0x1D8E1:
				return 0x32;
			case 0x1D8E2:
				return 0x31;
			case 0x1D8E3:
				return 0x33;
			case 0x1D8E4:
				return 0x39;
			case 0x1D8E5:
				return 0x35;
			case 0x1D8E6:
				return 0x27;
			case 0x1D8E7:
				return 0x2B;
			case 0x1D8E8:
				return 0x35;
			case 0x1D8E9:
				return 0x35;
			case 0x1D8EA:
				return 0x34;
			case 0x1D8EB:
				return 0x29;
			case 0x1D8EC:
				return 0x21;
			case 0x1D8ED:
				return 0x26;
			case 0x1D8EE:
				return 0x28;
			case 0x1D8EF:
				return 0x29;
			case 0x1D8F0:
				return 0x23;
			case 0x1D8F1:
				return 0x29;
			case 0x1D8F2:
				return 0x27;
			case 0x1D8F3:
				return 0x26;
			case 0x1D8F4:
				return 0x23;
			case 0x1D8F5:
				return 0x1C;
			case 0x1D8F6:
				return 0x21;
			case 0x1D8F7:
				return 0x2A;
			case 0x1D8F8:
				return 0x2B;
			case 0x1D8F9:
				return 0x26;
			case 0x1D8FA:
				return 0x24;
			case 0x1D8FB:
				return 0x31;
			case 0x1D8FC:
				return 0x30;
			case 0x1D8FD:
				return 0x30;
			case 0x1D8FE:
				return 0x2E;
			case 0x1D8FF:
				return 0x2D;
			case 0x1D900:
				return 0x30;
			case 0x1D901:
				return 0x2F;
			case 0x1D902:
				return 0x36;
			case 0x1D903:
				return 0x16;
			case 0x1D904:
				return 0x1B;
			case 0x1D905:
				return 0x19;
			case 0x1D906:
				return 0x1B;
			case 0x1D907:
				return 0x1A;
			case 0x1D908:
				return 0x19;
			case 0x1D909:
				return 0x1B;
			case 0x1D90A:
				return 0x1A;
			case 0x1D90B:
				return 0x1A;
			case 0x1D90C:
				return 0x1C;
			case 0x1D90D:
				return 0x1B;
			case 0x1D90E:
				return 0x19;
			case 0x1D90F:
				return 0x1B;
			case 0x1D910:
				return 0x1A;
			case 0x1D911:
				return 0x17;
			case 0x1D912:
				return 0x19;
			case 0x1D913:
				return 0x18;
			case 0x1D914:
				return 0x1C;
			case 0x1D915:
				return 0x1C;
			case 0x1D916:
				return 0x21;
			case 0x1D917:
				return 0x21;
			case 0x1D918:
				return 0x23;
			case 0x1D919:
				return 0x23;
			case 0x1D91A:
				return 0x1F;
			case 0x1D91B:
				return 0x1F;
			case 0x1D91C:
				return 0x1F;
			case 0x1D91D:
				return 0x21;
			case 0x1D91E:
				return 0x21;
			case 0x1D91F:
				return 0x1D;
			case 0x1D920:
				return 0x26;
			case 0x1D921:
				return 0x29;
			case 0x1D922:
				return 0x29;
			case 0x1D923:
				return 0x29;
			case 0x1D924:
				return 0x2B;
			case 0x1D925:
				return 0x35;
			case 0x1D926:
				return 0x35;
			case 0x1D927:
				return 0x31;
			case 0x1D928:
				return 0x2E;
			case 0x1D929:
				return 0x2F;
			case 0x1D92A:
				return 0x35;
			case 0x1D92B:
				return 0x36;
			case 0x1D92C:
				return 0x35;
			case 0x1D92D:
				return 0x37;
			case 0x1D92E:
				return 0x31;
			case 0x1D92F:
				return 0x2F;
			case 0x1D930:
				return 0x31;
			case 0x1D931:
				return 0x32;
			case 0x1D932:
				return 0x3D;
			case 0x1D933:
				return 0x25;
			case 0x1D934:
				return 0x38;
			case 0x1D935:
				return 0x31;
			case 0x1D936:
				return 0x32;
			case 0x1D937:
				return 0x3D;
			case 0x1D938:
				return 0x2A;
			case 0x1D939:
				return 0x2B;
			case 0x1D93A:
				return 0x2A;
			case 0x1D93B:
				return 0x2C;
			case 0x1D93C:
				return 0x2D;
			case 0x1D93D:
				return 0x2C;
			case 0x1D93E:
				return 0x2F;
			case 0x1D93F:
				return 0x2B;
			case 0x1D940:
				return 0x2C;
			case 0x1D941:
				return 0x2B;
			case 0x1D942:
				return 0x29;
			case 0x1D943:
				return 0x2A;
			case 0x1D944:
				return 0x29;
			case 0x1D945:
				return 0x2C;
			case 0x1D946:
				return 0x2D;
			case 0x1D947:
				return 0x2C;
			case 0x1D948:
				return 0x2B;
			case 0x1D949:
				return 0x2C;
			case 0x1D94A:
				return 0x2B;
			case 0x1D94B:
				return 0x37;
			case 0x1D94C:
				return 0x37;
			case 0x1D94D:
				return 0x3C;
			case 0x1D94E:
				return 0x38;
			case 0x1D94F:
				return 0x38;
			case 0x1D950:
				return 0x3D;
			case 0x1D951:
				return 0x25;
			case 0x1D952:
				return 0x2F;
			case 0x1D953:
				return 0x2F;
			case 0x1D954:
				return 0x2F;
			case 0x1D955:
				return 0x29;
			case 0x1D956:
				return 0x2A;
			case 0x1D957:
				return 0x29;
			case 0x1D958:
				return 0x2B;
			case 0x1D959:
				return 0x2C;
			case 0x1D95A:
				return 0x2D;
			case 0x1D95B:
				return 0x2C;
			case 0x1D95C:
				return 0x2E;
			case 0x1D95D:
				return 0x31;
			case 0x1D95E:
				return 0x32;
			case 0x1D95F:
				return 0x31;
			case 0x1D960:
				return 0x33;
			case 0x1D961:
				return 0x34;
			case 0x1D962:
				return 0x35;
			case 0x1D963:
				return 0x34;
			case 0x1D964:
				return 0x36;
			case 0x1D965:
				return 0x36;
			case 0x1D966:
				return 0x37;
			case 0x1D967:
				return 0x36;
			case 0x1D968:
				return 0x38;
			case 0x1D969:
				return 0x32;
			case 0x1D96A:
				return 0x30;
			case 0x1D96B:
				return 0x32;
			case 0x1D96C:
				return 0x33;
			case 0x1D96D:
				return 0x3E;
			case 0x1D96E:
				return 0x26;
			case 0x1D96F:
				return 0x39;
			case 0x1D970:
				return 0x32;
			case 0x1D971:
				return 0x3C;
			case 0x1D972:
				return 0x3E;
			case 0x1D973:
				return 0x25;
			case 0x1D974:
				return 0x2D;
			case 0x1D975:
				return 0x2E;
			case 0x1D976:
				return 0x2D;
			case 0x1D977:
				return 0x26;
			case 0x1D978:
				return 0x2A;
			case 0x1D979:
				return 0x2B;
			case 0x1D97A:
				return 0x2A;
			case 0x1D97B:
				return 0x2D;
			case 0x1D97C:
				return 0x2E;
			case 0x1D97D:
				return 0x2D;
			case 0x1D97E:
				return 0x2C;
			case 0x1D97F:
				return 0x2D;
			case 0x1D980:
				return 0x2C;
			case 0x1D981:
				return 0x39;
			case 0x1D982:
				return 0x39;
			case 0x1D983:
				return 0x3E;
			case 0x1D984:
				return 0x38;
			case 0x1D985:
				return 0x38;
			case 0x1D986:
				return 0x3D;
			case 0x1D987:
				return 0x26;
			case 0x1D988:
				return 0x33;
			case 0x1D989:
				return 0x34;
			case 0x1D98A:
				return 0x33;
			case 0x1D98B:
				return 0x35;
			case 0x1D98C:
				return 0x37;
			case 0x1D98D:
				return 0x38;
			case 0x1D98E:
				return 0x37;
			case 0x1D98F:
				return 0x39;
			case 0x1D990:
				return 0x40;
			case 0x1D991:
				return 0x41;
			case 0x1D992:
				return 0x2A;
			case 0x1D993:
				return 0x2B;
			case 0x1D994:
				return 0x2A;
			case 0x1D995:
				return 0x2A;
			case 0x1D996:
				return 0x2B;
			case 0x1D997:
				return 0x2A;
			case 0x1D998:
				return 0x31;
			case 0x1D999:
				return 0x37;
			case 0x1D99A:
				return 0x38;
			case 0x1D99B:
				return 0x37;
			case 0x1D99C:
				return 0x37;
			case 0x1D99D:
				return 0x38;
			case 0x1D99E:
				return 0x37;
			case 0x1D99F:
				return 0x33;
			case 0x1D9A0:
				return 0x32;
			case 0x1D9A1:
				return 0x33;
			case 0x1D9A2:
				return 0x26;
			case 0x1D9A3:
				return 0x26;
			case 0x1D9A4:
				return 0x29;
			case 0x1D9A5:
				return 0x27;
			case 0x1D9A6:
				return 0x38;
			case 0x1D9A7:
				return 0x37;
			case 0x1D9A8:
				return 0x37;
			case 0x1D9A9:
				return 0x37;
			case 0x1D9AA:
				return 0x39;
			case 0x1D9AB:
				return 0x39;
			case 0x1D9AC:
				return 0x3E;
			case 0x1D9AD:
				return 0x33;
			case 0x1D9AE:
				return 0x32;
			case 0x1D9AF:
				return 0x32;
			case 0x1D9B0:
				return 0x32;
			case 0x1D9B1:
				return 0x34;
			case 0x1D9B2:
				return 0x34;
			case 0x1D9B3:
				return 0x39;
			case 0x1D9B4:
				return 0x38;
			case 0x1D9B5:
				return 0x39;
			case 0x1D9B6:
				return 0x38;
			case 0x1D9B7:
				return 0x3C;
			case 0x1D9B8:
				return 0x3C;
			case 0x1D9B9:
				return 0x42;
			case 0x1D9BA:
				return 0x42;
			case 0x1D9BB:
				return 0x42;
			case 0x1D9BC:
				return 0x42;
			case 0x1D9BD:
				return 0x42;
			case 0x1D9BE:
				return 0x42;
			case 0x1D9BF:
				return 0x42;
			case 0x1D9C0:
				return 0x42;
			case 0x1D9C1:
				return 0x3B;
			case 0x1D9C2:
				return 0x3B;
			case 0x1D9C3:
				return 0x37;
			case 0x1D9C4:
				return 0x37;
			case 0x1D9C5:
				return 0x3C;
			case 0x1D9C6:
				return 0x3A;
			case 0x1D9C7:
				return 0x3A;
			case 0x1D9C8:
				return 0x40;
			case 0x1D9C9:
				return 0x40;
			case 0x1D9CA:
				return 0x47;
			case 0x1D9CB:
				return 0x47;
			case 0x1D9CC:
				return 0x40;
			case 0x1D9CD:
				return 0x40;
			case 0x1D9CE:
				return 0x40;
			case 0x1D9CF:
				return 0x40;
			case 0x1D9D0:
				return 0x39;
			case 0x1D9D1:
				return 0x39;
			case 0x1D9D2:
				return 0x35;
			case 0x1D9D3:
				return 0x35;
			case 0x1D9D4:
				return 0x3A;
			case 0x1D9D5:
				return 0x2C;
			case 0x1D9D6:
				return 0x2D;
			case 0x1D9D7:
				return 0x2C;
			case 0x1D9D8:
				return 0x2E;
			case 0x1D9D9:
				return 0x2F;
			case 0x1D9DA:
				return 0x2B;
			case 0x1D9DB:
				return 0x2B;
			case 0x1D9DC:
				return 0x2B;
			case 0x1D9DD:
				return 0x2B;
			case 0x1D9DE:
				return 0x2B;
			case 0x1D9DF:
				return 0x27;
			case 0x1D9E0:
				return 0x27;
			case 0x1D9E1:
				return 0x2C;
			case 0x1D9E2:
				return 0x31;
			case 0x1D9E3:
				return 0x37;
			case 0x1D9E4:
				return 0x38;
			case 0x1D9E5:
				return 0x37;
			case 0x1D9E6:
				return 0x38;
			case 0x1D9E7:
				return 0x45;
			case 0x1D9E8:
				return 0x46;
			case 0x1D9E9:
				return 0x45;
			case 0x1D9EA:
				return 0x45;
			case 0x1D9EB:
				return 0x46;
			case 0x1D9EC:
				return 0x45;
			case 0x1D9ED:
				return 0x39;
			case 0x1D9EE:
				return 0x39;
			case 0x1D9EF:
				return 0x41;
			case 0x1D9F0:
				return 0x41;
			case 0x1D9F1:
				return 0x35;
			case 0x1D9F2:
				return 0x35;
			case 0x1D9F3:
				return 0x43;
			case 0x1D9F4:
				return 0x43;
			case 0x1D9F5:
				return 0x24;
			case 0x1D9F6:
				return 0x24;
			case 0x1D9F7:
				return 0x19;
			case 0x1D9F8:
				return 0x19;
			case 0x1D9F9:
				return 0x1A;
			case 0x1D9FA:
				return 0x1C;
			case 0x1D9FB:
				return 0x21;
			case 0x1D9FC:
				return 0x2D;
			case 0x1D9FD:
				return 0x25;
			case 0x1D9FE:
				return 0x1C;
			case 0x1D9FF:
				return 0x11;
			case 0x1DA00:
				return 0x15;
			case 0x1DA01:
				return 0x2D;
			case 0x1DA02:
				return 0x29;
			case 0x1DA03:
				return 0x2E;
			case 0x1DA04:
				return 0x2A;
			case 0x1DA05:
				return 0x2B;
			case 0x1DA06:
				return 0x21;
			case 0x1DA07:
				return 0x39;
			case 0x1DA08:
				return 0x34;
			case 0x1DA09:
				return 0x3C;
			case 0x1DA0A:
				return 0x21;
			case 0x1DA0B:
				return 0x26;
			case 0x1DA0C:
				return 0x23;
			case 0x1DA0D:
				return 0x29;
			case 0x1DA0E:
				return 0x29;
			case 0x1DA0F:
				return 0x27;
			case 0x1DA10:
				return 0x27;
			case 0x1DA11:
				return 0x1D;
			case 0x1DA12:
				return 0x1D;
			case 0x1DA13:
				return 0x1E;
			case 0x1DA14:
				return 0x16;
			case 0x1DA15:
				return 0x1A;
			case 0x1DA16:
				return 0x18;
			case 0x1DA17:
				return 0x1D;
			case 0x1DA18:
				return 0x1F;
			case 0x1DA19:
				return 0x1B;
			case 0x1DA1A:
				return 0x1B;
			case 0x1DA1B:
				return 0x1D;
			case 0x1DA1C:
				return 0x23;
			case 0x1DA1D:
				return 0x15;
			case 0x1DA1E:
				return 0x19;
			case 0x1DA1F:
				return 0x1B;
			case 0x1DA20:
				return 0x21;
			case 0x1DA21:
				return 0x27;
			case 0x1DA22:
				return 0x2E;
			case 0x1DA23:
				return 0x33;
			case 0x1DA24:
				return 0x28;
			case 0x1DA25:
				return 0x2F;
			case 0x1DA26:
				return 0x34;
			case 0x1DA27:
				return 0x25;
			case 0x1DA28:
				return 0x26;
			case 0x1DA29:
				return 0x27;
			case 0x1DA2A:
				return 0x1A;
			case 0x1DA2B:
				return 0x1B;
			case 0x1DA2C:
				return 0x1A;
			case 0x1DA2D:
				return 0x1E;
			case 0x1DA2E:
				return 0x20;
			case 0x1DA2F:
				return 0x1D;
			case 0x1DA30:
				return 0x11;
			case 0x1DA31:
				return 0x19;
			case 0x1DA32:
				return 0x19;
			case 0x1DA33:
				return 0x1A;
			case 0x1DA34:
				return 0x19;
			case 0x1DA35:
				return 0x1C;
			case 0x1DA36:
				return 0x1B;
			case 0x1DA37:
				return 0x25;
			case 0x1DA38:
				return 0x25;
			case 0x1DA39:
				return 0x1A;
			case 0x1DA3A:
				return 0x1A;
			case 0x1DA3B:
				return 0x21;
			case 0x1DA3C:
				return 0x21;
			case 0x1DA3D:
				return 0x21;
			case 0x1DA3E:
				return 0x18;
			case 0x1DA3F:
				return 0x21;
			case 0x1DA40:
				return 0x1D;
			case 0x1DA41:
				return 0x18;
			case 0x1DA42:
				return 0x21;
			case 0x1DA43:
				return 0x1D;
			case 0x1DA44:
				return 0x1E;
			case 0x1DA45:
				return 0x1F;
			case 0x1DA46:
				return 0x20;
			case 0x1DA47:
				return 0x1C;
			case 0x1DA48:
				return 0x25;
			case 0x1DA49:
				return 0x21;
			case 0x1DA4A:
				return 0x21;
			case 0x1DA4B:
				return 0x2A;
			case 0x1DA4C:
				return 0x26;
			case 0x1DA4D:
				return 0x17;
			case 0x1DA4E:
				return 0x1F;
			case 0x1DA4F:
				return 0x20;
			case 0x1DA50:
				return 0x18;
			case 0x1DA51:
				return 0x20;
			case 0x1DA52:
				return 0x1F;
			case 0x1DA53:
				return 0x22;
			case 0x1DA54:
				return 0x21;
			case 0x1DA55:
				return 0x21;
			case 0x1DA56:
				return 0x1A;
			case 0x1DA57:
				return 0x22;
			case 0x1DA58:
				return 0x22;
			case 0x1DA59:
				return 0x24;
			case 0x1DA5A:
				return 0x20;
			case 0x1DA5B:
				return 0x24;
			case 0x1DA5C:
				return 0x2D;
			case 0x1DA5D:
				return 0x28;
			case 0x1DA5E:
				return 0x27;
			case 0x1DA5F:
				return 0x27;
			case 0x1DA60:
				return 0x27;
			case 0x1DA61:
				return 0x12;
			case 0x1DA62:
				return 0x1B;
			case 0x1DA63:
				return 0x1C;
			case 0x1DA64:
				return 0x25;
			case 0x1DA65:
				return 0x1A;
			case 0x1DA66:
				return 0x23;
			case 0x1DA67:
				return 0x1C;
			case 0x1DA68:
				return 0x23;
			case 0x1DA69:
				return 0x24;
			case 0x1DA6A:
				return 0x11;
			case 0x1DA6B:
				return 0x11;
			case 0x1DA6C:
				return 0x17;
			case 0x1DA6D:
				return 0x1F;
			case 0x1DA6E:
				return 0x23;
			case 0x1DA6F:
				return 0x28;
			case 0x1DA70:
				return 0x29;
			case 0x1DA71:
				return 0x28;
			case 0x1DA72:
				return 0x2D;
			case 0x1DA73:
				return 0x28;
			case 0x1DA74:
				return 0x26;
			case 0x1DA75:
				return 0x2F;
			case 0x1DA76:
				return 0x1D;
			case 0x1DA77:
				return 0x1A;
			case 0x1DA78:
				return 0x1A;
			case 0x1DA79:
				return 0x1A;
			case 0x1DA7A:
				return 0x1A;
			case 0x1DA7B:
				return 0x1A;
			case 0x1DA7C:
				return 0x1A;
			case 0x1DA7D:
				return 0x1A;
			case 0x1DA7E:
				return 0x13;
			case 0x1DA7F:
				return 0x25;
			case 0x1DA80:
				return 0x26;
			case 0x1DA81:
				return 0x1C;
			case 0x1DA82:
				return 0x1B;
			case 0x1DA83:
				return 0x1B;
			case 0x1DA84:
				return 0x1F;
			case 0x1DA85:
				return 0x1B;
			case 0x1DA86:
				return 0x22;
			case 0x1DA87:
				return 0x12;
			case 0x1DA88:
				return 0x16;
			case 0x1DA89:
				return 0x16;
			case 0x1DA8A:
				return 0x12;
			case 0x1DA8B:
				return 0x18;
			case 0x1DA9B:
				return 0x1C;
			case 0x1DA9C:
				return 0x1C;
			case 0x1DA9D:
				return 0x1C;
			case 0x1DA9E:
				return 0x1C;
			case 0x1DA9F:
				return 0x1C;
			case 0x1DAA1:
				return 0x20;
			case 0x1DAA2:
				return 0x20;
			case 0x1DAA3:
				return 0x20;
			case 0x1DAA4:
				return 0x20;
			case 0x1DAA5:
				return 0x20;
			case 0x1DAA6:
				return 0x20;
			case 0x1DAA7:
				return 0x20;
			case 0x1DAA8:
				return 0x20;
			case 0x1DAA9:
				return 0x21;
			case 0x1DAAA:
				return 0x21;
			case 0x1DAAB:
				return 0x21;
			case 0x1DAAC:
				return 0x21;
			case 0x1DAAD:
				return 0x21;
			case 0x1DAAE:
				return 0x21;
			case 0x1DAAF:
				return 0x21;
			case 0x1E000:
				return 0x20;
			case 0x1E001:
				return 0x21;
			case 0x1E002:
				return 0x21;
			case 0x1E003:
				return 0x24;
			case 0x1E004:
				return 0x22;
			case 0x1E005:
				return 0x22;
			case 0x1E006:
				return 0x24;
			case 0x1E008:
				return 0x23;
			case 0x1E009:
				return 0x21;
			case 0x1E00A:
				return 0x29;
			case 0x1E00B:
				return 0x1E;
			case 0x1E00C:
				return 0x23;
			case 0x1E00D:
				return 0x21;
			case 0x1E00E:
				return 0x24;
			case 0x1E00F:
				return 0x24;
			case 0x1E010:
				return 0x22;
			case 0x1E011:
				return 0x20;
			case 0x1E012:
				return 0x23;
			case 0x1E013:
				return 0x22;
			case 0x1E014:
				return 0x22;
			case 0x1E015:
				return 0x23;
			case 0x1E016:
				return 0x20;
			case 0x1E017:
				return 0x22;
			case 0x1E018:
				return 0x21;
			case 0x1E01B:
				return 0x21;
			case 0x1E01C:
				return 0x20;
			case 0x1E01D:
				return 0x23;
			case 0x1E01E:
				return 0x20;
			case 0x1E01F:
				return 0x21;
			case 0x1E020:
				return 0x21;
			case 0x1E021:
				return 0x21;
			case 0x1E023:
				return 0x1F;
			case 0x1E024:
				return 0x26;
			case 0x1E026:
				return 0x1F;
			case 0x1E027:
				return 0x2E;
			case 0x1E028:
				return 0x24;
			case 0x1E029:
				return 0x2C;
			case 0x1E02A:
				return 0x21;
			case 0x1E100:
				return 0x21;
			case 0x1E101:
				return 0x22;
			case 0x1E102:
				return 0x22;
			case 0x1E103:
				return 0x21;
			case 0x1E104:
				return 0x21;
			case 0x1E105:
				return 0x21;
			case 0x1E106:
				return 0x21;
			case 0x1E107:
				return 0x22;
			case 0x1E108:
				return 0x21;
			case 0x1E109:
				return 0x21;
			case 0x1E10A:
				return 0x21;
			case 0x1E10B:
				return 0x21;
			case 0x1E10C:
				return 0x22;
			case 0x1E10D:
				return 0x23;
			case 0x1E10E:
				return 0x21;
			case 0x1E10F:
				return 0x21;
			case 0x1E110:
				return 0x22;
			case 0x1E111:
				return 0x22;
			case 0x1E112:
				return 0x21;
			case 0x1E113:
				return 0x23;
			case 0x1E114:
				return 0x22;
			case 0x1E115:
				return 0x21;
			case 0x1E116:
				return 0x21;
			case 0x1E117:
				return 0x21;
			case 0x1E118:
				return 0x21;
			case 0x1E119:
				return 0x22;
			case 0x1E11A:
				return 0x21;
			case 0x1E11B:
				return 0x22;
			case 0x1E11C:
				return 0x22;
			case 0x1E11D:
				return 0x22;
			case 0x1E11E:
				return 0x23;
			case 0x1E11F:
				return 0x22;
			case 0x1E120:
				return 0x22;
			case 0x1E121:
				return 0x22;
			case 0x1E122:
				return 0x21;
			case 0x1E123:
				return 0x22;
			case 0x1E124:
				return 0x20;
			case 0x1E125:
				return 0x21;
			case 0x1E126:
				return 0x20;
			case 0x1E127:
				return 0x20;
			case 0x1E128:
				return 0x20;
			case 0x1E129:
				return 0x21;
			case 0x1E12A:
				return 0x20;
			case 0x1E12B:
				return 0x21;
			case 0x1E12C:
				return 0x20;
			case 0x1E130:
				return 0x1E;
			case 0x1E131:
				return 0x1E;
			case 0x1E132:
				return 0x1E;
			case 0x1E133:
				return 0x1E;
			case 0x1E134:
				return 0x1E;
			case 0x1E135:
				return 0x1E;
			case 0x1E136:
				return 0x1E;
			case 0x1E137:
				return 0x27;
			case 0x1E138:
				return 0x26;
			case 0x1E139:
				return 0x29;
			case 0x1E13A:
				return 0x27;
			case 0x1E13B:
				return 0x2D;
			case 0x1E13C:
				return 0x22;
			case 0x1E13D:
				return 0x2B;
			case 0x1E140:
				return 0x22;
			case 0x1E141:
				return 0x21;
			case 0x1E142:
				return 0x21;
			case 0x1E143:
				return 0x23;
			case 0x1E144:
				return 0x22;
			case 0x1E145:
				return 0x22;
			case 0x1E146:
				return 0x21;
			case 0x1E147:
				return 0x23;
			case 0x1E148:
				return 0x23;
			case 0x1E149:
				return 0x22;
			case 0x1E14E:
				return 0x25;
			case 0x1E14F:
				return 0x22;
			case 0x1E2C0:
				return 0x11;
			case 0x1E2C1:
				return 0x10;
			case 0x1E2C2:
				return 0x11;
			case 0x1E2C3:
				return 0x11;
			case 0x1E2C4:
				return 0x11;
			case 0x1E2C5:
				return 0x11;
			case 0x1E2C6:
				return 0x11;
			case 0x1E2C7:
				return 0x12;
			case 0x1E2C8:
				return 0x11;
			case 0x1E2C9:
				return 0x11;
			case 0x1E2CA:
				return 0x11;
			case 0x1E2CB:
				return 0x11;
			case 0x1E2CC:
				return 0x12;
			case 0x1E2CD:
				return 0x11;
			case 0x1E2CE:
				return 0x11;
			case 0x1E2CF:
				return 0x12;
			case 0x1E2D0:
				return 0x11;
			case 0x1E2D1:
				return 0x11;
			case 0x1E2D2:
				return 0x11;
			case 0x1E2D3:
				return 0x11;
			case 0x1E2D4:
				return 0x11;
			case 0x1E2D5:
				return 0x10;
			case 0x1E2D6:
				return 0x11;
			case 0x1E2D7:
				return 0x11;
			case 0x1E2D8:
				return 0x11;
			case 0x1E2D9:
				return 0x12;
			case 0x1E2DA:
				return 0x11;
			case 0x1E2DB:
				return 0x10;
			case 0x1E2DC:
				return 0x10;
			case 0x1E2DD:
				return 0x12;
			case 0x1E2DE:
				return 0x10;
			case 0x1E2DF:
				return 0x13;
			case 0x1E2E0:
				return 0x12;
			case 0x1E2E1:
				return 0x12;
			case 0x1E2E2:
				return 0x12;
			case 0x1E2E3:
				return 0x13;
			case 0x1E2E4:
				return 0x12;
			case 0x1E2E5:
				return 0x12;
			case 0x1E2E6:
				return 0x11;
			case 0x1E2E7:
				return 0x11;
			case 0x1E2E8:
				return 0x12;
			case 0x1E2E9:
				return 0x12;
			case 0x1E2EA:
				return 0x12;
			case 0x1E2EB:
				return 0x12;
			case 0x1E2EC:
				return 0x10;
			case 0x1E2ED:
				return 0x12;
			case 0x1E2EE:
				return 0x10;
			case 0x1E2EF:
				return 0x12;
			case 0x1E2F0:
				return 0x12;
			case 0x1E2F1:
				return 0x11;
			case 0x1E2F2:
				return 0x11;
			case 0x1E2F3:
				return 0x13;
			case 0x1E2F4:
				return 0x12;
			case 0x1E2F5:
				return 0x12;
			case 0x1E2F6:
				return 0x11;
			case 0x1E2F7:
				return 0x13;
			case 0x1E2F8:
				return 0x13;
			case 0x1E2F9:
				return 0x12;
			case 0x1E2FF:
				return 0x11;
			case 0x1E800:
				return 0x1F;
			case 0x1E801:
				return 0x1F;
			case 0x1E802:
				return 0x1F;
			case 0x1E803:
				return 0x20;
			case 0x1E804:
				return 0x1F;
			case 0x1E805:
				return 0x20;
			case 0x1E806:
				return 0x1F;
			case 0x1E807:
				return 0x20;
			case 0x1E808:
				return 0x1F;
			case 0x1E809:
				return 0x1F;
			case 0x1E80A:
				return 0x1F;
			case 0x1E80B:
				return 0x20;
			case 0x1E80C:
				return 0x1F;
			case 0x1E80D:
				return 0x20;
			case 0x1E80E:
				return 0x1F;
			case 0x1E80F:
				return 0x20;
			case 0x1E810:
				return 0x20;
			case 0x1E811:
				return 0x20;
			case 0x1E812:
				return 0x20;
			case 0x1E813:
				return 0x20;
			case 0x1E814:
				return 0x20;
			case 0x1E815:
				return 0x20;
			case 0x1E816:
				return 0x20;
			case 0x1E817:
				return 0x20;
			case 0x1E818:
				return 0x20;
			case 0x1E819:
				return 0x21;
			case 0x1E81A:
				return 0x21;
			case 0x1E81B:
				return 0x1F;
			case 0x1E81C:
				return 0x1F;
			case 0x1E81D:
				return 0x1F;
			case 0x1E81E:
				return 0x20;
			case 0x1E81F:
				return 0x1F;
			case 0x1E820:
				return 0x20;
			case 0x1E821:
				return 0x1F;
			case 0x1E822:
				return 0x1E;
			case 0x1E823:
				return 0x1E;
			case 0x1E824:
				return 0x1E;
			case 0x1E825:
				return 0x1F;
			case 0x1E826:
				return 0x1E;
			case 0x1E827:
				return 0x1F;
			case 0x1E828:
				return 0x1E;
			case 0x1E829:
				return 0x1F;
			case 0x1E82A:
				return 0x1F;
			case 0x1E82B:
				return 0x1F;
			case 0x1E82C:
				return 0x1F;
			case 0x1E82D:
				return 0x1F;
			case 0x1E82E:
				return 0x1F;
			case 0x1E82F:
				return 0x1F;
			case 0x1E830:
				return 0x1F;
			case 0x1E831:
				return 0x20;
			case 0x1E832:
				return 0x1F;
			case 0x1E833:
				return 0x20;
			case 0x1E834:
				return 0x1F;
			case 0x1E835:
				return 0x20;
			case 0x1E836:
				return 0x1F;
			case 0x1E837:
				return 0x1F;
			case 0x1E838:
				return 0x1F;
			case 0x1E839:
				return 0x20;
			case 0x1E83A:
				return 0x1F;
			case 0x1E83B:
				return 0x20;
			case 0x1E83C:
				return 0x1F;
			case 0x1E83D:
				return 0x24;
			case 0x1E83E:
				return 0x1F;
			case 0x1E83F:
				return 0x1F;
			case 0x1E840:
				return 0x1F;
			case 0x1E841:
				return 0x20;
			case 0x1E842:
				return 0x20;
			case 0x1E843:
				return 0x1F;
			case 0x1E844:
				return 0x1F;
			case 0x1E845:
				return 0x1F;
			case 0x1E846:
				return 0x1F;
			case 0x1E847:
				return 0x20;
			case 0x1E848:
				return 0x1F;
			case 0x1E849:
				return 0x20;
			case 0x1E84A:
				return 0x1F;
			case 0x1E84B:
				return 0x1F;
			case 0x1E84C:
				return 0x1F;
			case 0x1E84D:
				return 0x1F;
			case 0x1E84E:
				return 0x20;
			case 0x1E84F:
				return 0x1F;
			case 0x1E850:
				return 0x20;
			case 0x1E851:
				return 0x1F;
			case 0x1E852:
				return 0x24;
			case 0x1E853:
				return 0x1F;
			case 0x1E854:
				return 0x1F;
			case 0x1E855:
				return 0x1F;
			case 0x1E856:
				return 0x20;
			case 0x1E857:
				return 0x1F;
			case 0x1E858:
				return 0x20;
			case 0x1E859:
				return 0x1F;
			case 0x1E85A:
				return 0x1F;
			case 0x1E85B:
				return 0x1F;
			case 0x1E85C:
				return 0x1F;
			case 0x1E85D:
				return 0x20;
			case 0x1E85E:
				return 0x1F;
			case 0x1E85F:
				return 0x20;
			case 0x1E860:
				return 0x1F;
			case 0x1E861:
				return 0x20;
			case 0x1E862:
				return 0x20;
			case 0x1E863:
				return 0x20;
			case 0x1E864:
				return 0x20;
			case 0x1E865:
				return 0x20;
			case 0x1E866:
				return 0x20;
			case 0x1E867:
				return 0x20;
			case 0x1E868:
				return 0x1F;
			case 0x1E869:
				return 0x1F;
			case 0x1E86A:
				return 0x1F;
			case 0x1E86B:
				return 0x20;
			case 0x1E86C:
				return 0x1F;
			case 0x1E86D:
				return 0x20;
			case 0x1E86E:
				return 0x1F;
			case 0x1E86F:
				return 0x21;
			case 0x1E870:
				return 0x21;
			case 0x1E871:
				return 0x20;
			case 0x1E872:
				return 0x20;
			case 0x1E873:
				return 0x20;
			case 0x1E874:
				return 0x20;
			case 0x1E875:
				return 0x20;
			case 0x1E876:
				return 0x21;
			case 0x1E877:
				return 0x21;
			case 0x1E878:
				return 0x21;
			case 0x1E879:
				return 0x21;
			case 0x1E87A:
				return 0x22;
			case 0x1E87B:
				return 0x21;
			case 0x1E87C:
				return 0x22;
			case 0x1E87D:
				return 0x21;
			case 0x1E87E:
				return 0x22;
			case 0x1E87F:
				return 0x22;
			case 0x1E880:
				return 0x26;
			case 0x1E881:
				return 0x27;
			case 0x1E882:
				return 0x26;
			case 0x1E883:
				return 0x1F;
			case 0x1E884:
				return 0x1F;
			case 0x1E885:
				return 0x1F;
			case 0x1E886:
				return 0x20;
			case 0x1E887:
				return 0x21;
			case 0x1E888:
				return 0x21;
			case 0x1E889:
				return 0x21;
			case 0x1E88A:
				return 0x21;
			case 0x1E88B:
				return 0x22;
			case 0x1E88C:
				return 0x1F;
			case 0x1E88D:
				return 0x1F;
			case 0x1E88E:
				return 0x1F;
			case 0x1E88F:
				return 0x20;
			case 0x1E890:
				return 0x1F;
			case 0x1E891:
				return 0x20;
			case 0x1E892:
				return 0x1F;
			case 0x1E893:
				return 0x20;
			case 0x1E894:
				return 0x20;
			case 0x1E895:
				return 0x20;
			case 0x1E896:
				return 0x21;
			case 0x1E897:
				return 0x21;
			case 0x1E898:
				return 0x20;
			case 0x1E899:
				return 0x21;
			case 0x1E89A:
				return 0x20;
			case 0x1E89B:
				return 0x21;
			case 0x1E89C:
				return 0x25;
			case 0x1E89D:
				return 0x26;
			case 0x1E89E:
				return 0x25;
			case 0x1E89F:
				return 0x20;
			case 0x1E8A0:
				return 0x20;
			case 0x1E8A1:
				return 0x20;
			case 0x1E8A2:
				return 0x21;
			case 0x1E8A3:
				return 0x20;
			case 0x1E8A4:
				return 0x21;
			case 0x1E8A5:
				return 0x20;
			case 0x1E8A6:
				return 0x20;
			case 0x1E8A7:
				return 0x20;
			case 0x1E8A8:
				return 0x20;
			case 0x1E8A9:
				return 0x21;
			case 0x1E8AA:
				return 0x20;
			case 0x1E8AB:
				return 0x21;
			case 0x1E8AC:
				return 0x20;
			case 0x1E8AD:
				return 0x1F;
			case 0x1E8AE:
				return 0x20;
			case 0x1E8AF:
				return 0x20;
			case 0x1E8B0:
				return 0x20;
			case 0x1E8B1:
				return 0x21;
			case 0x1E8B2:
				return 0x20;
			case 0x1E8B3:
				return 0x21;
			case 0x1E8B4:
				return 0x20;
			case 0x1E8B5:
				return 0x20;
			case 0x1E8B6:
				return 0x20;
			case 0x1E8B7:
				return 0x21;
			case 0x1E8B8:
				return 0x21;
			case 0x1E8B9:
				return 0x1F;
			case 0x1E8BA:
				return 0x1F;
			case 0x1E8BB:
				return 0x1F;
			case 0x1E8BC:
				return 0x20;
			case 0x1E8BD:
				return 0x1F;
			case 0x1E8BE:
				return 0x20;
			case 0x1E8BF:
				return 0x1F;
			case 0x1E8C0:
				return 0x21;
			case 0x1E8C1:
				return 0x21;
			case 0x1E8C2:
				return 0x21;
			case 0x1E8C3:
				return 0x21;
			case 0x1E8C4:
				return 0x21;
			case 0x1E8C7:
				return 0x18;
			case 0x1E8C8:
				return 0x18;
			case 0x1E8C9:
				return 0x1A;
			case 0x1E8CA:
				return 0x19;
			case 0x1E8CB:
				return 0x19;
			case 0x1E8CC:
				return 0x18;
			case 0x1E8CD:
				return 0x1A;
			case 0x1E8CE:
				return 0x1A;
			case 0x1E8CF:
				return 0x19;
			case 0x1E8D0:
				return 0x25;
			case 0x1E8D1:
				return 0x24;
			case 0x1E8D2:
				return 0x28;
			case 0x1E8D3:
				return 0x29;
			case 0x1E8D4:
				return 0x2D;
			case 0x1E8D5:
				return 0x31;
			case 0x1E8D6:
				return 0x28;
			case 0x1E900:
				return 0x1A;
			case 0x1E901:
				return 0x1B;
			case 0x1E902:
				return 0x1A;
			case 0x1E903:
				return 0x1A;
			case 0x1E904:
				return 0x18;
			case 0x1E905:
				return 0x20;
			case 0x1E906:
				return 0x18;
			case 0x1E907:
				return 0x19;
			case 0x1E908:
				return 0x18;
			case 0x1E909:
				return 0x17;
			case 0x1E90A:
				return 0x18;
			case 0x1E90B:
				return 0x17;
			case 0x1E90C:
				return 0x17;
			case 0x1E90D:
				return 0x19;
			case 0x1E90E:
				return 0x19;
			case 0x1E90F:
				return 0x19;
			case 0x1E910:
				return 0x19;
			case 0x1E911:
				return 0x19;
			case 0x1E912:
				return 0x18;
			case 0x1E913:
				return 0x17;
			case 0x1E914:
				return 0x1A;
			case 0x1E915:
				return 0x19;
			case 0x1E916:
				return 0x18;
			case 0x1E917:
				return 0x1A;
			case 0x1E918:
				return 0x18;
			case 0x1E919:
				return 0x19;
			case 0x1E91A:
				return 0x18;
			case 0x1E91B:
				return 0x19;
			case 0x1E91C:
				return 0x18;
			case 0x1E91D:
				return 0x19;
			case 0x1E91E:
				return 0x19;
			case 0x1E91F:
				return 0x19;
			case 0x1E920:
				return 0x19;
			case 0x1E921:
				return 0x19;
			case 0x1E922:
				return 0x18;
			case 0x1E923:
				return 0x19;
			case 0x1E924:
				return 0x18;
			case 0x1E925:
				return 0x18;
			case 0x1E926:
				return 0x16;
			case 0x1E927:
				return 0x1E;
			case 0x1E928:
				return 0x16;
			case 0x1E929:
				return 0x17;
			case 0x1E92A:
				return 0x16;
			case 0x1E92B:
				return 0x15;
			case 0x1E92C:
				return 0x16;
			case 0x1E92D:
				return 0x15;
			case 0x1E92E:
				return 0x15;
			case 0x1E92F:
				return 0x17;
			case 0x1E930:
				return 0x17;
			case 0x1E931:
				return 0x17;
			case 0x1E932:
				return 0x17;
			case 0x1E933:
				return 0x17;
			case 0x1E934:
				return 0x16;
			case 0x1E935:
				return 0x15;
			case 0x1E936:
				return 0x18;
			case 0x1E937:
				return 0x17;
			case 0x1E938:
				return 0x16;
			case 0x1E939:
				return 0x18;
			case 0x1E93A:
				return 0x16;
			case 0x1E93B:
				return 0x17;
			case 0x1E93C:
				return 0x16;
			case 0x1E93D:
				return 0x17;
			case 0x1E93E:
				return 0x16;
			case 0x1E93F:
				return 0x17;
			case 0x1E940:
				return 0x17;
			case 0x1E941:
				return 0x17;
			case 0x1E942:
				return 0x17;
			case 0x1E943:
				return 0x17;
			case 0x1E944:
				return 0x16;
			case 0x1E945:
				return 0x17;
			case 0x1E946:
				return 0x16;
			case 0x1E947:
				return 0xC;
			case 0x1E948:
				return 0x19;
			case 0x1E949:
				return 0x22;
			case 0x1E94A:
				return 0xC;
			case 0x1E94B:
				return 0x18;
			case 0x1E950:
				return 0x11;
			case 0x1E951:
				return 0x10;
			case 0x1E952:
				return 0x10;
			case 0x1E953:
				return 0x12;
			case 0x1E954:
				return 0x11;
			case 0x1E955:
				return 0x11;
			case 0x1E956:
				return 0x10;
			case 0x1E957:
				return 0x12;
			case 0x1E958:
				return 0x12;
			case 0x1E959:
				return 0x11;
			case 0x1E95E:
				return 0x1F;
			case 0x1E95F:
				return 0x1C;
			case 0x1EC71:
				return 0x17;
			case 0x1EC72:
				return 0x17;
			case 0x1EC73:
				return 0x19;
			case 0x1EC74:
				return 0x18;
			case 0x1EC75:
				return 0x18;
			case 0x1EC76:
				return 0x17;
			case 0x1EC77:
				return 0x19;
			case 0x1EC78:
				return 0x19;
			case 0x1EC79:
				return 0x18;
			case 0x1EC7A:
				return 0x17;
			case 0x1EC7B:
				return 0x1A;
			case 0x1EC7C:
				return 0x1A;
			case 0x1EC7D:
				return 0x19;
			case 0x1EC7E:
				return 0x19;
			case 0x1EC7F:
				return 0x19;
			case 0x1EC80:
				return 0x1B;
			case 0x1EC81:
				return 0x1A;
			case 0x1EC82:
				return 0x1A;
			case 0x1EC83:
				return 0x1F;
			case 0x1EC84:
				return 0x1F;
			case 0x1EC85:
				return 0x21;
			case 0x1EC86:
				return 0x20;
			case 0x1EC87:
				return 0x20;
			case 0x1EC88:
				return 0x1F;
			case 0x1EC89:
				return 0x21;
			case 0x1EC8A:
				return 0x21;
			case 0x1EC8B:
				return 0x20;
			case 0x1EC8C:
				return 0x20;
			case 0x1EC8D:
				return 0x20;
			case 0x1EC8E:
				return 0x22;
			case 0x1EC8F:
				return 0x21;
			case 0x1EC90:
				return 0x21;
			case 0x1EC91:
				return 0x20;
			case 0x1EC92:
				return 0x22;
			case 0x1EC93:
				return 0x22;
			case 0x1EC94:
				return 0x21;
			case 0x1EC95:
				return 0x20;
			case 0x1EC96:
				return 0x23;
			case 0x1EC97:
				return 0x23;
			case 0x1EC98:
				return 0x22;
			case 0x1EC99:
				return 0x22;
			case 0x1EC9A:
				return 0x22;
			case 0x1EC9B:
				return 0x24;
			case 0x1EC9C:
				return 0x23;
			case 0x1EC9D:
				return 0x23;
			case 0x1EC9E:
				return 0x18;
			case 0x1EC9F:
				return 0x1A;
			case 0x1ECA0:
				return 0x16;
			case 0x1ECA1:
				return 0x19;
			case 0x1ECA2:
				return 0x1B;
			case 0x1ECA3:
				return 0x20;
			case 0x1ECA4:
				return 0x20;
			case 0x1ECA5:
				return 0x22;
			case 0x1ECA6:
				return 0x21;
			case 0x1ECA7:
				return 0x21;
			case 0x1ECA8:
				return 0x20;
			case 0x1ECA9:
				return 0x22;
			case 0x1ECAA:
				return 0x22;
			case 0x1ECAB:
				return 0x21;
			case 0x1ECAC:
				return 0x18;
			case 0x1ECAD:
				return 0x21;
			case 0x1ECAE:
				return 0x1E;
			case 0x1ECAF:
				return 0x24;
			case 0x1ECB0:
				return 0x17;
			case 0x1ECB1:
				return 0x21;
			case 0x1ECB2:
				return 0x21;
			case 0x1ECB3:
				return 0x2A;
			case 0x1ECB4:
				return 0x20;
			case 0x1ED01:
				return 0x19;
			case 0x1ED02:
				return 0x19;
			case 0x1ED03:
				return 0x1B;
			case 0x1ED04:
				return 0x1A;
			case 0x1ED05:
				return 0x1A;
			case 0x1ED06:
				return 0x19;
			case 0x1ED07:
				return 0x1B;
			case 0x1ED08:
				return 0x1B;
			case 0x1ED09:
				return 0x1A;
			case 0x1ED0A:
				return 0x19;
			case 0x1ED0B:
				return 0x1C;
			case 0x1ED0C:
				return 0x1C;
			case 0x1ED0D:
				return 0x1B;
			case 0x1ED0E:
				return 0x1B;
			case 0x1ED0F:
				return 0x1B;
			case 0x1ED10:
				return 0x1D;
			case 0x1ED11:
				return 0x1C;
			case 0x1ED12:
				return 0x1C;
			case 0x1ED13:
				return 0x21;
			case 0x1ED14:
				return 0x21;
			case 0x1ED15:
				return 0x23;
			case 0x1ED16:
				return 0x22;
			case 0x1ED17:
				return 0x22;
			case 0x1ED18:
				return 0x21;
			case 0x1ED19:
				return 0x23;
			case 0x1ED1A:
				return 0x23;
			case 0x1ED1B:
				return 0x22;
			case 0x1ED1C:
				return 0x22;
			case 0x1ED1D:
				return 0x22;
			case 0x1ED1E:
				return 0x24;
			case 0x1ED1F:
				return 0x23;
			case 0x1ED20:
				return 0x23;
			case 0x1ED21:
				return 0x22;
			case 0x1ED22:
				return 0x24;
			case 0x1ED23:
				return 0x24;
			case 0x1ED24:
				return 0x23;
			case 0x1ED25:
				return 0x22;
			case 0x1ED26:
				return 0x25;
			case 0x1ED27:
				return 0x25;
			case 0x1ED28:
				return 0x24;
			case 0x1ED29:
				return 0x24;
			case 0x1ED2A:
				return 0x24;
			case 0x1ED2B:
				return 0x26;
			case 0x1ED2C:
				return 0x25;
			case 0x1ED2D:
				return 0x25;
			case 0x1ED2E:
				return 0x17;
			case 0x1ED2F:
				return 0x23;
			case 0x1ED30:
				return 0x25;
			case 0x1ED31:
				return 0x24;
			case 0x1ED32:
				return 0x24;
			case 0x1ED33:
				return 0x23;
			case 0x1ED34:
				return 0x25;
			case 0x1ED35:
				return 0x25;
			case 0x1ED36:
				return 0x24;
			case 0x1ED37:
				return 0x23;
			case 0x1ED38:
				return 0x2C;
			case 0x1ED39:
				return 0x2B;
			case 0x1ED3A:
				return 0x2C;
			case 0x1ED3B:
				return 0x2C;
			case 0x1ED3C:
				return 0x20;
			case 0x1ED3D:
				return 0x21;
			case 0x1EE00:
				return 0x19;
			case 0x1EE01:
				return 0x18;
			case 0x1EE02:
				return 0x19;
			case 0x1EE03:
				return 0x18;
			case 0x1EE05:
				return 0x18;
			case 0x1EE06:
				return 0x19;
			case 0x1EE07:
				return 0x18;
			case 0x1EE08:
				return 0x18;
			case 0x1EE09:
				return 0x18;
			case 0x1EE0A:
				return 0x18;
			case 0x1EE0B:
				return 0x18;
			case 0x1EE0C:
				return 0x19;
			case 0x1EE0D:
				return 0x19;
			case 0x1EE0E:
				return 0x19;
			case 0x1EE0F:
				return 0x18;
			case 0x1EE10:
				return 0x18;
			case 0x1EE11:
				return 0x18;
			case 0x1EE12:
				return 0x18;
			case 0x1EE13:
				return 0x18;
			case 0x1EE14:
				return 0x1A;
			case 0x1EE15:
				return 0x18;
			case 0x1EE16:
				return 0x19;
			case 0x1EE17:
				return 0x19;
			case 0x1EE18:
				return 0x19;
			case 0x1EE19:
				return 0x18;
			case 0x1EE1A:
				return 0x18;
			case 0x1EE1B:
				return 0x1A;
			case 0x1EE1C:
				return 0x20;
			case 0x1EE1D:
				return 0x21;
			case 0x1EE1E:
				return 0x20;
			case 0x1EE1F:
				return 0x20;
			case 0x1EE21:
				return 0x20;
			case 0x1EE22:
				return 0x21;
			case 0x1EE24:
				return 0x20;
			case 0x1EE27:
				return 0x20;
			case 0x1EE29:
				return 0x20;
			case 0x1EE2A:
				return 0x20;
			case 0x1EE2B:
				return 0x20;
			case 0x1EE2C:
				return 0x21;
			case 0x1EE2D:
				return 0x21;
			case 0x1EE2E:
				return 0x21;
			case 0x1EE2F:
				return 0x20;
			case 0x1EE30:
				return 0x20;
			case 0x1EE31:
				return 0x20;
			case 0x1EE32:
				return 0x20;
			case 0x1EE34:
				return 0x22;
			case 0x1EE35:
				return 0x20;
			case 0x1EE36:
				return 0x21;
			case 0x1EE37:
				return 0x21;
			case 0x1EE39:
				return 0x20;
			case 0x1EE3B:
				return 0x22;
			case 0x1EE42:
				return 0x20;
			case 0x1EE47:
				return 0x1F;
			case 0x1EE49:
				return 0x1F;
			case 0x1EE4B:
				return 0x1F;
			case 0x1EE4D:
				return 0x20;
			case 0x1EE4E:
				return 0x20;
			case 0x1EE4F:
				return 0x1F;
			case 0x1EE51:
				return 0x1F;
			case 0x1EE52:
				return 0x1F;
			case 0x1EE54:
				return 0x21;
			case 0x1EE57:
				return 0x20;
			case 0x1EE59:
				return 0x1F;
			case 0x1EE5B:
				return 0x21;
			case 0x1EE5D:
				return 0x28;
			case 0x1EE5F:
				return 0x27;
			case 0x1EE61:
				return 0x22;
			case 0x1EE62:
				return 0x23;
			case 0x1EE64:
				return 0x22;
			case 0x1EE67:
				return 0x22;
			case 0x1EE68:
				return 0x22;
			case 0x1EE69:
				return 0x22;
			case 0x1EE6A:
				return 0x22;
			case 0x1EE6C:
				return 0x23;
			case 0x1EE6D:
				return 0x23;
			case 0x1EE6E:
				return 0x23;
			case 0x1EE6F:
				return 0x22;
			case 0x1EE70:
				return 0x22;
			case 0x1EE71:
				return 0x22;
			case 0x1EE72:
				return 0x22;
			case 0x1EE74:
				return 0x24;
			case 0x1EE75:
				return 0x22;
			case 0x1EE76:
				return 0x23;
			case 0x1EE77:
				return 0x23;
			case 0x1EE79:
				return 0x22;
			case 0x1EE7A:
				return 0x22;
			case 0x1EE7B:
				return 0x24;
			case 0x1EE7C:
				return 0x2A;
			case 0x1EE7E:
				return 0x2A;
			case 0x1EE80:
				return 0x20;
			case 0x1EE81:
				return 0x1F;
			case 0x1EE82:
				return 0x20;
			case 0x1EE83:
				return 0x1F;
			case 0x1EE84:
				return 0x1F;
			case 0x1EE85:
				return 0x1F;
			case 0x1EE86:
				return 0x20;
			case 0x1EE87:
				return 0x1F;
			case 0x1EE88:
				return 0x1F;
			case 0x1EE89:
				return 0x1F;
			case 0x1EE8B:
				return 0x1F;
			case 0x1EE8C:
				return 0x20;
			case 0x1EE8D:
				return 0x20;
			case 0x1EE8E:
				return 0x20;
			case 0x1EE8F:
				return 0x1F;
			case 0x1EE90:
				return 0x1F;
			case 0x1EE91:
				return 0x1F;
			case 0x1EE92:
				return 0x1F;
			case 0x1EE93:
				return 0x1F;
			case 0x1EE94:
				return 0x21;
			case 0x1EE95:
				return 0x1F;
			case 0x1EE96:
				return 0x20;
			case 0x1EE97:
				return 0x20;
			case 0x1EE98:
				return 0x20;
			case 0x1EE99:
				return 0x1F;
			case 0x1EE9A:
				return 0x1F;
			case 0x1EE9B:
				return 0x21;
			case 0x1EEA1:
				return 0x26;
			case 0x1EEA2:
				return 0x27;
			case 0x1EEA3:
				return 0x26;
			case 0x1EEA5:
				return 0x26;
			case 0x1EEA6:
				return 0x27;
			case 0x1EEA7:
				return 0x26;
			case 0x1EEA8:
				return 0x26;
			case 0x1EEA9:
				return 0x26;
			case 0x1EEAB:
				return 0x26;
			case 0x1EEAC:
				return 0x27;
			case 0x1EEAD:
				return 0x27;
			case 0x1EEAE:
				return 0x27;
			case 0x1EEAF:
				return 0x26;
			case 0x1EEB0:
				return 0x26;
			case 0x1EEB1:
				return 0x26;
			case 0x1EEB2:
				return 0x26;
			case 0x1EEB3:
				return 0x26;
			case 0x1EEB4:
				return 0x28;
			case 0x1EEB5:
				return 0x26;
			case 0x1EEB6:
				return 0x27;
			case 0x1EEB7:
				return 0x27;
			case 0x1EEB8:
				return 0x27;
			case 0x1EEB9:
				return 0x26;
			case 0x1EEBA:
				return 0x26;
			case 0x1EEBB:
				return 0x28;
			case 0x1EEF0:
				return 0x38;
			case 0x1EEF1:
				return 0x2A;
			case 0x1F000:
				return 0x17;
			case 0x1F001:
				return 0x18;
			case 0x1F002:
				return 0x17;
			case 0x1F003:
				return 0x18;
			case 0x1F004:
				return 0x18;
			case 0x1F005:
				return 0x1A;
			case 0x1F006:
				return 0x1A;
			case 0x1F007:
				return 0x1F;
			case 0x1F008:
				return 0x1F;
			case 0x1F009:
				return 0x21;
			case 0x1F00A:
				return 0x20;
			case 0x1F00B:
				return 0x20;
			case 0x1F00C:
				return 0x1F;
			case 0x1F00D:
				return 0x21;
			case 0x1F00E:
				return 0x21;
			case 0x1F00F:
				return 0x20;
			case 0x1F010:
				return 0x1C;
			case 0x1F011:
				return 0x1C;
			case 0x1F012:
				return 0x1E;
			case 0x1F013:
				return 0x1D;
			case 0x1F014:
				return 0x1D;
			case 0x1F015:
				return 0x1C;
			case 0x1F016:
				return 0x1E;
			case 0x1F017:
				return 0x1E;
			case 0x1F018:
				return 0x1D;
			case 0x1F019:
				return 0x1C;
			case 0x1F01A:
				return 0x1C;
			case 0x1F01B:
				return 0x1E;
			case 0x1F01C:
				return 0x1D;
			case 0x1F01D:
				return 0x1D;
			case 0x1F01E:
				return 0x1C;
			case 0x1F01F:
				return 0x1E;
			case 0x1F020:
				return 0x1E;
			case 0x1F021:
				return 0x1D;
			case 0x1F022:
				return 0x12;
			case 0x1F023:
				return 0x14;
			case 0x1F024:
				return 0x14;
			case 0x1F025:
				return 0x1B;
			case 0x1F026:
				return 0x14;
			case 0x1F027:
				return 0x14;
			case 0x1F028:
				return 0x14;
			case 0x1F029:
				return 0x14;
			case 0x1F02A:
				return 0x13;
			case 0x1F02B:
				return 0x12;
			case 0x1F030:
				return 0x1C;
			case 0x1F031:
				return 0x1D;
			case 0x1F032:
				return 0x1D;
			case 0x1F033:
				return 0x1D;
			case 0x1F034:
				return 0x1D;
			case 0x1F035:
				return 0x1D;
			case 0x1F036:
				return 0x1D;
			case 0x1F037:
				return 0x1D;
			case 0x1F038:
				return 0x1D;
			case 0x1F039:
				return 0x1D;
			case 0x1F03A:
				return 0x1D;
			case 0x1F03B:
				return 0x1D;
			case 0x1F03C:
				return 0x1D;
			case 0x1F03D:
				return 0x1D;
			case 0x1F03E:
				return 0x1D;
			case 0x1F03F:
				return 0x1D;
			case 0x1F040:
				return 0x1D;
			case 0x1F041:
				return 0x1D;
			case 0x1F042:
				return 0x1D;
			case 0x1F043:
				return 0x1D;
			case 0x1F044:
				return 0x1D;
			case 0x1F045:
				return 0x1D;
			case 0x1F046:
				return 0x1D;
			case 0x1F047:
				return 0x1D;
			case 0x1F048:
				return 0x1D;
			case 0x1F049:
				return 0x1D;
			case 0x1F04A:
				return 0x1D;
			case 0x1F04B:
				return 0x1D;
			case 0x1F04C:
				return 0x1D;
			case 0x1F04D:
				return 0x1D;
			case 0x1F04E:
				return 0x1D;
			case 0x1F04F:
				return 0x1D;
			case 0x1F050:
				return 0x1D;
			case 0x1F051:
				return 0x1D;
			case 0x1F052:
				return 0x1D;
			case 0x1F053:
				return 0x1D;
			case 0x1F054:
				return 0x1D;
			case 0x1F055:
				return 0x1D;
			case 0x1F056:
				return 0x1D;
			case 0x1F057:
				return 0x1D;
			case 0x1F058:
				return 0x1D;
			case 0x1F059:
				return 0x1D;
			case 0x1F05A:
				return 0x1D;
			case 0x1F05B:
				return 0x1D;
			case 0x1F05C:
				return 0x1D;
			case 0x1F05D:
				return 0x1D;
			case 0x1F05E:
				return 0x1D;
			case 0x1F05F:
				return 0x1D;
			case 0x1F060:
				return 0x1D;
			case 0x1F061:
				return 0x1D;
			case 0x1F062:
				return 0x1A;
			case 0x1F063:
				return 0x1B;
			case 0x1F064:
				return 0x1B;
			case 0x1F065:
				return 0x1B;
			case 0x1F066:
				return 0x1B;
			case 0x1F067:
				return 0x1B;
			case 0x1F068:
				return 0x1B;
			case 0x1F069:
				return 0x1B;
			case 0x1F06A:
				return 0x1B;
			case 0x1F06B:
				return 0x1B;
			case 0x1F06C:
				return 0x1B;
			case 0x1F06D:
				return 0x1B;
			case 0x1F06E:
				return 0x1B;
			case 0x1F06F:
				return 0x1B;
			case 0x1F070:
				return 0x1B;
			case 0x1F071:
				return 0x1B;
			case 0x1F072:
				return 0x1B;
			case 0x1F073:
				return 0x1B;
			case 0x1F074:
				return 0x1B;
			case 0x1F075:
				return 0x1B;
			case 0x1F076:
				return 0x1B;
			case 0x1F077:
				return 0x1B;
			case 0x1F078:
				return 0x1B;
			case 0x1F079:
				return 0x1B;
			case 0x1F07A:
				return 0x1B;
			case 0x1F07B:
				return 0x1B;
			case 0x1F07C:
				return 0x1B;
			case 0x1F07D:
				return 0x1B;
			case 0x1F07E:
				return 0x1B;
			case 0x1F07F:
				return 0x1B;
			case 0x1F080:
				return 0x1B;
			case 0x1F081:
				return 0x1B;
			case 0x1F082:
				return 0x1B;
			case 0x1F083:
				return 0x1B;
			case 0x1F084:
				return 0x1B;
			case 0x1F085:
				return 0x1B;
			case 0x1F086:
				return 0x1B;
			case 0x1F087:
				return 0x1B;
			case 0x1F088:
				return 0x1B;
			case 0x1F089:
				return 0x1B;
			case 0x1F08A:
				return 0x1B;
			case 0x1F08B:
				return 0x1B;
			case 0x1F08C:
				return 0x1B;
			case 0x1F08D:
				return 0x1B;
			case 0x1F08E:
				return 0x1B;
			case 0x1F08F:
				return 0x1B;
			case 0x1F090:
				return 0x1B;
			case 0x1F091:
				return 0x1B;
			case 0x1F092:
				return 0x1B;
			case 0x1F093:
				return 0x1B;
			case 0x1F0A0:
				return 0x12;
			case 0x1F0A1:
				return 0x1B;
			case 0x1F0A2:
				return 0x1B;
			case 0x1F0A3:
				return 0x1D;
			case 0x1F0A4:
				return 0x1C;
			case 0x1F0A5:
				return 0x1C;
			case 0x1F0A6:
				return 0x1B;
			case 0x1F0A7:
				return 0x1D;
			case 0x1F0A8:
				return 0x1D;
			case 0x1F0A9:
				return 0x1C;
			case 0x1F0AA:
				return 0x1B;
			case 0x1F0AB:
				return 0x1C;
			case 0x1F0AC:
				return 0x1E;
			case 0x1F0AD:
				return 0x1D;
			case 0x1F0AE:
				return 0x1C;
			case 0x1F0B1:
				return 0x1B;
			case 0x1F0B2:
				return 0x1B;
			case 0x1F0B3:
				return 0x1D;
			case 0x1F0B4:
				return 0x1C;
			case 0x1F0B5:
				return 0x1C;
			case 0x1F0B6:
				return 0x1B;
			case 0x1F0B7:
				return 0x1D;
			case 0x1F0B8:
				return 0x1D;
			case 0x1F0B9:
				return 0x1C;
			case 0x1F0BA:
				return 0x1B;
			case 0x1F0BB:
				return 0x1C;
			case 0x1F0BC:
				return 0x1E;
			case 0x1F0BD:
				return 0x1D;
			case 0x1F0BE:
				return 0x1C;
			case 0x1F0BF:
				return 0x17;
			case 0x1F0C1:
				return 0x1D;
			case 0x1F0C2:
				return 0x1D;
			case 0x1F0C3:
				return 0x1F;
			case 0x1F0C4:
				return 0x1E;
			case 0x1F0C5:
				return 0x1E;
			case 0x1F0C6:
				return 0x1D;
			case 0x1F0C7:
				return 0x1F;
			case 0x1F0C8:
				return 0x1F;
			case 0x1F0C9:
				return 0x1E;
			case 0x1F0CA:
				return 0x1D;
			case 0x1F0CB:
				return 0x1E;
			case 0x1F0CC:
				return 0x20;
			case 0x1F0CD:
				return 0x1F;
			case 0x1F0CE:
				return 0x1E;
			case 0x1F0CF:
				return 0x19;
			case 0x1F0D1:
				return 0x1A;
			case 0x1F0D2:
				return 0x1A;
			case 0x1F0D3:
				return 0x1C;
			case 0x1F0D4:
				return 0x1B;
			case 0x1F0D5:
				return 0x1B;
			case 0x1F0D6:
				return 0x1A;
			case 0x1F0D7:
				return 0x1C;
			case 0x1F0D8:
				return 0x1C;
			case 0x1F0D9:
				return 0x1B;
			case 0x1F0DA:
				return 0x1A;
			case 0x1F0DB:
				return 0x1B;
			case 0x1F0DC:
				return 0x1D;
			case 0x1F0DD:
				return 0x1C;
			case 0x1F0DE:
				return 0x1B;
			case 0x1F0DF:
				return 0x19;
			case 0x1F0E0:
				return 0x12;
			case 0x1F0E1:
				return 0x15;
			case 0x1F0E2:
				return 0x15;
			case 0x1F0E3:
				return 0x15;
			case 0x1F0E4:
				return 0x15;
			case 0x1F0E5:
				return 0x15;
			case 0x1F0E6:
				return 0x15;
			case 0x1F0E7:
				return 0x15;
			case 0x1F0E8:
				return 0x15;
			case 0x1F0E9:
				return 0x15;
			case 0x1F0EA:
				return 0x16;
			case 0x1F0EB:
				return 0x16;
			case 0x1F0EC:
				return 0x16;
			case 0x1F0ED:
				return 0x16;
			case 0x1F0EE:
				return 0x16;
			case 0x1F0EF:
				return 0x16;
			case 0x1F0F0:
				return 0x16;
			case 0x1F0F1:
				return 0x16;
			case 0x1F0F2:
				return 0x16;
			case 0x1F0F3:
				return 0x16;
			case 0x1F0F4:
				return 0x16;
			case 0x1F0F5:
				return 0x16;
			case 0x1F100:
				return 0x15;
			case 0x1F101:
				return 0x11;
			case 0x1F102:
				return 0x10;
			case 0x1F103:
				return 0x10;
			case 0x1F104:
				return 0x12;
			case 0x1F105:
				return 0x11;
			case 0x1F106:
				return 0x11;
			case 0x1F107:
				return 0x10;
			case 0x1F108:
				return 0x12;
			case 0x1F109:
				return 0x12;
			case 0x1F10A:
				return 0x11;
			case 0x1F10B:
				return 0x26;
			case 0x1F10C:
				return 0x2F;
			case 0x1F10D:
				return 0x18;
			case 0x1F10E:
				return 0x1C;
			case 0x1F10F:
				return 0x2C;
			case 0x1F110:
				return 0x25;
			case 0x1F111:
				return 0x25;
			case 0x1F112:
				return 0x25;
			case 0x1F113:
				return 0x25;
			case 0x1F114:
				return 0x25;
			case 0x1F115:
				return 0x25;
			case 0x1F116:
				return 0x25;
			case 0x1F117:
				return 0x25;
			case 0x1F118:
				return 0x25;
			case 0x1F119:
				return 0x25;
			case 0x1F11A:
				return 0x25;
			case 0x1F11B:
				return 0x25;
			case 0x1F11C:
				return 0x25;
			case 0x1F11D:
				return 0x25;
			case 0x1F11E:
				return 0x25;
			case 0x1F11F:
				return 0x25;
			case 0x1F120:
				return 0x25;
			case 0x1F121:
				return 0x25;
			case 0x1F122:
				return 0x25;
			case 0x1F123:
				return 0x25;
			case 0x1F124:
				return 0x25;
			case 0x1F125:
				return 0x25;
			case 0x1F126:
				return 0x25;
			case 0x1F127:
				return 0x25;
			case 0x1F128:
				return 0x25;
			case 0x1F129:
				return 0x25;
			case 0x1F12A:
				return 0x30;
			case 0x1F12B:
				return 0x26;
			case 0x1F12C:
				return 0x26;
			case 0x1F12D:
				return 0xB;
			case 0x1F12E:
				return 0xB;
			case 0x1F12F:
				return 0x10;
			case 0x1F130:
				return 0x1F;
			case 0x1F131:
				return 0x1F;
			case 0x1F132:
				return 0x1F;
			case 0x1F133:
				return 0x1F;
			case 0x1F134:
				return 0x1F;
			case 0x1F135:
				return 0x1F;
			case 0x1F136:
				return 0x1F;
			case 0x1F137:
				return 0x1F;
			case 0x1F138:
				return 0x1F;
			case 0x1F139:
				return 0x1F;
			case 0x1F13A:
				return 0x1F;
			case 0x1F13B:
				return 0x1F;
			case 0x1F13C:
				return 0x1F;
			case 0x1F13D:
				return 0x1F;
			case 0x1F13E:
				return 0x1F;
			case 0x1F13F:
				return 0x1F;
			case 0x1F140:
				return 0x1F;
			case 0x1F141:
				return 0x1F;
			case 0x1F142:
				return 0x1F;
			case 0x1F143:
				return 0x1F;
			case 0x1F144:
				return 0x1F;
			case 0x1F145:
				return 0x1F;
			case 0x1F146:
				return 0x1F;
			case 0x1F147:
				return 0x1F;
			case 0x1F148:
				return 0x1F;
			case 0x1F149:
				return 0x1F;
			case 0x1F14A:
				return 0xB;
			case 0x1F14B:
				return 0xB;
			case 0x1F14C:
				return 0xB;
			case 0x1F14D:
				return 0xB;
			case 0x1F14E:
				return 0xC;
			case 0x1F14F:
				return 0xB;
			case 0x1F150:
				return 0x28;
			case 0x1F151:
				return 0x28;
			case 0x1F152:
				return 0x28;
			case 0x1F153:
				return 0x28;
			case 0x1F154:
				return 0x28;
			case 0x1F155:
				return 0x28;
			case 0x1F156:
				return 0x28;
			case 0x1F157:
				return 0x28;
			case 0x1F158:
				return 0x28;
			case 0x1F159:
				return 0x28;
			case 0x1F15A:
				return 0x28;
			case 0x1F15B:
				return 0x28;
			case 0x1F15C:
				return 0x28;
			case 0x1F15D:
				return 0x28;
			case 0x1F15E:
				return 0x28;
			case 0x1F15F:
				return 0x28;
			case 0x1F160:
				return 0x28;
			case 0x1F161:
				return 0x28;
			case 0x1F162:
				return 0x28;
			case 0x1F163:
				return 0x28;
			case 0x1F164:
				return 0x28;
			case 0x1F165:
				return 0x28;
			case 0x1F166:
				return 0x28;
			case 0x1F167:
				return 0x28;
			case 0x1F168:
				return 0x28;
			case 0x1F169:
				return 0x28;
			case 0x1F16A:
				return 0xF;
			case 0x1F16B:
				return 0xF;
			case 0x1F16C:
				return 0xF;
			case 0x1F16D:
				return 0xB;
			case 0x1F16E:
				return 0x22;
			case 0x1F16F:
				return 0x15;
			case 0x1F170:
				return 0x28;
			case 0x1F171:
				return 0x28;
			case 0x1F172:
				return 0x28;
			case 0x1F173:
				return 0x28;
			case 0x1F174:
				return 0x28;
			case 0x1F175:
				return 0x28;
			case 0x1F176:
				return 0x28;
			case 0x1F177:
				return 0x28;
			case 0x1F178:
				return 0x28;
			case 0x1F179:
				return 0x28;
			case 0x1F17A:
				return 0x28;
			case 0x1F17B:
				return 0x28;
			case 0x1F17C:
				return 0x28;
			case 0x1F17D:
				return 0x28;
			case 0x1F17E:
				return 0x28;
			case 0x1F17F:
				return 0x28;
			case 0x1F180:
				return 0x28;
			case 0x1F181:
				return 0x28;
			case 0x1F182:
				return 0x28;
			case 0x1F183:
				return 0x28;
			case 0x1F184:
				return 0x28;
			case 0x1F185:
				return 0x28;
			case 0x1F186:
				return 0x28;
			case 0x1F187:
				return 0x28;
			case 0x1F188:
				return 0x28;
			case 0x1F189:
				return 0x28;
			case 0x1F18A:
				return 0x30;
			case 0x1F18B:
				return 0x14;
			case 0x1F18C:
				return 0x14;
			case 0x1F18D:
				return 0x14;
			case 0x1F18E:
				return 0x14;
			case 0x1F18F:
				return 0x14;
			case 0x1F190:
				return 0xA;
			case 0x1F191:
				return 0xB;
			case 0x1F192:
				return 0xD;
			case 0x1F193:
				return 0xD;
			case 0x1F194:
				return 0xB;
			case 0x1F195:
				return 0xC;
			case 0x1F196:
				return 0xB;
			case 0x1F197:
				return 0xB;
			case 0x1F198:
				return 0xC;
			case 0x1F199:
				return 0x21;
			case 0x1F19A:
				return 0xB;
			case 0x1F19B:
				return 0x10;
			case 0x1F19C:
				return 0x16;
			case 0x1F19D:
				return 0xE;
			case 0x1F19E:
				return 0xF;
			case 0x1F19F:
				return 0x10;
			case 0x1F1A0:
				return 0x17;
			case 0x1F1A1:
				return 0x18;
			case 0x1F1A2:
				return 0x1D;
			case 0x1F1A3:
				return 0x10;
			case 0x1F1A4:
				return 0x1D;
			case 0x1F1A5:
				return 0x1D;
			case 0x1F1A6:
				return 0xB;
			case 0x1F1A7:
				return 0xC;
			case 0x1F1A8:
				return 0xF;
			case 0x1F1A9:
				return 0x11;
			case 0x1F1AA:
				return 0xC;
			case 0x1F1AB:
				return 0xC;
			case 0x1F1AC:
				return 0xC;
			case 0x1F1AD:
				return 0x11;
			case 0x1F1E6:
				return 0x23;
			case 0x1F1E7:
				return 0x23;
			case 0x1F1E8:
				return 0x23;
			case 0x1F1E9:
				return 0x23;
			case 0x1F1EA:
				return 0x23;
			case 0x1F1EB:
				return 0x23;
			case 0x1F1EC:
				return 0x23;
			case 0x1F1ED:
				return 0x23;
			case 0x1F1EE:
				return 0x23;
			case 0x1F1EF:
				return 0x23;
			case 0x1F1F0:
				return 0x23;
			case 0x1F1F1:
				return 0x23;
			case 0x1F1F2:
				return 0x23;
			case 0x1F1F3:
				return 0x23;
			case 0x1F1F4:
				return 0x23;
			case 0x1F1F5:
				return 0x23;
			case 0x1F1F6:
				return 0x23;
			case 0x1F1F7:
				return 0x23;
			case 0x1F1F8:
				return 0x23;
			case 0x1F1F9:
				return 0x23;
			case 0x1F1FA:
				return 0x23;
			case 0x1F1FB:
				return 0x23;
			case 0x1F1FC:
				return 0x23;
			case 0x1F1FD:
				return 0x23;
			case 0x1F1FE:
				return 0x23;
			case 0x1F1FF:
				return 0x23;
			case 0x1F200:
				return 0x15;
			case 0x1F201:
				return 0x16;
			case 0x1F202:
				return 0x14;
			case 0x1F210:
				return 0x23;
			case 0x1F211:
				return 0x23;
			case 0x1F212:
				return 0x23;
			case 0x1F213:
				return 0x14;
			case 0x1F214:
				return 0x23;
			case 0x1F215:
				return 0x23;
			case 0x1F216:
				return 0x23;
			case 0x1F217:
				return 0x23;
			case 0x1F218:
				return 0x23;
			case 0x1F219:
				return 0x23;
			case 0x1F21A:
				return 0x23;
			case 0x1F21B:
				return 0x23;
			case 0x1F21C:
				return 0x23;
			case 0x1F21D:
				return 0x23;
			case 0x1F21E:
				return 0x23;
			case 0x1F21F:
				return 0x23;
			case 0x1F220:
				return 0x23;
			case 0x1F221:
				return 0x23;
			case 0x1F222:
				return 0x23;
			case 0x1F223:
				return 0x23;
			case 0x1F224:
				return 0x23;
			case 0x1F225:
				return 0x23;
			case 0x1F226:
				return 0x23;
			case 0x1F227:
				return 0x23;
			case 0x1F228:
				return 0x23;
			case 0x1F229:
				return 0x23;
			case 0x1F22A:
				return 0x23;
			case 0x1F22B:
				return 0x23;
			case 0x1F22C:
				return 0x23;
			case 0x1F22D:
				return 0x23;
			case 0x1F22E:
				return 0x23;
			case 0x1F22F:
				return 0x23;
			case 0x1F230:
				return 0x23;
			case 0x1F231:
				return 0x23;
			case 0x1F232:
				return 0x23;
			case 0x1F233:
				return 0x23;
			case 0x1F234:
				return 0x23;
			case 0x1F235:
				return 0x23;
			case 0x1F236:
				return 0x23;
			case 0x1F237:
				return 0x23;
			case 0x1F238:
				return 0x23;
			case 0x1F239:
				return 0x23;
			case 0x1F23A:
				return 0x23;
			case 0x1F23B:
				return 0x23;
			case 0x1F240:
				return 0x34;
			case 0x1F241:
				return 0x34;
			case 0x1F242:
				return 0x34;
			case 0x1F243:
				return 0x34;
			case 0x1F244:
				return 0x34;
			case 0x1F245:
				return 0x34;
			case 0x1F246:
				return 0x34;
			case 0x1F247:
				return 0x34;
			case 0x1F248:
				return 0x34;
			case 0x1F250:
				return 0x1C;
			case 0x1F251:
				return 0x19;
			case 0x1F260:
				return 0x16;
			case 0x1F261:
				return 0x16;
			case 0x1F262:
				return 0x18;
			case 0x1F263:
				return 0x16;
			case 0x1F264:
				return 0x1C;
			case 0x1F265:
				return 0x17;
			case 0x1F300:
				return 0x8;
			case 0x1F301:
				return 0x6;
			case 0x1F302:
				return 0x10;
			case 0x1F303:
				return 0x11;
			case 0x1F304:
				return 0x17;
			case 0x1F305:
				return 0x8;
			case 0x1F306:
				return 0x12;
			case 0x1F307:
				return 0x16;
			case 0x1F308:
				return 0x8;
			case 0x1F309:
				return 0x10;
			case 0x1F30A:
				return 0xB;
			case 0x1F30B:
				return 0x8;
			case 0x1F30C:
				return 0xA;
			case 0x1F30D:
				return 0x1A;
			case 0x1F30E:
				return 0x15;
			case 0x1F30F:
				return 0x1B;
			case 0x1F310:
				return 0x15;
			case 0x1F311:
				return 0x10;
			case 0x1F312:
				return 0x1C;
			case 0x1F313:
				return 0x1A;
			case 0x1F314:
				return 0x1B;
			case 0x1F315:
				return 0x11;
			case 0x1F316:
				return 0x1B;
			case 0x1F317:
				return 0x19;
			case 0x1F318:
				return 0x1C;
			case 0x1F319:
				return 0xE;
			case 0x1F31A:
				return 0x13;
			case 0x1F31B:
				return 0x1D;
			case 0x1F31C:
				return 0x1C;
			case 0x1F31D:
				return 0x14;
			case 0x1F31E:
				return 0xE;
			case 0x1F31F:
				return 0xD;
			case 0x1F320:
				return 0xE;
			case 0x1F321:
				return 0xC;
			case 0x1F322:
				return 0xE;
			case 0x1F323:
				return 0xA;
			case 0x1F324:
				return 0x1B;
			case 0x1F325:
				return 0x17;
			case 0x1F326:
				return 0x21;
			case 0x1F327:
				return 0x10;
			case 0x1F328:
				return 0x10;
			case 0x1F329:
				return 0x15;
			case 0x1F32A:
				return 0x13;
			case 0x1F32B:
				return 0x4;
			case 0x1F32C:
				return 0x12;
			case 0x1F32D:
				return 0x8;
			case 0x1F32E:
				return 0x5;
			case 0x1F32F:
				return 0x8;
			case 0x1F330:
				return 0x9;
			case 0x1F331:
				return 0x9;
			case 0x1F332:
				return 0xF;
			case 0x1F333:
				return 0xF;
			case 0x1F334:
				return 0xA;
			case 0x1F335:
				return 0x7;
			case 0x1F336:
				return 0xB;
			case 0x1F337:
				return 0x6;
			case 0x1F338:
				return 0xF;
			case 0x1F339:
				return 0x5;
			case 0x1F33A:
				return 0x9;
			case 0x1F33B:
				return 0xA;
			case 0x1F33C:
				return 0x8;
			case 0x1F33D:
				return 0xD;
			case 0x1F33E:
				return 0xC;
			case 0x1F33F:
				return 0x5;
			case 0x1F340:
				return 0x11;
			case 0x1F341:
				return 0xB;
			case 0x1F342:
				return 0xC;
			case 0x1F343:
				return 0x18;
			case 0x1F344:
				return 0x9;
			case 0x1F345:
				return 0x7;
			case 0x1F346:
				return 0xA;
			case 0x1F347:
				return 0x7;
			case 0x1F348:
				return 0x6;
			case 0x1F349:
				return 0xB;
			case 0x1F34A:
				return 0xA;
			case 0x1F34B:
				return 0x6;
			case 0x1F34C:
				return 0x7;
			case 0x1F34D:
				return 0xA;
			case 0x1F34E:
				return 0xA;
			case 0x1F34F:
				return 0xC;
			case 0x1F350:
				return 0x5;
			case 0x1F351:
				return 0x6;
			case 0x1F352:
				return 0x9;
			case 0x1F353:
				return 0xB;
			case 0x1F354:
				return 0xA;
			case 0x1F355:
				return 0xF;
			case 0x1F356:
				return 0xD;
			case 0x1F357:
				return 0xC;
			case 0x1F358:
				return 0xD;
			case 0x1F359:
				return 0xA;
			case 0x1F35A:
				return 0xC;
			case 0x1F35B:
				return 0xF;
			case 0x1F35C:
				return 0xE;
			case 0x1F35D:
				return 0xA;
			case 0x1F35E:
				return 0x6;
			case 0x1F35F:
				return 0xD;
			case 0x1F360:
				return 0x15;
			case 0x1F361:
				return 0x6;
			case 0x1F362:
				return 0x5;
			case 0x1F363:
				return 0x6;
			case 0x1F364:
				return 0xD;
			case 0x1F365:
				return 0x1C;
			case 0x1F366:
				return 0xF;
			case 0x1F367:
				return 0xB;
			case 0x1F368:
				return 0xA;
			case 0x1F369:
				return 0x9;
			case 0x1F36A:
				return 0x7;
			case 0x1F36B:
				return 0xE;
			case 0x1F36C:
				return 0x6;
			case 0x1F36D:
				return 0x9;
			case 0x1F36E:
				return 0x8;
			case 0x1F36F:
				return 0xA;
			case 0x1F370:
				return 0xA;
			case 0x1F371:
				return 0xA;
			case 0x1F372:
				return 0xC;
			case 0x1F373:
				return 0x8;
			case 0x1F374:
				return 0xF;
			case 0x1F375:
				return 0x16;
			case 0x1F376:
				return 0x14;
			case 0x1F377:
				return 0xB;
			case 0x1F378:
				return 0xF;
			case 0x1F379:
				return 0xF;
			case 0x1F37A:
				return 0x9;
			case 0x1F37B:
				return 0x13;
			case 0x1F37C:
				return 0xC;
			case 0x1F37D:
				return 0x1A;
			case 0x1F37E:
				return 0x19;
			case 0x1F37F:
				return 0x8;
			case 0x1F380:
				return 0x7;
			case 0x1F381:
				return 0x10;
			case 0x1F382:
				return 0xE;
			case 0x1F383:
				return 0xF;
			case 0x1F384:
				return 0xF;
			case 0x1F385:
				return 0x11;
			case 0x1F386:
				return 0xA;
			case 0x1F387:
				return 0x12;
			case 0x1F388:
				return 0x8;
			case 0x1F389:
				return 0xD;
			case 0x1F38A:
				return 0xE;
			case 0x1F38B:
				return 0xE;
			case 0x1F38C:
				return 0xE;
			case 0x1F38D:
				return 0x10;
			case 0x1F38E:
				return 0xF;
			case 0x1F38F:
				return 0xE;
			case 0x1F390:
				return 0xB;
			case 0x1F391:
				return 0x16;
			case 0x1F392:
				return 0xF;
			case 0x1F393:
				return 0xF;
			case 0x1F394:
				return 0x1B;
			case 0x1F395:
				return 0x13;
			case 0x1F396:
				return 0xF;
			case 0x1F397:
				return 0x10;
			case 0x1F398:
				return 0x1C;
			case 0x1F399:
				return 0x12;
			case 0x1F39A:
				return 0xD;
			case 0x1F39B:
				return 0xE;
			case 0x1F39C:
				return 0x1F;
			case 0x1F39D:
				return 0x20;
			case 0x1F39E:
				return 0xC;
			case 0x1F39F:
				return 0x12;
			case 0x1F3A0:
				return 0xF;
			case 0x1F3A1:
				return 0xD;
			case 0x1F3A2:
				return 0xF;
			case 0x1F3A3:
				return 0x16;
			case 0x1F3A4:
				return 0xB;
			case 0x1F3A5:
				return 0xD;
			case 0x1F3A6:
				return 0x7;
			case 0x1F3A7:
				return 0xA;
			case 0x1F3A8:
				return 0xF;
			case 0x1F3A9:
				return 0x8;
			case 0x1F3AA:
				return 0xC;
			case 0x1F3AB:
				return 0x7;
			case 0x1F3AC:
				return 0xE;
			case 0x1F3AD:
				return 0x10;
			case 0x1F3AE:
				return 0xB;
			case 0x1F3AF:
				return 0xB;
			case 0x1F3B0:
				return 0xD;
			case 0x1F3B1:
				return 0xA;
			case 0x1F3B2:
				return 0x9;
			case 0x1F3B3:
				return 0x8;
			case 0x1F3B4:
				return 0x15;
			case 0x1F3B5:
				return 0xD;
			case 0x1F3B6:
				return 0x17;
			case 0x1F3B7:
				return 0xA;
			case 0x1F3B8:
				return 0x7;
			case 0x1F3B9:
				return 0x11;
			case 0x1F3BA:
				return 0x8;
			case 0x1F3BB:
				return 0x7;
			case 0x1F3BC:
				return 0xE;
			case 0x1F3BD:
				return 0x18;
			case 0x1F3BE:
				return 0x18;
			case 0x1F3BF:
				return 0x11;
			case 0x1F3C0:
				return 0x14;
			case 0x1F3C1:
				return 0xF;
			case 0x1F3C2:
				return 0xC;
			case 0x1F3C3:
				return 0x7;
			case 0x1F3C4:
				return 0x7;
			case 0x1F3C5:
				return 0xD;
			case 0x1F3C6:
				return 0x7;
			case 0x1F3C7:
				return 0xD;
			case 0x1F3C8:
				return 0x12;
			case 0x1F3C9:
				return 0xF;
			case 0x1F3CA:
				return 0x8;
			case 0x1F3CB:
				return 0xE;
			case 0x1F3CC:
				return 0x7;
			case 0x1F3CD:
				return 0x12;
			case 0x1F3CE:
				return 0xB;
			case 0x1F3CF:
				return 0x15;
			case 0x1F3D0:
				return 0xB;
			case 0x1F3D1:
				return 0x1C;
			case 0x1F3D2:
				return 0x1A;
			case 0x1F3D3:
				return 0x1D;
			case 0x1F3D4:
				return 0x15;
			case 0x1F3D5:
				return 0x8;
			case 0x1F3D6:
				return 0x14;
			case 0x1F3D7:
				return 0x16;
			case 0x1F3D8:
				return 0x10;
			case 0x1F3D9:
				return 0xA;
			case 0x1F3DA:
				return 0x18;
			case 0x1F3DB:
				return 0x13;
			case 0x1F3DC:
				return 0x7;
			case 0x1F3DD:
				return 0xE;
			case 0x1F3DE:
				return 0xE;
			case 0x1F3DF:
				return 0x8;
			case 0x1F3E0:
				return 0xF;
			case 0x1F3E1:
				return 0x12;
			case 0x1F3E2:
				return 0x10;
			case 0x1F3E3:
				return 0x15;
			case 0x1F3E4:
				return 0x15;
			case 0x1F3E5:
				return 0x9;
			case 0x1F3E6:
				return 0x5;
			case 0x1F3E7:
				return 0x19;
			case 0x1F3E8:
				return 0x6;
			case 0x1F3E9:
				return 0xB;
			case 0x1F3EA:
				return 0x12;
			case 0x1F3EB:
				return 0x7;
			case 0x1F3EC:
				return 0x11;
			case 0x1F3ED:
				return 0x8;
			case 0x1F3EE:
				return 0x10;
			case 0x1F3EF:
				return 0x10;
			case 0x1F3F0:
				return 0x10;
			case 0x1F3F1:
				return 0xE;
			case 0x1F3F2:
				return 0xE;
			case 0x1F3F3:
				return 0x12;
			case 0x1F3F4:
				return 0x12;
			case 0x1F3F5:
				return 0x8;
			case 0x1F3F6:
				return 0xE;
			case 0x1F3F7:
				return 0x6;
			case 0x1F3F8:
				return 0x22;
			case 0x1F3F9:
				return 0xE;
			case 0x1F3FA:
				return 0x8;
			case 0x1F3FB:
				return 0x24;
			case 0x1F3FC:
				return 0x22;
			case 0x1F3FD:
				return 0x22;
			case 0x1F3FE:
				return 0x22;
			case 0x1F3FF:
				return 0x22;
			case 0x1F400:
				return 0x4;
			case 0x1F401:
				return 0x6;
			case 0x1F402:
				return 0x3;
			case 0x1F403:
				return 0xE;
			case 0x1F404:
				return 0x4;
			case 0x1F405:
				return 0x6;
			case 0x1F406:
				return 0x8;
			case 0x1F407:
				return 0x7;
			case 0x1F408:
				return 0x4;
			case 0x1F409:
				return 0x7;
			case 0x1F40A:
				return 0xA;
			case 0x1F40B:
				return 0x6;
			case 0x1F40C:
				return 0x6;
			case 0x1F40D:
				return 0x6;
			case 0x1F40E:
				return 0x6;
			case 0x1F40F:
				return 0x4;
			case 0x1F410:
				return 0x5;
			case 0x1F411:
				return 0x6;
			case 0x1F412:
				return 0x7;
			case 0x1F413:
				return 0x8;
			case 0x1F414:
				return 0x8;
			case 0x1F415:
				return 0x4;
			case 0x1F416:
				return 0x4;
			case 0x1F417:
				return 0x5;
			case 0x1F418:
				return 0x9;
			case 0x1F419:
				return 0x8;
			case 0x1F41A:
				return 0xD;
			case 0x1F41B:
				return 0x4;
			case 0x1F41C:
				return 0x4;
			case 0x1F41D:
				return 0x9;
			case 0x1F41E:
				return 0xC;
			case 0x1F41F:
				return 0x5;
			case 0x1F420:
				return 0xE;
			case 0x1F421:
				return 0x9;
			case 0x1F422:
				return 0x7;
			case 0x1F423:
				return 0xF;
			case 0x1F424:
				return 0xB;
			case 0x1F425:
				return 0x18;
			case 0x1F426:
				return 0x5;
			case 0x1F427:
				return 0x8;
			case 0x1F428:
				return 0x6;
			case 0x1F429:
				return 0x7;
			case 0x1F42A:
				return 0x10;
			case 0x1F42B:
				return 0xF;
			case 0x1F42C:
				return 0x8;
			case 0x1F42D:
				return 0xB;
			case 0x1F42E:
				return 0x9;
			case 0x1F42F:
				return 0xB;
			case 0x1F430:
				return 0xC;
			case 0x1F431:
				return 0x9;
			case 0x1F432:
				return 0xC;
			case 0x1F433:
				return 0xF;
			case 0x1F434:
				return 0xB;
			case 0x1F435:
				return 0xC;
			case 0x1F436:
				return 0x9;
			case 0x1F437:
				return 0x9;
			case 0x1F438:
				return 0xA;
			case 0x1F439:
				return 0xD;
			case 0x1F43A:
				return 0xA;
			case 0x1F43B:
				return 0xA;
			case 0x1F43C:
				return 0xB;
			case 0x1F43D:
				return 0x9;
			case 0x1F43E:
				return 0xB;
			case 0x1F43F:
				return 0x9;
			case 0x1F440:
				return 0x5;
			case 0x1F441:
				return 0x4;
			case 0x1F442:
				return 0x4;
			case 0x1F443:
				return 0x5;
			case 0x1F444:
				return 0x6;
			case 0x1F445:
				return 0x7;
			case 0x1F446:
				return 0x21;
			case 0x1F447:
				return 0x23;
			case 0x1F448:
				return 0x23;
			case 0x1F449:
				return 0x24;
			case 0x1F44A:
				return 0x11;
			case 0x1F44B:
				return 0x11;
			case 0x1F44C:
				return 0xD;
			case 0x1F44D:
				return 0xF;
			case 0x1F44E:
				return 0x11;
			case 0x1F44F:
				return 0x14;
			case 0x1F450:
				return 0x10;
			case 0x1F451:
				return 0x6;
			case 0x1F452:
				return 0xB;
			case 0x1F453:
				return 0xB;
			case 0x1F454:
				return 0x8;
			case 0x1F455:
				return 0x8;
			case 0x1F456:
				return 0x6;
			case 0x1F457:
				return 0x6;
			case 0x1F458:
				return 0x7;
			case 0x1F459:
				return 0x7;
			case 0x1F45A:
				return 0xF;
			case 0x1F45B:
				return 0x6;
			case 0x1F45C:
				return 0x8;
			case 0x1F45D:
				return 0x6;
			case 0x1F45E:
				return 0xA;
			case 0x1F45F:
				return 0xE;
			case 0x1F460:
				return 0x11;
			case 0x1F461:
				return 0xE;
			case 0x1F462:
				return 0xD;
			case 0x1F463:
				return 0xB;
			case 0x1F464:
				return 0x13;
			case 0x1F465:
				return 0x14;
			case 0x1F466:
				return 0x4;
			case 0x1F467:
				return 0x5;
			case 0x1F468:
				return 0x4;
			case 0x1F469:
				return 0x6;
			case 0x1F46A:
				return 0x7;
			case 0x1F46B:
				return 0x1C;
			case 0x1F46C:
				return 0x16;
			case 0x1F46D:
				return 0x18;
			case 0x1F46E:
				return 0xF;
			case 0x1F46F:
				return 0x16;
			case 0x1F470:
				return 0x10;
			case 0x1F471:
				return 0x17;
			case 0x1F472:
				return 0x14;
			case 0x1F473:
				return 0x10;
			case 0x1F474:
				return 0xA;
			case 0x1F475:
				return 0xC;
			case 0x1F476:
				return 0x5;
			case 0x1F477:
				return 0x14;
			case 0x1F478:
				return 0x9;
			case 0x1F479:
				return 0xE;
			case 0x1F47A:
				return 0x10;
			case 0x1F47B:
				return 0x6;
			case 0x1F47C:
				return 0xB;
			case 0x1F47D:
				return 0x17;
			case 0x1F47E:
				return 0xE;
			case 0x1F47F:
				return 0x4;
			case 0x1F480:
				return 0x6;
			case 0x1F481:
				return 0x18;
			case 0x1F482:
				return 0xA;
			case 0x1F483:
				return 0x7;
			case 0x1F484:
				return 0x9;
			case 0x1F485:
				return 0xC;
			case 0x1F486:
				return 0xD;
			case 0x1F487:
				return 0x8;
			case 0x1F488:
				return 0xC;
			case 0x1F489:
				return 0x8;
			case 0x1F48A:
				return 0x5;
			case 0x1F48B:
				return 0xA;
			case 0x1F48C:
				return 0xC;
			case 0x1F48D:
				return 0x5;
			case 0x1F48E:
				return 0xA;
			case 0x1F48F:
				return 0x5;
			case 0x1F490:
				return 0x8;
			case 0x1F491:
				return 0x12;
			case 0x1F492:
				return 0x8;
			case 0x1F493:
				return 0xE;
			case 0x1F494:
				return 0xD;
			case 0x1F495:
				return 0xB;
			case 0x1F496:
				return 0x10;
			case 0x1F497:
				return 0xE;
			case 0x1F498:
				return 0x11;
			case 0x1F499:
				return 0xB;
			case 0x1F49A:
				return 0xC;
			case 0x1F49B:
				return 0xD;
			case 0x1F49C:
				return 0xD;
			case 0x1F49D:
				return 0x12;
			case 0x1F49E:
				return 0x11;
			case 0x1F49F:
				return 0x11;
			case 0x1F4A0:
				return 0x20;
			case 0x1F4A1:
				return 0x14;
			case 0x1F4A2:
				return 0xD;
			case 0x1F4A3:
				return 0x5;
			case 0x1F4A4:
				return 0x10;
			case 0x1F4A5:
				return 0x11;
			case 0x1F4A6:
				return 0x17;
			case 0x1F4A7:
				return 0x8;
			case 0x1F4A8:
				return 0xC;
			case 0x1F4A9:
				return 0xC;
			case 0x1F4AA:
				return 0xE;
			case 0x1F4AB:
				return 0xD;
			case 0x1F4AC:
				return 0xF;
			case 0x1F4AD:
				return 0x10;
			case 0x1F4AE:
				return 0xD;
			case 0x1F4AF:
				return 0x16;
			case 0x1F4B0:
				return 0xA;
			case 0x1F4B1:
				return 0x12;
			case 0x1F4B2:
				return 0x12;
			case 0x1F4B3:
				return 0xC;
			case 0x1F4B4:
				return 0x17;
			case 0x1F4B5:
				return 0x1A;
			case 0x1F4B6:
				return 0x18;
			case 0x1F4B7:
				return 0x19;
			case 0x1F4B8:
				return 0x11;
			case 0x1F4B9:
				return 0x26;
			case 0x1F4BA:
				return 0x5;
			case 0x1F4BB:
				return 0x12;
			case 0x1F4BC:
				return 0xA;
			case 0x1F4BD:
				return 0x9;
			case 0x1F4BE:
				return 0xC;
			case 0x1F4BF:
				return 0xD;
			case 0x1F4C0:
				return 0x4;
			case 0x1F4C1:
				return 0xC;
			case 0x1F4C2:
				return 0x11;
			case 0x1F4C3:
				return 0xF;
			case 0x1F4C4:
				return 0xF;
			case 0x1F4C5:
				return 0x9;
			case 0x1F4C6:
				return 0x12;
			case 0x1F4C7:
				return 0xB;
			case 0x1F4C8:
				return 0x19;
			case 0x1F4C9:
				return 0x1B;
			case 0x1F4CA:
				return 0xA;
			case 0x1F4CB:
				return 0xA;
			case 0x1F4CC:
				return 0x8;
			case 0x1F4CD:
				return 0xE;
			case 0x1F4CE:
				return 0xA;
			case 0x1F4CF:
				return 0xF;
			case 0x1F4D0:
				return 0x11;
			case 0x1F4D1:
				return 0xE;
			case 0x1F4D2:
				return 0x7;
			case 0x1F4D3:
				return 0x9;
			case 0x1F4D4:
				return 0x1F;
			case 0x1F4D5:
				return 0xC;
			case 0x1F4D6:
				return 0xA;
			case 0x1F4D7:
				return 0xB;
			case 0x1F4D8:
				return 0xA;
			case 0x1F4D9:
				return 0xC;
			case 0x1F4DA:
				return 0x6;
			case 0x1F4DB:
				return 0xB;
			case 0x1F4DC:
				return 0x7;
			case 0x1F4DD:
				return 0x5;
			case 0x1F4DE:
				return 0x13;
			case 0x1F4DF:
				return 0x6;
			case 0x1F4E0:
				return 0xC;
			case 0x1F4E1:
				return 0x12;
			case 0x1F4E2:
				return 0x1B;
			case 0x1F4E3:
				return 0x13;
			case 0x1F4E4:
				return 0xC;
			case 0x1F4E5:
				return 0xB;
			case 0x1F4E6:
				return 0x8;
			case 0x1F4E7:
				return 0xE;
			case 0x1F4E8:
				return 0x12;
			case 0x1F4E9:
				return 0x24;
			case 0x1F4EA:
				return 0x21;
			case 0x1F4EB:
				return 0x20;
			case 0x1F4EC:
				return 0x1E;
			case 0x1F4ED:
				return 0x1F;
			case 0x1F4EE:
				return 0x8;
			case 0x1F4EF:
				return 0xC;
			case 0x1F4F0:
				return 0xA;
			case 0x1F4F1:
				return 0xD;
			case 0x1F4F2:
				return 0x2B;
			case 0x1F4F3:
				return 0xF;
			case 0x1F4F4:
				return 0x11;
			case 0x1F4F5:
				return 0x11;
			case 0x1F4F6:
				return 0x12;
			case 0x1F4F7:
				return 0x7;
			case 0x1F4F8:
				return 0x12;
			case 0x1F4F9:
				return 0xD;
			case 0x1F4FA:
				return 0xB;
			case 0x1F4FB:
				return 0x6;
			case 0x1F4FC:
				return 0xE;
			case 0x1F4FD:
				return 0xF;
			case 0x1F4FE:
				return 0x10;
			case 0x1F4FF:
				return 0xD;
			case 0x1F500:
				return 0x1A;
			case 0x1F501:
				return 0x36;
			case 0x1F502:
				return 0x4F;
			case 0x1F503:
				return 0x33;
			case 0x1F504:
				return 0x37;
			case 0x1F505:
				return 0x16;
			case 0x1F506:
				return 0x17;
			case 0x1F507:
				return 0x21;
			case 0x1F508:
				return 0x8;
			case 0x1F509:
				return 0x1C;
			case 0x1F50A:
				return 0x1F;
			case 0x1F50B:
				return 0x8;
			case 0x1F50C:
				return 0xE;
			case 0x1F50D:
				return 0x1F;
			case 0x1F50E:
				return 0x20;
			case 0x1F50F:
				return 0x12;
			case 0x1F510:
				return 0x15;
			case 0x1F511:
				return 0x4;
			case 0x1F512:
				return 0x5;
			case 0x1F513:
				return 0xA;
			case 0x1F514:
				return 0x5;
			case 0x1F515:
				return 0x1E;
			case 0x1F516:
				return 0x9;
			case 0x1F517:
				return 0xC;
			case 0x1F518:
				return 0xD;
			case 0x1F519:
				return 0x20;
			case 0x1F51A:
				return 0x1F;
			case 0x1F51B:
				return 0x35;
			case 0x1F51C:
				return 0x21;
			case 0x1F51D:
				return 0x1D;
			case 0x1F51E:
				return 0x1D;
			case 0x1F51F:
				return 0xB;
			case 0x1F520:
				return 0x27;
			case 0x1F521:
				return 0x25;
			case 0x1F522:
				return 0x19;
			case 0x1F523:
				return 0x19;
			case 0x1F524:
				return 0x1F;
			case 0x1F525:
				return 0x5;
			case 0x1F526:
				return 0xF;
			case 0x1F527:
				return 0x7;
			case 0x1F528:
				return 0x7;
			case 0x1F529:
				return 0xD;
			case 0x1F52A:
				return 0x6;
			case 0x1F52B:
				return 0x7;
			case 0x1F52C:
				return 0xB;
			case 0x1F52D:
				return 0xA;
			case 0x1F52E:
				return 0xD;
			case 0x1F52F:
				return 0x21;
			case 0x1F530:
				return 0x1D;
			case 0x1F531:
				return 0xF;
			case 0x1F532:
				return 0x14;
			case 0x1F533:
				return 0x14;
			case 0x1F534:
				return 0x11;
			case 0x1F535:
				return 0x12;
			case 0x1F536:
				return 0x15;
			case 0x1F537:
				return 0x13;
			case 0x1F538:
				return 0x15;
			case 0x1F539:
				return 0x13;
			case 0x1F53A:
				return 0x19;
			case 0x1F53B:
				return 0x1B;
			case 0x1F53C:
				return 0x1F;
			case 0x1F53D:
				return 0x21;
			case 0x1F53E:
				return 0x22;
			case 0x1F53F:
				return 0x22;
			case 0x1F540:
				return 0x15;
			case 0x1F541:
				return 0x24;
			case 0x1F542:
				return 0xD;
			case 0x1F543:
				return 0x28;
			case 0x1F544:
				return 0x29;
			case 0x1F545:
				return 0x19;
			case 0x1F546:
				return 0x12;
			case 0x1F547:
				return 0x12;
			case 0x1F548:
				return 0xD;
			case 0x1F549:
				return 0xA;
			case 0x1F54A:
				return 0xE;
			case 0x1F54B:
				return 0x6;
			case 0x1F54C:
				return 0x7;
			case 0x1F54D:
				return 0xA;
			case 0x1F54E:
				return 0x1B;
			case 0x1F54F:
				return 0x10;
			case 0x1F550:
				return 0x16;
			case 0x1F551:
				return 0x16;
			case 0x1F552:
				return 0x18;
			case 0x1F553:
				return 0x17;
			case 0x1F554:
				return 0x17;
			case 0x1F555:
				return 0x16;
			case 0x1F556:
				return 0x18;
			case 0x1F557:
				return 0x18;
			case 0x1F558:
				return 0x17;
			case 0x1F559:
				return 0x16;
			case 0x1F55A:
				return 0x19;
			case 0x1F55B:
				return 0x19;
			case 0x1F55C:
				return 0x16;
			case 0x1F55D:
				return 0x16;
			case 0x1F55E:
				return 0x18;
			case 0x1F55F:
				return 0x17;
			case 0x1F560:
				return 0x17;
			case 0x1F561:
				return 0x16;
			case 0x1F562:
				return 0x18;
			case 0x1F563:
				return 0x18;
			case 0x1F564:
				return 0x17;
			case 0x1F565:
				return 0x16;
			case 0x1F566:
				return 0x19;
			case 0x1F567:
				return 0x19;
			case 0x1F568:
				return 0xE;
			case 0x1F569:
				return 0x22;
			case 0x1F56A:
				return 0x25;
			case 0x1F56B:
				return 0x9;
			case 0x1F56C:
				return 0x1A;
			case 0x1F56D:
				return 0xD;
			case 0x1F56E:
				return 0x5;
			case 0x1F56F:
				return 0x7;
			case 0x1F570:
				return 0x12;
			case 0x1F571:
				return 0x1B;
			case 0x1F572:
				return 0xA;
			case 0x1F573:
				return 0x5;
			case 0x1F574:
				return 0x20;
			case 0x1F575:
				return 0xE;
			case 0x1F576:
				return 0x10;
			case 0x1F577:
				return 0x7;
			case 0x1F578:
				return 0xB;
			case 0x1F579:
				return 0x9;
			case 0x1F57A:
				return 0xC;
			case 0x1F57B:
				return 0x1D;
			case 0x1F57C:
				return 0x1D;
			case 0x1F57D:
				return 0x1E;
			case 0x1F57E:
				return 0x1A;
			case 0x1F57F:
				return 0x1A;
			case 0x1F580:
				return 0x1A;
			case 0x1F581:
				return 0x17;
			case 0x1F582:
				return 0x11;
			case 0x1F583:
				return 0x11;
			case 0x1F584:
				return 0x18;
			case 0x1F585:
				return 0x10;
			case 0x1F586:
				return 0x1A;
			case 0x1F587:
				return 0x12;
			case 0x1F588:
				return 0xE;
			case 0x1F589:
				return 0x12;
			case 0x1F58A:
				return 0x19;
			case 0x1F58B:
				return 0x18;
			case 0x1F58C:
				return 0x16;
			case 0x1F58D:
				return 0x12;
			case 0x1F58E:
				return 0x12;
			case 0x1F58F:
				return 0x14;
			case 0x1F590:
				return 0x21;
			case 0x1F591:
				return 0x2A;
			case 0x1F592:
				return 0x18;
			case 0x1F593:
				return 0x1A;
			case 0x1F594:
				return 0x16;
			case 0x1F595:
				return 0x2A;
			case 0x1F596:
				return 0x36;
			case 0x1F597:
				return 0x24;
			case 0x1F598:
				return 0x23;
			case 0x1F599:
				return 0x24;
			case 0x1F59A:
				return 0x23;
			case 0x1F59B:
				return 0x24;
			case 0x1F59C:
				return 0x23;
			case 0x1F59D:
				return 0x24;
			case 0x1F59E:
				return 0x21;
			case 0x1F59F:
				return 0x23;
			case 0x1F5A0:
				return 0x21;
			case 0x1F5A1:
				return 0x23;
			case 0x1F5A2:
				return 0x21;
			case 0x1F5A3:
				return 0x23;
			case 0x1F5A4:
				return 0xC;
			case 0x1F5A5:
				return 0x11;
			case 0x1F5A6:
				return 0x13;
			case 0x1F5A7:
				return 0x1A;
			case 0x1F5A8:
				return 0x8;
			case 0x1F5A9:
				return 0x12;
			case 0x1F5AA:
				return 0x1D;
			case 0x1F5AB:
				return 0x1D;
			case 0x1F5AC:
				return 0x17;
			case 0x1F5AD:
				return 0xF;
			case 0x1F5AE:
				return 0xF;
			case 0x1F5AF:
				return 0x11;
			case 0x1F5B0:
				return 0x11;
			case 0x1F5B1:
				return 0x13;
			case 0x1F5B2:
				return 0xA;
			case 0x1F5B3:
				return 0x16;
			case 0x1F5B4:
				return 0xA;
			case 0x1F5B5:
				return 0x7;
			case 0x1F5B6:
				return 0xD;
			case 0x1F5B7:
				return 0x9;
			case 0x1F5B8:
				return 0x12;
			case 0x1F5B9:
				return 0x13;
			case 0x1F5BA:
				return 0x1F;
			case 0x1F5BB:
				return 0x16;
			case 0x1F5BC:
				return 0x13;
			case 0x1F5BD:
				return 0x11;
			case 0x1F5BE:
				return 0x10;
			case 0x1F5BF:
				return 0xD;
			case 0x1F5C0:
				return 0x7;
			case 0x1F5C1:
				return 0xC;
			case 0x1F5C2:
				return 0x14;
			case 0x1F5C3:
				return 0xE;
			case 0x1F5C4:
				return 0xD;
			case 0x1F5C5:
				return 0xB;
			case 0x1F5C6:
				return 0x10;
			case 0x1F5C7:
				return 0xF;
			case 0x1F5C8:
				return 0x5;
			case 0x1F5C9:
				return 0xA;
			case 0x1F5CA:
				return 0x9;
			case 0x1F5CB:
				return 0xF;
			case 0x1F5CC:
				return 0xB;
			case 0x1F5CD:
				return 0xC;
			case 0x1F5CE:
				return 0x9;
			case 0x1F5CF:
				return 0x5;
			case 0x1F5D0:
				return 0x6;
			case 0x1F5D1:
				return 0xC;
			case 0x1F5D2:
				return 0x10;
			case 0x1F5D3:
				return 0x14;
			case 0x1F5D4:
				return 0xF;
			case 0x1F5D5:
				return 0x9;
			case 0x1F5D6:
				return 0x9;
			case 0x1F5D7:
				return 0x8;
			case 0x1F5D8:
				return 0x2B;
			case 0x1F5D9:
				return 0xF;
			case 0x1F5DA:
				return 0x1A;
			case 0x1F5DB:
				return 0x1A;
			case 0x1F5DC:
				return 0xC;
			case 0x1F5DD:
				return 0x8;
			case 0x1F5DE:
				return 0x14;
			case 0x1F5DF:
				return 0x17;
			case 0x1F5E0:
				return 0xC;
			case 0x1F5E1:
				return 0xD;
			case 0x1F5E2:
				return 0x5;
			case 0x1F5E3:
				return 0x1C;
			case 0x1F5E4:
				return 0x11;
			case 0x1F5E5:
				return 0x11;
			case 0x1F5E6:
				return 0x10;
			case 0x1F5E7:
				return 0x11;
			case 0x1F5E8:
				return 0x13;
			case 0x1F5E9:
				return 0x14;
			case 0x1F5EA:
				return 0x13;
			case 0x1F5EB:
				return 0x15;
			case 0x1F5EC:
				return 0x14;
			case 0x1F5ED:
				return 0x15;
			case 0x1F5EE:
				return 0x12;
			case 0x1F5EF:
				return 0x13;
			case 0x1F5F0:
				return 0xC;
			case 0x1F5F1:
				return 0x16;
			case 0x1F5F2:
				return 0xF;
			case 0x1F5F3:
				return 0x17;
			case 0x1F5F4:
				return 0x10;
			case 0x1F5F5:
				return 0x19;
			case 0x1F5F6:
				return 0x15;
			case 0x1F5F7:
				return 0x1E;
			case 0x1F5F8:
				return 0x11;
			case 0x1F5F9:
				return 0x1B;
			case 0x1F5FA:
				return 0xA;
			case 0x1F5FB:
				return 0xB;
			case 0x1F5FC:
				return 0xC;
			case 0x1F5FD:
				return 0x12;
			case 0x1F5FE:
				return 0x14;
			case 0x1F5FF:
				return 0x6;
			case 0x1F600:
				return 0xE;
			case 0x1F601:
				return 0x20;
			case 0x1F602:
				return 0x17;
			case 0x1F603:
				return 0x1D;
			case 0x1F604:
				return 0x2E;
			case 0x1F605:
				return 0x2C;
			case 0x1F606:
				return 0x35;
			case 0x1F607:
				return 0x17;
			case 0x1F608:
				return 0x18;
			case 0x1F609:
				return 0xD;
			case 0x1F60A:
				return 0x1F;
			case 0x1F60B:
				return 0x1E;
			case 0x1F60C:
				return 0xE;
			case 0x1F60D:
				return 0x24;
			case 0x1F60E:
				return 0x1D;
			case 0x1F60F:
				return 0xE;
			case 0x1F610:
				return 0xD;
			case 0x1F611:
				return 0x14;
			case 0x1F612:
				return 0xE;
			case 0x1F613:
				return 0x15;
			case 0x1F614:
				return 0xD;
			case 0x1F615:
				return 0xE;
			case 0x1F616:
				return 0x10;
			case 0x1F617:
				return 0xD;
			case 0x1F618:
				return 0x15;
			case 0x1F619:
				return 0x1F;
			case 0x1F61A:
				return 0x1E;
			case 0x1F61B:
				return 0x1B;
			case 0x1F61C:
				return 0x2B;
			case 0x1F61D:
				return 0x33;
			case 0x1F61E:
				return 0x12;
			case 0x1F61F:
				return 0xD;
			case 0x1F620:
				return 0xB;
			case 0x1F621:
				return 0xD;
			case 0x1F622:
				return 0xC;
			case 0x1F623:
				return 0x11;
			case 0x1F624:
				return 0x1A;
			case 0x1F625:
				return 0x1F;
			case 0x1F626:
				return 0x1E;
			case 0x1F627:
				return 0xF;
			case 0x1F628:
				return 0xD;
			case 0x1F629:
				return 0xB;
			case 0x1F62A:
				return 0xC;
			case 0x1F62B:
				return 0xB;
			case 0x1F62C:
				return 0xF;
			case 0x1F62D:
				return 0x13;
			case 0x1F62E:
				return 0x15;
			case 0x1F62F:
				return 0xC;
			case 0x1F630:
				return 0x24;
			case 0x1F631:
				return 0x17;
			case 0x1F632:
				return 0x10;
			case 0x1F633:
				return 0xD;
			case 0x1F634:
				return 0xE;
			case 0x1F635:
				return 0xB;
			case 0x1F636:
				return 0x13;
			case 0x1F637:
				return 0x17;
			case 0x1F638:
				return 0x24;
			case 0x1F639:
				return 0x1B;
			case 0x1F63A:
				return 0x21;
			case 0x1F63B:
				return 0x28;
			case 0x1F63C:
				return 0x18;
			case 0x1F63D:
				return 0x22;
			case 0x1F63E:
				return 0x11;
			case 0x1F63F:
				return 0x10;
			case 0x1F640:
				return 0xF;
			case 0x1F641:
				return 0x17;
			case 0x1F642:
				return 0x16;
			case 0x1F643:
				return 0x11;
			case 0x1F644:
				return 0x17;
			case 0x1F645:
				return 0x1A;
			case 0x1F646:
				return 0x15;
			case 0x1F647:
				return 0x15;
			case 0x1F648:
				return 0x13;
			case 0x1F649:
				return 0x14;
			case 0x1F64A:
				return 0x15;
			case 0x1F64B:
				return 0x1E;
			case 0x1F64C:
				return 0x29;
			case 0x1F64D:
				return 0x10;
			case 0x1F64E:
				return 0x19;
			case 0x1F64F:
				return 0x19;
			case 0x1F650:
				return 0x19;
			case 0x1F651:
				return 0x19;
			case 0x1F652:
				return 0x19;
			case 0x1F653:
				return 0x19;
			case 0x1F654:
				return 0x20;
			case 0x1F655:
				return 0x20;
			case 0x1F656:
				return 0x20;
			case 0x1F657:
				return 0x20;
			case 0x1F658:
				return 0x1E;
			case 0x1F659:
				return 0x1E;
			case 0x1F65A:
				return 0x1E;
			case 0x1F65B:
				return 0x1E;
			case 0x1F65C:
				return 0x24;
			case 0x1F65D:
				return 0x24;
			case 0x1F65E:
				return 0x24;
			case 0x1F65F:
				return 0x24;
			case 0x1F660:
				return 0x18;
			case 0x1F661:
				return 0x18;
			case 0x1F662:
				return 0x18;
			case 0x1F663:
				return 0x18;
			case 0x1F664:
				return 0x1E;
			case 0x1F665:
				return 0x1E;
			case 0x1F666:
				return 0x1E;
			case 0x1F667:
				return 0x1E;
			case 0x1F668:
				return 0x1D;
			case 0x1F669:
				return 0x2D;
			case 0x1F66A:
				return 0x1C;
			case 0x1F66B:
				return 0x2C;
			case 0x1F66C:
				return 0x11;
			case 0x1F66D:
				return 0xF;
			case 0x1F66E:
				return 0x12;
			case 0x1F66F:
				return 0x11;
			case 0x1F670:
				return 0x1C;
			case 0x1F671:
				return 0x22;
			case 0x1F672:
				return 0x1A;
			case 0x1F673:
				return 0x20;
			case 0x1F674:
				return 0x19;
			case 0x1F675:
				return 0x19;
			case 0x1F676:
				return 0x3D;
			case 0x1F677:
				return 0x36;
			case 0x1F678:
				return 0x3A;
			case 0x1F679:
				return 0x1B;
			case 0x1F67A:
				return 0x20;
			case 0x1F67B:
				return 0x26;
			case 0x1F67C:
				return 0x13;
			case 0x1F67D:
				return 0x1B;
			case 0x1F67E:
				return 0xE;
			case 0x1F67F:
				return 0x16;
			case 0x1F680:
				return 0x7;
			case 0x1F681:
				return 0xB;
			case 0x1F682:
				return 0x11;
			case 0x1F683:
				return 0xC;
			case 0x1F684:
				return 0x11;
			case 0x1F685:
				return 0x22;
			case 0x1F686:
				return 0x6;
			case 0x1F687:
				return 0x6;
			case 0x1F688:
				return 0xB;
			case 0x1F689:
				return 0x8;
			case 0x1F68A:
				return 0x5;
			case 0x1F68B:
				return 0x9;
			case 0x1F68C:
				return 0x4;
			case 0x1F68D:
				return 0xD;
			case 0x1F68E:
				return 0xB;
			case 0x1F68F:
				return 0x9;
			case 0x1F690:
				return 0x8;
			case 0x1F691:
				return 0xA;
			case 0x1F692:
				return 0xC;
			case 0x1F693:
				return 0xB;
			case 0x1F694:
				return 0x14;
			case 0x1F695:
				return 0x5;
			case 0x1F696:
				return 0xE;
			case 0x1F697:
				return 0xB;
			case 0x1F698:
				return 0x14;
			case 0x1F699:
				return 0x15;
			case 0x1F69A:
				return 0xF;
			case 0x1F69B:
				return 0x12;
			case 0x1F69C:
				return 0x8;
			case 0x1F69D:
				return 0x9;
			case 0x1F69E:
				return 0x11;
			case 0x1F69F:
				return 0x13;
			case 0x1F6A0:
				return 0x12;
			case 0x1F6A1:
				return 0xF;
			case 0x1F6A2:
				return 0x5;
			case 0x1F6A3:
				return 0x8;
			case 0x1F6A4:
				return 0xA;
			case 0x1F6A5:
				return 0x19;
			case 0x1F6A6:
				return 0x17;
			case 0x1F6A7:
				return 0x12;
			case 0x1F6A8:
				return 0x1C;
			case 0x1F6A9:
				return 0x18;
			case 0x1F6AA:
				return 0x5;
			case 0x1F6AB:
				return 0xE;
			case 0x1F6AC:
				return 0xF;
			case 0x1F6AD:
				return 0x12;
			case 0x1F6AE:
				return 0x1F;
			case 0x1F6AF:
				return 0x15;
			case 0x1F6B0:
				return 0x15;
			case 0x1F6B1:
				return 0x19;
			case 0x1F6B2:
				return 0x8;
			case 0x1F6B3:
				return 0xC;
			case 0x1F6B4:
				return 0xA;
			case 0x1F6B5:
				return 0x13;
			case 0x1F6B6:
				return 0xB;
			case 0x1F6B7:
				return 0xF;
			case 0x1F6B8:
				return 0x12;
			case 0x1F6B9:
				return 0xC;
			case 0x1F6BA:
				return 0xE;
			case 0x1F6BB:
				return 0x9;
			case 0x1F6BC:
				return 0xC;
			case 0x1F6BD:
				return 0x7;
			case 0x1F6BE:
				return 0xD;
			case 0x1F6BF:
				return 0x7;
			case 0x1F6C0:
				return 0x5;
			case 0x1F6C1:
				return 0x8;
			case 0x1F6C2:
				return 0x11;
			case 0x1F6C3:
				return 0x8;
			case 0x1F6C4:
				return 0xE;
			case 0x1F6C5:
				return 0xD;
			case 0x1F6C6:
				return 0x1E;
			case 0x1F6C7:
				return 0x10;
			case 0x1F6C8:
				return 0x1B;
			case 0x1F6C9:
				return 0xC;
			case 0x1F6CA:
				return 0xD;
			case 0x1F6CB:
				return 0xF;
			case 0x1F6CC:
				return 0x17;
			case 0x1F6CD:
				return 0xE;
			case 0x1F6CE:
				return 0xD;
			case 0x1F6CF:
				return 0x4;
			case 0x1F6D0:
				return 0x11;
			case 0x1F6D1:
				return 0xF;
			case 0x1F6D2:
				return 0x11;
			case 0x1F6D3:
				return 0x6;
			case 0x1F6D4:
				return 0x7;
			case 0x1F6D5:
				return 0xD;
			case 0x1F6D6:
				return 0x4;
			case 0x1F6D7:
				return 0x9;
			case 0x1F6E0:
				return 0x12;
			case 0x1F6E1:
				return 0x7;
			case 0x1F6E2:
				return 0x9;
			case 0x1F6E3:
				return 0x9;
			case 0x1F6E4:
				return 0xE;
			case 0x1F6E5:
				return 0xB;
			case 0x1F6E6:
				return 0x1E;
			case 0x1F6E7:
				return 0x15;
			case 0x1F6E8:
				return 0x1B;
			case 0x1F6E9:
				return 0xF;
			case 0x1F6EA:
				return 0x1C;
			case 0x1F6EB:
				return 0x13;
			case 0x1F6EC:
				return 0x12;
			case 0x1F6F0:
				return 0xA;
			case 0x1F6F1:
				return 0x15;
			case 0x1F6F2:
				return 0x12;
			case 0x1F6F3:
				return 0xF;
			case 0x1F6F4:
				return 0x8;
			case 0x1F6F5:
				return 0xE;
			case 0x1F6F6:
				return 0x6;
			case 0x1F6F7:
				return 0x5;
			case 0x1F6F8:
				return 0xE;
			case 0x1F6F9:
				return 0xB;
			case 0x1F6FA:
				return 0xE;
			case 0x1F6FB:
				return 0xD;
			case 0x1F6FC:
				return 0xD;
			case 0x1F700:
				return 0x23;
			case 0x1F701:
				return 0x1A;
			case 0x1F702:
				return 0x1B;
			case 0x1F703:
				return 0x1C;
			case 0x1F704:
				return 0x1C;
			case 0x1F705:
				return 0x21;
			case 0x1F706:
				return 0x21;
			case 0x1F707:
				return 0x23;
			case 0x1F708:
				return 0x21;
			case 0x1F709:
				return 0x23;
			case 0x1F70A:
				return 0x1E;
			case 0x1F70B:
				return 0x20;
			case 0x1F70C:
				return 0x20;
			case 0x1F70D:
				return 0x1D;
			case 0x1F70E:
				return 0x2A;
			case 0x1F70F:
				return 0x23;
			case 0x1F710:
				return 0x28;
			case 0x1F711:
				return 0x2A;
			case 0x1F712:
				return 0x2A;
			case 0x1F713:
				return 0x1F;
			case 0x1F714:
				return 0x1B;
			case 0x1F715:
				return 0x1C;
			case 0x1F716:
				return 0x1E;
			case 0x1F717:
				return 0x20;
			case 0x1F718:
				return 0x20;
			case 0x1F719:
				return 0x22;
			case 0x1F71A:
				return 0x1B;
			case 0x1F71B:
				return 0x1D;
			case 0x1F71C:
				return 0x1F;
			case 0x1F71D:
				return 0x21;
			case 0x1F71E:
				return 0x25;
			case 0x1F71F:
				return 0x26;
			case 0x1F720:
				return 0x21;
			case 0x1F721:
				return 0x26;
			case 0x1F722:
				return 0x2A;
			case 0x1F723:
				return 0x27;
			case 0x1F724:
				return 0x29;
			case 0x1F725:
				return 0x29;
			case 0x1F726:
				return 0x31;
			case 0x1F727:
				return 0x32;
			case 0x1F728:
				return 0x20;
			case 0x1F729:
				return 0x1E;
			case 0x1F72A:
				return 0x1F;
			case 0x1F72B:
				return 0x23;
			case 0x1F72C:
				return 0x2C;
			case 0x1F72D:
				return 0x27;
			case 0x1F72E:
				return 0x34;
			case 0x1F72F:
				return 0x2A;
			case 0x1F730:
				return 0x2A;
			case 0x1F731:
				return 0x2C;
			case 0x1F732:
				return 0x1E;
			case 0x1F733:
				return 0x20;
			case 0x1F734:
				return 0x20;
			case 0x1F735:
				return 0x20;
			case 0x1F736:
				return 0x1D;
			case 0x1F737:
				return 0x1F;
			case 0x1F738:
				return 0x20;
			case 0x1F739:
				return 0x23;
			case 0x1F73A:
				return 0x1E;
			case 0x1F73B:
				return 0x1E;
			case 0x1F73C:
				return 0x20;
			case 0x1F73D:
				return 0x22;
			case 0x1F73E:
				return 0x22;
			case 0x1F73F:
				return 0x1D;
			case 0x1F740:
				return 0x1F;
			case 0x1F741:
				return 0x21;
			case 0x1F742:
				return 0x1C;
			case 0x1F743:
				return 0x1E;
			case 0x1F744:
				return 0x1E;
			case 0x1F745:
				return 0x1B;
			case 0x1F746:
				return 0x1A;
			case 0x1F747:
				return 0x1D;
			case 0x1F748:
				return 0x1F;
			case 0x1F749:
				return 0x1A;
			case 0x1F74A:
				return 0x1A;
			case 0x1F74B:
				return 0x1D;
			case 0x1F74C:
				return 0x1B;
			case 0x1F74D:
				return 0x1C;
			case 0x1F74E:
				return 0x24;
			case 0x1F74F:
				return 0x26;
			case 0x1F750:
				return 0x1F;
			case 0x1F751:
				return 0x1E;
			case 0x1F752:
				return 0x26;
			case 0x1F753:
				return 0x20;
			case 0x1F754:
				return 0x1B;
			case 0x1F755:
				return 0x1C;
			case 0x1F756:
				return 0x21;
			case 0x1F757:
				return 0x1C;
			case 0x1F758:
				return 0x20;
			case 0x1F759:
				return 0x1C;
			case 0x1F75A:
				return 0x25;
			case 0x1F75B:
				return 0x1E;
			case 0x1F75C:
				return 0x2C;
			case 0x1F75D:
				return 0x2E;
			case 0x1F75E:
				return 0x22;
			case 0x1F75F:
				return 0x22;
			case 0x1F760:
				return 0x1E;
			case 0x1F761:
				return 0x1F;
			case 0x1F762:
				return 0x21;
			case 0x1F763:
				return 0x1D;
			case 0x1F764:
				return 0x23;
			case 0x1F765:
				return 0x1F;
			case 0x1F766:
				return 0x21;
			case 0x1F767:
				return 0x21;
			case 0x1F768:
				return 0x21;
			case 0x1F769:
				return 0x21;
			case 0x1F76A:
				return 0x1E;
			case 0x1F76B:
				return 0x23;
			case 0x1F76C:
				return 0x26;
			case 0x1F76D:
				return 0x1D;
			case 0x1F76E:
				return 0x1B;
			case 0x1F76F:
				return 0x1C;
			case 0x1F770:
				return 0x20;
			case 0x1F771:
				return 0x1C;
			case 0x1F772:
				return 0x20;
			case 0x1F773:
				return 0x21;
			case 0x1F780:
				return 0x2D;
			case 0x1F781:
				return 0x2B;
			case 0x1F782:
				return 0x2E;
			case 0x1F783:
				return 0x2D;
			case 0x1F784:
				return 0x1C;
			case 0x1F785:
				return 0x19;
			case 0x1F786:
				return 0x12;
			case 0x1F787:
				return 0x13;
			case 0x1F788:
				return 0x18;
			case 0x1F789:
				return 0x1D;
			case 0x1F78A:
				return 0x2B;
			case 0x1F78B:
				return 0xD;
			case 0x1F78C:
				return 0x12;
			case 0x1F78D:
				return 0x1C;
			case 0x1F78E:
				return 0x13;
			case 0x1F78F:
				return 0x14;
			case 0x1F790:
				return 0x12;
			case 0x1F791:
				return 0x13;
			case 0x1F792:
				return 0x18;
			case 0x1F793:
				return 0x1D;
			case 0x1F794:
				return 0x30;
			case 0x1F795:
				return 0x2C;
			case 0x1F796:
				return 0xE;
			case 0x1F797:
				return 0x13;
			case 0x1F798:
				return 0x19;
			case 0x1F799:
				return 0x1B;
			case 0x1F79A:
				return 0x32;
			case 0x1F79B:
				return 0x2E;
			case 0x1F79C:
				return 0xF;
			case 0x1F79D:
				return 0x13;
			case 0x1F79E:
				return 0x19;
			case 0x1F79F:
				return 0x1B;
			case 0x1F7A0:
				return 0x2D;
			case 0x1F7A1:
				return 0x11;
			case 0x1F7A2:
				return 0x12;
			case 0x1F7A3:
				return 0x13;
			case 0x1F7A4:
				return 0x11;
			case 0x1F7A5:
				return 0x16;
			case 0x1F7A6:
				return 0x17;
			case 0x1F7A7:
				return 0x1C;
			case 0x1F7A8:
				return 0xD;
			case 0x1F7A9:
				return 0xE;
			case 0x1F7AA:
				return 0xF;
			case 0x1F7AB:
				return 0xD;
			case 0x1F7AC:
				return 0xE;
			case 0x1F7AD:
				return 0x13;
			case 0x1F7AE:
				return 0x18;
			case 0x1F7AF:
				return 0x1B;
			case 0x1F7B0:
				return 0x1C;
			case 0x1F7B1:
				return 0x1A;
			case 0x1F7B2:
				return 0x1B;
			case 0x1F7B3:
				return 0x20;
			case 0x1F7B4:
				return 0x25;
			case 0x1F7B5:
				return 0x1A;
			case 0x1F7B6:
				return 0x1B;
			case 0x1F7B7:
				return 0x19;
			case 0x1F7B8:
				return 0x1A;
			case 0x1F7B9:
				return 0x1F;
			case 0x1F7BA:
				return 0x24;
			case 0x1F7BB:
				return 0x1C;
			case 0x1F7BC:
				return 0x1D;
			case 0x1F7BD:
				return 0x1B;
			case 0x1F7BE:
				return 0x1C;
			case 0x1F7BF:
				return 0x21;
			case 0x1F7C0:
				return 0x1F;
			case 0x1F7C1:
				return 0x20;
			case 0x1F7C2:
				return 0x19;
			case 0x1F7C3:
				return 0x23;
			case 0x1F7C4:
				return 0x1E;
			case 0x1F7C5:
				return 0x1F;
			case 0x1F7C6:
				return 0x18;
			case 0x1F7C7:
				return 0x22;
			case 0x1F7C8:
				return 0x29;
			case 0x1F7C9:
				return 0x1E;
			case 0x1F7CA:
				return 0x1E;
			case 0x1F7CB:
				return 0x1E;
			case 0x1F7CC:
				return 0x1D;
			case 0x1F7CD:
				return 0x1A;
			case 0x1F7CE:
				return 0x20;
			case 0x1F7CF:
				return 0x1F;
			case 0x1F7D0:
				return 0x24;
			case 0x1F7D1:
				return 0x22;
			case 0x1F7D2:
				return 0x20;
			case 0x1F7D3:
				return 0x20;
			case 0x1F7D4:
				return 0x23;
			case 0x1F7D5:
				return 0x11;
			case 0x1F7D6:
				return 0x1A;
			case 0x1F7D7:
				return 0xF;
			case 0x1F7D8:
				return 0x18;
			case 0x1F7E0:
				return 0x14;
			case 0x1F7E1:
				return 0x14;
			case 0x1F7E2:
				return 0x13;
			case 0x1F7E3:
				return 0x14;
			case 0x1F7E4:
				return 0x13;
			case 0x1F7E5:
				return 0x11;
			case 0x1F7E6:
				return 0x12;
			case 0x1F7E7:
				return 0x14;
			case 0x1F7E8:
				return 0x14;
			case 0x1F7E9:
				return 0x13;
			case 0x1F7EA:
				return 0x14;
			case 0x1F7EB:
				return 0x13;
			case 0x1F800:
				return 0x2E;
			case 0x1F801:
				return 0x2C;
			case 0x1F802:
				return 0x2F;
			case 0x1F803:
				return 0x2E;
			case 0x1F804:
				return 0x2F;
			case 0x1F805:
				return 0x2D;
			case 0x1F806:
				return 0x30;
			case 0x1F807:
				return 0x2F;
			case 0x1F808:
				return 0x2E;
			case 0x1F809:
				return 0x2C;
			case 0x1F80A:
				return 0x2F;
			case 0x1F80B:
				return 0x2E;
			case 0x1F810:
				return 0x31;
			case 0x1F811:
				return 0x2F;
			case 0x1F812:
				return 0x32;
			case 0x1F813:
				return 0x31;
			case 0x1F814:
				return 0x2B;
			case 0x1F815:
				return 0x29;
			case 0x1F816:
				return 0x2C;
			case 0x1F817:
				return 0x2B;
			case 0x1F818:
				return 0x31;
			case 0x1F819:
				return 0x2F;
			case 0x1F81A:
				return 0x32;
			case 0x1F81B:
				return 0x31;
			case 0x1F81C:
				return 0x37;
			case 0x1F81D:
				return 0x35;
			case 0x1F81E:
				return 0x38;
			case 0x1F81F:
				return 0x37;
			case 0x1F820:
				return 0x32;
			case 0x1F821:
				return 0x30;
			case 0x1F822:
				return 0x33;
			case 0x1F823:
				return 0x32;
			case 0x1F824:
				return 0x32;
			case 0x1F825:
				return 0x30;
			case 0x1F826:
				return 0x33;
			case 0x1F827:
				return 0x32;
			case 0x1F828:
				return 0x30;
			case 0x1F829:
				return 0x2E;
			case 0x1F82A:
				return 0x31;
			case 0x1F82B:
				return 0x30;
			case 0x1F82C:
				return 0x31;
			case 0x1F82D:
				return 0x2F;
			case 0x1F82E:
				return 0x32;
			case 0x1F82F:
				return 0x31;
			case 0x1F830:
				return 0x36;
			case 0x1F831:
				return 0x34;
			case 0x1F832:
				return 0x37;
			case 0x1F833:
				return 0x36;
			case 0x1F834:
				return 0x1C;
			case 0x1F835:
				return 0x1A;
			case 0x1F836:
				return 0x1D;
			case 0x1F837:
				return 0x1C;
			case 0x1F838:
				return 0x18;
			case 0x1F839:
				return 0x16;
			case 0x1F83A:
				return 0x19;
			case 0x1F83B:
				return 0x18;
			case 0x1F83C:
				return 0x1B;
			case 0x1F83D:
				return 0x19;
			case 0x1F83E:
				return 0x1C;
			case 0x1F83F:
				return 0x1B;
			case 0x1F840:
				return 0x21;
			case 0x1F841:
				return 0x1F;
			case 0x1F842:
				return 0x22;
			case 0x1F843:
				return 0x21;
			case 0x1F844:
				return 0x16;
			case 0x1F845:
				return 0x14;
			case 0x1F846:
				return 0x17;
			case 0x1F847:
				return 0x16;
			case 0x1F850:
				return 0x1B;
			case 0x1F851:
				return 0x19;
			case 0x1F852:
				return 0x1C;
			case 0x1F853:
				return 0x1B;
			case 0x1F854:
				return 0x1C;
			case 0x1F855:
				return 0x1C;
			case 0x1F856:
				return 0x1C;
			case 0x1F857:
				return 0x1C;
			case 0x1F858:
				return 0x1C;
			case 0x1F859:
				return 0x19;
			case 0x1F860:
				return 0x27;
			case 0x1F861:
				return 0x25;
			case 0x1F862:
				return 0x28;
			case 0x1F863:
				return 0x27;
			case 0x1F864:
				return 0x28;
			case 0x1F865:
				return 0x28;
			case 0x1F866:
				return 0x28;
			case 0x1F867:
				return 0x28;
			case 0x1F868:
				return 0x21;
			case 0x1F869:
				return 0x1F;
			case 0x1F86A:
				return 0x22;
			case 0x1F86B:
				return 0x21;
			case 0x1F86C:
				return 0x22;
			case 0x1F86D:
				return 0x22;
			case 0x1F86E:
				return 0x22;
			case 0x1F86F:
				return 0x22;
			case 0x1F870:
				return 0x28;
			case 0x1F871:
				return 0x26;
			case 0x1F872:
				return 0x29;
			case 0x1F873:
				return 0x28;
			case 0x1F874:
				return 0x29;
			case 0x1F875:
				return 0x29;
			case 0x1F876:
				return 0x29;
			case 0x1F877:
				return 0x29;
			case 0x1F878:
				return 0x27;
			case 0x1F879:
				return 0x25;
			case 0x1F87A:
				return 0x28;
			case 0x1F87B:
				return 0x27;
			case 0x1F87C:
				return 0x28;
			case 0x1F87D:
				return 0x28;
			case 0x1F87E:
				return 0x28;
			case 0x1F87F:
				return 0x28;
			case 0x1F880:
				return 0x2C;
			case 0x1F881:
				return 0x2A;
			case 0x1F882:
				return 0x2D;
			case 0x1F883:
				return 0x2C;
			case 0x1F884:
				return 0x2D;
			case 0x1F885:
				return 0x2D;
			case 0x1F886:
				return 0x2D;
			case 0x1F887:
				return 0x2D;
			case 0x1F890:
				return 0x1D;
			case 0x1F891:
				return 0x1B;
			case 0x1F892:
				return 0x1E;
			case 0x1F893:
				return 0x1D;
			case 0x1F894:
				return 0x30;
			case 0x1F895:
				return 0x2E;
			case 0x1F896:
				return 0x31;
			case 0x1F897:
				return 0x30;
			case 0x1F898:
				return 0x22;
			case 0x1F899:
				return 0x20;
			case 0x1F89A:
				return 0x23;
			case 0x1F89B:
				return 0x22;
			case 0x1F89C:
				return 0x1C;
			case 0x1F89D:
				return 0x23;
			case 0x1F89E:
				return 0x21;
			case 0x1F89F:
				return 0x22;
			case 0x1F8A0:
				return 0x24;
			case 0x1F8A1:
				return 0x25;
			case 0x1F8A2:
				return 0x21;
			case 0x1F8A3:
				return 0x22;
			case 0x1F8A4:
				return 0x22;
			case 0x1F8A5:
				return 0x24;
			case 0x1F8A6:
				return 0x23;
			case 0x1F8A7:
				return 0x23;
			case 0x1F8A8:
				return 0x2B;
			case 0x1F8A9:
				return 0x2C;
			case 0x1F8AA:
				return 0x2C;
			case 0x1F8AB:
				return 0x2D;
			case 0x1F8AC:
				return 0x1C;
			case 0x1F8AD:
				return 0x23;
			case 0x1F8B0:
				return 0x27;
			case 0x1F8B1:
				return 0x32;
			case 0x1F900:
				return 0x24;
			case 0x1F901:
				return 0x23;
			case 0x1F902:
				return 0x15;
			case 0x1F903:
				return 0x20;
			case 0x1F904:
				return 0x21;
			case 0x1F905:
				return 0x1F;
			case 0x1F906:
				return 0x1A;
			case 0x1F907:
				return 0x11;
			case 0x1F908:
				return 0x15;
			case 0x1F909:
				return 0x1D;
			case 0x1F90A:
				return 0x1E;
			case 0x1F90B:
				return 0x26;
			case 0x1F90C:
				return 0x10;
			case 0x1F90D:
				return 0xC;
			case 0x1F90E:
				return 0xC;
			case 0x1F90F:
				return 0xE;
			case 0x1F910:
				return 0x12;
			case 0x1F911:
				return 0x11;
			case 0x1F912:
				return 0x16;
			case 0x1F913:
				return 0xA;
			case 0x1F914:
				return 0xE;
			case 0x1F915:
				return 0x17;
			case 0x1F916:
				return 0xB;
			case 0x1F917:
				return 0xD;
			case 0x1F918:
				return 0x12;
			case 0x1F919:
				return 0xD;
			case 0x1F91A:
				return 0x14;
			case 0x1F91B:
				return 0x11;
			case 0x1F91C:
				return 0x12;
			case 0x1F91D:
				return 0xA;
			case 0x1F91E:
				return 0x2B;
			case 0x1F91F:
				return 0x15;
			case 0x1F920:
				return 0x15;
			case 0x1F921:
				return 0xB;
			case 0x1F922:
				return 0xF;
			case 0x1F923:
				return 0x1E;
			case 0x1F924:
				return 0xE;
			case 0x1F925:
				return 0xB;
			case 0x1F926:
				return 0xA;
			case 0x1F927:
				return 0xE;
			case 0x1F928:
				return 0x1D;
			case 0x1F929:
				return 0x1D;
			case 0x1F92A:
				return 0x2F;
			case 0x1F92B:
				return 0x26;
			case 0x1F92C:
				return 0x29;
			case 0x1F92D:
				return 0x37;
			case 0x1F92E:
				return 0x1E;
			case 0x1F92F:
				return 0x21;
			case 0x1F930:
				return 0xF;
			case 0x1F931:
				return 0xF;
			case 0x1F932:
				return 0x12;
			case 0x1F933:
				return 0x7;
			case 0x1F934:
				return 0x7;
			case 0x1F935:
				return 0xE;
			case 0x1F936:
				return 0x11;
			case 0x1F937:
				return 0x6;
			case 0x1F938:
				return 0x17;
			case 0x1F939:
				return 0x9;
			case 0x1F93A:
				return 0x7;
			case 0x1F93B:
				return 0x12;
			case 0x1F93C:
				return 0xA;
			case 0x1F93D:
				return 0xB;
			case 0x1F93E:
				return 0x9;
			case 0x1F93F:
				return 0xC;
			case 0x1F940:
				return 0xE;
			case 0x1F941:
				return 0x15;
			case 0x1F942:
				return 0x11;
			case 0x1F943:
				return 0xE;
			case 0x1F944:
				return 0x6;
			case 0x1F945:
				return 0x9;
			case 0x1F946:
				return 0x6;
			case 0x1F947:
				return 0x12;
			case 0x1F948:
				return 0x13;
			case 0x1F949:
				return 0x12;
			case 0x1F94A:
				return 0xD;
			case 0x1F94B:
				return 0x15;
			case 0x1F94C:
				return 0xE;
			case 0x1F94D:
				return 0x18;
			case 0x1F94E:
				return 0x9;
			case 0x1F94F:
				return 0xC;
			case 0x1F950:
				return 0xA;
			case 0x1F951:
				return 0x8;
			case 0x1F952:
				return 0x9;
			case 0x1F953:
				return 0x6;
			case 0x1F954:
				return 0x7;
			case 0x1F955:
				return 0x7;
			case 0x1F956:
				return 0xF;
			case 0x1F957:
				return 0xC;
			case 0x1F958:
				return 0x14;
			case 0x1F959:
				return 0x12;
			case 0x1F95A:
				return 0x4;
			case 0x1F95B:
				return 0xE;
			case 0x1F95C:
				return 0x8;
			case 0x1F95D:
				return 0xA;
			case 0x1F95E:
				return 0x9;
			case 0x1F95F:
				return 0x9;
			case 0x1F960:
				return 0xF;
			case 0x1F961:
				return 0xC;
			case 0x1F962:
				return 0xB;
			case 0x1F963:
				return 0x10;
			case 0x1F964:
				return 0xF;
			case 0x1F965:
				return 0x8;
			case 0x1F966:
				return 0x9;
			case 0x1F967:
				return 0x4;
			case 0x1F968:
				return 0x8;
			case 0x1F969:
				return 0xC;
			case 0x1F96A:
				return 0x9;
			case 0x1F96B:
				return 0xC;
			case 0x1F96C:
				return 0xC;
			case 0x1F96D:
				return 0x6;
			case 0x1F96E:
				return 0xA;
			case 0x1F96F:
				return 0x6;
			case 0x1F970:
				return 0x30;
			case 0x1F971:
				return 0xD;
			case 0x1F972:
				return 0x17;
			case 0x1F973:
				return 0x23;
			case 0x1F974:
				return 0x25;
			case 0x1F975:
				return 0x10;
			case 0x1F976:
				return 0xE;
			case 0x1F977:
				return 0x6;
			case 0x1F978:
				return 0xF;
			case 0x1F97A:
				return 0x18;
			case 0x1F97B:
				return 0x5;
			case 0x1F97C:
				return 0x9;
			case 0x1F97D:
				return 0x8;
			case 0x1F97E:
				return 0xC;
			case 0x1F97F:
				return 0xA;
			case 0x1F980:
				return 0x5;
			case 0x1F981:
				return 0xA;
			case 0x1F982:
				return 0x9;
			case 0x1F983:
				return 0x7;
			case 0x1F984:
				return 0xD;
			case 0x1F985:
				return 0x6;
			case 0x1F986:
				return 0x5;
			case 0x1F987:
				return 0x4;
			case 0x1F988:
				return 0x6;
			case 0x1F989:
				return 0x4;
			case 0x1F98A:
				return 0x9;
			case 0x1F98B:
				return 0xA;
			case 0x1F98C:
				return 0x5;
			case 0x1F98D:
				return 0x8;
			case 0x1F98E:
				return 0x7;
			case 0x1F98F:
				return 0xB;
			case 0x1F990:
				return 0x7;
			case 0x1F991:
				return 0x6;
			case 0x1F992:
				return 0xD;
			case 0x1F993:
				return 0xB;
			case 0x1F994:
				return 0x9;
			case 0x1F995:
				return 0x9;
			case 0x1F996:
				return 0x6;
			case 0x1F997:
				return 0x8;
			case 0x1F998:
				return 0x9;
			case 0x1F999:
				return 0x6;
			case 0x1F99A:
				return 0x8;
			case 0x1F99B:
				return 0xD;
			case 0x1F99C:
				return 0x7;
			case 0x1F99D:
				return 0x8;
			case 0x1F99E:
				return 0x8;
			case 0x1F99F:
				return 0x9;
			case 0x1F9A0:
				return 0x8;
			case 0x1F9A1:
				return 0x7;
			case 0x1F9A2:
				return 0x5;
			case 0x1F9A3:
				return 0x8;
			case 0x1F9A4:
				return 0x5;
			case 0x1F9A5:
				return 0x6;
			case 0x1F9A6:
				return 0x6;
			case 0x1F9A7:
				return 0xA;
			case 0x1F9A8:
				return 0x6;
			case 0x1F9A9:
				return 0x9;
			case 0x1F9AA:
				return 0x7;
			case 0x1F9AB:
				return 0x7;
			case 0x1F9AC:
				return 0x6;
			case 0x1F9AD:
				return 0x5;
			case 0x1F9AE:
				return 0xA;
			case 0x1F9AF:
				return 0xD;
			case 0x1F9B0:
				return 0x19;
			case 0x1F9B1:
				return 0x1B;
			case 0x1F9B2:
				return 0x15;
			case 0x1F9B3:
				return 0x1B;
			case 0x1F9B4:
				return 0x5;
			case 0x1F9B5:
				return 0x4;
			case 0x1F9B6:
				return 0x5;
			case 0x1F9B7:
				return 0x6;
			case 0x1F9B8:
				return 0xA;
			case 0x1F9B9:
				return 0xD;
			case 0x1F9BA:
				return 0xC;
			case 0x1F9BB:
				return 0x15;
			case 0x1F9BC:
				return 0x15;
			case 0x1F9BD:
				return 0x12;
			case 0x1F9BE:
				return 0xF;
			case 0x1F9BF:
				return 0xF;
			case 0x1F9C0:
				return 0xD;
			case 0x1F9C1:
				return 0x8;
			case 0x1F9C2:
				return 0xC;
			case 0x1F9C3:
				return 0xD;
			case 0x1F9C4:
				return 0x7;
			case 0x1F9C5:
				return 0x6;
			case 0x1F9C6:
				return 0x8;
			case 0x1F9C7:
				return 0x7;
			case 0x1F9C8:
				return 0x7;
			case 0x1F9C9:
				return 0xB;
			case 0x1F9CA:
				return 0x9;
			case 0x1F9CB:
				return 0xB;
			case 0x1F9CD:
				return 0x10;
			case 0x1F9CE:
				return 0x10;
			case 0x1F9CF:
				return 0xC;
			case 0x1F9D0:
				return 0x12;
			case 0x1F9D1:
				return 0x6;
			case 0x1F9D2:
				return 0x6;
			case 0x1F9D3:
				return 0xC;
			case 0x1F9D4:
				return 0xF;
			case 0x1F9D5:
				return 0x16;
			case 0x1F9D6:
				return 0x16;
			case 0x1F9D7:
				return 0x10;
			case 0x1F9D8:
				return 0x19;
			case 0x1F9D9:
				return 0x5;
			case 0x1F9DA:
				return 0x6;
			case 0x1F9DB:
				return 0x8;
			case 0x1F9DC:
				return 0xA;
			case 0x1F9DD:
				return 0x4;
			case 0x1F9DE:
				return 0x6;
			case 0x1F9DF:
				return 0x7;
			case 0x1F9E0:
				return 0x6;
			case 0x1F9E1:
				return 0xD;
			case 0x1F9E2:
				return 0xB;
			case 0x1F9E3:
				return 0x6;
			case 0x1F9E4:
				return 0x7;
			case 0x1F9E5:
				return 0x5;
			case 0x1F9E6:
				return 0x6;
			case 0x1F9E7:
				return 0x12;
			case 0x1F9E8:
				return 0xC;
			case 0x1F9E9:
				return 0x14;
			case 0x1F9EA:
				return 0xA;
			case 0x1F9EB:
				return 0xB;
			case 0x1F9EC:
				return 0x11;
			case 0x1F9ED:
				return 0x8;
			case 0x1F9EE:
				return 0x7;
			case 0x1F9EF:
				return 0x12;
			case 0x1F9F0:
				return 0x8;
			case 0x1F9F1:
				return 0x6;
			case 0x1F9F2:
				return 0x7;
			case 0x1F9F3:
				return 0x8;
			case 0x1F9F4:
				return 0xE;
			case 0x1F9F5:
				return 0x10;
			case 0x1F9F6:
				return 0xD;
			case 0x1F9F7:
				return 0xB;
			case 0x1F9F8:
				return 0xB;
			case 0x1F9F9:
				return 0x6;
			case 0x1F9FA:
				return 0x7;
			case 0x1F9FB:
				return 0xE;
			case 0x1F9FC:
				return 0xC;
			case 0x1F9FD:
				return 0x7;
			case 0x1F9FE:
				return 0x8;
			case 0x1F9FF:
				return 0xD;
			case 0x1FA00:
				return 0x13;
			case 0x1FA01:
				return 0x14;
			case 0x1FA02:
				return 0x13;
			case 0x1FA03:
				return 0x15;
			case 0x1FA04:
				return 0x15;
			case 0x1FA05:
				return 0x13;
			case 0x1FA06:
				return 0x2E;
			case 0x1FA07:
				return 0x2E;
			case 0x1FA08:
				return 0x30;
			case 0x1FA09:
				return 0x28;
			case 0x1FA0A:
				return 0x29;
			case 0x1FA0B:
				return 0x28;
			case 0x1FA0C:
				return 0x2A;
			case 0x1FA0D:
				return 0x2A;
			case 0x1FA0E:
				return 0x28;
			case 0x1FA0F:
				return 0x28;
			case 0x1FA10:
				return 0x29;
			case 0x1FA11:
				return 0x28;
			case 0x1FA12:
				return 0x2A;
			case 0x1FA13:
				return 0x2A;
			case 0x1FA14:
				return 0x28;
			case 0x1FA15:
				return 0x2A;
			case 0x1FA16:
				return 0x2B;
			case 0x1FA17:
				return 0x2A;
			case 0x1FA18:
				return 0x2C;
			case 0x1FA19:
				return 0x2C;
			case 0x1FA1A:
				return 0x2A;
			case 0x1FA1B:
				return 0x3B;
			case 0x1FA1C:
				return 0x3B;
			case 0x1FA1D:
				return 0x3D;
			case 0x1FA1E:
				return 0x18;
			case 0x1FA1F:
				return 0x19;
			case 0x1FA20:
				return 0x18;
			case 0x1FA21:
				return 0x1A;
			case 0x1FA22:
				return 0x1A;
			case 0x1FA23:
				return 0x18;
			case 0x1FA24:
				return 0x18;
			case 0x1FA25:
				return 0x19;
			case 0x1FA26:
				return 0x18;
			case 0x1FA27:
				return 0x1A;
			case 0x1FA28:
				return 0x1A;
			case 0x1FA29:
				return 0x18;
			case 0x1FA2A:
				return 0x1A;
			case 0x1FA2B:
				return 0x1B;
			case 0x1FA2C:
				return 0x1A;
			case 0x1FA2D:
				return 0x1C;
			case 0x1FA2E:
				return 0x1C;
			case 0x1FA2F:
				return 0x1A;
			case 0x1FA30:
				return 0x3B;
			case 0x1FA31:
				return 0x3B;
			case 0x1FA32:
				return 0x3D;
			case 0x1FA33:
				return 0x35;
			case 0x1FA34:
				return 0x36;
			case 0x1FA35:
				return 0x35;
			case 0x1FA36:
				return 0x37;
			case 0x1FA37:
				return 0x37;
			case 0x1FA38:
				return 0x35;
			case 0x1FA39:
				return 0x35;
			case 0x1FA3A:
				return 0x36;
			case 0x1FA3B:
				return 0x35;
			case 0x1FA3C:
				return 0x37;
			case 0x1FA3D:
				return 0x37;
			case 0x1FA3E:
				return 0x35;
			case 0x1FA3F:
				return 0x37;
			case 0x1FA40:
				return 0x38;
			case 0x1FA41:
				return 0x37;
			case 0x1FA42:
				return 0x39;
			case 0x1FA43:
				return 0x39;
			case 0x1FA44:
				return 0x37;
			case 0x1FA45:
				return 0x39;
			case 0x1FA46:
				return 0x39;
			case 0x1FA47:
				return 0x3B;
			case 0x1FA48:
				return 0x17;
			case 0x1FA49:
				return 0x17;
			case 0x1FA4A:
				return 0x19;
			case 0x1FA4B:
				return 0x2E;
			case 0x1FA4C:
				return 0x2E;
			case 0x1FA4D:
				return 0x30;
			case 0x1FA4E:
				return 0x19;
			case 0x1FA4F:
				return 0x18;
			case 0x1FA50:
				return 0x1A;
			case 0x1FA51:
				return 0x19;
			case 0x1FA52:
				return 0x18;
			case 0x1FA53:
				return 0x1A;
			case 0x1FA60:
				return 0x14;
			case 0x1FA61:
				return 0x15;
			case 0x1FA62:
				return 0x15;
			case 0x1FA63:
				return 0x12;
			case 0x1FA64:
				return 0x14;
			case 0x1FA65:
				return 0x13;
			case 0x1FA66:
				return 0x14;
			case 0x1FA67:
				return 0x16;
			case 0x1FA68:
				return 0x17;
			case 0x1FA69:
				return 0x17;
			case 0x1FA6A:
				return 0x14;
			case 0x1FA6B:
				return 0x16;
			case 0x1FA6C:
				return 0x15;
			case 0x1FA6D:
				return 0x16;
			case 0x1FA70:
				return 0xD;
			case 0x1FA71:
				return 0x13;
			case 0x1FA72:
				return 0x7;
			case 0x1FA73:
				return 0x7;
			case 0x1FA74:
				return 0xD;
			case 0x1FA78:
				return 0xE;
			case 0x1FA79:
				return 0x11;
			case 0x1FA7A:
				return 0xC;
			case 0x1FA80:
				return 0x6;
			case 0x1FA81:
				return 0x5;
			case 0x1FA82:
				return 0xA;
			case 0x1FA83:
				return 0xA;
			case 0x1FA84:
				return 0xB;
			case 0x1FA85:
				return 0x7;
			case 0x1FA86:
				return 0xE;
			case 0x1FA90:
				return 0xE;
			case 0x1FA91:
				return 0x6;
			case 0x1FA92:
				return 0x6;
			case 0x1FA93:
				return 0x4;
			case 0x1FA94:
				return 0xA;
			case 0x1FA95:
				return 0x6;
			case 0x1FA96:
				return 0x10;
			case 0x1FA97:
				return 0xA;
			case 0x1FA98:
				return 0xA;
			case 0x1FA99:
				return 0x5;
			case 0x1FA9A:
				return 0xE;
			case 0x1FA9B:
				return 0xC;
			case 0x1FA9C:
				return 0x7;
			case 0x1FA9D:
				return 0x5;
			case 0x1FA9E:
				return 0x7;
			case 0x1FA9F:
				return 0x7;
			case 0x1FAA0:
				return 0x8;
			case 0x1FAA1:
				return 0xE;
			case 0x1FAA2:
				return 0x5;
			case 0x1FAA3:
				return 0x7;
			case 0x1FAA4:
				return 0xB;
			case 0x1FAA5:
				return 0xB;
			case 0x1FAA6:
				return 0xA;
			case 0x1FAA7:
				return 0x8;
			case 0x1FAA8:
				return 0x5;
			case 0x1FAB0:
				return 0x4;
			case 0x1FAB1:
				return 0x5;
			case 0x1FAB2:
				return 0x7;
			case 0x1FAB3:
				return 0xA;
			case 0x1FAB4:
				return 0xD;
			case 0x1FAB5:
				return 0x5;
			case 0x1FAB6:
				return 0x8;
			case 0x1FAC0:
				return 0x11;
			case 0x1FAC1:
				return 0x6;
			case 0x1FAC2:
				return 0xF;
			case 0x1FAD0:
				return 0xC;
			case 0x1FAD1:
				return 0xC;
			case 0x1FAD2:
				return 0x6;
			case 0x1FAD3:
				return 0xA;
			case 0x1FAD4:
				return 0x7;
			case 0x1FAD5:
				return 0x7;
			case 0x1FAD6:
				return 0x7;
			case 0x1FB00:
				return 0x10;
			case 0x1FB01:
				return 0x10;
			case 0x1FB02:
				return 0x11;
			case 0x1FB03:
				return 0x10;
			case 0x1FB04:
				return 0x11;
			case 0x1FB05:
				return 0x11;
			case 0x1FB06:
				return 0x12;
			case 0x1FB07:
				return 0x10;
			case 0x1FB08:
				return 0x11;
			case 0x1FB09:
				return 0x11;
			case 0x1FB0A:
				return 0x12;
			case 0x1FB0B:
				return 0x11;
			case 0x1FB0C:
				return 0x12;
			case 0x1FB0D:
				return 0x12;
			case 0x1FB0E:
				return 0x13;
			case 0x1FB0F:
				return 0x10;
			case 0x1FB10:
				return 0x11;
			case 0x1FB11:
				return 0x11;
			case 0x1FB12:
				return 0x12;
			case 0x1FB13:
				return 0x11;
			case 0x1FB14:
				return 0x12;
			case 0x1FB15:
				return 0x13;
			case 0x1FB16:
				return 0x11;
			case 0x1FB17:
				return 0x12;
			case 0x1FB18:
				return 0x12;
			case 0x1FB19:
				return 0x13;
			case 0x1FB1A:
				return 0x12;
			case 0x1FB1B:
				return 0x13;
			case 0x1FB1C:
				return 0x13;
			case 0x1FB1D:
				return 0x14;
			case 0x1FB1E:
				return 0x10;
			case 0x1FB1F:
				return 0x11;
			case 0x1FB20:
				return 0x11;
			case 0x1FB21:
				return 0x12;
			case 0x1FB22:
				return 0x11;
			case 0x1FB23:
				return 0x12;
			case 0x1FB24:
				return 0x12;
			case 0x1FB25:
				return 0x13;
			case 0x1FB26:
				return 0x11;
			case 0x1FB27:
				return 0x12;
			case 0x1FB28:
				return 0x13;
			case 0x1FB29:
				return 0x12;
			case 0x1FB2A:
				return 0x13;
			case 0x1FB2B:
				return 0x13;
			case 0x1FB2C:
				return 0x14;
			case 0x1FB2D:
				return 0x11;
			case 0x1FB2E:
				return 0x12;
			case 0x1FB2F:
				return 0x12;
			case 0x1FB30:
				return 0x13;
			case 0x1FB31:
				return 0x12;
			case 0x1FB32:
				return 0x13;
			case 0x1FB33:
				return 0x13;
			case 0x1FB34:
				return 0x14;
			case 0x1FB35:
				return 0x12;
			case 0x1FB36:
				return 0x13;
			case 0x1FB37:
				return 0x13;
			case 0x1FB38:
				return 0x14;
			case 0x1FB39:
				return 0x13;
			case 0x1FB3A:
				return 0x14;
			case 0x1FB3B:
				return 0x14;
			case 0x1FB3C:
				return 0x3C;
			case 0x1FB3D:
				return 0x3B;
			case 0x1FB3E:
				return 0x3C;
			case 0x1FB3F:
				return 0x3B;
			case 0x1FB40:
				return 0x35;
			case 0x1FB41:
				return 0x3D;
			case 0x1FB42:
				return 0x3C;
			case 0x1FB43:
				return 0x3D;
			case 0x1FB44:
				return 0x3C;
			case 0x1FB45:
				return 0x36;
			case 0x1FB46:
				return 0x43;
			case 0x1FB47:
				return 0x3E;
			case 0x1FB48:
				return 0x3C;
			case 0x1FB49:
				return 0x3E;
			case 0x1FB4A:
				return 0x3C;
			case 0x1FB4B:
				return 0x37;
			case 0x1FB4C:
				return 0x3D;
			case 0x1FB4D:
				return 0x3B;
			case 0x1FB4E:
				return 0x3D;
			case 0x1FB4F:
				return 0x3B;
			case 0x1FB50:
				return 0x36;
			case 0x1FB51:
				return 0x42;
			case 0x1FB52:
				return 0x3D;
			case 0x1FB53:
				return 0x3C;
			case 0x1FB54:
				return 0x3D;
			case 0x1FB55:
				return 0x3C;
			case 0x1FB56:
				return 0x36;
			case 0x1FB57:
				return 0x3C;
			case 0x1FB58:
				return 0x3B;
			case 0x1FB59:
				return 0x3C;
			case 0x1FB5A:
				return 0x3B;
			case 0x1FB5B:
				return 0x35;
			case 0x1FB5C:
				return 0x42;
			case 0x1FB5D:
				return 0x3D;
			case 0x1FB5E:
				return 0x3B;
			case 0x1FB5F:
				return 0x3D;
			case 0x1FB60:
				return 0x3B;
			case 0x1FB61:
				return 0x36;
			case 0x1FB62:
				return 0x3E;
			case 0x1FB63:
				return 0x3C;
			case 0x1FB64:
				return 0x3E;
			case 0x1FB65:
				return 0x3C;
			case 0x1FB66:
				return 0x37;
			case 0x1FB67:
				return 0x43;
			case 0x1FB68:
				return 0x3A;
			case 0x1FB69:
				return 0x39;
			case 0x1FB6A:
				return 0x39;
			case 0x1FB6B:
				return 0x39;
			case 0x1FB6C:
				return 0x22;
			case 0x1FB6D:
				return 0x23;
			case 0x1FB6E:
				return 0x23;
			case 0x1FB6F:
				return 0x23;
			case 0x1FB70:
				return 0x1C;
			case 0x1FB71:
				return 0x1C;
			case 0x1FB72:
				return 0x1C;
			case 0x1FB73:
				return 0x1C;
			case 0x1FB74:
				return 0x1C;
			case 0x1FB75:
				return 0x1C;
			case 0x1FB76:
				return 0x1E;
			case 0x1FB77:
				return 0x1E;
			case 0x1FB78:
				return 0x1E;
			case 0x1FB79:
				return 0x1E;
			case 0x1FB7A:
				return 0x1E;
			case 0x1FB7B:
				return 0x1E;
			case 0x1FB7C:
				return 0x20;
			case 0x1FB7D:
				return 0x20;
			case 0x1FB7E:
				return 0x21;
			case 0x1FB7F:
				return 0x21;
			case 0x1FB80:
				return 0x21;
			case 0x1FB81:
				return 0x21;
			case 0x1FB82:
				return 0x18;
			case 0x1FB83:
				return 0x1A;
			case 0x1FB84:
				return 0x19;
			case 0x1FB85:
				return 0x1B;
			case 0x1FB86:
				return 0x1A;
			case 0x1FB87:
				return 0x18;
			case 0x1FB88:
				return 0x1A;
			case 0x1FB89:
				return 0x19;
			case 0x1FB8A:
				return 0x1B;
			case 0x1FB8B:
				return 0x1A;
			case 0x1FB8C:
				return 0x17;
			case 0x1FB8D:
				return 0x18;
			case 0x1FB8E:
				return 0x18;
			case 0x1FB8F:
				return 0x18;
			case 0x1FB90:
				return 0x15;
			case 0x1FB91:
				return 0x35;
			case 0x1FB92:
				return 0x35;
			case 0x1FB94:
				return 0x34;
			case 0x1FB95:
				return 0x13;
			case 0x1FB96:
				return 0x1B;
			case 0x1FB97:
				return 0x16;
			case 0x1FB98:
				return 0x1F;
			case 0x1FB99:
				return 0x1F;
			case 0x1FB9A:
				return 0x26;
			case 0x1FB9B:
				return 0x25;
			case 0x1FB9C:
				return 0x23;
			case 0x1FB9D:
				return 0x24;
			case 0x1FB9E:
				return 0x24;
			case 0x1FB9F:
				return 0x23;
			case 0x1FBA0:
				return 0x38;
			case 0x1FBA1:
				return 0x39;
			case 0x1FBA2:
				return 0x38;
			case 0x1FBA3:
				return 0x39;
			case 0x1FBA4:
				return 0x48;
			case 0x1FBA5:
				return 0x49;
			case 0x1FBA6:
				return 0x48;
			case 0x1FBA7:
				return 0x48;
			case 0x1FBA8:
				return 0x59;
			case 0x1FBA9:
				return 0x59;
			case 0x1FBAA:
				return 0x58;
			case 0x1FBAB:
				return 0x58;
			case 0x1FBAC:
				return 0x58;
			case 0x1FBAD:
				return 0x58;
			case 0x1FBAE:
				return 0x24;
			case 0x1FBAF:
				return 0x33;
			case 0x1FBB0:
				return 0x19;
			case 0x1FBB1:
				return 0x13;
			case 0x1FBB2:
				return 0x16;
			case 0x1FBB3:
				return 0x17;
			case 0x1FBB4:
				return 0x2B;
			case 0x1FBB5:
				return 0x35;
			case 0x1FBB6:
				return 0x36;
			case 0x1FBB7:
				return 0x2B;
			case 0x1FBB8:
				return 0x29;
			case 0x1FBB9:
				return 0x11;
			case 0x1FBBA:
				return 0x12;
			case 0x1FBBB:
				return 0x13;
			case 0x1FBBC:
				return 0x17;
			case 0x1FBBD:
				return 0x18;
			case 0x1FBBE:
				return 0x2F;
			case 0x1FBBF:
				return 0x1A;
			case 0x1FBC0:
				return 0x29;
			case 0x1FBC1:
				return 0x26;
			case 0x1FBC2:
				return 0x28;
			case 0x1FBC3:
				return 0x27;
			case 0x1FBC4:
				return 0x1F;
			case 0x1FBC5:
				return 0xD;
			case 0x1FBC6:
				return 0x1E;
			case 0x1FBC7:
				return 0x1A;
			case 0x1FBC8:
				return 0x1B;
			case 0x1FBC9:
				return 0x18;
			case 0x1FBCA:
				return 0x1A;
			case 0x1FBF0:
				return 0x15;
			case 0x1FBF1:
				return 0x14;
			case 0x1FBF2:
				return 0x14;
			case 0x1FBF3:
				return 0x16;
			case 0x1FBF4:
				return 0x15;
			case 0x1FBF5:
				return 0x15;
			case 0x1FBF6:
				return 0x14;
			case 0x1FBF7:
				return 0x16;
			case 0x1FBF8:
				return 0x16;
			case 0x1FBF9:
				return 0x15;
			case 0x20000:
				return 0x23;
			case 0x2A6DD:
				return 0x22;
			case 0x2A700:
				return 0x23;
			case 0x2B734:
				return 0x22;
			case 0x2B740:
				return 0x23;
			case 0x2B81D:
				return 0x22;
			case 0x2B820:
				return 0x23;
			case 0x2CEA1:
				return 0x22;
			case 0x2CEB0:
				return 0x23;
			case 0x2EBE0:
				return 0x22;
			case 0x2F800:
				return 0x22;
			case 0x2F801:
				return 0x22;
			case 0x2F802:
				return 0x22;
			case 0x2F803:
				return 0x22;
			case 0x2F804:
				return 0x22;
			case 0x2F805:
				return 0x22;
			case 0x2F806:
				return 0x22;
			case 0x2F807:
				return 0x22;
			case 0x2F808:
				return 0x22;
			case 0x2F809:
				return 0x22;
			case 0x2F80A:
				return 0x22;
			case 0x2F80B:
				return 0x22;
			case 0x2F80C:
				return 0x22;
			case 0x2F80D:
				return 0x22;
			case 0x2F80E:
				return 0x22;
			case 0x2F80F:
				return 0x22;
			case 0x2F810:
				return 0x22;
			case 0x2F811:
				return 0x22;
			case 0x2F812:
				return 0x22;
			case 0x2F813:
				return 0x22;
			case 0x2F814:
				return 0x22;
			case 0x2F815:
				return 0x22;
			case 0x2F816:
				return 0x22;
			case 0x2F817:
				return 0x22;
			case 0x2F818:
				return 0x22;
			case 0x2F819:
				return 0x22;
			case 0x2F81A:
				return 0x22;
			case 0x2F81B:
				return 0x22;
			case 0x2F81C:
				return 0x22;
			case 0x2F81D:
				return 0x22;
			case 0x2F81E:
				return 0x22;
			case 0x2F81F:
				return 0x22;
			case 0x2F820:
				return 0x22;
			case 0x2F821:
				return 0x22;
			case 0x2F822:
				return 0x22;
			case 0x2F823:
				return 0x22;
			case 0x2F824:
				return 0x22;
			case 0x2F825:
				return 0x22;
			case 0x2F826:
				return 0x22;
			case 0x2F827:
				return 0x22;
			case 0x2F828:
				return 0x22;
			case 0x2F829:
				return 0x22;
			case 0x2F82A:
				return 0x22;
			case 0x2F82B:
				return 0x22;
			case 0x2F82C:
				return 0x22;
			case 0x2F82D:
				return 0x22;
			case 0x2F82E:
				return 0x22;
			case 0x2F82F:
				return 0x22;
			case 0x2F830:
				return 0x22;
			case 0x2F831:
				return 0x22;
			case 0x2F832:
				return 0x22;
			case 0x2F833:
				return 0x22;
			case 0x2F834:
				return 0x22;
			case 0x2F835:
				return 0x22;
			case 0x2F836:
				return 0x22;
			case 0x2F837:
				return 0x22;
			case 0x2F838:
				return 0x22;
			case 0x2F839:
				return 0x22;
			case 0x2F83A:
				return 0x22;
			case 0x2F83B:
				return 0x22;
			case 0x2F83C:
				return 0x22;
			case 0x2F83D:
				return 0x22;
			case 0x2F83E:
				return 0x22;
			case 0x2F83F:
				return 0x22;
			case 0x2F840:
				return 0x22;
			case 0x2F841:
				return 0x22;
			case 0x2F842:
				return 0x22;
			case 0x2F843:
				return 0x22;
			case 0x2F844:
				return 0x22;
			case 0x2F845:
				return 0x22;
			case 0x2F846:
				return 0x22;
			case 0x2F847:
				return 0x22;
			case 0x2F848:
				return 0x22;
			case 0x2F849:
				return 0x22;
			case 0x2F84A:
				return 0x22;
			case 0x2F84B:
				return 0x22;
			case 0x2F84C:
				return 0x22;
			case 0x2F84D:
				return 0x22;
			case 0x2F84E:
				return 0x22;
			case 0x2F84F:
				return 0x22;
			case 0x2F850:
				return 0x22;
			case 0x2F851:
				return 0x22;
			case 0x2F852:
				return 0x22;
			case 0x2F853:
				return 0x22;
			case 0x2F854:
				return 0x22;
			case 0x2F855:
				return 0x22;
			case 0x2F856:
				return 0x22;
			case 0x2F857:
				return 0x22;
			case 0x2F858:
				return 0x22;
			case 0x2F859:
				return 0x22;
			case 0x2F85A:
				return 0x22;
			case 0x2F85B:
				return 0x22;
			case 0x2F85C:
				return 0x22;
			case 0x2F85D:
				return 0x22;
			case 0x2F85E:
				return 0x22;
			case 0x2F85F:
				return 0x22;
			case 0x2F860:
				return 0x22;
			case 0x2F861:
				return 0x22;
			case 0x2F862:
				return 0x22;
			case 0x2F863:
				return 0x22;
			case 0x2F864:
				return 0x22;
			case 0x2F865:
				return 0x22;
			case 0x2F866:
				return 0x22;
			case 0x2F867:
				return 0x22;
			case 0x2F868:
				return 0x22;
			case 0x2F869:
				return 0x22;
			case 0x2F86A:
				return 0x22;
			case 0x2F86B:
				return 0x22;
			case 0x2F86C:
				return 0x22;
			case 0x2F86D:
				return 0x22;
			case 0x2F86E:
				return 0x22;
			case 0x2F86F:
				return 0x22;
			case 0x2F870:
				return 0x22;
			case 0x2F871:
				return 0x22;
			case 0x2F872:
				return 0x22;
			case 0x2F873:
				return 0x22;
			case 0x2F874:
				return 0x22;
			case 0x2F875:
				return 0x22;
			case 0x2F876:
				return 0x22;
			case 0x2F877:
				return 0x22;
			case 0x2F878:
				return 0x22;
			case 0x2F879:
				return 0x22;
			case 0x2F87A:
				return 0x22;
			case 0x2F87B:
				return 0x22;
			case 0x2F87C:
				return 0x22;
			case 0x2F87D:
				return 0x22;
			case 0x2F87E:
				return 0x22;
			case 0x2F87F:
				return 0x22;
			case 0x2F880:
				return 0x22;
			case 0x2F881:
				return 0x22;
			case 0x2F882:
				return 0x22;
			case 0x2F883:
				return 0x22;
			case 0x2F884:
				return 0x22;
			case 0x2F885:
				return 0x22;
			case 0x2F886:
				return 0x22;
			case 0x2F887:
				return 0x22;
			case 0x2F888:
				return 0x22;
			case 0x2F889:
				return 0x22;
			case 0x2F88A:
				return 0x22;
			case 0x2F88B:
				return 0x22;
			case 0x2F88C:
				return 0x22;
			case 0x2F88D:
				return 0x22;
			case 0x2F88E:
				return 0x22;
			case 0x2F88F:
				return 0x22;
			case 0x2F890:
				return 0x22;
			case 0x2F891:
				return 0x22;
			case 0x2F892:
				return 0x22;
			case 0x2F893:
				return 0x22;
			case 0x2F894:
				return 0x22;
			case 0x2F895:
				return 0x22;
			case 0x2F896:
				return 0x22;
			case 0x2F897:
				return 0x22;
			case 0x2F898:
				return 0x22;
			case 0x2F899:
				return 0x22;
			case 0x2F89A:
				return 0x22;
			case 0x2F89B:
				return 0x22;
			case 0x2F89C:
				return 0x22;
			case 0x2F89D:
				return 0x22;
			case 0x2F89E:
				return 0x22;
			case 0x2F89F:
				return 0x22;
			case 0x2F8A0:
				return 0x22;
			case 0x2F8A1:
				return 0x22;
			case 0x2F8A2:
				return 0x22;
			case 0x2F8A3:
				return 0x22;
			case 0x2F8A4:
				return 0x22;
			case 0x2F8A5:
				return 0x22;
			case 0x2F8A6:
				return 0x22;
			case 0x2F8A7:
				return 0x22;
			case 0x2F8A8:
				return 0x22;
			case 0x2F8A9:
				return 0x22;
			case 0x2F8AA:
				return 0x22;
			case 0x2F8AB:
				return 0x22;
			case 0x2F8AC:
				return 0x22;
			case 0x2F8AD:
				return 0x22;
			case 0x2F8AE:
				return 0x22;
			case 0x2F8AF:
				return 0x22;
			case 0x2F8B0:
				return 0x22;
			case 0x2F8B1:
				return 0x22;
			case 0x2F8B2:
				return 0x22;
			case 0x2F8B3:
				return 0x22;
			case 0x2F8B4:
				return 0x22;
			case 0x2F8B5:
				return 0x22;
			case 0x2F8B6:
				return 0x22;
			case 0x2F8B7:
				return 0x22;
			case 0x2F8B8:
				return 0x22;
			case 0x2F8B9:
				return 0x22;
			case 0x2F8BA:
				return 0x22;
			case 0x2F8BB:
				return 0x22;
			case 0x2F8BC:
				return 0x22;
			case 0x2F8BD:
				return 0x22;
			case 0x2F8BE:
				return 0x22;
			case 0x2F8BF:
				return 0x22;
			case 0x2F8C0:
				return 0x22;
			case 0x2F8C1:
				return 0x22;
			case 0x2F8C2:
				return 0x22;
			case 0x2F8C3:
				return 0x22;
			case 0x2F8C4:
				return 0x22;
			case 0x2F8C5:
				return 0x22;
			case 0x2F8C6:
				return 0x22;
			case 0x2F8C7:
				return 0x22;
			case 0x2F8C8:
				return 0x22;
			case 0x2F8C9:
				return 0x22;
			case 0x2F8CA:
				return 0x22;
			case 0x2F8CB:
				return 0x22;
			case 0x2F8CC:
				return 0x22;
			case 0x2F8CD:
				return 0x22;
			case 0x2F8CE:
				return 0x22;
			case 0x2F8CF:
				return 0x22;
			case 0x2F8D0:
				return 0x22;
			case 0x2F8D1:
				return 0x22;
			case 0x2F8D2:
				return 0x22;
			case 0x2F8D3:
				return 0x22;
			case 0x2F8D4:
				return 0x22;
			case 0x2F8D5:
				return 0x22;
			case 0x2F8D6:
				return 0x22;
			case 0x2F8D7:
				return 0x22;
			case 0x2F8D8:
				return 0x22;
			case 0x2F8D9:
				return 0x22;
			case 0x2F8DA:
				return 0x22;
			case 0x2F8DB:
				return 0x22;
			case 0x2F8DC:
				return 0x22;
			case 0x2F8DD:
				return 0x22;
			case 0x2F8DE:
				return 0x22;
			case 0x2F8DF:
				return 0x22;
			case 0x2F8E0:
				return 0x22;
			case 0x2F8E1:
				return 0x22;
			case 0x2F8E2:
				return 0x22;
			case 0x2F8E3:
				return 0x22;
			case 0x2F8E4:
				return 0x22;
			case 0x2F8E5:
				return 0x22;
			case 0x2F8E6:
				return 0x22;
			case 0x2F8E7:
				return 0x22;
			case 0x2F8E8:
				return 0x22;
			case 0x2F8E9:
				return 0x22;
			case 0x2F8EA:
				return 0x22;
			case 0x2F8EB:
				return 0x22;
			case 0x2F8EC:
				return 0x22;
			case 0x2F8ED:
				return 0x22;
			case 0x2F8EE:
				return 0x22;
			case 0x2F8EF:
				return 0x22;
			case 0x2F8F0:
				return 0x22;
			case 0x2F8F1:
				return 0x22;
			case 0x2F8F2:
				return 0x22;
			case 0x2F8F3:
				return 0x22;
			case 0x2F8F4:
				return 0x22;
			case 0x2F8F5:
				return 0x22;
			case 0x2F8F6:
				return 0x22;
			case 0x2F8F7:
				return 0x22;
			case 0x2F8F8:
				return 0x22;
			case 0x2F8F9:
				return 0x22;
			case 0x2F8FA:
				return 0x22;
			case 0x2F8FB:
				return 0x22;
			case 0x2F8FC:
				return 0x22;
			case 0x2F8FD:
				return 0x22;
			case 0x2F8FE:
				return 0x22;
			case 0x2F8FF:
				return 0x22;
			case 0x2F900:
				return 0x22;
			case 0x2F901:
				return 0x22;
			case 0x2F902:
				return 0x22;
			case 0x2F903:
				return 0x22;
			case 0x2F904:
				return 0x22;
			case 0x2F905:
				return 0x22;
			case 0x2F906:
				return 0x22;
			case 0x2F907:
				return 0x22;
			case 0x2F908:
				return 0x22;
			case 0x2F909:
				return 0x22;
			case 0x2F90A:
				return 0x22;
			case 0x2F90B:
				return 0x22;
			case 0x2F90C:
				return 0x22;
			case 0x2F90D:
				return 0x22;
			case 0x2F90E:
				return 0x22;
			case 0x2F90F:
				return 0x22;
			case 0x2F910:
				return 0x22;
			case 0x2F911:
				return 0x22;
			case 0x2F912:
				return 0x22;
			case 0x2F913:
				return 0x22;
			case 0x2F914:
				return 0x22;
			case 0x2F915:
				return 0x22;
			case 0x2F916:
				return 0x22;
			case 0x2F917:
				return 0x22;
			case 0x2F918:
				return 0x22;
			case 0x2F919:
				return 0x22;
			case 0x2F91A:
				return 0x22;
			case 0x2F91B:
				return 0x22;
			case 0x2F91C:
				return 0x22;
			case 0x2F91D:
				return 0x22;
			case 0x2F91E:
				return 0x22;
			case 0x2F91F:
				return 0x22;
			case 0x2F920:
				return 0x22;
			case 0x2F921:
				return 0x22;
			case 0x2F922:
				return 0x22;
			case 0x2F923:
				return 0x22;
			case 0x2F924:
				return 0x22;
			case 0x2F925:
				return 0x22;
			case 0x2F926:
				return 0x22;
			case 0x2F927:
				return 0x22;
			case 0x2F928:
				return 0x22;
			case 0x2F929:
				return 0x22;
			case 0x2F92A:
				return 0x22;
			case 0x2F92B:
				return 0x22;
			case 0x2F92C:
				return 0x22;
			case 0x2F92D:
				return 0x22;
			case 0x2F92E:
				return 0x22;
			case 0x2F92F:
				return 0x22;
			case 0x2F930:
				return 0x22;
			case 0x2F931:
				return 0x22;
			case 0x2F932:
				return 0x22;
			case 0x2F933:
				return 0x22;
			case 0x2F934:
				return 0x22;
			case 0x2F935:
				return 0x22;
			case 0x2F936:
				return 0x22;
			case 0x2F937:
				return 0x22;
			case 0x2F938:
				return 0x22;
			case 0x2F939:
				return 0x22;
			case 0x2F93A:
				return 0x22;
			case 0x2F93B:
				return 0x22;
			case 0x2F93C:
				return 0x22;
			case 0x2F93D:
				return 0x22;
			case 0x2F93E:
				return 0x22;
			case 0x2F93F:
				return 0x22;
			case 0x2F940:
				return 0x22;
			case 0x2F941:
				return 0x22;
			case 0x2F942:
				return 0x22;
			case 0x2F943:
				return 0x22;
			case 0x2F944:
				return 0x22;
			case 0x2F945:
				return 0x22;
			case 0x2F946:
				return 0x22;
			case 0x2F947:
				return 0x22;
			case 0x2F948:
				return 0x22;
			case 0x2F949:
				return 0x22;
			case 0x2F94A:
				return 0x22;
			case 0x2F94B:
				return 0x22;
			case 0x2F94C:
				return 0x22;
			case 0x2F94D:
				return 0x22;
			case 0x2F94E:
				return 0x22;
			case 0x2F94F:
				return 0x22;
			case 0x2F950:
				return 0x22;
			case 0x2F951:
				return 0x22;
			case 0x2F952:
				return 0x22;
			case 0x2F953:
				return 0x22;
			case 0x2F954:
				return 0x22;
			case 0x2F955:
				return 0x22;
			case 0x2F956:
				return 0x22;
			case 0x2F957:
				return 0x22;
			case 0x2F958:
				return 0x22;
			case 0x2F959:
				return 0x22;
			case 0x2F95A:
				return 0x22;
			case 0x2F95B:
				return 0x22;
			case 0x2F95C:
				return 0x22;
			case 0x2F95D:
				return 0x22;
			case 0x2F95E:
				return 0x22;
			case 0x2F95F:
				return 0x22;
			case 0x2F960:
				return 0x22;
			case 0x2F961:
				return 0x22;
			case 0x2F962:
				return 0x22;
			case 0x2F963:
				return 0x22;
			case 0x2F964:
				return 0x22;
			case 0x2F965:
				return 0x22;
			case 0x2F966:
				return 0x22;
			case 0x2F967:
				return 0x22;
			case 0x2F968:
				return 0x22;
			case 0x2F969:
				return 0x22;
			case 0x2F96A:
				return 0x22;
			case 0x2F96B:
				return 0x22;
			case 0x2F96C:
				return 0x22;
			case 0x2F96D:
				return 0x22;
			case 0x2F96E:
				return 0x22;
			case 0x2F96F:
				return 0x22;
			case 0x2F970:
				return 0x22;
			case 0x2F971:
				return 0x22;
			case 0x2F972:
				return 0x22;
			case 0x2F973:
				return 0x22;
			case 0x2F974:
				return 0x22;
			case 0x2F975:
				return 0x22;
			case 0x2F976:
				return 0x22;
			case 0x2F977:
				return 0x22;
			case 0x2F978:
				return 0x22;
			case 0x2F979:
				return 0x22;
			case 0x2F97A:
				return 0x22;
			case 0x2F97B:
				return 0x22;
			case 0x2F97C:
				return 0x22;
			case 0x2F97D:
				return 0x22;
			case 0x2F97E:
				return 0x22;
			case 0x2F97F:
				return 0x22;
			case 0x2F980:
				return 0x22;
			case 0x2F981:
				return 0x22;
			case 0x2F982:
				return 0x22;
			case 0x2F983:
				return 0x22;
			case 0x2F984:
				return 0x22;
			case 0x2F985:
				return 0x22;
			case 0x2F986:
				return 0x22;
			case 0x2F987:
				return 0x22;
			case 0x2F988:
				return 0x22;
			case 0x2F989:
				return 0x22;
			case 0x2F98A:
				return 0x22;
			case 0x2F98B:
				return 0x22;
			case 0x2F98C:
				return 0x22;
			case 0x2F98D:
				return 0x22;
			case 0x2F98E:
				return 0x22;
			case 0x2F98F:
				return 0x22;
			case 0x2F990:
				return 0x22;
			case 0x2F991:
				return 0x22;
			case 0x2F992:
				return 0x22;
			case 0x2F993:
				return 0x22;
			case 0x2F994:
				return 0x22;
			case 0x2F995:
				return 0x22;
			case 0x2F996:
				return 0x22;
			case 0x2F997:
				return 0x22;
			case 0x2F998:
				return 0x22;
			case 0x2F999:
				return 0x22;
			case 0x2F99A:
				return 0x22;
			case 0x2F99B:
				return 0x22;
			case 0x2F99C:
				return 0x22;
			case 0x2F99D:
				return 0x22;
			case 0x2F99E:
				return 0x22;
			case 0x2F99F:
				return 0x22;
			case 0x2F9A0:
				return 0x22;
			case 0x2F9A1:
				return 0x22;
			case 0x2F9A2:
				return 0x22;
			case 0x2F9A3:
				return 0x22;
			case 0x2F9A4:
				return 0x22;
			case 0x2F9A5:
				return 0x22;
			case 0x2F9A6:
				return 0x22;
			case 0x2F9A7:
				return 0x22;
			case 0x2F9A8:
				return 0x22;
			case 0x2F9A9:
				return 0x22;
			case 0x2F9AA:
				return 0x22;
			case 0x2F9AB:
				return 0x22;
			case 0x2F9AC:
				return 0x22;
			case 0x2F9AD:
				return 0x22;
			case 0x2F9AE:
				return 0x22;
			case 0x2F9AF:
				return 0x22;
			case 0x2F9B0:
				return 0x22;
			case 0x2F9B1:
				return 0x22;
			case 0x2F9B2:
				return 0x22;
			case 0x2F9B3:
				return 0x22;
			case 0x2F9B4:
				return 0x22;
			case 0x2F9B5:
				return 0x22;
			case 0x2F9B6:
				return 0x22;
			case 0x2F9B7:
				return 0x22;
			case 0x2F9B8:
				return 0x22;
			case 0x2F9B9:
				return 0x22;
			case 0x2F9BA:
				return 0x22;
			case 0x2F9BB:
				return 0x22;
			case 0x2F9BC:
				return 0x22;
			case 0x2F9BD:
				return 0x22;
			case 0x2F9BE:
				return 0x22;
			case 0x2F9BF:
				return 0x22;
			case 0x2F9C0:
				return 0x22;
			case 0x2F9C1:
				return 0x22;
			case 0x2F9C2:
				return 0x22;
			case 0x2F9C3:
				return 0x22;
			case 0x2F9C4:
				return 0x22;
			case 0x2F9C5:
				return 0x22;
			case 0x2F9C6:
				return 0x22;
			case 0x2F9C7:
				return 0x22;
			case 0x2F9C8:
				return 0x22;
			case 0x2F9C9:
				return 0x22;
			case 0x2F9CA:
				return 0x22;
			case 0x2F9CB:
				return 0x22;
			case 0x2F9CC:
				return 0x22;
			case 0x2F9CD:
				return 0x22;
			case 0x2F9CE:
				return 0x22;
			case 0x2F9CF:
				return 0x22;
			case 0x2F9D0:
				return 0x22;
			case 0x2F9D1:
				return 0x22;
			case 0x2F9D2:
				return 0x22;
			case 0x2F9D3:
				return 0x22;
			case 0x2F9D4:
				return 0x22;
			case 0x2F9D5:
				return 0x22;
			case 0x2F9D6:
				return 0x22;
			case 0x2F9D7:
				return 0x22;
			case 0x2F9D8:
				return 0x22;
			case 0x2F9D9:
				return 0x22;
			case 0x2F9DA:
				return 0x22;
			case 0x2F9DB:
				return 0x22;
			case 0x2F9DC:
				return 0x22;
			case 0x2F9DD:
				return 0x22;
			case 0x2F9DE:
				return 0x22;
			case 0x2F9DF:
				return 0x22;
			case 0x2F9E0:
				return 0x22;
			case 0x2F9E1:
				return 0x22;
			case 0x2F9E2:
				return 0x22;
			case 0x2F9E3:
				return 0x22;
			case 0x2F9E4:
				return 0x22;
			case 0x2F9E5:
				return 0x22;
			case 0x2F9E6:
				return 0x22;
			case 0x2F9E7:
				return 0x22;
			case 0x2F9E8:
				return 0x22;
			case 0x2F9E9:
				return 0x22;
			case 0x2F9EA:
				return 0x22;
			case 0x2F9EB:
				return 0x22;
			case 0x2F9EC:
				return 0x22;
			case 0x2F9ED:
				return 0x22;
			case 0x2F9EE:
				return 0x22;
			case 0x2F9EF:
				return 0x22;
			case 0x2F9F0:
				return 0x22;
			case 0x2F9F1:
				return 0x22;
			case 0x2F9F2:
				return 0x22;
			case 0x2F9F3:
				return 0x22;
			case 0x2F9F4:
				return 0x22;
			case 0x2F9F5:
				return 0x22;
			case 0x2F9F6:
				return 0x22;
			case 0x2F9F7:
				return 0x22;
			case 0x2F9F8:
				return 0x22;
			case 0x2F9F9:
				return 0x22;
			case 0x2F9FA:
				return 0x22;
			case 0x2F9FB:
				return 0x22;
			case 0x2F9FC:
				return 0x22;
			case 0x2F9FD:
				return 0x22;
			case 0x2F9FE:
				return 0x22;
			case 0x2F9FF:
				return 0x22;
			case 0x2FA00:
				return 0x22;
			case 0x2FA01:
				return 0x22;
			case 0x2FA02:
				return 0x22;
			case 0x2FA03:
				return 0x22;
			case 0x2FA04:
				return 0x22;
			case 0x2FA05:
				return 0x22;
			case 0x2FA06:
				return 0x22;
			case 0x2FA07:
				return 0x22;
			case 0x2FA08:
				return 0x22;
			case 0x2FA09:
				return 0x22;
			case 0x2FA0A:
				return 0x22;
			case 0x2FA0B:
				return 0x22;
			case 0x2FA0C:
				return 0x22;
			case 0x2FA0D:
				return 0x22;
			case 0x2FA0E:
				return 0x22;
			case 0x2FA0F:
				return 0x22;
			case 0x2FA10:
				return 0x22;
			case 0x2FA11:
				return 0x22;
			case 0x2FA12:
				return 0x22;
			case 0x2FA13:
				return 0x22;
			case 0x2FA14:
				return 0x22;
			case 0x2FA15:
				return 0x22;
			case 0x2FA16:
				return 0x22;
			case 0x2FA17:
				return 0x22;
			case 0x2FA18:
				return 0x22;
			case 0x2FA19:
				return 0x22;
			case 0x2FA1A:
				return 0x22;
			case 0x2FA1B:
				return 0x22;
			case 0x2FA1C:
				return 0x22;
			case 0x2FA1D:
				return 0x22;
			case 0x30000:
				return 0x23;
			case 0x3134A:
				return 0x22;
			case 0xE0001:
				return 0xD;
			case 0xE0020:
				return 0xA;
			case 0xE0021:
				return 0x15;
			case 0xE0022:
				return 0x13;
			case 0xE0023:
				return 0x10;
			case 0xE0024:
				return 0x10;
			case 0xE0025:
				return 0x11;
			case 0xE0026:
				return 0xE;
			case 0xE0027:
				return 0xF;
			case 0xE0028:
				return 0x15;
			case 0xE0029:
				return 0x16;
			case 0xE002A:
				return 0xD;
			case 0xE002B:
				return 0xE;
			case 0xE002C:
				return 0xA;
			case 0xE002D:
				return 0x11;
			case 0xE002E:
				return 0xE;
			case 0xE002F:
				return 0xC;
			case 0xE0030:
				return 0xF;
			case 0xE0031:
				return 0xE;
			case 0xE0032:
				return 0xE;
			case 0xE0033:
				return 0x10;
			case 0xE0034:
				return 0xF;
			case 0xE0035:
				return 0xF;
			case 0xE0036:
				return 0xE;
			case 0xE0037:
				return 0x10;
			case 0xE0038:
				return 0x10;
			case 0xE0039:
				return 0xF;
			case 0xE003A:
				return 0xA;
			case 0xE003B:
				return 0xE;
			case 0xE003C:
				return 0x13;
			case 0xE003D:
				return 0x10;
			case 0xE003E:
				return 0x16;
			case 0xE003F:
				return 0x12;
			case 0xE0040:
				return 0x12;
			case 0xE0041:
				return 0x1B;
			case 0xE0042:
				return 0x1B;
			case 0xE0043:
				return 0x1B;
			case 0xE0044:
				return 0x1B;
			case 0xE0045:
				return 0x1B;
			case 0xE0046:
				return 0x1B;
			case 0xE0047:
				return 0x1B;
			case 0xE0048:
				return 0x1B;
			case 0xE0049:
				return 0x1B;
			case 0xE004A:
				return 0x1B;
			case 0xE004B:
				return 0x1B;
			case 0xE004C:
				return 0x1B;
			case 0xE004D:
				return 0x1B;
			case 0xE004E:
				return 0x1B;
			case 0xE004F:
				return 0x1B;
			case 0xE0050:
				return 0x1B;
			case 0xE0051:
				return 0x1B;
			case 0xE0052:
				return 0x1B;
			case 0xE0053:
				return 0x1B;
			case 0xE0054:
				return 0x1B;
			case 0xE0055:
				return 0x1B;
			case 0xE0056:
				return 0x1B;
			case 0xE0057:
				return 0x1B;
			case 0xE0058:
				return 0x1B;
			case 0xE0059:
				return 0x1B;
			case 0xE005A:
				return 0x1B;
			case 0xE005B:
				return 0x18;
			case 0xE005C:
				return 0x14;
			case 0xE005D:
				return 0x19;
			case 0xE005E:
				return 0x16;
			case 0xE005F:
				return 0xD;
			case 0xE0060:
				return 0x11;
			case 0xE0061:
				return 0x19;
			case 0xE0062:
				return 0x19;
			case 0xE0063:
				return 0x19;
			case 0xE0064:
				return 0x19;
			case 0xE0065:
				return 0x19;
			case 0xE0066:
				return 0x19;
			case 0xE0067:
				return 0x19;
			case 0xE0068:
				return 0x19;
			case 0xE0069:
				return 0x19;
			case 0xE006A:
				return 0x19;
			case 0xE006B:
				return 0x19;
			case 0xE006C:
				return 0x19;
			case 0xE006D:
				return 0x19;
			case 0xE006E:
				return 0x19;
			case 0xE006F:
				return 0x19;
			case 0xE0070:
				return 0x19;
			case 0xE0071:
				return 0x19;
			case 0xE0072:
				return 0x19;
			case 0xE0073:
				return 0x19;
			case 0xE0074:
				return 0x19;
			case 0xE0075:
				return 0x19;
			case 0xE0076:
				return 0x19;
			case 0xE0077:
				return 0x19;
			case 0xE0078:
				return 0x19;
			case 0xE0079:
				return 0x19;
			case 0xE007A:
				return 0x19;
			case 0xE007B:
				return 0x17;
			case 0xE007C:
				return 0x12;
			case 0xE007D:
				return 0x18;
			case 0xE007E:
				return 0xA;
			case 0xE007F:
				return 0xB;
			case 0xE0100:
				return 0x16;
			case 0xE0101:
				return 0x16;
			case 0xE0102:
				return 0x16;
			case 0xE0103:
				return 0x16;
			case 0xE0104:
				return 0x16;
			case 0xE0105:
				return 0x16;
			case 0xE0106:
				return 0x16;
			case 0xE0107:
				return 0x16;
			case 0xE0108:
				return 0x16;
			case 0xE0109:
				return 0x16;
			case 0xE010A:
				return 0x16;
			case 0xE010B:
				return 0x16;
			case 0xE010C:
				return 0x16;
			case 0xE010D:
				return 0x16;
			case 0xE010E:
				return 0x16;
			case 0xE010F:
				return 0x16;
			case 0xE0110:
				return 0x16;
			case 0xE0111:
				return 0x16;
			case 0xE0112:
				return 0x16;
			case 0xE0113:
				return 0x16;
			case 0xE0114:
				return 0x16;
			case 0xE0115:
				return 0x16;
			case 0xE0116:
				return 0x16;
			case 0xE0117:
				return 0x16;
			case 0xE0118:
				return 0x16;
			case 0xE0119:
				return 0x16;
			case 0xE011A:
				return 0x16;
			case 0xE011B:
				return 0x16;
			case 0xE011C:
				return 0x16;
			case 0xE011D:
				return 0x16;
			case 0xE011E:
				return 0x16;
			case 0xE011F:
				return 0x16;
			case 0xE0120:
				return 0x16;
			case 0xE0121:
				return 0x16;
			case 0xE0122:
				return 0x16;
			case 0xE0123:
				return 0x16;
			case 0xE0124:
				return 0x16;
			case 0xE0125:
				return 0x16;
			case 0xE0126:
				return 0x16;
			case 0xE0127:
				return 0x16;
			case 0xE0128:
				return 0x16;
			case 0xE0129:
				return 0x16;
			case 0xE012A:
				return 0x16;
			case 0xE012B:
				return 0x16;
			case 0xE012C:
				return 0x16;
			case 0xE012D:
				return 0x16;
			case 0xE012E:
				return 0x16;
			case 0xE012F:
				return 0x16;
			case 0xE0130:
				return 0x16;
			case 0xE0131:
				return 0x16;
			case 0xE0132:
				return 0x16;
			case 0xE0133:
				return 0x16;
			case 0xE0134:
				return 0x16;
			case 0xE0135:
				return 0x16;
			case 0xE0136:
				return 0x16;
			case 0xE0137:
				return 0x16;
			case 0xE0138:
				return 0x16;
			case 0xE0139:
				return 0x16;
			case 0xE013A:
				return 0x16;
			case 0xE013B:
				return 0x16;
			case 0xE013C:
				return 0x16;
			case 0xE013D:
				return 0x16;
			case 0xE013E:
				return 0x16;
			case 0xE013F:
				return 0x16;
			case 0xE0140:
				return 0x16;
			case 0xE0141:
				return 0x16;
			case 0xE0142:
				return 0x16;
			case 0xE0143:
				return 0x16;
			case 0xE0144:
				return 0x16;
			case 0xE0145:
				return 0x16;
			case 0xE0146:
				return 0x16;
			case 0xE0147:
				return 0x16;
			case 0xE0148:
				return 0x16;
			case 0xE0149:
				return 0x16;
			case 0xE014A:
				return 0x16;
			case 0xE014B:
				return 0x16;
			case 0xE014C:
				return 0x16;
			case 0xE014D:
				return 0x16;
			case 0xE014E:
				return 0x16;
			case 0xE014F:
				return 0x16;
			case 0xE0150:
				return 0x16;
			case 0xE0151:
				return 0x16;
			case 0xE0152:
				return 0x16;
			case 0xE0153:
				return 0x17;
			case 0xE0154:
				return 0x17;
			case 0xE0155:
				return 0x17;
			case 0xE0156:
				return 0x17;
			case 0xE0157:
				return 0x17;
			case 0xE0158:
				return 0x17;
			case 0xE0159:
				return 0x17;
			case 0xE015A:
				return 0x17;
			case 0xE015B:
				return 0x17;
			case 0xE015C:
				return 0x17;
			case 0xE015D:
				return 0x17;
			case 0xE015E:
				return 0x17;
			case 0xE015F:
				return 0x17;
			case 0xE0160:
				return 0x17;
			case 0xE0161:
				return 0x17;
			case 0xE0162:
				return 0x17;
			case 0xE0163:
				return 0x17;
			case 0xE0164:
				return 0x17;
			case 0xE0165:
				return 0x17;
			case 0xE0166:
				return 0x17;
			case 0xE0167:
				return 0x17;
			case 0xE0168:
				return 0x17;
			case 0xE0169:
				return 0x17;
			case 0xE016A:
				return 0x17;
			case 0xE016B:
				return 0x17;
			case 0xE016C:
				return 0x17;
			case 0xE016D:
				return 0x17;
			case 0xE016E:
				return 0x17;
			case 0xE016F:
				return 0x17;
			case 0xE0170:
				return 0x17;
			case 0xE0171:
				return 0x17;
			case 0xE0172:
				return 0x17;
			case 0xE0173:
				return 0x17;
			case 0xE0174:
				return 0x17;
			case 0xE0175:
				return 0x17;
			case 0xE0176:
				return 0x17;
			case 0xE0177:
				return 0x17;
			case 0xE0178:
				return 0x17;
			case 0xE0179:
				return 0x17;
			case 0xE017A:
				return 0x17;
			case 0xE017B:
				return 0x17;
			case 0xE017C:
				return 0x17;
			case 0xE017D:
				return 0x17;
			case 0xE017E:
				return 0x17;
			case 0xE017F:
				return 0x17;
			case 0xE0180:
				return 0x17;
			case 0xE0181:
				return 0x17;
			case 0xE0182:
				return 0x17;
			case 0xE0183:
				return 0x17;
			case 0xE0184:
				return 0x17;
			case 0xE0185:
				return 0x17;
			case 0xE0186:
				return 0x17;
			case 0xE0187:
				return 0x17;
			case 0xE0188:
				return 0x17;
			case 0xE0189:
				return 0x17;
			case 0xE018A:
				return 0x17;
			case 0xE018B:
				return 0x17;
			case 0xE018C:
				return 0x17;
			case 0xE018D:
				return 0x17;
			case 0xE018E:
				return 0x17;
			case 0xE018F:
				return 0x17;
			case 0xE0190:
				return 0x17;
			case 0xE0191:
				return 0x17;
			case 0xE0192:
				return 0x17;
			case 0xE0193:
				return 0x17;
			case 0xE0194:
				return 0x17;
			case 0xE0195:
				return 0x17;
			case 0xE0196:
				return 0x17;
			case 0xE0197:
				return 0x17;
			case 0xE0198:
				return 0x17;
			case 0xE0199:
				return 0x17;
			case 0xE019A:
				return 0x17;
			case 0xE019B:
				return 0x17;
			case 0xE019C:
				return 0x17;
			case 0xE019D:
				return 0x17;
			case 0xE019E:
				return 0x17;
			case 0xE019F:
				return 0x17;
			case 0xE01A0:
				return 0x17;
			case 0xE01A1:
				return 0x17;
			case 0xE01A2:
				return 0x17;
			case 0xE01A3:
				return 0x17;
			case 0xE01A4:
				return 0x17;
			case 0xE01A5:
				return 0x17;
			case 0xE01A6:
				return 0x17;
			case 0xE01A7:
				return 0x17;
			case 0xE01A8:
				return 0x17;
			case 0xE01A9:
				return 0x17;
			case 0xE01AA:
				return 0x17;
			case 0xE01AB:
				return 0x17;
			case 0xE01AC:
				return 0x17;
			case 0xE01AD:
				return 0x17;
			case 0xE01AE:
				return 0x17;
			case 0xE01AF:
				return 0x17;
			case 0xE01B0:
				return 0x17;
			case 0xE01B1:
				return 0x17;
			case 0xE01B2:
				return 0x17;
			case 0xE01B3:
				return 0x17;
			case 0xE01B4:
				return 0x17;
			case 0xE01B5:
				return 0x17;
			case 0xE01B6:
				return 0x17;
			case 0xE01B7:
				return 0x17;
			case 0xE01B8:
				return 0x17;
			case 0xE01B9:
				return 0x17;
			case 0xE01BA:
				return 0x17;
			case 0xE01BB:
				return 0x17;
			case 0xE01BC:
				return 0x17;
			case 0xE01BD:
				return 0x17;
			case 0xE01BE:
				return 0x17;
			case 0xE01BF:
				return 0x17;
			case 0xE01C0:
				return 0x17;
			case 0xE01C1:
				return 0x17;
			case 0xE01C2:
				return 0x17;
			case 0xE01C3:
				return 0x17;
			case 0xE01C4:
				return 0x17;
			case 0xE01C5:
				return 0x17;
			case 0xE01C6:
				return 0x17;
			case 0xE01C7:
				return 0x17;
			case 0xE01C8:
				return 0x17;
			case 0xE01C9:
				return 0x17;
			case 0xE01CA:
				return 0x17;
			case 0xE01CB:
				return 0x17;
			case 0xE01CC:
				return 0x17;
			case 0xE01CD:
				return 0x17;
			case 0xE01CE:
				return 0x17;
			case 0xE01CF:
				return 0x17;
			case 0xE01D0:
				return 0x17;
			case 0xE01D1:
				return 0x17;
			case 0xE01D2:
				return 0x17;
			case 0xE01D3:
				return 0x17;
			case 0xE01D4:
				return 0x17;
			case 0xE01D5:
				return 0x17;
			case 0xE01D6:
				return 0x17;
			case 0xE01D7:
				return 0x17;
			case 0xE01D8:
				return 0x17;
			case 0xE01D9:
				return 0x17;
			case 0xE01DA:
				return 0x17;
			case 0xE01DB:
				return 0x17;
			case 0xE01DC:
				return 0x17;
			case 0xE01DD:
				return 0x17;
			case 0xE01DE:
				return 0x17;
			case 0xE01DF:
				return 0x17;
			case 0xE01E0:
				return 0x17;
			case 0xE01E1:
				return 0x17;
			case 0xE01E2:
				return 0x17;
			case 0xE01E3:
				return 0x17;
			case 0xE01E4:
				return 0x17;
			case 0xE01E5:
				return 0x17;
			case 0xE01E6:
				return 0x17;
			case 0xE01E7:
				return 0x17;
			case 0xE01E8:
				return 0x17;
			case 0xE01E9:
				return 0x17;
			case 0xE01EA:
				return 0x17;
			case 0xE01EB:
				return 0x17;
			case 0xE01EC:
				return 0x17;
			case 0xE01ED:
				return 0x17;
			case 0xE01EE:
				return 0x17;
			case 0xE01EF:
				return 0x17;
			case 0xF0000:
				return 0x1E;
			case 0xFFFFD:
				return 0x1D;
			case 0x100000:
				return 0x1E;
			case 0x10FFFD:
				return 0x1D;

			default: // not defined
				return 0;
			}
		}

		NameLen_t GetName(UChar_t ch, char* buf, NameLen_t buf_size)
		{
			const NameLen_t len = GetNameLen(ch);
			if (len == 0 || len > buf_size)
				return 0;

			switch (ch)
			{
			case 0x0:
				strcpy_s(buf, buf_size, "NULL");
				break;
			case 0x1:
				strcpy_s(buf, buf_size, "START OF HEADING");
				break;
			case 0x2:
				strcpy_s(buf, buf_size, "START OF TEXT");
				break;
			case 0x3:
				strcpy_s(buf, buf_size, "END OF TEXT");
				break;
			case 0x4:
				strcpy_s(buf, buf_size, "END OF TRANSMISSION");
				break;
			case 0x5:
				strcpy_s(buf, buf_size, "ENQUIRY");
				break;
			case 0x6:
				strcpy_s(buf, buf_size, "ACKNOWLEDGE");
				break;
			case 0x7:
				strcpy_s(buf, buf_size, "BELL");
				break;
			case 0x8:
				strcpy_s(buf, buf_size, "BACKSPACE");
				break;
			case 0x9:
				strcpy_s(buf, buf_size, "CHARACTER TABULATION");
				break;
			case 0xA:
				strcpy_s(buf, buf_size, "LINE FEED (LF)");
				break;
			case 0xB:
				strcpy_s(buf, buf_size, "LINE TABULATION");
				break;
			case 0xC:
				strcpy_s(buf, buf_size, "FORM FEED (FF)");
				break;
			case 0xD:
				strcpy_s(buf, buf_size, "CARRIAGE RETURN (CR)");
				break;
			case 0xE:
				strcpy_s(buf, buf_size, "SHIFT OUT");
				break;
			case 0xF:
				strcpy_s(buf, buf_size, "SHIFT IN");
				break;
			case 0x10:
				strcpy_s(buf, buf_size, "DATA LINK ESCAPE");
				break;
			case 0x11:
				strcpy_s(buf, buf_size, "DEVICE CONTROL ONE");
				break;
			case 0x12:
				strcpy_s(buf, buf_size, "DEVICE CONTROL TWO");
				break;
			case 0x13:
				strcpy_s(buf, buf_size, "DEVICE CONTROL THREE");
				break;
			case 0x14:
				strcpy_s(buf, buf_size, "DEVICE CONTROL FOUR");
				break;
			case 0x15:
				strcpy_s(buf, buf_size, "NEGATIVE ACKNOWLEDGE");
				break;
			case 0x16:
				strcpy_s(buf, buf_size, "SYNCHRONOUS IDLE");
				break;
			case 0x17:
				strcpy_s(buf, buf_size, "END OF TRANSMISSION BLOCK");
				break;
			case 0x18:
				strcpy_s(buf, buf_size, "CANCEL");
				break;
			case 0x19:
				strcpy_s(buf, buf_size, "END OF MEDIUM");
				break;
			case 0x1A:
				strcpy_s(buf, buf_size, "SUBSTITUTE");
				break;
			case 0x1B:
				strcpy_s(buf, buf_size, "ESCAPE");
				break;
			case 0x1C:
				strcpy_s(buf, buf_size, "INFORMATION SEPARATOR FOUR");
				break;
			case 0x1D:
				strcpy_s(buf, buf_size, "INFORMATION SEPARATOR THREE");
				break;
			case 0x1E:
				strcpy_s(buf, buf_size, "INFORMATION SEPARATOR TWO");
				break;
			case 0x1F:
				strcpy_s(buf, buf_size, "INFORMATION SEPARATOR ONE");
				break;
			case 0x20:
				strcpy_s(buf, buf_size, "SPACE");
				break;
			case 0x21:
				strcpy_s(buf, buf_size, "EXCLAMATION MARK");
				break;
			case 0x22:
				strcpy_s(buf, buf_size, "QUOTATION MARK");
				break;
			case 0x23:
				strcpy_s(buf, buf_size, "NUMBER SIGN");
				break;
			case 0x24:
				strcpy_s(buf, buf_size, "DOLLAR SIGN");
				break;
			case 0x25:
				strcpy_s(buf, buf_size, "PERCENT SIGN");
				break;
			case 0x26:
				strcpy_s(buf, buf_size, "AMPERSAND");
				break;
			case 0x27:
				strcpy_s(buf, buf_size, "APOSTROPHE");
				break;
			case 0x28:
				strcpy_s(buf, buf_size, "LEFT PARENTHESIS");
				break;
			case 0x29:
				strcpy_s(buf, buf_size, "RIGHT PARENTHESIS");
				break;
			case 0x2A:
				strcpy_s(buf, buf_size, "ASTERISK");
				break;
			case 0x2B:
				strcpy_s(buf, buf_size, "PLUS SIGN");
				break;
			case 0x2C:
				strcpy_s(buf, buf_size, "COMMA");
				break;
			case 0x2D:
				strcpy_s(buf, buf_size, "HYPHEN-MINUS");
				break;
			case 0x2E:
				strcpy_s(buf, buf_size, "FULL STOP");
				break;
			case 0x2F:
				strcpy_s(buf, buf_size, "SOLIDUS");
				break;
			case 0x30:
				strcpy_s(buf, buf_size, "DIGIT ZERO");
				break;
			case 0x31:
				strcpy_s(buf, buf_size, "DIGIT ONE");
				break;
			case 0x32:
				strcpy_s(buf, buf_size, "DIGIT TWO");
				break;
			case 0x33:
				strcpy_s(buf, buf_size, "DIGIT THREE");
				break;
			case 0x34:
				strcpy_s(buf, buf_size, "DIGIT FOUR");
				break;
			case 0x35:
				strcpy_s(buf, buf_size, "DIGIT FIVE");
				break;
			case 0x36:
				strcpy_s(buf, buf_size, "DIGIT SIX");
				break;
			case 0x37:
				strcpy_s(buf, buf_size, "DIGIT SEVEN");
				break;
			case 0x38:
				strcpy_s(buf, buf_size, "DIGIT EIGHT");
				break;
			case 0x39:
				strcpy_s(buf, buf_size, "DIGIT NINE");
				break;
			case 0x3A:
				strcpy_s(buf, buf_size, "COLON");
				break;
			case 0x3B:
				strcpy_s(buf, buf_size, "SEMICOLON");
				break;
			case 0x3C:
				strcpy_s(buf, buf_size, "LESS-THAN SIGN");
				break;
			case 0x3D:
				strcpy_s(buf, buf_size, "EQUALS SIGN");
				break;
			case 0x3E:
				strcpy_s(buf, buf_size, "GREATER-THAN SIGN");
				break;
			case 0x3F:
				strcpy_s(buf, buf_size, "QUESTION MARK");
				break;
			case 0x40:
				strcpy_s(buf, buf_size, "COMMERCIAL AT");
				break;
			case 0x41:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A");
				break;
			case 0x42:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER B");
				break;
			case 0x43:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C");
				break;
			case 0x44:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D");
				break;
			case 0x45:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E");
				break;
			case 0x46:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER F");
				break;
			case 0x47:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G");
				break;
			case 0x48:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H");
				break;
			case 0x49:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I");
				break;
			case 0x4A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER J");
				break;
			case 0x4B:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K");
				break;
			case 0x4C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L");
				break;
			case 0x4D:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER M");
				break;
			case 0x4E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N");
				break;
			case 0x4F:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O");
				break;
			case 0x50:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER P");
				break;
			case 0x51:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Q");
				break;
			case 0x52:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R");
				break;
			case 0x53:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S");
				break;
			case 0x54:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T");
				break;
			case 0x55:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U");
				break;
			case 0x56:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER V");
				break;
			case 0x57:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER W");
				break;
			case 0x58:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER X");
				break;
			case 0x59:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y");
				break;
			case 0x5A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z");
				break;
			case 0x5B:
				strcpy_s(buf, buf_size, "LEFT SQUARE BRACKET");
				break;
			case 0x5C:
				strcpy_s(buf, buf_size, "REVERSE SOLIDUS");
				break;
			case 0x5D:
				strcpy_s(buf, buf_size, "RIGHT SQUARE BRACKET");
				break;
			case 0x5E:
				strcpy_s(buf, buf_size, "CIRCUMFLEX ACCENT");
				break;
			case 0x5F:
				strcpy_s(buf, buf_size, "LOW LINE");
				break;
			case 0x60:
				strcpy_s(buf, buf_size, "GRAVE ACCENT");
				break;
			case 0x61:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A");
				break;
			case 0x62:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER B");
				break;
			case 0x63:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C");
				break;
			case 0x64:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D");
				break;
			case 0x65:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E");
				break;
			case 0x66:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER F");
				break;
			case 0x67:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G");
				break;
			case 0x68:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H");
				break;
			case 0x69:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I");
				break;
			case 0x6A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER J");
				break;
			case 0x6B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K");
				break;
			case 0x6C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L");
				break;
			case 0x6D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER M");
				break;
			case 0x6E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N");
				break;
			case 0x6F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O");
				break;
			case 0x70:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER P");
				break;
			case 0x71:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Q");
				break;
			case 0x72:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R");
				break;
			case 0x73:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S");
				break;
			case 0x74:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T");
				break;
			case 0x75:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U");
				break;
			case 0x76:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER V");
				break;
			case 0x77:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER W");
				break;
			case 0x78:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER X");
				break;
			case 0x79:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y");
				break;
			case 0x7A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z");
				break;
			case 0x7B:
				strcpy_s(buf, buf_size, "LEFT CURLY BRACKET");
				break;
			case 0x7C:
				strcpy_s(buf, buf_size, "VERTICAL LINE");
				break;
			case 0x7D:
				strcpy_s(buf, buf_size, "RIGHT CURLY BRACKET");
				break;
			case 0x7E:
				strcpy_s(buf, buf_size, "TILDE");
				break;
			case 0x7F:
				strcpy_s(buf, buf_size, "DELETE");
				break;
			case 0x80:
				strcpy_s(buf, buf_size, "<control>");
				break;
			case 0x81:
				strcpy_s(buf, buf_size, "<control>");
				break;
			case 0x82:
				strcpy_s(buf, buf_size, "BREAK PERMITTED HERE");
				break;
			case 0x83:
				strcpy_s(buf, buf_size, "NO BREAK HERE");
				break;
			case 0x84:
				strcpy_s(buf, buf_size, "<control>");
				break;
			case 0x85:
				strcpy_s(buf, buf_size, "NEXT LINE (NEL)");
				break;
			case 0x86:
				strcpy_s(buf, buf_size, "START OF SELECTED AREA");
				break;
			case 0x87:
				strcpy_s(buf, buf_size, "END OF SELECTED AREA");
				break;
			case 0x88:
				strcpy_s(buf, buf_size, "CHARACTER TABULATION SET");
				break;
			case 0x89:
				strcpy_s(buf, buf_size, "CHARACTER TABULATION WITH JUSTIFICATION");
				break;
			case 0x8A:
				strcpy_s(buf, buf_size, "LINE TABULATION SET");
				break;
			case 0x8B:
				strcpy_s(buf, buf_size, "PARTIAL LINE FORWARD");
				break;
			case 0x8C:
				strcpy_s(buf, buf_size, "PARTIAL LINE BACKWARD");
				break;
			case 0x8D:
				strcpy_s(buf, buf_size, "REVERSE LINE FEED");
				break;
			case 0x8E:
				strcpy_s(buf, buf_size, "SINGLE SHIFT TWO");
				break;
			case 0x8F:
				strcpy_s(buf, buf_size, "SINGLE SHIFT THREE");
				break;
			case 0x90:
				strcpy_s(buf, buf_size, "DEVICE CONTROL STRING");
				break;
			case 0x91:
				strcpy_s(buf, buf_size, "PRIVATE USE ONE");
				break;
			case 0x92:
				strcpy_s(buf, buf_size, "PRIVATE USE TWO");
				break;
			case 0x93:
				strcpy_s(buf, buf_size, "SET TRANSMIT STATE");
				break;
			case 0x94:
				strcpy_s(buf, buf_size, "CANCEL CHARACTER");
				break;
			case 0x95:
				strcpy_s(buf, buf_size, "MESSAGE WAITING");
				break;
			case 0x96:
				strcpy_s(buf, buf_size, "START OF GUARDED AREA");
				break;
			case 0x97:
				strcpy_s(buf, buf_size, "END OF GUARDED AREA");
				break;
			case 0x98:
				strcpy_s(buf, buf_size, "START OF STRING");
				break;
			case 0x99:
				strcpy_s(buf, buf_size, "<control>");
				break;
			case 0x9A:
				strcpy_s(buf, buf_size, "SINGLE CHARACTER INTRODUCER");
				break;
			case 0x9B:
				strcpy_s(buf, buf_size, "CONTROL SEQUENCE INTRODUCER");
				break;
			case 0x9C:
				strcpy_s(buf, buf_size, "STRING TERMINATOR");
				break;
			case 0x9D:
				strcpy_s(buf, buf_size, "OPERATING SYSTEM COMMAND");
				break;
			case 0x9E:
				strcpy_s(buf, buf_size, "PRIVACY MESSAGE");
				break;
			case 0x9F:
				strcpy_s(buf, buf_size, "APPLICATION PROGRAM COMMAND");
				break;
			case 0xA0:
				strcpy_s(buf, buf_size, "NO-BREAK SPACE");
				break;
			case 0xA1:
				strcpy_s(buf, buf_size, "INVERTED EXCLAMATION MARK");
				break;
			case 0xA2:
				strcpy_s(buf, buf_size, "CENT SIGN");
				break;
			case 0xA3:
				strcpy_s(buf, buf_size, "POUND SIGN");
				break;
			case 0xA4:
				strcpy_s(buf, buf_size, "CURRENCY SIGN");
				break;
			case 0xA5:
				strcpy_s(buf, buf_size, "YEN SIGN");
				break;
			case 0xA6:
				strcpy_s(buf, buf_size, "BROKEN BAR");
				break;
			case 0xA7:
				strcpy_s(buf, buf_size, "SECTION SIGN");
				break;
			case 0xA8:
				strcpy_s(buf, buf_size, "DIAERESIS");
				break;
			case 0xA9:
				strcpy_s(buf, buf_size, "COPYRIGHT SIGN");
				break;
			case 0xAA:
				strcpy_s(buf, buf_size, "FEMININE ORDINAL INDICATOR");
				break;
			case 0xAB:
				strcpy_s(buf, buf_size, "LEFT-POINTING DOUBLE ANGLE QUOTATION MARK");
				break;
			case 0xAC:
				strcpy_s(buf, buf_size, "NOT SIGN");
				break;
			case 0xAD:
				strcpy_s(buf, buf_size, "SOFT HYPHEN");
				break;
			case 0xAE:
				strcpy_s(buf, buf_size, "REGISTERED SIGN");
				break;
			case 0xAF:
				strcpy_s(buf, buf_size, "MACRON");
				break;
			case 0xB0:
				strcpy_s(buf, buf_size, "DEGREE SIGN");
				break;
			case 0xB1:
				strcpy_s(buf, buf_size, "PLUS-MINUS SIGN");
				break;
			case 0xB2:
				strcpy_s(buf, buf_size, "SUPERSCRIPT TWO");
				break;
			case 0xB3:
				strcpy_s(buf, buf_size, "SUPERSCRIPT THREE");
				break;
			case 0xB4:
				strcpy_s(buf, buf_size, "ACUTE ACCENT");
				break;
			case 0xB5:
				strcpy_s(buf, buf_size, "MICRO SIGN");
				break;
			case 0xB6:
				strcpy_s(buf, buf_size, "PILCROW SIGN");
				break;
			case 0xB7:
				strcpy_s(buf, buf_size, "MIDDLE DOT");
				break;
			case 0xB8:
				strcpy_s(buf, buf_size, "CEDILLA");
				break;
			case 0xB9:
				strcpy_s(buf, buf_size, "SUPERSCRIPT ONE");
				break;
			case 0xBA:
				strcpy_s(buf, buf_size, "MASCULINE ORDINAL INDICATOR");
				break;
			case 0xBB:
				strcpy_s(buf, buf_size, "RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK");
				break;
			case 0xBC:
				strcpy_s(buf, buf_size, "VULGAR FRACTION ONE QUARTER");
				break;
			case 0xBD:
				strcpy_s(buf, buf_size, "VULGAR FRACTION ONE HALF");
				break;
			case 0xBE:
				strcpy_s(buf, buf_size, "VULGAR FRACTION THREE QUARTERS");
				break;
			case 0xBF:
				strcpy_s(buf, buf_size, "INVERTED QUESTION MARK");
				break;
			case 0xC0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH GRAVE");
				break;
			case 0xC1:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH ACUTE");
				break;
			case 0xC2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH CIRCUMFLEX");
				break;
			case 0xC3:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH TILDE");
				break;
			case 0xC4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH DIAERESIS");
				break;
			case 0xC5:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH RING ABOVE");
				break;
			case 0xC6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER AE");
				break;
			case 0xC7:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C WITH CEDILLA");
				break;
			case 0xC8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH GRAVE");
				break;
			case 0xC9:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH ACUTE");
				break;
			case 0xCA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH CIRCUMFLEX");
				break;
			case 0xCB:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH DIAERESIS");
				break;
			case 0xCC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH GRAVE");
				break;
			case 0xCD:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH ACUTE");
				break;
			case 0xCE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH CIRCUMFLEX");
				break;
			case 0xCF:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH DIAERESIS");
				break;
			case 0xD0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER ETH");
				break;
			case 0xD1:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH TILDE");
				break;
			case 0xD2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH GRAVE");
				break;
			case 0xD3:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH ACUTE");
				break;
			case 0xD4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH CIRCUMFLEX");
				break;
			case 0xD5:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH TILDE");
				break;
			case 0xD6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH DIAERESIS");
				break;
			case 0xD7:
				strcpy_s(buf, buf_size, "MULTIPLICATION SIGN");
				break;
			case 0xD8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH STROKE");
				break;
			case 0xD9:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH GRAVE");
				break;
			case 0xDA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH ACUTE");
				break;
			case 0xDB:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH CIRCUMFLEX");
				break;
			case 0xDC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH DIAERESIS");
				break;
			case 0xDD:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH ACUTE");
				break;
			case 0xDE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER THORN");
				break;
			case 0xDF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SHARP S");
				break;
			case 0xE0:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH GRAVE");
				break;
			case 0xE1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH ACUTE");
				break;
			case 0xE2:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH CIRCUMFLEX");
				break;
			case 0xE3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH TILDE");
				break;
			case 0xE4:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH DIAERESIS");
				break;
			case 0xE5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH RING ABOVE");
				break;
			case 0xE6:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER AE");
				break;
			case 0xE7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH CEDILLA");
				break;
			case 0xE8:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH GRAVE");
				break;
			case 0xE9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH ACUTE");
				break;
			case 0xEA:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH CIRCUMFLEX");
				break;
			case 0xEB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH DIAERESIS");
				break;
			case 0xEC:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH GRAVE");
				break;
			case 0xED:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH ACUTE");
				break;
			case 0xEE:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH CIRCUMFLEX");
				break;
			case 0xEF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH DIAERESIS");
				break;
			case 0xF0:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ETH");
				break;
			case 0xF1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH TILDE");
				break;
			case 0xF2:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH GRAVE");
				break;
			case 0xF3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH ACUTE");
				break;
			case 0xF4:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH CIRCUMFLEX");
				break;
			case 0xF5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH TILDE");
				break;
			case 0xF6:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH DIAERESIS");
				break;
			case 0xF7:
				strcpy_s(buf, buf_size, "DIVISION SIGN");
				break;
			case 0xF8:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH STROKE");
				break;
			case 0xF9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH GRAVE");
				break;
			case 0xFA:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH ACUTE");
				break;
			case 0xFB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH CIRCUMFLEX");
				break;
			case 0xFC:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH DIAERESIS");
				break;
			case 0xFD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH ACUTE");
				break;
			case 0xFE:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER THORN");
				break;
			case 0xFF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH DIAERESIS");
				break;
			case 0x100:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH MACRON");
				break;
			case 0x101:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH MACRON");
				break;
			case 0x102:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH BREVE");
				break;
			case 0x103:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH BREVE");
				break;
			case 0x104:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH OGONEK");
				break;
			case 0x105:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH OGONEK");
				break;
			case 0x106:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C WITH ACUTE");
				break;
			case 0x107:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH ACUTE");
				break;
			case 0x108:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C WITH CIRCUMFLEX");
				break;
			case 0x109:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH CIRCUMFLEX");
				break;
			case 0x10A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C WITH DOT ABOVE");
				break;
			case 0x10B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH DOT ABOVE");
				break;
			case 0x10C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C WITH CARON");
				break;
			case 0x10D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH CARON");
				break;
			case 0x10E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH CARON");
				break;
			case 0x10F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH CARON");
				break;
			case 0x110:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH STROKE");
				break;
			case 0x111:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH STROKE");
				break;
			case 0x112:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH MACRON");
				break;
			case 0x113:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH MACRON");
				break;
			case 0x114:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH BREVE");
				break;
			case 0x115:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH BREVE");
				break;
			case 0x116:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH DOT ABOVE");
				break;
			case 0x117:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH DOT ABOVE");
				break;
			case 0x118:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH OGONEK");
				break;
			case 0x119:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH OGONEK");
				break;
			case 0x11A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH CARON");
				break;
			case 0x11B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH CARON");
				break;
			case 0x11C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G WITH CIRCUMFLEX");
				break;
			case 0x11D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH CIRCUMFLEX");
				break;
			case 0x11E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G WITH BREVE");
				break;
			case 0x11F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH BREVE");
				break;
			case 0x120:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G WITH DOT ABOVE");
				break;
			case 0x121:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH DOT ABOVE");
				break;
			case 0x122:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G WITH CEDILLA");
				break;
			case 0x123:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH CEDILLA");
				break;
			case 0x124:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H WITH CIRCUMFLEX");
				break;
			case 0x125:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH CIRCUMFLEX");
				break;
			case 0x126:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H WITH STROKE");
				break;
			case 0x127:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH STROKE");
				break;
			case 0x128:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH TILDE");
				break;
			case 0x129:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH TILDE");
				break;
			case 0x12A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH MACRON");
				break;
			case 0x12B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH MACRON");
				break;
			case 0x12C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH BREVE");
				break;
			case 0x12D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH BREVE");
				break;
			case 0x12E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH OGONEK");
				break;
			case 0x12F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH OGONEK");
				break;
			case 0x130:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH DOT ABOVE");
				break;
			case 0x131:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DOTLESS I");
				break;
			case 0x132:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LIGATURE IJ");
				break;
			case 0x133:
				strcpy_s(buf, buf_size, "LATIN SMALL LIGATURE IJ");
				break;
			case 0x134:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER J WITH CIRCUMFLEX");
				break;
			case 0x135:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER J WITH CIRCUMFLEX");
				break;
			case 0x136:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH CEDILLA");
				break;
			case 0x137:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH CEDILLA");
				break;
			case 0x138:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER KRA");
				break;
			case 0x139:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH ACUTE");
				break;
			case 0x13A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH ACUTE");
				break;
			case 0x13B:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH CEDILLA");
				break;
			case 0x13C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH CEDILLA");
				break;
			case 0x13D:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH CARON");
				break;
			case 0x13E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH CARON");
				break;
			case 0x13F:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH MIDDLE DOT");
				break;
			case 0x140:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH MIDDLE DOT");
				break;
			case 0x141:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH STROKE");
				break;
			case 0x142:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH STROKE");
				break;
			case 0x143:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH ACUTE");
				break;
			case 0x144:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH ACUTE");
				break;
			case 0x145:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH CEDILLA");
				break;
			case 0x146:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH CEDILLA");
				break;
			case 0x147:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH CARON");
				break;
			case 0x148:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH CARON");
				break;
			case 0x149:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N PRECEDED BY APOSTROPHE");
				break;
			case 0x14A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER ENG");
				break;
			case 0x14B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ENG");
				break;
			case 0x14C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH MACRON");
				break;
			case 0x14D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH MACRON");
				break;
			case 0x14E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH BREVE");
				break;
			case 0x14F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH BREVE");
				break;
			case 0x150:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH DOUBLE ACUTE");
				break;
			case 0x151:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH DOUBLE ACUTE");
				break;
			case 0x152:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LIGATURE OE");
				break;
			case 0x153:
				strcpy_s(buf, buf_size, "LATIN SMALL LIGATURE OE");
				break;
			case 0x154:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH ACUTE");
				break;
			case 0x155:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH ACUTE");
				break;
			case 0x156:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH CEDILLA");
				break;
			case 0x157:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH CEDILLA");
				break;
			case 0x158:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH CARON");
				break;
			case 0x159:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH CARON");
				break;
			case 0x15A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH ACUTE");
				break;
			case 0x15B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH ACUTE");
				break;
			case 0x15C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH CIRCUMFLEX");
				break;
			case 0x15D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH CIRCUMFLEX");
				break;
			case 0x15E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH CEDILLA");
				break;
			case 0x15F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH CEDILLA");
				break;
			case 0x160:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH CARON");
				break;
			case 0x161:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH CARON");
				break;
			case 0x162:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH CEDILLA");
				break;
			case 0x163:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH CEDILLA");
				break;
			case 0x164:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH CARON");
				break;
			case 0x165:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH CARON");
				break;
			case 0x166:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH STROKE");
				break;
			case 0x167:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH STROKE");
				break;
			case 0x168:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH TILDE");
				break;
			case 0x169:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH TILDE");
				break;
			case 0x16A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH MACRON");
				break;
			case 0x16B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH MACRON");
				break;
			case 0x16C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH BREVE");
				break;
			case 0x16D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH BREVE");
				break;
			case 0x16E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH RING ABOVE");
				break;
			case 0x16F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH RING ABOVE");
				break;
			case 0x170:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH DOUBLE ACUTE");
				break;
			case 0x171:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH DOUBLE ACUTE");
				break;
			case 0x172:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH OGONEK");
				break;
			case 0x173:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH OGONEK");
				break;
			case 0x174:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER W WITH CIRCUMFLEX");
				break;
			case 0x175:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER W WITH CIRCUMFLEX");
				break;
			case 0x176:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH CIRCUMFLEX");
				break;
			case 0x177:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH CIRCUMFLEX");
				break;
			case 0x178:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH DIAERESIS");
				break;
			case 0x179:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH ACUTE");
				break;
			case 0x17A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH ACUTE");
				break;
			case 0x17B:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH DOT ABOVE");
				break;
			case 0x17C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH DOT ABOVE");
				break;
			case 0x17D:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH CARON");
				break;
			case 0x17E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH CARON");
				break;
			case 0x17F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LONG S");
				break;
			case 0x180:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER B WITH STROKE");
				break;
			case 0x181:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER B WITH HOOK");
				break;
			case 0x182:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER B WITH TOPBAR");
				break;
			case 0x183:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER B WITH TOPBAR");
				break;
			case 0x184:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TONE SIX");
				break;
			case 0x185:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TONE SIX");
				break;
			case 0x186:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER OPEN O");
				break;
			case 0x187:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C WITH HOOK");
				break;
			case 0x188:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH HOOK");
				break;
			case 0x189:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER AFRICAN D");
				break;
			case 0x18A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH HOOK");
				break;
			case 0x18B:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH TOPBAR");
				break;
			case 0x18C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH TOPBAR");
				break;
			case 0x18D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED DELTA");
				break;
			case 0x18E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER REVERSED E");
				break;
			case 0x18F:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER SCHWA");
				break;
			case 0x190:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER OPEN E");
				break;
			case 0x191:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER F WITH HOOK");
				break;
			case 0x192:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER F WITH HOOK");
				break;
			case 0x193:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G WITH HOOK");
				break;
			case 0x194:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER GAMMA");
				break;
			case 0x195:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER HV");
				break;
			case 0x196:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER IOTA");
				break;
			case 0x197:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH STROKE");
				break;
			case 0x198:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH HOOK");
				break;
			case 0x199:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH HOOK");
				break;
			case 0x19A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH BAR");
				break;
			case 0x19B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LAMBDA WITH STROKE");
				break;
			case 0x19C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TURNED M");
				break;
			case 0x19D:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH LEFT HOOK");
				break;
			case 0x19E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH LONG RIGHT LEG");
				break;
			case 0x19F:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH MIDDLE TILDE");
				break;
			case 0x1A0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH HORN");
				break;
			case 0x1A1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH HORN");
				break;
			case 0x1A2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER OI");
				break;
			case 0x1A3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER OI");
				break;
			case 0x1A4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER P WITH HOOK");
				break;
			case 0x1A5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER P WITH HOOK");
				break;
			case 0x1A6:
				strcpy_s(buf, buf_size, "LATIN LETTER YR");
				break;
			case 0x1A7:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TONE TWO");
				break;
			case 0x1A8:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TONE TWO");
				break;
			case 0x1A9:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER ESH");
				break;
			case 0x1AA:
				strcpy_s(buf, buf_size, "LATIN LETTER REVERSED ESH LOOP");
				break;
			case 0x1AB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH PALATAL HOOK");
				break;
			case 0x1AC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH HOOK");
				break;
			case 0x1AD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH HOOK");
				break;
			case 0x1AE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH RETROFLEX HOOK");
				break;
			case 0x1AF:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH HORN");
				break;
			case 0x1B0:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH HORN");
				break;
			case 0x1B1:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER UPSILON");
				break;
			case 0x1B2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER V WITH HOOK");
				break;
			case 0x1B3:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH HOOK");
				break;
			case 0x1B4:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH HOOK");
				break;
			case 0x1B5:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH STROKE");
				break;
			case 0x1B6:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH STROKE");
				break;
			case 0x1B7:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER EZH");
				break;
			case 0x1B8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER EZH REVERSED");
				break;
			case 0x1B9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER EZH REVERSED");
				break;
			case 0x1BA:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER EZH WITH TAIL");
				break;
			case 0x1BB:
				strcpy_s(buf, buf_size, "LATIN LETTER TWO WITH STROKE");
				break;
			case 0x1BC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TONE FIVE");
				break;
			case 0x1BD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TONE FIVE");
				break;
			case 0x1BE:
				strcpy_s(buf, buf_size, "LATIN LETTER INVERTED GLOTTAL STOP WITH STROKE");
				break;
			case 0x1BF:
				strcpy_s(buf, buf_size, "LATIN LETTER WYNN");
				break;
			case 0x1C0:
				strcpy_s(buf, buf_size, "LATIN LETTER DENTAL CLICK");
				break;
			case 0x1C1:
				strcpy_s(buf, buf_size, "LATIN LETTER LATERAL CLICK");
				break;
			case 0x1C2:
				strcpy_s(buf, buf_size, "LATIN LETTER ALVEOLAR CLICK");
				break;
			case 0x1C3:
				strcpy_s(buf, buf_size, "LATIN LETTER RETROFLEX CLICK");
				break;
			case 0x1C4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER DZ WITH CARON");
				break;
			case 0x1C5:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON");
				break;
			case 0x1C6:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DZ WITH CARON");
				break;
			case 0x1C7:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER LJ");
				break;
			case 0x1C8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH SMALL LETTER J");
				break;
			case 0x1C9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LJ");
				break;
			case 0x1CA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER NJ");
				break;
			case 0x1CB:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH SMALL LETTER J");
				break;
			case 0x1CC:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER NJ");
				break;
			case 0x1CD:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH CARON");
				break;
			case 0x1CE:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH CARON");
				break;
			case 0x1CF:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH CARON");
				break;
			case 0x1D0:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH CARON");
				break;
			case 0x1D1:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH CARON");
				break;
			case 0x1D2:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH CARON");
				break;
			case 0x1D3:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH CARON");
				break;
			case 0x1D4:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH CARON");
				break;
			case 0x1D5:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH DIAERESIS AND MACRON");
				break;
			case 0x1D6:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH DIAERESIS AND MACRON");
				break;
			case 0x1D7:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH DIAERESIS AND ACUTE");
				break;
			case 0x1D8:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH DIAERESIS AND ACUTE");
				break;
			case 0x1D9:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH DIAERESIS AND CARON");
				break;
			case 0x1DA:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH DIAERESIS AND CARON");
				break;
			case 0x1DB:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH DIAERESIS AND GRAVE");
				break;
			case 0x1DC:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH DIAERESIS AND GRAVE");
				break;
			case 0x1DD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED E");
				break;
			case 0x1DE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH DIAERESIS AND MACRON");
				break;
			case 0x1DF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH DIAERESIS AND MACRON");
				break;
			case 0x1E0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH DOT ABOVE AND MACRON");
				break;
			case 0x1E1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH DOT ABOVE AND MACRON");
				break;
			case 0x1E2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER AE WITH MACRON");
				break;
			case 0x1E3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER AE WITH MACRON");
				break;
			case 0x1E4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G WITH STROKE");
				break;
			case 0x1E5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH STROKE");
				break;
			case 0x1E6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G WITH CARON");
				break;
			case 0x1E7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH CARON");
				break;
			case 0x1E8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH CARON");
				break;
			case 0x1E9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH CARON");
				break;
			case 0x1EA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH OGONEK");
				break;
			case 0x1EB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH OGONEK");
				break;
			case 0x1EC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH OGONEK AND MACRON");
				break;
			case 0x1ED:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH OGONEK AND MACRON");
				break;
			case 0x1EE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER EZH WITH CARON");
				break;
			case 0x1EF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER EZH WITH CARON");
				break;
			case 0x1F0:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER J WITH CARON");
				break;
			case 0x1F1:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER DZ");
				break;
			case 0x1F2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH SMALL LETTER Z");
				break;
			case 0x1F3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DZ");
				break;
			case 0x1F4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G WITH ACUTE");
				break;
			case 0x1F5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH ACUTE");
				break;
			case 0x1F6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER HWAIR");
				break;
			case 0x1F7:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER WYNN");
				break;
			case 0x1F8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH GRAVE");
				break;
			case 0x1F9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH GRAVE");
				break;
			case 0x1FA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH RING ABOVE AND ACUTE");
				break;
			case 0x1FB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH RING ABOVE AND ACUTE");
				break;
			case 0x1FC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER AE WITH ACUTE");
				break;
			case 0x1FD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER AE WITH ACUTE");
				break;
			case 0x1FE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH STROKE AND ACUTE");
				break;
			case 0x1FF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH STROKE AND ACUTE");
				break;
			case 0x200:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH DOUBLE GRAVE");
				break;
			case 0x201:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH DOUBLE GRAVE");
				break;
			case 0x202:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH INVERTED BREVE");
				break;
			case 0x203:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH INVERTED BREVE");
				break;
			case 0x204:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH DOUBLE GRAVE");
				break;
			case 0x205:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH DOUBLE GRAVE");
				break;
			case 0x206:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH INVERTED BREVE");
				break;
			case 0x207:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH INVERTED BREVE");
				break;
			case 0x208:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH DOUBLE GRAVE");
				break;
			case 0x209:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH DOUBLE GRAVE");
				break;
			case 0x20A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH INVERTED BREVE");
				break;
			case 0x20B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH INVERTED BREVE");
				break;
			case 0x20C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH DOUBLE GRAVE");
				break;
			case 0x20D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH DOUBLE GRAVE");
				break;
			case 0x20E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH INVERTED BREVE");
				break;
			case 0x20F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH INVERTED BREVE");
				break;
			case 0x210:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH DOUBLE GRAVE");
				break;
			case 0x211:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH DOUBLE GRAVE");
				break;
			case 0x212:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH INVERTED BREVE");
				break;
			case 0x213:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH INVERTED BREVE");
				break;
			case 0x214:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH DOUBLE GRAVE");
				break;
			case 0x215:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH DOUBLE GRAVE");
				break;
			case 0x216:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH INVERTED BREVE");
				break;
			case 0x217:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH INVERTED BREVE");
				break;
			case 0x218:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH COMMA BELOW");
				break;
			case 0x219:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH COMMA BELOW");
				break;
			case 0x21A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH COMMA BELOW");
				break;
			case 0x21B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH COMMA BELOW");
				break;
			case 0x21C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER YOGH");
				break;
			case 0x21D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER YOGH");
				break;
			case 0x21E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H WITH CARON");
				break;
			case 0x21F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH CARON");
				break;
			case 0x220:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH LONG RIGHT LEG");
				break;
			case 0x221:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH CURL");
				break;
			case 0x222:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER OU");
				break;
			case 0x223:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER OU");
				break;
			case 0x224:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH HOOK");
				break;
			case 0x225:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH HOOK");
				break;
			case 0x226:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH DOT ABOVE");
				break;
			case 0x227:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH DOT ABOVE");
				break;
			case 0x228:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH CEDILLA");
				break;
			case 0x229:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH CEDILLA");
				break;
			case 0x22A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH DIAERESIS AND MACRON");
				break;
			case 0x22B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH DIAERESIS AND MACRON");
				break;
			case 0x22C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH TILDE AND MACRON");
				break;
			case 0x22D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH TILDE AND MACRON");
				break;
			case 0x22E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH DOT ABOVE");
				break;
			case 0x22F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH DOT ABOVE");
				break;
			case 0x230:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH DOT ABOVE AND MACRON");
				break;
			case 0x231:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH DOT ABOVE AND MACRON");
				break;
			case 0x232:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH MACRON");
				break;
			case 0x233:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH MACRON");
				break;
			case 0x234:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH CURL");
				break;
			case 0x235:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH CURL");
				break;
			case 0x236:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH CURL");
				break;
			case 0x237:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DOTLESS J");
				break;
			case 0x238:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DB DIGRAPH");
				break;
			case 0x239:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER QP DIGRAPH");
				break;
			case 0x23A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH STROKE");
				break;
			case 0x23B:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C WITH STROKE");
				break;
			case 0x23C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH STROKE");
				break;
			case 0x23D:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH BAR");
				break;
			case 0x23E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH DIAGONAL STROKE");
				break;
			case 0x23F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH SWASH TAIL");
				break;
			case 0x240:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH SWASH TAIL");
				break;
			case 0x241:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER GLOTTAL STOP");
				break;
			case 0x242:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER GLOTTAL STOP");
				break;
			case 0x243:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER B WITH STROKE");
				break;
			case 0x244:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U BAR");
				break;
			case 0x245:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TURNED V");
				break;
			case 0x246:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH STROKE");
				break;
			case 0x247:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH STROKE");
				break;
			case 0x248:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER J WITH STROKE");
				break;
			case 0x249:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER J WITH STROKE");
				break;
			case 0x24A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER SMALL Q WITH HOOK TAIL");
				break;
			case 0x24B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Q WITH HOOK TAIL");
				break;
			case 0x24C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH STROKE");
				break;
			case 0x24D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH STROKE");
				break;
			case 0x24E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH STROKE");
				break;
			case 0x24F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH STROKE");
				break;
			case 0x250:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED A");
				break;
			case 0x251:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ALPHA");
				break;
			case 0x252:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED ALPHA");
				break;
			case 0x253:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER B WITH HOOK");
				break;
			case 0x254:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER OPEN O");
				break;
			case 0x255:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH CURL");
				break;
			case 0x256:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH TAIL");
				break;
			case 0x257:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH HOOK");
				break;
			case 0x258:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER REVERSED E");
				break;
			case 0x259:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SCHWA");
				break;
			case 0x25A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SCHWA WITH HOOK");
				break;
			case 0x25B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER OPEN E");
				break;
			case 0x25C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER REVERSED OPEN E");
				break;
			case 0x25D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER REVERSED OPEN E WITH HOOK");
				break;
			case 0x25E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER CLOSED REVERSED OPEN E");
				break;
			case 0x25F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DOTLESS J WITH STROKE");
				break;
			case 0x260:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH HOOK");
				break;
			case 0x261:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SCRIPT G");
				break;
			case 0x262:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL G");
				break;
			case 0x263:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER GAMMA");
				break;
			case 0x264:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER RAMS HORN");
				break;
			case 0x265:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED H");
				break;
			case 0x266:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH HOOK");
				break;
			case 0x267:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER HENG WITH HOOK");
				break;
			case 0x268:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH STROKE");
				break;
			case 0x269:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER IOTA");
				break;
			case 0x26A:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL I");
				break;
			case 0x26B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH MIDDLE TILDE");
				break;
			case 0x26C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH BELT");
				break;
			case 0x26D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH RETROFLEX HOOK");
				break;
			case 0x26E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LEZH");
				break;
			case 0x26F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED M");
				break;
			case 0x270:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED M WITH LONG LEG");
				break;
			case 0x271:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER M WITH HOOK");
				break;
			case 0x272:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH LEFT HOOK");
				break;
			case 0x273:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH RETROFLEX HOOK");
				break;
			case 0x274:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL N");
				break;
			case 0x275:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER BARRED O");
				break;
			case 0x276:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL OE");
				break;
			case 0x277:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER CLOSED OMEGA");
				break;
			case 0x278:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER PHI");
				break;
			case 0x279:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED R");
				break;
			case 0x27A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED R WITH LONG LEG");
				break;
			case 0x27B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED R WITH HOOK");
				break;
			case 0x27C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH LONG LEG");
				break;
			case 0x27D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH TAIL");
				break;
			case 0x27E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH FISHHOOK");
				break;
			case 0x27F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER REVERSED R WITH FISHHOOK");
				break;
			case 0x280:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL R");
				break;
			case 0x281:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL INVERTED R");
				break;
			case 0x282:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH HOOK");
				break;
			case 0x283:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ESH");
				break;
			case 0x284:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DOTLESS J WITH STROKE AND HOOK");
				break;
			case 0x285:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SQUAT REVERSED ESH");
				break;
			case 0x286:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ESH WITH CURL");
				break;
			case 0x287:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED T");
				break;
			case 0x288:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH RETROFLEX HOOK");
				break;
			case 0x289:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U BAR");
				break;
			case 0x28A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER UPSILON");
				break;
			case 0x28B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER V WITH HOOK");
				break;
			case 0x28C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED V");
				break;
			case 0x28D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED W");
				break;
			case 0x28E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED Y");
				break;
			case 0x28F:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL Y");
				break;
			case 0x290:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH RETROFLEX HOOK");
				break;
			case 0x291:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH CURL");
				break;
			case 0x292:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER EZH");
				break;
			case 0x293:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER EZH WITH CURL");
				break;
			case 0x294:
				strcpy_s(buf, buf_size, "LATIN LETTER GLOTTAL STOP");
				break;
			case 0x295:
				strcpy_s(buf, buf_size, "LATIN LETTER PHARYNGEAL VOICED FRICATIVE");
				break;
			case 0x296:
				strcpy_s(buf, buf_size, "LATIN LETTER INVERTED GLOTTAL STOP");
				break;
			case 0x297:
				strcpy_s(buf, buf_size, "LATIN LETTER STRETCHED C");
				break;
			case 0x298:
				strcpy_s(buf, buf_size, "LATIN LETTER BILABIAL CLICK");
				break;
			case 0x299:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL B");
				break;
			case 0x29A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER CLOSED OPEN E");
				break;
			case 0x29B:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL G WITH HOOK");
				break;
			case 0x29C:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL H");
				break;
			case 0x29D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER J WITH CROSSED-TAIL");
				break;
			case 0x29E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED K");
				break;
			case 0x29F:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL L");
				break;
			case 0x2A0:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Q WITH HOOK");
				break;
			case 0x2A1:
				strcpy_s(buf, buf_size, "LATIN LETTER GLOTTAL STOP WITH STROKE");
				break;
			case 0x2A2:
				strcpy_s(buf, buf_size, "LATIN LETTER REVERSED GLOTTAL STOP WITH STROKE");
				break;
			case 0x2A3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DZ DIGRAPH");
				break;
			case 0x2A4:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DEZH DIGRAPH");
				break;
			case 0x2A5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DZ DIGRAPH WITH CURL");
				break;
			case 0x2A6:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TS DIGRAPH");
				break;
			case 0x2A7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TESH DIGRAPH");
				break;
			case 0x2A8:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TC DIGRAPH WITH CURL");
				break;
			case 0x2A9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER FENG DIGRAPH");
				break;
			case 0x2AA:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LS DIGRAPH");
				break;
			case 0x2AB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LZ DIGRAPH");
				break;
			case 0x2AC:
				strcpy_s(buf, buf_size, "LATIN LETTER BILABIAL PERCUSSIVE");
				break;
			case 0x2AD:
				strcpy_s(buf, buf_size, "LATIN LETTER BIDENTAL PERCUSSIVE");
				break;
			case 0x2AE:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED H WITH FISHHOOK");
				break;
			case 0x2AF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED H WITH FISHHOOK AND TAIL");
				break;
			case 0x2B0:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL H");
				break;
			case 0x2B1:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL H WITH HOOK");
				break;
			case 0x2B2:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL J");
				break;
			case 0x2B3:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL R");
				break;
			case 0x2B4:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED R");
				break;
			case 0x2B5:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED R WITH HOOK");
				break;
			case 0x2B6:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL CAPITAL INVERTED R");
				break;
			case 0x2B7:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL W");
				break;
			case 0x2B8:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL Y");
				break;
			case 0x2B9:
				strcpy_s(buf, buf_size, "MODIFIER LETTER PRIME");
				break;
			case 0x2BA:
				strcpy_s(buf, buf_size, "MODIFIER LETTER DOUBLE PRIME");
				break;
			case 0x2BB:
				strcpy_s(buf, buf_size, "MODIFIER LETTER TURNED COMMA");
				break;
			case 0x2BC:
				strcpy_s(buf, buf_size, "MODIFIER LETTER APOSTROPHE");
				break;
			case 0x2BD:
				strcpy_s(buf, buf_size, "MODIFIER LETTER REVERSED COMMA");
				break;
			case 0x2BE:
				strcpy_s(buf, buf_size, "MODIFIER LETTER RIGHT HALF RING");
				break;
			case 0x2BF:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LEFT HALF RING");
				break;
			case 0x2C0:
				strcpy_s(buf, buf_size, "MODIFIER LETTER GLOTTAL STOP");
				break;
			case 0x2C1:
				strcpy_s(buf, buf_size, "MODIFIER LETTER REVERSED GLOTTAL STOP");
				break;
			case 0x2C2:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LEFT ARROWHEAD");
				break;
			case 0x2C3:
				strcpy_s(buf, buf_size, "MODIFIER LETTER RIGHT ARROWHEAD");
				break;
			case 0x2C4:
				strcpy_s(buf, buf_size, "MODIFIER LETTER UP ARROWHEAD");
				break;
			case 0x2C5:
				strcpy_s(buf, buf_size, "MODIFIER LETTER DOWN ARROWHEAD");
				break;
			case 0x2C6:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CIRCUMFLEX ACCENT");
				break;
			case 0x2C7:
				strcpy_s(buf, buf_size, "CARON");
				break;
			case 0x2C8:
				strcpy_s(buf, buf_size, "MODIFIER LETTER VERTICAL LINE");
				break;
			case 0x2C9:
				strcpy_s(buf, buf_size, "MODIFIER LETTER MACRON");
				break;
			case 0x2CA:
				strcpy_s(buf, buf_size, "MODIFIER LETTER ACUTE ACCENT");
				break;
			case 0x2CB:
				strcpy_s(buf, buf_size, "MODIFIER LETTER GRAVE ACCENT");
				break;
			case 0x2CC:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW VERTICAL LINE");
				break;
			case 0x2CD:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW MACRON");
				break;
			case 0x2CE:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW GRAVE ACCENT");
				break;
			case 0x2CF:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW ACUTE ACCENT");
				break;
			case 0x2D0:
				strcpy_s(buf, buf_size, "MODIFIER LETTER TRIANGULAR COLON");
				break;
			case 0x2D1:
				strcpy_s(buf, buf_size, "MODIFIER LETTER HALF TRIANGULAR COLON");
				break;
			case 0x2D2:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CENTRED RIGHT HALF RING");
				break;
			case 0x2D3:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CENTRED LEFT HALF RING");
				break;
			case 0x2D4:
				strcpy_s(buf, buf_size, "MODIFIER LETTER UP TACK");
				break;
			case 0x2D5:
				strcpy_s(buf, buf_size, "MODIFIER LETTER DOWN TACK");
				break;
			case 0x2D6:
				strcpy_s(buf, buf_size, "MODIFIER LETTER PLUS SIGN");
				break;
			case 0x2D7:
				strcpy_s(buf, buf_size, "MODIFIER LETTER MINUS SIGN");
				break;
			case 0x2D8:
				strcpy_s(buf, buf_size, "BREVE");
				break;
			case 0x2D9:
				strcpy_s(buf, buf_size, "DOT ABOVE");
				break;
			case 0x2DA:
				strcpy_s(buf, buf_size, "RING ABOVE");
				break;
			case 0x2DB:
				strcpy_s(buf, buf_size, "OGONEK");
				break;
			case 0x2DC:
				strcpy_s(buf, buf_size, "SMALL TILDE");
				break;
			case 0x2DD:
				strcpy_s(buf, buf_size, "DOUBLE ACUTE ACCENT");
				break;
			case 0x2DE:
				strcpy_s(buf, buf_size, "MODIFIER LETTER RHOTIC HOOK");
				break;
			case 0x2DF:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CROSS ACCENT");
				break;
			case 0x2E0:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL GAMMA");
				break;
			case 0x2E1:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL L");
				break;
			case 0x2E2:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL S");
				break;
			case 0x2E3:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL X");
				break;
			case 0x2E4:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL REVERSED GLOTTAL STOP");
				break;
			case 0x2E5:
				strcpy_s(buf, buf_size, "MODIFIER LETTER EXTRA-HIGH TONE BAR");
				break;
			case 0x2E6:
				strcpy_s(buf, buf_size, "MODIFIER LETTER HIGH TONE BAR");
				break;
			case 0x2E7:
				strcpy_s(buf, buf_size, "MODIFIER LETTER MID TONE BAR");
				break;
			case 0x2E8:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW TONE BAR");
				break;
			case 0x2E9:
				strcpy_s(buf, buf_size, "MODIFIER LETTER EXTRA-LOW TONE BAR");
				break;
			case 0x2EA:
				strcpy_s(buf, buf_size, "MODIFIER LETTER YIN DEPARTING TONE MARK");
				break;
			case 0x2EB:
				strcpy_s(buf, buf_size, "MODIFIER LETTER YANG DEPARTING TONE MARK");
				break;
			case 0x2EC:
				strcpy_s(buf, buf_size, "MODIFIER LETTER VOICING");
				break;
			case 0x2ED:
				strcpy_s(buf, buf_size, "MODIFIER LETTER UNASPIRATED");
				break;
			case 0x2EE:
				strcpy_s(buf, buf_size, "MODIFIER LETTER DOUBLE APOSTROPHE");
				break;
			case 0x2EF:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW DOWN ARROWHEAD");
				break;
			case 0x2F0:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW UP ARROWHEAD");
				break;
			case 0x2F1:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW LEFT ARROWHEAD");
				break;
			case 0x2F2:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW RIGHT ARROWHEAD");
				break;
			case 0x2F3:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW RING");
				break;
			case 0x2F4:
				strcpy_s(buf, buf_size, "MODIFIER LETTER MIDDLE GRAVE ACCENT");
				break;
			case 0x2F5:
				strcpy_s(buf, buf_size, "MODIFIER LETTER MIDDLE DOUBLE GRAVE ACCENT");
				break;
			case 0x2F6:
				strcpy_s(buf, buf_size, "MODIFIER LETTER MIDDLE DOUBLE ACUTE ACCENT");
				break;
			case 0x2F7:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW TILDE");
				break;
			case 0x2F8:
				strcpy_s(buf, buf_size, "MODIFIER LETTER RAISED COLON");
				break;
			case 0x2F9:
				strcpy_s(buf, buf_size, "MODIFIER LETTER BEGIN HIGH TONE");
				break;
			case 0x2FA:
				strcpy_s(buf, buf_size, "MODIFIER LETTER END HIGH TONE");
				break;
			case 0x2FB:
				strcpy_s(buf, buf_size, "MODIFIER LETTER BEGIN LOW TONE");
				break;
			case 0x2FC:
				strcpy_s(buf, buf_size, "MODIFIER LETTER END LOW TONE");
				break;
			case 0x2FD:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SHELF");
				break;
			case 0x2FE:
				strcpy_s(buf, buf_size, "MODIFIER LETTER OPEN SHELF");
				break;
			case 0x2FF:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW LEFT ARROW");
				break;
			case 0x300:
				strcpy_s(buf, buf_size, "COMBINING GRAVE ACCENT");
				break;
			case 0x301:
				strcpy_s(buf, buf_size, "COMBINING ACUTE ACCENT");
				break;
			case 0x302:
				strcpy_s(buf, buf_size, "COMBINING CIRCUMFLEX ACCENT");
				break;
			case 0x303:
				strcpy_s(buf, buf_size, "COMBINING TILDE");
				break;
			case 0x304:
				strcpy_s(buf, buf_size, "COMBINING MACRON");
				break;
			case 0x305:
				strcpy_s(buf, buf_size, "COMBINING OVERLINE");
				break;
			case 0x306:
				strcpy_s(buf, buf_size, "COMBINING BREVE");
				break;
			case 0x307:
				strcpy_s(buf, buf_size, "COMBINING DOT ABOVE");
				break;
			case 0x308:
				strcpy_s(buf, buf_size, "COMBINING DIAERESIS");
				break;
			case 0x309:
				strcpy_s(buf, buf_size, "COMBINING HOOK ABOVE");
				break;
			case 0x30A:
				strcpy_s(buf, buf_size, "COMBINING RING ABOVE");
				break;
			case 0x30B:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE ACUTE ACCENT");
				break;
			case 0x30C:
				strcpy_s(buf, buf_size, "COMBINING CARON");
				break;
			case 0x30D:
				strcpy_s(buf, buf_size, "COMBINING VERTICAL LINE ABOVE");
				break;
			case 0x30E:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE VERTICAL LINE ABOVE");
				break;
			case 0x30F:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE GRAVE ACCENT");
				break;
			case 0x310:
				strcpy_s(buf, buf_size, "COMBINING CANDRABINDU");
				break;
			case 0x311:
				strcpy_s(buf, buf_size, "COMBINING INVERTED BREVE");
				break;
			case 0x312:
				strcpy_s(buf, buf_size, "COMBINING TURNED COMMA ABOVE");
				break;
			case 0x313:
				strcpy_s(buf, buf_size, "COMBINING COMMA ABOVE");
				break;
			case 0x314:
				strcpy_s(buf, buf_size, "COMBINING REVERSED COMMA ABOVE");
				break;
			case 0x315:
				strcpy_s(buf, buf_size, "COMBINING COMMA ABOVE RIGHT");
				break;
			case 0x316:
				strcpy_s(buf, buf_size, "COMBINING GRAVE ACCENT BELOW");
				break;
			case 0x317:
				strcpy_s(buf, buf_size, "COMBINING ACUTE ACCENT BELOW");
				break;
			case 0x318:
				strcpy_s(buf, buf_size, "COMBINING LEFT TACK BELOW");
				break;
			case 0x319:
				strcpy_s(buf, buf_size, "COMBINING RIGHT TACK BELOW");
				break;
			case 0x31A:
				strcpy_s(buf, buf_size, "COMBINING LEFT ANGLE ABOVE");
				break;
			case 0x31B:
				strcpy_s(buf, buf_size, "COMBINING HORN");
				break;
			case 0x31C:
				strcpy_s(buf, buf_size, "COMBINING LEFT HALF RING BELOW");
				break;
			case 0x31D:
				strcpy_s(buf, buf_size, "COMBINING UP TACK BELOW");
				break;
			case 0x31E:
				strcpy_s(buf, buf_size, "COMBINING DOWN TACK BELOW");
				break;
			case 0x31F:
				strcpy_s(buf, buf_size, "COMBINING PLUS SIGN BELOW");
				break;
			case 0x320:
				strcpy_s(buf, buf_size, "COMBINING MINUS SIGN BELOW");
				break;
			case 0x321:
				strcpy_s(buf, buf_size, "COMBINING PALATALIZED HOOK BELOW");
				break;
			case 0x322:
				strcpy_s(buf, buf_size, "COMBINING RETROFLEX HOOK BELOW");
				break;
			case 0x323:
				strcpy_s(buf, buf_size, "COMBINING DOT BELOW");
				break;
			case 0x324:
				strcpy_s(buf, buf_size, "COMBINING DIAERESIS BELOW");
				break;
			case 0x325:
				strcpy_s(buf, buf_size, "COMBINING RING BELOW");
				break;
			case 0x326:
				strcpy_s(buf, buf_size, "COMBINING COMMA BELOW");
				break;
			case 0x327:
				strcpy_s(buf, buf_size, "COMBINING CEDILLA");
				break;
			case 0x328:
				strcpy_s(buf, buf_size, "COMBINING OGONEK");
				break;
			case 0x329:
				strcpy_s(buf, buf_size, "COMBINING VERTICAL LINE BELOW");
				break;
			case 0x32A:
				strcpy_s(buf, buf_size, "COMBINING BRIDGE BELOW");
				break;
			case 0x32B:
				strcpy_s(buf, buf_size, "COMBINING INVERTED DOUBLE ARCH BELOW");
				break;
			case 0x32C:
				strcpy_s(buf, buf_size, "COMBINING CARON BELOW");
				break;
			case 0x32D:
				strcpy_s(buf, buf_size, "COMBINING CIRCUMFLEX ACCENT BELOW");
				break;
			case 0x32E:
				strcpy_s(buf, buf_size, "COMBINING BREVE BELOW");
				break;
			case 0x32F:
				strcpy_s(buf, buf_size, "COMBINING INVERTED BREVE BELOW");
				break;
			case 0x330:
				strcpy_s(buf, buf_size, "COMBINING TILDE BELOW");
				break;
			case 0x331:
				strcpy_s(buf, buf_size, "COMBINING MACRON BELOW");
				break;
			case 0x332:
				strcpy_s(buf, buf_size, "COMBINING LOW LINE");
				break;
			case 0x333:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE LOW LINE");
				break;
			case 0x334:
				strcpy_s(buf, buf_size, "COMBINING TILDE OVERLAY");
				break;
			case 0x335:
				strcpy_s(buf, buf_size, "COMBINING SHORT STROKE OVERLAY");
				break;
			case 0x336:
				strcpy_s(buf, buf_size, "COMBINING LONG STROKE OVERLAY");
				break;
			case 0x337:
				strcpy_s(buf, buf_size, "COMBINING SHORT SOLIDUS OVERLAY");
				break;
			case 0x338:
				strcpy_s(buf, buf_size, "COMBINING LONG SOLIDUS OVERLAY");
				break;
			case 0x339:
				strcpy_s(buf, buf_size, "COMBINING RIGHT HALF RING BELOW");
				break;
			case 0x33A:
				strcpy_s(buf, buf_size, "COMBINING INVERTED BRIDGE BELOW");
				break;
			case 0x33B:
				strcpy_s(buf, buf_size, "COMBINING SQUARE BELOW");
				break;
			case 0x33C:
				strcpy_s(buf, buf_size, "COMBINING SEAGULL BELOW");
				break;
			case 0x33D:
				strcpy_s(buf, buf_size, "COMBINING X ABOVE");
				break;
			case 0x33E:
				strcpy_s(buf, buf_size, "COMBINING VERTICAL TILDE");
				break;
			case 0x33F:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE OVERLINE");
				break;
			case 0x340:
				strcpy_s(buf, buf_size, "COMBINING GRAVE TONE MARK");
				break;
			case 0x341:
				strcpy_s(buf, buf_size, "COMBINING ACUTE TONE MARK");
				break;
			case 0x342:
				strcpy_s(buf, buf_size, "COMBINING GREEK PERISPOMENI");
				break;
			case 0x343:
				strcpy_s(buf, buf_size, "COMBINING GREEK KORONIS");
				break;
			case 0x344:
				strcpy_s(buf, buf_size, "COMBINING GREEK DIALYTIKA TONOS");
				break;
			case 0x345:
				strcpy_s(buf, buf_size, "COMBINING GREEK YPOGEGRAMMENI");
				break;
			case 0x346:
				strcpy_s(buf, buf_size, "COMBINING BRIDGE ABOVE");
				break;
			case 0x347:
				strcpy_s(buf, buf_size, "COMBINING EQUALS SIGN BELOW");
				break;
			case 0x348:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE VERTICAL LINE BELOW");
				break;
			case 0x349:
				strcpy_s(buf, buf_size, "COMBINING LEFT ANGLE BELOW");
				break;
			case 0x34A:
				strcpy_s(buf, buf_size, "COMBINING NOT TILDE ABOVE");
				break;
			case 0x34B:
				strcpy_s(buf, buf_size, "COMBINING HOMOTHETIC ABOVE");
				break;
			case 0x34C:
				strcpy_s(buf, buf_size, "COMBINING ALMOST EQUAL TO ABOVE");
				break;
			case 0x34D:
				strcpy_s(buf, buf_size, "COMBINING LEFT RIGHT ARROW BELOW");
				break;
			case 0x34E:
				strcpy_s(buf, buf_size, "COMBINING UPWARDS ARROW BELOW");
				break;
			case 0x34F:
				strcpy_s(buf, buf_size, "COMBINING GRAPHEME JOINER");
				break;
			case 0x350:
				strcpy_s(buf, buf_size, "COMBINING RIGHT ARROWHEAD ABOVE");
				break;
			case 0x351:
				strcpy_s(buf, buf_size, "COMBINING LEFT HALF RING ABOVE");
				break;
			case 0x352:
				strcpy_s(buf, buf_size, "COMBINING FERMATA");
				break;
			case 0x353:
				strcpy_s(buf, buf_size, "COMBINING X BELOW");
				break;
			case 0x354:
				strcpy_s(buf, buf_size, "COMBINING LEFT ARROWHEAD BELOW");
				break;
			case 0x355:
				strcpy_s(buf, buf_size, "COMBINING RIGHT ARROWHEAD BELOW");
				break;
			case 0x356:
				strcpy_s(buf, buf_size, "COMBINING RIGHT ARROWHEAD AND UP ARROWHEAD BELOW");
				break;
			case 0x357:
				strcpy_s(buf, buf_size, "COMBINING RIGHT HALF RING ABOVE");
				break;
			case 0x358:
				strcpy_s(buf, buf_size, "COMBINING DOT ABOVE RIGHT");
				break;
			case 0x359:
				strcpy_s(buf, buf_size, "COMBINING ASTERISK BELOW");
				break;
			case 0x35A:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE RING BELOW");
				break;
			case 0x35B:
				strcpy_s(buf, buf_size, "COMBINING ZIGZAG ABOVE");
				break;
			case 0x35C:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE BREVE BELOW");
				break;
			case 0x35D:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE BREVE");
				break;
			case 0x35E:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE MACRON");
				break;
			case 0x35F:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE MACRON BELOW");
				break;
			case 0x360:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE TILDE");
				break;
			case 0x361:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE INVERTED BREVE");
				break;
			case 0x362:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE RIGHTWARDS ARROW BELOW");
				break;
			case 0x363:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER A");
				break;
			case 0x364:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER E");
				break;
			case 0x365:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER I");
				break;
			case 0x366:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER O");
				break;
			case 0x367:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER U");
				break;
			case 0x368:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER C");
				break;
			case 0x369:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER D");
				break;
			case 0x36A:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER H");
				break;
			case 0x36B:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER M");
				break;
			case 0x36C:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER R");
				break;
			case 0x36D:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER T");
				break;
			case 0x36E:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER V");
				break;
			case 0x36F:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER X");
				break;
			case 0x370:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER HETA");
				break;
			case 0x371:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER HETA");
				break;
			case 0x372:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ARCHAIC SAMPI");
				break;
			case 0x373:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ARCHAIC SAMPI");
				break;
			case 0x374:
				strcpy_s(buf, buf_size, "GREEK NUMERAL SIGN");
				break;
			case 0x375:
				strcpy_s(buf, buf_size, "GREEK LOWER NUMERAL SIGN");
				break;
			case 0x376:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER PAMPHYLIAN DIGAMMA");
				break;
			case 0x377:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER PAMPHYLIAN DIGAMMA");
				break;
			case 0x37A:
				strcpy_s(buf, buf_size, "GREEK YPOGEGRAMMENI");
				break;
			case 0x37B:
				strcpy_s(buf, buf_size, "GREEK SMALL REVERSED LUNATE SIGMA SYMBOL");
				break;
			case 0x37C:
				strcpy_s(buf, buf_size, "GREEK SMALL DOTTED LUNATE SIGMA SYMBOL");
				break;
			case 0x37D:
				strcpy_s(buf, buf_size, "GREEK SMALL REVERSED DOTTED LUNATE SIGMA SYMBOL");
				break;
			case 0x37E:
				strcpy_s(buf, buf_size, "GREEK QUESTION MARK");
				break;
			case 0x37F:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER YOT");
				break;
			case 0x384:
				strcpy_s(buf, buf_size, "GREEK TONOS");
				break;
			case 0x385:
				strcpy_s(buf, buf_size, "GREEK DIALYTIKA TONOS");
				break;
			case 0x386:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH TONOS");
				break;
			case 0x387:
				strcpy_s(buf, buf_size, "GREEK ANO TELEIA");
				break;
			case 0x388:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER EPSILON WITH TONOS");
				break;
			case 0x389:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH TONOS");
				break;
			case 0x38A:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH TONOS");
				break;
			case 0x38C:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMICRON WITH TONOS");
				break;
			case 0x38E:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON WITH TONOS");
				break;
			case 0x38F:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH TONOS");
				break;
			case 0x390:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS");
				break;
			case 0x391:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA");
				break;
			case 0x392:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER BETA");
				break;
			case 0x393:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER GAMMA");
				break;
			case 0x394:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER DELTA");
				break;
			case 0x395:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER EPSILON");
				break;
			case 0x396:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ZETA");
				break;
			case 0x397:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA");
				break;
			case 0x398:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER THETA");
				break;
			case 0x399:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA");
				break;
			case 0x39A:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER KAPPA");
				break;
			case 0x39B:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER LAMDA");
				break;
			case 0x39C:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER MU");
				break;
			case 0x39D:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER NU");
				break;
			case 0x39E:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER XI");
				break;
			case 0x39F:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMICRON");
				break;
			case 0x3A0:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER PI");
				break;
			case 0x3A1:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER RHO");
				break;
			case 0x3A3:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER SIGMA");
				break;
			case 0x3A4:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER TAU");
				break;
			case 0x3A5:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON");
				break;
			case 0x3A6:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER PHI");
				break;
			case 0x3A7:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER CHI");
				break;
			case 0x3A8:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER PSI");
				break;
			case 0x3A9:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA");
				break;
			case 0x3AA:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH DIALYTIKA");
				break;
			case 0x3AB:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA");
				break;
			case 0x3AC:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH TONOS");
				break;
			case 0x3AD:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER EPSILON WITH TONOS");
				break;
			case 0x3AE:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH TONOS");
				break;
			case 0x3AF:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH TONOS");
				break;
			case 0x3B0:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS");
				break;
			case 0x3B1:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA");
				break;
			case 0x3B2:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER BETA");
				break;
			case 0x3B3:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER GAMMA");
				break;
			case 0x3B4:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER DELTA");
				break;
			case 0x3B5:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER EPSILON");
				break;
			case 0x3B6:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ZETA");
				break;
			case 0x3B7:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA");
				break;
			case 0x3B8:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER THETA");
				break;
			case 0x3B9:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA");
				break;
			case 0x3BA:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER KAPPA");
				break;
			case 0x3BB:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER LAMDA");
				break;
			case 0x3BC:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER MU");
				break;
			case 0x3BD:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER NU");
				break;
			case 0x3BE:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER XI");
				break;
			case 0x3BF:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMICRON");
				break;
			case 0x3C0:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER PI");
				break;
			case 0x3C1:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER RHO");
				break;
			case 0x3C2:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER FINAL SIGMA");
				break;
			case 0x3C3:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER SIGMA");
				break;
			case 0x3C4:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER TAU");
				break;
			case 0x3C5:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON");
				break;
			case 0x3C6:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER PHI");
				break;
			case 0x3C7:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER CHI");
				break;
			case 0x3C8:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER PSI");
				break;
			case 0x3C9:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA");
				break;
			case 0x3CA:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH DIALYTIKA");
				break;
			case 0x3CB:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH DIALYTIKA");
				break;
			case 0x3CC:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMICRON WITH TONOS");
				break;
			case 0x3CD:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH TONOS");
				break;
			case 0x3CE:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH TONOS");
				break;
			case 0x3CF:
				strcpy_s(buf, buf_size, "GREEK CAPITAL KAI SYMBOL");
				break;
			case 0x3D0:
				strcpy_s(buf, buf_size, "GREEK BETA SYMBOL");
				break;
			case 0x3D1:
				strcpy_s(buf, buf_size, "GREEK THETA SYMBOL");
				break;
			case 0x3D2:
				strcpy_s(buf, buf_size, "GREEK UPSILON WITH HOOK SYMBOL");
				break;
			case 0x3D3:
				strcpy_s(buf, buf_size, "GREEK UPSILON WITH ACUTE AND HOOK SYMBOL");
				break;
			case 0x3D4:
				strcpy_s(buf, buf_size, "GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL");
				break;
			case 0x3D5:
				strcpy_s(buf, buf_size, "GREEK PHI SYMBOL");
				break;
			case 0x3D6:
				strcpy_s(buf, buf_size, "GREEK PI SYMBOL");
				break;
			case 0x3D7:
				strcpy_s(buf, buf_size, "GREEK KAI SYMBOL");
				break;
			case 0x3D8:
				strcpy_s(buf, buf_size, "GREEK LETTER ARCHAIC KOPPA");
				break;
			case 0x3D9:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ARCHAIC KOPPA");
				break;
			case 0x3DA:
				strcpy_s(buf, buf_size, "GREEK LETTER STIGMA");
				break;
			case 0x3DB:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER STIGMA");
				break;
			case 0x3DC:
				strcpy_s(buf, buf_size, "GREEK LETTER DIGAMMA");
				break;
			case 0x3DD:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER DIGAMMA");
				break;
			case 0x3DE:
				strcpy_s(buf, buf_size, "GREEK LETTER KOPPA");
				break;
			case 0x3DF:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER KOPPA");
				break;
			case 0x3E0:
				strcpy_s(buf, buf_size, "GREEK LETTER SAMPI");
				break;
			case 0x3E1:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER SAMPI");
				break;
			case 0x3E2:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER SHEI");
				break;
			case 0x3E3:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER SHEI");
				break;
			case 0x3E4:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER FEI");
				break;
			case 0x3E5:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER FEI");
				break;
			case 0x3E6:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER KHEI");
				break;
			case 0x3E7:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER KHEI");
				break;
			case 0x3E8:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER HORI");
				break;
			case 0x3E9:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER HORI");
				break;
			case 0x3EA:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER GANGIA");
				break;
			case 0x3EB:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER GANGIA");
				break;
			case 0x3EC:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER SHIMA");
				break;
			case 0x3ED:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER SHIMA");
				break;
			case 0x3EE:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER DEI");
				break;
			case 0x3EF:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER DEI");
				break;
			case 0x3F0:
				strcpy_s(buf, buf_size, "GREEK KAPPA SYMBOL");
				break;
			case 0x3F1:
				strcpy_s(buf, buf_size, "GREEK RHO SYMBOL");
				break;
			case 0x3F2:
				strcpy_s(buf, buf_size, "GREEK LUNATE SIGMA SYMBOL");
				break;
			case 0x3F3:
				strcpy_s(buf, buf_size, "GREEK LETTER YOT");
				break;
			case 0x3F4:
				strcpy_s(buf, buf_size, "GREEK CAPITAL THETA SYMBOL");
				break;
			case 0x3F5:
				strcpy_s(buf, buf_size, "GREEK LUNATE EPSILON SYMBOL");
				break;
			case 0x3F6:
				strcpy_s(buf, buf_size, "GREEK REVERSED LUNATE EPSILON SYMBOL");
				break;
			case 0x3F7:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER SHO");
				break;
			case 0x3F8:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER SHO");
				break;
			case 0x3F9:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LUNATE SIGMA SYMBOL");
				break;
			case 0x3FA:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER SAN");
				break;
			case 0x3FB:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER SAN");
				break;
			case 0x3FC:
				strcpy_s(buf, buf_size, "GREEK RHO WITH STROKE SYMBOL");
				break;
			case 0x3FD:
				strcpy_s(buf, buf_size, "GREEK CAPITAL REVERSED LUNATE SIGMA SYMBOL");
				break;
			case 0x3FE:
				strcpy_s(buf, buf_size, "GREEK CAPITAL DOTTED LUNATE SIGMA SYMBOL");
				break;
			case 0x3FF:
				strcpy_s(buf, buf_size, "GREEK CAPITAL REVERSED DOTTED LUNATE SIGMA SYMBOL");
				break;
			case 0x400:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IE WITH GRAVE");
				break;
			case 0x401:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IO");
				break;
			case 0x402:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DJE");
				break;
			case 0x403:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER GJE");
				break;
			case 0x404:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER UKRAINIAN IE");
				break;
			case 0x405:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DZE");
				break;
			case 0x406:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I");
				break;
			case 0x407:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER YI");
				break;
			case 0x408:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER JE");
				break;
			case 0x409:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER LJE");
				break;
			case 0x40A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER NJE");
				break;
			case 0x40B:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER TSHE");
				break;
			case 0x40C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KJE");
				break;
			case 0x40D:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER I WITH GRAVE");
				break;
			case 0x40E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SHORT U");
				break;
			case 0x40F:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DZHE");
				break;
			case 0x410:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER A");
				break;
			case 0x411:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER BE");
				break;
			case 0x412:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER VE");
				break;
			case 0x413:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER GHE");
				break;
			case 0x414:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DE");
				break;
			case 0x415:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IE");
				break;
			case 0x416:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ZHE");
				break;
			case 0x417:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ZE");
				break;
			case 0x418:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER I");
				break;
			case 0x419:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SHORT I");
				break;
			case 0x41A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KA");
				break;
			case 0x41B:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EL");
				break;
			case 0x41C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EM");
				break;
			case 0x41D:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EN");
				break;
			case 0x41E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER O");
				break;
			case 0x41F:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER PE");
				break;
			case 0x420:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ER");
				break;
			case 0x421:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ES");
				break;
			case 0x422:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER TE");
				break;
			case 0x423:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER U");
				break;
			case 0x424:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EF");
				break;
			case 0x425:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER HA");
				break;
			case 0x426:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER TSE");
				break;
			case 0x427:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER CHE");
				break;
			case 0x428:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SHA");
				break;
			case 0x429:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SHCHA");
				break;
			case 0x42A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER HARD SIGN");
				break;
			case 0x42B:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER YERU");
				break;
			case 0x42C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SOFT SIGN");
				break;
			case 0x42D:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER E");
				break;
			case 0x42E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER YU");
				break;
			case 0x42F:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER YA");
				break;
			case 0x430:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER A");
				break;
			case 0x431:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER BE");
				break;
			case 0x432:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER VE");
				break;
			case 0x433:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER GHE");
				break;
			case 0x434:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DE");
				break;
			case 0x435:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IE");
				break;
			case 0x436:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ZHE");
				break;
			case 0x437:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ZE");
				break;
			case 0x438:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER I");
				break;
			case 0x439:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SHORT I");
				break;
			case 0x43A:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KA");
				break;
			case 0x43B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EL");
				break;
			case 0x43C:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EM");
				break;
			case 0x43D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EN");
				break;
			case 0x43E:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER O");
				break;
			case 0x43F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER PE");
				break;
			case 0x440:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ER");
				break;
			case 0x441:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ES");
				break;
			case 0x442:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TE");
				break;
			case 0x443:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER U");
				break;
			case 0x444:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EF");
				break;
			case 0x445:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER HA");
				break;
			case 0x446:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TSE");
				break;
			case 0x447:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER CHE");
				break;
			case 0x448:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SHA");
				break;
			case 0x449:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SHCHA");
				break;
			case 0x44A:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER HARD SIGN");
				break;
			case 0x44B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER YERU");
				break;
			case 0x44C:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SOFT SIGN");
				break;
			case 0x44D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER E");
				break;
			case 0x44E:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER YU");
				break;
			case 0x44F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER YA");
				break;
			case 0x450:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IE WITH GRAVE");
				break;
			case 0x451:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IO");
				break;
			case 0x452:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DJE");
				break;
			case 0x453:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER GJE");
				break;
			case 0x454:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER UKRAINIAN IE");
				break;
			case 0x455:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DZE");
				break;
			case 0x456:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I");
				break;
			case 0x457:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER YI");
				break;
			case 0x458:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER JE");
				break;
			case 0x459:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER LJE");
				break;
			case 0x45A:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER NJE");
				break;
			case 0x45B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TSHE");
				break;
			case 0x45C:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KJE");
				break;
			case 0x45D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER I WITH GRAVE");
				break;
			case 0x45E:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SHORT U");
				break;
			case 0x45F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DZHE");
				break;
			case 0x460:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER OMEGA");
				break;
			case 0x461:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER OMEGA");
				break;
			case 0x462:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER YAT");
				break;
			case 0x463:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER YAT");
				break;
			case 0x464:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IOTIFIED E");
				break;
			case 0x465:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IOTIFIED E");
				break;
			case 0x466:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER LITTLE YUS");
				break;
			case 0x467:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER LITTLE YUS");
				break;
			case 0x468:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IOTIFIED LITTLE YUS");
				break;
			case 0x469:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IOTIFIED LITTLE YUS");
				break;
			case 0x46A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER BIG YUS");
				break;
			case 0x46B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER BIG YUS");
				break;
			case 0x46C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IOTIFIED BIG YUS");
				break;
			case 0x46D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IOTIFIED BIG YUS");
				break;
			case 0x46E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KSI");
				break;
			case 0x46F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KSI");
				break;
			case 0x470:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER PSI");
				break;
			case 0x471:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER PSI");
				break;
			case 0x472:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER FITA");
				break;
			case 0x473:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER FITA");
				break;
			case 0x474:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IZHITSA");
				break;
			case 0x475:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IZHITSA");
				break;
			case 0x476:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT");
				break;
			case 0x477:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IZHITSA WITH DOUBLE GRAVE ACCENT");
				break;
			case 0x478:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER UK");
				break;
			case 0x479:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER UK");
				break;
			case 0x47A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ROUND OMEGA");
				break;
			case 0x47B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ROUND OMEGA");
				break;
			case 0x47C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER OMEGA WITH TITLO");
				break;
			case 0x47D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER OMEGA WITH TITLO");
				break;
			case 0x47E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER OT");
				break;
			case 0x47F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER OT");
				break;
			case 0x480:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KOPPA");
				break;
			case 0x481:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KOPPA");
				break;
			case 0x482:
				strcpy_s(buf, buf_size, "CYRILLIC THOUSANDS SIGN");
				break;
			case 0x483:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC TITLO");
				break;
			case 0x484:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC PALATALIZATION");
				break;
			case 0x485:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC DASIA PNEUMATA");
				break;
			case 0x486:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC PSILI PNEUMATA");
				break;
			case 0x487:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC POKRYTIE");
				break;
			case 0x488:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC HUNDRED THOUSANDS SIGN");
				break;
			case 0x489:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC MILLIONS SIGN");
				break;
			case 0x48A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SHORT I WITH TAIL");
				break;
			case 0x48B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SHORT I WITH TAIL");
				break;
			case 0x48C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SEMISOFT SIGN");
				break;
			case 0x48D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SEMISOFT SIGN");
				break;
			case 0x48E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ER WITH TICK");
				break;
			case 0x48F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ER WITH TICK");
				break;
			case 0x490:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER GHE WITH UPTURN");
				break;
			case 0x491:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER GHE WITH UPTURN");
				break;
			case 0x492:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER GHE WITH STROKE");
				break;
			case 0x493:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER GHE WITH STROKE");
				break;
			case 0x494:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER GHE WITH MIDDLE HOOK");
				break;
			case 0x495:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER GHE WITH MIDDLE HOOK");
				break;
			case 0x496:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ZHE WITH DESCENDER");
				break;
			case 0x497:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ZHE WITH DESCENDER");
				break;
			case 0x498:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ZE WITH DESCENDER");
				break;
			case 0x499:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ZE WITH DESCENDER");
				break;
			case 0x49A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KA WITH DESCENDER");
				break;
			case 0x49B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KA WITH DESCENDER");
				break;
			case 0x49C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KA WITH VERTICAL STROKE");
				break;
			case 0x49D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KA WITH VERTICAL STROKE");
				break;
			case 0x49E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KA WITH STROKE");
				break;
			case 0x49F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KA WITH STROKE");
				break;
			case 0x4A0:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER BASHKIR KA");
				break;
			case 0x4A1:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER BASHKIR KA");
				break;
			case 0x4A2:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EN WITH DESCENDER");
				break;
			case 0x4A3:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EN WITH DESCENDER");
				break;
			case 0x4A4:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LIGATURE EN GHE");
				break;
			case 0x4A5:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LIGATURE EN GHE");
				break;
			case 0x4A6:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER PE WITH MIDDLE HOOK");
				break;
			case 0x4A7:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER PE WITH MIDDLE HOOK");
				break;
			case 0x4A8:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ABKHASIAN HA");
				break;
			case 0x4A9:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ABKHASIAN HA");
				break;
			case 0x4AA:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ES WITH DESCENDER");
				break;
			case 0x4AB:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ES WITH DESCENDER");
				break;
			case 0x4AC:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER TE WITH DESCENDER");
				break;
			case 0x4AD:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TE WITH DESCENDER");
				break;
			case 0x4AE:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER STRAIGHT U");
				break;
			case 0x4AF:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER STRAIGHT U");
				break;
			case 0x4B0:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER STRAIGHT U WITH STROKE");
				break;
			case 0x4B1:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER STRAIGHT U WITH STROKE");
				break;
			case 0x4B2:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER HA WITH DESCENDER");
				break;
			case 0x4B3:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER HA WITH DESCENDER");
				break;
			case 0x4B4:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LIGATURE TE TSE");
				break;
			case 0x4B5:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LIGATURE TE TSE");
				break;
			case 0x4B6:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER CHE WITH DESCENDER");
				break;
			case 0x4B7:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER CHE WITH DESCENDER");
				break;
			case 0x4B8:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER CHE WITH VERTICAL STROKE");
				break;
			case 0x4B9:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER CHE WITH VERTICAL STROKE");
				break;
			case 0x4BA:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SHHA");
				break;
			case 0x4BB:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SHHA");
				break;
			case 0x4BC:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ABKHASIAN CHE");
				break;
			case 0x4BD:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ABKHASIAN CHE");
				break;
			case 0x4BE:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ABKHASIAN CHE WITH DESCENDER");
				break;
			case 0x4BF:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ABKHASIAN CHE WITH DESCENDER");
				break;
			case 0x4C0:
				strcpy_s(buf, buf_size, "CYRILLIC LETTER PALOCHKA");
				break;
			case 0x4C1:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ZHE WITH BREVE");
				break;
			case 0x4C2:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ZHE WITH BREVE");
				break;
			case 0x4C3:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KA WITH HOOK");
				break;
			case 0x4C4:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KA WITH HOOK");
				break;
			case 0x4C5:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EL WITH TAIL");
				break;
			case 0x4C6:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EL WITH TAIL");
				break;
			case 0x4C7:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EN WITH HOOK");
				break;
			case 0x4C8:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EN WITH HOOK");
				break;
			case 0x4C9:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EN WITH TAIL");
				break;
			case 0x4CA:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EN WITH TAIL");
				break;
			case 0x4CB:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KHAKASSIAN CHE");
				break;
			case 0x4CC:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KHAKASSIAN CHE");
				break;
			case 0x4CD:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EM WITH TAIL");
				break;
			case 0x4CE:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EM WITH TAIL");
				break;
			case 0x4CF:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER PALOCHKA");
				break;
			case 0x4D0:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER A WITH BREVE");
				break;
			case 0x4D1:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER A WITH BREVE");
				break;
			case 0x4D2:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER A WITH DIAERESIS");
				break;
			case 0x4D3:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER A WITH DIAERESIS");
				break;
			case 0x4D4:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LIGATURE A IE");
				break;
			case 0x4D5:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LIGATURE A IE");
				break;
			case 0x4D6:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IE WITH BREVE");
				break;
			case 0x4D7:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IE WITH BREVE");
				break;
			case 0x4D8:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SCHWA");
				break;
			case 0x4D9:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SCHWA");
				break;
			case 0x4DA:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SCHWA WITH DIAERESIS");
				break;
			case 0x4DB:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SCHWA WITH DIAERESIS");
				break;
			case 0x4DC:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ZHE WITH DIAERESIS");
				break;
			case 0x4DD:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ZHE WITH DIAERESIS");
				break;
			case 0x4DE:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ZE WITH DIAERESIS");
				break;
			case 0x4DF:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ZE WITH DIAERESIS");
				break;
			case 0x4E0:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ABKHASIAN DZE");
				break;
			case 0x4E1:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ABKHASIAN DZE");
				break;
			case 0x4E2:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER I WITH MACRON");
				break;
			case 0x4E3:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER I WITH MACRON");
				break;
			case 0x4E4:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER I WITH DIAERESIS");
				break;
			case 0x4E5:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER I WITH DIAERESIS");
				break;
			case 0x4E6:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER O WITH DIAERESIS");
				break;
			case 0x4E7:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER O WITH DIAERESIS");
				break;
			case 0x4E8:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER BARRED O");
				break;
			case 0x4E9:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER BARRED O");
				break;
			case 0x4EA:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER BARRED O WITH DIAERESIS");
				break;
			case 0x4EB:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER BARRED O WITH DIAERESIS");
				break;
			case 0x4EC:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER E WITH DIAERESIS");
				break;
			case 0x4ED:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER E WITH DIAERESIS");
				break;
			case 0x4EE:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER U WITH MACRON");
				break;
			case 0x4EF:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER U WITH MACRON");
				break;
			case 0x4F0:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER U WITH DIAERESIS");
				break;
			case 0x4F1:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER U WITH DIAERESIS");
				break;
			case 0x4F2:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER U WITH DOUBLE ACUTE");
				break;
			case 0x4F3:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER U WITH DOUBLE ACUTE");
				break;
			case 0x4F4:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER CHE WITH DIAERESIS");
				break;
			case 0x4F5:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER CHE WITH DIAERESIS");
				break;
			case 0x4F6:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER GHE WITH DESCENDER");
				break;
			case 0x4F7:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER GHE WITH DESCENDER");
				break;
			case 0x4F8:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER YERU WITH DIAERESIS");
				break;
			case 0x4F9:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER YERU WITH DIAERESIS");
				break;
			case 0x4FA:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER GHE WITH STROKE AND HOOK");
				break;
			case 0x4FB:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER GHE WITH STROKE AND HOOK");
				break;
			case 0x4FC:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER HA WITH HOOK");
				break;
			case 0x4FD:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER HA WITH HOOK");
				break;
			case 0x4FE:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER HA WITH STROKE");
				break;
			case 0x4FF:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER HA WITH STROKE");
				break;
			case 0x500:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KOMI DE");
				break;
			case 0x501:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KOMI DE");
				break;
			case 0x502:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KOMI DJE");
				break;
			case 0x503:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KOMI DJE");
				break;
			case 0x504:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KOMI ZJE");
				break;
			case 0x505:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KOMI ZJE");
				break;
			case 0x506:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KOMI DZJE");
				break;
			case 0x507:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KOMI DZJE");
				break;
			case 0x508:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KOMI LJE");
				break;
			case 0x509:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KOMI LJE");
				break;
			case 0x50A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KOMI NJE");
				break;
			case 0x50B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KOMI NJE");
				break;
			case 0x50C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KOMI SJE");
				break;
			case 0x50D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KOMI SJE");
				break;
			case 0x50E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER KOMI TJE");
				break;
			case 0x50F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER KOMI TJE");
				break;
			case 0x510:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER REVERSED ZE");
				break;
			case 0x511:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER REVERSED ZE");
				break;
			case 0x512:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EL WITH HOOK");
				break;
			case 0x513:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EL WITH HOOK");
				break;
			case 0x514:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER LHA");
				break;
			case 0x515:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER LHA");
				break;
			case 0x516:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER RHA");
				break;
			case 0x517:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER RHA");
				break;
			case 0x518:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER YAE");
				break;
			case 0x519:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER YAE");
				break;
			case 0x51A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER QA");
				break;
			case 0x51B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER QA");
				break;
			case 0x51C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER WE");
				break;
			case 0x51D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER WE");
				break;
			case 0x51E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ALEUT KA");
				break;
			case 0x51F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ALEUT KA");
				break;
			case 0x520:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EL WITH MIDDLE HOOK");
				break;
			case 0x521:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EL WITH MIDDLE HOOK");
				break;
			case 0x522:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EN WITH MIDDLE HOOK");
				break;
			case 0x523:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EN WITH MIDDLE HOOK");
				break;
			case 0x524:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER PE WITH DESCENDER");
				break;
			case 0x525:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER PE WITH DESCENDER");
				break;
			case 0x526:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SHHA WITH DESCENDER");
				break;
			case 0x527:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SHHA WITH DESCENDER");
				break;
			case 0x528:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EN WITH LEFT HOOK");
				break;
			case 0x529:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EN WITH LEFT HOOK");
				break;
			case 0x52A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DZZHE");
				break;
			case 0x52B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DZZHE");
				break;
			case 0x52C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DCHE");
				break;
			case 0x52D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DCHE");
				break;
			case 0x52E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER EL WITH DESCENDER");
				break;
			case 0x52F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER EL WITH DESCENDER");
				break;
			case 0x531:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER AYB");
				break;
			case 0x532:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER BEN");
				break;
			case 0x533:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER GIM");
				break;
			case 0x534:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER DA");
				break;
			case 0x535:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER ECH");
				break;
			case 0x536:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER ZA");
				break;
			case 0x537:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER EH");
				break;
			case 0x538:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER ET");
				break;
			case 0x539:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER TO");
				break;
			case 0x53A:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER ZHE");
				break;
			case 0x53B:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER INI");
				break;
			case 0x53C:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER LIWN");
				break;
			case 0x53D:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER XEH");
				break;
			case 0x53E:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER CA");
				break;
			case 0x53F:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER KEN");
				break;
			case 0x540:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER HO");
				break;
			case 0x541:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER JA");
				break;
			case 0x542:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER GHAD");
				break;
			case 0x543:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER CHEH");
				break;
			case 0x544:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER MEN");
				break;
			case 0x545:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER YI");
				break;
			case 0x546:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER NOW");
				break;
			case 0x547:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER SHA");
				break;
			case 0x548:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER VO");
				break;
			case 0x549:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER CHA");
				break;
			case 0x54A:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER PEH");
				break;
			case 0x54B:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER JHEH");
				break;
			case 0x54C:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER RA");
				break;
			case 0x54D:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER SEH");
				break;
			case 0x54E:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER VEW");
				break;
			case 0x54F:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER TIWN");
				break;
			case 0x550:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER REH");
				break;
			case 0x551:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER CO");
				break;
			case 0x552:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER YIWN");
				break;
			case 0x553:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER PIWR");
				break;
			case 0x554:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER KEH");
				break;
			case 0x555:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER OH");
				break;
			case 0x556:
				strcpy_s(buf, buf_size, "ARMENIAN CAPITAL LETTER FEH");
				break;
			case 0x559:
				strcpy_s(buf, buf_size, "ARMENIAN MODIFIER LETTER LEFT HALF RING");
				break;
			case 0x55A:
				strcpy_s(buf, buf_size, "ARMENIAN APOSTROPHE");
				break;
			case 0x55B:
				strcpy_s(buf, buf_size, "ARMENIAN EMPHASIS MARK");
				break;
			case 0x55C:
				strcpy_s(buf, buf_size, "ARMENIAN EXCLAMATION MARK");
				break;
			case 0x55D:
				strcpy_s(buf, buf_size, "ARMENIAN COMMA");
				break;
			case 0x55E:
				strcpy_s(buf, buf_size, "ARMENIAN QUESTION MARK");
				break;
			case 0x55F:
				strcpy_s(buf, buf_size, "ARMENIAN ABBREVIATION MARK");
				break;
			case 0x560:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER TURNED AYB");
				break;
			case 0x561:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER AYB");
				break;
			case 0x562:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER BEN");
				break;
			case 0x563:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER GIM");
				break;
			case 0x564:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER DA");
				break;
			case 0x565:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER ECH");
				break;
			case 0x566:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER ZA");
				break;
			case 0x567:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER EH");
				break;
			case 0x568:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER ET");
				break;
			case 0x569:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER TO");
				break;
			case 0x56A:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER ZHE");
				break;
			case 0x56B:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER INI");
				break;
			case 0x56C:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER LIWN");
				break;
			case 0x56D:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER XEH");
				break;
			case 0x56E:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER CA");
				break;
			case 0x56F:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER KEN");
				break;
			case 0x570:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER HO");
				break;
			case 0x571:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER JA");
				break;
			case 0x572:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER GHAD");
				break;
			case 0x573:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER CHEH");
				break;
			case 0x574:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER MEN");
				break;
			case 0x575:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER YI");
				break;
			case 0x576:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER NOW");
				break;
			case 0x577:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER SHA");
				break;
			case 0x578:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER VO");
				break;
			case 0x579:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER CHA");
				break;
			case 0x57A:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER PEH");
				break;
			case 0x57B:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER JHEH");
				break;
			case 0x57C:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER RA");
				break;
			case 0x57D:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER SEH");
				break;
			case 0x57E:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER VEW");
				break;
			case 0x57F:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER TIWN");
				break;
			case 0x580:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER REH");
				break;
			case 0x581:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER CO");
				break;
			case 0x582:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER YIWN");
				break;
			case 0x583:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER PIWR");
				break;
			case 0x584:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER KEH");
				break;
			case 0x585:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER OH");
				break;
			case 0x586:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER FEH");
				break;
			case 0x587:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LIGATURE ECH YIWN");
				break;
			case 0x588:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LETTER YI WITH STROKE");
				break;
			case 0x589:
				strcpy_s(buf, buf_size, "ARMENIAN FULL STOP");
				break;
			case 0x58A:
				strcpy_s(buf, buf_size, "ARMENIAN HYPHEN");
				break;
			case 0x58D:
				strcpy_s(buf, buf_size, "RIGHT-FACING ARMENIAN ETERNITY SIGN");
				break;
			case 0x58E:
				strcpy_s(buf, buf_size, "LEFT-FACING ARMENIAN ETERNITY SIGN");
				break;
			case 0x58F:
				strcpy_s(buf, buf_size, "ARMENIAN DRAM SIGN");
				break;
			case 0x591:
				strcpy_s(buf, buf_size, "HEBREW ACCENT ETNAHTA");
				break;
			case 0x592:
				strcpy_s(buf, buf_size, "HEBREW ACCENT SEGOL");
				break;
			case 0x593:
				strcpy_s(buf, buf_size, "HEBREW ACCENT SHALSHELET");
				break;
			case 0x594:
				strcpy_s(buf, buf_size, "HEBREW ACCENT ZAQEF QATAN");
				break;
			case 0x595:
				strcpy_s(buf, buf_size, "HEBREW ACCENT ZAQEF GADOL");
				break;
			case 0x596:
				strcpy_s(buf, buf_size, "HEBREW ACCENT TIPEHA");
				break;
			case 0x597:
				strcpy_s(buf, buf_size, "HEBREW ACCENT REVIA");
				break;
			case 0x598:
				strcpy_s(buf, buf_size, "HEBREW ACCENT ZARQA");
				break;
			case 0x599:
				strcpy_s(buf, buf_size, "HEBREW ACCENT PASHTA");
				break;
			case 0x59A:
				strcpy_s(buf, buf_size, "HEBREW ACCENT YETIV");
				break;
			case 0x59B:
				strcpy_s(buf, buf_size, "HEBREW ACCENT TEVIR");
				break;
			case 0x59C:
				strcpy_s(buf, buf_size, "HEBREW ACCENT GERESH");
				break;
			case 0x59D:
				strcpy_s(buf, buf_size, "HEBREW ACCENT GERESH MUQDAM");
				break;
			case 0x59E:
				strcpy_s(buf, buf_size, "HEBREW ACCENT GERSHAYIM");
				break;
			case 0x59F:
				strcpy_s(buf, buf_size, "HEBREW ACCENT QARNEY PARA");
				break;
			case 0x5A0:
				strcpy_s(buf, buf_size, "HEBREW ACCENT TELISHA GEDOLA");
				break;
			case 0x5A1:
				strcpy_s(buf, buf_size, "HEBREW ACCENT PAZER");
				break;
			case 0x5A2:
				strcpy_s(buf, buf_size, "HEBREW ACCENT ATNAH HAFUKH");
				break;
			case 0x5A3:
				strcpy_s(buf, buf_size, "HEBREW ACCENT MUNAH");
				break;
			case 0x5A4:
				strcpy_s(buf, buf_size, "HEBREW ACCENT MAHAPAKH");
				break;
			case 0x5A5:
				strcpy_s(buf, buf_size, "HEBREW ACCENT MERKHA");
				break;
			case 0x5A6:
				strcpy_s(buf, buf_size, "HEBREW ACCENT MERKHA KEFULA");
				break;
			case 0x5A7:
				strcpy_s(buf, buf_size, "HEBREW ACCENT DARGA");
				break;
			case 0x5A8:
				strcpy_s(buf, buf_size, "HEBREW ACCENT QADMA");
				break;
			case 0x5A9:
				strcpy_s(buf, buf_size, "HEBREW ACCENT TELISHA QETANA");
				break;
			case 0x5AA:
				strcpy_s(buf, buf_size, "HEBREW ACCENT YERAH BEN YOMO");
				break;
			case 0x5AB:
				strcpy_s(buf, buf_size, "HEBREW ACCENT OLE");
				break;
			case 0x5AC:
				strcpy_s(buf, buf_size, "HEBREW ACCENT ILUY");
				break;
			case 0x5AD:
				strcpy_s(buf, buf_size, "HEBREW ACCENT DEHI");
				break;
			case 0x5AE:
				strcpy_s(buf, buf_size, "HEBREW ACCENT ZINOR");
				break;
			case 0x5AF:
				strcpy_s(buf, buf_size, "HEBREW MARK MASORA CIRCLE");
				break;
			case 0x5B0:
				strcpy_s(buf, buf_size, "HEBREW POINT SHEVA");
				break;
			case 0x5B1:
				strcpy_s(buf, buf_size, "HEBREW POINT HATAF SEGOL");
				break;
			case 0x5B2:
				strcpy_s(buf, buf_size, "HEBREW POINT HATAF PATAH");
				break;
			case 0x5B3:
				strcpy_s(buf, buf_size, "HEBREW POINT HATAF QAMATS");
				break;
			case 0x5B4:
				strcpy_s(buf, buf_size, "HEBREW POINT HIRIQ");
				break;
			case 0x5B5:
				strcpy_s(buf, buf_size, "HEBREW POINT TSERE");
				break;
			case 0x5B6:
				strcpy_s(buf, buf_size, "HEBREW POINT SEGOL");
				break;
			case 0x5B7:
				strcpy_s(buf, buf_size, "HEBREW POINT PATAH");
				break;
			case 0x5B8:
				strcpy_s(buf, buf_size, "HEBREW POINT QAMATS");
				break;
			case 0x5B9:
				strcpy_s(buf, buf_size, "HEBREW POINT HOLAM");
				break;
			case 0x5BA:
				strcpy_s(buf, buf_size, "HEBREW POINT HOLAM HASER FOR VAV");
				break;
			case 0x5BB:
				strcpy_s(buf, buf_size, "HEBREW POINT QUBUTS");
				break;
			case 0x5BC:
				strcpy_s(buf, buf_size, "HEBREW POINT DAGESH OR MAPIQ");
				break;
			case 0x5BD:
				strcpy_s(buf, buf_size, "HEBREW POINT METEG");
				break;
			case 0x5BE:
				strcpy_s(buf, buf_size, "HEBREW PUNCTUATION MAQAF");
				break;
			case 0x5BF:
				strcpy_s(buf, buf_size, "HEBREW POINT RAFE");
				break;
			case 0x5C0:
				strcpy_s(buf, buf_size, "HEBREW PUNCTUATION PASEQ");
				break;
			case 0x5C1:
				strcpy_s(buf, buf_size, "HEBREW POINT SHIN DOT");
				break;
			case 0x5C2:
				strcpy_s(buf, buf_size, "HEBREW POINT SIN DOT");
				break;
			case 0x5C3:
				strcpy_s(buf, buf_size, "HEBREW PUNCTUATION SOF PASUQ");
				break;
			case 0x5C4:
				strcpy_s(buf, buf_size, "HEBREW MARK UPPER DOT");
				break;
			case 0x5C5:
				strcpy_s(buf, buf_size, "HEBREW MARK LOWER DOT");
				break;
			case 0x5C6:
				strcpy_s(buf, buf_size, "HEBREW PUNCTUATION NUN HAFUKHA");
				break;
			case 0x5C7:
				strcpy_s(buf, buf_size, "HEBREW POINT QAMATS QATAN");
				break;
			case 0x5D0:
				strcpy_s(buf, buf_size, "HEBREW LETTER ALEF");
				break;
			case 0x5D1:
				strcpy_s(buf, buf_size, "HEBREW LETTER BET");
				break;
			case 0x5D2:
				strcpy_s(buf, buf_size, "HEBREW LETTER GIMEL");
				break;
			case 0x5D3:
				strcpy_s(buf, buf_size, "HEBREW LETTER DALET");
				break;
			case 0x5D4:
				strcpy_s(buf, buf_size, "HEBREW LETTER HE");
				break;
			case 0x5D5:
				strcpy_s(buf, buf_size, "HEBREW LETTER VAV");
				break;
			case 0x5D6:
				strcpy_s(buf, buf_size, "HEBREW LETTER ZAYIN");
				break;
			case 0x5D7:
				strcpy_s(buf, buf_size, "HEBREW LETTER HET");
				break;
			case 0x5D8:
				strcpy_s(buf, buf_size, "HEBREW LETTER TET");
				break;
			case 0x5D9:
				strcpy_s(buf, buf_size, "HEBREW LETTER YOD");
				break;
			case 0x5DA:
				strcpy_s(buf, buf_size, "HEBREW LETTER FINAL KAF");
				break;
			case 0x5DB:
				strcpy_s(buf, buf_size, "HEBREW LETTER KAF");
				break;
			case 0x5DC:
				strcpy_s(buf, buf_size, "HEBREW LETTER LAMED");
				break;
			case 0x5DD:
				strcpy_s(buf, buf_size, "HEBREW LETTER FINAL MEM");
				break;
			case 0x5DE:
				strcpy_s(buf, buf_size, "HEBREW LETTER MEM");
				break;
			case 0x5DF:
				strcpy_s(buf, buf_size, "HEBREW LETTER FINAL NUN");
				break;
			case 0x5E0:
				strcpy_s(buf, buf_size, "HEBREW LETTER NUN");
				break;
			case 0x5E1:
				strcpy_s(buf, buf_size, "HEBREW LETTER SAMEKH");
				break;
			case 0x5E2:
				strcpy_s(buf, buf_size, "HEBREW LETTER AYIN");
				break;
			case 0x5E3:
				strcpy_s(buf, buf_size, "HEBREW LETTER FINAL PE");
				break;
			case 0x5E4:
				strcpy_s(buf, buf_size, "HEBREW LETTER PE");
				break;
			case 0x5E5:
				strcpy_s(buf, buf_size, "HEBREW LETTER FINAL TSADI");
				break;
			case 0x5E6:
				strcpy_s(buf, buf_size, "HEBREW LETTER TSADI");
				break;
			case 0x5E7:
				strcpy_s(buf, buf_size, "HEBREW LETTER QOF");
				break;
			case 0x5E8:
				strcpy_s(buf, buf_size, "HEBREW LETTER RESH");
				break;
			case 0x5E9:
				strcpy_s(buf, buf_size, "HEBREW LETTER SHIN");
				break;
			case 0x5EA:
				strcpy_s(buf, buf_size, "HEBREW LETTER TAV");
				break;
			case 0x5EF:
				strcpy_s(buf, buf_size, "HEBREW YOD TRIANGLE");
				break;
			case 0x5F0:
				strcpy_s(buf, buf_size, "HEBREW LIGATURE YIDDISH DOUBLE VAV");
				break;
			case 0x5F1:
				strcpy_s(buf, buf_size, "HEBREW LIGATURE YIDDISH VAV YOD");
				break;
			case 0x5F2:
				strcpy_s(buf, buf_size, "HEBREW LIGATURE YIDDISH DOUBLE YOD");
				break;
			case 0x5F3:
				strcpy_s(buf, buf_size, "HEBREW PUNCTUATION GERESH");
				break;
			case 0x5F4:
				strcpy_s(buf, buf_size, "HEBREW PUNCTUATION GERSHAYIM");
				break;
			case 0x600:
				strcpy_s(buf, buf_size, "ARABIC NUMBER SIGN");
				break;
			case 0x601:
				strcpy_s(buf, buf_size, "ARABIC SIGN SANAH");
				break;
			case 0x602:
				strcpy_s(buf, buf_size, "ARABIC FOOTNOTE MARKER");
				break;
			case 0x603:
				strcpy_s(buf, buf_size, "ARABIC SIGN SAFHA");
				break;
			case 0x604:
				strcpy_s(buf, buf_size, "ARABIC SIGN SAMVAT");
				break;
			case 0x605:
				strcpy_s(buf, buf_size, "ARABIC NUMBER MARK ABOVE");
				break;
			case 0x606:
				strcpy_s(buf, buf_size, "ARABIC-INDIC CUBE ROOT");
				break;
			case 0x607:
				strcpy_s(buf, buf_size, "ARABIC-INDIC FOURTH ROOT");
				break;
			case 0x608:
				strcpy_s(buf, buf_size, "ARABIC RAY");
				break;
			case 0x609:
				strcpy_s(buf, buf_size, "ARABIC-INDIC PER MILLE SIGN");
				break;
			case 0x60A:
				strcpy_s(buf, buf_size, "ARABIC-INDIC PER TEN THOUSAND SIGN");
				break;
			case 0x60B:
				strcpy_s(buf, buf_size, "AFGHANI SIGN");
				break;
			case 0x60C:
				strcpy_s(buf, buf_size, "ARABIC COMMA");
				break;
			case 0x60D:
				strcpy_s(buf, buf_size, "ARABIC DATE SEPARATOR");
				break;
			case 0x60E:
				strcpy_s(buf, buf_size, "ARABIC POETIC VERSE SIGN");
				break;
			case 0x60F:
				strcpy_s(buf, buf_size, "ARABIC SIGN MISRA");
				break;
			case 0x610:
				strcpy_s(buf, buf_size, "ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM");
				break;
			case 0x611:
				strcpy_s(buf, buf_size, "ARABIC SIGN ALAYHE ASSALLAM");
				break;
			case 0x612:
				strcpy_s(buf, buf_size, "ARABIC SIGN RAHMATULLAH ALAYHE");
				break;
			case 0x613:
				strcpy_s(buf, buf_size, "ARABIC SIGN RADI ALLAHOU ANHU");
				break;
			case 0x614:
				strcpy_s(buf, buf_size, "ARABIC SIGN TAKHALLUS");
				break;
			case 0x615:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH TAH");
				break;
			case 0x616:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH");
				break;
			case 0x617:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH ZAIN");
				break;
			case 0x618:
				strcpy_s(buf, buf_size, "ARABIC SMALL FATHA");
				break;
			case 0x619:
				strcpy_s(buf, buf_size, "ARABIC SMALL DAMMA");
				break;
			case 0x61A:
				strcpy_s(buf, buf_size, "ARABIC SMALL KASRA");
				break;
			case 0x61B:
				strcpy_s(buf, buf_size, "ARABIC SEMICOLON");
				break;
			case 0x61C:
				strcpy_s(buf, buf_size, "ARABIC LETTER MARK");
				break;
			case 0x61E:
				strcpy_s(buf, buf_size, "ARABIC TRIPLE DOT PUNCTUATION MARK");
				break;
			case 0x61F:
				strcpy_s(buf, buf_size, "ARABIC QUESTION MARK");
				break;
			case 0x620:
				strcpy_s(buf, buf_size, "ARABIC LETTER KASHMIRI YEH");
				break;
			case 0x621:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAMZA");
				break;
			case 0x622:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH MADDA ABOVE");
				break;
			case 0x623:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH HAMZA ABOVE");
				break;
			case 0x624:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW WITH HAMZA ABOVE");
				break;
			case 0x625:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH HAMZA BELOW");
				break;
			case 0x626:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH HAMZA ABOVE");
				break;
			case 0x627:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF");
				break;
			case 0x628:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH");
				break;
			case 0x629:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH MARBUTA");
				break;
			case 0x62A:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH");
				break;
			case 0x62B:
				strcpy_s(buf, buf_size, "ARABIC LETTER THEH");
				break;
			case 0x62C:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEEM");
				break;
			case 0x62D:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH");
				break;
			case 0x62E:
				strcpy_s(buf, buf_size, "ARABIC LETTER KHAH");
				break;
			case 0x62F:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL");
				break;
			case 0x630:
				strcpy_s(buf, buf_size, "ARABIC LETTER THAL");
				break;
			case 0x631:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH");
				break;
			case 0x632:
				strcpy_s(buf, buf_size, "ARABIC LETTER ZAIN");
				break;
			case 0x633:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN");
				break;
			case 0x634:
				strcpy_s(buf, buf_size, "ARABIC LETTER SHEEN");
				break;
			case 0x635:
				strcpy_s(buf, buf_size, "ARABIC LETTER SAD");
				break;
			case 0x636:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAD");
				break;
			case 0x637:
				strcpy_s(buf, buf_size, "ARABIC LETTER TAH");
				break;
			case 0x638:
				strcpy_s(buf, buf_size, "ARABIC LETTER ZAH");
				break;
			case 0x639:
				strcpy_s(buf, buf_size, "ARABIC LETTER AIN");
				break;
			case 0x63A:
				strcpy_s(buf, buf_size, "ARABIC LETTER GHAIN");
				break;
			case 0x63B:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH WITH TWO DOTS ABOVE");
				break;
			case 0x63C:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH WITH THREE DOTS BELOW");
				break;
			case 0x63D:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH WITH INVERTED V");
				break;
			case 0x63E:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH WITH TWO DOTS ABOVE");
				break;
			case 0x63F:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH WITH THREE DOTS ABOVE");
				break;
			case 0x640:
				strcpy_s(buf, buf_size, "ARABIC TATWEEL");
				break;
			case 0x641:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH");
				break;
			case 0x642:
				strcpy_s(buf, buf_size, "ARABIC LETTER QAF");
				break;
			case 0x643:
				strcpy_s(buf, buf_size, "ARABIC LETTER KAF");
				break;
			case 0x644:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM");
				break;
			case 0x645:
				strcpy_s(buf, buf_size, "ARABIC LETTER MEEM");
				break;
			case 0x646:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON");
				break;
			case 0x647:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH");
				break;
			case 0x648:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW");
				break;
			case 0x649:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF MAKSURA");
				break;
			case 0x64A:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH");
				break;
			case 0x64B:
				strcpy_s(buf, buf_size, "ARABIC FATHATAN");
				break;
			case 0x64C:
				strcpy_s(buf, buf_size, "ARABIC DAMMATAN");
				break;
			case 0x64D:
				strcpy_s(buf, buf_size, "ARABIC KASRATAN");
				break;
			case 0x64E:
				strcpy_s(buf, buf_size, "ARABIC FATHA");
				break;
			case 0x64F:
				strcpy_s(buf, buf_size, "ARABIC DAMMA");
				break;
			case 0x650:
				strcpy_s(buf, buf_size, "ARABIC KASRA");
				break;
			case 0x651:
				strcpy_s(buf, buf_size, "ARABIC SHADDA");
				break;
			case 0x652:
				strcpy_s(buf, buf_size, "ARABIC SUKUN");
				break;
			case 0x653:
				strcpy_s(buf, buf_size, "ARABIC MADDAH ABOVE");
				break;
			case 0x654:
				strcpy_s(buf, buf_size, "ARABIC HAMZA ABOVE");
				break;
			case 0x655:
				strcpy_s(buf, buf_size, "ARABIC HAMZA BELOW");
				break;
			case 0x656:
				strcpy_s(buf, buf_size, "ARABIC SUBSCRIPT ALEF");
				break;
			case 0x657:
				strcpy_s(buf, buf_size, "ARABIC INVERTED DAMMA");
				break;
			case 0x658:
				strcpy_s(buf, buf_size, "ARABIC MARK NOON GHUNNA");
				break;
			case 0x659:
				strcpy_s(buf, buf_size, "ARABIC ZWARAKAY");
				break;
			case 0x65A:
				strcpy_s(buf, buf_size, "ARABIC VOWEL SIGN SMALL V ABOVE");
				break;
			case 0x65B:
				strcpy_s(buf, buf_size, "ARABIC VOWEL SIGN INVERTED SMALL V ABOVE");
				break;
			case 0x65C:
				strcpy_s(buf, buf_size, "ARABIC VOWEL SIGN DOT BELOW");
				break;
			case 0x65D:
				strcpy_s(buf, buf_size, "ARABIC REVERSED DAMMA");
				break;
			case 0x65E:
				strcpy_s(buf, buf_size, "ARABIC FATHA WITH TWO DOTS");
				break;
			case 0x65F:
				strcpy_s(buf, buf_size, "ARABIC WAVY HAMZA BELOW");
				break;
			case 0x660:
				strcpy_s(buf, buf_size, "ARABIC-INDIC DIGIT ZERO");
				break;
			case 0x661:
				strcpy_s(buf, buf_size, "ARABIC-INDIC DIGIT ONE");
				break;
			case 0x662:
				strcpy_s(buf, buf_size, "ARABIC-INDIC DIGIT TWO");
				break;
			case 0x663:
				strcpy_s(buf, buf_size, "ARABIC-INDIC DIGIT THREE");
				break;
			case 0x664:
				strcpy_s(buf, buf_size, "ARABIC-INDIC DIGIT FOUR");
				break;
			case 0x665:
				strcpy_s(buf, buf_size, "ARABIC-INDIC DIGIT FIVE");
				break;
			case 0x666:
				strcpy_s(buf, buf_size, "ARABIC-INDIC DIGIT SIX");
				break;
			case 0x667:
				strcpy_s(buf, buf_size, "ARABIC-INDIC DIGIT SEVEN");
				break;
			case 0x668:
				strcpy_s(buf, buf_size, "ARABIC-INDIC DIGIT EIGHT");
				break;
			case 0x669:
				strcpy_s(buf, buf_size, "ARABIC-INDIC DIGIT NINE");
				break;
			case 0x66A:
				strcpy_s(buf, buf_size, "ARABIC PERCENT SIGN");
				break;
			case 0x66B:
				strcpy_s(buf, buf_size, "ARABIC DECIMAL SEPARATOR");
				break;
			case 0x66C:
				strcpy_s(buf, buf_size, "ARABIC THOUSANDS SEPARATOR");
				break;
			case 0x66D:
				strcpy_s(buf, buf_size, "ARABIC FIVE POINTED STAR");
				break;
			case 0x66E:
				strcpy_s(buf, buf_size, "ARABIC LETTER DOTLESS BEH");
				break;
			case 0x66F:
				strcpy_s(buf, buf_size, "ARABIC LETTER DOTLESS QAF");
				break;
			case 0x670:
				strcpy_s(buf, buf_size, "ARABIC LETTER SUPERSCRIPT ALEF");
				break;
			case 0x671:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WASLA");
				break;
			case 0x672:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH WAVY HAMZA ABOVE");
				break;
			case 0x673:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH WAVY HAMZA BELOW");
				break;
			case 0x674:
				strcpy_s(buf, buf_size, "ARABIC LETTER HIGH HAMZA");
				break;
			case 0x675:
				strcpy_s(buf, buf_size, "ARABIC LETTER HIGH HAMZA ALEF");
				break;
			case 0x676:
				strcpy_s(buf, buf_size, "ARABIC LETTER HIGH HAMZA WAW");
				break;
			case 0x677:
				strcpy_s(buf, buf_size, "ARABIC LETTER U WITH HAMZA ABOVE");
				break;
			case 0x678:
				strcpy_s(buf, buf_size, "ARABIC LETTER HIGH HAMZA YEH");
				break;
			case 0x679:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEH");
				break;
			case 0x67A:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEHEH");
				break;
			case 0x67B:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEEH");
				break;
			case 0x67C:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH WITH RING");
				break;
			case 0x67D:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH WITH THREE DOTS ABOVE DOWNWARDS");
				break;
			case 0x67E:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEH");
				break;
			case 0x67F:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEHEH");
				break;
			case 0x680:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEHEH");
				break;
			case 0x681:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH WITH HAMZA ABOVE");
				break;
			case 0x682:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH WITH TWO DOTS VERTICAL ABOVE");
				break;
			case 0x683:
				strcpy_s(buf, buf_size, "ARABIC LETTER NYEH");
				break;
			case 0x684:
				strcpy_s(buf, buf_size, "ARABIC LETTER DYEH");
				break;
			case 0x685:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH WITH THREE DOTS ABOVE");
				break;
			case 0x686:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEH");
				break;
			case 0x687:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEHEH");
				break;
			case 0x688:
				strcpy_s(buf, buf_size, "ARABIC LETTER DDAL");
				break;
			case 0x689:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL WITH RING");
				break;
			case 0x68A:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL WITH DOT BELOW");
				break;
			case 0x68B:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL WITH DOT BELOW AND SMALL TAH");
				break;
			case 0x68C:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAHAL");
				break;
			case 0x68D:
				strcpy_s(buf, buf_size, "ARABIC LETTER DDAHAL");
				break;
			case 0x68E:
				strcpy_s(buf, buf_size, "ARABIC LETTER DUL");
				break;
			case 0x68F:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL WITH THREE DOTS ABOVE DOWNWARDS");
				break;
			case 0x690:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL WITH FOUR DOTS ABOVE");
				break;
			case 0x691:
				strcpy_s(buf, buf_size, "ARABIC LETTER RREH");
				break;
			case 0x692:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH SMALL V");
				break;
			case 0x693:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH RING");
				break;
			case 0x694:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH DOT BELOW");
				break;
			case 0x695:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH SMALL V BELOW");
				break;
			case 0x696:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH DOT BELOW AND DOT ABOVE");
				break;
			case 0x697:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH TWO DOTS ABOVE");
				break;
			case 0x698:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEH");
				break;
			case 0x699:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH FOUR DOTS ABOVE");
				break;
			case 0x69A:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN WITH DOT BELOW AND DOT ABOVE");
				break;
			case 0x69B:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN WITH THREE DOTS BELOW");
				break;
			case 0x69C:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN WITH THREE DOTS BELOW AND THREE DOTS ABOVE");
				break;
			case 0x69D:
				strcpy_s(buf, buf_size, "ARABIC LETTER SAD WITH TWO DOTS BELOW");
				break;
			case 0x69E:
				strcpy_s(buf, buf_size, "ARABIC LETTER SAD WITH THREE DOTS ABOVE");
				break;
			case 0x69F:
				strcpy_s(buf, buf_size, "ARABIC LETTER TAH WITH THREE DOTS ABOVE");
				break;
			case 0x6A0:
				strcpy_s(buf, buf_size, "ARABIC LETTER AIN WITH THREE DOTS ABOVE");
				break;
			case 0x6A1:
				strcpy_s(buf, buf_size, "ARABIC LETTER DOTLESS FEH");
				break;
			case 0x6A2:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH WITH DOT MOVED BELOW");
				break;
			case 0x6A3:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH WITH DOT BELOW");
				break;
			case 0x6A4:
				strcpy_s(buf, buf_size, "ARABIC LETTER VEH");
				break;
			case 0x6A5:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH WITH THREE DOTS BELOW");
				break;
			case 0x6A6:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEHEH");
				break;
			case 0x6A7:
				strcpy_s(buf, buf_size, "ARABIC LETTER QAF WITH DOT ABOVE");
				break;
			case 0x6A8:
				strcpy_s(buf, buf_size, "ARABIC LETTER QAF WITH THREE DOTS ABOVE");
				break;
			case 0x6A9:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH");
				break;
			case 0x6AA:
				strcpy_s(buf, buf_size, "ARABIC LETTER SWASH KAF");
				break;
			case 0x6AB:
				strcpy_s(buf, buf_size, "ARABIC LETTER KAF WITH RING");
				break;
			case 0x6AC:
				strcpy_s(buf, buf_size, "ARABIC LETTER KAF WITH DOT ABOVE");
				break;
			case 0x6AD:
				strcpy_s(buf, buf_size, "ARABIC LETTER NG");
				break;
			case 0x6AE:
				strcpy_s(buf, buf_size, "ARABIC LETTER KAF WITH THREE DOTS BELOW");
				break;
			case 0x6AF:
				strcpy_s(buf, buf_size, "ARABIC LETTER GAF");
				break;
			case 0x6B0:
				strcpy_s(buf, buf_size, "ARABIC LETTER GAF WITH RING");
				break;
			case 0x6B1:
				strcpy_s(buf, buf_size, "ARABIC LETTER NGOEH");
				break;
			case 0x6B2:
				strcpy_s(buf, buf_size, "ARABIC LETTER GAF WITH TWO DOTS BELOW");
				break;
			case 0x6B3:
				strcpy_s(buf, buf_size, "ARABIC LETTER GUEH");
				break;
			case 0x6B4:
				strcpy_s(buf, buf_size, "ARABIC LETTER GAF WITH THREE DOTS ABOVE");
				break;
			case 0x6B5:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM WITH SMALL V");
				break;
			case 0x6B6:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM WITH DOT ABOVE");
				break;
			case 0x6B7:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM WITH THREE DOTS ABOVE");
				break;
			case 0x6B8:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM WITH THREE DOTS BELOW");
				break;
			case 0x6B9:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON WITH DOT BELOW");
				break;
			case 0x6BA:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON GHUNNA");
				break;
			case 0x6BB:
				strcpy_s(buf, buf_size, "ARABIC LETTER RNOON");
				break;
			case 0x6BC:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON WITH RING");
				break;
			case 0x6BD:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON WITH THREE DOTS ABOVE");
				break;
			case 0x6BE:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH DOACHASHMEE");
				break;
			case 0x6BF:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEH WITH DOT ABOVE");
				break;
			case 0x6C0:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH WITH YEH ABOVE");
				break;
			case 0x6C1:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH GOAL");
				break;
			case 0x6C2:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH GOAL WITH HAMZA ABOVE");
				break;
			case 0x6C3:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH MARBUTA GOAL");
				break;
			case 0x6C4:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW WITH RING");
				break;
			case 0x6C5:
				strcpy_s(buf, buf_size, "ARABIC LETTER KIRGHIZ OE");
				break;
			case 0x6C6:
				strcpy_s(buf, buf_size, "ARABIC LETTER OE");
				break;
			case 0x6C7:
				strcpy_s(buf, buf_size, "ARABIC LETTER U");
				break;
			case 0x6C8:
				strcpy_s(buf, buf_size, "ARABIC LETTER YU");
				break;
			case 0x6C9:
				strcpy_s(buf, buf_size, "ARABIC LETTER KIRGHIZ YU");
				break;
			case 0x6CA:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW WITH TWO DOTS ABOVE");
				break;
			case 0x6CB:
				strcpy_s(buf, buf_size, "ARABIC LETTER VE");
				break;
			case 0x6CC:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH");
				break;
			case 0x6CD:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH TAIL");
				break;
			case 0x6CE:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH SMALL V");
				break;
			case 0x6CF:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW WITH DOT ABOVE");
				break;
			case 0x6D0:
				strcpy_s(buf, buf_size, "ARABIC LETTER E");
				break;
			case 0x6D1:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH THREE DOTS BELOW");
				break;
			case 0x6D2:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH BARREE");
				break;
			case 0x6D3:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH BARREE WITH HAMZA ABOVE");
				break;
			case 0x6D4:
				strcpy_s(buf, buf_size, "ARABIC FULL STOP");
				break;
			case 0x6D5:
				strcpy_s(buf, buf_size, "ARABIC LETTER AE");
				break;
			case 0x6D6:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA");
				break;
			case 0x6D7:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA");
				break;
			case 0x6D8:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH MEEM INITIAL FORM");
				break;
			case 0x6D9:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH LAM ALEF");
				break;
			case 0x6DA:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH JEEM");
				break;
			case 0x6DB:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH THREE DOTS");
				break;
			case 0x6DC:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH SEEN");
				break;
			case 0x6DD:
				strcpy_s(buf, buf_size, "ARABIC END OF AYAH");
				break;
			case 0x6DE:
				strcpy_s(buf, buf_size, "ARABIC START OF RUB EL HIZB");
				break;
			case 0x6DF:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH ROUNDED ZERO");
				break;
			case 0x6E0:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO");
				break;
			case 0x6E1:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH DOTLESS HEAD OF KHAH");
				break;
			case 0x6E2:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH MEEM ISOLATED FORM");
				break;
			case 0x6E3:
				strcpy_s(buf, buf_size, "ARABIC SMALL LOW SEEN");
				break;
			case 0x6E4:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH MADDA");
				break;
			case 0x6E5:
				strcpy_s(buf, buf_size, "ARABIC SMALL WAW");
				break;
			case 0x6E6:
				strcpy_s(buf, buf_size, "ARABIC SMALL YEH");
				break;
			case 0x6E7:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH YEH");
				break;
			case 0x6E8:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH NOON");
				break;
			case 0x6E9:
				strcpy_s(buf, buf_size, "ARABIC PLACE OF SAJDAH");
				break;
			case 0x6EA:
				strcpy_s(buf, buf_size, "ARABIC EMPTY CENTRE LOW STOP");
				break;
			case 0x6EB:
				strcpy_s(buf, buf_size, "ARABIC EMPTY CENTRE HIGH STOP");
				break;
			case 0x6EC:
				strcpy_s(buf, buf_size, "ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE");
				break;
			case 0x6ED:
				strcpy_s(buf, buf_size, "ARABIC SMALL LOW MEEM");
				break;
			case 0x6EE:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL WITH INVERTED V");
				break;
			case 0x6EF:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH INVERTED V");
				break;
			case 0x6F0:
				strcpy_s(buf, buf_size, "EXTENDED ARABIC-INDIC DIGIT ZERO");
				break;
			case 0x6F1:
				strcpy_s(buf, buf_size, "EXTENDED ARABIC-INDIC DIGIT ONE");
				break;
			case 0x6F2:
				strcpy_s(buf, buf_size, "EXTENDED ARABIC-INDIC DIGIT TWO");
				break;
			case 0x6F3:
				strcpy_s(buf, buf_size, "EXTENDED ARABIC-INDIC DIGIT THREE");
				break;
			case 0x6F4:
				strcpy_s(buf, buf_size, "EXTENDED ARABIC-INDIC DIGIT FOUR");
				break;
			case 0x6F5:
				strcpy_s(buf, buf_size, "EXTENDED ARABIC-INDIC DIGIT FIVE");
				break;
			case 0x6F6:
				strcpy_s(buf, buf_size, "EXTENDED ARABIC-INDIC DIGIT SIX");
				break;
			case 0x6F7:
				strcpy_s(buf, buf_size, "EXTENDED ARABIC-INDIC DIGIT SEVEN");
				break;
			case 0x6F8:
				strcpy_s(buf, buf_size, "EXTENDED ARABIC-INDIC DIGIT EIGHT");
				break;
			case 0x6F9:
				strcpy_s(buf, buf_size, "EXTENDED ARABIC-INDIC DIGIT NINE");
				break;
			case 0x6FA:
				strcpy_s(buf, buf_size, "ARABIC LETTER SHEEN WITH DOT BELOW");
				break;
			case 0x6FB:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAD WITH DOT BELOW");
				break;
			case 0x6FC:
				strcpy_s(buf, buf_size, "ARABIC LETTER GHAIN WITH DOT BELOW");
				break;
			case 0x6FD:
				strcpy_s(buf, buf_size, "ARABIC SIGN SINDHI AMPERSAND");
				break;
			case 0x6FE:
				strcpy_s(buf, buf_size, "ARABIC SIGN SINDHI POSTPOSITION MEN");
				break;
			case 0x6FF:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH WITH INVERTED V");
				break;
			case 0x700:
				strcpy_s(buf, buf_size, "SYRIAC END OF PARAGRAPH");
				break;
			case 0x701:
				strcpy_s(buf, buf_size, "SYRIAC SUPRALINEAR FULL STOP");
				break;
			case 0x702:
				strcpy_s(buf, buf_size, "SYRIAC SUBLINEAR FULL STOP");
				break;
			case 0x703:
				strcpy_s(buf, buf_size, "SYRIAC SUPRALINEAR COLON");
				break;
			case 0x704:
				strcpy_s(buf, buf_size, "SYRIAC SUBLINEAR COLON");
				break;
			case 0x705:
				strcpy_s(buf, buf_size, "SYRIAC HORIZONTAL COLON");
				break;
			case 0x706:
				strcpy_s(buf, buf_size, "SYRIAC COLON SKEWED LEFT");
				break;
			case 0x707:
				strcpy_s(buf, buf_size, "SYRIAC COLON SKEWED RIGHT");
				break;
			case 0x708:
				strcpy_s(buf, buf_size, "SYRIAC SUPRALINEAR COLON SKEWED LEFT");
				break;
			case 0x709:
				strcpy_s(buf, buf_size, "SYRIAC SUBLINEAR COLON SKEWED RIGHT");
				break;
			case 0x70A:
				strcpy_s(buf, buf_size, "SYRIAC CONTRACTION");
				break;
			case 0x70B:
				strcpy_s(buf, buf_size, "SYRIAC HARKLEAN OBELUS");
				break;
			case 0x70C:
				strcpy_s(buf, buf_size, "SYRIAC HARKLEAN METOBELUS");
				break;
			case 0x70D:
				strcpy_s(buf, buf_size, "SYRIAC HARKLEAN ASTERISCUS");
				break;
			case 0x70F:
				strcpy_s(buf, buf_size, "SYRIAC ABBREVIATION MARK");
				break;
			case 0x710:
				strcpy_s(buf, buf_size, "SYRIAC LETTER ALAPH");
				break;
			case 0x711:
				strcpy_s(buf, buf_size, "SYRIAC LETTER SUPERSCRIPT ALAPH");
				break;
			case 0x712:
				strcpy_s(buf, buf_size, "SYRIAC LETTER BETH");
				break;
			case 0x713:
				strcpy_s(buf, buf_size, "SYRIAC LETTER GAMAL");
				break;
			case 0x714:
				strcpy_s(buf, buf_size, "SYRIAC LETTER GAMAL GARSHUNI");
				break;
			case 0x715:
				strcpy_s(buf, buf_size, "SYRIAC LETTER DALATH");
				break;
			case 0x716:
				strcpy_s(buf, buf_size, "SYRIAC LETTER DOTLESS DALATH RISH");
				break;
			case 0x717:
				strcpy_s(buf, buf_size, "SYRIAC LETTER HE");
				break;
			case 0x718:
				strcpy_s(buf, buf_size, "SYRIAC LETTER WAW");
				break;
			case 0x719:
				strcpy_s(buf, buf_size, "SYRIAC LETTER ZAIN");
				break;
			case 0x71A:
				strcpy_s(buf, buf_size, "SYRIAC LETTER HETH");
				break;
			case 0x71B:
				strcpy_s(buf, buf_size, "SYRIAC LETTER TETH");
				break;
			case 0x71C:
				strcpy_s(buf, buf_size, "SYRIAC LETTER TETH GARSHUNI");
				break;
			case 0x71D:
				strcpy_s(buf, buf_size, "SYRIAC LETTER YUDH");
				break;
			case 0x71E:
				strcpy_s(buf, buf_size, "SYRIAC LETTER YUDH HE");
				break;
			case 0x71F:
				strcpy_s(buf, buf_size, "SYRIAC LETTER KAPH");
				break;
			case 0x720:
				strcpy_s(buf, buf_size, "SYRIAC LETTER LAMADH");
				break;
			case 0x721:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MIM");
				break;
			case 0x722:
				strcpy_s(buf, buf_size, "SYRIAC LETTER NUN");
				break;
			case 0x723:
				strcpy_s(buf, buf_size, "SYRIAC LETTER SEMKATH");
				break;
			case 0x724:
				strcpy_s(buf, buf_size, "SYRIAC LETTER FINAL SEMKATH");
				break;
			case 0x725:
				strcpy_s(buf, buf_size, "SYRIAC LETTER E");
				break;
			case 0x726:
				strcpy_s(buf, buf_size, "SYRIAC LETTER PE");
				break;
			case 0x727:
				strcpy_s(buf, buf_size, "SYRIAC LETTER REVERSED PE");
				break;
			case 0x728:
				strcpy_s(buf, buf_size, "SYRIAC LETTER SADHE");
				break;
			case 0x729:
				strcpy_s(buf, buf_size, "SYRIAC LETTER QAPH");
				break;
			case 0x72A:
				strcpy_s(buf, buf_size, "SYRIAC LETTER RISH");
				break;
			case 0x72B:
				strcpy_s(buf, buf_size, "SYRIAC LETTER SHIN");
				break;
			case 0x72C:
				strcpy_s(buf, buf_size, "SYRIAC LETTER TAW");
				break;
			case 0x72D:
				strcpy_s(buf, buf_size, "SYRIAC LETTER PERSIAN BHETH");
				break;
			case 0x72E:
				strcpy_s(buf, buf_size, "SYRIAC LETTER PERSIAN GHAMAL");
				break;
			case 0x72F:
				strcpy_s(buf, buf_size, "SYRIAC LETTER PERSIAN DHALATH");
				break;
			case 0x730:
				strcpy_s(buf, buf_size, "SYRIAC PTHAHA ABOVE");
				break;
			case 0x731:
				strcpy_s(buf, buf_size, "SYRIAC PTHAHA BELOW");
				break;
			case 0x732:
				strcpy_s(buf, buf_size, "SYRIAC PTHAHA DOTTED");
				break;
			case 0x733:
				strcpy_s(buf, buf_size, "SYRIAC ZQAPHA ABOVE");
				break;
			case 0x734:
				strcpy_s(buf, buf_size, "SYRIAC ZQAPHA BELOW");
				break;
			case 0x735:
				strcpy_s(buf, buf_size, "SYRIAC ZQAPHA DOTTED");
				break;
			case 0x736:
				strcpy_s(buf, buf_size, "SYRIAC RBASA ABOVE");
				break;
			case 0x737:
				strcpy_s(buf, buf_size, "SYRIAC RBASA BELOW");
				break;
			case 0x738:
				strcpy_s(buf, buf_size, "SYRIAC DOTTED ZLAMA HORIZONTAL");
				break;
			case 0x739:
				strcpy_s(buf, buf_size, "SYRIAC DOTTED ZLAMA ANGULAR");
				break;
			case 0x73A:
				strcpy_s(buf, buf_size, "SYRIAC HBASA ABOVE");
				break;
			case 0x73B:
				strcpy_s(buf, buf_size, "SYRIAC HBASA BELOW");
				break;
			case 0x73C:
				strcpy_s(buf, buf_size, "SYRIAC HBASA-ESASA DOTTED");
				break;
			case 0x73D:
				strcpy_s(buf, buf_size, "SYRIAC ESASA ABOVE");
				break;
			case 0x73E:
				strcpy_s(buf, buf_size, "SYRIAC ESASA BELOW");
				break;
			case 0x73F:
				strcpy_s(buf, buf_size, "SYRIAC RWAHA");
				break;
			case 0x740:
				strcpy_s(buf, buf_size, "SYRIAC FEMININE DOT");
				break;
			case 0x741:
				strcpy_s(buf, buf_size, "SYRIAC QUSHSHAYA");
				break;
			case 0x742:
				strcpy_s(buf, buf_size, "SYRIAC RUKKAKHA");
				break;
			case 0x743:
				strcpy_s(buf, buf_size, "SYRIAC TWO VERTICAL DOTS ABOVE");
				break;
			case 0x744:
				strcpy_s(buf, buf_size, "SYRIAC TWO VERTICAL DOTS BELOW");
				break;
			case 0x745:
				strcpy_s(buf, buf_size, "SYRIAC THREE DOTS ABOVE");
				break;
			case 0x746:
				strcpy_s(buf, buf_size, "SYRIAC THREE DOTS BELOW");
				break;
			case 0x747:
				strcpy_s(buf, buf_size, "SYRIAC OBLIQUE LINE ABOVE");
				break;
			case 0x748:
				strcpy_s(buf, buf_size, "SYRIAC OBLIQUE LINE BELOW");
				break;
			case 0x749:
				strcpy_s(buf, buf_size, "SYRIAC MUSIC");
				break;
			case 0x74A:
				strcpy_s(buf, buf_size, "SYRIAC BARREKH");
				break;
			case 0x74D:
				strcpy_s(buf, buf_size, "SYRIAC LETTER SOGDIAN ZHAIN");
				break;
			case 0x74E:
				strcpy_s(buf, buf_size, "SYRIAC LETTER SOGDIAN KHAPH");
				break;
			case 0x74F:
				strcpy_s(buf, buf_size, "SYRIAC LETTER SOGDIAN FE");
				break;
			case 0x750:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH WITH THREE DOTS HORIZONTALLY BELOW");
				break;
			case 0x751:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH WITH DOT BELOW AND THREE DOTS ABOVE");
				break;
			case 0x752:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW");
				break;
			case 0x753:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH WITH THREE DOTS POINTING UPWARDS BELOW AND TWO DOTS ABOVE");
				break;
			case 0x754:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH WITH TWO DOTS BELOW AND DOT ABOVE");
				break;
			case 0x755:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH WITH INVERTED SMALL V BELOW");
				break;
			case 0x756:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH WITH SMALL V");
				break;
			case 0x757:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH WITH TWO DOTS ABOVE");
				break;
			case 0x758:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH WITH THREE DOTS POINTING UPWARDS BELOW");
				break;
			case 0x759:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL WITH TWO DOTS VERTICALLY BELOW AND SMALL TAH");
				break;
			case 0x75A:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL WITH INVERTED SMALL V BELOW");
				break;
			case 0x75B:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH STROKE");
				break;
			case 0x75C:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN WITH FOUR DOTS ABOVE");
				break;
			case 0x75D:
				strcpy_s(buf, buf_size, "ARABIC LETTER AIN WITH TWO DOTS ABOVE");
				break;
			case 0x75E:
				strcpy_s(buf, buf_size, "ARABIC LETTER AIN WITH THREE DOTS POINTING DOWNWARDS ABOVE");
				break;
			case 0x75F:
				strcpy_s(buf, buf_size, "ARABIC LETTER AIN WITH TWO DOTS VERTICALLY ABOVE");
				break;
			case 0x760:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH WITH TWO DOTS BELOW");
				break;
			case 0x761:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH WITH THREE DOTS POINTING UPWARDS BELOW");
				break;
			case 0x762:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH WITH DOT ABOVE");
				break;
			case 0x763:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH WITH THREE DOTS ABOVE");
				break;
			case 0x764:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH WITH THREE DOTS POINTING UPWARDS BELOW");
				break;
			case 0x765:
				strcpy_s(buf, buf_size, "ARABIC LETTER MEEM WITH DOT ABOVE");
				break;
			case 0x766:
				strcpy_s(buf, buf_size, "ARABIC LETTER MEEM WITH DOT BELOW");
				break;
			case 0x767:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON WITH TWO DOTS BELOW");
				break;
			case 0x768:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON WITH SMALL TAH");
				break;
			case 0x769:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON WITH SMALL V");
				break;
			case 0x76A:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM WITH BAR");
				break;
			case 0x76B:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH TWO DOTS VERTICALLY ABOVE");
				break;
			case 0x76C:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH HAMZA ABOVE");
				break;
			case 0x76D:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE");
				break;
			case 0x76E:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH BELOW");
				break;
			case 0x76F:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH AND TWO DOTS");
				break;
			case 0x770:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS");
				break;
			case 0x771:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH SMALL ARABIC LETTER TAH AND TWO DOTS");
				break;
			case 0x772:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH WITH SMALL ARABIC LETTER TAH ABOVE");
				break;
			case 0x773:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE");
				break;
			case 0x774:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE");
				break;
			case 0x775:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE");
				break;
			case 0x776:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE");
				break;
			case 0x777:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW");
				break;
			case 0x778:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE");
				break;
			case 0x779:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE");
				break;
			case 0x77A:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT TWO ABOVE");
				break;
			case 0x77B:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH BARREE WITH EXTENDED ARABIC-INDIC DIGIT THREE ABOVE");
				break;
			case 0x77C:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH WITH EXTENDED ARABIC-INDIC DIGIT FOUR BELOW");
				break;
			case 0x77D:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE");
				break;
			case 0x77E:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN WITH INVERTED V");
				break;
			case 0x77F:
				strcpy_s(buf, buf_size, "ARABIC LETTER KAF WITH TWO DOTS ABOVE");
				break;
			case 0x780:
				strcpy_s(buf, buf_size, "THAANA LETTER HAA");
				break;
			case 0x781:
				strcpy_s(buf, buf_size, "THAANA LETTER SHAVIYANI");
				break;
			case 0x782:
				strcpy_s(buf, buf_size, "THAANA LETTER NOONU");
				break;
			case 0x783:
				strcpy_s(buf, buf_size, "THAANA LETTER RAA");
				break;
			case 0x784:
				strcpy_s(buf, buf_size, "THAANA LETTER BAA");
				break;
			case 0x785:
				strcpy_s(buf, buf_size, "THAANA LETTER LHAVIYANI");
				break;
			case 0x786:
				strcpy_s(buf, buf_size, "THAANA LETTER KAAFU");
				break;
			case 0x787:
				strcpy_s(buf, buf_size, "THAANA LETTER ALIFU");
				break;
			case 0x788:
				strcpy_s(buf, buf_size, "THAANA LETTER VAAVU");
				break;
			case 0x789:
				strcpy_s(buf, buf_size, "THAANA LETTER MEEMU");
				break;
			case 0x78A:
				strcpy_s(buf, buf_size, "THAANA LETTER FAAFU");
				break;
			case 0x78B:
				strcpy_s(buf, buf_size, "THAANA LETTER DHAALU");
				break;
			case 0x78C:
				strcpy_s(buf, buf_size, "THAANA LETTER THAA");
				break;
			case 0x78D:
				strcpy_s(buf, buf_size, "THAANA LETTER LAAMU");
				break;
			case 0x78E:
				strcpy_s(buf, buf_size, "THAANA LETTER GAAFU");
				break;
			case 0x78F:
				strcpy_s(buf, buf_size, "THAANA LETTER GNAVIYANI");
				break;
			case 0x790:
				strcpy_s(buf, buf_size, "THAANA LETTER SEENU");
				break;
			case 0x791:
				strcpy_s(buf, buf_size, "THAANA LETTER DAVIYANI");
				break;
			case 0x792:
				strcpy_s(buf, buf_size, "THAANA LETTER ZAVIYANI");
				break;
			case 0x793:
				strcpy_s(buf, buf_size, "THAANA LETTER TAVIYANI");
				break;
			case 0x794:
				strcpy_s(buf, buf_size, "THAANA LETTER YAA");
				break;
			case 0x795:
				strcpy_s(buf, buf_size, "THAANA LETTER PAVIYANI");
				break;
			case 0x796:
				strcpy_s(buf, buf_size, "THAANA LETTER JAVIYANI");
				break;
			case 0x797:
				strcpy_s(buf, buf_size, "THAANA LETTER CHAVIYANI");
				break;
			case 0x798:
				strcpy_s(buf, buf_size, "THAANA LETTER TTAA");
				break;
			case 0x799:
				strcpy_s(buf, buf_size, "THAANA LETTER HHAA");
				break;
			case 0x79A:
				strcpy_s(buf, buf_size, "THAANA LETTER KHAA");
				break;
			case 0x79B:
				strcpy_s(buf, buf_size, "THAANA LETTER THAALU");
				break;
			case 0x79C:
				strcpy_s(buf, buf_size, "THAANA LETTER ZAA");
				break;
			case 0x79D:
				strcpy_s(buf, buf_size, "THAANA LETTER SHEENU");
				break;
			case 0x79E:
				strcpy_s(buf, buf_size, "THAANA LETTER SAADHU");
				break;
			case 0x79F:
				strcpy_s(buf, buf_size, "THAANA LETTER DAADHU");
				break;
			case 0x7A0:
				strcpy_s(buf, buf_size, "THAANA LETTER TO");
				break;
			case 0x7A1:
				strcpy_s(buf, buf_size, "THAANA LETTER ZO");
				break;
			case 0x7A2:
				strcpy_s(buf, buf_size, "THAANA LETTER AINU");
				break;
			case 0x7A3:
				strcpy_s(buf, buf_size, "THAANA LETTER GHAINU");
				break;
			case 0x7A4:
				strcpy_s(buf, buf_size, "THAANA LETTER QAAFU");
				break;
			case 0x7A5:
				strcpy_s(buf, buf_size, "THAANA LETTER WAAVU");
				break;
			case 0x7A6:
				strcpy_s(buf, buf_size, "THAANA ABAFILI");
				break;
			case 0x7A7:
				strcpy_s(buf, buf_size, "THAANA AABAAFILI");
				break;
			case 0x7A8:
				strcpy_s(buf, buf_size, "THAANA IBIFILI");
				break;
			case 0x7A9:
				strcpy_s(buf, buf_size, "THAANA EEBEEFILI");
				break;
			case 0x7AA:
				strcpy_s(buf, buf_size, "THAANA UBUFILI");
				break;
			case 0x7AB:
				strcpy_s(buf, buf_size, "THAANA OOBOOFILI");
				break;
			case 0x7AC:
				strcpy_s(buf, buf_size, "THAANA EBEFILI");
				break;
			case 0x7AD:
				strcpy_s(buf, buf_size, "THAANA EYBEYFILI");
				break;
			case 0x7AE:
				strcpy_s(buf, buf_size, "THAANA OBOFILI");
				break;
			case 0x7AF:
				strcpy_s(buf, buf_size, "THAANA OABOAFILI");
				break;
			case 0x7B0:
				strcpy_s(buf, buf_size, "THAANA SUKUN");
				break;
			case 0x7B1:
				strcpy_s(buf, buf_size, "THAANA LETTER NAA");
				break;
			case 0x7C0:
				strcpy_s(buf, buf_size, "NKO DIGIT ZERO");
				break;
			case 0x7C1:
				strcpy_s(buf, buf_size, "NKO DIGIT ONE");
				break;
			case 0x7C2:
				strcpy_s(buf, buf_size, "NKO DIGIT TWO");
				break;
			case 0x7C3:
				strcpy_s(buf, buf_size, "NKO DIGIT THREE");
				break;
			case 0x7C4:
				strcpy_s(buf, buf_size, "NKO DIGIT FOUR");
				break;
			case 0x7C5:
				strcpy_s(buf, buf_size, "NKO DIGIT FIVE");
				break;
			case 0x7C6:
				strcpy_s(buf, buf_size, "NKO DIGIT SIX");
				break;
			case 0x7C7:
				strcpy_s(buf, buf_size, "NKO DIGIT SEVEN");
				break;
			case 0x7C8:
				strcpy_s(buf, buf_size, "NKO DIGIT EIGHT");
				break;
			case 0x7C9:
				strcpy_s(buf, buf_size, "NKO DIGIT NINE");
				break;
			case 0x7CA:
				strcpy_s(buf, buf_size, "NKO LETTER A");
				break;
			case 0x7CB:
				strcpy_s(buf, buf_size, "NKO LETTER EE");
				break;
			case 0x7CC:
				strcpy_s(buf, buf_size, "NKO LETTER I");
				break;
			case 0x7CD:
				strcpy_s(buf, buf_size, "NKO LETTER E");
				break;
			case 0x7CE:
				strcpy_s(buf, buf_size, "NKO LETTER U");
				break;
			case 0x7CF:
				strcpy_s(buf, buf_size, "NKO LETTER OO");
				break;
			case 0x7D0:
				strcpy_s(buf, buf_size, "NKO LETTER O");
				break;
			case 0x7D1:
				strcpy_s(buf, buf_size, "NKO LETTER DAGBASINNA");
				break;
			case 0x7D2:
				strcpy_s(buf, buf_size, "NKO LETTER N");
				break;
			case 0x7D3:
				strcpy_s(buf, buf_size, "NKO LETTER BA");
				break;
			case 0x7D4:
				strcpy_s(buf, buf_size, "NKO LETTER PA");
				break;
			case 0x7D5:
				strcpy_s(buf, buf_size, "NKO LETTER TA");
				break;
			case 0x7D6:
				strcpy_s(buf, buf_size, "NKO LETTER JA");
				break;
			case 0x7D7:
				strcpy_s(buf, buf_size, "NKO LETTER CHA");
				break;
			case 0x7D8:
				strcpy_s(buf, buf_size, "NKO LETTER DA");
				break;
			case 0x7D9:
				strcpy_s(buf, buf_size, "NKO LETTER RA");
				break;
			case 0x7DA:
				strcpy_s(buf, buf_size, "NKO LETTER RRA");
				break;
			case 0x7DB:
				strcpy_s(buf, buf_size, "NKO LETTER SA");
				break;
			case 0x7DC:
				strcpy_s(buf, buf_size, "NKO LETTER GBA");
				break;
			case 0x7DD:
				strcpy_s(buf, buf_size, "NKO LETTER FA");
				break;
			case 0x7DE:
				strcpy_s(buf, buf_size, "NKO LETTER KA");
				break;
			case 0x7DF:
				strcpy_s(buf, buf_size, "NKO LETTER LA");
				break;
			case 0x7E0:
				strcpy_s(buf, buf_size, "NKO LETTER NA WOLOSO");
				break;
			case 0x7E1:
				strcpy_s(buf, buf_size, "NKO LETTER MA");
				break;
			case 0x7E2:
				strcpy_s(buf, buf_size, "NKO LETTER NYA");
				break;
			case 0x7E3:
				strcpy_s(buf, buf_size, "NKO LETTER NA");
				break;
			case 0x7E4:
				strcpy_s(buf, buf_size, "NKO LETTER HA");
				break;
			case 0x7E5:
				strcpy_s(buf, buf_size, "NKO LETTER WA");
				break;
			case 0x7E6:
				strcpy_s(buf, buf_size, "NKO LETTER YA");
				break;
			case 0x7E7:
				strcpy_s(buf, buf_size, "NKO LETTER NYA WOLOSO");
				break;
			case 0x7E8:
				strcpy_s(buf, buf_size, "NKO LETTER JONA JA");
				break;
			case 0x7E9:
				strcpy_s(buf, buf_size, "NKO LETTER JONA CHA");
				break;
			case 0x7EA:
				strcpy_s(buf, buf_size, "NKO LETTER JONA RA");
				break;
			case 0x7EB:
				strcpy_s(buf, buf_size, "NKO COMBINING SHORT HIGH TONE");
				break;
			case 0x7EC:
				strcpy_s(buf, buf_size, "NKO COMBINING SHORT LOW TONE");
				break;
			case 0x7ED:
				strcpy_s(buf, buf_size, "NKO COMBINING SHORT RISING TONE");
				break;
			case 0x7EE:
				strcpy_s(buf, buf_size, "NKO COMBINING LONG DESCENDING TONE");
				break;
			case 0x7EF:
				strcpy_s(buf, buf_size, "NKO COMBINING LONG HIGH TONE");
				break;
			case 0x7F0:
				strcpy_s(buf, buf_size, "NKO COMBINING LONG LOW TONE");
				break;
			case 0x7F1:
				strcpy_s(buf, buf_size, "NKO COMBINING LONG RISING TONE");
				break;
			case 0x7F2:
				strcpy_s(buf, buf_size, "NKO COMBINING NASALIZATION MARK");
				break;
			case 0x7F3:
				strcpy_s(buf, buf_size, "NKO COMBINING DOUBLE DOT ABOVE");
				break;
			case 0x7F4:
				strcpy_s(buf, buf_size, "NKO HIGH TONE APOSTROPHE");
				break;
			case 0x7F5:
				strcpy_s(buf, buf_size, "NKO LOW TONE APOSTROPHE");
				break;
			case 0x7F6:
				strcpy_s(buf, buf_size, "NKO SYMBOL OO DENNEN");
				break;
			case 0x7F7:
				strcpy_s(buf, buf_size, "NKO SYMBOL GBAKURUNEN");
				break;
			case 0x7F8:
				strcpy_s(buf, buf_size, "NKO COMMA");
				break;
			case 0x7F9:
				strcpy_s(buf, buf_size, "NKO EXCLAMATION MARK");
				break;
			case 0x7FA:
				strcpy_s(buf, buf_size, "NKO LAJANYALAN");
				break;
			case 0x7FD:
				strcpy_s(buf, buf_size, "NKO DANTAYALAN");
				break;
			case 0x7FE:
				strcpy_s(buf, buf_size, "NKO DOROME SIGN");
				break;
			case 0x7FF:
				strcpy_s(buf, buf_size, "NKO TAMAN SIGN");
				break;
			case 0x800:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER ALAF");
				break;
			case 0x801:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER BIT");
				break;
			case 0x802:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER GAMAN");
				break;
			case 0x803:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER DALAT");
				break;
			case 0x804:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER IY");
				break;
			case 0x805:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER BAA");
				break;
			case 0x806:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER ZEN");
				break;
			case 0x807:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER IT");
				break;
			case 0x808:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER TIT");
				break;
			case 0x809:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER YUT");
				break;
			case 0x80A:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER KAAF");
				break;
			case 0x80B:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER LABAT");
				break;
			case 0x80C:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER MIM");
				break;
			case 0x80D:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER NUN");
				break;
			case 0x80E:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER SINGAAT");
				break;
			case 0x80F:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER IN");
				break;
			case 0x810:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER FI");
				break;
			case 0x811:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER TSAADIY");
				break;
			case 0x812:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER QUF");
				break;
			case 0x813:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER RISH");
				break;
			case 0x814:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER SHAN");
				break;
			case 0x815:
				strcpy_s(buf, buf_size, "SAMARITAN LETTER TAAF");
				break;
			case 0x816:
				strcpy_s(buf, buf_size, "SAMARITAN MARK IN");
				break;
			case 0x817:
				strcpy_s(buf, buf_size, "SAMARITAN MARK IN-ALAF");
				break;
			case 0x818:
				strcpy_s(buf, buf_size, "SAMARITAN MARK OCCLUSION");
				break;
			case 0x819:
				strcpy_s(buf, buf_size, "SAMARITAN MARK DAGESH");
				break;
			case 0x81A:
				strcpy_s(buf, buf_size, "SAMARITAN MODIFIER LETTER EPENTHETIC YUT");
				break;
			case 0x81B:
				strcpy_s(buf, buf_size, "SAMARITAN MARK EPENTHETIC YUT");
				break;
			case 0x81C:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN LONG E");
				break;
			case 0x81D:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN E");
				break;
			case 0x81E:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN OVERLONG AA");
				break;
			case 0x81F:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN LONG AA");
				break;
			case 0x820:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN AA");
				break;
			case 0x821:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN OVERLONG A");
				break;
			case 0x822:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN LONG A");
				break;
			case 0x823:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN A");
				break;
			case 0x824:
				strcpy_s(buf, buf_size, "SAMARITAN MODIFIER LETTER SHORT A");
				break;
			case 0x825:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN SHORT A");
				break;
			case 0x826:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN LONG U");
				break;
			case 0x827:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN U");
				break;
			case 0x828:
				strcpy_s(buf, buf_size, "SAMARITAN MODIFIER LETTER I");
				break;
			case 0x829:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN LONG I");
				break;
			case 0x82A:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN I");
				break;
			case 0x82B:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN O");
				break;
			case 0x82C:
				strcpy_s(buf, buf_size, "SAMARITAN VOWEL SIGN SUKUN");
				break;
			case 0x82D:
				strcpy_s(buf, buf_size, "SAMARITAN MARK NEQUDAA");
				break;
			case 0x830:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION NEQUDAA");
				break;
			case 0x831:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION AFSAAQ");
				break;
			case 0x832:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION ANGED");
				break;
			case 0x833:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION BAU");
				break;
			case 0x834:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION ATMAAU");
				break;
			case 0x835:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION SHIYYAALAA");
				break;
			case 0x836:
				strcpy_s(buf, buf_size, "SAMARITAN ABBREVIATION MARK");
				break;
			case 0x837:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION MELODIC QITSA");
				break;
			case 0x838:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION ZIQAA");
				break;
			case 0x839:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION QITSA");
				break;
			case 0x83A:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION ZAEF");
				break;
			case 0x83B:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION TURU");
				break;
			case 0x83C:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION ARKAANU");
				break;
			case 0x83D:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION SOF MASHFAAT");
				break;
			case 0x83E:
				strcpy_s(buf, buf_size, "SAMARITAN PUNCTUATION ANNAAU");
				break;
			case 0x840:
				strcpy_s(buf, buf_size, "MANDAIC LETTER HALQA");
				break;
			case 0x841:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AB");
				break;
			case 0x842:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AG");
				break;
			case 0x843:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AD");
				break;
			case 0x844:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AH");
				break;
			case 0x845:
				strcpy_s(buf, buf_size, "MANDAIC LETTER USHENNA");
				break;
			case 0x846:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AZ");
				break;
			case 0x847:
				strcpy_s(buf, buf_size, "MANDAIC LETTER IT");
				break;
			case 0x848:
				strcpy_s(buf, buf_size, "MANDAIC LETTER ATT");
				break;
			case 0x849:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AKSA");
				break;
			case 0x84A:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AK");
				break;
			case 0x84B:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AL");
				break;
			case 0x84C:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AM");
				break;
			case 0x84D:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AN");
				break;
			case 0x84E:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AS");
				break;
			case 0x84F:
				strcpy_s(buf, buf_size, "MANDAIC LETTER IN");
				break;
			case 0x850:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AP");
				break;
			case 0x851:
				strcpy_s(buf, buf_size, "MANDAIC LETTER ASZ");
				break;
			case 0x852:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AQ");
				break;
			case 0x853:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AR");
				break;
			case 0x854:
				strcpy_s(buf, buf_size, "MANDAIC LETTER ASH");
				break;
			case 0x855:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AT");
				break;
			case 0x856:
				strcpy_s(buf, buf_size, "MANDAIC LETTER DUSHENNA");
				break;
			case 0x857:
				strcpy_s(buf, buf_size, "MANDAIC LETTER KAD");
				break;
			case 0x858:
				strcpy_s(buf, buf_size, "MANDAIC LETTER AIN");
				break;
			case 0x859:
				strcpy_s(buf, buf_size, "MANDAIC AFFRICATION MARK");
				break;
			case 0x85A:
				strcpy_s(buf, buf_size, "MANDAIC VOCALIZATION MARK");
				break;
			case 0x85B:
				strcpy_s(buf, buf_size, "MANDAIC GEMINATION MARK");
				break;
			case 0x85E:
				strcpy_s(buf, buf_size, "MANDAIC PUNCTUATION");
				break;
			case 0x860:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM NGA");
				break;
			case 0x861:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM JA");
				break;
			case 0x862:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM NYA");
				break;
			case 0x863:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM TTA");
				break;
			case 0x864:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM NNA");
				break;
			case 0x865:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM NNNA");
				break;
			case 0x866:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM BHA");
				break;
			case 0x867:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM RA");
				break;
			case 0x868:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM LLA");
				break;
			case 0x869:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM LLLA");
				break;
			case 0x86A:
				strcpy_s(buf, buf_size, "SYRIAC LETTER MALAYALAM SSA");
				break;
			case 0x8A0:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH WITH SMALL V BELOW");
				break;
			case 0x8A1:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH WITH HAMZA ABOVE");
				break;
			case 0x8A2:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEEM WITH TWO DOTS ABOVE");
				break;
			case 0x8A3:
				strcpy_s(buf, buf_size, "ARABIC LETTER TAH WITH TWO DOTS ABOVE");
				break;
			case 0x8A4:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH WITH DOT BELOW AND THREE DOTS ABOVE");
				break;
			case 0x8A5:
				strcpy_s(buf, buf_size, "ARABIC LETTER QAF WITH DOT BELOW");
				break;
			case 0x8A6:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM WITH DOUBLE BAR");
				break;
			case 0x8A7:
				strcpy_s(buf, buf_size, "ARABIC LETTER MEEM WITH THREE DOTS ABOVE");
				break;
			case 0x8A8:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH TWO DOTS BELOW AND HAMZA ABOVE");
				break;
			case 0x8A9:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH TWO DOTS BELOW AND DOT ABOVE");
				break;
			case 0x8AA:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH LOOP");
				break;
			case 0x8AB:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW WITH DOT WITHIN");
				break;
			case 0x8AC:
				strcpy_s(buf, buf_size, "ARABIC LETTER ROHINGYA YEH");
				break;
			case 0x8AD:
				strcpy_s(buf, buf_size, "ARABIC LETTER LOW ALEF");
				break;
			case 0x8AE:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL WITH THREE DOTS BELOW");
				break;
			case 0x8AF:
				strcpy_s(buf, buf_size, "ARABIC LETTER SAD WITH THREE DOTS BELOW");
				break;
			case 0x8B0:
				strcpy_s(buf, buf_size, "ARABIC LETTER GAF WITH INVERTED STROKE");
				break;
			case 0x8B1:
				strcpy_s(buf, buf_size, "ARABIC LETTER STRAIGHT WAW");
				break;
			case 0x8B2:
				strcpy_s(buf, buf_size, "ARABIC LETTER ZAIN WITH INVERTED V ABOVE");
				break;
			case 0x8B3:
				strcpy_s(buf, buf_size, "ARABIC LETTER AIN WITH THREE DOTS BELOW");
				break;
			case 0x8B4:
				strcpy_s(buf, buf_size, "ARABIC LETTER KAF WITH DOT BELOW");
				break;
			case 0x8B6:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH WITH SMALL MEEM ABOVE");
				break;
			case 0x8B7:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEH WITH SMALL MEEM ABOVE");
				break;
			case 0x8B8:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH WITH SMALL TEH ABOVE");
				break;
			case 0x8B9:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH WITH SMALL NOON ABOVE");
				break;
			case 0x8BA:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH TWO DOTS BELOW AND SMALL NOON ABOVE");
				break;
			case 0x8BB:
				strcpy_s(buf, buf_size, "ARABIC LETTER AFRICAN FEH");
				break;
			case 0x8BC:
				strcpy_s(buf, buf_size, "ARABIC LETTER AFRICAN QAF");
				break;
			case 0x8BD:
				strcpy_s(buf, buf_size, "ARABIC LETTER AFRICAN NOON");
				break;
			case 0x8BE:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEH WITH SMALL V");
				break;
			case 0x8BF:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH WITH SMALL V");
				break;
			case 0x8C0:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEH WITH SMALL V");
				break;
			case 0x8C1:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEH WITH SMALL V");
				break;
			case 0x8C2:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH WITH SMALL V");
				break;
			case 0x8C3:
				strcpy_s(buf, buf_size, "ARABIC LETTER GHAIN WITH THREE DOTS ABOVE");
				break;
			case 0x8C4:
				strcpy_s(buf, buf_size, "ARABIC LETTER AFRICAN QAF WITH THREE DOTS ABOVE");
				break;
			case 0x8C5:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEEM WITH THREE DOTS ABOVE");
				break;
			case 0x8C6:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEEM WITH THREE DOTS BELOW");
				break;
			case 0x8C7:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM WITH SMALL ARABIC LETTER TAH ABOVE");
				break;
			case 0x8D3:
				strcpy_s(buf, buf_size, "ARABIC SMALL LOW WAW");
				break;
			case 0x8D4:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH WORD AR-RUB");
				break;
			case 0x8D5:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH SAD");
				break;
			case 0x8D6:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH AIN");
				break;
			case 0x8D7:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH QAF");
				break;
			case 0x8D8:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH NOON WITH KASRA");
				break;
			case 0x8D9:
				strcpy_s(buf, buf_size, "ARABIC SMALL LOW NOON WITH KASRA");
				break;
			case 0x8DA:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH WORD ATH-THALATHA");
				break;
			case 0x8DB:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH WORD AS-SAJDA");
				break;
			case 0x8DC:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH WORD AN-NISF");
				break;
			case 0x8DD:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH WORD SAKTA");
				break;
			case 0x8DE:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH WORD QIF");
				break;
			case 0x8DF:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH WORD WAQFA");
				break;
			case 0x8E0:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH FOOTNOTE MARKER");
				break;
			case 0x8E1:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH SIGN SAFHA");
				break;
			case 0x8E2:
				strcpy_s(buf, buf_size, "ARABIC DISPUTED END OF AYAH");
				break;
			case 0x8E3:
				strcpy_s(buf, buf_size, "ARABIC TURNED DAMMA BELOW");
				break;
			case 0x8E4:
				strcpy_s(buf, buf_size, "ARABIC CURLY FATHA");
				break;
			case 0x8E5:
				strcpy_s(buf, buf_size, "ARABIC CURLY DAMMA");
				break;
			case 0x8E6:
				strcpy_s(buf, buf_size, "ARABIC CURLY KASRA");
				break;
			case 0x8E7:
				strcpy_s(buf, buf_size, "ARABIC CURLY FATHATAN");
				break;
			case 0x8E8:
				strcpy_s(buf, buf_size, "ARABIC CURLY DAMMATAN");
				break;
			case 0x8E9:
				strcpy_s(buf, buf_size, "ARABIC CURLY KASRATAN");
				break;
			case 0x8EA:
				strcpy_s(buf, buf_size, "ARABIC TONE ONE DOT ABOVE");
				break;
			case 0x8EB:
				strcpy_s(buf, buf_size, "ARABIC TONE TWO DOTS ABOVE");
				break;
			case 0x8EC:
				strcpy_s(buf, buf_size, "ARABIC TONE LOOP ABOVE");
				break;
			case 0x8ED:
				strcpy_s(buf, buf_size, "ARABIC TONE ONE DOT BELOW");
				break;
			case 0x8EE:
				strcpy_s(buf, buf_size, "ARABIC TONE TWO DOTS BELOW");
				break;
			case 0x8EF:
				strcpy_s(buf, buf_size, "ARABIC TONE LOOP BELOW");
				break;
			case 0x8F0:
				strcpy_s(buf, buf_size, "ARABIC OPEN FATHATAN");
				break;
			case 0x8F1:
				strcpy_s(buf, buf_size, "ARABIC OPEN DAMMATAN");
				break;
			case 0x8F2:
				strcpy_s(buf, buf_size, "ARABIC OPEN KASRATAN");
				break;
			case 0x8F3:
				strcpy_s(buf, buf_size, "ARABIC SMALL HIGH WAW");
				break;
			case 0x8F4:
				strcpy_s(buf, buf_size, "ARABIC FATHA WITH RING");
				break;
			case 0x8F5:
				strcpy_s(buf, buf_size, "ARABIC FATHA WITH DOT ABOVE");
				break;
			case 0x8F6:
				strcpy_s(buf, buf_size, "ARABIC KASRA WITH DOT BELOW");
				break;
			case 0x8F7:
				strcpy_s(buf, buf_size, "ARABIC LEFT ARROWHEAD ABOVE");
				break;
			case 0x8F8:
				strcpy_s(buf, buf_size, "ARABIC RIGHT ARROWHEAD ABOVE");
				break;
			case 0x8F9:
				strcpy_s(buf, buf_size, "ARABIC LEFT ARROWHEAD BELOW");
				break;
			case 0x8FA:
				strcpy_s(buf, buf_size, "ARABIC RIGHT ARROWHEAD BELOW");
				break;
			case 0x8FB:
				strcpy_s(buf, buf_size, "ARABIC DOUBLE RIGHT ARROWHEAD ABOVE");
				break;
			case 0x8FC:
				strcpy_s(buf, buf_size, "ARABIC DOUBLE RIGHT ARROWHEAD ABOVE WITH DOT");
				break;
			case 0x8FD:
				strcpy_s(buf, buf_size, "ARABIC RIGHT ARROWHEAD ABOVE WITH DOT");
				break;
			case 0x8FE:
				strcpy_s(buf, buf_size, "ARABIC DAMMA WITH DOT");
				break;
			case 0x8FF:
				strcpy_s(buf, buf_size, "ARABIC MARK SIDEWAYS NOON GHUNNA");
				break;
			case 0x900:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN INVERTED CANDRABINDU");
				break;
			case 0x901:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN CANDRABINDU");
				break;
			case 0x902:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN ANUSVARA");
				break;
			case 0x903:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN VISARGA");
				break;
			case 0x904:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER SHORT A");
				break;
			case 0x905:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER A");
				break;
			case 0x906:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER AA");
				break;
			case 0x907:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER I");
				break;
			case 0x908:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER II");
				break;
			case 0x909:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER U");
				break;
			case 0x90A:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER UU");
				break;
			case 0x90B:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER VOCALIC R");
				break;
			case 0x90C:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER VOCALIC L");
				break;
			case 0x90D:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER CANDRA E");
				break;
			case 0x90E:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER SHORT E");
				break;
			case 0x90F:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER E");
				break;
			case 0x910:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER AI");
				break;
			case 0x911:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER CANDRA O");
				break;
			case 0x912:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER SHORT O");
				break;
			case 0x913:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER O");
				break;
			case 0x914:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER AU");
				break;
			case 0x915:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER KA");
				break;
			case 0x916:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER KHA");
				break;
			case 0x917:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER GA");
				break;
			case 0x918:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER GHA");
				break;
			case 0x919:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER NGA");
				break;
			case 0x91A:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER CA");
				break;
			case 0x91B:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER CHA");
				break;
			case 0x91C:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER JA");
				break;
			case 0x91D:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER JHA");
				break;
			case 0x91E:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER NYA");
				break;
			case 0x91F:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER TTA");
				break;
			case 0x920:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER TTHA");
				break;
			case 0x921:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER DDA");
				break;
			case 0x922:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER DDHA");
				break;
			case 0x923:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER NNA");
				break;
			case 0x924:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER TA");
				break;
			case 0x925:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER THA");
				break;
			case 0x926:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER DA");
				break;
			case 0x927:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER DHA");
				break;
			case 0x928:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER NA");
				break;
			case 0x929:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER NNNA");
				break;
			case 0x92A:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER PA");
				break;
			case 0x92B:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER PHA");
				break;
			case 0x92C:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER BA");
				break;
			case 0x92D:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER BHA");
				break;
			case 0x92E:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER MA");
				break;
			case 0x92F:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER YA");
				break;
			case 0x930:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER RA");
				break;
			case 0x931:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER RRA");
				break;
			case 0x932:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER LA");
				break;
			case 0x933:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER LLA");
				break;
			case 0x934:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER LLLA");
				break;
			case 0x935:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER VA");
				break;
			case 0x936:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER SHA");
				break;
			case 0x937:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER SSA");
				break;
			case 0x938:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER SA");
				break;
			case 0x939:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER HA");
				break;
			case 0x93A:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN OE");
				break;
			case 0x93B:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN OOE");
				break;
			case 0x93C:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN NUKTA");
				break;
			case 0x93D:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN AVAGRAHA");
				break;
			case 0x93E:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN AA");
				break;
			case 0x93F:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN I");
				break;
			case 0x940:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN II");
				break;
			case 0x941:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN U");
				break;
			case 0x942:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN UU");
				break;
			case 0x943:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN VOCALIC R");
				break;
			case 0x944:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN VOCALIC RR");
				break;
			case 0x945:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN CANDRA E");
				break;
			case 0x946:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN SHORT E");
				break;
			case 0x947:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN E");
				break;
			case 0x948:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN AI");
				break;
			case 0x949:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN CANDRA O");
				break;
			case 0x94A:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN SHORT O");
				break;
			case 0x94B:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN O");
				break;
			case 0x94C:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN AU");
				break;
			case 0x94D:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN VIRAMA");
				break;
			case 0x94E:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN PRISHTHAMATRA E");
				break;
			case 0x94F:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN AW");
				break;
			case 0x950:
				strcpy_s(buf, buf_size, "DEVANAGARI OM");
				break;
			case 0x951:
				strcpy_s(buf, buf_size, "DEVANAGARI STRESS SIGN UDATTA");
				break;
			case 0x952:
				strcpy_s(buf, buf_size, "DEVANAGARI STRESS SIGN ANUDATTA");
				break;
			case 0x953:
				strcpy_s(buf, buf_size, "DEVANAGARI GRAVE ACCENT");
				break;
			case 0x954:
				strcpy_s(buf, buf_size, "DEVANAGARI ACUTE ACCENT");
				break;
			case 0x955:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN CANDRA LONG E");
				break;
			case 0x956:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN UE");
				break;
			case 0x957:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN UUE");
				break;
			case 0x958:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER QA");
				break;
			case 0x959:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER KHHA");
				break;
			case 0x95A:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER GHHA");
				break;
			case 0x95B:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER ZA");
				break;
			case 0x95C:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER DDDHA");
				break;
			case 0x95D:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER RHA");
				break;
			case 0x95E:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER FA");
				break;
			case 0x95F:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER YYA");
				break;
			case 0x960:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER VOCALIC RR");
				break;
			case 0x961:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER VOCALIC LL");
				break;
			case 0x962:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN VOCALIC L");
				break;
			case 0x963:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN VOCALIC LL");
				break;
			case 0x964:
				strcpy_s(buf, buf_size, "DEVANAGARI DANDA");
				break;
			case 0x965:
				strcpy_s(buf, buf_size, "DEVANAGARI DOUBLE DANDA");
				break;
			case 0x966:
				strcpy_s(buf, buf_size, "DEVANAGARI DIGIT ZERO");
				break;
			case 0x967:
				strcpy_s(buf, buf_size, "DEVANAGARI DIGIT ONE");
				break;
			case 0x968:
				strcpy_s(buf, buf_size, "DEVANAGARI DIGIT TWO");
				break;
			case 0x969:
				strcpy_s(buf, buf_size, "DEVANAGARI DIGIT THREE");
				break;
			case 0x96A:
				strcpy_s(buf, buf_size, "DEVANAGARI DIGIT FOUR");
				break;
			case 0x96B:
				strcpy_s(buf, buf_size, "DEVANAGARI DIGIT FIVE");
				break;
			case 0x96C:
				strcpy_s(buf, buf_size, "DEVANAGARI DIGIT SIX");
				break;
			case 0x96D:
				strcpy_s(buf, buf_size, "DEVANAGARI DIGIT SEVEN");
				break;
			case 0x96E:
				strcpy_s(buf, buf_size, "DEVANAGARI DIGIT EIGHT");
				break;
			case 0x96F:
				strcpy_s(buf, buf_size, "DEVANAGARI DIGIT NINE");
				break;
			case 0x970:
				strcpy_s(buf, buf_size, "DEVANAGARI ABBREVIATION SIGN");
				break;
			case 0x971:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN HIGH SPACING DOT");
				break;
			case 0x972:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER CANDRA A");
				break;
			case 0x973:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER OE");
				break;
			case 0x974:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER OOE");
				break;
			case 0x975:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER AW");
				break;
			case 0x976:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER UE");
				break;
			case 0x977:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER UUE");
				break;
			case 0x978:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER MARWARI DDA");
				break;
			case 0x979:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER ZHA");
				break;
			case 0x97A:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER HEAVY YA");
				break;
			case 0x97B:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER GGA");
				break;
			case 0x97C:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER JJA");
				break;
			case 0x97D:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER GLOTTAL STOP");
				break;
			case 0x97E:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER DDDA");
				break;
			case 0x97F:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER BBA");
				break;
			case 0x980:
				strcpy_s(buf, buf_size, "BENGALI ANJI");
				break;
			case 0x981:
				strcpy_s(buf, buf_size, "BENGALI SIGN CANDRABINDU");
				break;
			case 0x982:
				strcpy_s(buf, buf_size, "BENGALI SIGN ANUSVARA");
				break;
			case 0x983:
				strcpy_s(buf, buf_size, "BENGALI SIGN VISARGA");
				break;
			case 0x985:
				strcpy_s(buf, buf_size, "BENGALI LETTER A");
				break;
			case 0x986:
				strcpy_s(buf, buf_size, "BENGALI LETTER AA");
				break;
			case 0x987:
				strcpy_s(buf, buf_size, "BENGALI LETTER I");
				break;
			case 0x988:
				strcpy_s(buf, buf_size, "BENGALI LETTER II");
				break;
			case 0x989:
				strcpy_s(buf, buf_size, "BENGALI LETTER U");
				break;
			case 0x98A:
				strcpy_s(buf, buf_size, "BENGALI LETTER UU");
				break;
			case 0x98B:
				strcpy_s(buf, buf_size, "BENGALI LETTER VOCALIC R");
				break;
			case 0x98C:
				strcpy_s(buf, buf_size, "BENGALI LETTER VOCALIC L");
				break;
			case 0x98F:
				strcpy_s(buf, buf_size, "BENGALI LETTER E");
				break;
			case 0x990:
				strcpy_s(buf, buf_size, "BENGALI LETTER AI");
				break;
			case 0x993:
				strcpy_s(buf, buf_size, "BENGALI LETTER O");
				break;
			case 0x994:
				strcpy_s(buf, buf_size, "BENGALI LETTER AU");
				break;
			case 0x995:
				strcpy_s(buf, buf_size, "BENGALI LETTER KA");
				break;
			case 0x996:
				strcpy_s(buf, buf_size, "BENGALI LETTER KHA");
				break;
			case 0x997:
				strcpy_s(buf, buf_size, "BENGALI LETTER GA");
				break;
			case 0x998:
				strcpy_s(buf, buf_size, "BENGALI LETTER GHA");
				break;
			case 0x999:
				strcpy_s(buf, buf_size, "BENGALI LETTER NGA");
				break;
			case 0x99A:
				strcpy_s(buf, buf_size, "BENGALI LETTER CA");
				break;
			case 0x99B:
				strcpy_s(buf, buf_size, "BENGALI LETTER CHA");
				break;
			case 0x99C:
				strcpy_s(buf, buf_size, "BENGALI LETTER JA");
				break;
			case 0x99D:
				strcpy_s(buf, buf_size, "BENGALI LETTER JHA");
				break;
			case 0x99E:
				strcpy_s(buf, buf_size, "BENGALI LETTER NYA");
				break;
			case 0x99F:
				strcpy_s(buf, buf_size, "BENGALI LETTER TTA");
				break;
			case 0x9A0:
				strcpy_s(buf, buf_size, "BENGALI LETTER TTHA");
				break;
			case 0x9A1:
				strcpy_s(buf, buf_size, "BENGALI LETTER DDA");
				break;
			case 0x9A2:
				strcpy_s(buf, buf_size, "BENGALI LETTER DDHA");
				break;
			case 0x9A3:
				strcpy_s(buf, buf_size, "BENGALI LETTER NNA");
				break;
			case 0x9A4:
				strcpy_s(buf, buf_size, "BENGALI LETTER TA");
				break;
			case 0x9A5:
				strcpy_s(buf, buf_size, "BENGALI LETTER THA");
				break;
			case 0x9A6:
				strcpy_s(buf, buf_size, "BENGALI LETTER DA");
				break;
			case 0x9A7:
				strcpy_s(buf, buf_size, "BENGALI LETTER DHA");
				break;
			case 0x9A8:
				strcpy_s(buf, buf_size, "BENGALI LETTER NA");
				break;
			case 0x9AA:
				strcpy_s(buf, buf_size, "BENGALI LETTER PA");
				break;
			case 0x9AB:
				strcpy_s(buf, buf_size, "BENGALI LETTER PHA");
				break;
			case 0x9AC:
				strcpy_s(buf, buf_size, "BENGALI LETTER BA");
				break;
			case 0x9AD:
				strcpy_s(buf, buf_size, "BENGALI LETTER BHA");
				break;
			case 0x9AE:
				strcpy_s(buf, buf_size, "BENGALI LETTER MA");
				break;
			case 0x9AF:
				strcpy_s(buf, buf_size, "BENGALI LETTER YA");
				break;
			case 0x9B0:
				strcpy_s(buf, buf_size, "BENGALI LETTER RA");
				break;
			case 0x9B2:
				strcpy_s(buf, buf_size, "BENGALI LETTER LA");
				break;
			case 0x9B6:
				strcpy_s(buf, buf_size, "BENGALI LETTER SHA");
				break;
			case 0x9B7:
				strcpy_s(buf, buf_size, "BENGALI LETTER SSA");
				break;
			case 0x9B8:
				strcpy_s(buf, buf_size, "BENGALI LETTER SA");
				break;
			case 0x9B9:
				strcpy_s(buf, buf_size, "BENGALI LETTER HA");
				break;
			case 0x9BC:
				strcpy_s(buf, buf_size, "BENGALI SIGN NUKTA");
				break;
			case 0x9BD:
				strcpy_s(buf, buf_size, "BENGALI SIGN AVAGRAHA");
				break;
			case 0x9BE:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN AA");
				break;
			case 0x9BF:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN I");
				break;
			case 0x9C0:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN II");
				break;
			case 0x9C1:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN U");
				break;
			case 0x9C2:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN UU");
				break;
			case 0x9C3:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN VOCALIC R");
				break;
			case 0x9C4:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN VOCALIC RR");
				break;
			case 0x9C7:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN E");
				break;
			case 0x9C8:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN AI");
				break;
			case 0x9CB:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN O");
				break;
			case 0x9CC:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN AU");
				break;
			case 0x9CD:
				strcpy_s(buf, buf_size, "BENGALI SIGN VIRAMA");
				break;
			case 0x9CE:
				strcpy_s(buf, buf_size, "BENGALI LETTER KHANDA TA");
				break;
			case 0x9D7:
				strcpy_s(buf, buf_size, "BENGALI AU LENGTH MARK");
				break;
			case 0x9DC:
				strcpy_s(buf, buf_size, "BENGALI LETTER RRA");
				break;
			case 0x9DD:
				strcpy_s(buf, buf_size, "BENGALI LETTER RHA");
				break;
			case 0x9DF:
				strcpy_s(buf, buf_size, "BENGALI LETTER YYA");
				break;
			case 0x9E0:
				strcpy_s(buf, buf_size, "BENGALI LETTER VOCALIC RR");
				break;
			case 0x9E1:
				strcpy_s(buf, buf_size, "BENGALI LETTER VOCALIC LL");
				break;
			case 0x9E2:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN VOCALIC L");
				break;
			case 0x9E3:
				strcpy_s(buf, buf_size, "BENGALI VOWEL SIGN VOCALIC LL");
				break;
			case 0x9E6:
				strcpy_s(buf, buf_size, "BENGALI DIGIT ZERO");
				break;
			case 0x9E7:
				strcpy_s(buf, buf_size, "BENGALI DIGIT ONE");
				break;
			case 0x9E8:
				strcpy_s(buf, buf_size, "BENGALI DIGIT TWO");
				break;
			case 0x9E9:
				strcpy_s(buf, buf_size, "BENGALI DIGIT THREE");
				break;
			case 0x9EA:
				strcpy_s(buf, buf_size, "BENGALI DIGIT FOUR");
				break;
			case 0x9EB:
				strcpy_s(buf, buf_size, "BENGALI DIGIT FIVE");
				break;
			case 0x9EC:
				strcpy_s(buf, buf_size, "BENGALI DIGIT SIX");
				break;
			case 0x9ED:
				strcpy_s(buf, buf_size, "BENGALI DIGIT SEVEN");
				break;
			case 0x9EE:
				strcpy_s(buf, buf_size, "BENGALI DIGIT EIGHT");
				break;
			case 0x9EF:
				strcpy_s(buf, buf_size, "BENGALI DIGIT NINE");
				break;
			case 0x9F0:
				strcpy_s(buf, buf_size, "BENGALI LETTER RA WITH MIDDLE DIAGONAL");
				break;
			case 0x9F1:
				strcpy_s(buf, buf_size, "BENGALI LETTER RA WITH LOWER DIAGONAL");
				break;
			case 0x9F2:
				strcpy_s(buf, buf_size, "BENGALI RUPEE MARK");
				break;
			case 0x9F3:
				strcpy_s(buf, buf_size, "BENGALI RUPEE SIGN");
				break;
			case 0x9F4:
				strcpy_s(buf, buf_size, "BENGALI CURRENCY NUMERATOR ONE");
				break;
			case 0x9F5:
				strcpy_s(buf, buf_size, "BENGALI CURRENCY NUMERATOR TWO");
				break;
			case 0x9F6:
				strcpy_s(buf, buf_size, "BENGALI CURRENCY NUMERATOR THREE");
				break;
			case 0x9F7:
				strcpy_s(buf, buf_size, "BENGALI CURRENCY NUMERATOR FOUR");
				break;
			case 0x9F8:
				strcpy_s(buf, buf_size, "BENGALI CURRENCY NUMERATOR ONE LESS THAN THE DENOMINATOR");
				break;
			case 0x9F9:
				strcpy_s(buf, buf_size, "BENGALI CURRENCY DENOMINATOR SIXTEEN");
				break;
			case 0x9FA:
				strcpy_s(buf, buf_size, "BENGALI ISSHAR");
				break;
			case 0x9FB:
				strcpy_s(buf, buf_size, "BENGALI GANDA MARK");
				break;
			case 0x9FC:
				strcpy_s(buf, buf_size, "BENGALI LETTER VEDIC ANUSVARA");
				break;
			case 0x9FD:
				strcpy_s(buf, buf_size, "BENGALI ABBREVIATION SIGN");
				break;
			case 0x9FE:
				strcpy_s(buf, buf_size, "BENGALI SANDHI MARK");
				break;
			case 0xA01:
				strcpy_s(buf, buf_size, "GURMUKHI SIGN ADAK BINDI");
				break;
			case 0xA02:
				strcpy_s(buf, buf_size, "GURMUKHI SIGN BINDI");
				break;
			case 0xA03:
				strcpy_s(buf, buf_size, "GURMUKHI SIGN VISARGA");
				break;
			case 0xA05:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER A");
				break;
			case 0xA06:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER AA");
				break;
			case 0xA07:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER I");
				break;
			case 0xA08:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER II");
				break;
			case 0xA09:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER U");
				break;
			case 0xA0A:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER UU");
				break;
			case 0xA0F:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER EE");
				break;
			case 0xA10:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER AI");
				break;
			case 0xA13:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER OO");
				break;
			case 0xA14:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER AU");
				break;
			case 0xA15:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER KA");
				break;
			case 0xA16:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER KHA");
				break;
			case 0xA17:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER GA");
				break;
			case 0xA18:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER GHA");
				break;
			case 0xA19:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER NGA");
				break;
			case 0xA1A:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER CA");
				break;
			case 0xA1B:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER CHA");
				break;
			case 0xA1C:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER JA");
				break;
			case 0xA1D:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER JHA");
				break;
			case 0xA1E:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER NYA");
				break;
			case 0xA1F:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER TTA");
				break;
			case 0xA20:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER TTHA");
				break;
			case 0xA21:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER DDA");
				break;
			case 0xA22:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER DDHA");
				break;
			case 0xA23:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER NNA");
				break;
			case 0xA24:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER TA");
				break;
			case 0xA25:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER THA");
				break;
			case 0xA26:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER DA");
				break;
			case 0xA27:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER DHA");
				break;
			case 0xA28:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER NA");
				break;
			case 0xA2A:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER PA");
				break;
			case 0xA2B:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER PHA");
				break;
			case 0xA2C:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER BA");
				break;
			case 0xA2D:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER BHA");
				break;
			case 0xA2E:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER MA");
				break;
			case 0xA2F:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER YA");
				break;
			case 0xA30:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER RA");
				break;
			case 0xA32:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER LA");
				break;
			case 0xA33:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER LLA");
				break;
			case 0xA35:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER VA");
				break;
			case 0xA36:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER SHA");
				break;
			case 0xA38:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER SA");
				break;
			case 0xA39:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER HA");
				break;
			case 0xA3C:
				strcpy_s(buf, buf_size, "GURMUKHI SIGN NUKTA");
				break;
			case 0xA3E:
				strcpy_s(buf, buf_size, "GURMUKHI VOWEL SIGN AA");
				break;
			case 0xA3F:
				strcpy_s(buf, buf_size, "GURMUKHI VOWEL SIGN I");
				break;
			case 0xA40:
				strcpy_s(buf, buf_size, "GURMUKHI VOWEL SIGN II");
				break;
			case 0xA41:
				strcpy_s(buf, buf_size, "GURMUKHI VOWEL SIGN U");
				break;
			case 0xA42:
				strcpy_s(buf, buf_size, "GURMUKHI VOWEL SIGN UU");
				break;
			case 0xA47:
				strcpy_s(buf, buf_size, "GURMUKHI VOWEL SIGN EE");
				break;
			case 0xA48:
				strcpy_s(buf, buf_size, "GURMUKHI VOWEL SIGN AI");
				break;
			case 0xA4B:
				strcpy_s(buf, buf_size, "GURMUKHI VOWEL SIGN OO");
				break;
			case 0xA4C:
				strcpy_s(buf, buf_size, "GURMUKHI VOWEL SIGN AU");
				break;
			case 0xA4D:
				strcpy_s(buf, buf_size, "GURMUKHI SIGN VIRAMA");
				break;
			case 0xA51:
				strcpy_s(buf, buf_size, "GURMUKHI SIGN UDAAT");
				break;
			case 0xA59:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER KHHA");
				break;
			case 0xA5A:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER GHHA");
				break;
			case 0xA5B:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER ZA");
				break;
			case 0xA5C:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER RRA");
				break;
			case 0xA5E:
				strcpy_s(buf, buf_size, "GURMUKHI LETTER FA");
				break;
			case 0xA66:
				strcpy_s(buf, buf_size, "GURMUKHI DIGIT ZERO");
				break;
			case 0xA67:
				strcpy_s(buf, buf_size, "GURMUKHI DIGIT ONE");
				break;
			case 0xA68:
				strcpy_s(buf, buf_size, "GURMUKHI DIGIT TWO");
				break;
			case 0xA69:
				strcpy_s(buf, buf_size, "GURMUKHI DIGIT THREE");
				break;
			case 0xA6A:
				strcpy_s(buf, buf_size, "GURMUKHI DIGIT FOUR");
				break;
			case 0xA6B:
				strcpy_s(buf, buf_size, "GURMUKHI DIGIT FIVE");
				break;
			case 0xA6C:
				strcpy_s(buf, buf_size, "GURMUKHI DIGIT SIX");
				break;
			case 0xA6D:
				strcpy_s(buf, buf_size, "GURMUKHI DIGIT SEVEN");
				break;
			case 0xA6E:
				strcpy_s(buf, buf_size, "GURMUKHI DIGIT EIGHT");
				break;
			case 0xA6F:
				strcpy_s(buf, buf_size, "GURMUKHI DIGIT NINE");
				break;
			case 0xA70:
				strcpy_s(buf, buf_size, "GURMUKHI TIPPI");
				break;
			case 0xA71:
				strcpy_s(buf, buf_size, "GURMUKHI ADDAK");
				break;
			case 0xA72:
				strcpy_s(buf, buf_size, "GURMUKHI IRI");
				break;
			case 0xA73:
				strcpy_s(buf, buf_size, "GURMUKHI URA");
				break;
			case 0xA74:
				strcpy_s(buf, buf_size, "GURMUKHI EK ONKAR");
				break;
			case 0xA75:
				strcpy_s(buf, buf_size, "GURMUKHI SIGN YAKASH");
				break;
			case 0xA76:
				strcpy_s(buf, buf_size, "GURMUKHI ABBREVIATION SIGN");
				break;
			case 0xA81:
				strcpy_s(buf, buf_size, "GUJARATI SIGN CANDRABINDU");
				break;
			case 0xA82:
				strcpy_s(buf, buf_size, "GUJARATI SIGN ANUSVARA");
				break;
			case 0xA83:
				strcpy_s(buf, buf_size, "GUJARATI SIGN VISARGA");
				break;
			case 0xA85:
				strcpy_s(buf, buf_size, "GUJARATI LETTER A");
				break;
			case 0xA86:
				strcpy_s(buf, buf_size, "GUJARATI LETTER AA");
				break;
			case 0xA87:
				strcpy_s(buf, buf_size, "GUJARATI LETTER I");
				break;
			case 0xA88:
				strcpy_s(buf, buf_size, "GUJARATI LETTER II");
				break;
			case 0xA89:
				strcpy_s(buf, buf_size, "GUJARATI LETTER U");
				break;
			case 0xA8A:
				strcpy_s(buf, buf_size, "GUJARATI LETTER UU");
				break;
			case 0xA8B:
				strcpy_s(buf, buf_size, "GUJARATI LETTER VOCALIC R");
				break;
			case 0xA8C:
				strcpy_s(buf, buf_size, "GUJARATI LETTER VOCALIC L");
				break;
			case 0xA8D:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL CANDRA E");
				break;
			case 0xA8F:
				strcpy_s(buf, buf_size, "GUJARATI LETTER E");
				break;
			case 0xA90:
				strcpy_s(buf, buf_size, "GUJARATI LETTER AI");
				break;
			case 0xA91:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL CANDRA O");
				break;
			case 0xA93:
				strcpy_s(buf, buf_size, "GUJARATI LETTER O");
				break;
			case 0xA94:
				strcpy_s(buf, buf_size, "GUJARATI LETTER AU");
				break;
			case 0xA95:
				strcpy_s(buf, buf_size, "GUJARATI LETTER KA");
				break;
			case 0xA96:
				strcpy_s(buf, buf_size, "GUJARATI LETTER KHA");
				break;
			case 0xA97:
				strcpy_s(buf, buf_size, "GUJARATI LETTER GA");
				break;
			case 0xA98:
				strcpy_s(buf, buf_size, "GUJARATI LETTER GHA");
				break;
			case 0xA99:
				strcpy_s(buf, buf_size, "GUJARATI LETTER NGA");
				break;
			case 0xA9A:
				strcpy_s(buf, buf_size, "GUJARATI LETTER CA");
				break;
			case 0xA9B:
				strcpy_s(buf, buf_size, "GUJARATI LETTER CHA");
				break;
			case 0xA9C:
				strcpy_s(buf, buf_size, "GUJARATI LETTER JA");
				break;
			case 0xA9D:
				strcpy_s(buf, buf_size, "GUJARATI LETTER JHA");
				break;
			case 0xA9E:
				strcpy_s(buf, buf_size, "GUJARATI LETTER NYA");
				break;
			case 0xA9F:
				strcpy_s(buf, buf_size, "GUJARATI LETTER TTA");
				break;
			case 0xAA0:
				strcpy_s(buf, buf_size, "GUJARATI LETTER TTHA");
				break;
			case 0xAA1:
				strcpy_s(buf, buf_size, "GUJARATI LETTER DDA");
				break;
			case 0xAA2:
				strcpy_s(buf, buf_size, "GUJARATI LETTER DDHA");
				break;
			case 0xAA3:
				strcpy_s(buf, buf_size, "GUJARATI LETTER NNA");
				break;
			case 0xAA4:
				strcpy_s(buf, buf_size, "GUJARATI LETTER TA");
				break;
			case 0xAA5:
				strcpy_s(buf, buf_size, "GUJARATI LETTER THA");
				break;
			case 0xAA6:
				strcpy_s(buf, buf_size, "GUJARATI LETTER DA");
				break;
			case 0xAA7:
				strcpy_s(buf, buf_size, "GUJARATI LETTER DHA");
				break;
			case 0xAA8:
				strcpy_s(buf, buf_size, "GUJARATI LETTER NA");
				break;
			case 0xAAA:
				strcpy_s(buf, buf_size, "GUJARATI LETTER PA");
				break;
			case 0xAAB:
				strcpy_s(buf, buf_size, "GUJARATI LETTER PHA");
				break;
			case 0xAAC:
				strcpy_s(buf, buf_size, "GUJARATI LETTER BA");
				break;
			case 0xAAD:
				strcpy_s(buf, buf_size, "GUJARATI LETTER BHA");
				break;
			case 0xAAE:
				strcpy_s(buf, buf_size, "GUJARATI LETTER MA");
				break;
			case 0xAAF:
				strcpy_s(buf, buf_size, "GUJARATI LETTER YA");
				break;
			case 0xAB0:
				strcpy_s(buf, buf_size, "GUJARATI LETTER RA");
				break;
			case 0xAB2:
				strcpy_s(buf, buf_size, "GUJARATI LETTER LA");
				break;
			case 0xAB3:
				strcpy_s(buf, buf_size, "GUJARATI LETTER LLA");
				break;
			case 0xAB5:
				strcpy_s(buf, buf_size, "GUJARATI LETTER VA");
				break;
			case 0xAB6:
				strcpy_s(buf, buf_size, "GUJARATI LETTER SHA");
				break;
			case 0xAB7:
				strcpy_s(buf, buf_size, "GUJARATI LETTER SSA");
				break;
			case 0xAB8:
				strcpy_s(buf, buf_size, "GUJARATI LETTER SA");
				break;
			case 0xAB9:
				strcpy_s(buf, buf_size, "GUJARATI LETTER HA");
				break;
			case 0xABC:
				strcpy_s(buf, buf_size, "GUJARATI SIGN NUKTA");
				break;
			case 0xABD:
				strcpy_s(buf, buf_size, "GUJARATI SIGN AVAGRAHA");
				break;
			case 0xABE:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN AA");
				break;
			case 0xABF:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN I");
				break;
			case 0xAC0:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN II");
				break;
			case 0xAC1:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN U");
				break;
			case 0xAC2:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN UU");
				break;
			case 0xAC3:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN VOCALIC R");
				break;
			case 0xAC4:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN VOCALIC RR");
				break;
			case 0xAC5:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN CANDRA E");
				break;
			case 0xAC7:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN E");
				break;
			case 0xAC8:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN AI");
				break;
			case 0xAC9:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN CANDRA O");
				break;
			case 0xACB:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN O");
				break;
			case 0xACC:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN AU");
				break;
			case 0xACD:
				strcpy_s(buf, buf_size, "GUJARATI SIGN VIRAMA");
				break;
			case 0xAD0:
				strcpy_s(buf, buf_size, "GUJARATI OM");
				break;
			case 0xAE0:
				strcpy_s(buf, buf_size, "GUJARATI LETTER VOCALIC RR");
				break;
			case 0xAE1:
				strcpy_s(buf, buf_size, "GUJARATI LETTER VOCALIC LL");
				break;
			case 0xAE2:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN VOCALIC L");
				break;
			case 0xAE3:
				strcpy_s(buf, buf_size, "GUJARATI VOWEL SIGN VOCALIC LL");
				break;
			case 0xAE6:
				strcpy_s(buf, buf_size, "GUJARATI DIGIT ZERO");
				break;
			case 0xAE7:
				strcpy_s(buf, buf_size, "GUJARATI DIGIT ONE");
				break;
			case 0xAE8:
				strcpy_s(buf, buf_size, "GUJARATI DIGIT TWO");
				break;
			case 0xAE9:
				strcpy_s(buf, buf_size, "GUJARATI DIGIT THREE");
				break;
			case 0xAEA:
				strcpy_s(buf, buf_size, "GUJARATI DIGIT FOUR");
				break;
			case 0xAEB:
				strcpy_s(buf, buf_size, "GUJARATI DIGIT FIVE");
				break;
			case 0xAEC:
				strcpy_s(buf, buf_size, "GUJARATI DIGIT SIX");
				break;
			case 0xAED:
				strcpy_s(buf, buf_size, "GUJARATI DIGIT SEVEN");
				break;
			case 0xAEE:
				strcpy_s(buf, buf_size, "GUJARATI DIGIT EIGHT");
				break;
			case 0xAEF:
				strcpy_s(buf, buf_size, "GUJARATI DIGIT NINE");
				break;
			case 0xAF0:
				strcpy_s(buf, buf_size, "GUJARATI ABBREVIATION SIGN");
				break;
			case 0xAF1:
				strcpy_s(buf, buf_size, "GUJARATI RUPEE SIGN");
				break;
			case 0xAF9:
				strcpy_s(buf, buf_size, "GUJARATI LETTER ZHA");
				break;
			case 0xAFA:
				strcpy_s(buf, buf_size, "GUJARATI SIGN SUKUN");
				break;
			case 0xAFB:
				strcpy_s(buf, buf_size, "GUJARATI SIGN SHADDA");
				break;
			case 0xAFC:
				strcpy_s(buf, buf_size, "GUJARATI SIGN MADDAH");
				break;
			case 0xAFD:
				strcpy_s(buf, buf_size, "GUJARATI SIGN THREE-DOT NUKTA ABOVE");
				break;
			case 0xAFE:
				strcpy_s(buf, buf_size, "GUJARATI SIGN CIRCLE NUKTA ABOVE");
				break;
			case 0xAFF:
				strcpy_s(buf, buf_size, "GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE");
				break;
			case 0xB01:
				strcpy_s(buf, buf_size, "ORIYA SIGN CANDRABINDU");
				break;
			case 0xB02:
				strcpy_s(buf, buf_size, "ORIYA SIGN ANUSVARA");
				break;
			case 0xB03:
				strcpy_s(buf, buf_size, "ORIYA SIGN VISARGA");
				break;
			case 0xB05:
				strcpy_s(buf, buf_size, "ORIYA LETTER A");
				break;
			case 0xB06:
				strcpy_s(buf, buf_size, "ORIYA LETTER AA");
				break;
			case 0xB07:
				strcpy_s(buf, buf_size, "ORIYA LETTER I");
				break;
			case 0xB08:
				strcpy_s(buf, buf_size, "ORIYA LETTER II");
				break;
			case 0xB09:
				strcpy_s(buf, buf_size, "ORIYA LETTER U");
				break;
			case 0xB0A:
				strcpy_s(buf, buf_size, "ORIYA LETTER UU");
				break;
			case 0xB0B:
				strcpy_s(buf, buf_size, "ORIYA LETTER VOCALIC R");
				break;
			case 0xB0C:
				strcpy_s(buf, buf_size, "ORIYA LETTER VOCALIC L");
				break;
			case 0xB0F:
				strcpy_s(buf, buf_size, "ORIYA LETTER E");
				break;
			case 0xB10:
				strcpy_s(buf, buf_size, "ORIYA LETTER AI");
				break;
			case 0xB13:
				strcpy_s(buf, buf_size, "ORIYA LETTER O");
				break;
			case 0xB14:
				strcpy_s(buf, buf_size, "ORIYA LETTER AU");
				break;
			case 0xB15:
				strcpy_s(buf, buf_size, "ORIYA LETTER KA");
				break;
			case 0xB16:
				strcpy_s(buf, buf_size, "ORIYA LETTER KHA");
				break;
			case 0xB17:
				strcpy_s(buf, buf_size, "ORIYA LETTER GA");
				break;
			case 0xB18:
				strcpy_s(buf, buf_size, "ORIYA LETTER GHA");
				break;
			case 0xB19:
				strcpy_s(buf, buf_size, "ORIYA LETTER NGA");
				break;
			case 0xB1A:
				strcpy_s(buf, buf_size, "ORIYA LETTER CA");
				break;
			case 0xB1B:
				strcpy_s(buf, buf_size, "ORIYA LETTER CHA");
				break;
			case 0xB1C:
				strcpy_s(buf, buf_size, "ORIYA LETTER JA");
				break;
			case 0xB1D:
				strcpy_s(buf, buf_size, "ORIYA LETTER JHA");
				break;
			case 0xB1E:
				strcpy_s(buf, buf_size, "ORIYA LETTER NYA");
				break;
			case 0xB1F:
				strcpy_s(buf, buf_size, "ORIYA LETTER TTA");
				break;
			case 0xB20:
				strcpy_s(buf, buf_size, "ORIYA LETTER TTHA");
				break;
			case 0xB21:
				strcpy_s(buf, buf_size, "ORIYA LETTER DDA");
				break;
			case 0xB22:
				strcpy_s(buf, buf_size, "ORIYA LETTER DDHA");
				break;
			case 0xB23:
				strcpy_s(buf, buf_size, "ORIYA LETTER NNA");
				break;
			case 0xB24:
				strcpy_s(buf, buf_size, "ORIYA LETTER TA");
				break;
			case 0xB25:
				strcpy_s(buf, buf_size, "ORIYA LETTER THA");
				break;
			case 0xB26:
				strcpy_s(buf, buf_size, "ORIYA LETTER DA");
				break;
			case 0xB27:
				strcpy_s(buf, buf_size, "ORIYA LETTER DHA");
				break;
			case 0xB28:
				strcpy_s(buf, buf_size, "ORIYA LETTER NA");
				break;
			case 0xB2A:
				strcpy_s(buf, buf_size, "ORIYA LETTER PA");
				break;
			case 0xB2B:
				strcpy_s(buf, buf_size, "ORIYA LETTER PHA");
				break;
			case 0xB2C:
				strcpy_s(buf, buf_size, "ORIYA LETTER BA");
				break;
			case 0xB2D:
				strcpy_s(buf, buf_size, "ORIYA LETTER BHA");
				break;
			case 0xB2E:
				strcpy_s(buf, buf_size, "ORIYA LETTER MA");
				break;
			case 0xB2F:
				strcpy_s(buf, buf_size, "ORIYA LETTER YA");
				break;
			case 0xB30:
				strcpy_s(buf, buf_size, "ORIYA LETTER RA");
				break;
			case 0xB32:
				strcpy_s(buf, buf_size, "ORIYA LETTER LA");
				break;
			case 0xB33:
				strcpy_s(buf, buf_size, "ORIYA LETTER LLA");
				break;
			case 0xB35:
				strcpy_s(buf, buf_size, "ORIYA LETTER VA");
				break;
			case 0xB36:
				strcpy_s(buf, buf_size, "ORIYA LETTER SHA");
				break;
			case 0xB37:
				strcpy_s(buf, buf_size, "ORIYA LETTER SSA");
				break;
			case 0xB38:
				strcpy_s(buf, buf_size, "ORIYA LETTER SA");
				break;
			case 0xB39:
				strcpy_s(buf, buf_size, "ORIYA LETTER HA");
				break;
			case 0xB3C:
				strcpy_s(buf, buf_size, "ORIYA SIGN NUKTA");
				break;
			case 0xB3D:
				strcpy_s(buf, buf_size, "ORIYA SIGN AVAGRAHA");
				break;
			case 0xB3E:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN AA");
				break;
			case 0xB3F:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN I");
				break;
			case 0xB40:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN II");
				break;
			case 0xB41:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN U");
				break;
			case 0xB42:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN UU");
				break;
			case 0xB43:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN VOCALIC R");
				break;
			case 0xB44:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN VOCALIC RR");
				break;
			case 0xB47:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN E");
				break;
			case 0xB48:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN AI");
				break;
			case 0xB4B:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN O");
				break;
			case 0xB4C:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN AU");
				break;
			case 0xB4D:
				strcpy_s(buf, buf_size, "ORIYA SIGN VIRAMA");
				break;
			case 0xB55:
				strcpy_s(buf, buf_size, "ORIYA SIGN OVERLINE");
				break;
			case 0xB56:
				strcpy_s(buf, buf_size, "ORIYA AI LENGTH MARK");
				break;
			case 0xB57:
				strcpy_s(buf, buf_size, "ORIYA AU LENGTH MARK");
				break;
			case 0xB5C:
				strcpy_s(buf, buf_size, "ORIYA LETTER RRA");
				break;
			case 0xB5D:
				strcpy_s(buf, buf_size, "ORIYA LETTER RHA");
				break;
			case 0xB5F:
				strcpy_s(buf, buf_size, "ORIYA LETTER YYA");
				break;
			case 0xB60:
				strcpy_s(buf, buf_size, "ORIYA LETTER VOCALIC RR");
				break;
			case 0xB61:
				strcpy_s(buf, buf_size, "ORIYA LETTER VOCALIC LL");
				break;
			case 0xB62:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN VOCALIC L");
				break;
			case 0xB63:
				strcpy_s(buf, buf_size, "ORIYA VOWEL SIGN VOCALIC LL");
				break;
			case 0xB66:
				strcpy_s(buf, buf_size, "ORIYA DIGIT ZERO");
				break;
			case 0xB67:
				strcpy_s(buf, buf_size, "ORIYA DIGIT ONE");
				break;
			case 0xB68:
				strcpy_s(buf, buf_size, "ORIYA DIGIT TWO");
				break;
			case 0xB69:
				strcpy_s(buf, buf_size, "ORIYA DIGIT THREE");
				break;
			case 0xB6A:
				strcpy_s(buf, buf_size, "ORIYA DIGIT FOUR");
				break;
			case 0xB6B:
				strcpy_s(buf, buf_size, "ORIYA DIGIT FIVE");
				break;
			case 0xB6C:
				strcpy_s(buf, buf_size, "ORIYA DIGIT SIX");
				break;
			case 0xB6D:
				strcpy_s(buf, buf_size, "ORIYA DIGIT SEVEN");
				break;
			case 0xB6E:
				strcpy_s(buf, buf_size, "ORIYA DIGIT EIGHT");
				break;
			case 0xB6F:
				strcpy_s(buf, buf_size, "ORIYA DIGIT NINE");
				break;
			case 0xB70:
				strcpy_s(buf, buf_size, "ORIYA ISSHAR");
				break;
			case 0xB71:
				strcpy_s(buf, buf_size, "ORIYA LETTER WA");
				break;
			case 0xB72:
				strcpy_s(buf, buf_size, "ORIYA FRACTION ONE QUARTER");
				break;
			case 0xB73:
				strcpy_s(buf, buf_size, "ORIYA FRACTION ONE HALF");
				break;
			case 0xB74:
				strcpy_s(buf, buf_size, "ORIYA FRACTION THREE QUARTERS");
				break;
			case 0xB75:
				strcpy_s(buf, buf_size, "ORIYA FRACTION ONE SIXTEENTH");
				break;
			case 0xB76:
				strcpy_s(buf, buf_size, "ORIYA FRACTION ONE EIGHTH");
				break;
			case 0xB77:
				strcpy_s(buf, buf_size, "ORIYA FRACTION THREE SIXTEENTHS");
				break;
			case 0xB82:
				strcpy_s(buf, buf_size, "TAMIL SIGN ANUSVARA");
				break;
			case 0xB83:
				strcpy_s(buf, buf_size, "TAMIL SIGN VISARGA");
				break;
			case 0xB85:
				strcpy_s(buf, buf_size, "TAMIL LETTER A");
				break;
			case 0xB86:
				strcpy_s(buf, buf_size, "TAMIL LETTER AA");
				break;
			case 0xB87:
				strcpy_s(buf, buf_size, "TAMIL LETTER I");
				break;
			case 0xB88:
				strcpy_s(buf, buf_size, "TAMIL LETTER II");
				break;
			case 0xB89:
				strcpy_s(buf, buf_size, "TAMIL LETTER U");
				break;
			case 0xB8A:
				strcpy_s(buf, buf_size, "TAMIL LETTER UU");
				break;
			case 0xB8E:
				strcpy_s(buf, buf_size, "TAMIL LETTER E");
				break;
			case 0xB8F:
				strcpy_s(buf, buf_size, "TAMIL LETTER EE");
				break;
			case 0xB90:
				strcpy_s(buf, buf_size, "TAMIL LETTER AI");
				break;
			case 0xB92:
				strcpy_s(buf, buf_size, "TAMIL LETTER O");
				break;
			case 0xB93:
				strcpy_s(buf, buf_size, "TAMIL LETTER OO");
				break;
			case 0xB94:
				strcpy_s(buf, buf_size, "TAMIL LETTER AU");
				break;
			case 0xB95:
				strcpy_s(buf, buf_size, "TAMIL LETTER KA");
				break;
			case 0xB99:
				strcpy_s(buf, buf_size, "TAMIL LETTER NGA");
				break;
			case 0xB9A:
				strcpy_s(buf, buf_size, "TAMIL LETTER CA");
				break;
			case 0xB9C:
				strcpy_s(buf, buf_size, "TAMIL LETTER JA");
				break;
			case 0xB9E:
				strcpy_s(buf, buf_size, "TAMIL LETTER NYA");
				break;
			case 0xB9F:
				strcpy_s(buf, buf_size, "TAMIL LETTER TTA");
				break;
			case 0xBA3:
				strcpy_s(buf, buf_size, "TAMIL LETTER NNA");
				break;
			case 0xBA4:
				strcpy_s(buf, buf_size, "TAMIL LETTER TA");
				break;
			case 0xBA8:
				strcpy_s(buf, buf_size, "TAMIL LETTER NA");
				break;
			case 0xBA9:
				strcpy_s(buf, buf_size, "TAMIL LETTER NNNA");
				break;
			case 0xBAA:
				strcpy_s(buf, buf_size, "TAMIL LETTER PA");
				break;
			case 0xBAE:
				strcpy_s(buf, buf_size, "TAMIL LETTER MA");
				break;
			case 0xBAF:
				strcpy_s(buf, buf_size, "TAMIL LETTER YA");
				break;
			case 0xBB0:
				strcpy_s(buf, buf_size, "TAMIL LETTER RA");
				break;
			case 0xBB1:
				strcpy_s(buf, buf_size, "TAMIL LETTER RRA");
				break;
			case 0xBB2:
				strcpy_s(buf, buf_size, "TAMIL LETTER LA");
				break;
			case 0xBB3:
				strcpy_s(buf, buf_size, "TAMIL LETTER LLA");
				break;
			case 0xBB4:
				strcpy_s(buf, buf_size, "TAMIL LETTER LLLA");
				break;
			case 0xBB5:
				strcpy_s(buf, buf_size, "TAMIL LETTER VA");
				break;
			case 0xBB6:
				strcpy_s(buf, buf_size, "TAMIL LETTER SHA");
				break;
			case 0xBB7:
				strcpy_s(buf, buf_size, "TAMIL LETTER SSA");
				break;
			case 0xBB8:
				strcpy_s(buf, buf_size, "TAMIL LETTER SA");
				break;
			case 0xBB9:
				strcpy_s(buf, buf_size, "TAMIL LETTER HA");
				break;
			case 0xBBE:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN AA");
				break;
			case 0xBBF:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN I");
				break;
			case 0xBC0:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN II");
				break;
			case 0xBC1:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN U");
				break;
			case 0xBC2:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN UU");
				break;
			case 0xBC6:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN E");
				break;
			case 0xBC7:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN EE");
				break;
			case 0xBC8:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN AI");
				break;
			case 0xBCA:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN O");
				break;
			case 0xBCB:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN OO");
				break;
			case 0xBCC:
				strcpy_s(buf, buf_size, "TAMIL VOWEL SIGN AU");
				break;
			case 0xBCD:
				strcpy_s(buf, buf_size, "TAMIL SIGN VIRAMA");
				break;
			case 0xBD0:
				strcpy_s(buf, buf_size, "TAMIL OM");
				break;
			case 0xBD7:
				strcpy_s(buf, buf_size, "TAMIL AU LENGTH MARK");
				break;
			case 0xBE6:
				strcpy_s(buf, buf_size, "TAMIL DIGIT ZERO");
				break;
			case 0xBE7:
				strcpy_s(buf, buf_size, "TAMIL DIGIT ONE");
				break;
			case 0xBE8:
				strcpy_s(buf, buf_size, "TAMIL DIGIT TWO");
				break;
			case 0xBE9:
				strcpy_s(buf, buf_size, "TAMIL DIGIT THREE");
				break;
			case 0xBEA:
				strcpy_s(buf, buf_size, "TAMIL DIGIT FOUR");
				break;
			case 0xBEB:
				strcpy_s(buf, buf_size, "TAMIL DIGIT FIVE");
				break;
			case 0xBEC:
				strcpy_s(buf, buf_size, "TAMIL DIGIT SIX");
				break;
			case 0xBED:
				strcpy_s(buf, buf_size, "TAMIL DIGIT SEVEN");
				break;
			case 0xBEE:
				strcpy_s(buf, buf_size, "TAMIL DIGIT EIGHT");
				break;
			case 0xBEF:
				strcpy_s(buf, buf_size, "TAMIL DIGIT NINE");
				break;
			case 0xBF0:
				strcpy_s(buf, buf_size, "TAMIL NUMBER TEN");
				break;
			case 0xBF1:
				strcpy_s(buf, buf_size, "TAMIL NUMBER ONE HUNDRED");
				break;
			case 0xBF2:
				strcpy_s(buf, buf_size, "TAMIL NUMBER ONE THOUSAND");
				break;
			case 0xBF3:
				strcpy_s(buf, buf_size, "TAMIL DAY SIGN");
				break;
			case 0xBF4:
				strcpy_s(buf, buf_size, "TAMIL MONTH SIGN");
				break;
			case 0xBF5:
				strcpy_s(buf, buf_size, "TAMIL YEAR SIGN");
				break;
			case 0xBF6:
				strcpy_s(buf, buf_size, "TAMIL DEBIT SIGN");
				break;
			case 0xBF7:
				strcpy_s(buf, buf_size, "TAMIL CREDIT SIGN");
				break;
			case 0xBF8:
				strcpy_s(buf, buf_size, "TAMIL AS ABOVE SIGN");
				break;
			case 0xBF9:
				strcpy_s(buf, buf_size, "TAMIL RUPEE SIGN");
				break;
			case 0xBFA:
				strcpy_s(buf, buf_size, "TAMIL NUMBER SIGN");
				break;
			case 0xC00:
				strcpy_s(buf, buf_size, "TELUGU SIGN COMBINING CANDRABINDU ABOVE");
				break;
			case 0xC01:
				strcpy_s(buf, buf_size, "TELUGU SIGN CANDRABINDU");
				break;
			case 0xC02:
				strcpy_s(buf, buf_size, "TELUGU SIGN ANUSVARA");
				break;
			case 0xC03:
				strcpy_s(buf, buf_size, "TELUGU SIGN VISARGA");
				break;
			case 0xC04:
				strcpy_s(buf, buf_size, "TELUGU SIGN COMBINING ANUSVARA ABOVE");
				break;
			case 0xC05:
				strcpy_s(buf, buf_size, "TELUGU LETTER A");
				break;
			case 0xC06:
				strcpy_s(buf, buf_size, "TELUGU LETTER AA");
				break;
			case 0xC07:
				strcpy_s(buf, buf_size, "TELUGU LETTER I");
				break;
			case 0xC08:
				strcpy_s(buf, buf_size, "TELUGU LETTER II");
				break;
			case 0xC09:
				strcpy_s(buf, buf_size, "TELUGU LETTER U");
				break;
			case 0xC0A:
				strcpy_s(buf, buf_size, "TELUGU LETTER UU");
				break;
			case 0xC0B:
				strcpy_s(buf, buf_size, "TELUGU LETTER VOCALIC R");
				break;
			case 0xC0C:
				strcpy_s(buf, buf_size, "TELUGU LETTER VOCALIC L");
				break;
			case 0xC0E:
				strcpy_s(buf, buf_size, "TELUGU LETTER E");
				break;
			case 0xC0F:
				strcpy_s(buf, buf_size, "TELUGU LETTER EE");
				break;
			case 0xC10:
				strcpy_s(buf, buf_size, "TELUGU LETTER AI");
				break;
			case 0xC12:
				strcpy_s(buf, buf_size, "TELUGU LETTER O");
				break;
			case 0xC13:
				strcpy_s(buf, buf_size, "TELUGU LETTER OO");
				break;
			case 0xC14:
				strcpy_s(buf, buf_size, "TELUGU LETTER AU");
				break;
			case 0xC15:
				strcpy_s(buf, buf_size, "TELUGU LETTER KA");
				break;
			case 0xC16:
				strcpy_s(buf, buf_size, "TELUGU LETTER KHA");
				break;
			case 0xC17:
				strcpy_s(buf, buf_size, "TELUGU LETTER GA");
				break;
			case 0xC18:
				strcpy_s(buf, buf_size, "TELUGU LETTER GHA");
				break;
			case 0xC19:
				strcpy_s(buf, buf_size, "TELUGU LETTER NGA");
				break;
			case 0xC1A:
				strcpy_s(buf, buf_size, "TELUGU LETTER CA");
				break;
			case 0xC1B:
				strcpy_s(buf, buf_size, "TELUGU LETTER CHA");
				break;
			case 0xC1C:
				strcpy_s(buf, buf_size, "TELUGU LETTER JA");
				break;
			case 0xC1D:
				strcpy_s(buf, buf_size, "TELUGU LETTER JHA");
				break;
			case 0xC1E:
				strcpy_s(buf, buf_size, "TELUGU LETTER NYA");
				break;
			case 0xC1F:
				strcpy_s(buf, buf_size, "TELUGU LETTER TTA");
				break;
			case 0xC20:
				strcpy_s(buf, buf_size, "TELUGU LETTER TTHA");
				break;
			case 0xC21:
				strcpy_s(buf, buf_size, "TELUGU LETTER DDA");
				break;
			case 0xC22:
				strcpy_s(buf, buf_size, "TELUGU LETTER DDHA");
				break;
			case 0xC23:
				strcpy_s(buf, buf_size, "TELUGU LETTER NNA");
				break;
			case 0xC24:
				strcpy_s(buf, buf_size, "TELUGU LETTER TA");
				break;
			case 0xC25:
				strcpy_s(buf, buf_size, "TELUGU LETTER THA");
				break;
			case 0xC26:
				strcpy_s(buf, buf_size, "TELUGU LETTER DA");
				break;
			case 0xC27:
				strcpy_s(buf, buf_size, "TELUGU LETTER DHA");
				break;
			case 0xC28:
				strcpy_s(buf, buf_size, "TELUGU LETTER NA");
				break;
			case 0xC2A:
				strcpy_s(buf, buf_size, "TELUGU LETTER PA");
				break;
			case 0xC2B:
				strcpy_s(buf, buf_size, "TELUGU LETTER PHA");
				break;
			case 0xC2C:
				strcpy_s(buf, buf_size, "TELUGU LETTER BA");
				break;
			case 0xC2D:
				strcpy_s(buf, buf_size, "TELUGU LETTER BHA");
				break;
			case 0xC2E:
				strcpy_s(buf, buf_size, "TELUGU LETTER MA");
				break;
			case 0xC2F:
				strcpy_s(buf, buf_size, "TELUGU LETTER YA");
				break;
			case 0xC30:
				strcpy_s(buf, buf_size, "TELUGU LETTER RA");
				break;
			case 0xC31:
				strcpy_s(buf, buf_size, "TELUGU LETTER RRA");
				break;
			case 0xC32:
				strcpy_s(buf, buf_size, "TELUGU LETTER LA");
				break;
			case 0xC33:
				strcpy_s(buf, buf_size, "TELUGU LETTER LLA");
				break;
			case 0xC34:
				strcpy_s(buf, buf_size, "TELUGU LETTER LLLA");
				break;
			case 0xC35:
				strcpy_s(buf, buf_size, "TELUGU LETTER VA");
				break;
			case 0xC36:
				strcpy_s(buf, buf_size, "TELUGU LETTER SHA");
				break;
			case 0xC37:
				strcpy_s(buf, buf_size, "TELUGU LETTER SSA");
				break;
			case 0xC38:
				strcpy_s(buf, buf_size, "TELUGU LETTER SA");
				break;
			case 0xC39:
				strcpy_s(buf, buf_size, "TELUGU LETTER HA");
				break;
			case 0xC3D:
				strcpy_s(buf, buf_size, "TELUGU SIGN AVAGRAHA");
				break;
			case 0xC3E:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN AA");
				break;
			case 0xC3F:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN I");
				break;
			case 0xC40:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN II");
				break;
			case 0xC41:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN U");
				break;
			case 0xC42:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN UU");
				break;
			case 0xC43:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN VOCALIC R");
				break;
			case 0xC44:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN VOCALIC RR");
				break;
			case 0xC46:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN E");
				break;
			case 0xC47:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN EE");
				break;
			case 0xC48:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN AI");
				break;
			case 0xC4A:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN O");
				break;
			case 0xC4B:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN OO");
				break;
			case 0xC4C:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN AU");
				break;
			case 0xC4D:
				strcpy_s(buf, buf_size, "TELUGU SIGN VIRAMA");
				break;
			case 0xC55:
				strcpy_s(buf, buf_size, "TELUGU LENGTH MARK");
				break;
			case 0xC56:
				strcpy_s(buf, buf_size, "TELUGU AI LENGTH MARK");
				break;
			case 0xC58:
				strcpy_s(buf, buf_size, "TELUGU LETTER TSA");
				break;
			case 0xC59:
				strcpy_s(buf, buf_size, "TELUGU LETTER DZA");
				break;
			case 0xC5A:
				strcpy_s(buf, buf_size, "TELUGU LETTER RRRA");
				break;
			case 0xC60:
				strcpy_s(buf, buf_size, "TELUGU LETTER VOCALIC RR");
				break;
			case 0xC61:
				strcpy_s(buf, buf_size, "TELUGU LETTER VOCALIC LL");
				break;
			case 0xC62:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN VOCALIC L");
				break;
			case 0xC63:
				strcpy_s(buf, buf_size, "TELUGU VOWEL SIGN VOCALIC LL");
				break;
			case 0xC66:
				strcpy_s(buf, buf_size, "TELUGU DIGIT ZERO");
				break;
			case 0xC67:
				strcpy_s(buf, buf_size, "TELUGU DIGIT ONE");
				break;
			case 0xC68:
				strcpy_s(buf, buf_size, "TELUGU DIGIT TWO");
				break;
			case 0xC69:
				strcpy_s(buf, buf_size, "TELUGU DIGIT THREE");
				break;
			case 0xC6A:
				strcpy_s(buf, buf_size, "TELUGU DIGIT FOUR");
				break;
			case 0xC6B:
				strcpy_s(buf, buf_size, "TELUGU DIGIT FIVE");
				break;
			case 0xC6C:
				strcpy_s(buf, buf_size, "TELUGU DIGIT SIX");
				break;
			case 0xC6D:
				strcpy_s(buf, buf_size, "TELUGU DIGIT SEVEN");
				break;
			case 0xC6E:
				strcpy_s(buf, buf_size, "TELUGU DIGIT EIGHT");
				break;
			case 0xC6F:
				strcpy_s(buf, buf_size, "TELUGU DIGIT NINE");
				break;
			case 0xC77:
				strcpy_s(buf, buf_size, "TELUGU SIGN SIDDHAM");
				break;
			case 0xC78:
				strcpy_s(buf, buf_size, "TELUGU FRACTION DIGIT ZERO FOR ODD POWERS OF FOUR");
				break;
			case 0xC79:
				strcpy_s(buf, buf_size, "TELUGU FRACTION DIGIT ONE FOR ODD POWERS OF FOUR");
				break;
			case 0xC7A:
				strcpy_s(buf, buf_size, "TELUGU FRACTION DIGIT TWO FOR ODD POWERS OF FOUR");
				break;
			case 0xC7B:
				strcpy_s(buf, buf_size, "TELUGU FRACTION DIGIT THREE FOR ODD POWERS OF FOUR");
				break;
			case 0xC7C:
				strcpy_s(buf, buf_size, "TELUGU FRACTION DIGIT ONE FOR EVEN POWERS OF FOUR");
				break;
			case 0xC7D:
				strcpy_s(buf, buf_size, "TELUGU FRACTION DIGIT TWO FOR EVEN POWERS OF FOUR");
				break;
			case 0xC7E:
				strcpy_s(buf, buf_size, "TELUGU FRACTION DIGIT THREE FOR EVEN POWERS OF FOUR");
				break;
			case 0xC7F:
				strcpy_s(buf, buf_size, "TELUGU SIGN TUUMU");
				break;
			case 0xC80:
				strcpy_s(buf, buf_size, "KANNADA SIGN SPACING CANDRABINDU");
				break;
			case 0xC81:
				strcpy_s(buf, buf_size, "KANNADA SIGN CANDRABINDU");
				break;
			case 0xC82:
				strcpy_s(buf, buf_size, "KANNADA SIGN ANUSVARA");
				break;
			case 0xC83:
				strcpy_s(buf, buf_size, "KANNADA SIGN VISARGA");
				break;
			case 0xC84:
				strcpy_s(buf, buf_size, "KANNADA SIGN SIDDHAM");
				break;
			case 0xC85:
				strcpy_s(buf, buf_size, "KANNADA LETTER A");
				break;
			case 0xC86:
				strcpy_s(buf, buf_size, "KANNADA LETTER AA");
				break;
			case 0xC87:
				strcpy_s(buf, buf_size, "KANNADA LETTER I");
				break;
			case 0xC88:
				strcpy_s(buf, buf_size, "KANNADA LETTER II");
				break;
			case 0xC89:
				strcpy_s(buf, buf_size, "KANNADA LETTER U");
				break;
			case 0xC8A:
				strcpy_s(buf, buf_size, "KANNADA LETTER UU");
				break;
			case 0xC8B:
				strcpy_s(buf, buf_size, "KANNADA LETTER VOCALIC R");
				break;
			case 0xC8C:
				strcpy_s(buf, buf_size, "KANNADA LETTER VOCALIC L");
				break;
			case 0xC8E:
				strcpy_s(buf, buf_size, "KANNADA LETTER E");
				break;
			case 0xC8F:
				strcpy_s(buf, buf_size, "KANNADA LETTER EE");
				break;
			case 0xC90:
				strcpy_s(buf, buf_size, "KANNADA LETTER AI");
				break;
			case 0xC92:
				strcpy_s(buf, buf_size, "KANNADA LETTER O");
				break;
			case 0xC93:
				strcpy_s(buf, buf_size, "KANNADA LETTER OO");
				break;
			case 0xC94:
				strcpy_s(buf, buf_size, "KANNADA LETTER AU");
				break;
			case 0xC95:
				strcpy_s(buf, buf_size, "KANNADA LETTER KA");
				break;
			case 0xC96:
				strcpy_s(buf, buf_size, "KANNADA LETTER KHA");
				break;
			case 0xC97:
				strcpy_s(buf, buf_size, "KANNADA LETTER GA");
				break;
			case 0xC98:
				strcpy_s(buf, buf_size, "KANNADA LETTER GHA");
				break;
			case 0xC99:
				strcpy_s(buf, buf_size, "KANNADA LETTER NGA");
				break;
			case 0xC9A:
				strcpy_s(buf, buf_size, "KANNADA LETTER CA");
				break;
			case 0xC9B:
				strcpy_s(buf, buf_size, "KANNADA LETTER CHA");
				break;
			case 0xC9C:
				strcpy_s(buf, buf_size, "KANNADA LETTER JA");
				break;
			case 0xC9D:
				strcpy_s(buf, buf_size, "KANNADA LETTER JHA");
				break;
			case 0xC9E:
				strcpy_s(buf, buf_size, "KANNADA LETTER NYA");
				break;
			case 0xC9F:
				strcpy_s(buf, buf_size, "KANNADA LETTER TTA");
				break;
			case 0xCA0:
				strcpy_s(buf, buf_size, "KANNADA LETTER TTHA");
				break;
			case 0xCA1:
				strcpy_s(buf, buf_size, "KANNADA LETTER DDA");
				break;
			case 0xCA2:
				strcpy_s(buf, buf_size, "KANNADA LETTER DDHA");
				break;
			case 0xCA3:
				strcpy_s(buf, buf_size, "KANNADA LETTER NNA");
				break;
			case 0xCA4:
				strcpy_s(buf, buf_size, "KANNADA LETTER TA");
				break;
			case 0xCA5:
				strcpy_s(buf, buf_size, "KANNADA LETTER THA");
				break;
			case 0xCA6:
				strcpy_s(buf, buf_size, "KANNADA LETTER DA");
				break;
			case 0xCA7:
				strcpy_s(buf, buf_size, "KANNADA LETTER DHA");
				break;
			case 0xCA8:
				strcpy_s(buf, buf_size, "KANNADA LETTER NA");
				break;
			case 0xCAA:
				strcpy_s(buf, buf_size, "KANNADA LETTER PA");
				break;
			case 0xCAB:
				strcpy_s(buf, buf_size, "KANNADA LETTER PHA");
				break;
			case 0xCAC:
				strcpy_s(buf, buf_size, "KANNADA LETTER BA");
				break;
			case 0xCAD:
				strcpy_s(buf, buf_size, "KANNADA LETTER BHA");
				break;
			case 0xCAE:
				strcpy_s(buf, buf_size, "KANNADA LETTER MA");
				break;
			case 0xCAF:
				strcpy_s(buf, buf_size, "KANNADA LETTER YA");
				break;
			case 0xCB0:
				strcpy_s(buf, buf_size, "KANNADA LETTER RA");
				break;
			case 0xCB1:
				strcpy_s(buf, buf_size, "KANNADA LETTER RRA");
				break;
			case 0xCB2:
				strcpy_s(buf, buf_size, "KANNADA LETTER LA");
				break;
			case 0xCB3:
				strcpy_s(buf, buf_size, "KANNADA LETTER LLA");
				break;
			case 0xCB5:
				strcpy_s(buf, buf_size, "KANNADA LETTER VA");
				break;
			case 0xCB6:
				strcpy_s(buf, buf_size, "KANNADA LETTER SHA");
				break;
			case 0xCB7:
				strcpy_s(buf, buf_size, "KANNADA LETTER SSA");
				break;
			case 0xCB8:
				strcpy_s(buf, buf_size, "KANNADA LETTER SA");
				break;
			case 0xCB9:
				strcpy_s(buf, buf_size, "KANNADA LETTER HA");
				break;
			case 0xCBC:
				strcpy_s(buf, buf_size, "KANNADA SIGN NUKTA");
				break;
			case 0xCBD:
				strcpy_s(buf, buf_size, "KANNADA SIGN AVAGRAHA");
				break;
			case 0xCBE:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN AA");
				break;
			case 0xCBF:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN I");
				break;
			case 0xCC0:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN II");
				break;
			case 0xCC1:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN U");
				break;
			case 0xCC2:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN UU");
				break;
			case 0xCC3:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN VOCALIC R");
				break;
			case 0xCC4:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN VOCALIC RR");
				break;
			case 0xCC6:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN E");
				break;
			case 0xCC7:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN EE");
				break;
			case 0xCC8:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN AI");
				break;
			case 0xCCA:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN O");
				break;
			case 0xCCB:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN OO");
				break;
			case 0xCCC:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN AU");
				break;
			case 0xCCD:
				strcpy_s(buf, buf_size, "KANNADA SIGN VIRAMA");
				break;
			case 0xCD5:
				strcpy_s(buf, buf_size, "KANNADA LENGTH MARK");
				break;
			case 0xCD6:
				strcpy_s(buf, buf_size, "KANNADA AI LENGTH MARK");
				break;
			case 0xCDE:
				strcpy_s(buf, buf_size, "KANNADA LETTER FA");
				break;
			case 0xCE0:
				strcpy_s(buf, buf_size, "KANNADA LETTER VOCALIC RR");
				break;
			case 0xCE1:
				strcpy_s(buf, buf_size, "KANNADA LETTER VOCALIC LL");
				break;
			case 0xCE2:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN VOCALIC L");
				break;
			case 0xCE3:
				strcpy_s(buf, buf_size, "KANNADA VOWEL SIGN VOCALIC LL");
				break;
			case 0xCE6:
				strcpy_s(buf, buf_size, "KANNADA DIGIT ZERO");
				break;
			case 0xCE7:
				strcpy_s(buf, buf_size, "KANNADA DIGIT ONE");
				break;
			case 0xCE8:
				strcpy_s(buf, buf_size, "KANNADA DIGIT TWO");
				break;
			case 0xCE9:
				strcpy_s(buf, buf_size, "KANNADA DIGIT THREE");
				break;
			case 0xCEA:
				strcpy_s(buf, buf_size, "KANNADA DIGIT FOUR");
				break;
			case 0xCEB:
				strcpy_s(buf, buf_size, "KANNADA DIGIT FIVE");
				break;
			case 0xCEC:
				strcpy_s(buf, buf_size, "KANNADA DIGIT SIX");
				break;
			case 0xCED:
				strcpy_s(buf, buf_size, "KANNADA DIGIT SEVEN");
				break;
			case 0xCEE:
				strcpy_s(buf, buf_size, "KANNADA DIGIT EIGHT");
				break;
			case 0xCEF:
				strcpy_s(buf, buf_size, "KANNADA DIGIT NINE");
				break;
			case 0xCF1:
				strcpy_s(buf, buf_size, "KANNADA SIGN JIHVAMULIYA");
				break;
			case 0xCF2:
				strcpy_s(buf, buf_size, "KANNADA SIGN UPADHMANIYA");
				break;
			case 0xD00:
				strcpy_s(buf, buf_size, "MALAYALAM SIGN COMBINING ANUSVARA ABOVE");
				break;
			case 0xD01:
				strcpy_s(buf, buf_size, "MALAYALAM SIGN CANDRABINDU");
				break;
			case 0xD02:
				strcpy_s(buf, buf_size, "MALAYALAM SIGN ANUSVARA");
				break;
			case 0xD03:
				strcpy_s(buf, buf_size, "MALAYALAM SIGN VISARGA");
				break;
			case 0xD04:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER VEDIC ANUSVARA");
				break;
			case 0xD05:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER A");
				break;
			case 0xD06:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER AA");
				break;
			case 0xD07:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER I");
				break;
			case 0xD08:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER II");
				break;
			case 0xD09:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER U");
				break;
			case 0xD0A:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER UU");
				break;
			case 0xD0B:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER VOCALIC R");
				break;
			case 0xD0C:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER VOCALIC L");
				break;
			case 0xD0E:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER E");
				break;
			case 0xD0F:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER EE");
				break;
			case 0xD10:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER AI");
				break;
			case 0xD12:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER O");
				break;
			case 0xD13:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER OO");
				break;
			case 0xD14:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER AU");
				break;
			case 0xD15:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER KA");
				break;
			case 0xD16:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER KHA");
				break;
			case 0xD17:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER GA");
				break;
			case 0xD18:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER GHA");
				break;
			case 0xD19:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER NGA");
				break;
			case 0xD1A:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CA");
				break;
			case 0xD1B:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CHA");
				break;
			case 0xD1C:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER JA");
				break;
			case 0xD1D:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER JHA");
				break;
			case 0xD1E:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER NYA");
				break;
			case 0xD1F:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER TTA");
				break;
			case 0xD20:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER TTHA");
				break;
			case 0xD21:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER DDA");
				break;
			case 0xD22:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER DDHA");
				break;
			case 0xD23:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER NNA");
				break;
			case 0xD24:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER TA");
				break;
			case 0xD25:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER THA");
				break;
			case 0xD26:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER DA");
				break;
			case 0xD27:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER DHA");
				break;
			case 0xD28:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER NA");
				break;
			case 0xD29:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER NNNA");
				break;
			case 0xD2A:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER PA");
				break;
			case 0xD2B:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER PHA");
				break;
			case 0xD2C:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER BA");
				break;
			case 0xD2D:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER BHA");
				break;
			case 0xD2E:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER MA");
				break;
			case 0xD2F:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER YA");
				break;
			case 0xD30:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER RA");
				break;
			case 0xD31:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER RRA");
				break;
			case 0xD32:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER LA");
				break;
			case 0xD33:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER LLA");
				break;
			case 0xD34:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER LLLA");
				break;
			case 0xD35:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER VA");
				break;
			case 0xD36:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER SHA");
				break;
			case 0xD37:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER SSA");
				break;
			case 0xD38:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER SA");
				break;
			case 0xD39:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER HA");
				break;
			case 0xD3A:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER TTTA");
				break;
			case 0xD3B:
				strcpy_s(buf, buf_size, "MALAYALAM SIGN VERTICAL BAR VIRAMA");
				break;
			case 0xD3C:
				strcpy_s(buf, buf_size, "MALAYALAM SIGN CIRCULAR VIRAMA");
				break;
			case 0xD3D:
				strcpy_s(buf, buf_size, "MALAYALAM SIGN AVAGRAHA");
				break;
			case 0xD3E:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN AA");
				break;
			case 0xD3F:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN I");
				break;
			case 0xD40:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN II");
				break;
			case 0xD41:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN U");
				break;
			case 0xD42:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN UU");
				break;
			case 0xD43:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN VOCALIC R");
				break;
			case 0xD44:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN VOCALIC RR");
				break;
			case 0xD46:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN E");
				break;
			case 0xD47:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN EE");
				break;
			case 0xD48:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN AI");
				break;
			case 0xD4A:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN O");
				break;
			case 0xD4B:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN OO");
				break;
			case 0xD4C:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN AU");
				break;
			case 0xD4D:
				strcpy_s(buf, buf_size, "MALAYALAM SIGN VIRAMA");
				break;
			case 0xD4E:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER DOT REPH");
				break;
			case 0xD4F:
				strcpy_s(buf, buf_size, "MALAYALAM SIGN PARA");
				break;
			case 0xD54:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CHILLU M");
				break;
			case 0xD55:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CHILLU Y");
				break;
			case 0xD56:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CHILLU LLL");
				break;
			case 0xD57:
				strcpy_s(buf, buf_size, "MALAYALAM AU LENGTH MARK");
				break;
			case 0xD58:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION ONE ONE-HUNDRED-AND-SIXTIETH");
				break;
			case 0xD59:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION ONE FORTIETH");
				break;
			case 0xD5A:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION THREE EIGHTIETHS");
				break;
			case 0xD5B:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION ONE TWENTIETH");
				break;
			case 0xD5C:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION ONE TENTH");
				break;
			case 0xD5D:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION THREE TWENTIETHS");
				break;
			case 0xD5E:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION ONE FIFTH");
				break;
			case 0xD5F:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER ARCHAIC II");
				break;
			case 0xD60:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER VOCALIC RR");
				break;
			case 0xD61:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER VOCALIC LL");
				break;
			case 0xD62:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN VOCALIC L");
				break;
			case 0xD63:
				strcpy_s(buf, buf_size, "MALAYALAM VOWEL SIGN VOCALIC LL");
				break;
			case 0xD66:
				strcpy_s(buf, buf_size, "MALAYALAM DIGIT ZERO");
				break;
			case 0xD67:
				strcpy_s(buf, buf_size, "MALAYALAM DIGIT ONE");
				break;
			case 0xD68:
				strcpy_s(buf, buf_size, "MALAYALAM DIGIT TWO");
				break;
			case 0xD69:
				strcpy_s(buf, buf_size, "MALAYALAM DIGIT THREE");
				break;
			case 0xD6A:
				strcpy_s(buf, buf_size, "MALAYALAM DIGIT FOUR");
				break;
			case 0xD6B:
				strcpy_s(buf, buf_size, "MALAYALAM DIGIT FIVE");
				break;
			case 0xD6C:
				strcpy_s(buf, buf_size, "MALAYALAM DIGIT SIX");
				break;
			case 0xD6D:
				strcpy_s(buf, buf_size, "MALAYALAM DIGIT SEVEN");
				break;
			case 0xD6E:
				strcpy_s(buf, buf_size, "MALAYALAM DIGIT EIGHT");
				break;
			case 0xD6F:
				strcpy_s(buf, buf_size, "MALAYALAM DIGIT NINE");
				break;
			case 0xD70:
				strcpy_s(buf, buf_size, "MALAYALAM NUMBER TEN");
				break;
			case 0xD71:
				strcpy_s(buf, buf_size, "MALAYALAM NUMBER ONE HUNDRED");
				break;
			case 0xD72:
				strcpy_s(buf, buf_size, "MALAYALAM NUMBER ONE THOUSAND");
				break;
			case 0xD73:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION ONE QUARTER");
				break;
			case 0xD74:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION ONE HALF");
				break;
			case 0xD75:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION THREE QUARTERS");
				break;
			case 0xD76:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION ONE SIXTEENTH");
				break;
			case 0xD77:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION ONE EIGHTH");
				break;
			case 0xD78:
				strcpy_s(buf, buf_size, "MALAYALAM FRACTION THREE SIXTEENTHS");
				break;
			case 0xD79:
				strcpy_s(buf, buf_size, "MALAYALAM DATE MARK");
				break;
			case 0xD7A:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CHILLU NN");
				break;
			case 0xD7B:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CHILLU N");
				break;
			case 0xD7C:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CHILLU RR");
				break;
			case 0xD7D:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CHILLU L");
				break;
			case 0xD7E:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CHILLU LL");
				break;
			case 0xD7F:
				strcpy_s(buf, buf_size, "MALAYALAM LETTER CHILLU K");
				break;
			case 0xD81:
				strcpy_s(buf, buf_size, "SINHALA SIGN CANDRABINDU");
				break;
			case 0xD82:
				strcpy_s(buf, buf_size, "SINHALA SIGN ANUSVARAYA");
				break;
			case 0xD83:
				strcpy_s(buf, buf_size, "SINHALA SIGN VISARGAYA");
				break;
			case 0xD85:
				strcpy_s(buf, buf_size, "SINHALA LETTER AYANNA");
				break;
			case 0xD86:
				strcpy_s(buf, buf_size, "SINHALA LETTER AAYANNA");
				break;
			case 0xD87:
				strcpy_s(buf, buf_size, "SINHALA LETTER AEYANNA");
				break;
			case 0xD88:
				strcpy_s(buf, buf_size, "SINHALA LETTER AEEYANNA");
				break;
			case 0xD89:
				strcpy_s(buf, buf_size, "SINHALA LETTER IYANNA");
				break;
			case 0xD8A:
				strcpy_s(buf, buf_size, "SINHALA LETTER IIYANNA");
				break;
			case 0xD8B:
				strcpy_s(buf, buf_size, "SINHALA LETTER UYANNA");
				break;
			case 0xD8C:
				strcpy_s(buf, buf_size, "SINHALA LETTER UUYANNA");
				break;
			case 0xD8D:
				strcpy_s(buf, buf_size, "SINHALA LETTER IRUYANNA");
				break;
			case 0xD8E:
				strcpy_s(buf, buf_size, "SINHALA LETTER IRUUYANNA");
				break;
			case 0xD8F:
				strcpy_s(buf, buf_size, "SINHALA LETTER ILUYANNA");
				break;
			case 0xD90:
				strcpy_s(buf, buf_size, "SINHALA LETTER ILUUYANNA");
				break;
			case 0xD91:
				strcpy_s(buf, buf_size, "SINHALA LETTER EYANNA");
				break;
			case 0xD92:
				strcpy_s(buf, buf_size, "SINHALA LETTER EEYANNA");
				break;
			case 0xD93:
				strcpy_s(buf, buf_size, "SINHALA LETTER AIYANNA");
				break;
			case 0xD94:
				strcpy_s(buf, buf_size, "SINHALA LETTER OYANNA");
				break;
			case 0xD95:
				strcpy_s(buf, buf_size, "SINHALA LETTER OOYANNA");
				break;
			case 0xD96:
				strcpy_s(buf, buf_size, "SINHALA LETTER AUYANNA");
				break;
			case 0xD9A:
				strcpy_s(buf, buf_size, "SINHALA LETTER ALPAPRAANA KAYANNA");
				break;
			case 0xD9B:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAHAAPRAANA KAYANNA");
				break;
			case 0xD9C:
				strcpy_s(buf, buf_size, "SINHALA LETTER ALPAPRAANA GAYANNA");
				break;
			case 0xD9D:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAHAAPRAANA GAYANNA");
				break;
			case 0xD9E:
				strcpy_s(buf, buf_size, "SINHALA LETTER KANTAJA NAASIKYAYA");
				break;
			case 0xD9F:
				strcpy_s(buf, buf_size, "SINHALA LETTER SANYAKA GAYANNA");
				break;
			case 0xDA0:
				strcpy_s(buf, buf_size, "SINHALA LETTER ALPAPRAANA CAYANNA");
				break;
			case 0xDA1:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAHAAPRAANA CAYANNA");
				break;
			case 0xDA2:
				strcpy_s(buf, buf_size, "SINHALA LETTER ALPAPRAANA JAYANNA");
				break;
			case 0xDA3:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAHAAPRAANA JAYANNA");
				break;
			case 0xDA4:
				strcpy_s(buf, buf_size, "SINHALA LETTER TAALUJA NAASIKYAYA");
				break;
			case 0xDA5:
				strcpy_s(buf, buf_size, "SINHALA LETTER TAALUJA SANYOOGA NAAKSIKYAYA");
				break;
			case 0xDA6:
				strcpy_s(buf, buf_size, "SINHALA LETTER SANYAKA JAYANNA");
				break;
			case 0xDA7:
				strcpy_s(buf, buf_size, "SINHALA LETTER ALPAPRAANA TTAYANNA");
				break;
			case 0xDA8:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAHAAPRAANA TTAYANNA");
				break;
			case 0xDA9:
				strcpy_s(buf, buf_size, "SINHALA LETTER ALPAPRAANA DDAYANNA");
				break;
			case 0xDAA:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAHAAPRAANA DDAYANNA");
				break;
			case 0xDAB:
				strcpy_s(buf, buf_size, "SINHALA LETTER MUURDHAJA NAYANNA");
				break;
			case 0xDAC:
				strcpy_s(buf, buf_size, "SINHALA LETTER SANYAKA DDAYANNA");
				break;
			case 0xDAD:
				strcpy_s(buf, buf_size, "SINHALA LETTER ALPAPRAANA TAYANNA");
				break;
			case 0xDAE:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAHAAPRAANA TAYANNA");
				break;
			case 0xDAF:
				strcpy_s(buf, buf_size, "SINHALA LETTER ALPAPRAANA DAYANNA");
				break;
			case 0xDB0:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAHAAPRAANA DAYANNA");
				break;
			case 0xDB1:
				strcpy_s(buf, buf_size, "SINHALA LETTER DANTAJA NAYANNA");
				break;
			case 0xDB3:
				strcpy_s(buf, buf_size, "SINHALA LETTER SANYAKA DAYANNA");
				break;
			case 0xDB4:
				strcpy_s(buf, buf_size, "SINHALA LETTER ALPAPRAANA PAYANNA");
				break;
			case 0xDB5:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAHAAPRAANA PAYANNA");
				break;
			case 0xDB6:
				strcpy_s(buf, buf_size, "SINHALA LETTER ALPAPRAANA BAYANNA");
				break;
			case 0xDB7:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAHAAPRAANA BAYANNA");
				break;
			case 0xDB8:
				strcpy_s(buf, buf_size, "SINHALA LETTER MAYANNA");
				break;
			case 0xDB9:
				strcpy_s(buf, buf_size, "SINHALA LETTER AMBA BAYANNA");
				break;
			case 0xDBA:
				strcpy_s(buf, buf_size, "SINHALA LETTER YAYANNA");
				break;
			case 0xDBB:
				strcpy_s(buf, buf_size, "SINHALA LETTER RAYANNA");
				break;
			case 0xDBD:
				strcpy_s(buf, buf_size, "SINHALA LETTER DANTAJA LAYANNA");
				break;
			case 0xDC0:
				strcpy_s(buf, buf_size, "SINHALA LETTER VAYANNA");
				break;
			case 0xDC1:
				strcpy_s(buf, buf_size, "SINHALA LETTER TAALUJA SAYANNA");
				break;
			case 0xDC2:
				strcpy_s(buf, buf_size, "SINHALA LETTER MUURDHAJA SAYANNA");
				break;
			case 0xDC3:
				strcpy_s(buf, buf_size, "SINHALA LETTER DANTAJA SAYANNA");
				break;
			case 0xDC4:
				strcpy_s(buf, buf_size, "SINHALA LETTER HAYANNA");
				break;
			case 0xDC5:
				strcpy_s(buf, buf_size, "SINHALA LETTER MUURDHAJA LAYANNA");
				break;
			case 0xDC6:
				strcpy_s(buf, buf_size, "SINHALA LETTER FAYANNA");
				break;
			case 0xDCA:
				strcpy_s(buf, buf_size, "SINHALA SIGN AL-LAKUNA");
				break;
			case 0xDCF:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN AELA-PILLA");
				break;
			case 0xDD0:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN KETTI AEDA-PILLA");
				break;
			case 0xDD1:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN DIGA AEDA-PILLA");
				break;
			case 0xDD2:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN KETTI IS-PILLA");
				break;
			case 0xDD3:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN DIGA IS-PILLA");
				break;
			case 0xDD4:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN KETTI PAA-PILLA");
				break;
			case 0xDD6:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN DIGA PAA-PILLA");
				break;
			case 0xDD8:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN GAETTA-PILLA");
				break;
			case 0xDD9:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN KOMBUVA");
				break;
			case 0xDDA:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN DIGA KOMBUVA");
				break;
			case 0xDDB:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN KOMBU DEKA");
				break;
			case 0xDDC:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN KOMBUVA HAA AELA-PILLA");
				break;
			case 0xDDD:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN KOMBUVA HAA DIGA AELA-PILLA");
				break;
			case 0xDDE:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA");
				break;
			case 0xDDF:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN GAYANUKITTA");
				break;
			case 0xDE6:
				strcpy_s(buf, buf_size, "SINHALA LITH DIGIT ZERO");
				break;
			case 0xDE7:
				strcpy_s(buf, buf_size, "SINHALA LITH DIGIT ONE");
				break;
			case 0xDE8:
				strcpy_s(buf, buf_size, "SINHALA LITH DIGIT TWO");
				break;
			case 0xDE9:
				strcpy_s(buf, buf_size, "SINHALA LITH DIGIT THREE");
				break;
			case 0xDEA:
				strcpy_s(buf, buf_size, "SINHALA LITH DIGIT FOUR");
				break;
			case 0xDEB:
				strcpy_s(buf, buf_size, "SINHALA LITH DIGIT FIVE");
				break;
			case 0xDEC:
				strcpy_s(buf, buf_size, "SINHALA LITH DIGIT SIX");
				break;
			case 0xDED:
				strcpy_s(buf, buf_size, "SINHALA LITH DIGIT SEVEN");
				break;
			case 0xDEE:
				strcpy_s(buf, buf_size, "SINHALA LITH DIGIT EIGHT");
				break;
			case 0xDEF:
				strcpy_s(buf, buf_size, "SINHALA LITH DIGIT NINE");
				break;
			case 0xDF2:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN DIGA GAETTA-PILLA");
				break;
			case 0xDF3:
				strcpy_s(buf, buf_size, "SINHALA VOWEL SIGN DIGA GAYANUKITTA");
				break;
			case 0xDF4:
				strcpy_s(buf, buf_size, "SINHALA PUNCTUATION KUNDDALIYA");
				break;
			case 0xE01:
				strcpy_s(buf, buf_size, "THAI CHARACTER KO KAI");
				break;
			case 0xE02:
				strcpy_s(buf, buf_size, "THAI CHARACTER KHO KHAI");
				break;
			case 0xE03:
				strcpy_s(buf, buf_size, "THAI CHARACTER KHO KHUAT");
				break;
			case 0xE04:
				strcpy_s(buf, buf_size, "THAI CHARACTER KHO KHWAI");
				break;
			case 0xE05:
				strcpy_s(buf, buf_size, "THAI CHARACTER KHO KHON");
				break;
			case 0xE06:
				strcpy_s(buf, buf_size, "THAI CHARACTER KHO RAKHANG");
				break;
			case 0xE07:
				strcpy_s(buf, buf_size, "THAI CHARACTER NGO NGU");
				break;
			case 0xE08:
				strcpy_s(buf, buf_size, "THAI CHARACTER CHO CHAN");
				break;
			case 0xE09:
				strcpy_s(buf, buf_size, "THAI CHARACTER CHO CHING");
				break;
			case 0xE0A:
				strcpy_s(buf, buf_size, "THAI CHARACTER CHO CHANG");
				break;
			case 0xE0B:
				strcpy_s(buf, buf_size, "THAI CHARACTER SO SO");
				break;
			case 0xE0C:
				strcpy_s(buf, buf_size, "THAI CHARACTER CHO CHOE");
				break;
			case 0xE0D:
				strcpy_s(buf, buf_size, "THAI CHARACTER YO YING");
				break;
			case 0xE0E:
				strcpy_s(buf, buf_size, "THAI CHARACTER DO CHADA");
				break;
			case 0xE0F:
				strcpy_s(buf, buf_size, "THAI CHARACTER TO PATAK");
				break;
			case 0xE10:
				strcpy_s(buf, buf_size, "THAI CHARACTER THO THAN");
				break;
			case 0xE11:
				strcpy_s(buf, buf_size, "THAI CHARACTER THO NANGMONTHO");
				break;
			case 0xE12:
				strcpy_s(buf, buf_size, "THAI CHARACTER THO PHUTHAO");
				break;
			case 0xE13:
				strcpy_s(buf, buf_size, "THAI CHARACTER NO NEN");
				break;
			case 0xE14:
				strcpy_s(buf, buf_size, "THAI CHARACTER DO DEK");
				break;
			case 0xE15:
				strcpy_s(buf, buf_size, "THAI CHARACTER TO TAO");
				break;
			case 0xE16:
				strcpy_s(buf, buf_size, "THAI CHARACTER THO THUNG");
				break;
			case 0xE17:
				strcpy_s(buf, buf_size, "THAI CHARACTER THO THAHAN");
				break;
			case 0xE18:
				strcpy_s(buf, buf_size, "THAI CHARACTER THO THONG");
				break;
			case 0xE19:
				strcpy_s(buf, buf_size, "THAI CHARACTER NO NU");
				break;
			case 0xE1A:
				strcpy_s(buf, buf_size, "THAI CHARACTER BO BAIMAI");
				break;
			case 0xE1B:
				strcpy_s(buf, buf_size, "THAI CHARACTER PO PLA");
				break;
			case 0xE1C:
				strcpy_s(buf, buf_size, "THAI CHARACTER PHO PHUNG");
				break;
			case 0xE1D:
				strcpy_s(buf, buf_size, "THAI CHARACTER FO FA");
				break;
			case 0xE1E:
				strcpy_s(buf, buf_size, "THAI CHARACTER PHO PHAN");
				break;
			case 0xE1F:
				strcpy_s(buf, buf_size, "THAI CHARACTER FO FAN");
				break;
			case 0xE20:
				strcpy_s(buf, buf_size, "THAI CHARACTER PHO SAMPHAO");
				break;
			case 0xE21:
				strcpy_s(buf, buf_size, "THAI CHARACTER MO MA");
				break;
			case 0xE22:
				strcpy_s(buf, buf_size, "THAI CHARACTER YO YAK");
				break;
			case 0xE23:
				strcpy_s(buf, buf_size, "THAI CHARACTER RO RUA");
				break;
			case 0xE24:
				strcpy_s(buf, buf_size, "THAI CHARACTER RU");
				break;
			case 0xE25:
				strcpy_s(buf, buf_size, "THAI CHARACTER LO LING");
				break;
			case 0xE26:
				strcpy_s(buf, buf_size, "THAI CHARACTER LU");
				break;
			case 0xE27:
				strcpy_s(buf, buf_size, "THAI CHARACTER WO WAEN");
				break;
			case 0xE28:
				strcpy_s(buf, buf_size, "THAI CHARACTER SO SALA");
				break;
			case 0xE29:
				strcpy_s(buf, buf_size, "THAI CHARACTER SO RUSI");
				break;
			case 0xE2A:
				strcpy_s(buf, buf_size, "THAI CHARACTER SO SUA");
				break;
			case 0xE2B:
				strcpy_s(buf, buf_size, "THAI CHARACTER HO HIP");
				break;
			case 0xE2C:
				strcpy_s(buf, buf_size, "THAI CHARACTER LO CHULA");
				break;
			case 0xE2D:
				strcpy_s(buf, buf_size, "THAI CHARACTER O ANG");
				break;
			case 0xE2E:
				strcpy_s(buf, buf_size, "THAI CHARACTER HO NOKHUK");
				break;
			case 0xE2F:
				strcpy_s(buf, buf_size, "THAI CHARACTER PAIYANNOI");
				break;
			case 0xE30:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA A");
				break;
			case 0xE31:
				strcpy_s(buf, buf_size, "THAI CHARACTER MAI HAN-AKAT");
				break;
			case 0xE32:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA AA");
				break;
			case 0xE33:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA AM");
				break;
			case 0xE34:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA I");
				break;
			case 0xE35:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA II");
				break;
			case 0xE36:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA UE");
				break;
			case 0xE37:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA UEE");
				break;
			case 0xE38:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA U");
				break;
			case 0xE39:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA UU");
				break;
			case 0xE3A:
				strcpy_s(buf, buf_size, "THAI CHARACTER PHINTHU");
				break;
			case 0xE3F:
				strcpy_s(buf, buf_size, "THAI CURRENCY SYMBOL BAHT");
				break;
			case 0xE40:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA E");
				break;
			case 0xE41:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA AE");
				break;
			case 0xE42:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA O");
				break;
			case 0xE43:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA AI MAIMUAN");
				break;
			case 0xE44:
				strcpy_s(buf, buf_size, "THAI CHARACTER SARA AI MAIMALAI");
				break;
			case 0xE45:
				strcpy_s(buf, buf_size, "THAI CHARACTER LAKKHANGYAO");
				break;
			case 0xE46:
				strcpy_s(buf, buf_size, "THAI CHARACTER MAIYAMOK");
				break;
			case 0xE47:
				strcpy_s(buf, buf_size, "THAI CHARACTER MAITAIKHU");
				break;
			case 0xE48:
				strcpy_s(buf, buf_size, "THAI CHARACTER MAI EK");
				break;
			case 0xE49:
				strcpy_s(buf, buf_size, "THAI CHARACTER MAI THO");
				break;
			case 0xE4A:
				strcpy_s(buf, buf_size, "THAI CHARACTER MAI TRI");
				break;
			case 0xE4B:
				strcpy_s(buf, buf_size, "THAI CHARACTER MAI CHATTAWA");
				break;
			case 0xE4C:
				strcpy_s(buf, buf_size, "THAI CHARACTER THANTHAKHAT");
				break;
			case 0xE4D:
				strcpy_s(buf, buf_size, "THAI CHARACTER NIKHAHIT");
				break;
			case 0xE4E:
				strcpy_s(buf, buf_size, "THAI CHARACTER YAMAKKAN");
				break;
			case 0xE4F:
				strcpy_s(buf, buf_size, "THAI CHARACTER FONGMAN");
				break;
			case 0xE50:
				strcpy_s(buf, buf_size, "THAI DIGIT ZERO");
				break;
			case 0xE51:
				strcpy_s(buf, buf_size, "THAI DIGIT ONE");
				break;
			case 0xE52:
				strcpy_s(buf, buf_size, "THAI DIGIT TWO");
				break;
			case 0xE53:
				strcpy_s(buf, buf_size, "THAI DIGIT THREE");
				break;
			case 0xE54:
				strcpy_s(buf, buf_size, "THAI DIGIT FOUR");
				break;
			case 0xE55:
				strcpy_s(buf, buf_size, "THAI DIGIT FIVE");
				break;
			case 0xE56:
				strcpy_s(buf, buf_size, "THAI DIGIT SIX");
				break;
			case 0xE57:
				strcpy_s(buf, buf_size, "THAI DIGIT SEVEN");
				break;
			case 0xE58:
				strcpy_s(buf, buf_size, "THAI DIGIT EIGHT");
				break;
			case 0xE59:
				strcpy_s(buf, buf_size, "THAI DIGIT NINE");
				break;
			case 0xE5A:
				strcpy_s(buf, buf_size, "THAI CHARACTER ANGKHANKHU");
				break;
			case 0xE5B:
				strcpy_s(buf, buf_size, "THAI CHARACTER KHOMUT");
				break;
			case 0xE81:
				strcpy_s(buf, buf_size, "LAO LETTER KO");
				break;
			case 0xE82:
				strcpy_s(buf, buf_size, "LAO LETTER KHO SUNG");
				break;
			case 0xE84:
				strcpy_s(buf, buf_size, "LAO LETTER KHO TAM");
				break;
			case 0xE86:
				strcpy_s(buf, buf_size, "LAO LETTER PALI GHA");
				break;
			case 0xE87:
				strcpy_s(buf, buf_size, "LAO LETTER NGO");
				break;
			case 0xE88:
				strcpy_s(buf, buf_size, "LAO LETTER CO");
				break;
			case 0xE89:
				strcpy_s(buf, buf_size, "LAO LETTER PALI CHA");
				break;
			case 0xE8A:
				strcpy_s(buf, buf_size, "LAO LETTER SO TAM");
				break;
			case 0xE8C:
				strcpy_s(buf, buf_size, "LAO LETTER PALI JHA");
				break;
			case 0xE8D:
				strcpy_s(buf, buf_size, "LAO LETTER NYO");
				break;
			case 0xE8E:
				strcpy_s(buf, buf_size, "LAO LETTER PALI NYA");
				break;
			case 0xE8F:
				strcpy_s(buf, buf_size, "LAO LETTER PALI TTA");
				break;
			case 0xE90:
				strcpy_s(buf, buf_size, "LAO LETTER PALI TTHA");
				break;
			case 0xE91:
				strcpy_s(buf, buf_size, "LAO LETTER PALI DDA");
				break;
			case 0xE92:
				strcpy_s(buf, buf_size, "LAO LETTER PALI DDHA");
				break;
			case 0xE93:
				strcpy_s(buf, buf_size, "LAO LETTER PALI NNA");
				break;
			case 0xE94:
				strcpy_s(buf, buf_size, "LAO LETTER DO");
				break;
			case 0xE95:
				strcpy_s(buf, buf_size, "LAO LETTER TO");
				break;
			case 0xE96:
				strcpy_s(buf, buf_size, "LAO LETTER THO SUNG");
				break;
			case 0xE97:
				strcpy_s(buf, buf_size, "LAO LETTER THO TAM");
				break;
			case 0xE98:
				strcpy_s(buf, buf_size, "LAO LETTER PALI DHA");
				break;
			case 0xE99:
				strcpy_s(buf, buf_size, "LAO LETTER NO");
				break;
			case 0xE9A:
				strcpy_s(buf, buf_size, "LAO LETTER BO");
				break;
			case 0xE9B:
				strcpy_s(buf, buf_size, "LAO LETTER PO");
				break;
			case 0xE9C:
				strcpy_s(buf, buf_size, "LAO LETTER PHO SUNG");
				break;
			case 0xE9D:
				strcpy_s(buf, buf_size, "LAO LETTER FO TAM");
				break;
			case 0xE9E:
				strcpy_s(buf, buf_size, "LAO LETTER PHO TAM");
				break;
			case 0xE9F:
				strcpy_s(buf, buf_size, "LAO LETTER FO SUNG");
				break;
			case 0xEA0:
				strcpy_s(buf, buf_size, "LAO LETTER PALI BHA");
				break;
			case 0xEA1:
				strcpy_s(buf, buf_size, "LAO LETTER MO");
				break;
			case 0xEA2:
				strcpy_s(buf, buf_size, "LAO LETTER YO");
				break;
			case 0xEA3:
				strcpy_s(buf, buf_size, "LAO LETTER LO LING");
				break;
			case 0xEA5:
				strcpy_s(buf, buf_size, "LAO LETTER LO LOOT");
				break;
			case 0xEA7:
				strcpy_s(buf, buf_size, "LAO LETTER WO");
				break;
			case 0xEA8:
				strcpy_s(buf, buf_size, "LAO LETTER SANSKRIT SHA");
				break;
			case 0xEA9:
				strcpy_s(buf, buf_size, "LAO LETTER SANSKRIT SSA");
				break;
			case 0xEAA:
				strcpy_s(buf, buf_size, "LAO LETTER SO SUNG");
				break;
			case 0xEAB:
				strcpy_s(buf, buf_size, "LAO LETTER HO SUNG");
				break;
			case 0xEAC:
				strcpy_s(buf, buf_size, "LAO LETTER PALI LLA");
				break;
			case 0xEAD:
				strcpy_s(buf, buf_size, "LAO LETTER O");
				break;
			case 0xEAE:
				strcpy_s(buf, buf_size, "LAO LETTER HO TAM");
				break;
			case 0xEAF:
				strcpy_s(buf, buf_size, "LAO ELLIPSIS");
				break;
			case 0xEB0:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN A");
				break;
			case 0xEB1:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN MAI KAN");
				break;
			case 0xEB2:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN AA");
				break;
			case 0xEB3:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN AM");
				break;
			case 0xEB4:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN I");
				break;
			case 0xEB5:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN II");
				break;
			case 0xEB6:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN Y");
				break;
			case 0xEB7:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN YY");
				break;
			case 0xEB8:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN U");
				break;
			case 0xEB9:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN UU");
				break;
			case 0xEBA:
				strcpy_s(buf, buf_size, "LAO SIGN PALI VIRAMA");
				break;
			case 0xEBB:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN MAI KON");
				break;
			case 0xEBC:
				strcpy_s(buf, buf_size, "LAO SEMIVOWEL SIGN LO");
				break;
			case 0xEBD:
				strcpy_s(buf, buf_size, "LAO SEMIVOWEL SIGN NYO");
				break;
			case 0xEC0:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN E");
				break;
			case 0xEC1:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN EI");
				break;
			case 0xEC2:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN O");
				break;
			case 0xEC3:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN AY");
				break;
			case 0xEC4:
				strcpy_s(buf, buf_size, "LAO VOWEL SIGN AI");
				break;
			case 0xEC6:
				strcpy_s(buf, buf_size, "LAO KO LA");
				break;
			case 0xEC8:
				strcpy_s(buf, buf_size, "LAO TONE MAI EK");
				break;
			case 0xEC9:
				strcpy_s(buf, buf_size, "LAO TONE MAI THO");
				break;
			case 0xECA:
				strcpy_s(buf, buf_size, "LAO TONE MAI TI");
				break;
			case 0xECB:
				strcpy_s(buf, buf_size, "LAO TONE MAI CATAWA");
				break;
			case 0xECC:
				strcpy_s(buf, buf_size, "LAO CANCELLATION MARK");
				break;
			case 0xECD:
				strcpy_s(buf, buf_size, "LAO NIGGAHITA");
				break;
			case 0xED0:
				strcpy_s(buf, buf_size, "LAO DIGIT ZERO");
				break;
			case 0xED1:
				strcpy_s(buf, buf_size, "LAO DIGIT ONE");
				break;
			case 0xED2:
				strcpy_s(buf, buf_size, "LAO DIGIT TWO");
				break;
			case 0xED3:
				strcpy_s(buf, buf_size, "LAO DIGIT THREE");
				break;
			case 0xED4:
				strcpy_s(buf, buf_size, "LAO DIGIT FOUR");
				break;
			case 0xED5:
				strcpy_s(buf, buf_size, "LAO DIGIT FIVE");
				break;
			case 0xED6:
				strcpy_s(buf, buf_size, "LAO DIGIT SIX");
				break;
			case 0xED7:
				strcpy_s(buf, buf_size, "LAO DIGIT SEVEN");
				break;
			case 0xED8:
				strcpy_s(buf, buf_size, "LAO DIGIT EIGHT");
				break;
			case 0xED9:
				strcpy_s(buf, buf_size, "LAO DIGIT NINE");
				break;
			case 0xEDC:
				strcpy_s(buf, buf_size, "LAO HO NO");
				break;
			case 0xEDD:
				strcpy_s(buf, buf_size, "LAO HO MO");
				break;
			case 0xEDE:
				strcpy_s(buf, buf_size, "LAO LETTER KHMU GO");
				break;
			case 0xEDF:
				strcpy_s(buf, buf_size, "LAO LETTER KHMU NYO");
				break;
			case 0xF00:
				strcpy_s(buf, buf_size, "TIBETAN SYLLABLE OM");
				break;
			case 0xF01:
				strcpy_s(buf, buf_size, "TIBETAN MARK GTER YIG MGO TRUNCATED A");
				break;
			case 0xF02:
				strcpy_s(buf, buf_size, "TIBETAN MARK GTER YIG MGO -UM RNAM BCAD MA");
				break;
			case 0xF03:
				strcpy_s(buf, buf_size, "TIBETAN MARK GTER YIG MGO -UM GTER TSHEG MA");
				break;
			case 0xF04:
				strcpy_s(buf, buf_size, "TIBETAN MARK INITIAL YIG MGO MDUN MA");
				break;
			case 0xF05:
				strcpy_s(buf, buf_size, "TIBETAN MARK CLOSING YIG MGO SGAB MA");
				break;
			case 0xF06:
				strcpy_s(buf, buf_size, "TIBETAN MARK CARET YIG MGO PHUR SHAD MA");
				break;
			case 0xF07:
				strcpy_s(buf, buf_size, "TIBETAN MARK YIG MGO TSHEG SHAD MA");
				break;
			case 0xF08:
				strcpy_s(buf, buf_size, "TIBETAN MARK SBRUL SHAD");
				break;
			case 0xF09:
				strcpy_s(buf, buf_size, "TIBETAN MARK BSKUR YIG MGO");
				break;
			case 0xF0A:
				strcpy_s(buf, buf_size, "TIBETAN MARK BKA- SHOG YIG MGO");
				break;
			case 0xF0B:
				strcpy_s(buf, buf_size, "TIBETAN MARK INTERSYLLABIC TSHEG");
				break;
			case 0xF0C:
				strcpy_s(buf, buf_size, "TIBETAN MARK DELIMITER TSHEG BSTAR");
				break;
			case 0xF0D:
				strcpy_s(buf, buf_size, "TIBETAN MARK SHAD");
				break;
			case 0xF0E:
				strcpy_s(buf, buf_size, "TIBETAN MARK NYIS SHAD");
				break;
			case 0xF0F:
				strcpy_s(buf, buf_size, "TIBETAN MARK TSHEG SHAD");
				break;
			case 0xF10:
				strcpy_s(buf, buf_size, "TIBETAN MARK NYIS TSHEG SHAD");
				break;
			case 0xF11:
				strcpy_s(buf, buf_size, "TIBETAN MARK RIN CHEN SPUNGS SHAD");
				break;
			case 0xF12:
				strcpy_s(buf, buf_size, "TIBETAN MARK RGYA GRAM SHAD");
				break;
			case 0xF13:
				strcpy_s(buf, buf_size, "TIBETAN MARK CARET -DZUD RTAGS ME LONG CAN");
				break;
			case 0xF14:
				strcpy_s(buf, buf_size, "TIBETAN MARK GTER TSHEG");
				break;
			case 0xF15:
				strcpy_s(buf, buf_size, "TIBETAN LOGOTYPE SIGN CHAD RTAGS");
				break;
			case 0xF16:
				strcpy_s(buf, buf_size, "TIBETAN LOGOTYPE SIGN LHAG RTAGS");
				break;
			case 0xF17:
				strcpy_s(buf, buf_size, "TIBETAN ASTROLOGICAL SIGN SGRA GCAN -CHAR RTAGS");
				break;
			case 0xF18:
				strcpy_s(buf, buf_size, "TIBETAN ASTROLOGICAL SIGN -KHYUD PA");
				break;
			case 0xF19:
				strcpy_s(buf, buf_size, "TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS");
				break;
			case 0xF1A:
				strcpy_s(buf, buf_size, "TIBETAN SIGN RDEL DKAR GCIG");
				break;
			case 0xF1B:
				strcpy_s(buf, buf_size, "TIBETAN SIGN RDEL DKAR GNYIS");
				break;
			case 0xF1C:
				strcpy_s(buf, buf_size, "TIBETAN SIGN RDEL DKAR GSUM");
				break;
			case 0xF1D:
				strcpy_s(buf, buf_size, "TIBETAN SIGN RDEL NAG GCIG");
				break;
			case 0xF1E:
				strcpy_s(buf, buf_size, "TIBETAN SIGN RDEL NAG GNYIS");
				break;
			case 0xF1F:
				strcpy_s(buf, buf_size, "TIBETAN SIGN RDEL DKAR RDEL NAG");
				break;
			case 0xF20:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT ZERO");
				break;
			case 0xF21:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT ONE");
				break;
			case 0xF22:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT TWO");
				break;
			case 0xF23:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT THREE");
				break;
			case 0xF24:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT FOUR");
				break;
			case 0xF25:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT FIVE");
				break;
			case 0xF26:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT SIX");
				break;
			case 0xF27:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT SEVEN");
				break;
			case 0xF28:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT EIGHT");
				break;
			case 0xF29:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT NINE");
				break;
			case 0xF2A:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT HALF ONE");
				break;
			case 0xF2B:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT HALF TWO");
				break;
			case 0xF2C:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT HALF THREE");
				break;
			case 0xF2D:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT HALF FOUR");
				break;
			case 0xF2E:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT HALF FIVE");
				break;
			case 0xF2F:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT HALF SIX");
				break;
			case 0xF30:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT HALF SEVEN");
				break;
			case 0xF31:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT HALF EIGHT");
				break;
			case 0xF32:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT HALF NINE");
				break;
			case 0xF33:
				strcpy_s(buf, buf_size, "TIBETAN DIGIT HALF ZERO");
				break;
			case 0xF34:
				strcpy_s(buf, buf_size, "TIBETAN MARK BSDUS RTAGS");
				break;
			case 0xF35:
				strcpy_s(buf, buf_size, "TIBETAN MARK NGAS BZUNG NYI ZLA");
				break;
			case 0xF36:
				strcpy_s(buf, buf_size, "TIBETAN MARK CARET -DZUD RTAGS BZHI MIG CAN");
				break;
			case 0xF37:
				strcpy_s(buf, buf_size, "TIBETAN MARK NGAS BZUNG SGOR RTAGS");
				break;
			case 0xF38:
				strcpy_s(buf, buf_size, "TIBETAN MARK CHE MGO");
				break;
			case 0xF39:
				strcpy_s(buf, buf_size, "TIBETAN MARK TSA -PHRU");
				break;
			case 0xF3A:
				strcpy_s(buf, buf_size, "TIBETAN MARK GUG RTAGS GYON");
				break;
			case 0xF3B:
				strcpy_s(buf, buf_size, "TIBETAN MARK GUG RTAGS GYAS");
				break;
			case 0xF3C:
				strcpy_s(buf, buf_size, "TIBETAN MARK ANG KHANG GYON");
				break;
			case 0xF3D:
				strcpy_s(buf, buf_size, "TIBETAN MARK ANG KHANG GYAS");
				break;
			case 0xF3E:
				strcpy_s(buf, buf_size, "TIBETAN SIGN YAR TSHES");
				break;
			case 0xF3F:
				strcpy_s(buf, buf_size, "TIBETAN SIGN MAR TSHES");
				break;
			case 0xF40:
				strcpy_s(buf, buf_size, "TIBETAN LETTER KA");
				break;
			case 0xF41:
				strcpy_s(buf, buf_size, "TIBETAN LETTER KHA");
				break;
			case 0xF42:
				strcpy_s(buf, buf_size, "TIBETAN LETTER GA");
				break;
			case 0xF43:
				strcpy_s(buf, buf_size, "TIBETAN LETTER GHA");
				break;
			case 0xF44:
				strcpy_s(buf, buf_size, "TIBETAN LETTER NGA");
				break;
			case 0xF45:
				strcpy_s(buf, buf_size, "TIBETAN LETTER CA");
				break;
			case 0xF46:
				strcpy_s(buf, buf_size, "TIBETAN LETTER CHA");
				break;
			case 0xF47:
				strcpy_s(buf, buf_size, "TIBETAN LETTER JA");
				break;
			case 0xF49:
				strcpy_s(buf, buf_size, "TIBETAN LETTER NYA");
				break;
			case 0xF4A:
				strcpy_s(buf, buf_size, "TIBETAN LETTER TTA");
				break;
			case 0xF4B:
				strcpy_s(buf, buf_size, "TIBETAN LETTER TTHA");
				break;
			case 0xF4C:
				strcpy_s(buf, buf_size, "TIBETAN LETTER DDA");
				break;
			case 0xF4D:
				strcpy_s(buf, buf_size, "TIBETAN LETTER DDHA");
				break;
			case 0xF4E:
				strcpy_s(buf, buf_size, "TIBETAN LETTER NNA");
				break;
			case 0xF4F:
				strcpy_s(buf, buf_size, "TIBETAN LETTER TA");
				break;
			case 0xF50:
				strcpy_s(buf, buf_size, "TIBETAN LETTER THA");
				break;
			case 0xF51:
				strcpy_s(buf, buf_size, "TIBETAN LETTER DA");
				break;
			case 0xF52:
				strcpy_s(buf, buf_size, "TIBETAN LETTER DHA");
				break;
			case 0xF53:
				strcpy_s(buf, buf_size, "TIBETAN LETTER NA");
				break;
			case 0xF54:
				strcpy_s(buf, buf_size, "TIBETAN LETTER PA");
				break;
			case 0xF55:
				strcpy_s(buf, buf_size, "TIBETAN LETTER PHA");
				break;
			case 0xF56:
				strcpy_s(buf, buf_size, "TIBETAN LETTER BA");
				break;
			case 0xF57:
				strcpy_s(buf, buf_size, "TIBETAN LETTER BHA");
				break;
			case 0xF58:
				strcpy_s(buf, buf_size, "TIBETAN LETTER MA");
				break;
			case 0xF59:
				strcpy_s(buf, buf_size, "TIBETAN LETTER TSA");
				break;
			case 0xF5A:
				strcpy_s(buf, buf_size, "TIBETAN LETTER TSHA");
				break;
			case 0xF5B:
				strcpy_s(buf, buf_size, "TIBETAN LETTER DZA");
				break;
			case 0xF5C:
				strcpy_s(buf, buf_size, "TIBETAN LETTER DZHA");
				break;
			case 0xF5D:
				strcpy_s(buf, buf_size, "TIBETAN LETTER WA");
				break;
			case 0xF5E:
				strcpy_s(buf, buf_size, "TIBETAN LETTER ZHA");
				break;
			case 0xF5F:
				strcpy_s(buf, buf_size, "TIBETAN LETTER ZA");
				break;
			case 0xF60:
				strcpy_s(buf, buf_size, "TIBETAN LETTER -A");
				break;
			case 0xF61:
				strcpy_s(buf, buf_size, "TIBETAN LETTER YA");
				break;
			case 0xF62:
				strcpy_s(buf, buf_size, "TIBETAN LETTER RA");
				break;
			case 0xF63:
				strcpy_s(buf, buf_size, "TIBETAN LETTER LA");
				break;
			case 0xF64:
				strcpy_s(buf, buf_size, "TIBETAN LETTER SHA");
				break;
			case 0xF65:
				strcpy_s(buf, buf_size, "TIBETAN LETTER SSA");
				break;
			case 0xF66:
				strcpy_s(buf, buf_size, "TIBETAN LETTER SA");
				break;
			case 0xF67:
				strcpy_s(buf, buf_size, "TIBETAN LETTER HA");
				break;
			case 0xF68:
				strcpy_s(buf, buf_size, "TIBETAN LETTER A");
				break;
			case 0xF69:
				strcpy_s(buf, buf_size, "TIBETAN LETTER KSSA");
				break;
			case 0xF6A:
				strcpy_s(buf, buf_size, "TIBETAN LETTER FIXED-FORM RA");
				break;
			case 0xF6B:
				strcpy_s(buf, buf_size, "TIBETAN LETTER KKA");
				break;
			case 0xF6C:
				strcpy_s(buf, buf_size, "TIBETAN LETTER RRA");
				break;
			case 0xF71:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN AA");
				break;
			case 0xF72:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN I");
				break;
			case 0xF73:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN II");
				break;
			case 0xF74:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN U");
				break;
			case 0xF75:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN UU");
				break;
			case 0xF76:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN VOCALIC R");
				break;
			case 0xF77:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN VOCALIC RR");
				break;
			case 0xF78:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN VOCALIC L");
				break;
			case 0xF79:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN VOCALIC LL");
				break;
			case 0xF7A:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN E");
				break;
			case 0xF7B:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN EE");
				break;
			case 0xF7C:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN O");
				break;
			case 0xF7D:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN OO");
				break;
			case 0xF7E:
				strcpy_s(buf, buf_size, "TIBETAN SIGN RJES SU NGA RO");
				break;
			case 0xF7F:
				strcpy_s(buf, buf_size, "TIBETAN SIGN RNAM BCAD");
				break;
			case 0xF80:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN REVERSED I");
				break;
			case 0xF81:
				strcpy_s(buf, buf_size, "TIBETAN VOWEL SIGN REVERSED II");
				break;
			case 0xF82:
				strcpy_s(buf, buf_size, "TIBETAN SIGN NYI ZLA NAA DA");
				break;
			case 0xF83:
				strcpy_s(buf, buf_size, "TIBETAN SIGN SNA LDAN");
				break;
			case 0xF84:
				strcpy_s(buf, buf_size, "TIBETAN MARK HALANTA");
				break;
			case 0xF85:
				strcpy_s(buf, buf_size, "TIBETAN MARK PALUTA");
				break;
			case 0xF86:
				strcpy_s(buf, buf_size, "TIBETAN SIGN LCI RTAGS");
				break;
			case 0xF87:
				strcpy_s(buf, buf_size, "TIBETAN SIGN YANG RTAGS");
				break;
			case 0xF88:
				strcpy_s(buf, buf_size, "TIBETAN SIGN LCE TSA CAN");
				break;
			case 0xF89:
				strcpy_s(buf, buf_size, "TIBETAN SIGN MCHU CAN");
				break;
			case 0xF8A:
				strcpy_s(buf, buf_size, "TIBETAN SIGN GRU CAN RGYINGS");
				break;
			case 0xF8B:
				strcpy_s(buf, buf_size, "TIBETAN SIGN GRU MED RGYINGS");
				break;
			case 0xF8C:
				strcpy_s(buf, buf_size, "TIBETAN SIGN INVERTED MCHU CAN");
				break;
			case 0xF8D:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED SIGN LCE TSA CAN");
				break;
			case 0xF8E:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED SIGN MCHU CAN");
				break;
			case 0xF8F:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED SIGN INVERTED MCHU CAN");
				break;
			case 0xF90:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER KA");
				break;
			case 0xF91:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER KHA");
				break;
			case 0xF92:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER GA");
				break;
			case 0xF93:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER GHA");
				break;
			case 0xF94:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER NGA");
				break;
			case 0xF95:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER CA");
				break;
			case 0xF96:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER CHA");
				break;
			case 0xF97:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER JA");
				break;
			case 0xF99:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER NYA");
				break;
			case 0xF9A:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER TTA");
				break;
			case 0xF9B:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER TTHA");
				break;
			case 0xF9C:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER DDA");
				break;
			case 0xF9D:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER DDHA");
				break;
			case 0xF9E:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER NNA");
				break;
			case 0xF9F:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER TA");
				break;
			case 0xFA0:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER THA");
				break;
			case 0xFA1:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER DA");
				break;
			case 0xFA2:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER DHA");
				break;
			case 0xFA3:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER NA");
				break;
			case 0xFA4:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER PA");
				break;
			case 0xFA5:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER PHA");
				break;
			case 0xFA6:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER BA");
				break;
			case 0xFA7:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER BHA");
				break;
			case 0xFA8:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER MA");
				break;
			case 0xFA9:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER TSA");
				break;
			case 0xFAA:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER TSHA");
				break;
			case 0xFAB:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER DZA");
				break;
			case 0xFAC:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER DZHA");
				break;
			case 0xFAD:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER WA");
				break;
			case 0xFAE:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER ZHA");
				break;
			case 0xFAF:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER ZA");
				break;
			case 0xFB0:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER -A");
				break;
			case 0xFB1:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER YA");
				break;
			case 0xFB2:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER RA");
				break;
			case 0xFB3:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER LA");
				break;
			case 0xFB4:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER SHA");
				break;
			case 0xFB5:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER SSA");
				break;
			case 0xFB6:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER SA");
				break;
			case 0xFB7:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER HA");
				break;
			case 0xFB8:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER A");
				break;
			case 0xFB9:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER KSSA");
				break;
			case 0xFBA:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER FIXED-FORM WA");
				break;
			case 0xFBB:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER FIXED-FORM YA");
				break;
			case 0xFBC:
				strcpy_s(buf, buf_size, "TIBETAN SUBJOINED LETTER FIXED-FORM RA");
				break;
			case 0xFBE:
				strcpy_s(buf, buf_size, "TIBETAN KU RU KHA");
				break;
			case 0xFBF:
				strcpy_s(buf, buf_size, "TIBETAN KU RU KHA BZHI MIG CAN");
				break;
			case 0xFC0:
				strcpy_s(buf, buf_size, "TIBETAN CANTILLATION SIGN HEAVY BEAT");
				break;
			case 0xFC1:
				strcpy_s(buf, buf_size, "TIBETAN CANTILLATION SIGN LIGHT BEAT");
				break;
			case 0xFC2:
				strcpy_s(buf, buf_size, "TIBETAN CANTILLATION SIGN CANG TE-U");
				break;
			case 0xFC3:
				strcpy_s(buf, buf_size, "TIBETAN CANTILLATION SIGN SBUB -CHAL");
				break;
			case 0xFC4:
				strcpy_s(buf, buf_size, "TIBETAN SYMBOL DRIL BU");
				break;
			case 0xFC5:
				strcpy_s(buf, buf_size, "TIBETAN SYMBOL RDO RJE");
				break;
			case 0xFC6:
				strcpy_s(buf, buf_size, "TIBETAN SYMBOL PADMA GDAN");
				break;
			case 0xFC7:
				strcpy_s(buf, buf_size, "TIBETAN SYMBOL RDO RJE RGYA GRAM");
				break;
			case 0xFC8:
				strcpy_s(buf, buf_size, "TIBETAN SYMBOL PHUR PA");
				break;
			case 0xFC9:
				strcpy_s(buf, buf_size, "TIBETAN SYMBOL NOR BU");
				break;
			case 0xFCA:
				strcpy_s(buf, buf_size, "TIBETAN SYMBOL NOR BU NYIS -KHYIL");
				break;
			case 0xFCB:
				strcpy_s(buf, buf_size, "TIBETAN SYMBOL NOR BU GSUM -KHYIL");
				break;
			case 0xFCC:
				strcpy_s(buf, buf_size, "TIBETAN SYMBOL NOR BU BZHI -KHYIL");
				break;
			case 0xFCE:
				strcpy_s(buf, buf_size, "TIBETAN SIGN RDEL NAG RDEL DKAR");
				break;
			case 0xFCF:
				strcpy_s(buf, buf_size, "TIBETAN SIGN RDEL NAG GSUM");
				break;
			case 0xFD0:
				strcpy_s(buf, buf_size, "TIBETAN MARK BSKA- SHOG GI MGO RGYAN");
				break;
			case 0xFD1:
				strcpy_s(buf, buf_size, "TIBETAN MARK MNYAM YIG GI MGO RGYAN");
				break;
			case 0xFD2:
				strcpy_s(buf, buf_size, "TIBETAN MARK NYIS TSHEG");
				break;
			case 0xFD3:
				strcpy_s(buf, buf_size, "TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA");
				break;
			case 0xFD4:
				strcpy_s(buf, buf_size, "TIBETAN MARK CLOSING BRDA RNYING YIG MGO SGAB MA");
				break;
			case 0xFD5:
				strcpy_s(buf, buf_size, "RIGHT-FACING SVASTI SIGN");
				break;
			case 0xFD6:
				strcpy_s(buf, buf_size, "LEFT-FACING SVASTI SIGN");
				break;
			case 0xFD7:
				strcpy_s(buf, buf_size, "RIGHT-FACING SVASTI SIGN WITH DOTS");
				break;
			case 0xFD8:
				strcpy_s(buf, buf_size, "LEFT-FACING SVASTI SIGN WITH DOTS");
				break;
			case 0xFD9:
				strcpy_s(buf, buf_size, "TIBETAN MARK LEADING MCHAN RTAGS");
				break;
			case 0xFDA:
				strcpy_s(buf, buf_size, "TIBETAN MARK TRAILING MCHAN RTAGS");
				break;
			case 0x1000:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KA");
				break;
			case 0x1001:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHA");
				break;
			case 0x1002:
				strcpy_s(buf, buf_size, "MYANMAR LETTER GA");
				break;
			case 0x1003:
				strcpy_s(buf, buf_size, "MYANMAR LETTER GHA");
				break;
			case 0x1004:
				strcpy_s(buf, buf_size, "MYANMAR LETTER NGA");
				break;
			case 0x1005:
				strcpy_s(buf, buf_size, "MYANMAR LETTER CA");
				break;
			case 0x1006:
				strcpy_s(buf, buf_size, "MYANMAR LETTER CHA");
				break;
			case 0x1007:
				strcpy_s(buf, buf_size, "MYANMAR LETTER JA");
				break;
			case 0x1008:
				strcpy_s(buf, buf_size, "MYANMAR LETTER JHA");
				break;
			case 0x1009:
				strcpy_s(buf, buf_size, "MYANMAR LETTER NYA");
				break;
			case 0x100A:
				strcpy_s(buf, buf_size, "MYANMAR LETTER NNYA");
				break;
			case 0x100B:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TTA");
				break;
			case 0x100C:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TTHA");
				break;
			case 0x100D:
				strcpy_s(buf, buf_size, "MYANMAR LETTER DDA");
				break;
			case 0x100E:
				strcpy_s(buf, buf_size, "MYANMAR LETTER DDHA");
				break;
			case 0x100F:
				strcpy_s(buf, buf_size, "MYANMAR LETTER NNA");
				break;
			case 0x1010:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TA");
				break;
			case 0x1011:
				strcpy_s(buf, buf_size, "MYANMAR LETTER THA");
				break;
			case 0x1012:
				strcpy_s(buf, buf_size, "MYANMAR LETTER DA");
				break;
			case 0x1013:
				strcpy_s(buf, buf_size, "MYANMAR LETTER DHA");
				break;
			case 0x1014:
				strcpy_s(buf, buf_size, "MYANMAR LETTER NA");
				break;
			case 0x1015:
				strcpy_s(buf, buf_size, "MYANMAR LETTER PA");
				break;
			case 0x1016:
				strcpy_s(buf, buf_size, "MYANMAR LETTER PHA");
				break;
			case 0x1017:
				strcpy_s(buf, buf_size, "MYANMAR LETTER BA");
				break;
			case 0x1018:
				strcpy_s(buf, buf_size, "MYANMAR LETTER BHA");
				break;
			case 0x1019:
				strcpy_s(buf, buf_size, "MYANMAR LETTER MA");
				break;
			case 0x101A:
				strcpy_s(buf, buf_size, "MYANMAR LETTER YA");
				break;
			case 0x101B:
				strcpy_s(buf, buf_size, "MYANMAR LETTER RA");
				break;
			case 0x101C:
				strcpy_s(buf, buf_size, "MYANMAR LETTER LA");
				break;
			case 0x101D:
				strcpy_s(buf, buf_size, "MYANMAR LETTER WA");
				break;
			case 0x101E:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SA");
				break;
			case 0x101F:
				strcpy_s(buf, buf_size, "MYANMAR LETTER HA");
				break;
			case 0x1020:
				strcpy_s(buf, buf_size, "MYANMAR LETTER LLA");
				break;
			case 0x1021:
				strcpy_s(buf, buf_size, "MYANMAR LETTER A");
				break;
			case 0x1022:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN A");
				break;
			case 0x1023:
				strcpy_s(buf, buf_size, "MYANMAR LETTER I");
				break;
			case 0x1024:
				strcpy_s(buf, buf_size, "MYANMAR LETTER II");
				break;
			case 0x1025:
				strcpy_s(buf, buf_size, "MYANMAR LETTER U");
				break;
			case 0x1026:
				strcpy_s(buf, buf_size, "MYANMAR LETTER UU");
				break;
			case 0x1027:
				strcpy_s(buf, buf_size, "MYANMAR LETTER E");
				break;
			case 0x1028:
				strcpy_s(buf, buf_size, "MYANMAR LETTER MON E");
				break;
			case 0x1029:
				strcpy_s(buf, buf_size, "MYANMAR LETTER O");
				break;
			case 0x102A:
				strcpy_s(buf, buf_size, "MYANMAR LETTER AU");
				break;
			case 0x102B:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN TALL AA");
				break;
			case 0x102C:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN AA");
				break;
			case 0x102D:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN I");
				break;
			case 0x102E:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN II");
				break;
			case 0x102F:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN U");
				break;
			case 0x1030:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN UU");
				break;
			case 0x1031:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN E");
				break;
			case 0x1032:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN AI");
				break;
			case 0x1033:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN MON II");
				break;
			case 0x1034:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN MON O");
				break;
			case 0x1035:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN E ABOVE");
				break;
			case 0x1036:
				strcpy_s(buf, buf_size, "MYANMAR SIGN ANUSVARA");
				break;
			case 0x1037:
				strcpy_s(buf, buf_size, "MYANMAR SIGN DOT BELOW");
				break;
			case 0x1038:
				strcpy_s(buf, buf_size, "MYANMAR SIGN VISARGA");
				break;
			case 0x1039:
				strcpy_s(buf, buf_size, "MYANMAR SIGN VIRAMA");
				break;
			case 0x103A:
				strcpy_s(buf, buf_size, "MYANMAR SIGN ASAT");
				break;
			case 0x103B:
				strcpy_s(buf, buf_size, "MYANMAR CONSONANT SIGN MEDIAL YA");
				break;
			case 0x103C:
				strcpy_s(buf, buf_size, "MYANMAR CONSONANT SIGN MEDIAL RA");
				break;
			case 0x103D:
				strcpy_s(buf, buf_size, "MYANMAR CONSONANT SIGN MEDIAL WA");
				break;
			case 0x103E:
				strcpy_s(buf, buf_size, "MYANMAR CONSONANT SIGN MEDIAL HA");
				break;
			case 0x103F:
				strcpy_s(buf, buf_size, "MYANMAR LETTER GREAT SA");
				break;
			case 0x1040:
				strcpy_s(buf, buf_size, "MYANMAR DIGIT ZERO");
				break;
			case 0x1041:
				strcpy_s(buf, buf_size, "MYANMAR DIGIT ONE");
				break;
			case 0x1042:
				strcpy_s(buf, buf_size, "MYANMAR DIGIT TWO");
				break;
			case 0x1043:
				strcpy_s(buf, buf_size, "MYANMAR DIGIT THREE");
				break;
			case 0x1044:
				strcpy_s(buf, buf_size, "MYANMAR DIGIT FOUR");
				break;
			case 0x1045:
				strcpy_s(buf, buf_size, "MYANMAR DIGIT FIVE");
				break;
			case 0x1046:
				strcpy_s(buf, buf_size, "MYANMAR DIGIT SIX");
				break;
			case 0x1047:
				strcpy_s(buf, buf_size, "MYANMAR DIGIT SEVEN");
				break;
			case 0x1048:
				strcpy_s(buf, buf_size, "MYANMAR DIGIT EIGHT");
				break;
			case 0x1049:
				strcpy_s(buf, buf_size, "MYANMAR DIGIT NINE");
				break;
			case 0x104A:
				strcpy_s(buf, buf_size, "MYANMAR SIGN LITTLE SECTION");
				break;
			case 0x104B:
				strcpy_s(buf, buf_size, "MYANMAR SIGN SECTION");
				break;
			case 0x104C:
				strcpy_s(buf, buf_size, "MYANMAR SYMBOL LOCATIVE");
				break;
			case 0x104D:
				strcpy_s(buf, buf_size, "MYANMAR SYMBOL COMPLETED");
				break;
			case 0x104E:
				strcpy_s(buf, buf_size, "MYANMAR SYMBOL AFOREMENTIONED");
				break;
			case 0x104F:
				strcpy_s(buf, buf_size, "MYANMAR SYMBOL GENITIVE");
				break;
			case 0x1050:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHA");
				break;
			case 0x1051:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SSA");
				break;
			case 0x1052:
				strcpy_s(buf, buf_size, "MYANMAR LETTER VOCALIC R");
				break;
			case 0x1053:
				strcpy_s(buf, buf_size, "MYANMAR LETTER VOCALIC RR");
				break;
			case 0x1054:
				strcpy_s(buf, buf_size, "MYANMAR LETTER VOCALIC L");
				break;
			case 0x1055:
				strcpy_s(buf, buf_size, "MYANMAR LETTER VOCALIC LL");
				break;
			case 0x1056:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN VOCALIC R");
				break;
			case 0x1057:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN VOCALIC RR");
				break;
			case 0x1058:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN VOCALIC L");
				break;
			case 0x1059:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN VOCALIC LL");
				break;
			case 0x105A:
				strcpy_s(buf, buf_size, "MYANMAR LETTER MON NGA");
				break;
			case 0x105B:
				strcpy_s(buf, buf_size, "MYANMAR LETTER MON JHA");
				break;
			case 0x105C:
				strcpy_s(buf, buf_size, "MYANMAR LETTER MON BBA");
				break;
			case 0x105D:
				strcpy_s(buf, buf_size, "MYANMAR LETTER MON BBE");
				break;
			case 0x105E:
				strcpy_s(buf, buf_size, "MYANMAR CONSONANT SIGN MON MEDIAL NA");
				break;
			case 0x105F:
				strcpy_s(buf, buf_size, "MYANMAR CONSONANT SIGN MON MEDIAL MA");
				break;
			case 0x1060:
				strcpy_s(buf, buf_size, "MYANMAR CONSONANT SIGN MON MEDIAL LA");
				break;
			case 0x1061:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SGAW KAREN SHA");
				break;
			case 0x1062:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN SGAW KAREN EU");
				break;
			case 0x1063:
				strcpy_s(buf, buf_size, "MYANMAR TONE MARK SGAW KAREN HATHI");
				break;
			case 0x1064:
				strcpy_s(buf, buf_size, "MYANMAR TONE MARK SGAW KAREN KE PHO");
				break;
			case 0x1065:
				strcpy_s(buf, buf_size, "MYANMAR LETTER WESTERN PWO KAREN THA");
				break;
			case 0x1066:
				strcpy_s(buf, buf_size, "MYANMAR LETTER WESTERN PWO KAREN PWA");
				break;
			case 0x1067:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN WESTERN PWO KAREN EU");
				break;
			case 0x1068:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN WESTERN PWO KAREN UE");
				break;
			case 0x1069:
				strcpy_s(buf, buf_size, "MYANMAR SIGN WESTERN PWO KAREN TONE-1");
				break;
			case 0x106A:
				strcpy_s(buf, buf_size, "MYANMAR SIGN WESTERN PWO KAREN TONE-2");
				break;
			case 0x106B:
				strcpy_s(buf, buf_size, "MYANMAR SIGN WESTERN PWO KAREN TONE-3");
				break;
			case 0x106C:
				strcpy_s(buf, buf_size, "MYANMAR SIGN WESTERN PWO KAREN TONE-4");
				break;
			case 0x106D:
				strcpy_s(buf, buf_size, "MYANMAR SIGN WESTERN PWO KAREN TONE-5");
				break;
			case 0x106E:
				strcpy_s(buf, buf_size, "MYANMAR LETTER EASTERN PWO KAREN NNA");
				break;
			case 0x106F:
				strcpy_s(buf, buf_size, "MYANMAR LETTER EASTERN PWO KAREN YWA");
				break;
			case 0x1070:
				strcpy_s(buf, buf_size, "MYANMAR LETTER EASTERN PWO KAREN GHWA");
				break;
			case 0x1071:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN GEBA KAREN I");
				break;
			case 0x1072:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN KAYAH OE");
				break;
			case 0x1073:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN KAYAH U");
				break;
			case 0x1074:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN KAYAH EE");
				break;
			case 0x1075:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN KA");
				break;
			case 0x1076:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN KHA");
				break;
			case 0x1077:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN GA");
				break;
			case 0x1078:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN CA");
				break;
			case 0x1079:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN ZA");
				break;
			case 0x107A:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN NYA");
				break;
			case 0x107B:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN DA");
				break;
			case 0x107C:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN NA");
				break;
			case 0x107D:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN PHA");
				break;
			case 0x107E:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN FA");
				break;
			case 0x107F:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN BA");
				break;
			case 0x1080:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN THA");
				break;
			case 0x1081:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN HA");
				break;
			case 0x1082:
				strcpy_s(buf, buf_size, "MYANMAR CONSONANT SIGN SHAN MEDIAL WA");
				break;
			case 0x1083:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN SHAN AA");
				break;
			case 0x1084:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN SHAN E");
				break;
			case 0x1085:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN SHAN E ABOVE");
				break;
			case 0x1086:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN SHAN FINAL Y");
				break;
			case 0x1087:
				strcpy_s(buf, buf_size, "MYANMAR SIGN SHAN TONE-2");
				break;
			case 0x1088:
				strcpy_s(buf, buf_size, "MYANMAR SIGN SHAN TONE-3");
				break;
			case 0x1089:
				strcpy_s(buf, buf_size, "MYANMAR SIGN SHAN TONE-5");
				break;
			case 0x108A:
				strcpy_s(buf, buf_size, "MYANMAR SIGN SHAN TONE-6");
				break;
			case 0x108B:
				strcpy_s(buf, buf_size, "MYANMAR SIGN SHAN COUNCIL TONE-2");
				break;
			case 0x108C:
				strcpy_s(buf, buf_size, "MYANMAR SIGN SHAN COUNCIL TONE-3");
				break;
			case 0x108D:
				strcpy_s(buf, buf_size, "MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE");
				break;
			case 0x108E:
				strcpy_s(buf, buf_size, "MYANMAR LETTER RUMAI PALAUNG FA");
				break;
			case 0x108F:
				strcpy_s(buf, buf_size, "MYANMAR SIGN RUMAI PALAUNG TONE-5");
				break;
			case 0x1090:
				strcpy_s(buf, buf_size, "MYANMAR SHAN DIGIT ZERO");
				break;
			case 0x1091:
				strcpy_s(buf, buf_size, "MYANMAR SHAN DIGIT ONE");
				break;
			case 0x1092:
				strcpy_s(buf, buf_size, "MYANMAR SHAN DIGIT TWO");
				break;
			case 0x1093:
				strcpy_s(buf, buf_size, "MYANMAR SHAN DIGIT THREE");
				break;
			case 0x1094:
				strcpy_s(buf, buf_size, "MYANMAR SHAN DIGIT FOUR");
				break;
			case 0x1095:
				strcpy_s(buf, buf_size, "MYANMAR SHAN DIGIT FIVE");
				break;
			case 0x1096:
				strcpy_s(buf, buf_size, "MYANMAR SHAN DIGIT SIX");
				break;
			case 0x1097:
				strcpy_s(buf, buf_size, "MYANMAR SHAN DIGIT SEVEN");
				break;
			case 0x1098:
				strcpy_s(buf, buf_size, "MYANMAR SHAN DIGIT EIGHT");
				break;
			case 0x1099:
				strcpy_s(buf, buf_size, "MYANMAR SHAN DIGIT NINE");
				break;
			case 0x109A:
				strcpy_s(buf, buf_size, "MYANMAR SIGN KHAMTI TONE-1");
				break;
			case 0x109B:
				strcpy_s(buf, buf_size, "MYANMAR SIGN KHAMTI TONE-3");
				break;
			case 0x109C:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN AITON A");
				break;
			case 0x109D:
				strcpy_s(buf, buf_size, "MYANMAR VOWEL SIGN AITON AI");
				break;
			case 0x109E:
				strcpy_s(buf, buf_size, "MYANMAR SYMBOL SHAN ONE");
				break;
			case 0x109F:
				strcpy_s(buf, buf_size, "MYANMAR SYMBOL SHAN EXCLAMATION");
				break;
			case 0x10A0:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER AN");
				break;
			case 0x10A1:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER BAN");
				break;
			case 0x10A2:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER GAN");
				break;
			case 0x10A3:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER DON");
				break;
			case 0x10A4:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER EN");
				break;
			case 0x10A5:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER VIN");
				break;
			case 0x10A6:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER ZEN");
				break;
			case 0x10A7:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER TAN");
				break;
			case 0x10A8:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER IN");
				break;
			case 0x10A9:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER KAN");
				break;
			case 0x10AA:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER LAS");
				break;
			case 0x10AB:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER MAN");
				break;
			case 0x10AC:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER NAR");
				break;
			case 0x10AD:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER ON");
				break;
			case 0x10AE:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER PAR");
				break;
			case 0x10AF:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER ZHAR");
				break;
			case 0x10B0:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER RAE");
				break;
			case 0x10B1:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER SAN");
				break;
			case 0x10B2:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER TAR");
				break;
			case 0x10B3:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER UN");
				break;
			case 0x10B4:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER PHAR");
				break;
			case 0x10B5:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER KHAR");
				break;
			case 0x10B6:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER GHAN");
				break;
			case 0x10B7:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER QAR");
				break;
			case 0x10B8:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER SHIN");
				break;
			case 0x10B9:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER CHIN");
				break;
			case 0x10BA:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER CAN");
				break;
			case 0x10BB:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER JIL");
				break;
			case 0x10BC:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER CIL");
				break;
			case 0x10BD:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER CHAR");
				break;
			case 0x10BE:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER XAN");
				break;
			case 0x10BF:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER JHAN");
				break;
			case 0x10C0:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER HAE");
				break;
			case 0x10C1:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER HE");
				break;
			case 0x10C2:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER HIE");
				break;
			case 0x10C3:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER WE");
				break;
			case 0x10C4:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER HAR");
				break;
			case 0x10C5:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER HOE");
				break;
			case 0x10C7:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER YN");
				break;
			case 0x10CD:
				strcpy_s(buf, buf_size, "GEORGIAN CAPITAL LETTER AEN");
				break;
			case 0x10D0:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER AN");
				break;
			case 0x10D1:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER BAN");
				break;
			case 0x10D2:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER GAN");
				break;
			case 0x10D3:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER DON");
				break;
			case 0x10D4:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER EN");
				break;
			case 0x10D5:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER VIN");
				break;
			case 0x10D6:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER ZEN");
				break;
			case 0x10D7:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER TAN");
				break;
			case 0x10D8:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER IN");
				break;
			case 0x10D9:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER KAN");
				break;
			case 0x10DA:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER LAS");
				break;
			case 0x10DB:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER MAN");
				break;
			case 0x10DC:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER NAR");
				break;
			case 0x10DD:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER ON");
				break;
			case 0x10DE:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER PAR");
				break;
			case 0x10DF:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER ZHAR");
				break;
			case 0x10E0:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER RAE");
				break;
			case 0x10E1:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER SAN");
				break;
			case 0x10E2:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER TAR");
				break;
			case 0x10E3:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER UN");
				break;
			case 0x10E4:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER PHAR");
				break;
			case 0x10E5:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER KHAR");
				break;
			case 0x10E6:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER GHAN");
				break;
			case 0x10E7:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER QAR");
				break;
			case 0x10E8:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER SHIN");
				break;
			case 0x10E9:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER CHIN");
				break;
			case 0x10EA:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER CAN");
				break;
			case 0x10EB:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER JIL");
				break;
			case 0x10EC:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER CIL");
				break;
			case 0x10ED:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER CHAR");
				break;
			case 0x10EE:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER XAN");
				break;
			case 0x10EF:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER JHAN");
				break;
			case 0x10F0:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER HAE");
				break;
			case 0x10F1:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER HE");
				break;
			case 0x10F2:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER HIE");
				break;
			case 0x10F3:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER WE");
				break;
			case 0x10F4:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER HAR");
				break;
			case 0x10F5:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER HOE");
				break;
			case 0x10F6:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER FI");
				break;
			case 0x10F7:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER YN");
				break;
			case 0x10F8:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER ELIFI");
				break;
			case 0x10F9:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER TURNED GAN");
				break;
			case 0x10FA:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER AIN");
				break;
			case 0x10FB:
				strcpy_s(buf, buf_size, "GEORGIAN PARAGRAPH SEPARATOR");
				break;
			case 0x10FC:
				strcpy_s(buf, buf_size, "MODIFIER LETTER GEORGIAN NAR");
				break;
			case 0x10FD:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER AEN");
				break;
			case 0x10FE:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER HARD SIGN");
				break;
			case 0x10FF:
				strcpy_s(buf, buf_size, "GEORGIAN LETTER LABIAL SIGN");
				break;
			case 0x1100:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG KIYEOK");
				break;
			case 0x1101:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGKIYEOK");
				break;
			case 0x1102:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG NIEUN");
				break;
			case 0x1103:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG TIKEUT");
				break;
			case 0x1104:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGTIKEUT");
				break;
			case 0x1105:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL");
				break;
			case 0x1106:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG MIEUM");
				break;
			case 0x1107:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP");
				break;
			case 0x1108:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGPIEUP");
				break;
			case 0x1109:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS");
				break;
			case 0x110A:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGSIOS");
				break;
			case 0x110B:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG");
				break;
			case 0x110C:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CIEUC");
				break;
			case 0x110D:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGCIEUC");
				break;
			case 0x110E:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CHIEUCH");
				break;
			case 0x110F:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG KHIEUKH");
				break;
			case 0x1110:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG THIEUTH");
				break;
			case 0x1111:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PHIEUPH");
				break;
			case 0x1112:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG HIEUH");
				break;
			case 0x1113:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG NIEUN-KIYEOK");
				break;
			case 0x1114:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGNIEUN");
				break;
			case 0x1115:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG NIEUN-TIKEUT");
				break;
			case 0x1116:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG NIEUN-PIEUP");
				break;
			case 0x1117:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG TIKEUT-KIYEOK");
				break;
			case 0x1118:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-NIEUN");
				break;
			case 0x1119:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGRIEUL");
				break;
			case 0x111A:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-HIEUH");
				break;
			case 0x111B:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG KAPYEOUNRIEUL");
				break;
			case 0x111C:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG MIEUM-PIEUP");
				break;
			case 0x111D:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG KAPYEOUNMIEUM");
				break;
			case 0x111E:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-KIYEOK");
				break;
			case 0x111F:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-NIEUN");
				break;
			case 0x1120:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-TIKEUT");
				break;
			case 0x1121:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-SIOS");
				break;
			case 0x1122:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-SIOS-KIYEOK");
				break;
			case 0x1123:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-SIOS-TIKEUT");
				break;
			case 0x1124:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-SIOS-PIEUP");
				break;
			case 0x1125:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-SSANGSIOS");
				break;
			case 0x1126:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-SIOS-CIEUC");
				break;
			case 0x1127:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-CIEUC");
				break;
			case 0x1128:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-CHIEUCH");
				break;
			case 0x1129:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-THIEUTH");
				break;
			case 0x112A:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-PHIEUPH");
				break;
			case 0x112B:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG KAPYEOUNPIEUP");
				break;
			case 0x112C:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG KAPYEOUNSSANGPIEUP");
				break;
			case 0x112D:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-KIYEOK");
				break;
			case 0x112E:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-NIEUN");
				break;
			case 0x112F:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-TIKEUT");
				break;
			case 0x1130:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-RIEUL");
				break;
			case 0x1131:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-MIEUM");
				break;
			case 0x1132:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-PIEUP");
				break;
			case 0x1133:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-PIEUP-KIYEOK");
				break;
			case 0x1134:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-SSANGSIOS");
				break;
			case 0x1135:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-IEUNG");
				break;
			case 0x1136:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-CIEUC");
				break;
			case 0x1137:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-CHIEUCH");
				break;
			case 0x1138:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-KHIEUKH");
				break;
			case 0x1139:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-THIEUTH");
				break;
			case 0x113A:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-PHIEUPH");
				break;
			case 0x113B:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SIOS-HIEUH");
				break;
			case 0x113C:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CHITUEUMSIOS");
				break;
			case 0x113D:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CHITUEUMSSANGSIOS");
				break;
			case 0x113E:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CEONGCHIEUMSIOS");
				break;
			case 0x113F:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CEONGCHIEUMSSANGSIOS");
				break;
			case 0x1140:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PANSIOS");
				break;
			case 0x1141:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-KIYEOK");
				break;
			case 0x1142:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-TIKEUT");
				break;
			case 0x1143:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-MIEUM");
				break;
			case 0x1144:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-PIEUP");
				break;
			case 0x1145:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-SIOS");
				break;
			case 0x1146:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-PANSIOS");
				break;
			case 0x1147:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGIEUNG");
				break;
			case 0x1148:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-CIEUC");
				break;
			case 0x1149:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-CHIEUCH");
				break;
			case 0x114A:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-THIEUTH");
				break;
			case 0x114B:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-PHIEUPH");
				break;
			case 0x114C:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG YESIEUNG");
				break;
			case 0x114D:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CIEUC-IEUNG");
				break;
			case 0x114E:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CHITUEUMCIEUC");
				break;
			case 0x114F:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CHITUEUMSSANGCIEUC");
				break;
			case 0x1150:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CEONGCHIEUMCIEUC");
				break;
			case 0x1151:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CEONGCHIEUMSSANGCIEUC");
				break;
			case 0x1152:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CHIEUCH-KHIEUKH");
				break;
			case 0x1153:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CHIEUCH-HIEUH");
				break;
			case 0x1154:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CHITUEUMCHIEUCH");
				break;
			case 0x1155:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG CEONGCHIEUMCHIEUCH");
				break;
			case 0x1156:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PHIEUPH-PIEUP");
				break;
			case 0x1157:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG KAPYEOUNPHIEUPH");
				break;
			case 0x1158:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGHIEUH");
				break;
			case 0x1159:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG YEORINHIEUH");
				break;
			case 0x115A:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG KIYEOK-TIKEUT");
				break;
			case 0x115B:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG NIEUN-SIOS");
				break;
			case 0x115C:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG NIEUN-CIEUC");
				break;
			case 0x115D:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG NIEUN-HIEUH");
				break;
			case 0x115E:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG TIKEUT-RIEUL");
				break;
			case 0x115F:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG FILLER");
				break;
			case 0x1160:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG FILLER");
				break;
			case 0x1161:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG A");
				break;
			case 0x1162:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG AE");
				break;
			case 0x1163:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YA");
				break;
			case 0x1164:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YAE");
				break;
			case 0x1165:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EO");
				break;
			case 0x1166:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG E");
				break;
			case 0x1167:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YEO");
				break;
			case 0x1168:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YE");
				break;
			case 0x1169:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG O");
				break;
			case 0x116A:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG WA");
				break;
			case 0x116B:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG WAE");
				break;
			case 0x116C:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG OE");
				break;
			case 0x116D:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YO");
				break;
			case 0x116E:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG U");
				break;
			case 0x116F:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG WEO");
				break;
			case 0x1170:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG WE");
				break;
			case 0x1171:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG WI");
				break;
			case 0x1172:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YU");
				break;
			case 0x1173:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EU");
				break;
			case 0x1174:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YI");
				break;
			case 0x1175:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I");
				break;
			case 0x1176:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG A-O");
				break;
			case 0x1177:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG A-U");
				break;
			case 0x1178:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YA-O");
				break;
			case 0x1179:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YA-YO");
				break;
			case 0x117A:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EO-O");
				break;
			case 0x117B:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EO-U");
				break;
			case 0x117C:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EO-EU");
				break;
			case 0x117D:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YEO-O");
				break;
			case 0x117E:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YEO-U");
				break;
			case 0x117F:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG O-EO");
				break;
			case 0x1180:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG O-E");
				break;
			case 0x1181:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG O-YE");
				break;
			case 0x1182:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG O-O");
				break;
			case 0x1183:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG O-U");
				break;
			case 0x1184:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YO-YA");
				break;
			case 0x1185:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YO-YAE");
				break;
			case 0x1186:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YO-YEO");
				break;
			case 0x1187:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YO-O");
				break;
			case 0x1188:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YO-I");
				break;
			case 0x1189:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG U-A");
				break;
			case 0x118A:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG U-AE");
				break;
			case 0x118B:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG U-EO-EU");
				break;
			case 0x118C:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG U-YE");
				break;
			case 0x118D:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG U-U");
				break;
			case 0x118E:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YU-A");
				break;
			case 0x118F:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YU-EO");
				break;
			case 0x1190:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YU-E");
				break;
			case 0x1191:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YU-YEO");
				break;
			case 0x1192:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YU-YE");
				break;
			case 0x1193:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YU-U");
				break;
			case 0x1194:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YU-I");
				break;
			case 0x1195:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EU-U");
				break;
			case 0x1196:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EU-EU");
				break;
			case 0x1197:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YI-U");
				break;
			case 0x1198:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-A");
				break;
			case 0x1199:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-YA");
				break;
			case 0x119A:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-O");
				break;
			case 0x119B:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-U");
				break;
			case 0x119C:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-EU");
				break;
			case 0x119D:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-ARAEA");
				break;
			case 0x119E:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG ARAEA");
				break;
			case 0x119F:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG ARAEA-EO");
				break;
			case 0x11A0:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG ARAEA-U");
				break;
			case 0x11A1:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG ARAEA-I");
				break;
			case 0x11A2:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG SSANGARAEA");
				break;
			case 0x11A3:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG A-EU");
				break;
			case 0x11A4:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YA-U");
				break;
			case 0x11A5:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YEO-YA");
				break;
			case 0x11A6:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG O-YA");
				break;
			case 0x11A7:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG O-YAE");
				break;
			case 0x11A8:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KIYEOK");
				break;
			case 0x11A9:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGKIYEOK");
				break;
			case 0x11AA:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KIYEOK-SIOS");
				break;
			case 0x11AB:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG NIEUN");
				break;
			case 0x11AC:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG NIEUN-CIEUC");
				break;
			case 0x11AD:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG NIEUN-HIEUH");
				break;
			case 0x11AE:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG TIKEUT");
				break;
			case 0x11AF:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL");
				break;
			case 0x11B0:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-KIYEOK");
				break;
			case 0x11B1:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-MIEUM");
				break;
			case 0x11B2:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-PIEUP");
				break;
			case 0x11B3:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-SIOS");
				break;
			case 0x11B4:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-THIEUTH");
				break;
			case 0x11B5:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-PHIEUPH");
				break;
			case 0x11B6:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-HIEUH");
				break;
			case 0x11B7:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM");
				break;
			case 0x11B8:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP");
				break;
			case 0x11B9:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP-SIOS");
				break;
			case 0x11BA:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS");
				break;
			case 0x11BB:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGSIOS");
				break;
			case 0x11BC:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG IEUNG");
				break;
			case 0x11BD:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG CIEUC");
				break;
			case 0x11BE:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG CHIEUCH");
				break;
			case 0x11BF:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KHIEUKH");
				break;
			case 0x11C0:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG THIEUTH");
				break;
			case 0x11C1:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PHIEUPH");
				break;
			case 0x11C2:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG HIEUH");
				break;
			case 0x11C3:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KIYEOK-RIEUL");
				break;
			case 0x11C4:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KIYEOK-SIOS-KIYEOK");
				break;
			case 0x11C5:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG NIEUN-KIYEOK");
				break;
			case 0x11C6:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG NIEUN-TIKEUT");
				break;
			case 0x11C7:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG NIEUN-SIOS");
				break;
			case 0x11C8:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG NIEUN-PANSIOS");
				break;
			case 0x11C9:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG NIEUN-THIEUTH");
				break;
			case 0x11CA:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG TIKEUT-KIYEOK");
				break;
			case 0x11CB:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG TIKEUT-RIEUL");
				break;
			case 0x11CC:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-KIYEOK-SIOS");
				break;
			case 0x11CD:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-NIEUN");
				break;
			case 0x11CE:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-TIKEUT");
				break;
			case 0x11CF:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-TIKEUT-HIEUH");
				break;
			case 0x11D0:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGRIEUL");
				break;
			case 0x11D1:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-MIEUM-KIYEOK");
				break;
			case 0x11D2:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-MIEUM-SIOS");
				break;
			case 0x11D3:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-PIEUP-SIOS");
				break;
			case 0x11D4:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-PIEUP-HIEUH");
				break;
			case 0x11D5:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-KAPYEOUNPIEUP");
				break;
			case 0x11D6:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-SSANGSIOS");
				break;
			case 0x11D7:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-PANSIOS");
				break;
			case 0x11D8:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-KHIEUKH");
				break;
			case 0x11D9:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-YEORINHIEUH");
				break;
			case 0x11DA:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-KIYEOK");
				break;
			case 0x11DB:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-RIEUL");
				break;
			case 0x11DC:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-PIEUP");
				break;
			case 0x11DD:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-SIOS");
				break;
			case 0x11DE:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-SSANGSIOS");
				break;
			case 0x11DF:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-PANSIOS");
				break;
			case 0x11E0:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-CHIEUCH");
				break;
			case 0x11E1:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-HIEUH");
				break;
			case 0x11E2:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KAPYEOUNMIEUM");
				break;
			case 0x11E3:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP-RIEUL");
				break;
			case 0x11E4:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP-PHIEUPH");
				break;
			case 0x11E5:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP-HIEUH");
				break;
			case 0x11E6:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KAPYEOUNPIEUP");
				break;
			case 0x11E7:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-KIYEOK");
				break;
			case 0x11E8:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-TIKEUT");
				break;
			case 0x11E9:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-RIEUL");
				break;
			case 0x11EA:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-PIEUP");
				break;
			case 0x11EB:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PANSIOS");
				break;
			case 0x11EC:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG IEUNG-KIYEOK");
				break;
			case 0x11ED:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG IEUNG-SSANGKIYEOK");
				break;
			case 0x11EE:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGIEUNG");
				break;
			case 0x11EF:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG IEUNG-KHIEUKH");
				break;
			case 0x11F0:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG YESIEUNG");
				break;
			case 0x11F1:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG YESIEUNG-SIOS");
				break;
			case 0x11F2:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG YESIEUNG-PANSIOS");
				break;
			case 0x11F3:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PHIEUPH-PIEUP");
				break;
			case 0x11F4:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KAPYEOUNPHIEUPH");
				break;
			case 0x11F5:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG HIEUH-NIEUN");
				break;
			case 0x11F6:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG HIEUH-RIEUL");
				break;
			case 0x11F7:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG HIEUH-MIEUM");
				break;
			case 0x11F8:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG HIEUH-PIEUP");
				break;
			case 0x11F9:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG YEORINHIEUH");
				break;
			case 0x11FA:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KIYEOK-NIEUN");
				break;
			case 0x11FB:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KIYEOK-PIEUP");
				break;
			case 0x11FC:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KIYEOK-CHIEUCH");
				break;
			case 0x11FD:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KIYEOK-KHIEUKH");
				break;
			case 0x11FE:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KIYEOK-HIEUH");
				break;
			case 0x11FF:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGNIEUN");
				break;
			case 0x1200:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HA");
				break;
			case 0x1201:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HU");
				break;
			case 0x1202:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HI");
				break;
			case 0x1203:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HAA");
				break;
			case 0x1204:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HEE");
				break;
			case 0x1205:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HE");
				break;
			case 0x1206:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HO");
				break;
			case 0x1207:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HOA");
				break;
			case 0x1208:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE LA");
				break;
			case 0x1209:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE LU");
				break;
			case 0x120A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE LI");
				break;
			case 0x120B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE LAA");
				break;
			case 0x120C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE LEE");
				break;
			case 0x120D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE LE");
				break;
			case 0x120E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE LO");
				break;
			case 0x120F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE LWA");
				break;
			case 0x1210:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HHA");
				break;
			case 0x1211:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HHU");
				break;
			case 0x1212:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HHI");
				break;
			case 0x1213:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HHAA");
				break;
			case 0x1214:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HHEE");
				break;
			case 0x1215:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HHE");
				break;
			case 0x1216:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HHO");
				break;
			case 0x1217:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE HHWA");
				break;
			case 0x1218:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MA");
				break;
			case 0x1219:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MU");
				break;
			case 0x121A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MI");
				break;
			case 0x121B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MAA");
				break;
			case 0x121C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MEE");
				break;
			case 0x121D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ME");
				break;
			case 0x121E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MO");
				break;
			case 0x121F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MWA");
				break;
			case 0x1220:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SZA");
				break;
			case 0x1221:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SZU");
				break;
			case 0x1222:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SZI");
				break;
			case 0x1223:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SZAA");
				break;
			case 0x1224:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SZEE");
				break;
			case 0x1225:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SZE");
				break;
			case 0x1226:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SZO");
				break;
			case 0x1227:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SZWA");
				break;
			case 0x1228:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE RA");
				break;
			case 0x1229:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE RU");
				break;
			case 0x122A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE RI");
				break;
			case 0x122B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE RAA");
				break;
			case 0x122C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE REE");
				break;
			case 0x122D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE RE");
				break;
			case 0x122E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE RO");
				break;
			case 0x122F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE RWA");
				break;
			case 0x1230:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SA");
				break;
			case 0x1231:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SU");
				break;
			case 0x1232:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SI");
				break;
			case 0x1233:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SAA");
				break;
			case 0x1234:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SEE");
				break;
			case 0x1235:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SE");
				break;
			case 0x1236:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SO");
				break;
			case 0x1237:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SWA");
				break;
			case 0x1238:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SHA");
				break;
			case 0x1239:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SHU");
				break;
			case 0x123A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SHI");
				break;
			case 0x123B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SHAA");
				break;
			case 0x123C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SHEE");
				break;
			case 0x123D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SHE");
				break;
			case 0x123E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SHO");
				break;
			case 0x123F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SHWA");
				break;
			case 0x1240:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QA");
				break;
			case 0x1241:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QU");
				break;
			case 0x1242:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QI");
				break;
			case 0x1243:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QAA");
				break;
			case 0x1244:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QEE");
				break;
			case 0x1245:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QE");
				break;
			case 0x1246:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QO");
				break;
			case 0x1247:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QOA");
				break;
			case 0x1248:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QWA");
				break;
			case 0x124A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QWI");
				break;
			case 0x124B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QWAA");
				break;
			case 0x124C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QWEE");
				break;
			case 0x124D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QWE");
				break;
			case 0x1250:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHA");
				break;
			case 0x1251:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHU");
				break;
			case 0x1252:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHI");
				break;
			case 0x1253:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHAA");
				break;
			case 0x1254:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHEE");
				break;
			case 0x1255:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHE");
				break;
			case 0x1256:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHO");
				break;
			case 0x1258:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHWA");
				break;
			case 0x125A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHWI");
				break;
			case 0x125B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHWAA");
				break;
			case 0x125C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHWEE");
				break;
			case 0x125D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QHWE");
				break;
			case 0x1260:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BA");
				break;
			case 0x1261:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BU");
				break;
			case 0x1262:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BI");
				break;
			case 0x1263:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BAA");
				break;
			case 0x1264:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BEE");
				break;
			case 0x1265:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BE");
				break;
			case 0x1266:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BO");
				break;
			case 0x1267:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BWA");
				break;
			case 0x1268:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE VA");
				break;
			case 0x1269:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE VU");
				break;
			case 0x126A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE VI");
				break;
			case 0x126B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE VAA");
				break;
			case 0x126C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE VEE");
				break;
			case 0x126D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE VE");
				break;
			case 0x126E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE VO");
				break;
			case 0x126F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE VWA");
				break;
			case 0x1270:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TA");
				break;
			case 0x1271:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TU");
				break;
			case 0x1272:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TI");
				break;
			case 0x1273:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TAA");
				break;
			case 0x1274:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TEE");
				break;
			case 0x1275:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TE");
				break;
			case 0x1276:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TO");
				break;
			case 0x1277:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TWA");
				break;
			case 0x1278:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CA");
				break;
			case 0x1279:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CU");
				break;
			case 0x127A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CI");
				break;
			case 0x127B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CAA");
				break;
			case 0x127C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CEE");
				break;
			case 0x127D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CE");
				break;
			case 0x127E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CO");
				break;
			case 0x127F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CWA");
				break;
			case 0x1280:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XA");
				break;
			case 0x1281:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XU");
				break;
			case 0x1282:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XI");
				break;
			case 0x1283:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XAA");
				break;
			case 0x1284:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XEE");
				break;
			case 0x1285:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XE");
				break;
			case 0x1286:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XO");
				break;
			case 0x1287:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XOA");
				break;
			case 0x1288:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XWA");
				break;
			case 0x128A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XWI");
				break;
			case 0x128B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XWAA");
				break;
			case 0x128C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XWEE");
				break;
			case 0x128D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XWE");
				break;
			case 0x1290:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NA");
				break;
			case 0x1291:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NU");
				break;
			case 0x1292:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NI");
				break;
			case 0x1293:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NAA");
				break;
			case 0x1294:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NEE");
				break;
			case 0x1295:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NE");
				break;
			case 0x1296:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NO");
				break;
			case 0x1297:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NWA");
				break;
			case 0x1298:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NYA");
				break;
			case 0x1299:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NYU");
				break;
			case 0x129A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NYI");
				break;
			case 0x129B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NYAA");
				break;
			case 0x129C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NYEE");
				break;
			case 0x129D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NYE");
				break;
			case 0x129E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NYO");
				break;
			case 0x129F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NYWA");
				break;
			case 0x12A0:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GLOTTAL A");
				break;
			case 0x12A1:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GLOTTAL U");
				break;
			case 0x12A2:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GLOTTAL I");
				break;
			case 0x12A3:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GLOTTAL AA");
				break;
			case 0x12A4:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GLOTTAL EE");
				break;
			case 0x12A5:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GLOTTAL E");
				break;
			case 0x12A6:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GLOTTAL O");
				break;
			case 0x12A7:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GLOTTAL WA");
				break;
			case 0x12A8:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KA");
				break;
			case 0x12A9:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KU");
				break;
			case 0x12AA:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KI");
				break;
			case 0x12AB:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KAA");
				break;
			case 0x12AC:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KEE");
				break;
			case 0x12AD:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KE");
				break;
			case 0x12AE:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KO");
				break;
			case 0x12AF:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KOA");
				break;
			case 0x12B0:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KWA");
				break;
			case 0x12B2:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KWI");
				break;
			case 0x12B3:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KWAA");
				break;
			case 0x12B4:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KWEE");
				break;
			case 0x12B5:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KWE");
				break;
			case 0x12B8:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXA");
				break;
			case 0x12B9:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXU");
				break;
			case 0x12BA:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXI");
				break;
			case 0x12BB:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXAA");
				break;
			case 0x12BC:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXEE");
				break;
			case 0x12BD:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXE");
				break;
			case 0x12BE:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXO");
				break;
			case 0x12C0:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXWA");
				break;
			case 0x12C2:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXWI");
				break;
			case 0x12C3:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXWAA");
				break;
			case 0x12C4:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXWEE");
				break;
			case 0x12C5:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KXWE");
				break;
			case 0x12C8:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE WA");
				break;
			case 0x12C9:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE WU");
				break;
			case 0x12CA:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE WI");
				break;
			case 0x12CB:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE WAA");
				break;
			case 0x12CC:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE WEE");
				break;
			case 0x12CD:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE WE");
				break;
			case 0x12CE:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE WO");
				break;
			case 0x12CF:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE WOA");
				break;
			case 0x12D0:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHARYNGEAL A");
				break;
			case 0x12D1:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHARYNGEAL U");
				break;
			case 0x12D2:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHARYNGEAL I");
				break;
			case 0x12D3:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHARYNGEAL AA");
				break;
			case 0x12D4:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHARYNGEAL EE");
				break;
			case 0x12D5:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHARYNGEAL E");
				break;
			case 0x12D6:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHARYNGEAL O");
				break;
			case 0x12D8:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZA");
				break;
			case 0x12D9:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZU");
				break;
			case 0x12DA:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZI");
				break;
			case 0x12DB:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZAA");
				break;
			case 0x12DC:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZEE");
				break;
			case 0x12DD:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZE");
				break;
			case 0x12DE:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZO");
				break;
			case 0x12DF:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZWA");
				break;
			case 0x12E0:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZHA");
				break;
			case 0x12E1:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZHU");
				break;
			case 0x12E2:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZHI");
				break;
			case 0x12E3:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZHAA");
				break;
			case 0x12E4:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZHEE");
				break;
			case 0x12E5:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZHE");
				break;
			case 0x12E6:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZHO");
				break;
			case 0x12E7:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZHWA");
				break;
			case 0x12E8:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE YA");
				break;
			case 0x12E9:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE YU");
				break;
			case 0x12EA:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE YI");
				break;
			case 0x12EB:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE YAA");
				break;
			case 0x12EC:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE YEE");
				break;
			case 0x12ED:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE YE");
				break;
			case 0x12EE:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE YO");
				break;
			case 0x12EF:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE YOA");
				break;
			case 0x12F0:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DA");
				break;
			case 0x12F1:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DU");
				break;
			case 0x12F2:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DI");
				break;
			case 0x12F3:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DAA");
				break;
			case 0x12F4:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DEE");
				break;
			case 0x12F5:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DE");
				break;
			case 0x12F6:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DO");
				break;
			case 0x12F7:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DWA");
				break;
			case 0x12F8:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDA");
				break;
			case 0x12F9:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDU");
				break;
			case 0x12FA:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDI");
				break;
			case 0x12FB:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDAA");
				break;
			case 0x12FC:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDEE");
				break;
			case 0x12FD:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDE");
				break;
			case 0x12FE:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDO");
				break;
			case 0x12FF:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDWA");
				break;
			case 0x1300:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE JA");
				break;
			case 0x1301:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE JU");
				break;
			case 0x1302:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE JI");
				break;
			case 0x1303:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE JAA");
				break;
			case 0x1304:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE JEE");
				break;
			case 0x1305:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE JE");
				break;
			case 0x1306:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE JO");
				break;
			case 0x1307:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE JWA");
				break;
			case 0x1308:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GA");
				break;
			case 0x1309:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GU");
				break;
			case 0x130A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GI");
				break;
			case 0x130B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GAA");
				break;
			case 0x130C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GEE");
				break;
			case 0x130D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GE");
				break;
			case 0x130E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GO");
				break;
			case 0x130F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GOA");
				break;
			case 0x1310:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GWA");
				break;
			case 0x1312:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GWI");
				break;
			case 0x1313:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GWAA");
				break;
			case 0x1314:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GWEE");
				break;
			case 0x1315:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GWE");
				break;
			case 0x1318:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGA");
				break;
			case 0x1319:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGU");
				break;
			case 0x131A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGI");
				break;
			case 0x131B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGAA");
				break;
			case 0x131C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGEE");
				break;
			case 0x131D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGE");
				break;
			case 0x131E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGO");
				break;
			case 0x131F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGWAA");
				break;
			case 0x1320:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE THA");
				break;
			case 0x1321:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE THU");
				break;
			case 0x1322:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE THI");
				break;
			case 0x1323:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE THAA");
				break;
			case 0x1324:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE THEE");
				break;
			case 0x1325:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE THE");
				break;
			case 0x1326:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE THO");
				break;
			case 0x1327:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE THWA");
				break;
			case 0x1328:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CHA");
				break;
			case 0x1329:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CHU");
				break;
			case 0x132A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CHI");
				break;
			case 0x132B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CHAA");
				break;
			case 0x132C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CHEE");
				break;
			case 0x132D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CHE");
				break;
			case 0x132E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CHO");
				break;
			case 0x132F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CHWA");
				break;
			case 0x1330:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHA");
				break;
			case 0x1331:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHU");
				break;
			case 0x1332:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHI");
				break;
			case 0x1333:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHAA");
				break;
			case 0x1334:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHEE");
				break;
			case 0x1335:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHE");
				break;
			case 0x1336:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHO");
				break;
			case 0x1337:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHWA");
				break;
			case 0x1338:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TSA");
				break;
			case 0x1339:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TSU");
				break;
			case 0x133A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TSI");
				break;
			case 0x133B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TSAA");
				break;
			case 0x133C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TSEE");
				break;
			case 0x133D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TSE");
				break;
			case 0x133E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TSO");
				break;
			case 0x133F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TSWA");
				break;
			case 0x1340:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TZA");
				break;
			case 0x1341:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TZU");
				break;
			case 0x1342:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TZI");
				break;
			case 0x1343:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TZAA");
				break;
			case 0x1344:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TZEE");
				break;
			case 0x1345:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TZE");
				break;
			case 0x1346:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TZO");
				break;
			case 0x1347:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TZOA");
				break;
			case 0x1348:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FA");
				break;
			case 0x1349:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FU");
				break;
			case 0x134A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FI");
				break;
			case 0x134B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FAA");
				break;
			case 0x134C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FEE");
				break;
			case 0x134D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FE");
				break;
			case 0x134E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FO");
				break;
			case 0x134F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FWA");
				break;
			case 0x1350:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PA");
				break;
			case 0x1351:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PU");
				break;
			case 0x1352:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PI");
				break;
			case 0x1353:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PAA");
				break;
			case 0x1354:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PEE");
				break;
			case 0x1355:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PE");
				break;
			case 0x1356:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PO");
				break;
			case 0x1357:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PWA");
				break;
			case 0x1358:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE RYA");
				break;
			case 0x1359:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MYA");
				break;
			case 0x135A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FYA");
				break;
			case 0x135D:
				strcpy_s(buf, buf_size, "ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK");
				break;
			case 0x135E:
				strcpy_s(buf, buf_size, "ETHIOPIC COMBINING VOWEL LENGTH MARK");
				break;
			case 0x135F:
				strcpy_s(buf, buf_size, "ETHIOPIC COMBINING GEMINATION MARK");
				break;
			case 0x1360:
				strcpy_s(buf, buf_size, "ETHIOPIC SECTION MARK");
				break;
			case 0x1361:
				strcpy_s(buf, buf_size, "ETHIOPIC WORDSPACE");
				break;
			case 0x1362:
				strcpy_s(buf, buf_size, "ETHIOPIC FULL STOP");
				break;
			case 0x1363:
				strcpy_s(buf, buf_size, "ETHIOPIC COMMA");
				break;
			case 0x1364:
				strcpy_s(buf, buf_size, "ETHIOPIC SEMICOLON");
				break;
			case 0x1365:
				strcpy_s(buf, buf_size, "ETHIOPIC COLON");
				break;
			case 0x1366:
				strcpy_s(buf, buf_size, "ETHIOPIC PREFACE COLON");
				break;
			case 0x1367:
				strcpy_s(buf, buf_size, "ETHIOPIC QUESTION MARK");
				break;
			case 0x1368:
				strcpy_s(buf, buf_size, "ETHIOPIC PARAGRAPH SEPARATOR");
				break;
			case 0x1369:
				strcpy_s(buf, buf_size, "ETHIOPIC DIGIT ONE");
				break;
			case 0x136A:
				strcpy_s(buf, buf_size, "ETHIOPIC DIGIT TWO");
				break;
			case 0x136B:
				strcpy_s(buf, buf_size, "ETHIOPIC DIGIT THREE");
				break;
			case 0x136C:
				strcpy_s(buf, buf_size, "ETHIOPIC DIGIT FOUR");
				break;
			case 0x136D:
				strcpy_s(buf, buf_size, "ETHIOPIC DIGIT FIVE");
				break;
			case 0x136E:
				strcpy_s(buf, buf_size, "ETHIOPIC DIGIT SIX");
				break;
			case 0x136F:
				strcpy_s(buf, buf_size, "ETHIOPIC DIGIT SEVEN");
				break;
			case 0x1370:
				strcpy_s(buf, buf_size, "ETHIOPIC DIGIT EIGHT");
				break;
			case 0x1371:
				strcpy_s(buf, buf_size, "ETHIOPIC DIGIT NINE");
				break;
			case 0x1372:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER TEN");
				break;
			case 0x1373:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER TWENTY");
				break;
			case 0x1374:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER THIRTY");
				break;
			case 0x1375:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER FORTY");
				break;
			case 0x1376:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER FIFTY");
				break;
			case 0x1377:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER SIXTY");
				break;
			case 0x1378:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER SEVENTY");
				break;
			case 0x1379:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER EIGHTY");
				break;
			case 0x137A:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER NINETY");
				break;
			case 0x137B:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER HUNDRED");
				break;
			case 0x137C:
				strcpy_s(buf, buf_size, "ETHIOPIC NUMBER TEN THOUSAND");
				break;
			case 0x1380:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SEBATBEIT MWA");
				break;
			case 0x1381:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MWI");
				break;
			case 0x1382:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MWEE");
				break;
			case 0x1383:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MWE");
				break;
			case 0x1384:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SEBATBEIT BWA");
				break;
			case 0x1385:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BWI");
				break;
			case 0x1386:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BWEE");
				break;
			case 0x1387:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BWE");
				break;
			case 0x1388:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SEBATBEIT FWA");
				break;
			case 0x1389:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FWI");
				break;
			case 0x138A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FWEE");
				break;
			case 0x138B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE FWE");
				break;
			case 0x138C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SEBATBEIT PWA");
				break;
			case 0x138D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PWI");
				break;
			case 0x138E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PWEE");
				break;
			case 0x138F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PWE");
				break;
			case 0x1390:
				strcpy_s(buf, buf_size, "ETHIOPIC TONAL MARK YIZET");
				break;
			case 0x1391:
				strcpy_s(buf, buf_size, "ETHIOPIC TONAL MARK DERET");
				break;
			case 0x1392:
				strcpy_s(buf, buf_size, "ETHIOPIC TONAL MARK RIKRIK");
				break;
			case 0x1393:
				strcpy_s(buf, buf_size, "ETHIOPIC TONAL MARK SHORT RIKRIK");
				break;
			case 0x1394:
				strcpy_s(buf, buf_size, "ETHIOPIC TONAL MARK DIFAT");
				break;
			case 0x1395:
				strcpy_s(buf, buf_size, "ETHIOPIC TONAL MARK KENAT");
				break;
			case 0x1396:
				strcpy_s(buf, buf_size, "ETHIOPIC TONAL MARK CHIRET");
				break;
			case 0x1397:
				strcpy_s(buf, buf_size, "ETHIOPIC TONAL MARK HIDET");
				break;
			case 0x1398:
				strcpy_s(buf, buf_size, "ETHIOPIC TONAL MARK DERET-HIDET");
				break;
			case 0x1399:
				strcpy_s(buf, buf_size, "ETHIOPIC TONAL MARK KURT");
				break;
			case 0x13A0:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER A");
				break;
			case 0x13A1:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER E");
				break;
			case 0x13A2:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER I");
				break;
			case 0x13A3:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER O");
				break;
			case 0x13A4:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER U");
				break;
			case 0x13A5:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER V");
				break;
			case 0x13A6:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER GA");
				break;
			case 0x13A7:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER KA");
				break;
			case 0x13A8:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER GE");
				break;
			case 0x13A9:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER GI");
				break;
			case 0x13AA:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER GO");
				break;
			case 0x13AB:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER GU");
				break;
			case 0x13AC:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER GV");
				break;
			case 0x13AD:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER HA");
				break;
			case 0x13AE:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER HE");
				break;
			case 0x13AF:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER HI");
				break;
			case 0x13B0:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER HO");
				break;
			case 0x13B1:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER HU");
				break;
			case 0x13B2:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER HV");
				break;
			case 0x13B3:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER LA");
				break;
			case 0x13B4:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER LE");
				break;
			case 0x13B5:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER LI");
				break;
			case 0x13B6:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER LO");
				break;
			case 0x13B7:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER LU");
				break;
			case 0x13B8:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER LV");
				break;
			case 0x13B9:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER MA");
				break;
			case 0x13BA:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER ME");
				break;
			case 0x13BB:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER MI");
				break;
			case 0x13BC:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER MO");
				break;
			case 0x13BD:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER MU");
				break;
			case 0x13BE:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER NA");
				break;
			case 0x13BF:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER HNA");
				break;
			case 0x13C0:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER NAH");
				break;
			case 0x13C1:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER NE");
				break;
			case 0x13C2:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER NI");
				break;
			case 0x13C3:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER NO");
				break;
			case 0x13C4:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER NU");
				break;
			case 0x13C5:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER NV");
				break;
			case 0x13C6:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER QUA");
				break;
			case 0x13C7:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER QUE");
				break;
			case 0x13C8:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER QUI");
				break;
			case 0x13C9:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER QUO");
				break;
			case 0x13CA:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER QUU");
				break;
			case 0x13CB:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER QUV");
				break;
			case 0x13CC:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER SA");
				break;
			case 0x13CD:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER S");
				break;
			case 0x13CE:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER SE");
				break;
			case 0x13CF:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER SI");
				break;
			case 0x13D0:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER SO");
				break;
			case 0x13D1:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER SU");
				break;
			case 0x13D2:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER SV");
				break;
			case 0x13D3:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER DA");
				break;
			case 0x13D4:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TA");
				break;
			case 0x13D5:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER DE");
				break;
			case 0x13D6:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TE");
				break;
			case 0x13D7:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER DI");
				break;
			case 0x13D8:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TI");
				break;
			case 0x13D9:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER DO");
				break;
			case 0x13DA:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER DU");
				break;
			case 0x13DB:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER DV");
				break;
			case 0x13DC:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER DLA");
				break;
			case 0x13DD:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TLA");
				break;
			case 0x13DE:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TLE");
				break;
			case 0x13DF:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TLI");
				break;
			case 0x13E0:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TLO");
				break;
			case 0x13E1:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TLU");
				break;
			case 0x13E2:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TLV");
				break;
			case 0x13E3:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TSA");
				break;
			case 0x13E4:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TSE");
				break;
			case 0x13E5:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TSI");
				break;
			case 0x13E6:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TSO");
				break;
			case 0x13E7:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TSU");
				break;
			case 0x13E8:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER TSV");
				break;
			case 0x13E9:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER WA");
				break;
			case 0x13EA:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER WE");
				break;
			case 0x13EB:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER WI");
				break;
			case 0x13EC:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER WO");
				break;
			case 0x13ED:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER WU");
				break;
			case 0x13EE:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER WV");
				break;
			case 0x13EF:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER YA");
				break;
			case 0x13F0:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER YE");
				break;
			case 0x13F1:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER YI");
				break;
			case 0x13F2:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER YO");
				break;
			case 0x13F3:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER YU");
				break;
			case 0x13F4:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER YV");
				break;
			case 0x13F5:
				strcpy_s(buf, buf_size, "CHEROKEE LETTER MV");
				break;
			case 0x13F8:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER YE");
				break;
			case 0x13F9:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER YI");
				break;
			case 0x13FA:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER YO");
				break;
			case 0x13FB:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER YU");
				break;
			case 0x13FC:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER YV");
				break;
			case 0x13FD:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER MV");
				break;
			case 0x1400:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS HYPHEN");
				break;
			case 0x1401:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS E");
				break;
			case 0x1402:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS AAI");
				break;
			case 0x1403:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS I");
				break;
			case 0x1404:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS II");
				break;
			case 0x1405:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS O");
				break;
			case 0x1406:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OO");
				break;
			case 0x1407:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE OO");
				break;
			case 0x1408:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER EE");
				break;
			case 0x1409:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER I");
				break;
			case 0x140A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS A");
				break;
			case 0x140B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS AA");
				break;
			case 0x140C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WE");
				break;
			case 0x140D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE WE");
				break;
			case 0x140E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WI");
				break;
			case 0x140F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE WI");
				break;
			case 0x1410:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WII");
				break;
			case 0x1411:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE WII");
				break;
			case 0x1412:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WO");
				break;
			case 0x1413:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE WO");
				break;
			case 0x1414:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOO");
				break;
			case 0x1415:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE WOO");
				break;
			case 0x1416:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI WOO");
				break;
			case 0x1417:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WA");
				break;
			case 0x1418:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE WA");
				break;
			case 0x1419:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WAA");
				break;
			case 0x141A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE WAA");
				break;
			case 0x141B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI WAA");
				break;
			case 0x141C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS AI");
				break;
			case 0x141D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE W");
				break;
			case 0x141E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS GLOTTAL STOP");
				break;
			case 0x141F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL ACUTE");
				break;
			case 0x1420:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL GRAVE");
				break;
			case 0x1421:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL BOTTOM HALF RING");
				break;
			case 0x1422:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL TOP HALF RING");
				break;
			case 0x1423:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL RIGHT HALF RING");
				break;
			case 0x1424:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL RING");
				break;
			case 0x1425:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL DOUBLE ACUTE");
				break;
			case 0x1426:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL DOUBLE SHORT VERTICAL STROKES");
				break;
			case 0x1427:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL MIDDLE DOT");
				break;
			case 0x1428:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL SHORT HORIZONTAL STROKE");
				break;
			case 0x1429:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL PLUS");
				break;
			case 0x142A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL DOWN TACK");
				break;
			case 0x142B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS EN");
				break;
			case 0x142C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS IN");
				break;
			case 0x142D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS ON");
				break;
			case 0x142E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS AN");
				break;
			case 0x142F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PE");
				break;
			case 0x1430:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PAAI");
				break;
			case 0x1431:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PI");
				break;
			case 0x1432:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PII");
				break;
			case 0x1433:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PO");
				break;
			case 0x1434:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS POO");
				break;
			case 0x1435:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE POO");
				break;
			case 0x1436:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER HEE");
				break;
			case 0x1437:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER HI");
				break;
			case 0x1438:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PA");
				break;
			case 0x1439:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PAA");
				break;
			case 0x143A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PWE");
				break;
			case 0x143B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE PWE");
				break;
			case 0x143C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PWI");
				break;
			case 0x143D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE PWI");
				break;
			case 0x143E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PWII");
				break;
			case 0x143F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE PWII");
				break;
			case 0x1440:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PWO");
				break;
			case 0x1441:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE PWO");
				break;
			case 0x1442:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PWOO");
				break;
			case 0x1443:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE PWOO");
				break;
			case 0x1444:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PWA");
				break;
			case 0x1445:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE PWA");
				break;
			case 0x1446:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PWAA");
				break;
			case 0x1447:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE PWAA");
				break;
			case 0x1448:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE PWAA");
				break;
			case 0x1449:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS P");
				break;
			case 0x144A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE P");
				break;
			case 0x144B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER H");
				break;
			case 0x144C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TE");
				break;
			case 0x144D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TAAI");
				break;
			case 0x144E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TI");
				break;
			case 0x144F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TII");
				break;
			case 0x1450:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TO");
				break;
			case 0x1451:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TOO");
				break;
			case 0x1452:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE TOO");
				break;
			case 0x1453:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DEE");
				break;
			case 0x1454:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DI");
				break;
			case 0x1455:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TA");
				break;
			case 0x1456:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TAA");
				break;
			case 0x1457:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TWE");
				break;
			case 0x1458:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE TWE");
				break;
			case 0x1459:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TWI");
				break;
			case 0x145A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE TWI");
				break;
			case 0x145B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TWII");
				break;
			case 0x145C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE TWII");
				break;
			case 0x145D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TWO");
				break;
			case 0x145E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE TWO");
				break;
			case 0x145F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TWOO");
				break;
			case 0x1460:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE TWOO");
				break;
			case 0x1461:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TWA");
				break;
			case 0x1462:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE TWA");
				break;
			case 0x1463:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TWAA");
				break;
			case 0x1464:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE TWAA");
				break;
			case 0x1465:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI TWAA");
				break;
			case 0x1466:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS T");
				break;
			case 0x1467:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTE");
				break;
			case 0x1468:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTI");
				break;
			case 0x1469:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTO");
				break;
			case 0x146A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTA");
				break;
			case 0x146B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KE");
				break;
			case 0x146C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KAAI");
				break;
			case 0x146D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KI");
				break;
			case 0x146E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KII");
				break;
			case 0x146F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KO");
				break;
			case 0x1470:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KOO");
				break;
			case 0x1471:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE KOO");
				break;
			case 0x1472:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KA");
				break;
			case 0x1473:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KAA");
				break;
			case 0x1474:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KWE");
				break;
			case 0x1475:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE KWE");
				break;
			case 0x1476:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KWI");
				break;
			case 0x1477:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE KWI");
				break;
			case 0x1478:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KWII");
				break;
			case 0x1479:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE KWII");
				break;
			case 0x147A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KWO");
				break;
			case 0x147B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE KWO");
				break;
			case 0x147C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KWOO");
				break;
			case 0x147D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE KWOO");
				break;
			case 0x147E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KWA");
				break;
			case 0x147F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE KWA");
				break;
			case 0x1480:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KWAA");
				break;
			case 0x1481:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE KWAA");
				break;
			case 0x1482:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI KWAA");
				break;
			case 0x1483:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS K");
				break;
			case 0x1484:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KW");
				break;
			case 0x1485:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SOUTH-SLAVEY KEH");
				break;
			case 0x1486:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SOUTH-SLAVEY KIH");
				break;
			case 0x1487:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SOUTH-SLAVEY KOH");
				break;
			case 0x1488:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SOUTH-SLAVEY KAH");
				break;
			case 0x1489:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CE");
				break;
			case 0x148A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CAAI");
				break;
			case 0x148B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CI");
				break;
			case 0x148C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CII");
				break;
			case 0x148D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CO");
				break;
			case 0x148E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS COO");
				break;
			case 0x148F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE COO");
				break;
			case 0x1490:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CA");
				break;
			case 0x1491:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CAA");
				break;
			case 0x1492:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CWE");
				break;
			case 0x1493:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE CWE");
				break;
			case 0x1494:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CWI");
				break;
			case 0x1495:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE CWI");
				break;
			case 0x1496:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CWII");
				break;
			case 0x1497:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE CWII");
				break;
			case 0x1498:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CWO");
				break;
			case 0x1499:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE CWO");
				break;
			case 0x149A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CWOO");
				break;
			case 0x149B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE CWOO");
				break;
			case 0x149C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CWA");
				break;
			case 0x149D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE CWA");
				break;
			case 0x149E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CWAA");
				break;
			case 0x149F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE CWAA");
				break;
			case 0x14A0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI CWAA");
				break;
			case 0x14A1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS C");
				break;
			case 0x14A2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI TH");
				break;
			case 0x14A3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS ME");
				break;
			case 0x14A4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MAAI");
				break;
			case 0x14A5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MI");
				break;
			case 0x14A6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MII");
				break;
			case 0x14A7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MO");
				break;
			case 0x14A8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MOO");
				break;
			case 0x14A9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE MOO");
				break;
			case 0x14AA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MA");
				break;
			case 0x14AB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MAA");
				break;
			case 0x14AC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MWE");
				break;
			case 0x14AD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE MWE");
				break;
			case 0x14AE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MWI");
				break;
			case 0x14AF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE MWI");
				break;
			case 0x14B0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MWII");
				break;
			case 0x14B1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE MWII");
				break;
			case 0x14B2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MWO");
				break;
			case 0x14B3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE MWO");
				break;
			case 0x14B4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MWOO");
				break;
			case 0x14B5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE MWOO");
				break;
			case 0x14B6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MWA");
				break;
			case 0x14B7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE MWA");
				break;
			case 0x14B8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MWAA");
				break;
			case 0x14B9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE MWAA");
				break;
			case 0x14BA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI MWAA");
				break;
			case 0x14BB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS M");
				break;
			case 0x14BC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE M");
				break;
			case 0x14BD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MH");
				break;
			case 0x14BE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS ATHAPASCAN M");
				break;
			case 0x14BF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI M");
				break;
			case 0x14C0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NE");
				break;
			case 0x14C1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NAAI");
				break;
			case 0x14C2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NI");
				break;
			case 0x14C3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NII");
				break;
			case 0x14C4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NO");
				break;
			case 0x14C5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NOO");
				break;
			case 0x14C6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE NOO");
				break;
			case 0x14C7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NA");
				break;
			case 0x14C8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NAA");
				break;
			case 0x14C9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NWE");
				break;
			case 0x14CA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE NWE");
				break;
			case 0x14CB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NWA");
				break;
			case 0x14CC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE NWA");
				break;
			case 0x14CD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NWAA");
				break;
			case 0x14CE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE NWAA");
				break;
			case 0x14CF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI NWAA");
				break;
			case 0x14D0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS N");
				break;
			case 0x14D1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER NG");
				break;
			case 0x14D2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NH");
				break;
			case 0x14D3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LE");
				break;
			case 0x14D4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LAAI");
				break;
			case 0x14D5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LI");
				break;
			case 0x14D6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LII");
				break;
			case 0x14D7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LO");
				break;
			case 0x14D8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LOO");
				break;
			case 0x14D9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE LOO");
				break;
			case 0x14DA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LA");
				break;
			case 0x14DB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LAA");
				break;
			case 0x14DC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LWE");
				break;
			case 0x14DD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LWE");
				break;
			case 0x14DE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LWI");
				break;
			case 0x14DF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LWI");
				break;
			case 0x14E0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LWII");
				break;
			case 0x14E1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LWII");
				break;
			case 0x14E2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LWO");
				break;
			case 0x14E3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LWO");
				break;
			case 0x14E4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LWOO");
				break;
			case 0x14E5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LWOO");
				break;
			case 0x14E6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LWA");
				break;
			case 0x14E7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LWA");
				break;
			case 0x14E8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LWAA");
				break;
			case 0x14E9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LWAA");
				break;
			case 0x14EA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS L");
				break;
			case 0x14EB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE L");
				break;
			case 0x14EC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MEDIAL L");
				break;
			case 0x14ED:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SE");
				break;
			case 0x14EE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAAI");
				break;
			case 0x14EF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SI");
				break;
			case 0x14F0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SII");
				break;
			case 0x14F1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SO");
				break;
			case 0x14F2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SOO");
				break;
			case 0x14F3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE SOO");
				break;
			case 0x14F4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SA");
				break;
			case 0x14F5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAA");
				break;
			case 0x14F6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SWE");
				break;
			case 0x14F7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SWE");
				break;
			case 0x14F8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SWI");
				break;
			case 0x14F9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SWI");
				break;
			case 0x14FA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SWII");
				break;
			case 0x14FB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SWII");
				break;
			case 0x14FC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SWO");
				break;
			case 0x14FD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SWO");
				break;
			case 0x14FE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SWOO");
				break;
			case 0x14FF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SWOO");
				break;
			case 0x1500:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SWA");
				break;
			case 0x1501:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SWA");
				break;
			case 0x1502:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SWAA");
				break;
			case 0x1503:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SWAA");
				break;
			case 0x1504:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI SWAA");
				break;
			case 0x1505:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS S");
				break;
			case 0x1506:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS ATHAPASCAN S");
				break;
			case 0x1507:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SW");
				break;
			case 0x1508:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT S");
				break;
			case 0x1509:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MOOSE-CREE SK");
				break;
			case 0x150A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI SKW");
				break;
			case 0x150B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI S-W");
				break;
			case 0x150C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI SPWA");
				break;
			case 0x150D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI STWA");
				break;
			case 0x150E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI SKWA");
				break;
			case 0x150F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI SCWA");
				break;
			case 0x1510:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHE");
				break;
			case 0x1511:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHI");
				break;
			case 0x1512:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHII");
				break;
			case 0x1513:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHO");
				break;
			case 0x1514:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHOO");
				break;
			case 0x1515:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHA");
				break;
			case 0x1516:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHAA");
				break;
			case 0x1517:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHWE");
				break;
			case 0x1518:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SHWE");
				break;
			case 0x1519:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHWI");
				break;
			case 0x151A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SHWI");
				break;
			case 0x151B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHWII");
				break;
			case 0x151C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SHWII");
				break;
			case 0x151D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHWO");
				break;
			case 0x151E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SHWO");
				break;
			case 0x151F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHWOO");
				break;
			case 0x1520:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SHWOO");
				break;
			case 0x1521:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHWA");
				break;
			case 0x1522:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SHWA");
				break;
			case 0x1523:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHWAA");
				break;
			case 0x1524:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE SHWAA");
				break;
			case 0x1525:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SH");
				break;
			case 0x1526:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YE");
				break;
			case 0x1527:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YAAI");
				break;
			case 0x1528:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YI");
				break;
			case 0x1529:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YII");
				break;
			case 0x152A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YO");
				break;
			case 0x152B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YOO");
				break;
			case 0x152C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y-CREE YOO");
				break;
			case 0x152D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YA");
				break;
			case 0x152E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YAA");
				break;
			case 0x152F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YWE");
				break;
			case 0x1530:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE YWE");
				break;
			case 0x1531:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YWI");
				break;
			case 0x1532:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE YWI");
				break;
			case 0x1533:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YWII");
				break;
			case 0x1534:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE YWII");
				break;
			case 0x1535:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YWO");
				break;
			case 0x1536:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE YWO");
				break;
			case 0x1537:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YWOO");
				break;
			case 0x1538:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE YWOO");
				break;
			case 0x1539:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YWA");
				break;
			case 0x153A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE YWA");
				break;
			case 0x153B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YWAA");
				break;
			case 0x153C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE YWAA");
				break;
			case 0x153D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NASKAPI YWAA");
				break;
			case 0x153E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Y");
				break;
			case 0x153F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BIBLE-CREE Y");
				break;
			case 0x1540:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE Y");
				break;
			case 0x1541:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI YI");
				break;
			case 0x1542:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RE");
				break;
			case 0x1543:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS R-CREE RE");
				break;
			case 0x1544:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LE");
				break;
			case 0x1545:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RAAI");
				break;
			case 0x1546:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RI");
				break;
			case 0x1547:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RII");
				break;
			case 0x1548:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RO");
				break;
			case 0x1549:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS ROO");
				break;
			case 0x154A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LO");
				break;
			case 0x154B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RA");
				break;
			case 0x154C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RAA");
				break;
			case 0x154D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LA");
				break;
			case 0x154E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RWAA");
				break;
			case 0x154F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE RWAA");
				break;
			case 0x1550:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS R");
				break;
			case 0x1551:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE R");
				break;
			case 0x1552:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MEDIAL R");
				break;
			case 0x1553:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FE");
				break;
			case 0x1554:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FAAI");
				break;
			case 0x1555:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FI");
				break;
			case 0x1556:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FII");
				break;
			case 0x1557:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FO");
				break;
			case 0x1558:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FOO");
				break;
			case 0x1559:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FA");
				break;
			case 0x155A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FAA");
				break;
			case 0x155B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FWAA");
				break;
			case 0x155C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE FWAA");
				break;
			case 0x155D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS F");
				break;
			case 0x155E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS THE");
				break;
			case 0x155F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS N-CREE THE");
				break;
			case 0x1560:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS THI");
				break;
			case 0x1561:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS N-CREE THI");
				break;
			case 0x1562:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS THII");
				break;
			case 0x1563:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS N-CREE THII");
				break;
			case 0x1564:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS THO");
				break;
			case 0x1565:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS THOO");
				break;
			case 0x1566:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS THA");
				break;
			case 0x1567:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS THAA");
				break;
			case 0x1568:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS THWAA");
				break;
			case 0x1569:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE THWAA");
				break;
			case 0x156A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TH");
				break;
			case 0x156B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTHE");
				break;
			case 0x156C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTHI");
				break;
			case 0x156D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTHO");
				break;
			case 0x156E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTHA");
				break;
			case 0x156F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTH");
				break;
			case 0x1570:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TYE");
				break;
			case 0x1571:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TYI");
				break;
			case 0x1572:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TYO");
				break;
			case 0x1573:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TYA");
				break;
			case 0x1574:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NUNAVIK HE");
				break;
			case 0x1575:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NUNAVIK HI");
				break;
			case 0x1576:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NUNAVIK HII");
				break;
			case 0x1577:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NUNAVIK HO");
				break;
			case 0x1578:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NUNAVIK HOO");
				break;
			case 0x1579:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NUNAVIK HA");
				break;
			case 0x157A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NUNAVIK HAA");
				break;
			case 0x157B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NUNAVIK H");
				break;
			case 0x157C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NUNAVUT H");
				break;
			case 0x157D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS HK");
				break;
			case 0x157E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS QAAI");
				break;
			case 0x157F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS QI");
				break;
			case 0x1580:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS QII");
				break;
			case 0x1581:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS QO");
				break;
			case 0x1582:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS QOO");
				break;
			case 0x1583:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS QA");
				break;
			case 0x1584:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS QAA");
				break;
			case 0x1585:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS Q");
				break;
			case 0x1586:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TLHE");
				break;
			case 0x1587:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TLHI");
				break;
			case 0x1588:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TLHO");
				break;
			case 0x1589:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TLHA");
				break;
			case 0x158A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE RE");
				break;
			case 0x158B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE RI");
				break;
			case 0x158C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE RO");
				break;
			case 0x158D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE RA");
				break;
			case 0x158E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NGAAI");
				break;
			case 0x158F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NGI");
				break;
			case 0x1590:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NGII");
				break;
			case 0x1591:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NGO");
				break;
			case 0x1592:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NGOO");
				break;
			case 0x1593:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NGA");
				break;
			case 0x1594:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NGAA");
				break;
			case 0x1595:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NG");
				break;
			case 0x1596:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NNG");
				break;
			case 0x1597:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI SHE");
				break;
			case 0x1598:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI SHI");
				break;
			case 0x1599:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI SHO");
				break;
			case 0x159A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI SHA");
				break;
			case 0x159B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THE");
				break;
			case 0x159C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THI");
				break;
			case 0x159D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THO");
				break;
			case 0x159E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THA");
				break;
			case 0x159F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE TH");
				break;
			case 0x15A0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LHI");
				break;
			case 0x15A1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LHII");
				break;
			case 0x15A2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LHO");
				break;
			case 0x15A3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LHOO");
				break;
			case 0x15A4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LHA");
				break;
			case 0x15A5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LHAA");
				break;
			case 0x15A6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LH");
				break;
			case 0x15A7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TH-CREE THE");
				break;
			case 0x15A8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TH-CREE THI");
				break;
			case 0x15A9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TH-CREE THII");
				break;
			case 0x15AA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TH-CREE THO");
				break;
			case 0x15AB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TH-CREE THOO");
				break;
			case 0x15AC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TH-CREE THA");
				break;
			case 0x15AD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TH-CREE THAA");
				break;
			case 0x15AE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TH-CREE TH");
				break;
			case 0x15AF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS AIVILIK B");
				break;
			case 0x15B0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT E");
				break;
			case 0x15B1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT I");
				break;
			case 0x15B2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT O");
				break;
			case 0x15B3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT A");
				break;
			case 0x15B4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT WE");
				break;
			case 0x15B5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT WI");
				break;
			case 0x15B6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT WO");
				break;
			case 0x15B7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT WA");
				break;
			case 0x15B8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT NE");
				break;
			case 0x15B9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT NI");
				break;
			case 0x15BA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT NO");
				break;
			case 0x15BB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT NA");
				break;
			case 0x15BC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT KE");
				break;
			case 0x15BD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT KI");
				break;
			case 0x15BE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT KO");
				break;
			case 0x15BF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT KA");
				break;
			case 0x15C0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI HE");
				break;
			case 0x15C1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI HI");
				break;
			case 0x15C2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI HO");
				break;
			case 0x15C3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI HA");
				break;
			case 0x15C4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GHU");
				break;
			case 0x15C5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GHO");
				break;
			case 0x15C6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GHE");
				break;
			case 0x15C7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GHEE");
				break;
			case 0x15C8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GHI");
				break;
			case 0x15C9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GHA");
				break;
			case 0x15CA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER RU");
				break;
			case 0x15CB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER RO");
				break;
			case 0x15CC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER RE");
				break;
			case 0x15CD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER REE");
				break;
			case 0x15CE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER RI");
				break;
			case 0x15CF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER RA");
				break;
			case 0x15D0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER WU");
				break;
			case 0x15D1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER WO");
				break;
			case 0x15D2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER WE");
				break;
			case 0x15D3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER WEE");
				break;
			case 0x15D4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER WI");
				break;
			case 0x15D5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER WA");
				break;
			case 0x15D6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER HWU");
				break;
			case 0x15D7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER HWO");
				break;
			case 0x15D8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER HWE");
				break;
			case 0x15D9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER HWEE");
				break;
			case 0x15DA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER HWI");
				break;
			case 0x15DB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER HWA");
				break;
			case 0x15DC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER THU");
				break;
			case 0x15DD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER THO");
				break;
			case 0x15DE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER THE");
				break;
			case 0x15DF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER THEE");
				break;
			case 0x15E0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER THI");
				break;
			case 0x15E1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER THA");
				break;
			case 0x15E2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTU");
				break;
			case 0x15E3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTO");
				break;
			case 0x15E4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTE");
				break;
			case 0x15E5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTEE");
				break;
			case 0x15E6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTI");
				break;
			case 0x15E7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTA");
				break;
			case 0x15E8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER PU");
				break;
			case 0x15E9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER PO");
				break;
			case 0x15EA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER PE");
				break;
			case 0x15EB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER PEE");
				break;
			case 0x15EC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER PI");
				break;
			case 0x15ED:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER PA");
				break;
			case 0x15EE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER P");
				break;
			case 0x15EF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GU");
				break;
			case 0x15F0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GO");
				break;
			case 0x15F1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GE");
				break;
			case 0x15F2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GEE");
				break;
			case 0x15F3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GI");
				break;
			case 0x15F4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GA");
				break;
			case 0x15F5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KHU");
				break;
			case 0x15F6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KHO");
				break;
			case 0x15F7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KHE");
				break;
			case 0x15F8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KHEE");
				break;
			case 0x15F9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KHI");
				break;
			case 0x15FA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KHA");
				break;
			case 0x15FB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KKU");
				break;
			case 0x15FC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KKO");
				break;
			case 0x15FD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KKE");
				break;
			case 0x15FE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KKEE");
				break;
			case 0x15FF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KKI");
				break;
			case 0x1600:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KKA");
				break;
			case 0x1601:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER KK");
				break;
			case 0x1602:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER NU");
				break;
			case 0x1603:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER NO");
				break;
			case 0x1604:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER NE");
				break;
			case 0x1605:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER NEE");
				break;
			case 0x1606:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER NI");
				break;
			case 0x1607:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER NA");
				break;
			case 0x1608:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER MU");
				break;
			case 0x1609:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER MO");
				break;
			case 0x160A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER ME");
				break;
			case 0x160B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER MEE");
				break;
			case 0x160C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER MI");
				break;
			case 0x160D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER MA");
				break;
			case 0x160E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER YU");
				break;
			case 0x160F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER YO");
				break;
			case 0x1610:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER YE");
				break;
			case 0x1611:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER YEE");
				break;
			case 0x1612:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER YI");
				break;
			case 0x1613:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER YA");
				break;
			case 0x1614:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JU");
				break;
			case 0x1615:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI JU");
				break;
			case 0x1616:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JO");
				break;
			case 0x1617:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JE");
				break;
			case 0x1618:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JEE");
				break;
			case 0x1619:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JI");
				break;
			case 0x161A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI JI");
				break;
			case 0x161B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JA");
				break;
			case 0x161C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JJU");
				break;
			case 0x161D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JJO");
				break;
			case 0x161E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JJE");
				break;
			case 0x161F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JJEE");
				break;
			case 0x1620:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JJI");
				break;
			case 0x1621:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JJA");
				break;
			case 0x1622:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LU");
				break;
			case 0x1623:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LO");
				break;
			case 0x1624:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LE");
				break;
			case 0x1625:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LEE");
				break;
			case 0x1626:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LI");
				break;
			case 0x1627:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LA");
				break;
			case 0x1628:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DLU");
				break;
			case 0x1629:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DLO");
				break;
			case 0x162A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DLE");
				break;
			case 0x162B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DLEE");
				break;
			case 0x162C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DLI");
				break;
			case 0x162D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DLA");
				break;
			case 0x162E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LHU");
				break;
			case 0x162F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LHO");
				break;
			case 0x1630:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LHE");
				break;
			case 0x1631:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LHEE");
				break;
			case 0x1632:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LHI");
				break;
			case 0x1633:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER LHA");
				break;
			case 0x1634:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLHU");
				break;
			case 0x1635:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLHO");
				break;
			case 0x1636:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLHE");
				break;
			case 0x1637:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLHEE");
				break;
			case 0x1638:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLHI");
				break;
			case 0x1639:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLHA");
				break;
			case 0x163A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLU");
				break;
			case 0x163B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLO");
				break;
			case 0x163C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLE");
				break;
			case 0x163D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLEE");
				break;
			case 0x163E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLI");
				break;
			case 0x163F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TLA");
				break;
			case 0x1640:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER ZU");
				break;
			case 0x1641:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER ZO");
				break;
			case 0x1642:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER ZE");
				break;
			case 0x1643:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER ZEE");
				break;
			case 0x1644:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER ZI");
				break;
			case 0x1645:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER ZA");
				break;
			case 0x1646:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER Z");
				break;
			case 0x1647:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER INITIAL Z");
				break;
			case 0x1648:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DZU");
				break;
			case 0x1649:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DZO");
				break;
			case 0x164A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DZE");
				break;
			case 0x164B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DZEE");
				break;
			case 0x164C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DZI");
				break;
			case 0x164D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DZA");
				break;
			case 0x164E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SU");
				break;
			case 0x164F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SO");
				break;
			case 0x1650:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SE");
				break;
			case 0x1651:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SEE");
				break;
			case 0x1652:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SI");
				break;
			case 0x1653:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SA");
				break;
			case 0x1654:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SHU");
				break;
			case 0x1655:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SHO");
				break;
			case 0x1656:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SHE");
				break;
			case 0x1657:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SHEE");
				break;
			case 0x1658:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SHI");
				break;
			case 0x1659:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SHA");
				break;
			case 0x165A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER SH");
				break;
			case 0x165B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TSU");
				break;
			case 0x165C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TSO");
				break;
			case 0x165D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TSE");
				break;
			case 0x165E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TSEE");
				break;
			case 0x165F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TSI");
				break;
			case 0x1660:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TSA");
				break;
			case 0x1661:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER CHU");
				break;
			case 0x1662:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER CHO");
				break;
			case 0x1663:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER CHE");
				break;
			case 0x1664:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER CHEE");
				break;
			case 0x1665:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER CHI");
				break;
			case 0x1666:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER CHA");
				break;
			case 0x1667:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTSU");
				break;
			case 0x1668:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTSO");
				break;
			case 0x1669:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTSE");
				break;
			case 0x166A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTSEE");
				break;
			case 0x166B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTSI");
				break;
			case 0x166C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER TTSA");
				break;
			case 0x166D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CHI SIGN");
				break;
			case 0x166E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FULL STOP");
				break;
			case 0x166F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS QAI");
				break;
			case 0x1670:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NGAI");
				break;
			case 0x1671:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NNGI");
				break;
			case 0x1672:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NNGII");
				break;
			case 0x1673:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NNGO");
				break;
			case 0x1674:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NNGOO");
				break;
			case 0x1675:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NNGA");
				break;
			case 0x1676:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NNGAA");
				break;
			case 0x1677:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THWEE");
				break;
			case 0x1678:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THWI");
				break;
			case 0x1679:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THWII");
				break;
			case 0x167A:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THWO");
				break;
			case 0x167B:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THWOO");
				break;
			case 0x167C:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THWA");
				break;
			case 0x167D:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE THWAA");
				break;
			case 0x167E:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WOODS-CREE FINAL TH");
				break;
			case 0x167F:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BLACKFOOT W");
				break;
			case 0x1680:
				strcpy_s(buf, buf_size, "OGHAM SPACE MARK");
				break;
			case 0x1681:
				strcpy_s(buf, buf_size, "OGHAM LETTER BEITH");
				break;
			case 0x1682:
				strcpy_s(buf, buf_size, "OGHAM LETTER LUIS");
				break;
			case 0x1683:
				strcpy_s(buf, buf_size, "OGHAM LETTER FEARN");
				break;
			case 0x1684:
				strcpy_s(buf, buf_size, "OGHAM LETTER SAIL");
				break;
			case 0x1685:
				strcpy_s(buf, buf_size, "OGHAM LETTER NION");
				break;
			case 0x1686:
				strcpy_s(buf, buf_size, "OGHAM LETTER UATH");
				break;
			case 0x1687:
				strcpy_s(buf, buf_size, "OGHAM LETTER DAIR");
				break;
			case 0x1688:
				strcpy_s(buf, buf_size, "OGHAM LETTER TINNE");
				break;
			case 0x1689:
				strcpy_s(buf, buf_size, "OGHAM LETTER COLL");
				break;
			case 0x168A:
				strcpy_s(buf, buf_size, "OGHAM LETTER CEIRT");
				break;
			case 0x168B:
				strcpy_s(buf, buf_size, "OGHAM LETTER MUIN");
				break;
			case 0x168C:
				strcpy_s(buf, buf_size, "OGHAM LETTER GORT");
				break;
			case 0x168D:
				strcpy_s(buf, buf_size, "OGHAM LETTER NGEADAL");
				break;
			case 0x168E:
				strcpy_s(buf, buf_size, "OGHAM LETTER STRAIF");
				break;
			case 0x168F:
				strcpy_s(buf, buf_size, "OGHAM LETTER RUIS");
				break;
			case 0x1690:
				strcpy_s(buf, buf_size, "OGHAM LETTER AILM");
				break;
			case 0x1691:
				strcpy_s(buf, buf_size, "OGHAM LETTER ONN");
				break;
			case 0x1692:
				strcpy_s(buf, buf_size, "OGHAM LETTER UR");
				break;
			case 0x1693:
				strcpy_s(buf, buf_size, "OGHAM LETTER EADHADH");
				break;
			case 0x1694:
				strcpy_s(buf, buf_size, "OGHAM LETTER IODHADH");
				break;
			case 0x1695:
				strcpy_s(buf, buf_size, "OGHAM LETTER EABHADH");
				break;
			case 0x1696:
				strcpy_s(buf, buf_size, "OGHAM LETTER OR");
				break;
			case 0x1697:
				strcpy_s(buf, buf_size, "OGHAM LETTER UILLEANN");
				break;
			case 0x1698:
				strcpy_s(buf, buf_size, "OGHAM LETTER IFIN");
				break;
			case 0x1699:
				strcpy_s(buf, buf_size, "OGHAM LETTER EAMHANCHOLL");
				break;
			case 0x169A:
				strcpy_s(buf, buf_size, "OGHAM LETTER PEITH");
				break;
			case 0x169B:
				strcpy_s(buf, buf_size, "OGHAM FEATHER MARK");
				break;
			case 0x169C:
				strcpy_s(buf, buf_size, "OGHAM REVERSED FEATHER MARK");
				break;
			case 0x16A0:
				strcpy_s(buf, buf_size, "RUNIC LETTER FEHU FEOH FE F");
				break;
			case 0x16A1:
				strcpy_s(buf, buf_size, "RUNIC LETTER V");
				break;
			case 0x16A2:
				strcpy_s(buf, buf_size, "RUNIC LETTER URUZ UR U");
				break;
			case 0x16A3:
				strcpy_s(buf, buf_size, "RUNIC LETTER YR");
				break;
			case 0x16A4:
				strcpy_s(buf, buf_size, "RUNIC LETTER Y");
				break;
			case 0x16A5:
				strcpy_s(buf, buf_size, "RUNIC LETTER W");
				break;
			case 0x16A6:
				strcpy_s(buf, buf_size, "RUNIC LETTER THURISAZ THURS THORN");
				break;
			case 0x16A7:
				strcpy_s(buf, buf_size, "RUNIC LETTER ETH");
				break;
			case 0x16A8:
				strcpy_s(buf, buf_size, "RUNIC LETTER ANSUZ A");
				break;
			case 0x16A9:
				strcpy_s(buf, buf_size, "RUNIC LETTER OS O");
				break;
			case 0x16AA:
				strcpy_s(buf, buf_size, "RUNIC LETTER AC A");
				break;
			case 0x16AB:
				strcpy_s(buf, buf_size, "RUNIC LETTER AESC");
				break;
			case 0x16AC:
				strcpy_s(buf, buf_size, "RUNIC LETTER LONG-BRANCH-OSS O");
				break;
			case 0x16AD:
				strcpy_s(buf, buf_size, "RUNIC LETTER SHORT-TWIG-OSS O");
				break;
			case 0x16AE:
				strcpy_s(buf, buf_size, "RUNIC LETTER O");
				break;
			case 0x16AF:
				strcpy_s(buf, buf_size, "RUNIC LETTER OE");
				break;
			case 0x16B0:
				strcpy_s(buf, buf_size, "RUNIC LETTER ON");
				break;
			case 0x16B1:
				strcpy_s(buf, buf_size, "RUNIC LETTER RAIDO RAD REID R");
				break;
			case 0x16B2:
				strcpy_s(buf, buf_size, "RUNIC LETTER KAUNA");
				break;
			case 0x16B3:
				strcpy_s(buf, buf_size, "RUNIC LETTER CEN");
				break;
			case 0x16B4:
				strcpy_s(buf, buf_size, "RUNIC LETTER KAUN K");
				break;
			case 0x16B5:
				strcpy_s(buf, buf_size, "RUNIC LETTER G");
				break;
			case 0x16B6:
				strcpy_s(buf, buf_size, "RUNIC LETTER ENG");
				break;
			case 0x16B7:
				strcpy_s(buf, buf_size, "RUNIC LETTER GEBO GYFU G");
				break;
			case 0x16B8:
				strcpy_s(buf, buf_size, "RUNIC LETTER GAR");
				break;
			case 0x16B9:
				strcpy_s(buf, buf_size, "RUNIC LETTER WUNJO WYNN W");
				break;
			case 0x16BA:
				strcpy_s(buf, buf_size, "RUNIC LETTER HAGLAZ H");
				break;
			case 0x16BB:
				strcpy_s(buf, buf_size, "RUNIC LETTER HAEGL H");
				break;
			case 0x16BC:
				strcpy_s(buf, buf_size, "RUNIC LETTER LONG-BRANCH-HAGALL H");
				break;
			case 0x16BD:
				strcpy_s(buf, buf_size, "RUNIC LETTER SHORT-TWIG-HAGALL H");
				break;
			case 0x16BE:
				strcpy_s(buf, buf_size, "RUNIC LETTER NAUDIZ NYD NAUD N");
				break;
			case 0x16BF:
				strcpy_s(buf, buf_size, "RUNIC LETTER SHORT-TWIG-NAUD N");
				break;
			case 0x16C0:
				strcpy_s(buf, buf_size, "RUNIC LETTER DOTTED-N");
				break;
			case 0x16C1:
				strcpy_s(buf, buf_size, "RUNIC LETTER ISAZ IS ISS I");
				break;
			case 0x16C2:
				strcpy_s(buf, buf_size, "RUNIC LETTER E");
				break;
			case 0x16C3:
				strcpy_s(buf, buf_size, "RUNIC LETTER JERAN J");
				break;
			case 0x16C4:
				strcpy_s(buf, buf_size, "RUNIC LETTER GER");
				break;
			case 0x16C5:
				strcpy_s(buf, buf_size, "RUNIC LETTER LONG-BRANCH-AR AE");
				break;
			case 0x16C6:
				strcpy_s(buf, buf_size, "RUNIC LETTER SHORT-TWIG-AR A");
				break;
			case 0x16C7:
				strcpy_s(buf, buf_size, "RUNIC LETTER IWAZ EOH");
				break;
			case 0x16C8:
				strcpy_s(buf, buf_size, "RUNIC LETTER PERTHO PEORTH P");
				break;
			case 0x16C9:
				strcpy_s(buf, buf_size, "RUNIC LETTER ALGIZ EOLHX");
				break;
			case 0x16CA:
				strcpy_s(buf, buf_size, "RUNIC LETTER SOWILO S");
				break;
			case 0x16CB:
				strcpy_s(buf, buf_size, "RUNIC LETTER SIGEL LONG-BRANCH-SOL S");
				break;
			case 0x16CC:
				strcpy_s(buf, buf_size, "RUNIC LETTER SHORT-TWIG-SOL S");
				break;
			case 0x16CD:
				strcpy_s(buf, buf_size, "RUNIC LETTER C");
				break;
			case 0x16CE:
				strcpy_s(buf, buf_size, "RUNIC LETTER Z");
				break;
			case 0x16CF:
				strcpy_s(buf, buf_size, "RUNIC LETTER TIWAZ TIR TYR T");
				break;
			case 0x16D0:
				strcpy_s(buf, buf_size, "RUNIC LETTER SHORT-TWIG-TYR T");
				break;
			case 0x16D1:
				strcpy_s(buf, buf_size, "RUNIC LETTER D");
				break;
			case 0x16D2:
				strcpy_s(buf, buf_size, "RUNIC LETTER BERKANAN BEORC BJARKAN B");
				break;
			case 0x16D3:
				strcpy_s(buf, buf_size, "RUNIC LETTER SHORT-TWIG-BJARKAN B");
				break;
			case 0x16D4:
				strcpy_s(buf, buf_size, "RUNIC LETTER DOTTED-P");
				break;
			case 0x16D5:
				strcpy_s(buf, buf_size, "RUNIC LETTER OPEN-P");
				break;
			case 0x16D6:
				strcpy_s(buf, buf_size, "RUNIC LETTER EHWAZ EH E");
				break;
			case 0x16D7:
				strcpy_s(buf, buf_size, "RUNIC LETTER MANNAZ MAN M");
				break;
			case 0x16D8:
				strcpy_s(buf, buf_size, "RUNIC LETTER LONG-BRANCH-MADR M");
				break;
			case 0x16D9:
				strcpy_s(buf, buf_size, "RUNIC LETTER SHORT-TWIG-MADR M");
				break;
			case 0x16DA:
				strcpy_s(buf, buf_size, "RUNIC LETTER LAUKAZ LAGU LOGR L");
				break;
			case 0x16DB:
				strcpy_s(buf, buf_size, "RUNIC LETTER DOTTED-L");
				break;
			case 0x16DC:
				strcpy_s(buf, buf_size, "RUNIC LETTER INGWAZ");
				break;
			case 0x16DD:
				strcpy_s(buf, buf_size, "RUNIC LETTER ING");
				break;
			case 0x16DE:
				strcpy_s(buf, buf_size, "RUNIC LETTER DAGAZ DAEG D");
				break;
			case 0x16DF:
				strcpy_s(buf, buf_size, "RUNIC LETTER OTHALAN ETHEL O");
				break;
			case 0x16E0:
				strcpy_s(buf, buf_size, "RUNIC LETTER EAR");
				break;
			case 0x16E1:
				strcpy_s(buf, buf_size, "RUNIC LETTER IOR");
				break;
			case 0x16E2:
				strcpy_s(buf, buf_size, "RUNIC LETTER CWEORTH");
				break;
			case 0x16E3:
				strcpy_s(buf, buf_size, "RUNIC LETTER CALC");
				break;
			case 0x16E4:
				strcpy_s(buf, buf_size, "RUNIC LETTER CEALC");
				break;
			case 0x16E5:
				strcpy_s(buf, buf_size, "RUNIC LETTER STAN");
				break;
			case 0x16E6:
				strcpy_s(buf, buf_size, "RUNIC LETTER LONG-BRANCH-YR");
				break;
			case 0x16E7:
				strcpy_s(buf, buf_size, "RUNIC LETTER SHORT-TWIG-YR");
				break;
			case 0x16E8:
				strcpy_s(buf, buf_size, "RUNIC LETTER ICELANDIC-YR");
				break;
			case 0x16E9:
				strcpy_s(buf, buf_size, "RUNIC LETTER Q");
				break;
			case 0x16EA:
				strcpy_s(buf, buf_size, "RUNIC LETTER X");
				break;
			case 0x16EB:
				strcpy_s(buf, buf_size, "RUNIC SINGLE PUNCTUATION");
				break;
			case 0x16EC:
				strcpy_s(buf, buf_size, "RUNIC MULTIPLE PUNCTUATION");
				break;
			case 0x16ED:
				strcpy_s(buf, buf_size, "RUNIC CROSS PUNCTUATION");
				break;
			case 0x16EE:
				strcpy_s(buf, buf_size, "RUNIC ARLAUG SYMBOL");
				break;
			case 0x16EF:
				strcpy_s(buf, buf_size, "RUNIC TVIMADUR SYMBOL");
				break;
			case 0x16F0:
				strcpy_s(buf, buf_size, "RUNIC BELGTHOR SYMBOL");
				break;
			case 0x16F1:
				strcpy_s(buf, buf_size, "RUNIC LETTER K");
				break;
			case 0x16F2:
				strcpy_s(buf, buf_size, "RUNIC LETTER SH");
				break;
			case 0x16F3:
				strcpy_s(buf, buf_size, "RUNIC LETTER OO");
				break;
			case 0x16F4:
				strcpy_s(buf, buf_size, "RUNIC LETTER FRANKS CASKET OS");
				break;
			case 0x16F5:
				strcpy_s(buf, buf_size, "RUNIC LETTER FRANKS CASKET IS");
				break;
			case 0x16F6:
				strcpy_s(buf, buf_size, "RUNIC LETTER FRANKS CASKET EH");
				break;
			case 0x16F7:
				strcpy_s(buf, buf_size, "RUNIC LETTER FRANKS CASKET AC");
				break;
			case 0x16F8:
				strcpy_s(buf, buf_size, "RUNIC LETTER FRANKS CASKET AESC");
				break;
			case 0x1700:
				strcpy_s(buf, buf_size, "TAGALOG LETTER A");
				break;
			case 0x1701:
				strcpy_s(buf, buf_size, "TAGALOG LETTER I");
				break;
			case 0x1702:
				strcpy_s(buf, buf_size, "TAGALOG LETTER U");
				break;
			case 0x1703:
				strcpy_s(buf, buf_size, "TAGALOG LETTER KA");
				break;
			case 0x1704:
				strcpy_s(buf, buf_size, "TAGALOG LETTER GA");
				break;
			case 0x1705:
				strcpy_s(buf, buf_size, "TAGALOG LETTER NGA");
				break;
			case 0x1706:
				strcpy_s(buf, buf_size, "TAGALOG LETTER TA");
				break;
			case 0x1707:
				strcpy_s(buf, buf_size, "TAGALOG LETTER DA");
				break;
			case 0x1708:
				strcpy_s(buf, buf_size, "TAGALOG LETTER NA");
				break;
			case 0x1709:
				strcpy_s(buf, buf_size, "TAGALOG LETTER PA");
				break;
			case 0x170A:
				strcpy_s(buf, buf_size, "TAGALOG LETTER BA");
				break;
			case 0x170B:
				strcpy_s(buf, buf_size, "TAGALOG LETTER MA");
				break;
			case 0x170C:
				strcpy_s(buf, buf_size, "TAGALOG LETTER YA");
				break;
			case 0x170E:
				strcpy_s(buf, buf_size, "TAGALOG LETTER LA");
				break;
			case 0x170F:
				strcpy_s(buf, buf_size, "TAGALOG LETTER WA");
				break;
			case 0x1710:
				strcpy_s(buf, buf_size, "TAGALOG LETTER SA");
				break;
			case 0x1711:
				strcpy_s(buf, buf_size, "TAGALOG LETTER HA");
				break;
			case 0x1712:
				strcpy_s(buf, buf_size, "TAGALOG VOWEL SIGN I");
				break;
			case 0x1713:
				strcpy_s(buf, buf_size, "TAGALOG VOWEL SIGN U");
				break;
			case 0x1714:
				strcpy_s(buf, buf_size, "TAGALOG SIGN VIRAMA");
				break;
			case 0x1720:
				strcpy_s(buf, buf_size, "HANUNOO LETTER A");
				break;
			case 0x1721:
				strcpy_s(buf, buf_size, "HANUNOO LETTER I");
				break;
			case 0x1722:
				strcpy_s(buf, buf_size, "HANUNOO LETTER U");
				break;
			case 0x1723:
				strcpy_s(buf, buf_size, "HANUNOO LETTER KA");
				break;
			case 0x1724:
				strcpy_s(buf, buf_size, "HANUNOO LETTER GA");
				break;
			case 0x1725:
				strcpy_s(buf, buf_size, "HANUNOO LETTER NGA");
				break;
			case 0x1726:
				strcpy_s(buf, buf_size, "HANUNOO LETTER TA");
				break;
			case 0x1727:
				strcpy_s(buf, buf_size, "HANUNOO LETTER DA");
				break;
			case 0x1728:
				strcpy_s(buf, buf_size, "HANUNOO LETTER NA");
				break;
			case 0x1729:
				strcpy_s(buf, buf_size, "HANUNOO LETTER PA");
				break;
			case 0x172A:
				strcpy_s(buf, buf_size, "HANUNOO LETTER BA");
				break;
			case 0x172B:
				strcpy_s(buf, buf_size, "HANUNOO LETTER MA");
				break;
			case 0x172C:
				strcpy_s(buf, buf_size, "HANUNOO LETTER YA");
				break;
			case 0x172D:
				strcpy_s(buf, buf_size, "HANUNOO LETTER RA");
				break;
			case 0x172E:
				strcpy_s(buf, buf_size, "HANUNOO LETTER LA");
				break;
			case 0x172F:
				strcpy_s(buf, buf_size, "HANUNOO LETTER WA");
				break;
			case 0x1730:
				strcpy_s(buf, buf_size, "HANUNOO LETTER SA");
				break;
			case 0x1731:
				strcpy_s(buf, buf_size, "HANUNOO LETTER HA");
				break;
			case 0x1732:
				strcpy_s(buf, buf_size, "HANUNOO VOWEL SIGN I");
				break;
			case 0x1733:
				strcpy_s(buf, buf_size, "HANUNOO VOWEL SIGN U");
				break;
			case 0x1734:
				strcpy_s(buf, buf_size, "HANUNOO SIGN PAMUDPOD");
				break;
			case 0x1735:
				strcpy_s(buf, buf_size, "PHILIPPINE SINGLE PUNCTUATION");
				break;
			case 0x1736:
				strcpy_s(buf, buf_size, "PHILIPPINE DOUBLE PUNCTUATION");
				break;
			case 0x1740:
				strcpy_s(buf, buf_size, "BUHID LETTER A");
				break;
			case 0x1741:
				strcpy_s(buf, buf_size, "BUHID LETTER I");
				break;
			case 0x1742:
				strcpy_s(buf, buf_size, "BUHID LETTER U");
				break;
			case 0x1743:
				strcpy_s(buf, buf_size, "BUHID LETTER KA");
				break;
			case 0x1744:
				strcpy_s(buf, buf_size, "BUHID LETTER GA");
				break;
			case 0x1745:
				strcpy_s(buf, buf_size, "BUHID LETTER NGA");
				break;
			case 0x1746:
				strcpy_s(buf, buf_size, "BUHID LETTER TA");
				break;
			case 0x1747:
				strcpy_s(buf, buf_size, "BUHID LETTER DA");
				break;
			case 0x1748:
				strcpy_s(buf, buf_size, "BUHID LETTER NA");
				break;
			case 0x1749:
				strcpy_s(buf, buf_size, "BUHID LETTER PA");
				break;
			case 0x174A:
				strcpy_s(buf, buf_size, "BUHID LETTER BA");
				break;
			case 0x174B:
				strcpy_s(buf, buf_size, "BUHID LETTER MA");
				break;
			case 0x174C:
				strcpy_s(buf, buf_size, "BUHID LETTER YA");
				break;
			case 0x174D:
				strcpy_s(buf, buf_size, "BUHID LETTER RA");
				break;
			case 0x174E:
				strcpy_s(buf, buf_size, "BUHID LETTER LA");
				break;
			case 0x174F:
				strcpy_s(buf, buf_size, "BUHID LETTER WA");
				break;
			case 0x1750:
				strcpy_s(buf, buf_size, "BUHID LETTER SA");
				break;
			case 0x1751:
				strcpy_s(buf, buf_size, "BUHID LETTER HA");
				break;
			case 0x1752:
				strcpy_s(buf, buf_size, "BUHID VOWEL SIGN I");
				break;
			case 0x1753:
				strcpy_s(buf, buf_size, "BUHID VOWEL SIGN U");
				break;
			case 0x1760:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER A");
				break;
			case 0x1761:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER I");
				break;
			case 0x1762:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER U");
				break;
			case 0x1763:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER KA");
				break;
			case 0x1764:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER GA");
				break;
			case 0x1765:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER NGA");
				break;
			case 0x1766:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER TA");
				break;
			case 0x1767:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER DA");
				break;
			case 0x1768:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER NA");
				break;
			case 0x1769:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER PA");
				break;
			case 0x176A:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER BA");
				break;
			case 0x176B:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER MA");
				break;
			case 0x176C:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER YA");
				break;
			case 0x176E:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER LA");
				break;
			case 0x176F:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER WA");
				break;
			case 0x1770:
				strcpy_s(buf, buf_size, "TAGBANWA LETTER SA");
				break;
			case 0x1772:
				strcpy_s(buf, buf_size, "TAGBANWA VOWEL SIGN I");
				break;
			case 0x1773:
				strcpy_s(buf, buf_size, "TAGBANWA VOWEL SIGN U");
				break;
			case 0x1780:
				strcpy_s(buf, buf_size, "KHMER LETTER KA");
				break;
			case 0x1781:
				strcpy_s(buf, buf_size, "KHMER LETTER KHA");
				break;
			case 0x1782:
				strcpy_s(buf, buf_size, "KHMER LETTER KO");
				break;
			case 0x1783:
				strcpy_s(buf, buf_size, "KHMER LETTER KHO");
				break;
			case 0x1784:
				strcpy_s(buf, buf_size, "KHMER LETTER NGO");
				break;
			case 0x1785:
				strcpy_s(buf, buf_size, "KHMER LETTER CA");
				break;
			case 0x1786:
				strcpy_s(buf, buf_size, "KHMER LETTER CHA");
				break;
			case 0x1787:
				strcpy_s(buf, buf_size, "KHMER LETTER CO");
				break;
			case 0x1788:
				strcpy_s(buf, buf_size, "KHMER LETTER CHO");
				break;
			case 0x1789:
				strcpy_s(buf, buf_size, "KHMER LETTER NYO");
				break;
			case 0x178A:
				strcpy_s(buf, buf_size, "KHMER LETTER DA");
				break;
			case 0x178B:
				strcpy_s(buf, buf_size, "KHMER LETTER TTHA");
				break;
			case 0x178C:
				strcpy_s(buf, buf_size, "KHMER LETTER DO");
				break;
			case 0x178D:
				strcpy_s(buf, buf_size, "KHMER LETTER TTHO");
				break;
			case 0x178E:
				strcpy_s(buf, buf_size, "KHMER LETTER NNO");
				break;
			case 0x178F:
				strcpy_s(buf, buf_size, "KHMER LETTER TA");
				break;
			case 0x1790:
				strcpy_s(buf, buf_size, "KHMER LETTER THA");
				break;
			case 0x1791:
				strcpy_s(buf, buf_size, "KHMER LETTER TO");
				break;
			case 0x1792:
				strcpy_s(buf, buf_size, "KHMER LETTER THO");
				break;
			case 0x1793:
				strcpy_s(buf, buf_size, "KHMER LETTER NO");
				break;
			case 0x1794:
				strcpy_s(buf, buf_size, "KHMER LETTER BA");
				break;
			case 0x1795:
				strcpy_s(buf, buf_size, "KHMER LETTER PHA");
				break;
			case 0x1796:
				strcpy_s(buf, buf_size, "KHMER LETTER PO");
				break;
			case 0x1797:
				strcpy_s(buf, buf_size, "KHMER LETTER PHO");
				break;
			case 0x1798:
				strcpy_s(buf, buf_size, "KHMER LETTER MO");
				break;
			case 0x1799:
				strcpy_s(buf, buf_size, "KHMER LETTER YO");
				break;
			case 0x179A:
				strcpy_s(buf, buf_size, "KHMER LETTER RO");
				break;
			case 0x179B:
				strcpy_s(buf, buf_size, "KHMER LETTER LO");
				break;
			case 0x179C:
				strcpy_s(buf, buf_size, "KHMER LETTER VO");
				break;
			case 0x179D:
				strcpy_s(buf, buf_size, "KHMER LETTER SHA");
				break;
			case 0x179E:
				strcpy_s(buf, buf_size, "KHMER LETTER SSO");
				break;
			case 0x179F:
				strcpy_s(buf, buf_size, "KHMER LETTER SA");
				break;
			case 0x17A0:
				strcpy_s(buf, buf_size, "KHMER LETTER HA");
				break;
			case 0x17A1:
				strcpy_s(buf, buf_size, "KHMER LETTER LA");
				break;
			case 0x17A2:
				strcpy_s(buf, buf_size, "KHMER LETTER QA");
				break;
			case 0x17A3:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QAQ");
				break;
			case 0x17A4:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QAA");
				break;
			case 0x17A5:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QI");
				break;
			case 0x17A6:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QII");
				break;
			case 0x17A7:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QU");
				break;
			case 0x17A8:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QUK");
				break;
			case 0x17A9:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QUU");
				break;
			case 0x17AA:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QUUV");
				break;
			case 0x17AB:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL RY");
				break;
			case 0x17AC:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL RYY");
				break;
			case 0x17AD:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL LY");
				break;
			case 0x17AE:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL LYY");
				break;
			case 0x17AF:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QE");
				break;
			case 0x17B0:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QAI");
				break;
			case 0x17B1:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QOO TYPE ONE");
				break;
			case 0x17B2:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QOO TYPE TWO");
				break;
			case 0x17B3:
				strcpy_s(buf, buf_size, "KHMER INDEPENDENT VOWEL QAU");
				break;
			case 0x17B4:
				strcpy_s(buf, buf_size, "KHMER VOWEL INHERENT AQ");
				break;
			case 0x17B5:
				strcpy_s(buf, buf_size, "KHMER VOWEL INHERENT AA");
				break;
			case 0x17B6:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN AA");
				break;
			case 0x17B7:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN I");
				break;
			case 0x17B8:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN II");
				break;
			case 0x17B9:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN Y");
				break;
			case 0x17BA:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN YY");
				break;
			case 0x17BB:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN U");
				break;
			case 0x17BC:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN UU");
				break;
			case 0x17BD:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN UA");
				break;
			case 0x17BE:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN OE");
				break;
			case 0x17BF:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN YA");
				break;
			case 0x17C0:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN IE");
				break;
			case 0x17C1:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN E");
				break;
			case 0x17C2:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN AE");
				break;
			case 0x17C3:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN AI");
				break;
			case 0x17C4:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN OO");
				break;
			case 0x17C5:
				strcpy_s(buf, buf_size, "KHMER VOWEL SIGN AU");
				break;
			case 0x17C6:
				strcpy_s(buf, buf_size, "KHMER SIGN NIKAHIT");
				break;
			case 0x17C7:
				strcpy_s(buf, buf_size, "KHMER SIGN REAHMUK");
				break;
			case 0x17C8:
				strcpy_s(buf, buf_size, "KHMER SIGN YUUKALEAPINTU");
				break;
			case 0x17C9:
				strcpy_s(buf, buf_size, "KHMER SIGN MUUSIKATOAN");
				break;
			case 0x17CA:
				strcpy_s(buf, buf_size, "KHMER SIGN TRIISAP");
				break;
			case 0x17CB:
				strcpy_s(buf, buf_size, "KHMER SIGN BANTOC");
				break;
			case 0x17CC:
				strcpy_s(buf, buf_size, "KHMER SIGN ROBAT");
				break;
			case 0x17CD:
				strcpy_s(buf, buf_size, "KHMER SIGN TOANDAKHIAT");
				break;
			case 0x17CE:
				strcpy_s(buf, buf_size, "KHMER SIGN KAKABAT");
				break;
			case 0x17CF:
				strcpy_s(buf, buf_size, "KHMER SIGN AHSDA");
				break;
			case 0x17D0:
				strcpy_s(buf, buf_size, "KHMER SIGN SAMYOK SANNYA");
				break;
			case 0x17D1:
				strcpy_s(buf, buf_size, "KHMER SIGN VIRIAM");
				break;
			case 0x17D2:
				strcpy_s(buf, buf_size, "KHMER SIGN COENG");
				break;
			case 0x17D3:
				strcpy_s(buf, buf_size, "KHMER SIGN BATHAMASAT");
				break;
			case 0x17D4:
				strcpy_s(buf, buf_size, "KHMER SIGN KHAN");
				break;
			case 0x17D5:
				strcpy_s(buf, buf_size, "KHMER SIGN BARIYOOSAN");
				break;
			case 0x17D6:
				strcpy_s(buf, buf_size, "KHMER SIGN CAMNUC PII KUUH");
				break;
			case 0x17D7:
				strcpy_s(buf, buf_size, "KHMER SIGN LEK TOO");
				break;
			case 0x17D8:
				strcpy_s(buf, buf_size, "KHMER SIGN BEYYAL");
				break;
			case 0x17D9:
				strcpy_s(buf, buf_size, "KHMER SIGN PHNAEK MUAN");
				break;
			case 0x17DA:
				strcpy_s(buf, buf_size, "KHMER SIGN KOOMUUT");
				break;
			case 0x17DB:
				strcpy_s(buf, buf_size, "KHMER CURRENCY SYMBOL RIEL");
				break;
			case 0x17DC:
				strcpy_s(buf, buf_size, "KHMER SIGN AVAKRAHASANYA");
				break;
			case 0x17DD:
				strcpy_s(buf, buf_size, "KHMER SIGN ATTHACAN");
				break;
			case 0x17E0:
				strcpy_s(buf, buf_size, "KHMER DIGIT ZERO");
				break;
			case 0x17E1:
				strcpy_s(buf, buf_size, "KHMER DIGIT ONE");
				break;
			case 0x17E2:
				strcpy_s(buf, buf_size, "KHMER DIGIT TWO");
				break;
			case 0x17E3:
				strcpy_s(buf, buf_size, "KHMER DIGIT THREE");
				break;
			case 0x17E4:
				strcpy_s(buf, buf_size, "KHMER DIGIT FOUR");
				break;
			case 0x17E5:
				strcpy_s(buf, buf_size, "KHMER DIGIT FIVE");
				break;
			case 0x17E6:
				strcpy_s(buf, buf_size, "KHMER DIGIT SIX");
				break;
			case 0x17E7:
				strcpy_s(buf, buf_size, "KHMER DIGIT SEVEN");
				break;
			case 0x17E8:
				strcpy_s(buf, buf_size, "KHMER DIGIT EIGHT");
				break;
			case 0x17E9:
				strcpy_s(buf, buf_size, "KHMER DIGIT NINE");
				break;
			case 0x17F0:
				strcpy_s(buf, buf_size, "KHMER SYMBOL LEK ATTAK SON");
				break;
			case 0x17F1:
				strcpy_s(buf, buf_size, "KHMER SYMBOL LEK ATTAK MUOY");
				break;
			case 0x17F2:
				strcpy_s(buf, buf_size, "KHMER SYMBOL LEK ATTAK PII");
				break;
			case 0x17F3:
				strcpy_s(buf, buf_size, "KHMER SYMBOL LEK ATTAK BEI");
				break;
			case 0x17F4:
				strcpy_s(buf, buf_size, "KHMER SYMBOL LEK ATTAK BUON");
				break;
			case 0x17F5:
				strcpy_s(buf, buf_size, "KHMER SYMBOL LEK ATTAK PRAM");
				break;
			case 0x17F6:
				strcpy_s(buf, buf_size, "KHMER SYMBOL LEK ATTAK PRAM-MUOY");
				break;
			case 0x17F7:
				strcpy_s(buf, buf_size, "KHMER SYMBOL LEK ATTAK PRAM-PII");
				break;
			case 0x17F8:
				strcpy_s(buf, buf_size, "KHMER SYMBOL LEK ATTAK PRAM-BEI");
				break;
			case 0x17F9:
				strcpy_s(buf, buf_size, "KHMER SYMBOL LEK ATTAK PRAM-BUON");
				break;
			case 0x1800:
				strcpy_s(buf, buf_size, "MONGOLIAN BIRGA");
				break;
			case 0x1801:
				strcpy_s(buf, buf_size, "MONGOLIAN ELLIPSIS");
				break;
			case 0x1802:
				strcpy_s(buf, buf_size, "MONGOLIAN COMMA");
				break;
			case 0x1803:
				strcpy_s(buf, buf_size, "MONGOLIAN FULL STOP");
				break;
			case 0x1804:
				strcpy_s(buf, buf_size, "MONGOLIAN COLON");
				break;
			case 0x1805:
				strcpy_s(buf, buf_size, "MONGOLIAN FOUR DOTS");
				break;
			case 0x1806:
				strcpy_s(buf, buf_size, "MONGOLIAN TODO SOFT HYPHEN");
				break;
			case 0x1807:
				strcpy_s(buf, buf_size, "MONGOLIAN SIBE SYLLABLE BOUNDARY MARKER");
				break;
			case 0x1808:
				strcpy_s(buf, buf_size, "MONGOLIAN MANCHU COMMA");
				break;
			case 0x1809:
				strcpy_s(buf, buf_size, "MONGOLIAN MANCHU FULL STOP");
				break;
			case 0x180A:
				strcpy_s(buf, buf_size, "MONGOLIAN NIRUGU");
				break;
			case 0x180B:
				strcpy_s(buf, buf_size, "MONGOLIAN FREE VARIATION SELECTOR ONE");
				break;
			case 0x180C:
				strcpy_s(buf, buf_size, "MONGOLIAN FREE VARIATION SELECTOR TWO");
				break;
			case 0x180D:
				strcpy_s(buf, buf_size, "MONGOLIAN FREE VARIATION SELECTOR THREE");
				break;
			case 0x180E:
				strcpy_s(buf, buf_size, "MONGOLIAN VOWEL SEPARATOR");
				break;
			case 0x1810:
				strcpy_s(buf, buf_size, "MONGOLIAN DIGIT ZERO");
				break;
			case 0x1811:
				strcpy_s(buf, buf_size, "MONGOLIAN DIGIT ONE");
				break;
			case 0x1812:
				strcpy_s(buf, buf_size, "MONGOLIAN DIGIT TWO");
				break;
			case 0x1813:
				strcpy_s(buf, buf_size, "MONGOLIAN DIGIT THREE");
				break;
			case 0x1814:
				strcpy_s(buf, buf_size, "MONGOLIAN DIGIT FOUR");
				break;
			case 0x1815:
				strcpy_s(buf, buf_size, "MONGOLIAN DIGIT FIVE");
				break;
			case 0x1816:
				strcpy_s(buf, buf_size, "MONGOLIAN DIGIT SIX");
				break;
			case 0x1817:
				strcpy_s(buf, buf_size, "MONGOLIAN DIGIT SEVEN");
				break;
			case 0x1818:
				strcpy_s(buf, buf_size, "MONGOLIAN DIGIT EIGHT");
				break;
			case 0x1819:
				strcpy_s(buf, buf_size, "MONGOLIAN DIGIT NINE");
				break;
			case 0x1820:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER A");
				break;
			case 0x1821:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER E");
				break;
			case 0x1822:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER I");
				break;
			case 0x1823:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER O");
				break;
			case 0x1824:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER U");
				break;
			case 0x1825:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER OE");
				break;
			case 0x1826:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER UE");
				break;
			case 0x1827:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER EE");
				break;
			case 0x1828:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER NA");
				break;
			case 0x1829:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ANG");
				break;
			case 0x182A:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER BA");
				break;
			case 0x182B:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER PA");
				break;
			case 0x182C:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER QA");
				break;
			case 0x182D:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER GA");
				break;
			case 0x182E:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MA");
				break;
			case 0x182F:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER LA");
				break;
			case 0x1830:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SA");
				break;
			case 0x1831:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SHA");
				break;
			case 0x1832:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TA");
				break;
			case 0x1833:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER DA");
				break;
			case 0x1834:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER CHA");
				break;
			case 0x1835:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER JA");
				break;
			case 0x1836:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER YA");
				break;
			case 0x1837:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER RA");
				break;
			case 0x1838:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER WA");
				break;
			case 0x1839:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER FA");
				break;
			case 0x183A:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER KA");
				break;
			case 0x183B:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER KHA");
				break;
			case 0x183C:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TSA");
				break;
			case 0x183D:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ZA");
				break;
			case 0x183E:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER HAA");
				break;
			case 0x183F:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ZRA");
				break;
			case 0x1840:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER LHA");
				break;
			case 0x1841:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ZHI");
				break;
			case 0x1842:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER CHI");
				break;
			case 0x1843:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO LONG VOWEL SIGN");
				break;
			case 0x1844:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO E");
				break;
			case 0x1845:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO I");
				break;
			case 0x1846:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO O");
				break;
			case 0x1847:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO U");
				break;
			case 0x1848:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO OE");
				break;
			case 0x1849:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO UE");
				break;
			case 0x184A:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO ANG");
				break;
			case 0x184B:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO BA");
				break;
			case 0x184C:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO PA");
				break;
			case 0x184D:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO QA");
				break;
			case 0x184E:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO GA");
				break;
			case 0x184F:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO MA");
				break;
			case 0x1850:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO TA");
				break;
			case 0x1851:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO DA");
				break;
			case 0x1852:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO CHA");
				break;
			case 0x1853:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO JA");
				break;
			case 0x1854:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO TSA");
				break;
			case 0x1855:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO YA");
				break;
			case 0x1856:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO WA");
				break;
			case 0x1857:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO KA");
				break;
			case 0x1858:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO GAA");
				break;
			case 0x1859:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO HAA");
				break;
			case 0x185A:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO JIA");
				break;
			case 0x185B:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO NIA");
				break;
			case 0x185C:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO DZA");
				break;
			case 0x185D:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE E");
				break;
			case 0x185E:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE I");
				break;
			case 0x185F:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE IY");
				break;
			case 0x1860:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE UE");
				break;
			case 0x1861:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE U");
				break;
			case 0x1862:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE ANG");
				break;
			case 0x1863:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE KA");
				break;
			case 0x1864:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE GA");
				break;
			case 0x1865:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE HA");
				break;
			case 0x1866:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE PA");
				break;
			case 0x1867:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE SHA");
				break;
			case 0x1868:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE TA");
				break;
			case 0x1869:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE DA");
				break;
			case 0x186A:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE JA");
				break;
			case 0x186B:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE FA");
				break;
			case 0x186C:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE GAA");
				break;
			case 0x186D:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE HAA");
				break;
			case 0x186E:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE TSA");
				break;
			case 0x186F:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE ZA");
				break;
			case 0x1870:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE RAA");
				break;
			case 0x1871:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE CHA");
				break;
			case 0x1872:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER SIBE ZHA");
				break;
			case 0x1873:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU I");
				break;
			case 0x1874:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU KA");
				break;
			case 0x1875:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU RA");
				break;
			case 0x1876:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU FA");
				break;
			case 0x1877:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ZHA");
				break;
			case 0x1878:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER CHA WITH TWO DOTS");
				break;
			case 0x1880:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI ANUSVARA ONE");
				break;
			case 0x1881:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI VISARGA ONE");
				break;
			case 0x1882:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI DAMARU");
				break;
			case 0x1883:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI UBADAMA");
				break;
			case 0x1884:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI INVERTED UBADAMA");
				break;
			case 0x1885:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI BALUDA");
				break;
			case 0x1886:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI THREE BALUDA");
				break;
			case 0x1887:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI A");
				break;
			case 0x1888:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI I");
				break;
			case 0x1889:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI KA");
				break;
			case 0x188A:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI NGA");
				break;
			case 0x188B:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI CA");
				break;
			case 0x188C:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI TTA");
				break;
			case 0x188D:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI TTHA");
				break;
			case 0x188E:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI DDA");
				break;
			case 0x188F:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI NNA");
				break;
			case 0x1890:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI TA");
				break;
			case 0x1891:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI DA");
				break;
			case 0x1892:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI PA");
				break;
			case 0x1893:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI PHA");
				break;
			case 0x1894:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI SSA");
				break;
			case 0x1895:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI ZHA");
				break;
			case 0x1896:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI ZA");
				break;
			case 0x1897:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI AH");
				break;
			case 0x1898:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO ALI GALI TA");
				break;
			case 0x1899:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER TODO ALI GALI ZHA");
				break;
			case 0x189A:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI GHA");
				break;
			case 0x189B:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI NGA");
				break;
			case 0x189C:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI CA");
				break;
			case 0x189D:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI JHA");
				break;
			case 0x189E:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI TTA");
				break;
			case 0x189F:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI DDHA");
				break;
			case 0x18A0:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI TA");
				break;
			case 0x18A1:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI DHA");
				break;
			case 0x18A2:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI SSA");
				break;
			case 0x18A3:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI CYA");
				break;
			case 0x18A4:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI ZHA");
				break;
			case 0x18A5:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI ZA");
				break;
			case 0x18A6:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI HALF U");
				break;
			case 0x18A7:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI HALF YA");
				break;
			case 0x18A8:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI BHA");
				break;
			case 0x18A9:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER ALI GALI DAGALGA");
				break;
			case 0x18AA:
				strcpy_s(buf, buf_size, "MONGOLIAN LETTER MANCHU ALI GALI LHA");
				break;
			case 0x18B0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OY");
				break;
			case 0x18B1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS AY");
				break;
			case 0x18B2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS AAY");
				break;
			case 0x18B3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WAY");
				break;
			case 0x18B4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS POY");
				break;
			case 0x18B5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PAY");
				break;
			case 0x18B6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS PWOY");
				break;
			case 0x18B7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TAY");
				break;
			case 0x18B8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KAY");
				break;
			case 0x18B9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS KWAY");
				break;
			case 0x18BA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS MAY");
				break;
			case 0x18BB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NOY");
				break;
			case 0x18BC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NAY");
				break;
			case 0x18BD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS LAY");
				break;
			case 0x18BE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SOY");
				break;
			case 0x18BF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAY");
				break;
			case 0x18C0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHOY");
				break;
			case 0x18C1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHAY");
				break;
			case 0x18C2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SHWOY");
				break;
			case 0x18C3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YOY");
				break;
			case 0x18C4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS YAY");
				break;
			case 0x18C5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RAY");
				break;
			case 0x18C6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NWI");
				break;
			case 0x18C7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY NWI");
				break;
			case 0x18C8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NWII");
				break;
			case 0x18C9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY NWII");
				break;
			case 0x18CA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NWO");
				break;
			case 0x18CB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY NWO");
				break;
			case 0x18CC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS NWOO");
				break;
			case 0x18CD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY NWOO");
				break;
			case 0x18CE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RWEE");
				break;
			case 0x18CF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RWI");
				break;
			case 0x18D0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RWII");
				break;
			case 0x18D1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RWO");
				break;
			case 0x18D2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RWOO");
				break;
			case 0x18D3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS RWA");
				break;
			case 0x18D4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY P");
				break;
			case 0x18D5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY T");
				break;
			case 0x18D6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY K");
				break;
			case 0x18D7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY C");
				break;
			case 0x18D8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY M");
				break;
			case 0x18D9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY N");
				break;
			case 0x18DA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY S");
				break;
			case 0x18DB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS OJIBWAY SH");
				break;
			case 0x18DC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS EASTERN W");
				break;
			case 0x18DD:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WESTERN W");
				break;
			case 0x18DE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL SMALL RING");
				break;
			case 0x18DF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS FINAL RAISED DOT");
				break;
			case 0x18E0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS R-CREE RWE");
				break;
			case 0x18E1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LOO");
				break;
			case 0x18E2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS WEST-CREE LAA");
				break;
			case 0x18E3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS THWE");
				break;
			case 0x18E4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS THWA");
				break;
			case 0x18E5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTHWE");
				break;
			case 0x18E6:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTHOO");
				break;
			case 0x18E7:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TTHAA");
				break;
			case 0x18E8:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TLHWE");
				break;
			case 0x18E9:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS TLHOO");
				break;
			case 0x18EA:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI SHWE");
				break;
			case 0x18EB:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI SHOO");
				break;
			case 0x18EC:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI HOO");
				break;
			case 0x18ED:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GWU");
				break;
			case 0x18EE:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DENE GEE");
				break;
			case 0x18EF:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GAA");
				break;
			case 0x18F0:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER GWA");
				break;
			case 0x18F1:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS SAYISI JUU");
				break;
			case 0x18F2:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER JWA");
				break;
			case 0x18F3:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BEAVER DENE L");
				break;
			case 0x18F4:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS BEAVER DENE R");
				break;
			case 0x18F5:
				strcpy_s(buf, buf_size, "CANADIAN SYLLABICS CARRIER DENTAL S");
				break;
			case 0x1900:
				strcpy_s(buf, buf_size, "LIMBU VOWEL-CARRIER LETTER");
				break;
			case 0x1901:
				strcpy_s(buf, buf_size, "LIMBU LETTER KA");
				break;
			case 0x1902:
				strcpy_s(buf, buf_size, "LIMBU LETTER KHA");
				break;
			case 0x1903:
				strcpy_s(buf, buf_size, "LIMBU LETTER GA");
				break;
			case 0x1904:
				strcpy_s(buf, buf_size, "LIMBU LETTER GHA");
				break;
			case 0x1905:
				strcpy_s(buf, buf_size, "LIMBU LETTER NGA");
				break;
			case 0x1906:
				strcpy_s(buf, buf_size, "LIMBU LETTER CA");
				break;
			case 0x1907:
				strcpy_s(buf, buf_size, "LIMBU LETTER CHA");
				break;
			case 0x1908:
				strcpy_s(buf, buf_size, "LIMBU LETTER JA");
				break;
			case 0x1909:
				strcpy_s(buf, buf_size, "LIMBU LETTER JHA");
				break;
			case 0x190A:
				strcpy_s(buf, buf_size, "LIMBU LETTER YAN");
				break;
			case 0x190B:
				strcpy_s(buf, buf_size, "LIMBU LETTER TA");
				break;
			case 0x190C:
				strcpy_s(buf, buf_size, "LIMBU LETTER THA");
				break;
			case 0x190D:
				strcpy_s(buf, buf_size, "LIMBU LETTER DA");
				break;
			case 0x190E:
				strcpy_s(buf, buf_size, "LIMBU LETTER DHA");
				break;
			case 0x190F:
				strcpy_s(buf, buf_size, "LIMBU LETTER NA");
				break;
			case 0x1910:
				strcpy_s(buf, buf_size, "LIMBU LETTER PA");
				break;
			case 0x1911:
				strcpy_s(buf, buf_size, "LIMBU LETTER PHA");
				break;
			case 0x1912:
				strcpy_s(buf, buf_size, "LIMBU LETTER BA");
				break;
			case 0x1913:
				strcpy_s(buf, buf_size, "LIMBU LETTER BHA");
				break;
			case 0x1914:
				strcpy_s(buf, buf_size, "LIMBU LETTER MA");
				break;
			case 0x1915:
				strcpy_s(buf, buf_size, "LIMBU LETTER YA");
				break;
			case 0x1916:
				strcpy_s(buf, buf_size, "LIMBU LETTER RA");
				break;
			case 0x1917:
				strcpy_s(buf, buf_size, "LIMBU LETTER LA");
				break;
			case 0x1918:
				strcpy_s(buf, buf_size, "LIMBU LETTER WA");
				break;
			case 0x1919:
				strcpy_s(buf, buf_size, "LIMBU LETTER SHA");
				break;
			case 0x191A:
				strcpy_s(buf, buf_size, "LIMBU LETTER SSA");
				break;
			case 0x191B:
				strcpy_s(buf, buf_size, "LIMBU LETTER SA");
				break;
			case 0x191C:
				strcpy_s(buf, buf_size, "LIMBU LETTER HA");
				break;
			case 0x191D:
				strcpy_s(buf, buf_size, "LIMBU LETTER GYAN");
				break;
			case 0x191E:
				strcpy_s(buf, buf_size, "LIMBU LETTER TRA");
				break;
			case 0x1920:
				strcpy_s(buf, buf_size, "LIMBU VOWEL SIGN A");
				break;
			case 0x1921:
				strcpy_s(buf, buf_size, "LIMBU VOWEL SIGN I");
				break;
			case 0x1922:
				strcpy_s(buf, buf_size, "LIMBU VOWEL SIGN U");
				break;
			case 0x1923:
				strcpy_s(buf, buf_size, "LIMBU VOWEL SIGN EE");
				break;
			case 0x1924:
				strcpy_s(buf, buf_size, "LIMBU VOWEL SIGN AI");
				break;
			case 0x1925:
				strcpy_s(buf, buf_size, "LIMBU VOWEL SIGN OO");
				break;
			case 0x1926:
				strcpy_s(buf, buf_size, "LIMBU VOWEL SIGN AU");
				break;
			case 0x1927:
				strcpy_s(buf, buf_size, "LIMBU VOWEL SIGN E");
				break;
			case 0x1928:
				strcpy_s(buf, buf_size, "LIMBU VOWEL SIGN O");
				break;
			case 0x1929:
				strcpy_s(buf, buf_size, "LIMBU SUBJOINED LETTER YA");
				break;
			case 0x192A:
				strcpy_s(buf, buf_size, "LIMBU SUBJOINED LETTER RA");
				break;
			case 0x192B:
				strcpy_s(buf, buf_size, "LIMBU SUBJOINED LETTER WA");
				break;
			case 0x1930:
				strcpy_s(buf, buf_size, "LIMBU SMALL LETTER KA");
				break;
			case 0x1931:
				strcpy_s(buf, buf_size, "LIMBU SMALL LETTER NGA");
				break;
			case 0x1932:
				strcpy_s(buf, buf_size, "LIMBU SMALL LETTER ANUSVARA");
				break;
			case 0x1933:
				strcpy_s(buf, buf_size, "LIMBU SMALL LETTER TA");
				break;
			case 0x1934:
				strcpy_s(buf, buf_size, "LIMBU SMALL LETTER NA");
				break;
			case 0x1935:
				strcpy_s(buf, buf_size, "LIMBU SMALL LETTER PA");
				break;
			case 0x1936:
				strcpy_s(buf, buf_size, "LIMBU SMALL LETTER MA");
				break;
			case 0x1937:
				strcpy_s(buf, buf_size, "LIMBU SMALL LETTER RA");
				break;
			case 0x1938:
				strcpy_s(buf, buf_size, "LIMBU SMALL LETTER LA");
				break;
			case 0x1939:
				strcpy_s(buf, buf_size, "LIMBU SIGN MUKPHRENG");
				break;
			case 0x193A:
				strcpy_s(buf, buf_size, "LIMBU SIGN KEMPHRENG");
				break;
			case 0x193B:
				strcpy_s(buf, buf_size, "LIMBU SIGN SA-I");
				break;
			case 0x1940:
				strcpy_s(buf, buf_size, "LIMBU SIGN LOO");
				break;
			case 0x1944:
				strcpy_s(buf, buf_size, "LIMBU EXCLAMATION MARK");
				break;
			case 0x1945:
				strcpy_s(buf, buf_size, "LIMBU QUESTION MARK");
				break;
			case 0x1946:
				strcpy_s(buf, buf_size, "LIMBU DIGIT ZERO");
				break;
			case 0x1947:
				strcpy_s(buf, buf_size, "LIMBU DIGIT ONE");
				break;
			case 0x1948:
				strcpy_s(buf, buf_size, "LIMBU DIGIT TWO");
				break;
			case 0x1949:
				strcpy_s(buf, buf_size, "LIMBU DIGIT THREE");
				break;
			case 0x194A:
				strcpy_s(buf, buf_size, "LIMBU DIGIT FOUR");
				break;
			case 0x194B:
				strcpy_s(buf, buf_size, "LIMBU DIGIT FIVE");
				break;
			case 0x194C:
				strcpy_s(buf, buf_size, "LIMBU DIGIT SIX");
				break;
			case 0x194D:
				strcpy_s(buf, buf_size, "LIMBU DIGIT SEVEN");
				break;
			case 0x194E:
				strcpy_s(buf, buf_size, "LIMBU DIGIT EIGHT");
				break;
			case 0x194F:
				strcpy_s(buf, buf_size, "LIMBU DIGIT NINE");
				break;
			case 0x1950:
				strcpy_s(buf, buf_size, "TAI LE LETTER KA");
				break;
			case 0x1951:
				strcpy_s(buf, buf_size, "TAI LE LETTER XA");
				break;
			case 0x1952:
				strcpy_s(buf, buf_size, "TAI LE LETTER NGA");
				break;
			case 0x1953:
				strcpy_s(buf, buf_size, "TAI LE LETTER TSA");
				break;
			case 0x1954:
				strcpy_s(buf, buf_size, "TAI LE LETTER SA");
				break;
			case 0x1955:
				strcpy_s(buf, buf_size, "TAI LE LETTER YA");
				break;
			case 0x1956:
				strcpy_s(buf, buf_size, "TAI LE LETTER TA");
				break;
			case 0x1957:
				strcpy_s(buf, buf_size, "TAI LE LETTER THA");
				break;
			case 0x1958:
				strcpy_s(buf, buf_size, "TAI LE LETTER LA");
				break;
			case 0x1959:
				strcpy_s(buf, buf_size, "TAI LE LETTER PA");
				break;
			case 0x195A:
				strcpy_s(buf, buf_size, "TAI LE LETTER PHA");
				break;
			case 0x195B:
				strcpy_s(buf, buf_size, "TAI LE LETTER MA");
				break;
			case 0x195C:
				strcpy_s(buf, buf_size, "TAI LE LETTER FA");
				break;
			case 0x195D:
				strcpy_s(buf, buf_size, "TAI LE LETTER VA");
				break;
			case 0x195E:
				strcpy_s(buf, buf_size, "TAI LE LETTER HA");
				break;
			case 0x195F:
				strcpy_s(buf, buf_size, "TAI LE LETTER QA");
				break;
			case 0x1960:
				strcpy_s(buf, buf_size, "TAI LE LETTER KHA");
				break;
			case 0x1961:
				strcpy_s(buf, buf_size, "TAI LE LETTER TSHA");
				break;
			case 0x1962:
				strcpy_s(buf, buf_size, "TAI LE LETTER NA");
				break;
			case 0x1963:
				strcpy_s(buf, buf_size, "TAI LE LETTER A");
				break;
			case 0x1964:
				strcpy_s(buf, buf_size, "TAI LE LETTER I");
				break;
			case 0x1965:
				strcpy_s(buf, buf_size, "TAI LE LETTER EE");
				break;
			case 0x1966:
				strcpy_s(buf, buf_size, "TAI LE LETTER EH");
				break;
			case 0x1967:
				strcpy_s(buf, buf_size, "TAI LE LETTER U");
				break;
			case 0x1968:
				strcpy_s(buf, buf_size, "TAI LE LETTER OO");
				break;
			case 0x1969:
				strcpy_s(buf, buf_size, "TAI LE LETTER O");
				break;
			case 0x196A:
				strcpy_s(buf, buf_size, "TAI LE LETTER UE");
				break;
			case 0x196B:
				strcpy_s(buf, buf_size, "TAI LE LETTER E");
				break;
			case 0x196C:
				strcpy_s(buf, buf_size, "TAI LE LETTER AUE");
				break;
			case 0x196D:
				strcpy_s(buf, buf_size, "TAI LE LETTER AI");
				break;
			case 0x1970:
				strcpy_s(buf, buf_size, "TAI LE LETTER TONE-2");
				break;
			case 0x1971:
				strcpy_s(buf, buf_size, "TAI LE LETTER TONE-3");
				break;
			case 0x1972:
				strcpy_s(buf, buf_size, "TAI LE LETTER TONE-4");
				break;
			case 0x1973:
				strcpy_s(buf, buf_size, "TAI LE LETTER TONE-5");
				break;
			case 0x1974:
				strcpy_s(buf, buf_size, "TAI LE LETTER TONE-6");
				break;
			case 0x1980:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH QA");
				break;
			case 0x1981:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW QA");
				break;
			case 0x1982:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH KA");
				break;
			case 0x1983:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH XA");
				break;
			case 0x1984:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH NGA");
				break;
			case 0x1985:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW KA");
				break;
			case 0x1986:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW XA");
				break;
			case 0x1987:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW NGA");
				break;
			case 0x1988:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH TSA");
				break;
			case 0x1989:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH SA");
				break;
			case 0x198A:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH YA");
				break;
			case 0x198B:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW TSA");
				break;
			case 0x198C:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW SA");
				break;
			case 0x198D:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW YA");
				break;
			case 0x198E:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH TA");
				break;
			case 0x198F:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH THA");
				break;
			case 0x1990:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH NA");
				break;
			case 0x1991:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW TA");
				break;
			case 0x1992:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW THA");
				break;
			case 0x1993:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW NA");
				break;
			case 0x1994:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH PA");
				break;
			case 0x1995:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH PHA");
				break;
			case 0x1996:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH MA");
				break;
			case 0x1997:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW PA");
				break;
			case 0x1998:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW PHA");
				break;
			case 0x1999:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW MA");
				break;
			case 0x199A:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH FA");
				break;
			case 0x199B:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH VA");
				break;
			case 0x199C:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH LA");
				break;
			case 0x199D:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW FA");
				break;
			case 0x199E:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW VA");
				break;
			case 0x199F:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW LA");
				break;
			case 0x19A0:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH HA");
				break;
			case 0x19A1:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH DA");
				break;
			case 0x19A2:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH BA");
				break;
			case 0x19A3:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW HA");
				break;
			case 0x19A4:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW DA");
				break;
			case 0x19A5:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW BA");
				break;
			case 0x19A6:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH KVA");
				break;
			case 0x19A7:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH XVA");
				break;
			case 0x19A8:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW KVA");
				break;
			case 0x19A9:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW XVA");
				break;
			case 0x19AA:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER HIGH SUA");
				break;
			case 0x19AB:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER LOW SUA");
				break;
			case 0x19B0:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN VOWEL SHORTENER");
				break;
			case 0x19B1:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN AA");
				break;
			case 0x19B2:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN II");
				break;
			case 0x19B3:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN U");
				break;
			case 0x19B4:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN UU");
				break;
			case 0x19B5:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN E");
				break;
			case 0x19B6:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN AE");
				break;
			case 0x19B7:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN O");
				break;
			case 0x19B8:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN OA");
				break;
			case 0x19B9:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN UE");
				break;
			case 0x19BA:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN AY");
				break;
			case 0x19BB:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN AAY");
				break;
			case 0x19BC:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN UY");
				break;
			case 0x19BD:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN OY");
				break;
			case 0x19BE:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN OAY");
				break;
			case 0x19BF:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN UEY");
				break;
			case 0x19C0:
				strcpy_s(buf, buf_size, "NEW TAI LUE VOWEL SIGN IY");
				break;
			case 0x19C1:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER FINAL V");
				break;
			case 0x19C2:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER FINAL NG");
				break;
			case 0x19C3:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER FINAL N");
				break;
			case 0x19C4:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER FINAL M");
				break;
			case 0x19C5:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER FINAL K");
				break;
			case 0x19C6:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER FINAL D");
				break;
			case 0x19C7:
				strcpy_s(buf, buf_size, "NEW TAI LUE LETTER FINAL B");
				break;
			case 0x19C8:
				strcpy_s(buf, buf_size, "NEW TAI LUE TONE MARK-1");
				break;
			case 0x19C9:
				strcpy_s(buf, buf_size, "NEW TAI LUE TONE MARK-2");
				break;
			case 0x19D0:
				strcpy_s(buf, buf_size, "NEW TAI LUE DIGIT ZERO");
				break;
			case 0x19D1:
				strcpy_s(buf, buf_size, "NEW TAI LUE DIGIT ONE");
				break;
			case 0x19D2:
				strcpy_s(buf, buf_size, "NEW TAI LUE DIGIT TWO");
				break;
			case 0x19D3:
				strcpy_s(buf, buf_size, "NEW TAI LUE DIGIT THREE");
				break;
			case 0x19D4:
				strcpy_s(buf, buf_size, "NEW TAI LUE DIGIT FOUR");
				break;
			case 0x19D5:
				strcpy_s(buf, buf_size, "NEW TAI LUE DIGIT FIVE");
				break;
			case 0x19D6:
				strcpy_s(buf, buf_size, "NEW TAI LUE DIGIT SIX");
				break;
			case 0x19D7:
				strcpy_s(buf, buf_size, "NEW TAI LUE DIGIT SEVEN");
				break;
			case 0x19D8:
				strcpy_s(buf, buf_size, "NEW TAI LUE DIGIT EIGHT");
				break;
			case 0x19D9:
				strcpy_s(buf, buf_size, "NEW TAI LUE DIGIT NINE");
				break;
			case 0x19DA:
				strcpy_s(buf, buf_size, "NEW TAI LUE THAM DIGIT ONE");
				break;
			case 0x19DE:
				strcpy_s(buf, buf_size, "NEW TAI LUE SIGN LAE");
				break;
			case 0x19DF:
				strcpy_s(buf, buf_size, "NEW TAI LUE SIGN LAEV");
				break;
			case 0x19E0:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PATHAMASAT");
				break;
			case 0x19E1:
				strcpy_s(buf, buf_size, "KHMER SYMBOL MUOY KOET");
				break;
			case 0x19E2:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PII KOET");
				break;
			case 0x19E3:
				strcpy_s(buf, buf_size, "KHMER SYMBOL BEI KOET");
				break;
			case 0x19E4:
				strcpy_s(buf, buf_size, "KHMER SYMBOL BUON KOET");
				break;
			case 0x19E5:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PRAM KOET");
				break;
			case 0x19E6:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PRAM-MUOY KOET");
				break;
			case 0x19E7:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PRAM-PII KOET");
				break;
			case 0x19E8:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PRAM-BEI KOET");
				break;
			case 0x19E9:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PRAM-BUON KOET");
				break;
			case 0x19EA:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP KOET");
				break;
			case 0x19EB:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP-MUOY KOET");
				break;
			case 0x19EC:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP-PII KOET");
				break;
			case 0x19ED:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP-BEI KOET");
				break;
			case 0x19EE:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP-BUON KOET");
				break;
			case 0x19EF:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP-PRAM KOET");
				break;
			case 0x19F0:
				strcpy_s(buf, buf_size, "KHMER SYMBOL TUTEYASAT");
				break;
			case 0x19F1:
				strcpy_s(buf, buf_size, "KHMER SYMBOL MUOY ROC");
				break;
			case 0x19F2:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PII ROC");
				break;
			case 0x19F3:
				strcpy_s(buf, buf_size, "KHMER SYMBOL BEI ROC");
				break;
			case 0x19F4:
				strcpy_s(buf, buf_size, "KHMER SYMBOL BUON ROC");
				break;
			case 0x19F5:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PRAM ROC");
				break;
			case 0x19F6:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PRAM-MUOY ROC");
				break;
			case 0x19F7:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PRAM-PII ROC");
				break;
			case 0x19F8:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PRAM-BEI ROC");
				break;
			case 0x19F9:
				strcpy_s(buf, buf_size, "KHMER SYMBOL PRAM-BUON ROC");
				break;
			case 0x19FA:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP ROC");
				break;
			case 0x19FB:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP-MUOY ROC");
				break;
			case 0x19FC:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP-PII ROC");
				break;
			case 0x19FD:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP-BEI ROC");
				break;
			case 0x19FE:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP-BUON ROC");
				break;
			case 0x19FF:
				strcpy_s(buf, buf_size, "KHMER SYMBOL DAP-PRAM ROC");
				break;
			case 0x1A00:
				strcpy_s(buf, buf_size, "BUGINESE LETTER KA");
				break;
			case 0x1A01:
				strcpy_s(buf, buf_size, "BUGINESE LETTER GA");
				break;
			case 0x1A02:
				strcpy_s(buf, buf_size, "BUGINESE LETTER NGA");
				break;
			case 0x1A03:
				strcpy_s(buf, buf_size, "BUGINESE LETTER NGKA");
				break;
			case 0x1A04:
				strcpy_s(buf, buf_size, "BUGINESE LETTER PA");
				break;
			case 0x1A05:
				strcpy_s(buf, buf_size, "BUGINESE LETTER BA");
				break;
			case 0x1A06:
				strcpy_s(buf, buf_size, "BUGINESE LETTER MA");
				break;
			case 0x1A07:
				strcpy_s(buf, buf_size, "BUGINESE LETTER MPA");
				break;
			case 0x1A08:
				strcpy_s(buf, buf_size, "BUGINESE LETTER TA");
				break;
			case 0x1A09:
				strcpy_s(buf, buf_size, "BUGINESE LETTER DA");
				break;
			case 0x1A0A:
				strcpy_s(buf, buf_size, "BUGINESE LETTER NA");
				break;
			case 0x1A0B:
				strcpy_s(buf, buf_size, "BUGINESE LETTER NRA");
				break;
			case 0x1A0C:
				strcpy_s(buf, buf_size, "BUGINESE LETTER CA");
				break;
			case 0x1A0D:
				strcpy_s(buf, buf_size, "BUGINESE LETTER JA");
				break;
			case 0x1A0E:
				strcpy_s(buf, buf_size, "BUGINESE LETTER NYA");
				break;
			case 0x1A0F:
				strcpy_s(buf, buf_size, "BUGINESE LETTER NYCA");
				break;
			case 0x1A10:
				strcpy_s(buf, buf_size, "BUGINESE LETTER YA");
				break;
			case 0x1A11:
				strcpy_s(buf, buf_size, "BUGINESE LETTER RA");
				break;
			case 0x1A12:
				strcpy_s(buf, buf_size, "BUGINESE LETTER LA");
				break;
			case 0x1A13:
				strcpy_s(buf, buf_size, "BUGINESE LETTER VA");
				break;
			case 0x1A14:
				strcpy_s(buf, buf_size, "BUGINESE LETTER SA");
				break;
			case 0x1A15:
				strcpy_s(buf, buf_size, "BUGINESE LETTER A");
				break;
			case 0x1A16:
				strcpy_s(buf, buf_size, "BUGINESE LETTER HA");
				break;
			case 0x1A17:
				strcpy_s(buf, buf_size, "BUGINESE VOWEL SIGN I");
				break;
			case 0x1A18:
				strcpy_s(buf, buf_size, "BUGINESE VOWEL SIGN U");
				break;
			case 0x1A19:
				strcpy_s(buf, buf_size, "BUGINESE VOWEL SIGN E");
				break;
			case 0x1A1A:
				strcpy_s(buf, buf_size, "BUGINESE VOWEL SIGN O");
				break;
			case 0x1A1B:
				strcpy_s(buf, buf_size, "BUGINESE VOWEL SIGN AE");
				break;
			case 0x1A1E:
				strcpy_s(buf, buf_size, "BUGINESE PALLAWA");
				break;
			case 0x1A1F:
				strcpy_s(buf, buf_size, "BUGINESE END OF SECTION");
				break;
			case 0x1A20:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH KA");
				break;
			case 0x1A21:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH KHA");
				break;
			case 0x1A22:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH KXA");
				break;
			case 0x1A23:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW KA");
				break;
			case 0x1A24:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW KXA");
				break;
			case 0x1A25:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW KHA");
				break;
			case 0x1A26:
				strcpy_s(buf, buf_size, "TAI THAM LETTER NGA");
				break;
			case 0x1A27:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH CA");
				break;
			case 0x1A28:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH CHA");
				break;
			case 0x1A29:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW CA");
				break;
			case 0x1A2A:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW SA");
				break;
			case 0x1A2B:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW CHA");
				break;
			case 0x1A2C:
				strcpy_s(buf, buf_size, "TAI THAM LETTER NYA");
				break;
			case 0x1A2D:
				strcpy_s(buf, buf_size, "TAI THAM LETTER RATA");
				break;
			case 0x1A2E:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH RATHA");
				break;
			case 0x1A2F:
				strcpy_s(buf, buf_size, "TAI THAM LETTER DA");
				break;
			case 0x1A30:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW RATHA");
				break;
			case 0x1A31:
				strcpy_s(buf, buf_size, "TAI THAM LETTER RANA");
				break;
			case 0x1A32:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH TA");
				break;
			case 0x1A33:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH THA");
				break;
			case 0x1A34:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW TA");
				break;
			case 0x1A35:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW THA");
				break;
			case 0x1A36:
				strcpy_s(buf, buf_size, "TAI THAM LETTER NA");
				break;
			case 0x1A37:
				strcpy_s(buf, buf_size, "TAI THAM LETTER BA");
				break;
			case 0x1A38:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH PA");
				break;
			case 0x1A39:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH PHA");
				break;
			case 0x1A3A:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH FA");
				break;
			case 0x1A3B:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW PA");
				break;
			case 0x1A3C:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW FA");
				break;
			case 0x1A3D:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW PHA");
				break;
			case 0x1A3E:
				strcpy_s(buf, buf_size, "TAI THAM LETTER MA");
				break;
			case 0x1A3F:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW YA");
				break;
			case 0x1A40:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH YA");
				break;
			case 0x1A41:
				strcpy_s(buf, buf_size, "TAI THAM LETTER RA");
				break;
			case 0x1A42:
				strcpy_s(buf, buf_size, "TAI THAM LETTER RUE");
				break;
			case 0x1A43:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LA");
				break;
			case 0x1A44:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LUE");
				break;
			case 0x1A45:
				strcpy_s(buf, buf_size, "TAI THAM LETTER WA");
				break;
			case 0x1A46:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH SHA");
				break;
			case 0x1A47:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH SSA");
				break;
			case 0x1A48:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH SA");
				break;
			case 0x1A49:
				strcpy_s(buf, buf_size, "TAI THAM LETTER HIGH HA");
				break;
			case 0x1A4A:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LLA");
				break;
			case 0x1A4B:
				strcpy_s(buf, buf_size, "TAI THAM LETTER A");
				break;
			case 0x1A4C:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LOW HA");
				break;
			case 0x1A4D:
				strcpy_s(buf, buf_size, "TAI THAM LETTER I");
				break;
			case 0x1A4E:
				strcpy_s(buf, buf_size, "TAI THAM LETTER II");
				break;
			case 0x1A4F:
				strcpy_s(buf, buf_size, "TAI THAM LETTER U");
				break;
			case 0x1A50:
				strcpy_s(buf, buf_size, "TAI THAM LETTER UU");
				break;
			case 0x1A51:
				strcpy_s(buf, buf_size, "TAI THAM LETTER EE");
				break;
			case 0x1A52:
				strcpy_s(buf, buf_size, "TAI THAM LETTER OO");
				break;
			case 0x1A53:
				strcpy_s(buf, buf_size, "TAI THAM LETTER LAE");
				break;
			case 0x1A54:
				strcpy_s(buf, buf_size, "TAI THAM LETTER GREAT SA");
				break;
			case 0x1A55:
				strcpy_s(buf, buf_size, "TAI THAM CONSONANT SIGN MEDIAL RA");
				break;
			case 0x1A56:
				strcpy_s(buf, buf_size, "TAI THAM CONSONANT SIGN MEDIAL LA");
				break;
			case 0x1A57:
				strcpy_s(buf, buf_size, "TAI THAM CONSONANT SIGN LA TANG LAI");
				break;
			case 0x1A58:
				strcpy_s(buf, buf_size, "TAI THAM SIGN MAI KANG LAI");
				break;
			case 0x1A59:
				strcpy_s(buf, buf_size, "TAI THAM CONSONANT SIGN FINAL NGA");
				break;
			case 0x1A5A:
				strcpy_s(buf, buf_size, "TAI THAM CONSONANT SIGN LOW PA");
				break;
			case 0x1A5B:
				strcpy_s(buf, buf_size, "TAI THAM CONSONANT SIGN HIGH RATHA OR LOW PA");
				break;
			case 0x1A5C:
				strcpy_s(buf, buf_size, "TAI THAM CONSONANT SIGN MA");
				break;
			case 0x1A5D:
				strcpy_s(buf, buf_size, "TAI THAM CONSONANT SIGN BA");
				break;
			case 0x1A5E:
				strcpy_s(buf, buf_size, "TAI THAM CONSONANT SIGN SA");
				break;
			case 0x1A60:
				strcpy_s(buf, buf_size, "TAI THAM SIGN SAKOT");
				break;
			case 0x1A61:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN A");
				break;
			case 0x1A62:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN MAI SAT");
				break;
			case 0x1A63:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN AA");
				break;
			case 0x1A64:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN TALL AA");
				break;
			case 0x1A65:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN I");
				break;
			case 0x1A66:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN II");
				break;
			case 0x1A67:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN UE");
				break;
			case 0x1A68:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN UUE");
				break;
			case 0x1A69:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN U");
				break;
			case 0x1A6A:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN UU");
				break;
			case 0x1A6B:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN O");
				break;
			case 0x1A6C:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN OA BELOW");
				break;
			case 0x1A6D:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN OY");
				break;
			case 0x1A6E:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN E");
				break;
			case 0x1A6F:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN AE");
				break;
			case 0x1A70:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN OO");
				break;
			case 0x1A71:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN AI");
				break;
			case 0x1A72:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN THAM AI");
				break;
			case 0x1A73:
				strcpy_s(buf, buf_size, "TAI THAM VOWEL SIGN OA ABOVE");
				break;
			case 0x1A74:
				strcpy_s(buf, buf_size, "TAI THAM SIGN MAI KANG");
				break;
			case 0x1A75:
				strcpy_s(buf, buf_size, "TAI THAM SIGN TONE-1");
				break;
			case 0x1A76:
				strcpy_s(buf, buf_size, "TAI THAM SIGN TONE-2");
				break;
			case 0x1A77:
				strcpy_s(buf, buf_size, "TAI THAM SIGN KHUEN TONE-3");
				break;
			case 0x1A78:
				strcpy_s(buf, buf_size, "TAI THAM SIGN KHUEN TONE-4");
				break;
			case 0x1A79:
				strcpy_s(buf, buf_size, "TAI THAM SIGN KHUEN TONE-5");
				break;
			case 0x1A7A:
				strcpy_s(buf, buf_size, "TAI THAM SIGN RA HAAM");
				break;
			case 0x1A7B:
				strcpy_s(buf, buf_size, "TAI THAM SIGN MAI SAM");
				break;
			case 0x1A7C:
				strcpy_s(buf, buf_size, "TAI THAM SIGN KHUEN-LUE KARAN");
				break;
			case 0x1A7F:
				strcpy_s(buf, buf_size, "TAI THAM COMBINING CRYPTOGRAMMIC DOT");
				break;
			case 0x1A80:
				strcpy_s(buf, buf_size, "TAI THAM HORA DIGIT ZERO");
				break;
			case 0x1A81:
				strcpy_s(buf, buf_size, "TAI THAM HORA DIGIT ONE");
				break;
			case 0x1A82:
				strcpy_s(buf, buf_size, "TAI THAM HORA DIGIT TWO");
				break;
			case 0x1A83:
				strcpy_s(buf, buf_size, "TAI THAM HORA DIGIT THREE");
				break;
			case 0x1A84:
				strcpy_s(buf, buf_size, "TAI THAM HORA DIGIT FOUR");
				break;
			case 0x1A85:
				strcpy_s(buf, buf_size, "TAI THAM HORA DIGIT FIVE");
				break;
			case 0x1A86:
				strcpy_s(buf, buf_size, "TAI THAM HORA DIGIT SIX");
				break;
			case 0x1A87:
				strcpy_s(buf, buf_size, "TAI THAM HORA DIGIT SEVEN");
				break;
			case 0x1A88:
				strcpy_s(buf, buf_size, "TAI THAM HORA DIGIT EIGHT");
				break;
			case 0x1A89:
				strcpy_s(buf, buf_size, "TAI THAM HORA DIGIT NINE");
				break;
			case 0x1A90:
				strcpy_s(buf, buf_size, "TAI THAM THAM DIGIT ZERO");
				break;
			case 0x1A91:
				strcpy_s(buf, buf_size, "TAI THAM THAM DIGIT ONE");
				break;
			case 0x1A92:
				strcpy_s(buf, buf_size, "TAI THAM THAM DIGIT TWO");
				break;
			case 0x1A93:
				strcpy_s(buf, buf_size, "TAI THAM THAM DIGIT THREE");
				break;
			case 0x1A94:
				strcpy_s(buf, buf_size, "TAI THAM THAM DIGIT FOUR");
				break;
			case 0x1A95:
				strcpy_s(buf, buf_size, "TAI THAM THAM DIGIT FIVE");
				break;
			case 0x1A96:
				strcpy_s(buf, buf_size, "TAI THAM THAM DIGIT SIX");
				break;
			case 0x1A97:
				strcpy_s(buf, buf_size, "TAI THAM THAM DIGIT SEVEN");
				break;
			case 0x1A98:
				strcpy_s(buf, buf_size, "TAI THAM THAM DIGIT EIGHT");
				break;
			case 0x1A99:
				strcpy_s(buf, buf_size, "TAI THAM THAM DIGIT NINE");
				break;
			case 0x1AA0:
				strcpy_s(buf, buf_size, "TAI THAM SIGN WIANG");
				break;
			case 0x1AA1:
				strcpy_s(buf, buf_size, "TAI THAM SIGN WIANGWAAK");
				break;
			case 0x1AA2:
				strcpy_s(buf, buf_size, "TAI THAM SIGN SAWAN");
				break;
			case 0x1AA3:
				strcpy_s(buf, buf_size, "TAI THAM SIGN KEOW");
				break;
			case 0x1AA4:
				strcpy_s(buf, buf_size, "TAI THAM SIGN HOY");
				break;
			case 0x1AA5:
				strcpy_s(buf, buf_size, "TAI THAM SIGN DOKMAI");
				break;
			case 0x1AA6:
				strcpy_s(buf, buf_size, "TAI THAM SIGN REVERSED ROTATED RANA");
				break;
			case 0x1AA7:
				strcpy_s(buf, buf_size, "TAI THAM SIGN MAI YAMOK");
				break;
			case 0x1AA8:
				strcpy_s(buf, buf_size, "TAI THAM SIGN KAAN");
				break;
			case 0x1AA9:
				strcpy_s(buf, buf_size, "TAI THAM SIGN KAANKUU");
				break;
			case 0x1AAA:
				strcpy_s(buf, buf_size, "TAI THAM SIGN SATKAAN");
				break;
			case 0x1AAB:
				strcpy_s(buf, buf_size, "TAI THAM SIGN SATKAANKUU");
				break;
			case 0x1AAC:
				strcpy_s(buf, buf_size, "TAI THAM SIGN HANG");
				break;
			case 0x1AAD:
				strcpy_s(buf, buf_size, "TAI THAM SIGN CAANG");
				break;
			case 0x1AB0:
				strcpy_s(buf, buf_size, "COMBINING DOUBLED CIRCUMFLEX ACCENT");
				break;
			case 0x1AB1:
				strcpy_s(buf, buf_size, "COMBINING DIAERESIS-RING");
				break;
			case 0x1AB2:
				strcpy_s(buf, buf_size, "COMBINING INFINITY");
				break;
			case 0x1AB3:
				strcpy_s(buf, buf_size, "COMBINING DOWNWARDS ARROW");
				break;
			case 0x1AB4:
				strcpy_s(buf, buf_size, "COMBINING TRIPLE DOT");
				break;
			case 0x1AB5:
				strcpy_s(buf, buf_size, "COMBINING X-X BELOW");
				break;
			case 0x1AB6:
				strcpy_s(buf, buf_size, "COMBINING WIGGLY LINE BELOW");
				break;
			case 0x1AB7:
				strcpy_s(buf, buf_size, "COMBINING OPEN MARK BELOW");
				break;
			case 0x1AB8:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE OPEN MARK BELOW");
				break;
			case 0x1AB9:
				strcpy_s(buf, buf_size, "COMBINING LIGHT CENTRALIZATION STROKE BELOW");
				break;
			case 0x1ABA:
				strcpy_s(buf, buf_size, "COMBINING STRONG CENTRALIZATION STROKE BELOW");
				break;
			case 0x1ABB:
				strcpy_s(buf, buf_size, "COMBINING PARENTHESES ABOVE");
				break;
			case 0x1ABC:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE PARENTHESES ABOVE");
				break;
			case 0x1ABD:
				strcpy_s(buf, buf_size, "COMBINING PARENTHESES BELOW");
				break;
			case 0x1ABE:
				strcpy_s(buf, buf_size, "COMBINING PARENTHESES OVERLAY");
				break;
			case 0x1ABF:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER W BELOW");
				break;
			case 0x1AC0:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER TURNED W BELOW");
				break;
			case 0x1B00:
				strcpy_s(buf, buf_size, "BALINESE SIGN ULU RICEM");
				break;
			case 0x1B01:
				strcpy_s(buf, buf_size, "BALINESE SIGN ULU CANDRA");
				break;
			case 0x1B02:
				strcpy_s(buf, buf_size, "BALINESE SIGN CECEK");
				break;
			case 0x1B03:
				strcpy_s(buf, buf_size, "BALINESE SIGN SURANG");
				break;
			case 0x1B04:
				strcpy_s(buf, buf_size, "BALINESE SIGN BISAH");
				break;
			case 0x1B05:
				strcpy_s(buf, buf_size, "BALINESE LETTER AKARA");
				break;
			case 0x1B06:
				strcpy_s(buf, buf_size, "BALINESE LETTER AKARA TEDUNG");
				break;
			case 0x1B07:
				strcpy_s(buf, buf_size, "BALINESE LETTER IKARA");
				break;
			case 0x1B08:
				strcpy_s(buf, buf_size, "BALINESE LETTER IKARA TEDUNG");
				break;
			case 0x1B09:
				strcpy_s(buf, buf_size, "BALINESE LETTER UKARA");
				break;
			case 0x1B0A:
				strcpy_s(buf, buf_size, "BALINESE LETTER UKARA TEDUNG");
				break;
			case 0x1B0B:
				strcpy_s(buf, buf_size, "BALINESE LETTER RA REPA");
				break;
			case 0x1B0C:
				strcpy_s(buf, buf_size, "BALINESE LETTER RA REPA TEDUNG");
				break;
			case 0x1B0D:
				strcpy_s(buf, buf_size, "BALINESE LETTER LA LENGA");
				break;
			case 0x1B0E:
				strcpy_s(buf, buf_size, "BALINESE LETTER LA LENGA TEDUNG");
				break;
			case 0x1B0F:
				strcpy_s(buf, buf_size, "BALINESE LETTER EKARA");
				break;
			case 0x1B10:
				strcpy_s(buf, buf_size, "BALINESE LETTER AIKARA");
				break;
			case 0x1B11:
				strcpy_s(buf, buf_size, "BALINESE LETTER OKARA");
				break;
			case 0x1B12:
				strcpy_s(buf, buf_size, "BALINESE LETTER OKARA TEDUNG");
				break;
			case 0x1B13:
				strcpy_s(buf, buf_size, "BALINESE LETTER KA");
				break;
			case 0x1B14:
				strcpy_s(buf, buf_size, "BALINESE LETTER KA MAHAPRANA");
				break;
			case 0x1B15:
				strcpy_s(buf, buf_size, "BALINESE LETTER GA");
				break;
			case 0x1B16:
				strcpy_s(buf, buf_size, "BALINESE LETTER GA GORA");
				break;
			case 0x1B17:
				strcpy_s(buf, buf_size, "BALINESE LETTER NGA");
				break;
			case 0x1B18:
				strcpy_s(buf, buf_size, "BALINESE LETTER CA");
				break;
			case 0x1B19:
				strcpy_s(buf, buf_size, "BALINESE LETTER CA LACA");
				break;
			case 0x1B1A:
				strcpy_s(buf, buf_size, "BALINESE LETTER JA");
				break;
			case 0x1B1B:
				strcpy_s(buf, buf_size, "BALINESE LETTER JA JERA");
				break;
			case 0x1B1C:
				strcpy_s(buf, buf_size, "BALINESE LETTER NYA");
				break;
			case 0x1B1D:
				strcpy_s(buf, buf_size, "BALINESE LETTER TA LATIK");
				break;
			case 0x1B1E:
				strcpy_s(buf, buf_size, "BALINESE LETTER TA MURDA MAHAPRANA");
				break;
			case 0x1B1F:
				strcpy_s(buf, buf_size, "BALINESE LETTER DA MURDA ALPAPRANA");
				break;
			case 0x1B20:
				strcpy_s(buf, buf_size, "BALINESE LETTER DA MURDA MAHAPRANA");
				break;
			case 0x1B21:
				strcpy_s(buf, buf_size, "BALINESE LETTER NA RAMBAT");
				break;
			case 0x1B22:
				strcpy_s(buf, buf_size, "BALINESE LETTER TA");
				break;
			case 0x1B23:
				strcpy_s(buf, buf_size, "BALINESE LETTER TA TAWA");
				break;
			case 0x1B24:
				strcpy_s(buf, buf_size, "BALINESE LETTER DA");
				break;
			case 0x1B25:
				strcpy_s(buf, buf_size, "BALINESE LETTER DA MADU");
				break;
			case 0x1B26:
				strcpy_s(buf, buf_size, "BALINESE LETTER NA");
				break;
			case 0x1B27:
				strcpy_s(buf, buf_size, "BALINESE LETTER PA");
				break;
			case 0x1B28:
				strcpy_s(buf, buf_size, "BALINESE LETTER PA KAPAL");
				break;
			case 0x1B29:
				strcpy_s(buf, buf_size, "BALINESE LETTER BA");
				break;
			case 0x1B2A:
				strcpy_s(buf, buf_size, "BALINESE LETTER BA KEMBANG");
				break;
			case 0x1B2B:
				strcpy_s(buf, buf_size, "BALINESE LETTER MA");
				break;
			case 0x1B2C:
				strcpy_s(buf, buf_size, "BALINESE LETTER YA");
				break;
			case 0x1B2D:
				strcpy_s(buf, buf_size, "BALINESE LETTER RA");
				break;
			case 0x1B2E:
				strcpy_s(buf, buf_size, "BALINESE LETTER LA");
				break;
			case 0x1B2F:
				strcpy_s(buf, buf_size, "BALINESE LETTER WA");
				break;
			case 0x1B30:
				strcpy_s(buf, buf_size, "BALINESE LETTER SA SAGA");
				break;
			case 0x1B31:
				strcpy_s(buf, buf_size, "BALINESE LETTER SA SAPA");
				break;
			case 0x1B32:
				strcpy_s(buf, buf_size, "BALINESE LETTER SA");
				break;
			case 0x1B33:
				strcpy_s(buf, buf_size, "BALINESE LETTER HA");
				break;
			case 0x1B34:
				strcpy_s(buf, buf_size, "BALINESE SIGN REREKAN");
				break;
			case 0x1B35:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN TEDUNG");
				break;
			case 0x1B36:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN ULU");
				break;
			case 0x1B37:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN ULU SARI");
				break;
			case 0x1B38:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN SUKU");
				break;
			case 0x1B39:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN SUKU ILUT");
				break;
			case 0x1B3A:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN RA REPA");
				break;
			case 0x1B3B:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN RA REPA TEDUNG");
				break;
			case 0x1B3C:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN LA LENGA");
				break;
			case 0x1B3D:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN LA LENGA TEDUNG");
				break;
			case 0x1B3E:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN TALING");
				break;
			case 0x1B3F:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN TALING REPA");
				break;
			case 0x1B40:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN TALING TEDUNG");
				break;
			case 0x1B41:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN TALING REPA TEDUNG");
				break;
			case 0x1B42:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN PEPET");
				break;
			case 0x1B43:
				strcpy_s(buf, buf_size, "BALINESE VOWEL SIGN PEPET TEDUNG");
				break;
			case 0x1B44:
				strcpy_s(buf, buf_size, "BALINESE ADEG ADEG");
				break;
			case 0x1B45:
				strcpy_s(buf, buf_size, "BALINESE LETTER KAF SASAK");
				break;
			case 0x1B46:
				strcpy_s(buf, buf_size, "BALINESE LETTER KHOT SASAK");
				break;
			case 0x1B47:
				strcpy_s(buf, buf_size, "BALINESE LETTER TZIR SASAK");
				break;
			case 0x1B48:
				strcpy_s(buf, buf_size, "BALINESE LETTER EF SASAK");
				break;
			case 0x1B49:
				strcpy_s(buf, buf_size, "BALINESE LETTER VE SASAK");
				break;
			case 0x1B4A:
				strcpy_s(buf, buf_size, "BALINESE LETTER ZAL SASAK");
				break;
			case 0x1B4B:
				strcpy_s(buf, buf_size, "BALINESE LETTER ASYURA SASAK");
				break;
			case 0x1B50:
				strcpy_s(buf, buf_size, "BALINESE DIGIT ZERO");
				break;
			case 0x1B51:
				strcpy_s(buf, buf_size, "BALINESE DIGIT ONE");
				break;
			case 0x1B52:
				strcpy_s(buf, buf_size, "BALINESE DIGIT TWO");
				break;
			case 0x1B53:
				strcpy_s(buf, buf_size, "BALINESE DIGIT THREE");
				break;
			case 0x1B54:
				strcpy_s(buf, buf_size, "BALINESE DIGIT FOUR");
				break;
			case 0x1B55:
				strcpy_s(buf, buf_size, "BALINESE DIGIT FIVE");
				break;
			case 0x1B56:
				strcpy_s(buf, buf_size, "BALINESE DIGIT SIX");
				break;
			case 0x1B57:
				strcpy_s(buf, buf_size, "BALINESE DIGIT SEVEN");
				break;
			case 0x1B58:
				strcpy_s(buf, buf_size, "BALINESE DIGIT EIGHT");
				break;
			case 0x1B59:
				strcpy_s(buf, buf_size, "BALINESE DIGIT NINE");
				break;
			case 0x1B5A:
				strcpy_s(buf, buf_size, "BALINESE PANTI");
				break;
			case 0x1B5B:
				strcpy_s(buf, buf_size, "BALINESE PAMADA");
				break;
			case 0x1B5C:
				strcpy_s(buf, buf_size, "BALINESE WINDU");
				break;
			case 0x1B5D:
				strcpy_s(buf, buf_size, "BALINESE CARIK PAMUNGKAH");
				break;
			case 0x1B5E:
				strcpy_s(buf, buf_size, "BALINESE CARIK SIKI");
				break;
			case 0x1B5F:
				strcpy_s(buf, buf_size, "BALINESE CARIK PAREREN");
				break;
			case 0x1B60:
				strcpy_s(buf, buf_size, "BALINESE PAMENENG");
				break;
			case 0x1B61:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL DONG");
				break;
			case 0x1B62:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL DENG");
				break;
			case 0x1B63:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL DUNG");
				break;
			case 0x1B64:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL DANG");
				break;
			case 0x1B65:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL DANG SURANG");
				break;
			case 0x1B66:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL DING");
				break;
			case 0x1B67:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL DAENG");
				break;
			case 0x1B68:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL DEUNG");
				break;
			case 0x1B69:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL DAING");
				break;
			case 0x1B6A:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL DANG GEDE");
				break;
			case 0x1B6B:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL COMBINING TEGEH");
				break;
			case 0x1B6C:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL COMBINING ENDEP");
				break;
			case 0x1B6D:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL COMBINING KEMPUL");
				break;
			case 0x1B6E:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL COMBINING KEMPLI");
				break;
			case 0x1B6F:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL COMBINING JEGOGAN");
				break;
			case 0x1B70:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN");
				break;
			case 0x1B71:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN");
				break;
			case 0x1B72:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL COMBINING BENDE");
				break;
			case 0x1B73:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL COMBINING GONG");
				break;
			case 0x1B74:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DUG");
				break;
			case 0x1B75:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL RIGHT-HAND OPEN DAG");
				break;
			case 0x1B76:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TUK");
				break;
			case 0x1B77:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL RIGHT-HAND CLOSED TAK");
				break;
			case 0x1B78:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PANG");
				break;
			case 0x1B79:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PUNG");
				break;
			case 0x1B7A:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLAK");
				break;
			case 0x1B7B:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL LEFT-HAND CLOSED PLUK");
				break;
			case 0x1B7C:
				strcpy_s(buf, buf_size, "BALINESE MUSICAL SYMBOL LEFT-HAND OPEN PING");
				break;
			case 0x1B80:
				strcpy_s(buf, buf_size, "SUNDANESE SIGN PANYECEK");
				break;
			case 0x1B81:
				strcpy_s(buf, buf_size, "SUNDANESE SIGN PANGLAYAR");
				break;
			case 0x1B82:
				strcpy_s(buf, buf_size, "SUNDANESE SIGN PANGWISAD");
				break;
			case 0x1B83:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER A");
				break;
			case 0x1B84:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER I");
				break;
			case 0x1B85:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER U");
				break;
			case 0x1B86:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER AE");
				break;
			case 0x1B87:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER O");
				break;
			case 0x1B88:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER E");
				break;
			case 0x1B89:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER EU");
				break;
			case 0x1B8A:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER KA");
				break;
			case 0x1B8B:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER QA");
				break;
			case 0x1B8C:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER GA");
				break;
			case 0x1B8D:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER NGA");
				break;
			case 0x1B8E:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER CA");
				break;
			case 0x1B8F:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER JA");
				break;
			case 0x1B90:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER ZA");
				break;
			case 0x1B91:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER NYA");
				break;
			case 0x1B92:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER TA");
				break;
			case 0x1B93:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER DA");
				break;
			case 0x1B94:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER NA");
				break;
			case 0x1B95:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER PA");
				break;
			case 0x1B96:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER FA");
				break;
			case 0x1B97:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER VA");
				break;
			case 0x1B98:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER BA");
				break;
			case 0x1B99:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER MA");
				break;
			case 0x1B9A:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER YA");
				break;
			case 0x1B9B:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER RA");
				break;
			case 0x1B9C:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER LA");
				break;
			case 0x1B9D:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER WA");
				break;
			case 0x1B9E:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER SA");
				break;
			case 0x1B9F:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER XA");
				break;
			case 0x1BA0:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER HA");
				break;
			case 0x1BA1:
				strcpy_s(buf, buf_size, "SUNDANESE CONSONANT SIGN PAMINGKAL");
				break;
			case 0x1BA2:
				strcpy_s(buf, buf_size, "SUNDANESE CONSONANT SIGN PANYAKRA");
				break;
			case 0x1BA3:
				strcpy_s(buf, buf_size, "SUNDANESE CONSONANT SIGN PANYIKU");
				break;
			case 0x1BA4:
				strcpy_s(buf, buf_size, "SUNDANESE VOWEL SIGN PANGHULU");
				break;
			case 0x1BA5:
				strcpy_s(buf, buf_size, "SUNDANESE VOWEL SIGN PANYUKU");
				break;
			case 0x1BA6:
				strcpy_s(buf, buf_size, "SUNDANESE VOWEL SIGN PANAELAENG");
				break;
			case 0x1BA7:
				strcpy_s(buf, buf_size, "SUNDANESE VOWEL SIGN PANOLONG");
				break;
			case 0x1BA8:
				strcpy_s(buf, buf_size, "SUNDANESE VOWEL SIGN PAMEPET");
				break;
			case 0x1BA9:
				strcpy_s(buf, buf_size, "SUNDANESE VOWEL SIGN PANEULEUNG");
				break;
			case 0x1BAA:
				strcpy_s(buf, buf_size, "SUNDANESE SIGN PAMAAEH");
				break;
			case 0x1BAB:
				strcpy_s(buf, buf_size, "SUNDANESE SIGN VIRAMA");
				break;
			case 0x1BAC:
				strcpy_s(buf, buf_size, "SUNDANESE CONSONANT SIGN PASANGAN MA");
				break;
			case 0x1BAD:
				strcpy_s(buf, buf_size, "SUNDANESE CONSONANT SIGN PASANGAN WA");
				break;
			case 0x1BAE:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER KHA");
				break;
			case 0x1BAF:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER SYA");
				break;
			case 0x1BB0:
				strcpy_s(buf, buf_size, "SUNDANESE DIGIT ZERO");
				break;
			case 0x1BB1:
				strcpy_s(buf, buf_size, "SUNDANESE DIGIT ONE");
				break;
			case 0x1BB2:
				strcpy_s(buf, buf_size, "SUNDANESE DIGIT TWO");
				break;
			case 0x1BB3:
				strcpy_s(buf, buf_size, "SUNDANESE DIGIT THREE");
				break;
			case 0x1BB4:
				strcpy_s(buf, buf_size, "SUNDANESE DIGIT FOUR");
				break;
			case 0x1BB5:
				strcpy_s(buf, buf_size, "SUNDANESE DIGIT FIVE");
				break;
			case 0x1BB6:
				strcpy_s(buf, buf_size, "SUNDANESE DIGIT SIX");
				break;
			case 0x1BB7:
				strcpy_s(buf, buf_size, "SUNDANESE DIGIT SEVEN");
				break;
			case 0x1BB8:
				strcpy_s(buf, buf_size, "SUNDANESE DIGIT EIGHT");
				break;
			case 0x1BB9:
				strcpy_s(buf, buf_size, "SUNDANESE DIGIT NINE");
				break;
			case 0x1BBA:
				strcpy_s(buf, buf_size, "SUNDANESE AVAGRAHA");
				break;
			case 0x1BBB:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER REU");
				break;
			case 0x1BBC:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER LEU");
				break;
			case 0x1BBD:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER BHA");
				break;
			case 0x1BBE:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER FINAL K");
				break;
			case 0x1BBF:
				strcpy_s(buf, buf_size, "SUNDANESE LETTER FINAL M");
				break;
			case 0x1BC0:
				strcpy_s(buf, buf_size, "BATAK LETTER A");
				break;
			case 0x1BC1:
				strcpy_s(buf, buf_size, "BATAK LETTER SIMALUNGUN A");
				break;
			case 0x1BC2:
				strcpy_s(buf, buf_size, "BATAK LETTER HA");
				break;
			case 0x1BC3:
				strcpy_s(buf, buf_size, "BATAK LETTER SIMALUNGUN HA");
				break;
			case 0x1BC4:
				strcpy_s(buf, buf_size, "BATAK LETTER MANDAILING HA");
				break;
			case 0x1BC5:
				strcpy_s(buf, buf_size, "BATAK LETTER BA");
				break;
			case 0x1BC6:
				strcpy_s(buf, buf_size, "BATAK LETTER KARO BA");
				break;
			case 0x1BC7:
				strcpy_s(buf, buf_size, "BATAK LETTER PA");
				break;
			case 0x1BC8:
				strcpy_s(buf, buf_size, "BATAK LETTER SIMALUNGUN PA");
				break;
			case 0x1BC9:
				strcpy_s(buf, buf_size, "BATAK LETTER NA");
				break;
			case 0x1BCA:
				strcpy_s(buf, buf_size, "BATAK LETTER MANDAILING NA");
				break;
			case 0x1BCB:
				strcpy_s(buf, buf_size, "BATAK LETTER WA");
				break;
			case 0x1BCC:
				strcpy_s(buf, buf_size, "BATAK LETTER SIMALUNGUN WA");
				break;
			case 0x1BCD:
				strcpy_s(buf, buf_size, "BATAK LETTER PAKPAK WA");
				break;
			case 0x1BCE:
				strcpy_s(buf, buf_size, "BATAK LETTER GA");
				break;
			case 0x1BCF:
				strcpy_s(buf, buf_size, "BATAK LETTER SIMALUNGUN GA");
				break;
			case 0x1BD0:
				strcpy_s(buf, buf_size, "BATAK LETTER JA");
				break;
			case 0x1BD1:
				strcpy_s(buf, buf_size, "BATAK LETTER DA");
				break;
			case 0x1BD2:
				strcpy_s(buf, buf_size, "BATAK LETTER RA");
				break;
			case 0x1BD3:
				strcpy_s(buf, buf_size, "BATAK LETTER SIMALUNGUN RA");
				break;
			case 0x1BD4:
				strcpy_s(buf, buf_size, "BATAK LETTER MA");
				break;
			case 0x1BD5:
				strcpy_s(buf, buf_size, "BATAK LETTER SIMALUNGUN MA");
				break;
			case 0x1BD6:
				strcpy_s(buf, buf_size, "BATAK LETTER SOUTHERN TA");
				break;
			case 0x1BD7:
				strcpy_s(buf, buf_size, "BATAK LETTER NORTHERN TA");
				break;
			case 0x1BD8:
				strcpy_s(buf, buf_size, "BATAK LETTER SA");
				break;
			case 0x1BD9:
				strcpy_s(buf, buf_size, "BATAK LETTER SIMALUNGUN SA");
				break;
			case 0x1BDA:
				strcpy_s(buf, buf_size, "BATAK LETTER MANDAILING SA");
				break;
			case 0x1BDB:
				strcpy_s(buf, buf_size, "BATAK LETTER YA");
				break;
			case 0x1BDC:
				strcpy_s(buf, buf_size, "BATAK LETTER SIMALUNGUN YA");
				break;
			case 0x1BDD:
				strcpy_s(buf, buf_size, "BATAK LETTER NGA");
				break;
			case 0x1BDE:
				strcpy_s(buf, buf_size, "BATAK LETTER LA");
				break;
			case 0x1BDF:
				strcpy_s(buf, buf_size, "BATAK LETTER SIMALUNGUN LA");
				break;
			case 0x1BE0:
				strcpy_s(buf, buf_size, "BATAK LETTER NYA");
				break;
			case 0x1BE1:
				strcpy_s(buf, buf_size, "BATAK LETTER CA");
				break;
			case 0x1BE2:
				strcpy_s(buf, buf_size, "BATAK LETTER NDA");
				break;
			case 0x1BE3:
				strcpy_s(buf, buf_size, "BATAK LETTER MBA");
				break;
			case 0x1BE4:
				strcpy_s(buf, buf_size, "BATAK LETTER I");
				break;
			case 0x1BE5:
				strcpy_s(buf, buf_size, "BATAK LETTER U");
				break;
			case 0x1BE6:
				strcpy_s(buf, buf_size, "BATAK SIGN TOMPI");
				break;
			case 0x1BE7:
				strcpy_s(buf, buf_size, "BATAK VOWEL SIGN E");
				break;
			case 0x1BE8:
				strcpy_s(buf, buf_size, "BATAK VOWEL SIGN PAKPAK E");
				break;
			case 0x1BE9:
				strcpy_s(buf, buf_size, "BATAK VOWEL SIGN EE");
				break;
			case 0x1BEA:
				strcpy_s(buf, buf_size, "BATAK VOWEL SIGN I");
				break;
			case 0x1BEB:
				strcpy_s(buf, buf_size, "BATAK VOWEL SIGN KARO I");
				break;
			case 0x1BEC:
				strcpy_s(buf, buf_size, "BATAK VOWEL SIGN O");
				break;
			case 0x1BED:
				strcpy_s(buf, buf_size, "BATAK VOWEL SIGN KARO O");
				break;
			case 0x1BEE:
				strcpy_s(buf, buf_size, "BATAK VOWEL SIGN U");
				break;
			case 0x1BEF:
				strcpy_s(buf, buf_size, "BATAK VOWEL SIGN U FOR SIMALUNGUN SA");
				break;
			case 0x1BF0:
				strcpy_s(buf, buf_size, "BATAK CONSONANT SIGN NG");
				break;
			case 0x1BF1:
				strcpy_s(buf, buf_size, "BATAK CONSONANT SIGN H");
				break;
			case 0x1BF2:
				strcpy_s(buf, buf_size, "BATAK PANGOLAT");
				break;
			case 0x1BF3:
				strcpy_s(buf, buf_size, "BATAK PANONGONAN");
				break;
			case 0x1BFC:
				strcpy_s(buf, buf_size, "BATAK SYMBOL BINDU NA METEK");
				break;
			case 0x1BFD:
				strcpy_s(buf, buf_size, "BATAK SYMBOL BINDU PINARBORAS");
				break;
			case 0x1BFE:
				strcpy_s(buf, buf_size, "BATAK SYMBOL BINDU JUDUL");
				break;
			case 0x1BFF:
				strcpy_s(buf, buf_size, "BATAK SYMBOL BINDU PANGOLAT");
				break;
			case 0x1C00:
				strcpy_s(buf, buf_size, "LEPCHA LETTER KA");
				break;
			case 0x1C01:
				strcpy_s(buf, buf_size, "LEPCHA LETTER KLA");
				break;
			case 0x1C02:
				strcpy_s(buf, buf_size, "LEPCHA LETTER KHA");
				break;
			case 0x1C03:
				strcpy_s(buf, buf_size, "LEPCHA LETTER GA");
				break;
			case 0x1C04:
				strcpy_s(buf, buf_size, "LEPCHA LETTER GLA");
				break;
			case 0x1C05:
				strcpy_s(buf, buf_size, "LEPCHA LETTER NGA");
				break;
			case 0x1C06:
				strcpy_s(buf, buf_size, "LEPCHA LETTER CA");
				break;
			case 0x1C07:
				strcpy_s(buf, buf_size, "LEPCHA LETTER CHA");
				break;
			case 0x1C08:
				strcpy_s(buf, buf_size, "LEPCHA LETTER JA");
				break;
			case 0x1C09:
				strcpy_s(buf, buf_size, "LEPCHA LETTER NYA");
				break;
			case 0x1C0A:
				strcpy_s(buf, buf_size, "LEPCHA LETTER TA");
				break;
			case 0x1C0B:
				strcpy_s(buf, buf_size, "LEPCHA LETTER THA");
				break;
			case 0x1C0C:
				strcpy_s(buf, buf_size, "LEPCHA LETTER DA");
				break;
			case 0x1C0D:
				strcpy_s(buf, buf_size, "LEPCHA LETTER NA");
				break;
			case 0x1C0E:
				strcpy_s(buf, buf_size, "LEPCHA LETTER PA");
				break;
			case 0x1C0F:
				strcpy_s(buf, buf_size, "LEPCHA LETTER PLA");
				break;
			case 0x1C10:
				strcpy_s(buf, buf_size, "LEPCHA LETTER PHA");
				break;
			case 0x1C11:
				strcpy_s(buf, buf_size, "LEPCHA LETTER FA");
				break;
			case 0x1C12:
				strcpy_s(buf, buf_size, "LEPCHA LETTER FLA");
				break;
			case 0x1C13:
				strcpy_s(buf, buf_size, "LEPCHA LETTER BA");
				break;
			case 0x1C14:
				strcpy_s(buf, buf_size, "LEPCHA LETTER BLA");
				break;
			case 0x1C15:
				strcpy_s(buf, buf_size, "LEPCHA LETTER MA");
				break;
			case 0x1C16:
				strcpy_s(buf, buf_size, "LEPCHA LETTER MLA");
				break;
			case 0x1C17:
				strcpy_s(buf, buf_size, "LEPCHA LETTER TSA");
				break;
			case 0x1C18:
				strcpy_s(buf, buf_size, "LEPCHA LETTER TSHA");
				break;
			case 0x1C19:
				strcpy_s(buf, buf_size, "LEPCHA LETTER DZA");
				break;
			case 0x1C1A:
				strcpy_s(buf, buf_size, "LEPCHA LETTER YA");
				break;
			case 0x1C1B:
				strcpy_s(buf, buf_size, "LEPCHA LETTER RA");
				break;
			case 0x1C1C:
				strcpy_s(buf, buf_size, "LEPCHA LETTER LA");
				break;
			case 0x1C1D:
				strcpy_s(buf, buf_size, "LEPCHA LETTER HA");
				break;
			case 0x1C1E:
				strcpy_s(buf, buf_size, "LEPCHA LETTER HLA");
				break;
			case 0x1C1F:
				strcpy_s(buf, buf_size, "LEPCHA LETTER VA");
				break;
			case 0x1C20:
				strcpy_s(buf, buf_size, "LEPCHA LETTER SA");
				break;
			case 0x1C21:
				strcpy_s(buf, buf_size, "LEPCHA LETTER SHA");
				break;
			case 0x1C22:
				strcpy_s(buf, buf_size, "LEPCHA LETTER WA");
				break;
			case 0x1C23:
				strcpy_s(buf, buf_size, "LEPCHA LETTER A");
				break;
			case 0x1C24:
				strcpy_s(buf, buf_size, "LEPCHA SUBJOINED LETTER YA");
				break;
			case 0x1C25:
				strcpy_s(buf, buf_size, "LEPCHA SUBJOINED LETTER RA");
				break;
			case 0x1C26:
				strcpy_s(buf, buf_size, "LEPCHA VOWEL SIGN AA");
				break;
			case 0x1C27:
				strcpy_s(buf, buf_size, "LEPCHA VOWEL SIGN I");
				break;
			case 0x1C28:
				strcpy_s(buf, buf_size, "LEPCHA VOWEL SIGN O");
				break;
			case 0x1C29:
				strcpy_s(buf, buf_size, "LEPCHA VOWEL SIGN OO");
				break;
			case 0x1C2A:
				strcpy_s(buf, buf_size, "LEPCHA VOWEL SIGN U");
				break;
			case 0x1C2B:
				strcpy_s(buf, buf_size, "LEPCHA VOWEL SIGN UU");
				break;
			case 0x1C2C:
				strcpy_s(buf, buf_size, "LEPCHA VOWEL SIGN E");
				break;
			case 0x1C2D:
				strcpy_s(buf, buf_size, "LEPCHA CONSONANT SIGN K");
				break;
			case 0x1C2E:
				strcpy_s(buf, buf_size, "LEPCHA CONSONANT SIGN M");
				break;
			case 0x1C2F:
				strcpy_s(buf, buf_size, "LEPCHA CONSONANT SIGN L");
				break;
			case 0x1C30:
				strcpy_s(buf, buf_size, "LEPCHA CONSONANT SIGN N");
				break;
			case 0x1C31:
				strcpy_s(buf, buf_size, "LEPCHA CONSONANT SIGN P");
				break;
			case 0x1C32:
				strcpy_s(buf, buf_size, "LEPCHA CONSONANT SIGN R");
				break;
			case 0x1C33:
				strcpy_s(buf, buf_size, "LEPCHA CONSONANT SIGN T");
				break;
			case 0x1C34:
				strcpy_s(buf, buf_size, "LEPCHA CONSONANT SIGN NYIN-DO");
				break;
			case 0x1C35:
				strcpy_s(buf, buf_size, "LEPCHA CONSONANT SIGN KANG");
				break;
			case 0x1C36:
				strcpy_s(buf, buf_size, "LEPCHA SIGN RAN");
				break;
			case 0x1C37:
				strcpy_s(buf, buf_size, "LEPCHA SIGN NUKTA");
				break;
			case 0x1C3B:
				strcpy_s(buf, buf_size, "LEPCHA PUNCTUATION TA-ROL");
				break;
			case 0x1C3C:
				strcpy_s(buf, buf_size, "LEPCHA PUNCTUATION NYET THYOOM TA-ROL");
				break;
			case 0x1C3D:
				strcpy_s(buf, buf_size, "LEPCHA PUNCTUATION CER-WA");
				break;
			case 0x1C3E:
				strcpy_s(buf, buf_size, "LEPCHA PUNCTUATION TSHOOK CER-WA");
				break;
			case 0x1C3F:
				strcpy_s(buf, buf_size, "LEPCHA PUNCTUATION TSHOOK");
				break;
			case 0x1C40:
				strcpy_s(buf, buf_size, "LEPCHA DIGIT ZERO");
				break;
			case 0x1C41:
				strcpy_s(buf, buf_size, "LEPCHA DIGIT ONE");
				break;
			case 0x1C42:
				strcpy_s(buf, buf_size, "LEPCHA DIGIT TWO");
				break;
			case 0x1C43:
				strcpy_s(buf, buf_size, "LEPCHA DIGIT THREE");
				break;
			case 0x1C44:
				strcpy_s(buf, buf_size, "LEPCHA DIGIT FOUR");
				break;
			case 0x1C45:
				strcpy_s(buf, buf_size, "LEPCHA DIGIT FIVE");
				break;
			case 0x1C46:
				strcpy_s(buf, buf_size, "LEPCHA DIGIT SIX");
				break;
			case 0x1C47:
				strcpy_s(buf, buf_size, "LEPCHA DIGIT SEVEN");
				break;
			case 0x1C48:
				strcpy_s(buf, buf_size, "LEPCHA DIGIT EIGHT");
				break;
			case 0x1C49:
				strcpy_s(buf, buf_size, "LEPCHA DIGIT NINE");
				break;
			case 0x1C4D:
				strcpy_s(buf, buf_size, "LEPCHA LETTER TTA");
				break;
			case 0x1C4E:
				strcpy_s(buf, buf_size, "LEPCHA LETTER TTHA");
				break;
			case 0x1C4F:
				strcpy_s(buf, buf_size, "LEPCHA LETTER DDA");
				break;
			case 0x1C50:
				strcpy_s(buf, buf_size, "OL CHIKI DIGIT ZERO");
				break;
			case 0x1C51:
				strcpy_s(buf, buf_size, "OL CHIKI DIGIT ONE");
				break;
			case 0x1C52:
				strcpy_s(buf, buf_size, "OL CHIKI DIGIT TWO");
				break;
			case 0x1C53:
				strcpy_s(buf, buf_size, "OL CHIKI DIGIT THREE");
				break;
			case 0x1C54:
				strcpy_s(buf, buf_size, "OL CHIKI DIGIT FOUR");
				break;
			case 0x1C55:
				strcpy_s(buf, buf_size, "OL CHIKI DIGIT FIVE");
				break;
			case 0x1C56:
				strcpy_s(buf, buf_size, "OL CHIKI DIGIT SIX");
				break;
			case 0x1C57:
				strcpy_s(buf, buf_size, "OL CHIKI DIGIT SEVEN");
				break;
			case 0x1C58:
				strcpy_s(buf, buf_size, "OL CHIKI DIGIT EIGHT");
				break;
			case 0x1C59:
				strcpy_s(buf, buf_size, "OL CHIKI DIGIT NINE");
				break;
			case 0x1C5A:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER LA");
				break;
			case 0x1C5B:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER AT");
				break;
			case 0x1C5C:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER AG");
				break;
			case 0x1C5D:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER ANG");
				break;
			case 0x1C5E:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER AL");
				break;
			case 0x1C5F:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER LAA");
				break;
			case 0x1C60:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER AAK");
				break;
			case 0x1C61:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER AAJ");
				break;
			case 0x1C62:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER AAM");
				break;
			case 0x1C63:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER AAW");
				break;
			case 0x1C64:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER LI");
				break;
			case 0x1C65:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER IS");
				break;
			case 0x1C66:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER IH");
				break;
			case 0x1C67:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER INY");
				break;
			case 0x1C68:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER IR");
				break;
			case 0x1C69:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER LU");
				break;
			case 0x1C6A:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER UC");
				break;
			case 0x1C6B:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER UD");
				break;
			case 0x1C6C:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER UNN");
				break;
			case 0x1C6D:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER UY");
				break;
			case 0x1C6E:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER LE");
				break;
			case 0x1C6F:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER EP");
				break;
			case 0x1C70:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER EDD");
				break;
			case 0x1C71:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER EN");
				break;
			case 0x1C72:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER ERR");
				break;
			case 0x1C73:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER LO");
				break;
			case 0x1C74:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER OTT");
				break;
			case 0x1C75:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER OB");
				break;
			case 0x1C76:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER OV");
				break;
			case 0x1C77:
				strcpy_s(buf, buf_size, "OL CHIKI LETTER OH");
				break;
			case 0x1C78:
				strcpy_s(buf, buf_size, "OL CHIKI MU TTUDDAG");
				break;
			case 0x1C79:
				strcpy_s(buf, buf_size, "OL CHIKI GAAHLAA TTUDDAAG");
				break;
			case 0x1C7A:
				strcpy_s(buf, buf_size, "OL CHIKI MU-GAAHLAA TTUDDAAG");
				break;
			case 0x1C7B:
				strcpy_s(buf, buf_size, "OL CHIKI RELAA");
				break;
			case 0x1C7C:
				strcpy_s(buf, buf_size, "OL CHIKI PHAARKAA");
				break;
			case 0x1C7D:
				strcpy_s(buf, buf_size, "OL CHIKI AHAD");
				break;
			case 0x1C7E:
				strcpy_s(buf, buf_size, "OL CHIKI PUNCTUATION MUCAAD");
				break;
			case 0x1C7F:
				strcpy_s(buf, buf_size, "OL CHIKI PUNCTUATION DOUBLE MUCAAD");
				break;
			case 0x1C80:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ROUNDED VE");
				break;
			case 0x1C81:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER LONG-LEGGED DE");
				break;
			case 0x1C82:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER NARROW O");
				break;
			case 0x1C83:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER WIDE ES");
				break;
			case 0x1C84:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TALL TE");
				break;
			case 0x1C85:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER THREE-LEGGED TE");
				break;
			case 0x1C86:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TALL HARD SIGN");
				break;
			case 0x1C87:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TALL YAT");
				break;
			case 0x1C88:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER UNBLENDED UK");
				break;
			case 0x1C90:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER AN");
				break;
			case 0x1C91:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER BAN");
				break;
			case 0x1C92:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER GAN");
				break;
			case 0x1C93:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER DON");
				break;
			case 0x1C94:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER EN");
				break;
			case 0x1C95:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER VIN");
				break;
			case 0x1C96:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER ZEN");
				break;
			case 0x1C97:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER TAN");
				break;
			case 0x1C98:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER IN");
				break;
			case 0x1C99:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER KAN");
				break;
			case 0x1C9A:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER LAS");
				break;
			case 0x1C9B:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER MAN");
				break;
			case 0x1C9C:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER NAR");
				break;
			case 0x1C9D:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER ON");
				break;
			case 0x1C9E:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER PAR");
				break;
			case 0x1C9F:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER ZHAR");
				break;
			case 0x1CA0:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER RAE");
				break;
			case 0x1CA1:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER SAN");
				break;
			case 0x1CA2:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER TAR");
				break;
			case 0x1CA3:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER UN");
				break;
			case 0x1CA4:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER PHAR");
				break;
			case 0x1CA5:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER KHAR");
				break;
			case 0x1CA6:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER GHAN");
				break;
			case 0x1CA7:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER QAR");
				break;
			case 0x1CA8:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER SHIN");
				break;
			case 0x1CA9:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER CHIN");
				break;
			case 0x1CAA:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER CAN");
				break;
			case 0x1CAB:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER JIL");
				break;
			case 0x1CAC:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER CIL");
				break;
			case 0x1CAD:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER CHAR");
				break;
			case 0x1CAE:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER XAN");
				break;
			case 0x1CAF:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER JHAN");
				break;
			case 0x1CB0:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER HAE");
				break;
			case 0x1CB1:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER HE");
				break;
			case 0x1CB2:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER HIE");
				break;
			case 0x1CB3:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER WE");
				break;
			case 0x1CB4:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER HAR");
				break;
			case 0x1CB5:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER HOE");
				break;
			case 0x1CB6:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER FI");
				break;
			case 0x1CB7:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER YN");
				break;
			case 0x1CB8:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER ELIFI");
				break;
			case 0x1CB9:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER TURNED GAN");
				break;
			case 0x1CBA:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER AIN");
				break;
			case 0x1CBD:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER AEN");
				break;
			case 0x1CBE:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER HARD SIGN");
				break;
			case 0x1CBF:
				strcpy_s(buf, buf_size, "GEORGIAN MTAVRULI CAPITAL LETTER LABIAL SIGN");
				break;
			case 0x1CC0:
				strcpy_s(buf, buf_size, "SUNDANESE PUNCTUATION BINDU SURYA");
				break;
			case 0x1CC1:
				strcpy_s(buf, buf_size, "SUNDANESE PUNCTUATION BINDU PANGLONG");
				break;
			case 0x1CC2:
				strcpy_s(buf, buf_size, "SUNDANESE PUNCTUATION BINDU PURNAMA");
				break;
			case 0x1CC3:
				strcpy_s(buf, buf_size, "SUNDANESE PUNCTUATION BINDU CAKRA");
				break;
			case 0x1CC4:
				strcpy_s(buf, buf_size, "SUNDANESE PUNCTUATION BINDU LEU SATANGA");
				break;
			case 0x1CC5:
				strcpy_s(buf, buf_size, "SUNDANESE PUNCTUATION BINDU KA SATANGA");
				break;
			case 0x1CC6:
				strcpy_s(buf, buf_size, "SUNDANESE PUNCTUATION BINDU DA SATANGA");
				break;
			case 0x1CC7:
				strcpy_s(buf, buf_size, "SUNDANESE PUNCTUATION BINDU BA SATANGA");
				break;
			case 0x1CD0:
				strcpy_s(buf, buf_size, "VEDIC TONE KARSHANA");
				break;
			case 0x1CD1:
				strcpy_s(buf, buf_size, "VEDIC TONE SHARA");
				break;
			case 0x1CD2:
				strcpy_s(buf, buf_size, "VEDIC TONE PRENKHA");
				break;
			case 0x1CD3:
				strcpy_s(buf, buf_size, "VEDIC SIGN NIHSHVASA");
				break;
			case 0x1CD4:
				strcpy_s(buf, buf_size, "VEDIC SIGN YAJURVEDIC MIDLINE SVARITA");
				break;
			case 0x1CD5:
				strcpy_s(buf, buf_size, "VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA");
				break;
			case 0x1CD6:
				strcpy_s(buf, buf_size, "VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA");
				break;
			case 0x1CD7:
				strcpy_s(buf, buf_size, "VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA");
				break;
			case 0x1CD8:
				strcpy_s(buf, buf_size, "VEDIC TONE CANDRA BELOW");
				break;
			case 0x1CD9:
				strcpy_s(buf, buf_size, "VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER");
				break;
			case 0x1CDA:
				strcpy_s(buf, buf_size, "VEDIC TONE DOUBLE SVARITA");
				break;
			case 0x1CDB:
				strcpy_s(buf, buf_size, "VEDIC TONE TRIPLE SVARITA");
				break;
			case 0x1CDC:
				strcpy_s(buf, buf_size, "VEDIC TONE KATHAKA ANUDATTA");
				break;
			case 0x1CDD:
				strcpy_s(buf, buf_size, "VEDIC TONE DOT BELOW");
				break;
			case 0x1CDE:
				strcpy_s(buf, buf_size, "VEDIC TONE TWO DOTS BELOW");
				break;
			case 0x1CDF:
				strcpy_s(buf, buf_size, "VEDIC TONE THREE DOTS BELOW");
				break;
			case 0x1CE0:
				strcpy_s(buf, buf_size, "VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA");
				break;
			case 0x1CE1:
				strcpy_s(buf, buf_size, "VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA");
				break;
			case 0x1CE2:
				strcpy_s(buf, buf_size, "VEDIC SIGN VISARGA SVARITA");
				break;
			case 0x1CE3:
				strcpy_s(buf, buf_size, "VEDIC SIGN VISARGA UDATTA");
				break;
			case 0x1CE4:
				strcpy_s(buf, buf_size, "VEDIC SIGN REVERSED VISARGA UDATTA");
				break;
			case 0x1CE5:
				strcpy_s(buf, buf_size, "VEDIC SIGN VISARGA ANUDATTA");
				break;
			case 0x1CE6:
				strcpy_s(buf, buf_size, "VEDIC SIGN REVERSED VISARGA ANUDATTA");
				break;
			case 0x1CE7:
				strcpy_s(buf, buf_size, "VEDIC SIGN VISARGA UDATTA WITH TAIL");
				break;
			case 0x1CE8:
				strcpy_s(buf, buf_size, "VEDIC SIGN VISARGA ANUDATTA WITH TAIL");
				break;
			case 0x1CE9:
				strcpy_s(buf, buf_size, "VEDIC SIGN ANUSVARA ANTARGOMUKHA");
				break;
			case 0x1CEA:
				strcpy_s(buf, buf_size, "VEDIC SIGN ANUSVARA BAHIRGOMUKHA");
				break;
			case 0x1CEB:
				strcpy_s(buf, buf_size, "VEDIC SIGN ANUSVARA VAMAGOMUKHA");
				break;
			case 0x1CEC:
				strcpy_s(buf, buf_size, "VEDIC SIGN ANUSVARA VAMAGOMUKHA WITH TAIL");
				break;
			case 0x1CED:
				strcpy_s(buf, buf_size, "VEDIC SIGN TIRYAK");
				break;
			case 0x1CEE:
				strcpy_s(buf, buf_size, "VEDIC SIGN HEXIFORM LONG ANUSVARA");
				break;
			case 0x1CEF:
				strcpy_s(buf, buf_size, "VEDIC SIGN LONG ANUSVARA");
				break;
			case 0x1CF0:
				strcpy_s(buf, buf_size, "VEDIC SIGN RTHANG LONG ANUSVARA");
				break;
			case 0x1CF1:
				strcpy_s(buf, buf_size, "VEDIC SIGN ANUSVARA UBHAYATO MUKHA");
				break;
			case 0x1CF2:
				strcpy_s(buf, buf_size, "VEDIC SIGN ARDHAVISARGA");
				break;
			case 0x1CF3:
				strcpy_s(buf, buf_size, "VEDIC SIGN ROTATED ARDHAVISARGA");
				break;
			case 0x1CF4:
				strcpy_s(buf, buf_size, "VEDIC TONE CANDRA ABOVE");
				break;
			case 0x1CF5:
				strcpy_s(buf, buf_size, "VEDIC SIGN JIHVAMULIYA");
				break;
			case 0x1CF6:
				strcpy_s(buf, buf_size, "VEDIC SIGN UPADHMANIYA");
				break;
			case 0x1CF7:
				strcpy_s(buf, buf_size, "VEDIC SIGN ATIKRAMA");
				break;
			case 0x1CF8:
				strcpy_s(buf, buf_size, "VEDIC TONE RING ABOVE");
				break;
			case 0x1CF9:
				strcpy_s(buf, buf_size, "VEDIC TONE DOUBLE RING ABOVE");
				break;
			case 0x1CFA:
				strcpy_s(buf, buf_size, "VEDIC SIGN DOUBLE ANUSVARA ANTARGOMUKHA");
				break;
			case 0x1D00:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL A");
				break;
			case 0x1D01:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL AE");
				break;
			case 0x1D02:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED AE");
				break;
			case 0x1D03:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL BARRED B");
				break;
			case 0x1D04:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL C");
				break;
			case 0x1D05:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL D");
				break;
			case 0x1D06:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL ETH");
				break;
			case 0x1D07:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL E");
				break;
			case 0x1D08:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED OPEN E");
				break;
			case 0x1D09:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED I");
				break;
			case 0x1D0A:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL J");
				break;
			case 0x1D0B:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL K");
				break;
			case 0x1D0C:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL L WITH STROKE");
				break;
			case 0x1D0D:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL M");
				break;
			case 0x1D0E:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL REVERSED N");
				break;
			case 0x1D0F:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL O");
				break;
			case 0x1D10:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL OPEN O");
				break;
			case 0x1D11:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SIDEWAYS O");
				break;
			case 0x1D12:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SIDEWAYS OPEN O");
				break;
			case 0x1D13:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SIDEWAYS O WITH STROKE");
				break;
			case 0x1D14:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED OE");
				break;
			case 0x1D15:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL OU");
				break;
			case 0x1D16:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TOP HALF O");
				break;
			case 0x1D17:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER BOTTOM HALF O");
				break;
			case 0x1D18:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL P");
				break;
			case 0x1D19:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL REVERSED R");
				break;
			case 0x1D1A:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL TURNED R");
				break;
			case 0x1D1B:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL T");
				break;
			case 0x1D1C:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL U");
				break;
			case 0x1D1D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SIDEWAYS U");
				break;
			case 0x1D1E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SIDEWAYS DIAERESIZED U");
				break;
			case 0x1D1F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SIDEWAYS TURNED M");
				break;
			case 0x1D20:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL V");
				break;
			case 0x1D21:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL W");
				break;
			case 0x1D22:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL Z");
				break;
			case 0x1D23:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL EZH");
				break;
			case 0x1D24:
				strcpy_s(buf, buf_size, "LATIN LETTER VOICED LARYNGEAL SPIRANT");
				break;
			case 0x1D25:
				strcpy_s(buf, buf_size, "LATIN LETTER AIN");
				break;
			case 0x1D26:
				strcpy_s(buf, buf_size, "GREEK LETTER SMALL CAPITAL GAMMA");
				break;
			case 0x1D27:
				strcpy_s(buf, buf_size, "GREEK LETTER SMALL CAPITAL LAMDA");
				break;
			case 0x1D28:
				strcpy_s(buf, buf_size, "GREEK LETTER SMALL CAPITAL PI");
				break;
			case 0x1D29:
				strcpy_s(buf, buf_size, "GREEK LETTER SMALL CAPITAL RHO");
				break;
			case 0x1D2A:
				strcpy_s(buf, buf_size, "GREEK LETTER SMALL CAPITAL PSI");
				break;
			case 0x1D2B:
				strcpy_s(buf, buf_size, "CYRILLIC LETTER SMALL CAPITAL EL");
				break;
			case 0x1D2C:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL A");
				break;
			case 0x1D2D:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL AE");
				break;
			case 0x1D2E:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL B");
				break;
			case 0x1D2F:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL BARRED B");
				break;
			case 0x1D30:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL D");
				break;
			case 0x1D31:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL E");
				break;
			case 0x1D32:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL REVERSED E");
				break;
			case 0x1D33:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL G");
				break;
			case 0x1D34:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL H");
				break;
			case 0x1D35:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL I");
				break;
			case 0x1D36:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL J");
				break;
			case 0x1D37:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL K");
				break;
			case 0x1D38:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL L");
				break;
			case 0x1D39:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL M");
				break;
			case 0x1D3A:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL N");
				break;
			case 0x1D3B:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL REVERSED N");
				break;
			case 0x1D3C:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL O");
				break;
			case 0x1D3D:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL OU");
				break;
			case 0x1D3E:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL P");
				break;
			case 0x1D3F:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL R");
				break;
			case 0x1D40:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL T");
				break;
			case 0x1D41:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL U");
				break;
			case 0x1D42:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL W");
				break;
			case 0x1D43:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL A");
				break;
			case 0x1D44:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED A");
				break;
			case 0x1D45:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL ALPHA");
				break;
			case 0x1D46:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED AE");
				break;
			case 0x1D47:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL B");
				break;
			case 0x1D48:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL D");
				break;
			case 0x1D49:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL E");
				break;
			case 0x1D4A:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL SCHWA");
				break;
			case 0x1D4B:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL OPEN E");
				break;
			case 0x1D4C:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED OPEN E");
				break;
			case 0x1D4D:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL G");
				break;
			case 0x1D4E:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED I");
				break;
			case 0x1D4F:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL K");
				break;
			case 0x1D50:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL M");
				break;
			case 0x1D51:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL ENG");
				break;
			case 0x1D52:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL O");
				break;
			case 0x1D53:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL OPEN O");
				break;
			case 0x1D54:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TOP HALF O");
				break;
			case 0x1D55:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL BOTTOM HALF O");
				break;
			case 0x1D56:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL P");
				break;
			case 0x1D57:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL T");
				break;
			case 0x1D58:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL U");
				break;
			case 0x1D59:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL SIDEWAYS U");
				break;
			case 0x1D5A:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED M");
				break;
			case 0x1D5B:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL V");
				break;
			case 0x1D5C:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL AIN");
				break;
			case 0x1D5D:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL BETA");
				break;
			case 0x1D5E:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL GREEK GAMMA");
				break;
			case 0x1D5F:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL DELTA");
				break;
			case 0x1D60:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL GREEK PHI");
				break;
			case 0x1D61:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL CHI");
				break;
			case 0x1D62:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER I");
				break;
			case 0x1D63:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER R");
				break;
			case 0x1D64:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER U");
				break;
			case 0x1D65:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER V");
				break;
			case 0x1D66:
				strcpy_s(buf, buf_size, "GREEK SUBSCRIPT SMALL LETTER BETA");
				break;
			case 0x1D67:
				strcpy_s(buf, buf_size, "GREEK SUBSCRIPT SMALL LETTER GAMMA");
				break;
			case 0x1D68:
				strcpy_s(buf, buf_size, "GREEK SUBSCRIPT SMALL LETTER RHO");
				break;
			case 0x1D69:
				strcpy_s(buf, buf_size, "GREEK SUBSCRIPT SMALL LETTER PHI");
				break;
			case 0x1D6A:
				strcpy_s(buf, buf_size, "GREEK SUBSCRIPT SMALL LETTER CHI");
				break;
			case 0x1D6B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER UE");
				break;
			case 0x1D6C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER B WITH MIDDLE TILDE");
				break;
			case 0x1D6D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH MIDDLE TILDE");
				break;
			case 0x1D6E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER F WITH MIDDLE TILDE");
				break;
			case 0x1D6F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER M WITH MIDDLE TILDE");
				break;
			case 0x1D70:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH MIDDLE TILDE");
				break;
			case 0x1D71:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER P WITH MIDDLE TILDE");
				break;
			case 0x1D72:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH MIDDLE TILDE");
				break;
			case 0x1D73:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH FISHHOOK AND MIDDLE TILDE");
				break;
			case 0x1D74:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH MIDDLE TILDE");
				break;
			case 0x1D75:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH MIDDLE TILDE");
				break;
			case 0x1D76:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH MIDDLE TILDE");
				break;
			case 0x1D77:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED G");
				break;
			case 0x1D78:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CYRILLIC EN");
				break;
			case 0x1D79:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER INSULAR G");
				break;
			case 0x1D7A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TH WITH STRIKETHROUGH");
				break;
			case 0x1D7B:
				strcpy_s(buf, buf_size, "LATIN SMALL CAPITAL LETTER I WITH STROKE");
				break;
			case 0x1D7C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER IOTA WITH STROKE");
				break;
			case 0x1D7D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER P WITH STROKE");
				break;
			case 0x1D7E:
				strcpy_s(buf, buf_size, "LATIN SMALL CAPITAL LETTER U WITH STROKE");
				break;
			case 0x1D7F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER UPSILON WITH STROKE");
				break;
			case 0x1D80:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER B WITH PALATAL HOOK");
				break;
			case 0x1D81:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH PALATAL HOOK");
				break;
			case 0x1D82:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER F WITH PALATAL HOOK");
				break;
			case 0x1D83:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH PALATAL HOOK");
				break;
			case 0x1D84:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH PALATAL HOOK");
				break;
			case 0x1D85:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH PALATAL HOOK");
				break;
			case 0x1D86:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER M WITH PALATAL HOOK");
				break;
			case 0x1D87:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH PALATAL HOOK");
				break;
			case 0x1D88:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER P WITH PALATAL HOOK");
				break;
			case 0x1D89:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH PALATAL HOOK");
				break;
			case 0x1D8A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH PALATAL HOOK");
				break;
			case 0x1D8B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ESH WITH PALATAL HOOK");
				break;
			case 0x1D8C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER V WITH PALATAL HOOK");
				break;
			case 0x1D8D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER X WITH PALATAL HOOK");
				break;
			case 0x1D8E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH PALATAL HOOK");
				break;
			case 0x1D8F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH RETROFLEX HOOK");
				break;
			case 0x1D90:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ALPHA WITH RETROFLEX HOOK");
				break;
			case 0x1D91:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH HOOK AND TAIL");
				break;
			case 0x1D92:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH RETROFLEX HOOK");
				break;
			case 0x1D93:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER OPEN E WITH RETROFLEX HOOK");
				break;
			case 0x1D94:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER REVERSED OPEN E WITH RETROFLEX HOOK");
				break;
			case 0x1D95:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SCHWA WITH RETROFLEX HOOK");
				break;
			case 0x1D96:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH RETROFLEX HOOK");
				break;
			case 0x1D97:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER OPEN O WITH RETROFLEX HOOK");
				break;
			case 0x1D98:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ESH WITH RETROFLEX HOOK");
				break;
			case 0x1D99:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH RETROFLEX HOOK");
				break;
			case 0x1D9A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER EZH WITH RETROFLEX HOOK");
				break;
			case 0x1D9B:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED ALPHA");
				break;
			case 0x1D9C:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL C");
				break;
			case 0x1D9D:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL C WITH CURL");
				break;
			case 0x1D9E:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL ETH");
				break;
			case 0x1D9F:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL REVERSED OPEN E");
				break;
			case 0x1DA0:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL F");
				break;
			case 0x1DA1:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL DOTLESS J WITH STROKE");
				break;
			case 0x1DA2:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL SCRIPT G");
				break;
			case 0x1DA3:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED H");
				break;
			case 0x1DA4:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL I WITH STROKE");
				break;
			case 0x1DA5:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL IOTA");
				break;
			case 0x1DA6:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL CAPITAL I");
				break;
			case 0x1DA7:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL CAPITAL I WITH STROKE");
				break;
			case 0x1DA8:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL J WITH CROSSED-TAIL");
				break;
			case 0x1DA9:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL L WITH RETROFLEX HOOK");
				break;
			case 0x1DAA:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL L WITH PALATAL HOOK");
				break;
			case 0x1DAB:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL CAPITAL L");
				break;
			case 0x1DAC:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL M WITH HOOK");
				break;
			case 0x1DAD:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED M WITH LONG LEG");
				break;
			case 0x1DAE:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL N WITH LEFT HOOK");
				break;
			case 0x1DAF:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL N WITH RETROFLEX HOOK");
				break;
			case 0x1DB0:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL CAPITAL N");
				break;
			case 0x1DB1:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL BARRED O");
				break;
			case 0x1DB2:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL PHI");
				break;
			case 0x1DB3:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL S WITH HOOK");
				break;
			case 0x1DB4:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL ESH");
				break;
			case 0x1DB5:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL T WITH PALATAL HOOK");
				break;
			case 0x1DB6:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL U BAR");
				break;
			case 0x1DB7:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL UPSILON");
				break;
			case 0x1DB8:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL CAPITAL U");
				break;
			case 0x1DB9:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL V WITH HOOK");
				break;
			case 0x1DBA:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED V");
				break;
			case 0x1DBB:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL Z");
				break;
			case 0x1DBC:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL Z WITH RETROFLEX HOOK");
				break;
			case 0x1DBD:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL Z WITH CURL");
				break;
			case 0x1DBE:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL EZH");
				break;
			case 0x1DBF:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL THETA");
				break;
			case 0x1DC0:
				strcpy_s(buf, buf_size, "COMBINING DOTTED GRAVE ACCENT");
				break;
			case 0x1DC1:
				strcpy_s(buf, buf_size, "COMBINING DOTTED ACUTE ACCENT");
				break;
			case 0x1DC2:
				strcpy_s(buf, buf_size, "COMBINING SNAKE BELOW");
				break;
			case 0x1DC3:
				strcpy_s(buf, buf_size, "COMBINING SUSPENSION MARK");
				break;
			case 0x1DC4:
				strcpy_s(buf, buf_size, "COMBINING MACRON-ACUTE");
				break;
			case 0x1DC5:
				strcpy_s(buf, buf_size, "COMBINING GRAVE-MACRON");
				break;
			case 0x1DC6:
				strcpy_s(buf, buf_size, "COMBINING MACRON-GRAVE");
				break;
			case 0x1DC7:
				strcpy_s(buf, buf_size, "COMBINING ACUTE-MACRON");
				break;
			case 0x1DC8:
				strcpy_s(buf, buf_size, "COMBINING GRAVE-ACUTE-GRAVE");
				break;
			case 0x1DC9:
				strcpy_s(buf, buf_size, "COMBINING ACUTE-GRAVE-ACUTE");
				break;
			case 0x1DCA:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER R BELOW");
				break;
			case 0x1DCB:
				strcpy_s(buf, buf_size, "COMBINING BREVE-MACRON");
				break;
			case 0x1DCC:
				strcpy_s(buf, buf_size, "COMBINING MACRON-BREVE");
				break;
			case 0x1DCD:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE CIRCUMFLEX ABOVE");
				break;
			case 0x1DCE:
				strcpy_s(buf, buf_size, "COMBINING OGONEK ABOVE");
				break;
			case 0x1DCF:
				strcpy_s(buf, buf_size, "COMBINING ZIGZAG BELOW");
				break;
			case 0x1DD0:
				strcpy_s(buf, buf_size, "COMBINING IS BELOW");
				break;
			case 0x1DD1:
				strcpy_s(buf, buf_size, "COMBINING UR ABOVE");
				break;
			case 0x1DD2:
				strcpy_s(buf, buf_size, "COMBINING US ABOVE");
				break;
			case 0x1DD3:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER FLATTENED OPEN A ABOVE");
				break;
			case 0x1DD4:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER AE");
				break;
			case 0x1DD5:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER AO");
				break;
			case 0x1DD6:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER AV");
				break;
			case 0x1DD7:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER C CEDILLA");
				break;
			case 0x1DD8:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER INSULAR D");
				break;
			case 0x1DD9:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER ETH");
				break;
			case 0x1DDA:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER G");
				break;
			case 0x1DDB:
				strcpy_s(buf, buf_size, "COMBINING LATIN LETTER SMALL CAPITAL G");
				break;
			case 0x1DDC:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER K");
				break;
			case 0x1DDD:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER L");
				break;
			case 0x1DDE:
				strcpy_s(buf, buf_size, "COMBINING LATIN LETTER SMALL CAPITAL L");
				break;
			case 0x1DDF:
				strcpy_s(buf, buf_size, "COMBINING LATIN LETTER SMALL CAPITAL M");
				break;
			case 0x1DE0:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER N");
				break;
			case 0x1DE1:
				strcpy_s(buf, buf_size, "COMBINING LATIN LETTER SMALL CAPITAL N");
				break;
			case 0x1DE2:
				strcpy_s(buf, buf_size, "COMBINING LATIN LETTER SMALL CAPITAL R");
				break;
			case 0x1DE3:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER R ROTUNDA");
				break;
			case 0x1DE4:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER S");
				break;
			case 0x1DE5:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER LONG S");
				break;
			case 0x1DE6:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER Z");
				break;
			case 0x1DE7:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER ALPHA");
				break;
			case 0x1DE8:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER B");
				break;
			case 0x1DE9:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER BETA");
				break;
			case 0x1DEA:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER SCHWA");
				break;
			case 0x1DEB:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER F");
				break;
			case 0x1DEC:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER L WITH DOUBLE MIDDLE TILDE");
				break;
			case 0x1DED:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER O WITH LIGHT CENTRALIZATION STROKE");
				break;
			case 0x1DEE:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER P");
				break;
			case 0x1DEF:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER ESH");
				break;
			case 0x1DF0:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER U WITH LIGHT CENTRALIZATION STROKE");
				break;
			case 0x1DF1:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER W");
				break;
			case 0x1DF2:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER A WITH DIAERESIS");
				break;
			case 0x1DF3:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER O WITH DIAERESIS");
				break;
			case 0x1DF4:
				strcpy_s(buf, buf_size, "COMBINING LATIN SMALL LETTER U WITH DIAERESIS");
				break;
			case 0x1DF5:
				strcpy_s(buf, buf_size, "COMBINING UP TACK ABOVE");
				break;
			case 0x1DF6:
				strcpy_s(buf, buf_size, "COMBINING KAVYKA ABOVE RIGHT");
				break;
			case 0x1DF7:
				strcpy_s(buf, buf_size, "COMBINING KAVYKA ABOVE LEFT");
				break;
			case 0x1DF8:
				strcpy_s(buf, buf_size, "COMBINING DOT ABOVE LEFT");
				break;
			case 0x1DF9:
				strcpy_s(buf, buf_size, "COMBINING WIDE INVERTED BRIDGE BELOW");
				break;
			case 0x1DFB:
				strcpy_s(buf, buf_size, "COMBINING DELETION MARK");
				break;
			case 0x1DFC:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE INVERTED BREVE BELOW");
				break;
			case 0x1DFD:
				strcpy_s(buf, buf_size, "COMBINING ALMOST EQUAL TO BELOW");
				break;
			case 0x1DFE:
				strcpy_s(buf, buf_size, "COMBINING LEFT ARROWHEAD ABOVE");
				break;
			case 0x1DFF:
				strcpy_s(buf, buf_size, "COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW");
				break;
			case 0x1E00:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH RING BELOW");
				break;
			case 0x1E01:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH RING BELOW");
				break;
			case 0x1E02:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER B WITH DOT ABOVE");
				break;
			case 0x1E03:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER B WITH DOT ABOVE");
				break;
			case 0x1E04:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER B WITH DOT BELOW");
				break;
			case 0x1E05:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER B WITH DOT BELOW");
				break;
			case 0x1E06:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER B WITH LINE BELOW");
				break;
			case 0x1E07:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER B WITH LINE BELOW");
				break;
			case 0x1E08:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C WITH CEDILLA AND ACUTE");
				break;
			case 0x1E09:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH CEDILLA AND ACUTE");
				break;
			case 0x1E0A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH DOT ABOVE");
				break;
			case 0x1E0B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH DOT ABOVE");
				break;
			case 0x1E0C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH DOT BELOW");
				break;
			case 0x1E0D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH DOT BELOW");
				break;
			case 0x1E0E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH LINE BELOW");
				break;
			case 0x1E0F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH LINE BELOW");
				break;
			case 0x1E10:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH CEDILLA");
				break;
			case 0x1E11:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH CEDILLA");
				break;
			case 0x1E12:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E13:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E14:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH MACRON AND GRAVE");
				break;
			case 0x1E15:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH MACRON AND GRAVE");
				break;
			case 0x1E16:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH MACRON AND ACUTE");
				break;
			case 0x1E17:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH MACRON AND ACUTE");
				break;
			case 0x1E18:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E19:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E1A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH TILDE BELOW");
				break;
			case 0x1E1B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH TILDE BELOW");
				break;
			case 0x1E1C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH CEDILLA AND BREVE");
				break;
			case 0x1E1D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH CEDILLA AND BREVE");
				break;
			case 0x1E1E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER F WITH DOT ABOVE");
				break;
			case 0x1E1F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER F WITH DOT ABOVE");
				break;
			case 0x1E20:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G WITH MACRON");
				break;
			case 0x1E21:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH MACRON");
				break;
			case 0x1E22:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H WITH DOT ABOVE");
				break;
			case 0x1E23:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH DOT ABOVE");
				break;
			case 0x1E24:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H WITH DOT BELOW");
				break;
			case 0x1E25:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH DOT BELOW");
				break;
			case 0x1E26:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H WITH DIAERESIS");
				break;
			case 0x1E27:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH DIAERESIS");
				break;
			case 0x1E28:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H WITH CEDILLA");
				break;
			case 0x1E29:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH CEDILLA");
				break;
			case 0x1E2A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H WITH BREVE BELOW");
				break;
			case 0x1E2B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH BREVE BELOW");
				break;
			case 0x1E2C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH TILDE BELOW");
				break;
			case 0x1E2D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH TILDE BELOW");
				break;
			case 0x1E2E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH DIAERESIS AND ACUTE");
				break;
			case 0x1E2F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH DIAERESIS AND ACUTE");
				break;
			case 0x1E30:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH ACUTE");
				break;
			case 0x1E31:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH ACUTE");
				break;
			case 0x1E32:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH DOT BELOW");
				break;
			case 0x1E33:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH DOT BELOW");
				break;
			case 0x1E34:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH LINE BELOW");
				break;
			case 0x1E35:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH LINE BELOW");
				break;
			case 0x1E36:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH DOT BELOW");
				break;
			case 0x1E37:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH DOT BELOW");
				break;
			case 0x1E38:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH DOT BELOW AND MACRON");
				break;
			case 0x1E39:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH DOT BELOW AND MACRON");
				break;
			case 0x1E3A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH LINE BELOW");
				break;
			case 0x1E3B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH LINE BELOW");
				break;
			case 0x1E3C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E3D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E3E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER M WITH ACUTE");
				break;
			case 0x1E3F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER M WITH ACUTE");
				break;
			case 0x1E40:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER M WITH DOT ABOVE");
				break;
			case 0x1E41:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER M WITH DOT ABOVE");
				break;
			case 0x1E42:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER M WITH DOT BELOW");
				break;
			case 0x1E43:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER M WITH DOT BELOW");
				break;
			case 0x1E44:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH DOT ABOVE");
				break;
			case 0x1E45:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH DOT ABOVE");
				break;
			case 0x1E46:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH DOT BELOW");
				break;
			case 0x1E47:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH DOT BELOW");
				break;
			case 0x1E48:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH LINE BELOW");
				break;
			case 0x1E49:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH LINE BELOW");
				break;
			case 0x1E4A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E4B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E4C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH TILDE AND ACUTE");
				break;
			case 0x1E4D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH TILDE AND ACUTE");
				break;
			case 0x1E4E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH TILDE AND DIAERESIS");
				break;
			case 0x1E4F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH TILDE AND DIAERESIS");
				break;
			case 0x1E50:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH MACRON AND GRAVE");
				break;
			case 0x1E51:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH MACRON AND GRAVE");
				break;
			case 0x1E52:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH MACRON AND ACUTE");
				break;
			case 0x1E53:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH MACRON AND ACUTE");
				break;
			case 0x1E54:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER P WITH ACUTE");
				break;
			case 0x1E55:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER P WITH ACUTE");
				break;
			case 0x1E56:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER P WITH DOT ABOVE");
				break;
			case 0x1E57:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER P WITH DOT ABOVE");
				break;
			case 0x1E58:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH DOT ABOVE");
				break;
			case 0x1E59:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH DOT ABOVE");
				break;
			case 0x1E5A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH DOT BELOW");
				break;
			case 0x1E5B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH DOT BELOW");
				break;
			case 0x1E5C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH DOT BELOW AND MACRON");
				break;
			case 0x1E5D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH DOT BELOW AND MACRON");
				break;
			case 0x1E5E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH LINE BELOW");
				break;
			case 0x1E5F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH LINE BELOW");
				break;
			case 0x1E60:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH DOT ABOVE");
				break;
			case 0x1E61:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH DOT ABOVE");
				break;
			case 0x1E62:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH DOT BELOW");
				break;
			case 0x1E63:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH DOT BELOW");
				break;
			case 0x1E64:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH ACUTE AND DOT ABOVE");
				break;
			case 0x1E65:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH ACUTE AND DOT ABOVE");
				break;
			case 0x1E66:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH CARON AND DOT ABOVE");
				break;
			case 0x1E67:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH CARON AND DOT ABOVE");
				break;
			case 0x1E68:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH DOT BELOW AND DOT ABOVE");
				break;
			case 0x1E69:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE");
				break;
			case 0x1E6A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH DOT ABOVE");
				break;
			case 0x1E6B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH DOT ABOVE");
				break;
			case 0x1E6C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH DOT BELOW");
				break;
			case 0x1E6D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH DOT BELOW");
				break;
			case 0x1E6E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH LINE BELOW");
				break;
			case 0x1E6F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH LINE BELOW");
				break;
			case 0x1E70:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER T WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E71:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E72:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH DIAERESIS BELOW");
				break;
			case 0x1E73:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH DIAERESIS BELOW");
				break;
			case 0x1E74:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH TILDE BELOW");
				break;
			case 0x1E75:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH TILDE BELOW");
				break;
			case 0x1E76:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E77:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH CIRCUMFLEX BELOW");
				break;
			case 0x1E78:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH TILDE AND ACUTE");
				break;
			case 0x1E79:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH TILDE AND ACUTE");
				break;
			case 0x1E7A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH MACRON AND DIAERESIS");
				break;
			case 0x1E7B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH MACRON AND DIAERESIS");
				break;
			case 0x1E7C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER V WITH TILDE");
				break;
			case 0x1E7D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER V WITH TILDE");
				break;
			case 0x1E7E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER V WITH DOT BELOW");
				break;
			case 0x1E7F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER V WITH DOT BELOW");
				break;
			case 0x1E80:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER W WITH GRAVE");
				break;
			case 0x1E81:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER W WITH GRAVE");
				break;
			case 0x1E82:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER W WITH ACUTE");
				break;
			case 0x1E83:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER W WITH ACUTE");
				break;
			case 0x1E84:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER W WITH DIAERESIS");
				break;
			case 0x1E85:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER W WITH DIAERESIS");
				break;
			case 0x1E86:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER W WITH DOT ABOVE");
				break;
			case 0x1E87:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER W WITH DOT ABOVE");
				break;
			case 0x1E88:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER W WITH DOT BELOW");
				break;
			case 0x1E89:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER W WITH DOT BELOW");
				break;
			case 0x1E8A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER X WITH DOT ABOVE");
				break;
			case 0x1E8B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER X WITH DOT ABOVE");
				break;
			case 0x1E8C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER X WITH DIAERESIS");
				break;
			case 0x1E8D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER X WITH DIAERESIS");
				break;
			case 0x1E8E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH DOT ABOVE");
				break;
			case 0x1E8F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH DOT ABOVE");
				break;
			case 0x1E90:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH CIRCUMFLEX");
				break;
			case 0x1E91:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH CIRCUMFLEX");
				break;
			case 0x1E92:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH DOT BELOW");
				break;
			case 0x1E93:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH DOT BELOW");
				break;
			case 0x1E94:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH LINE BELOW");
				break;
			case 0x1E95:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH LINE BELOW");
				break;
			case 0x1E96:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH LINE BELOW");
				break;
			case 0x1E97:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH DIAERESIS");
				break;
			case 0x1E98:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER W WITH RING ABOVE");
				break;
			case 0x1E99:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH RING ABOVE");
				break;
			case 0x1E9A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH RIGHT HALF RING");
				break;
			case 0x1E9B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LONG S WITH DOT ABOVE");
				break;
			case 0x1E9C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LONG S WITH DIAGONAL STROKE");
				break;
			case 0x1E9D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LONG S WITH HIGH STROKE");
				break;
			case 0x1E9E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER SHARP S");
				break;
			case 0x1E9F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DELTA");
				break;
			case 0x1EA0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH DOT BELOW");
				break;
			case 0x1EA1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH DOT BELOW");
				break;
			case 0x1EA2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH HOOK ABOVE");
				break;
			case 0x1EA3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH HOOK ABOVE");
				break;
			case 0x1EA4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND ACUTE");
				break;
			case 0x1EA5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH CIRCUMFLEX AND ACUTE");
				break;
			case 0x1EA6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND GRAVE");
				break;
			case 0x1EA7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH CIRCUMFLEX AND GRAVE");
				break;
			case 0x1EA8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE");
				break;
			case 0x1EA9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH CIRCUMFLEX AND HOOK ABOVE");
				break;
			case 0x1EAA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND TILDE");
				break;
			case 0x1EAB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH CIRCUMFLEX AND TILDE");
				break;
			case 0x1EAC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH CIRCUMFLEX AND DOT BELOW");
				break;
			case 0x1EAD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH CIRCUMFLEX AND DOT BELOW");
				break;
			case 0x1EAE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH BREVE AND ACUTE");
				break;
			case 0x1EAF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH BREVE AND ACUTE");
				break;
			case 0x1EB0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH BREVE AND GRAVE");
				break;
			case 0x1EB1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH BREVE AND GRAVE");
				break;
			case 0x1EB2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH BREVE AND HOOK ABOVE");
				break;
			case 0x1EB3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH BREVE AND HOOK ABOVE");
				break;
			case 0x1EB4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH BREVE AND TILDE");
				break;
			case 0x1EB5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH BREVE AND TILDE");
				break;
			case 0x1EB6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER A WITH BREVE AND DOT BELOW");
				break;
			case 0x1EB7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH BREVE AND DOT BELOW");
				break;
			case 0x1EB8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH DOT BELOW");
				break;
			case 0x1EB9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH DOT BELOW");
				break;
			case 0x1EBA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH HOOK ABOVE");
				break;
			case 0x1EBB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH HOOK ABOVE");
				break;
			case 0x1EBC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH TILDE");
				break;
			case 0x1EBD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH TILDE");
				break;
			case 0x1EBE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND ACUTE");
				break;
			case 0x1EBF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH CIRCUMFLEX AND ACUTE");
				break;
			case 0x1EC0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND GRAVE");
				break;
			case 0x1EC1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE");
				break;
			case 0x1EC2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE");
				break;
			case 0x1EC3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH CIRCUMFLEX AND HOOK ABOVE");
				break;
			case 0x1EC4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE");
				break;
			case 0x1EC5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH CIRCUMFLEX AND TILDE");
				break;
			case 0x1EC6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND DOT BELOW");
				break;
			case 0x1EC7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH CIRCUMFLEX AND DOT BELOW");
				break;
			case 0x1EC8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH HOOK ABOVE");
				break;
			case 0x1EC9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH HOOK ABOVE");
				break;
			case 0x1ECA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER I WITH DOT BELOW");
				break;
			case 0x1ECB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER I WITH DOT BELOW");
				break;
			case 0x1ECC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH DOT BELOW");
				break;
			case 0x1ECD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH DOT BELOW");
				break;
			case 0x1ECE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH HOOK ABOVE");
				break;
			case 0x1ECF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH HOOK ABOVE");
				break;
			case 0x1ED0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND ACUTE");
				break;
			case 0x1ED1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH CIRCUMFLEX AND ACUTE");
				break;
			case 0x1ED2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND GRAVE");
				break;
			case 0x1ED3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH CIRCUMFLEX AND GRAVE");
				break;
			case 0x1ED4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE");
				break;
			case 0x1ED5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH CIRCUMFLEX AND HOOK ABOVE");
				break;
			case 0x1ED6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND TILDE");
				break;
			case 0x1ED7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH CIRCUMFLEX AND TILDE");
				break;
			case 0x1ED8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH CIRCUMFLEX AND DOT BELOW");
				break;
			case 0x1ED9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH CIRCUMFLEX AND DOT BELOW");
				break;
			case 0x1EDA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH HORN AND ACUTE");
				break;
			case 0x1EDB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH HORN AND ACUTE");
				break;
			case 0x1EDC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH HORN AND GRAVE");
				break;
			case 0x1EDD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH HORN AND GRAVE");
				break;
			case 0x1EDE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH HORN AND HOOK ABOVE");
				break;
			case 0x1EDF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH HORN AND HOOK ABOVE");
				break;
			case 0x1EE0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH HORN AND TILDE");
				break;
			case 0x1EE1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH HORN AND TILDE");
				break;
			case 0x1EE2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH HORN AND DOT BELOW");
				break;
			case 0x1EE3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH HORN AND DOT BELOW");
				break;
			case 0x1EE4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH DOT BELOW");
				break;
			case 0x1EE5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH DOT BELOW");
				break;
			case 0x1EE6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH HOOK ABOVE");
				break;
			case 0x1EE7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH HOOK ABOVE");
				break;
			case 0x1EE8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH HORN AND ACUTE");
				break;
			case 0x1EE9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH HORN AND ACUTE");
				break;
			case 0x1EEA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH HORN AND GRAVE");
				break;
			case 0x1EEB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH HORN AND GRAVE");
				break;
			case 0x1EEC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH HORN AND HOOK ABOVE");
				break;
			case 0x1EED:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH HORN AND HOOK ABOVE");
				break;
			case 0x1EEE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH HORN AND TILDE");
				break;
			case 0x1EEF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH HORN AND TILDE");
				break;
			case 0x1EF0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH HORN AND DOT BELOW");
				break;
			case 0x1EF1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH HORN AND DOT BELOW");
				break;
			case 0x1EF2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH GRAVE");
				break;
			case 0x1EF3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH GRAVE");
				break;
			case 0x1EF4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH DOT BELOW");
				break;
			case 0x1EF5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH DOT BELOW");
				break;
			case 0x1EF6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH HOOK ABOVE");
				break;
			case 0x1EF7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH HOOK ABOVE");
				break;
			case 0x1EF8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH TILDE");
				break;
			case 0x1EF9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH TILDE");
				break;
			case 0x1EFA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER MIDDLE-WELSH LL");
				break;
			case 0x1EFB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER MIDDLE-WELSH LL");
				break;
			case 0x1EFC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER MIDDLE-WELSH V");
				break;
			case 0x1EFD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER MIDDLE-WELSH V");
				break;
			case 0x1EFE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Y WITH LOOP");
				break;
			case 0x1EFF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH LOOP");
				break;
			case 0x1F00:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH PSILI");
				break;
			case 0x1F01:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH DASIA");
				break;
			case 0x1F02:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA");
				break;
			case 0x1F03:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA");
				break;
			case 0x1F04:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA");
				break;
			case 0x1F05:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA");
				break;
			case 0x1F06:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI");
				break;
			case 0x1F07:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI");
				break;
			case 0x1F08:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH PSILI");
				break;
			case 0x1F09:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH DASIA");
				break;
			case 0x1F0A:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA");
				break;
			case 0x1F0B:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA");
				break;
			case 0x1F0C:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA");
				break;
			case 0x1F0D:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA");
				break;
			case 0x1F0E:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI");
				break;
			case 0x1F0F:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI");
				break;
			case 0x1F10:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER EPSILON WITH PSILI");
				break;
			case 0x1F11:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER EPSILON WITH DASIA");
				break;
			case 0x1F12:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER EPSILON WITH PSILI AND VARIA");
				break;
			case 0x1F13:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER EPSILON WITH DASIA AND VARIA");
				break;
			case 0x1F14:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER EPSILON WITH PSILI AND OXIA");
				break;
			case 0x1F15:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER EPSILON WITH DASIA AND OXIA");
				break;
			case 0x1F18:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER EPSILON WITH PSILI");
				break;
			case 0x1F19:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER EPSILON WITH DASIA");
				break;
			case 0x1F1A:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER EPSILON WITH PSILI AND VARIA");
				break;
			case 0x1F1B:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER EPSILON WITH DASIA AND VARIA");
				break;
			case 0x1F1C:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER EPSILON WITH PSILI AND OXIA");
				break;
			case 0x1F1D:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER EPSILON WITH DASIA AND OXIA");
				break;
			case 0x1F20:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH PSILI");
				break;
			case 0x1F21:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH DASIA");
				break;
			case 0x1F22:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH PSILI AND VARIA");
				break;
			case 0x1F23:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH DASIA AND VARIA");
				break;
			case 0x1F24:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH PSILI AND OXIA");
				break;
			case 0x1F25:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH DASIA AND OXIA");
				break;
			case 0x1F26:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI");
				break;
			case 0x1F27:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI");
				break;
			case 0x1F28:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH PSILI");
				break;
			case 0x1F29:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH DASIA");
				break;
			case 0x1F2A:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA");
				break;
			case 0x1F2B:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA");
				break;
			case 0x1F2C:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA");
				break;
			case 0x1F2D:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA");
				break;
			case 0x1F2E:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI");
				break;
			case 0x1F2F:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI");
				break;
			case 0x1F30:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH PSILI");
				break;
			case 0x1F31:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH DASIA");
				break;
			case 0x1F32:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH PSILI AND VARIA");
				break;
			case 0x1F33:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH DASIA AND VARIA");
				break;
			case 0x1F34:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH PSILI AND OXIA");
				break;
			case 0x1F35:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH DASIA AND OXIA");
				break;
			case 0x1F36:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH PSILI AND PERISPOMENI");
				break;
			case 0x1F37:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH DASIA AND PERISPOMENI");
				break;
			case 0x1F38:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH PSILI");
				break;
			case 0x1F39:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH DASIA");
				break;
			case 0x1F3A:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH PSILI AND VARIA");
				break;
			case 0x1F3B:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH DASIA AND VARIA");
				break;
			case 0x1F3C:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH PSILI AND OXIA");
				break;
			case 0x1F3D:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH DASIA AND OXIA");
				break;
			case 0x1F3E:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH PSILI AND PERISPOMENI");
				break;
			case 0x1F3F:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH DASIA AND PERISPOMENI");
				break;
			case 0x1F40:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMICRON WITH PSILI");
				break;
			case 0x1F41:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMICRON WITH DASIA");
				break;
			case 0x1F42:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMICRON WITH PSILI AND VARIA");
				break;
			case 0x1F43:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMICRON WITH DASIA AND VARIA");
				break;
			case 0x1F44:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMICRON WITH PSILI AND OXIA");
				break;
			case 0x1F45:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMICRON WITH DASIA AND OXIA");
				break;
			case 0x1F48:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMICRON WITH PSILI");
				break;
			case 0x1F49:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMICRON WITH DASIA");
				break;
			case 0x1F4A:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMICRON WITH PSILI AND VARIA");
				break;
			case 0x1F4B:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMICRON WITH DASIA AND VARIA");
				break;
			case 0x1F4C:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMICRON WITH PSILI AND OXIA");
				break;
			case 0x1F4D:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMICRON WITH DASIA AND OXIA");
				break;
			case 0x1F50:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH PSILI");
				break;
			case 0x1F51:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH DASIA");
				break;
			case 0x1F52:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA");
				break;
			case 0x1F53:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA");
				break;
			case 0x1F54:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA");
				break;
			case 0x1F55:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA");
				break;
			case 0x1F56:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI");
				break;
			case 0x1F57:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI");
				break;
			case 0x1F59:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON WITH DASIA");
				break;
			case 0x1F5B:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA");
				break;
			case 0x1F5D:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA");
				break;
			case 0x1F5F:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI");
				break;
			case 0x1F60:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH PSILI");
				break;
			case 0x1F61:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH DASIA");
				break;
			case 0x1F62:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA");
				break;
			case 0x1F63:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA");
				break;
			case 0x1F64:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA");
				break;
			case 0x1F65:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA");
				break;
			case 0x1F66:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI");
				break;
			case 0x1F67:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI");
				break;
			case 0x1F68:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH PSILI");
				break;
			case 0x1F69:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH DASIA");
				break;
			case 0x1F6A:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA");
				break;
			case 0x1F6B:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA");
				break;
			case 0x1F6C:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA");
				break;
			case 0x1F6D:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA");
				break;
			case 0x1F6E:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI");
				break;
			case 0x1F6F:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI");
				break;
			case 0x1F70:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH VARIA");
				break;
			case 0x1F71:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH OXIA");
				break;
			case 0x1F72:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER EPSILON WITH VARIA");
				break;
			case 0x1F73:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER EPSILON WITH OXIA");
				break;
			case 0x1F74:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH VARIA");
				break;
			case 0x1F75:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH OXIA");
				break;
			case 0x1F76:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH VARIA");
				break;
			case 0x1F77:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH OXIA");
				break;
			case 0x1F78:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMICRON WITH VARIA");
				break;
			case 0x1F79:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMICRON WITH OXIA");
				break;
			case 0x1F7A:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH VARIA");
				break;
			case 0x1F7B:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH OXIA");
				break;
			case 0x1F7C:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH VARIA");
				break;
			case 0x1F7D:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH OXIA");
				break;
			case 0x1F80:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI");
				break;
			case 0x1F81:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI");
				break;
			case 0x1F82:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI");
				break;
			case 0x1F83:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI");
				break;
			case 0x1F84:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI");
				break;
			case 0x1F85:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI");
				break;
			case 0x1F86:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI");
				break;
			case 0x1F87:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI");
				break;
			case 0x1F88:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI");
				break;
			case 0x1F89:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI");
				break;
			case 0x1F8A:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI");
				break;
			case 0x1F8B:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA AND PROSGEGRAMMENI");
				break;
			case 0x1F8C:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI");
				break;
			case 0x1F8D:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI");
				break;
			case 0x1F8E:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI");
				break;
			case 0x1F8F:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI");
				break;
			case 0x1F90:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH PSILI AND YPOGEGRAMMENI");
				break;
			case 0x1F91:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH DASIA AND YPOGEGRAMMENI");
				break;
			case 0x1F92:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH PSILI AND VARIA AND YPOGEGRAMMENI");
				break;
			case 0x1F93:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH DASIA AND VARIA AND YPOGEGRAMMENI");
				break;
			case 0x1F94:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH PSILI AND OXIA AND YPOGEGRAMMENI");
				break;
			case 0x1F95:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH DASIA AND OXIA AND YPOGEGRAMMENI");
				break;
			case 0x1F96:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI");
				break;
			case 0x1F97:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI");
				break;
			case 0x1F98:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH PSILI AND PROSGEGRAMMENI");
				break;
			case 0x1F99:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH DASIA AND PROSGEGRAMMENI");
				break;
			case 0x1F9A:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH PSILI AND VARIA AND PROSGEGRAMMENI");
				break;
			case 0x1F9B:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH DASIA AND VARIA AND PROSGEGRAMMENI");
				break;
			case 0x1F9C:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH PSILI AND OXIA AND PROSGEGRAMMENI");
				break;
			case 0x1F9D:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH DASIA AND OXIA AND PROSGEGRAMMENI");
				break;
			case 0x1F9E:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI");
				break;
			case 0x1F9F:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI");
				break;
			case 0x1FA0:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI");
				break;
			case 0x1FA1:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI");
				break;
			case 0x1FA2:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI");
				break;
			case 0x1FA3:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI");
				break;
			case 0x1FA4:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI");
				break;
			case 0x1FA5:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI");
				break;
			case 0x1FA6:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI");
				break;
			case 0x1FA7:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI");
				break;
			case 0x1FA8:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI");
				break;
			case 0x1FA9:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI");
				break;
			case 0x1FAA:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI");
				break;
			case 0x1FAB:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI");
				break;
			case 0x1FAC:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI");
				break;
			case 0x1FAD:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI");
				break;
			case 0x1FAE:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI");
				break;
			case 0x1FAF:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI");
				break;
			case 0x1FB0:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH VRACHY");
				break;
			case 0x1FB1:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH MACRON");
				break;
			case 0x1FB2:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI");
				break;
			case 0x1FB3:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI");
				break;
			case 0x1FB4:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI");
				break;
			case 0x1FB6:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH PERISPOMENI");
				break;
			case 0x1FB7:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ALPHA WITH PERISPOMENI AND YPOGEGRAMMENI");
				break;
			case 0x1FB8:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH VRACHY");
				break;
			case 0x1FB9:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH MACRON");
				break;
			case 0x1FBA:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH VARIA");
				break;
			case 0x1FBB:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH OXIA");
				break;
			case 0x1FBC:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI");
				break;
			case 0x1FBD:
				strcpy_s(buf, buf_size, "GREEK KORONIS");
				break;
			case 0x1FBE:
				strcpy_s(buf, buf_size, "GREEK PROSGEGRAMMENI");
				break;
			case 0x1FBF:
				strcpy_s(buf, buf_size, "GREEK PSILI");
				break;
			case 0x1FC0:
				strcpy_s(buf, buf_size, "GREEK PERISPOMENI");
				break;
			case 0x1FC1:
				strcpy_s(buf, buf_size, "GREEK DIALYTIKA AND PERISPOMENI");
				break;
			case 0x1FC2:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH VARIA AND YPOGEGRAMMENI");
				break;
			case 0x1FC3:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH YPOGEGRAMMENI");
				break;
			case 0x1FC4:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH OXIA AND YPOGEGRAMMENI");
				break;
			case 0x1FC6:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH PERISPOMENI");
				break;
			case 0x1FC7:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER ETA WITH PERISPOMENI AND YPOGEGRAMMENI");
				break;
			case 0x1FC8:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER EPSILON WITH VARIA");
				break;
			case 0x1FC9:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER EPSILON WITH OXIA");
				break;
			case 0x1FCA:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH VARIA");
				break;
			case 0x1FCB:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH OXIA");
				break;
			case 0x1FCC:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER ETA WITH PROSGEGRAMMENI");
				break;
			case 0x1FCD:
				strcpy_s(buf, buf_size, "GREEK PSILI AND VARIA");
				break;
			case 0x1FCE:
				strcpy_s(buf, buf_size, "GREEK PSILI AND OXIA");
				break;
			case 0x1FCF:
				strcpy_s(buf, buf_size, "GREEK PSILI AND PERISPOMENI");
				break;
			case 0x1FD0:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH VRACHY");
				break;
			case 0x1FD1:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH MACRON");
				break;
			case 0x1FD2:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH DIALYTIKA AND VARIA");
				break;
			case 0x1FD3:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH DIALYTIKA AND OXIA");
				break;
			case 0x1FD6:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH PERISPOMENI");
				break;
			case 0x1FD7:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER IOTA WITH DIALYTIKA AND PERISPOMENI");
				break;
			case 0x1FD8:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH VRACHY");
				break;
			case 0x1FD9:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH MACRON");
				break;
			case 0x1FDA:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH VARIA");
				break;
			case 0x1FDB:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER IOTA WITH OXIA");
				break;
			case 0x1FDD:
				strcpy_s(buf, buf_size, "GREEK DASIA AND VARIA");
				break;
			case 0x1FDE:
				strcpy_s(buf, buf_size, "GREEK DASIA AND OXIA");
				break;
			case 0x1FDF:
				strcpy_s(buf, buf_size, "GREEK DASIA AND PERISPOMENI");
				break;
			case 0x1FE0:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH VRACHY");
				break;
			case 0x1FE1:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH MACRON");
				break;
			case 0x1FE2:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA");
				break;
			case 0x1FE3:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA");
				break;
			case 0x1FE4:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER RHO WITH PSILI");
				break;
			case 0x1FE5:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER RHO WITH DASIA");
				break;
			case 0x1FE6:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH PERISPOMENI");
				break;
			case 0x1FE7:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI");
				break;
			case 0x1FE8:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON WITH VRACHY");
				break;
			case 0x1FE9:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON WITH MACRON");
				break;
			case 0x1FEA:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON WITH VARIA");
				break;
			case 0x1FEB:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER UPSILON WITH OXIA");
				break;
			case 0x1FEC:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER RHO WITH DASIA");
				break;
			case 0x1FED:
				strcpy_s(buf, buf_size, "GREEK DIALYTIKA AND VARIA");
				break;
			case 0x1FEE:
				strcpy_s(buf, buf_size, "GREEK DIALYTIKA AND OXIA");
				break;
			case 0x1FEF:
				strcpy_s(buf, buf_size, "GREEK VARIA");
				break;
			case 0x1FF2:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI");
				break;
			case 0x1FF3:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI");
				break;
			case 0x1FF4:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI");
				break;
			case 0x1FF6:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH PERISPOMENI");
				break;
			case 0x1FF7:
				strcpy_s(buf, buf_size, "GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI");
				break;
			case 0x1FF8:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMICRON WITH VARIA");
				break;
			case 0x1FF9:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMICRON WITH OXIA");
				break;
			case 0x1FFA:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH VARIA");
				break;
			case 0x1FFB:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH OXIA");
				break;
			case 0x1FFC:
				strcpy_s(buf, buf_size, "GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI");
				break;
			case 0x1FFD:
				strcpy_s(buf, buf_size, "GREEK OXIA");
				break;
			case 0x1FFE:
				strcpy_s(buf, buf_size, "GREEK DASIA");
				break;
			case 0x2000:
				strcpy_s(buf, buf_size, "EN QUAD");
				break;
			case 0x2001:
				strcpy_s(buf, buf_size, "EM QUAD");
				break;
			case 0x2002:
				strcpy_s(buf, buf_size, "EN SPACE");
				break;
			case 0x2003:
				strcpy_s(buf, buf_size, "EM SPACE");
				break;
			case 0x2004:
				strcpy_s(buf, buf_size, "THREE-PER-EM SPACE");
				break;
			case 0x2005:
				strcpy_s(buf, buf_size, "FOUR-PER-EM SPACE");
				break;
			case 0x2006:
				strcpy_s(buf, buf_size, "SIX-PER-EM SPACE");
				break;
			case 0x2007:
				strcpy_s(buf, buf_size, "FIGURE SPACE");
				break;
			case 0x2008:
				strcpy_s(buf, buf_size, "PUNCTUATION SPACE");
				break;
			case 0x2009:
				strcpy_s(buf, buf_size, "THIN SPACE");
				break;
			case 0x200A:
				strcpy_s(buf, buf_size, "HAIR SPACE");
				break;
			case 0x200B:
				strcpy_s(buf, buf_size, "ZERO WIDTH SPACE");
				break;
			case 0x200C:
				strcpy_s(buf, buf_size, "ZERO WIDTH NON-JOINER");
				break;
			case 0x200D:
				strcpy_s(buf, buf_size, "ZERO WIDTH JOINER");
				break;
			case 0x200E:
				strcpy_s(buf, buf_size, "LEFT-TO-RIGHT MARK");
				break;
			case 0x200F:
				strcpy_s(buf, buf_size, "RIGHT-TO-LEFT MARK");
				break;
			case 0x2010:
				strcpy_s(buf, buf_size, "HYPHEN");
				break;
			case 0x2011:
				strcpy_s(buf, buf_size, "NON-BREAKING HYPHEN");
				break;
			case 0x2012:
				strcpy_s(buf, buf_size, "FIGURE DASH");
				break;
			case 0x2013:
				strcpy_s(buf, buf_size, "EN DASH");
				break;
			case 0x2014:
				strcpy_s(buf, buf_size, "EM DASH");
				break;
			case 0x2015:
				strcpy_s(buf, buf_size, "HORIZONTAL BAR");
				break;
			case 0x2016:
				strcpy_s(buf, buf_size, "DOUBLE VERTICAL LINE");
				break;
			case 0x2017:
				strcpy_s(buf, buf_size, "DOUBLE LOW LINE");
				break;
			case 0x2018:
				strcpy_s(buf, buf_size, "LEFT SINGLE QUOTATION MARK");
				break;
			case 0x2019:
				strcpy_s(buf, buf_size, "RIGHT SINGLE QUOTATION MARK");
				break;
			case 0x201A:
				strcpy_s(buf, buf_size, "SINGLE LOW-9 QUOTATION MARK");
				break;
			case 0x201B:
				strcpy_s(buf, buf_size, "SINGLE HIGH-REVERSED-9 QUOTATION MARK");
				break;
			case 0x201C:
				strcpy_s(buf, buf_size, "LEFT DOUBLE QUOTATION MARK");
				break;
			case 0x201D:
				strcpy_s(buf, buf_size, "RIGHT DOUBLE QUOTATION MARK");
				break;
			case 0x201E:
				strcpy_s(buf, buf_size, "DOUBLE LOW-9 QUOTATION MARK");
				break;
			case 0x201F:
				strcpy_s(buf, buf_size, "DOUBLE HIGH-REVERSED-9 QUOTATION MARK");
				break;
			case 0x2020:
				strcpy_s(buf, buf_size, "DAGGER");
				break;
			case 0x2021:
				strcpy_s(buf, buf_size, "DOUBLE DAGGER");
				break;
			case 0x2022:
				strcpy_s(buf, buf_size, "BULLET");
				break;
			case 0x2023:
				strcpy_s(buf, buf_size, "TRIANGULAR BULLET");
				break;
			case 0x2024:
				strcpy_s(buf, buf_size, "ONE DOT LEADER");
				break;
			case 0x2025:
				strcpy_s(buf, buf_size, "TWO DOT LEADER");
				break;
			case 0x2026:
				strcpy_s(buf, buf_size, "HORIZONTAL ELLIPSIS");
				break;
			case 0x2027:
				strcpy_s(buf, buf_size, "HYPHENATION POINT");
				break;
			case 0x2028:
				strcpy_s(buf, buf_size, "LINE SEPARATOR");
				break;
			case 0x2029:
				strcpy_s(buf, buf_size, "PARAGRAPH SEPARATOR");
				break;
			case 0x202A:
				strcpy_s(buf, buf_size, "LEFT-TO-RIGHT EMBEDDING");
				break;
			case 0x202B:
				strcpy_s(buf, buf_size, "RIGHT-TO-LEFT EMBEDDING");
				break;
			case 0x202C:
				strcpy_s(buf, buf_size, "POP DIRECTIONAL FORMATTING");
				break;
			case 0x202D:
				strcpy_s(buf, buf_size, "LEFT-TO-RIGHT OVERRIDE");
				break;
			case 0x202E:
				strcpy_s(buf, buf_size, "RIGHT-TO-LEFT OVERRIDE");
				break;
			case 0x202F:
				strcpy_s(buf, buf_size, "NARROW NO-BREAK SPACE");
				break;
			case 0x2030:
				strcpy_s(buf, buf_size, "PER MILLE SIGN");
				break;
			case 0x2031:
				strcpy_s(buf, buf_size, "PER TEN THOUSAND SIGN");
				break;
			case 0x2032:
				strcpy_s(buf, buf_size, "PRIME");
				break;
			case 0x2033:
				strcpy_s(buf, buf_size, "DOUBLE PRIME");
				break;
			case 0x2034:
				strcpy_s(buf, buf_size, "TRIPLE PRIME");
				break;
			case 0x2035:
				strcpy_s(buf, buf_size, "REVERSED PRIME");
				break;
			case 0x2036:
				strcpy_s(buf, buf_size, "REVERSED DOUBLE PRIME");
				break;
			case 0x2037:
				strcpy_s(buf, buf_size, "REVERSED TRIPLE PRIME");
				break;
			case 0x2038:
				strcpy_s(buf, buf_size, "CARET");
				break;
			case 0x2039:
				strcpy_s(buf, buf_size, "SINGLE LEFT-POINTING ANGLE QUOTATION MARK");
				break;
			case 0x203A:
				strcpy_s(buf, buf_size, "SINGLE RIGHT-POINTING ANGLE QUOTATION MARK");
				break;
			case 0x203B:
				strcpy_s(buf, buf_size, "REFERENCE MARK");
				break;
			case 0x203C:
				strcpy_s(buf, buf_size, "DOUBLE EXCLAMATION MARK");
				break;
			case 0x203D:
				strcpy_s(buf, buf_size, "INTERROBANG");
				break;
			case 0x203E:
				strcpy_s(buf, buf_size, "OVERLINE");
				break;
			case 0x203F:
				strcpy_s(buf, buf_size, "UNDERTIE");
				break;
			case 0x2040:
				strcpy_s(buf, buf_size, "CHARACTER TIE");
				break;
			case 0x2041:
				strcpy_s(buf, buf_size, "CARET INSERTION POINT");
				break;
			case 0x2042:
				strcpy_s(buf, buf_size, "ASTERISM");
				break;
			case 0x2043:
				strcpy_s(buf, buf_size, "HYPHEN BULLET");
				break;
			case 0x2044:
				strcpy_s(buf, buf_size, "FRACTION SLASH");
				break;
			case 0x2045:
				strcpy_s(buf, buf_size, "LEFT SQUARE BRACKET WITH QUILL");
				break;
			case 0x2046:
				strcpy_s(buf, buf_size, "RIGHT SQUARE BRACKET WITH QUILL");
				break;
			case 0x2047:
				strcpy_s(buf, buf_size, "DOUBLE QUESTION MARK");
				break;
			case 0x2048:
				strcpy_s(buf, buf_size, "QUESTION EXCLAMATION MARK");
				break;
			case 0x2049:
				strcpy_s(buf, buf_size, "EXCLAMATION QUESTION MARK");
				break;
			case 0x204A:
				strcpy_s(buf, buf_size, "TIRONIAN SIGN ET");
				break;
			case 0x204B:
				strcpy_s(buf, buf_size, "REVERSED PILCROW SIGN");
				break;
			case 0x204C:
				strcpy_s(buf, buf_size, "BLACK LEFTWARDS BULLET");
				break;
			case 0x204D:
				strcpy_s(buf, buf_size, "BLACK RIGHTWARDS BULLET");
				break;
			case 0x204E:
				strcpy_s(buf, buf_size, "LOW ASTERISK");
				break;
			case 0x204F:
				strcpy_s(buf, buf_size, "REVERSED SEMICOLON");
				break;
			case 0x2050:
				strcpy_s(buf, buf_size, "CLOSE UP");
				break;
			case 0x2051:
				strcpy_s(buf, buf_size, "TWO ASTERISKS ALIGNED VERTICALLY");
				break;
			case 0x2052:
				strcpy_s(buf, buf_size, "COMMERCIAL MINUS SIGN");
				break;
			case 0x2053:
				strcpy_s(buf, buf_size, "SWUNG DASH");
				break;
			case 0x2054:
				strcpy_s(buf, buf_size, "INVERTED UNDERTIE");
				break;
			case 0x2055:
				strcpy_s(buf, buf_size, "FLOWER PUNCTUATION MARK");
				break;
			case 0x2056:
				strcpy_s(buf, buf_size, "THREE DOT PUNCTUATION");
				break;
			case 0x2057:
				strcpy_s(buf, buf_size, "QUADRUPLE PRIME");
				break;
			case 0x2058:
				strcpy_s(buf, buf_size, "FOUR DOT PUNCTUATION");
				break;
			case 0x2059:
				strcpy_s(buf, buf_size, "FIVE DOT PUNCTUATION");
				break;
			case 0x205A:
				strcpy_s(buf, buf_size, "TWO DOT PUNCTUATION");
				break;
			case 0x205B:
				strcpy_s(buf, buf_size, "FOUR DOT MARK");
				break;
			case 0x205C:
				strcpy_s(buf, buf_size, "DOTTED CROSS");
				break;
			case 0x205D:
				strcpy_s(buf, buf_size, "TRICOLON");
				break;
			case 0x205E:
				strcpy_s(buf, buf_size, "VERTICAL FOUR DOTS");
				break;
			case 0x205F:
				strcpy_s(buf, buf_size, "MEDIUM MATHEMATICAL SPACE");
				break;
			case 0x2060:
				strcpy_s(buf, buf_size, "WORD JOINER");
				break;
			case 0x2061:
				strcpy_s(buf, buf_size, "FUNCTION APPLICATION");
				break;
			case 0x2062:
				strcpy_s(buf, buf_size, "INVISIBLE TIMES");
				break;
			case 0x2063:
				strcpy_s(buf, buf_size, "INVISIBLE SEPARATOR");
				break;
			case 0x2064:
				strcpy_s(buf, buf_size, "INVISIBLE PLUS");
				break;
			case 0x2066:
				strcpy_s(buf, buf_size, "LEFT-TO-RIGHT ISOLATE");
				break;
			case 0x2067:
				strcpy_s(buf, buf_size, "RIGHT-TO-LEFT ISOLATE");
				break;
			case 0x2068:
				strcpy_s(buf, buf_size, "FIRST STRONG ISOLATE");
				break;
			case 0x2069:
				strcpy_s(buf, buf_size, "POP DIRECTIONAL ISOLATE");
				break;
			case 0x206A:
				strcpy_s(buf, buf_size, "INHIBIT SYMMETRIC SWAPPING");
				break;
			case 0x206B:
				strcpy_s(buf, buf_size, "ACTIVATE SYMMETRIC SWAPPING");
				break;
			case 0x206C:
				strcpy_s(buf, buf_size, "INHIBIT ARABIC FORM SHAPING");
				break;
			case 0x206D:
				strcpy_s(buf, buf_size, "ACTIVATE ARABIC FORM SHAPING");
				break;
			case 0x206E:
				strcpy_s(buf, buf_size, "NATIONAL DIGIT SHAPES");
				break;
			case 0x206F:
				strcpy_s(buf, buf_size, "NOMINAL DIGIT SHAPES");
				break;
			case 0x2070:
				strcpy_s(buf, buf_size, "SUPERSCRIPT ZERO");
				break;
			case 0x2071:
				strcpy_s(buf, buf_size, "SUPERSCRIPT LATIN SMALL LETTER I");
				break;
			case 0x2074:
				strcpy_s(buf, buf_size, "SUPERSCRIPT FOUR");
				break;
			case 0x2075:
				strcpy_s(buf, buf_size, "SUPERSCRIPT FIVE");
				break;
			case 0x2076:
				strcpy_s(buf, buf_size, "SUPERSCRIPT SIX");
				break;
			case 0x2077:
				strcpy_s(buf, buf_size, "SUPERSCRIPT SEVEN");
				break;
			case 0x2078:
				strcpy_s(buf, buf_size, "SUPERSCRIPT EIGHT");
				break;
			case 0x2079:
				strcpy_s(buf, buf_size, "SUPERSCRIPT NINE");
				break;
			case 0x207A:
				strcpy_s(buf, buf_size, "SUPERSCRIPT PLUS SIGN");
				break;
			case 0x207B:
				strcpy_s(buf, buf_size, "SUPERSCRIPT MINUS");
				break;
			case 0x207C:
				strcpy_s(buf, buf_size, "SUPERSCRIPT EQUALS SIGN");
				break;
			case 0x207D:
				strcpy_s(buf, buf_size, "SUPERSCRIPT LEFT PARENTHESIS");
				break;
			case 0x207E:
				strcpy_s(buf, buf_size, "SUPERSCRIPT RIGHT PARENTHESIS");
				break;
			case 0x207F:
				strcpy_s(buf, buf_size, "SUPERSCRIPT LATIN SMALL LETTER N");
				break;
			case 0x2080:
				strcpy_s(buf, buf_size, "SUBSCRIPT ZERO");
				break;
			case 0x2081:
				strcpy_s(buf, buf_size, "SUBSCRIPT ONE");
				break;
			case 0x2082:
				strcpy_s(buf, buf_size, "SUBSCRIPT TWO");
				break;
			case 0x2083:
				strcpy_s(buf, buf_size, "SUBSCRIPT THREE");
				break;
			case 0x2084:
				strcpy_s(buf, buf_size, "SUBSCRIPT FOUR");
				break;
			case 0x2085:
				strcpy_s(buf, buf_size, "SUBSCRIPT FIVE");
				break;
			case 0x2086:
				strcpy_s(buf, buf_size, "SUBSCRIPT SIX");
				break;
			case 0x2087:
				strcpy_s(buf, buf_size, "SUBSCRIPT SEVEN");
				break;
			case 0x2088:
				strcpy_s(buf, buf_size, "SUBSCRIPT EIGHT");
				break;
			case 0x2089:
				strcpy_s(buf, buf_size, "SUBSCRIPT NINE");
				break;
			case 0x208A:
				strcpy_s(buf, buf_size, "SUBSCRIPT PLUS SIGN");
				break;
			case 0x208B:
				strcpy_s(buf, buf_size, "SUBSCRIPT MINUS");
				break;
			case 0x208C:
				strcpy_s(buf, buf_size, "SUBSCRIPT EQUALS SIGN");
				break;
			case 0x208D:
				strcpy_s(buf, buf_size, "SUBSCRIPT LEFT PARENTHESIS");
				break;
			case 0x208E:
				strcpy_s(buf, buf_size, "SUBSCRIPT RIGHT PARENTHESIS");
				break;
			case 0x2090:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER A");
				break;
			case 0x2091:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER E");
				break;
			case 0x2092:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER O");
				break;
			case 0x2093:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER X");
				break;
			case 0x2094:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER SCHWA");
				break;
			case 0x2095:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER H");
				break;
			case 0x2096:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER K");
				break;
			case 0x2097:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER L");
				break;
			case 0x2098:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER M");
				break;
			case 0x2099:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER N");
				break;
			case 0x209A:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER P");
				break;
			case 0x209B:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER S");
				break;
			case 0x209C:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER T");
				break;
			case 0x20A0:
				strcpy_s(buf, buf_size, "EURO-CURRENCY SIGN");
				break;
			case 0x20A1:
				strcpy_s(buf, buf_size, "COLON SIGN");
				break;
			case 0x20A2:
				strcpy_s(buf, buf_size, "CRUZEIRO SIGN");
				break;
			case 0x20A3:
				strcpy_s(buf, buf_size, "FRENCH FRANC SIGN");
				break;
			case 0x20A4:
				strcpy_s(buf, buf_size, "LIRA SIGN");
				break;
			case 0x20A5:
				strcpy_s(buf, buf_size, "MILL SIGN");
				break;
			case 0x20A6:
				strcpy_s(buf, buf_size, "NAIRA SIGN");
				break;
			case 0x20A7:
				strcpy_s(buf, buf_size, "PESETA SIGN");
				break;
			case 0x20A8:
				strcpy_s(buf, buf_size, "RUPEE SIGN");
				break;
			case 0x20A9:
				strcpy_s(buf, buf_size, "WON SIGN");
				break;
			case 0x20AA:
				strcpy_s(buf, buf_size, "NEW SHEQEL SIGN");
				break;
			case 0x20AB:
				strcpy_s(buf, buf_size, "DONG SIGN");
				break;
			case 0x20AC:
				strcpy_s(buf, buf_size, "EURO SIGN");
				break;
			case 0x20AD:
				strcpy_s(buf, buf_size, "KIP SIGN");
				break;
			case 0x20AE:
				strcpy_s(buf, buf_size, "TUGRIK SIGN");
				break;
			case 0x20AF:
				strcpy_s(buf, buf_size, "DRACHMA SIGN");
				break;
			case 0x20B0:
				strcpy_s(buf, buf_size, "GERMAN PENNY SIGN");
				break;
			case 0x20B1:
				strcpy_s(buf, buf_size, "PESO SIGN");
				break;
			case 0x20B2:
				strcpy_s(buf, buf_size, "GUARANI SIGN");
				break;
			case 0x20B3:
				strcpy_s(buf, buf_size, "AUSTRAL SIGN");
				break;
			case 0x20B4:
				strcpy_s(buf, buf_size, "HRYVNIA SIGN");
				break;
			case 0x20B5:
				strcpy_s(buf, buf_size, "CEDI SIGN");
				break;
			case 0x20B6:
				strcpy_s(buf, buf_size, "LIVRE TOURNOIS SIGN");
				break;
			case 0x20B7:
				strcpy_s(buf, buf_size, "SPESMILO SIGN");
				break;
			case 0x20B8:
				strcpy_s(buf, buf_size, "TENGE SIGN");
				break;
			case 0x20B9:
				strcpy_s(buf, buf_size, "INDIAN RUPEE SIGN");
				break;
			case 0x20BA:
				strcpy_s(buf, buf_size, "TURKISH LIRA SIGN");
				break;
			case 0x20BB:
				strcpy_s(buf, buf_size, "NORDIC MARK SIGN");
				break;
			case 0x20BC:
				strcpy_s(buf, buf_size, "MANAT SIGN");
				break;
			case 0x20BD:
				strcpy_s(buf, buf_size, "RUBLE SIGN");
				break;
			case 0x20BE:
				strcpy_s(buf, buf_size, "LARI SIGN");
				break;
			case 0x20BF:
				strcpy_s(buf, buf_size, "BITCOIN SIGN");
				break;
			case 0x20D0:
				strcpy_s(buf, buf_size, "COMBINING LEFT HARPOON ABOVE");
				break;
			case 0x20D1:
				strcpy_s(buf, buf_size, "COMBINING RIGHT HARPOON ABOVE");
				break;
			case 0x20D2:
				strcpy_s(buf, buf_size, "COMBINING LONG VERTICAL LINE OVERLAY");
				break;
			case 0x20D3:
				strcpy_s(buf, buf_size, "COMBINING SHORT VERTICAL LINE OVERLAY");
				break;
			case 0x20D4:
				strcpy_s(buf, buf_size, "COMBINING ANTICLOCKWISE ARROW ABOVE");
				break;
			case 0x20D5:
				strcpy_s(buf, buf_size, "COMBINING CLOCKWISE ARROW ABOVE");
				break;
			case 0x20D6:
				strcpy_s(buf, buf_size, "COMBINING LEFT ARROW ABOVE");
				break;
			case 0x20D7:
				strcpy_s(buf, buf_size, "COMBINING RIGHT ARROW ABOVE");
				break;
			case 0x20D8:
				strcpy_s(buf, buf_size, "COMBINING RING OVERLAY");
				break;
			case 0x20D9:
				strcpy_s(buf, buf_size, "COMBINING CLOCKWISE RING OVERLAY");
				break;
			case 0x20DA:
				strcpy_s(buf, buf_size, "COMBINING ANTICLOCKWISE RING OVERLAY");
				break;
			case 0x20DB:
				strcpy_s(buf, buf_size, "COMBINING THREE DOTS ABOVE");
				break;
			case 0x20DC:
				strcpy_s(buf, buf_size, "COMBINING FOUR DOTS ABOVE");
				break;
			case 0x20DD:
				strcpy_s(buf, buf_size, "COMBINING ENCLOSING CIRCLE");
				break;
			case 0x20DE:
				strcpy_s(buf, buf_size, "COMBINING ENCLOSING SQUARE");
				break;
			case 0x20DF:
				strcpy_s(buf, buf_size, "COMBINING ENCLOSING DIAMOND");
				break;
			case 0x20E0:
				strcpy_s(buf, buf_size, "COMBINING ENCLOSING CIRCLE BACKSLASH");
				break;
			case 0x20E1:
				strcpy_s(buf, buf_size, "COMBINING LEFT RIGHT ARROW ABOVE");
				break;
			case 0x20E2:
				strcpy_s(buf, buf_size, "COMBINING ENCLOSING SCREEN");
				break;
			case 0x20E3:
				strcpy_s(buf, buf_size, "COMBINING ENCLOSING KEYCAP");
				break;
			case 0x20E4:
				strcpy_s(buf, buf_size, "COMBINING ENCLOSING UPWARD POINTING TRIANGLE");
				break;
			case 0x20E5:
				strcpy_s(buf, buf_size, "COMBINING REVERSE SOLIDUS OVERLAY");
				break;
			case 0x20E6:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE VERTICAL STROKE OVERLAY");
				break;
			case 0x20E7:
				strcpy_s(buf, buf_size, "COMBINING ANNUITY SYMBOL");
				break;
			case 0x20E8:
				strcpy_s(buf, buf_size, "COMBINING TRIPLE UNDERDOT");
				break;
			case 0x20E9:
				strcpy_s(buf, buf_size, "COMBINING WIDE BRIDGE ABOVE");
				break;
			case 0x20EA:
				strcpy_s(buf, buf_size, "COMBINING LEFTWARDS ARROW OVERLAY");
				break;
			case 0x20EB:
				strcpy_s(buf, buf_size, "COMBINING LONG DOUBLE SOLIDUS OVERLAY");
				break;
			case 0x20EC:
				strcpy_s(buf, buf_size, "COMBINING RIGHTWARDS HARPOON WITH BARB DOWNWARDS");
				break;
			case 0x20ED:
				strcpy_s(buf, buf_size, "COMBINING LEFTWARDS HARPOON WITH BARB DOWNWARDS");
				break;
			case 0x20EE:
				strcpy_s(buf, buf_size, "COMBINING LEFT ARROW BELOW");
				break;
			case 0x20EF:
				strcpy_s(buf, buf_size, "COMBINING RIGHT ARROW BELOW");
				break;
			case 0x20F0:
				strcpy_s(buf, buf_size, "COMBINING ASTERISK ABOVE");
				break;
			case 0x2100:
				strcpy_s(buf, buf_size, "ACCOUNT OF");
				break;
			case 0x2101:
				strcpy_s(buf, buf_size, "ADDRESSED TO THE SUBJECT");
				break;
			case 0x2102:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK CAPITAL C");
				break;
			case 0x2103:
				strcpy_s(buf, buf_size, "DEGREE CELSIUS");
				break;
			case 0x2104:
				strcpy_s(buf, buf_size, "CENTRE LINE SYMBOL");
				break;
			case 0x2105:
				strcpy_s(buf, buf_size, "CARE OF");
				break;
			case 0x2106:
				strcpy_s(buf, buf_size, "CADA UNA");
				break;
			case 0x2107:
				strcpy_s(buf, buf_size, "EULER CONSTANT");
				break;
			case 0x2108:
				strcpy_s(buf, buf_size, "SCRUPLE");
				break;
			case 0x2109:
				strcpy_s(buf, buf_size, "DEGREE FAHRENHEIT");
				break;
			case 0x210A:
				strcpy_s(buf, buf_size, "SCRIPT SMALL G");
				break;
			case 0x210B:
				strcpy_s(buf, buf_size, "SCRIPT CAPITAL H");
				break;
			case 0x210C:
				strcpy_s(buf, buf_size, "BLACK-LETTER CAPITAL H");
				break;
			case 0x210D:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK CAPITAL H");
				break;
			case 0x210E:
				strcpy_s(buf, buf_size, "PLANCK CONSTANT");
				break;
			case 0x210F:
				strcpy_s(buf, buf_size, "PLANCK CONSTANT OVER TWO PI");
				break;
			case 0x2110:
				strcpy_s(buf, buf_size, "SCRIPT CAPITAL I");
				break;
			case 0x2111:
				strcpy_s(buf, buf_size, "BLACK-LETTER CAPITAL I");
				break;
			case 0x2112:
				strcpy_s(buf, buf_size, "SCRIPT CAPITAL L");
				break;
			case 0x2113:
				strcpy_s(buf, buf_size, "SCRIPT SMALL L");
				break;
			case 0x2114:
				strcpy_s(buf, buf_size, "L B BAR SYMBOL");
				break;
			case 0x2115:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK CAPITAL N");
				break;
			case 0x2116:
				strcpy_s(buf, buf_size, "NUMERO SIGN");
				break;
			case 0x2117:
				strcpy_s(buf, buf_size, "SOUND RECORDING COPYRIGHT");
				break;
			case 0x2118:
				strcpy_s(buf, buf_size, "SCRIPT CAPITAL P");
				break;
			case 0x2119:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK CAPITAL P");
				break;
			case 0x211A:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK CAPITAL Q");
				break;
			case 0x211B:
				strcpy_s(buf, buf_size, "SCRIPT CAPITAL R");
				break;
			case 0x211C:
				strcpy_s(buf, buf_size, "BLACK-LETTER CAPITAL R");
				break;
			case 0x211D:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK CAPITAL R");
				break;
			case 0x211E:
				strcpy_s(buf, buf_size, "PRESCRIPTION TAKE");
				break;
			case 0x211F:
				strcpy_s(buf, buf_size, "RESPONSE");
				break;
			case 0x2120:
				strcpy_s(buf, buf_size, "SERVICE MARK");
				break;
			case 0x2121:
				strcpy_s(buf, buf_size, "TELEPHONE SIGN");
				break;
			case 0x2122:
				strcpy_s(buf, buf_size, "TRADE MARK SIGN");
				break;
			case 0x2123:
				strcpy_s(buf, buf_size, "VERSICLE");
				break;
			case 0x2124:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK CAPITAL Z");
				break;
			case 0x2125:
				strcpy_s(buf, buf_size, "OUNCE SIGN");
				break;
			case 0x2126:
				strcpy_s(buf, buf_size, "OHM SIGN");
				break;
			case 0x2127:
				strcpy_s(buf, buf_size, "INVERTED OHM SIGN");
				break;
			case 0x2128:
				strcpy_s(buf, buf_size, "BLACK-LETTER CAPITAL Z");
				break;
			case 0x2129:
				strcpy_s(buf, buf_size, "TURNED GREEK SMALL LETTER IOTA");
				break;
			case 0x212A:
				strcpy_s(buf, buf_size, "KELVIN SIGN");
				break;
			case 0x212B:
				strcpy_s(buf, buf_size, "ANGSTROM SIGN");
				break;
			case 0x212C:
				strcpy_s(buf, buf_size, "SCRIPT CAPITAL B");
				break;
			case 0x212D:
				strcpy_s(buf, buf_size, "BLACK-LETTER CAPITAL C");
				break;
			case 0x212E:
				strcpy_s(buf, buf_size, "ESTIMATED SYMBOL");
				break;
			case 0x212F:
				strcpy_s(buf, buf_size, "SCRIPT SMALL E");
				break;
			case 0x2130:
				strcpy_s(buf, buf_size, "SCRIPT CAPITAL E");
				break;
			case 0x2131:
				strcpy_s(buf, buf_size, "SCRIPT CAPITAL F");
				break;
			case 0x2132:
				strcpy_s(buf, buf_size, "TURNED CAPITAL F");
				break;
			case 0x2133:
				strcpy_s(buf, buf_size, "SCRIPT CAPITAL M");
				break;
			case 0x2134:
				strcpy_s(buf, buf_size, "SCRIPT SMALL O");
				break;
			case 0x2135:
				strcpy_s(buf, buf_size, "ALEF SYMBOL");
				break;
			case 0x2136:
				strcpy_s(buf, buf_size, "BET SYMBOL");
				break;
			case 0x2137:
				strcpy_s(buf, buf_size, "GIMEL SYMBOL");
				break;
			case 0x2138:
				strcpy_s(buf, buf_size, "DALET SYMBOL");
				break;
			case 0x2139:
				strcpy_s(buf, buf_size, "INFORMATION SOURCE");
				break;
			case 0x213A:
				strcpy_s(buf, buf_size, "ROTATED CAPITAL Q");
				break;
			case 0x213B:
				strcpy_s(buf, buf_size, "FACSIMILE SIGN");
				break;
			case 0x213C:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK SMALL PI");
				break;
			case 0x213D:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK SMALL GAMMA");
				break;
			case 0x213E:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK CAPITAL GAMMA");
				break;
			case 0x213F:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK CAPITAL PI");
				break;
			case 0x2140:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK N-ARY SUMMATION");
				break;
			case 0x2141:
				strcpy_s(buf, buf_size, "TURNED SANS-SERIF CAPITAL G");
				break;
			case 0x2142:
				strcpy_s(buf, buf_size, "TURNED SANS-SERIF CAPITAL L");
				break;
			case 0x2143:
				strcpy_s(buf, buf_size, "REVERSED SANS-SERIF CAPITAL L");
				break;
			case 0x2144:
				strcpy_s(buf, buf_size, "TURNED SANS-SERIF CAPITAL Y");
				break;
			case 0x2145:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK ITALIC CAPITAL D");
				break;
			case 0x2146:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK ITALIC SMALL D");
				break;
			case 0x2147:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK ITALIC SMALL E");
				break;
			case 0x2148:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK ITALIC SMALL I");
				break;
			case 0x2149:
				strcpy_s(buf, buf_size, "DOUBLE-STRUCK ITALIC SMALL J");
				break;
			case 0x214A:
				strcpy_s(buf, buf_size, "PROPERTY LINE");
				break;
			case 0x214B:
				strcpy_s(buf, buf_size, "TURNED AMPERSAND");
				break;
			case 0x214C:
				strcpy_s(buf, buf_size, "PER SIGN");
				break;
			case 0x214D:
				strcpy_s(buf, buf_size, "AKTIESELSKAB");
				break;
			case 0x214E:
				strcpy_s(buf, buf_size, "TURNED SMALL F");
				break;
			case 0x214F:
				strcpy_s(buf, buf_size, "SYMBOL FOR SAMARITAN SOURCE");
				break;
			case 0x2150:
				strcpy_s(buf, buf_size, "VULGAR FRACTION ONE SEVENTH");
				break;
			case 0x2151:
				strcpy_s(buf, buf_size, "VULGAR FRACTION ONE NINTH");
				break;
			case 0x2152:
				strcpy_s(buf, buf_size, "VULGAR FRACTION ONE TENTH");
				break;
			case 0x2153:
				strcpy_s(buf, buf_size, "VULGAR FRACTION ONE THIRD");
				break;
			case 0x2154:
				strcpy_s(buf, buf_size, "VULGAR FRACTION TWO THIRDS");
				break;
			case 0x2155:
				strcpy_s(buf, buf_size, "VULGAR FRACTION ONE FIFTH");
				break;
			case 0x2156:
				strcpy_s(buf, buf_size, "VULGAR FRACTION TWO FIFTHS");
				break;
			case 0x2157:
				strcpy_s(buf, buf_size, "VULGAR FRACTION THREE FIFTHS");
				break;
			case 0x2158:
				strcpy_s(buf, buf_size, "VULGAR FRACTION FOUR FIFTHS");
				break;
			case 0x2159:
				strcpy_s(buf, buf_size, "VULGAR FRACTION ONE SIXTH");
				break;
			case 0x215A:
				strcpy_s(buf, buf_size, "VULGAR FRACTION FIVE SIXTHS");
				break;
			case 0x215B:
				strcpy_s(buf, buf_size, "VULGAR FRACTION ONE EIGHTH");
				break;
			case 0x215C:
				strcpy_s(buf, buf_size, "VULGAR FRACTION THREE EIGHTHS");
				break;
			case 0x215D:
				strcpy_s(buf, buf_size, "VULGAR FRACTION FIVE EIGHTHS");
				break;
			case 0x215E:
				strcpy_s(buf, buf_size, "VULGAR FRACTION SEVEN EIGHTHS");
				break;
			case 0x215F:
				strcpy_s(buf, buf_size, "FRACTION NUMERATOR ONE");
				break;
			case 0x2160:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL ONE");
				break;
			case 0x2161:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL TWO");
				break;
			case 0x2162:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL THREE");
				break;
			case 0x2163:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL FOUR");
				break;
			case 0x2164:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL FIVE");
				break;
			case 0x2165:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL SIX");
				break;
			case 0x2166:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL SEVEN");
				break;
			case 0x2167:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL EIGHT");
				break;
			case 0x2168:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL NINE");
				break;
			case 0x2169:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL TEN");
				break;
			case 0x216A:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL ELEVEN");
				break;
			case 0x216B:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL TWELVE");
				break;
			case 0x216C:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL FIFTY");
				break;
			case 0x216D:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL ONE HUNDRED");
				break;
			case 0x216E:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL FIVE HUNDRED");
				break;
			case 0x216F:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL ONE THOUSAND");
				break;
			case 0x2170:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL ONE");
				break;
			case 0x2171:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL TWO");
				break;
			case 0x2172:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL THREE");
				break;
			case 0x2173:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL FOUR");
				break;
			case 0x2174:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL FIVE");
				break;
			case 0x2175:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL SIX");
				break;
			case 0x2176:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL SEVEN");
				break;
			case 0x2177:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL EIGHT");
				break;
			case 0x2178:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL NINE");
				break;
			case 0x2179:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL TEN");
				break;
			case 0x217A:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL ELEVEN");
				break;
			case 0x217B:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL TWELVE");
				break;
			case 0x217C:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL FIFTY");
				break;
			case 0x217D:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL ONE HUNDRED");
				break;
			case 0x217E:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL FIVE HUNDRED");
				break;
			case 0x217F:
				strcpy_s(buf, buf_size, "SMALL ROMAN NUMERAL ONE THOUSAND");
				break;
			case 0x2180:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL ONE THOUSAND C D");
				break;
			case 0x2181:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL FIVE THOUSAND");
				break;
			case 0x2182:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL TEN THOUSAND");
				break;
			case 0x2183:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL REVERSED ONE HUNDRED");
				break;
			case 0x2184:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER REVERSED C");
				break;
			case 0x2185:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL SIX LATE FORM");
				break;
			case 0x2186:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL FIFTY EARLY FORM");
				break;
			case 0x2187:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL FIFTY THOUSAND");
				break;
			case 0x2188:
				strcpy_s(buf, buf_size, "ROMAN NUMERAL ONE HUNDRED THOUSAND");
				break;
			case 0x2189:
				strcpy_s(buf, buf_size, "VULGAR FRACTION ZERO THIRDS");
				break;
			case 0x218A:
				strcpy_s(buf, buf_size, "TURNED DIGIT TWO");
				break;
			case 0x218B:
				strcpy_s(buf, buf_size, "TURNED DIGIT THREE");
				break;
			case 0x2190:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW");
				break;
			case 0x2191:
				strcpy_s(buf, buf_size, "UPWARDS ARROW");
				break;
			case 0x2192:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW");
				break;
			case 0x2193:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW");
				break;
			case 0x2194:
				strcpy_s(buf, buf_size, "LEFT RIGHT ARROW");
				break;
			case 0x2195:
				strcpy_s(buf, buf_size, "UP DOWN ARROW");
				break;
			case 0x2196:
				strcpy_s(buf, buf_size, "NORTH WEST ARROW");
				break;
			case 0x2197:
				strcpy_s(buf, buf_size, "NORTH EAST ARROW");
				break;
			case 0x2198:
				strcpy_s(buf, buf_size, "SOUTH EAST ARROW");
				break;
			case 0x2199:
				strcpy_s(buf, buf_size, "SOUTH WEST ARROW");
				break;
			case 0x219A:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH STROKE");
				break;
			case 0x219B:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH STROKE");
				break;
			case 0x219C:
				strcpy_s(buf, buf_size, "LEFTWARDS WAVE ARROW");
				break;
			case 0x219D:
				strcpy_s(buf, buf_size, "RIGHTWARDS WAVE ARROW");
				break;
			case 0x219E:
				strcpy_s(buf, buf_size, "LEFTWARDS TWO HEADED ARROW");
				break;
			case 0x219F:
				strcpy_s(buf, buf_size, "UPWARDS TWO HEADED ARROW");
				break;
			case 0x21A0:
				strcpy_s(buf, buf_size, "RIGHTWARDS TWO HEADED ARROW");
				break;
			case 0x21A1:
				strcpy_s(buf, buf_size, "DOWNWARDS TWO HEADED ARROW");
				break;
			case 0x21A2:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH TAIL");
				break;
			case 0x21A3:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH TAIL");
				break;
			case 0x21A4:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW FROM BAR");
				break;
			case 0x21A5:
				strcpy_s(buf, buf_size, "UPWARDS ARROW FROM BAR");
				break;
			case 0x21A6:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW FROM BAR");
				break;
			case 0x21A7:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW FROM BAR");
				break;
			case 0x21A8:
				strcpy_s(buf, buf_size, "UP DOWN ARROW WITH BASE");
				break;
			case 0x21A9:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH HOOK");
				break;
			case 0x21AA:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH HOOK");
				break;
			case 0x21AB:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH LOOP");
				break;
			case 0x21AC:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH LOOP");
				break;
			case 0x21AD:
				strcpy_s(buf, buf_size, "LEFT RIGHT WAVE ARROW");
				break;
			case 0x21AE:
				strcpy_s(buf, buf_size, "LEFT RIGHT ARROW WITH STROKE");
				break;
			case 0x21AF:
				strcpy_s(buf, buf_size, "DOWNWARDS ZIGZAG ARROW");
				break;
			case 0x21B0:
				strcpy_s(buf, buf_size, "UPWARDS ARROW WITH TIP LEFTWARDS");
				break;
			case 0x21B1:
				strcpy_s(buf, buf_size, "UPWARDS ARROW WITH TIP RIGHTWARDS");
				break;
			case 0x21B2:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH TIP LEFTWARDS");
				break;
			case 0x21B3:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH TIP RIGHTWARDS");
				break;
			case 0x21B4:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH CORNER DOWNWARDS");
				break;
			case 0x21B5:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH CORNER LEFTWARDS");
				break;
			case 0x21B6:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE TOP SEMICIRCLE ARROW");
				break;
			case 0x21B7:
				strcpy_s(buf, buf_size, "CLOCKWISE TOP SEMICIRCLE ARROW");
				break;
			case 0x21B8:
				strcpy_s(buf, buf_size, "NORTH WEST ARROW TO LONG BAR");
				break;
			case 0x21B9:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR");
				break;
			case 0x21BA:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE OPEN CIRCLE ARROW");
				break;
			case 0x21BB:
				strcpy_s(buf, buf_size, "CLOCKWISE OPEN CIRCLE ARROW");
				break;
			case 0x21BC:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB UPWARDS");
				break;
			case 0x21BD:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB DOWNWARDS");
				break;
			case 0x21BE:
				strcpy_s(buf, buf_size, "UPWARDS HARPOON WITH BARB RIGHTWARDS");
				break;
			case 0x21BF:
				strcpy_s(buf, buf_size, "UPWARDS HARPOON WITH BARB LEFTWARDS");
				break;
			case 0x21C0:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB UPWARDS");
				break;
			case 0x21C1:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB DOWNWARDS");
				break;
			case 0x21C2:
				strcpy_s(buf, buf_size, "DOWNWARDS HARPOON WITH BARB RIGHTWARDS");
				break;
			case 0x21C3:
				strcpy_s(buf, buf_size, "DOWNWARDS HARPOON WITH BARB LEFTWARDS");
				break;
			case 0x21C4:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW OVER LEFTWARDS ARROW");
				break;
			case 0x21C5:
				strcpy_s(buf, buf_size, "UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW");
				break;
			case 0x21C6:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW OVER RIGHTWARDS ARROW");
				break;
			case 0x21C7:
				strcpy_s(buf, buf_size, "LEFTWARDS PAIRED ARROWS");
				break;
			case 0x21C8:
				strcpy_s(buf, buf_size, "UPWARDS PAIRED ARROWS");
				break;
			case 0x21C9:
				strcpy_s(buf, buf_size, "RIGHTWARDS PAIRED ARROWS");
				break;
			case 0x21CA:
				strcpy_s(buf, buf_size, "DOWNWARDS PAIRED ARROWS");
				break;
			case 0x21CB:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON");
				break;
			case 0x21CC:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON");
				break;
			case 0x21CD:
				strcpy_s(buf, buf_size, "LEFTWARDS DOUBLE ARROW WITH STROKE");
				break;
			case 0x21CE:
				strcpy_s(buf, buf_size, "LEFT RIGHT DOUBLE ARROW WITH STROKE");
				break;
			case 0x21CF:
				strcpy_s(buf, buf_size, "RIGHTWARDS DOUBLE ARROW WITH STROKE");
				break;
			case 0x21D0:
				strcpy_s(buf, buf_size, "LEFTWARDS DOUBLE ARROW");
				break;
			case 0x21D1:
				strcpy_s(buf, buf_size, "UPWARDS DOUBLE ARROW");
				break;
			case 0x21D2:
				strcpy_s(buf, buf_size, "RIGHTWARDS DOUBLE ARROW");
				break;
			case 0x21D3:
				strcpy_s(buf, buf_size, "DOWNWARDS DOUBLE ARROW");
				break;
			case 0x21D4:
				strcpy_s(buf, buf_size, "LEFT RIGHT DOUBLE ARROW");
				break;
			case 0x21D5:
				strcpy_s(buf, buf_size, "UP DOWN DOUBLE ARROW");
				break;
			case 0x21D6:
				strcpy_s(buf, buf_size, "NORTH WEST DOUBLE ARROW");
				break;
			case 0x21D7:
				strcpy_s(buf, buf_size, "NORTH EAST DOUBLE ARROW");
				break;
			case 0x21D8:
				strcpy_s(buf, buf_size, "SOUTH EAST DOUBLE ARROW");
				break;
			case 0x21D9:
				strcpy_s(buf, buf_size, "SOUTH WEST DOUBLE ARROW");
				break;
			case 0x21DA:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIPLE ARROW");
				break;
			case 0x21DB:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIPLE ARROW");
				break;
			case 0x21DC:
				strcpy_s(buf, buf_size, "LEFTWARDS SQUIGGLE ARROW");
				break;
			case 0x21DD:
				strcpy_s(buf, buf_size, "RIGHTWARDS SQUIGGLE ARROW");
				break;
			case 0x21DE:
				strcpy_s(buf, buf_size, "UPWARDS ARROW WITH DOUBLE STROKE");
				break;
			case 0x21DF:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH DOUBLE STROKE");
				break;
			case 0x21E0:
				strcpy_s(buf, buf_size, "LEFTWARDS DASHED ARROW");
				break;
			case 0x21E1:
				strcpy_s(buf, buf_size, "UPWARDS DASHED ARROW");
				break;
			case 0x21E2:
				strcpy_s(buf, buf_size, "RIGHTWARDS DASHED ARROW");
				break;
			case 0x21E3:
				strcpy_s(buf, buf_size, "DOWNWARDS DASHED ARROW");
				break;
			case 0x21E4:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW TO BAR");
				break;
			case 0x21E5:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW TO BAR");
				break;
			case 0x21E6:
				strcpy_s(buf, buf_size, "LEFTWARDS WHITE ARROW");
				break;
			case 0x21E7:
				strcpy_s(buf, buf_size, "UPWARDS WHITE ARROW");
				break;
			case 0x21E8:
				strcpy_s(buf, buf_size, "RIGHTWARDS WHITE ARROW");
				break;
			case 0x21E9:
				strcpy_s(buf, buf_size, "DOWNWARDS WHITE ARROW");
				break;
			case 0x21EA:
				strcpy_s(buf, buf_size, "UPWARDS WHITE ARROW FROM BAR");
				break;
			case 0x21EB:
				strcpy_s(buf, buf_size, "UPWARDS WHITE ARROW ON PEDESTAL");
				break;
			case 0x21EC:
				strcpy_s(buf, buf_size, "UPWARDS WHITE ARROW ON PEDESTAL WITH HORIZONTAL BAR");
				break;
			case 0x21ED:
				strcpy_s(buf, buf_size, "UPWARDS WHITE ARROW ON PEDESTAL WITH VERTICAL BAR");
				break;
			case 0x21EE:
				strcpy_s(buf, buf_size, "UPWARDS WHITE DOUBLE ARROW");
				break;
			case 0x21EF:
				strcpy_s(buf, buf_size, "UPWARDS WHITE DOUBLE ARROW ON PEDESTAL");
				break;
			case 0x21F0:
				strcpy_s(buf, buf_size, "RIGHTWARDS WHITE ARROW FROM WALL");
				break;
			case 0x21F1:
				strcpy_s(buf, buf_size, "NORTH WEST ARROW TO CORNER");
				break;
			case 0x21F2:
				strcpy_s(buf, buf_size, "SOUTH EAST ARROW TO CORNER");
				break;
			case 0x21F3:
				strcpy_s(buf, buf_size, "UP DOWN WHITE ARROW");
				break;
			case 0x21F4:
				strcpy_s(buf, buf_size, "RIGHT ARROW WITH SMALL CIRCLE");
				break;
			case 0x21F5:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW");
				break;
			case 0x21F6:
				strcpy_s(buf, buf_size, "THREE RIGHTWARDS ARROWS");
				break;
			case 0x21F7:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH VERTICAL STROKE");
				break;
			case 0x21F8:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH VERTICAL STROKE");
				break;
			case 0x21F9:
				strcpy_s(buf, buf_size, "LEFT RIGHT ARROW WITH VERTICAL STROKE");
				break;
			case 0x21FA:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH DOUBLE VERTICAL STROKE");
				break;
			case 0x21FB:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH DOUBLE VERTICAL STROKE");
				break;
			case 0x21FC:
				strcpy_s(buf, buf_size, "LEFT RIGHT ARROW WITH DOUBLE VERTICAL STROKE");
				break;
			case 0x21FD:
				strcpy_s(buf, buf_size, "LEFTWARDS OPEN-HEADED ARROW");
				break;
			case 0x21FE:
				strcpy_s(buf, buf_size, "RIGHTWARDS OPEN-HEADED ARROW");
				break;
			case 0x21FF:
				strcpy_s(buf, buf_size, "LEFT RIGHT OPEN-HEADED ARROW");
				break;
			case 0x2200:
				strcpy_s(buf, buf_size, "FOR ALL");
				break;
			case 0x2201:
				strcpy_s(buf, buf_size, "COMPLEMENT");
				break;
			case 0x2202:
				strcpy_s(buf, buf_size, "PARTIAL DIFFERENTIAL");
				break;
			case 0x2203:
				strcpy_s(buf, buf_size, "THERE EXISTS");
				break;
			case 0x2204:
				strcpy_s(buf, buf_size, "THERE DOES NOT EXIST");
				break;
			case 0x2205:
				strcpy_s(buf, buf_size, "EMPTY SET");
				break;
			case 0x2206:
				strcpy_s(buf, buf_size, "INCREMENT");
				break;
			case 0x2207:
				strcpy_s(buf, buf_size, "NABLA");
				break;
			case 0x2208:
				strcpy_s(buf, buf_size, "ELEMENT OF");
				break;
			case 0x2209:
				strcpy_s(buf, buf_size, "NOT AN ELEMENT OF");
				break;
			case 0x220A:
				strcpy_s(buf, buf_size, "SMALL ELEMENT OF");
				break;
			case 0x220B:
				strcpy_s(buf, buf_size, "CONTAINS AS MEMBER");
				break;
			case 0x220C:
				strcpy_s(buf, buf_size, "DOES NOT CONTAIN AS MEMBER");
				break;
			case 0x220D:
				strcpy_s(buf, buf_size, "SMALL CONTAINS AS MEMBER");
				break;
			case 0x220E:
				strcpy_s(buf, buf_size, "END OF PROOF");
				break;
			case 0x220F:
				strcpy_s(buf, buf_size, "N-ARY PRODUCT");
				break;
			case 0x2210:
				strcpy_s(buf, buf_size, "N-ARY COPRODUCT");
				break;
			case 0x2211:
				strcpy_s(buf, buf_size, "N-ARY SUMMATION");
				break;
			case 0x2212:
				strcpy_s(buf, buf_size, "MINUS SIGN");
				break;
			case 0x2213:
				strcpy_s(buf, buf_size, "MINUS-OR-PLUS SIGN");
				break;
			case 0x2214:
				strcpy_s(buf, buf_size, "DOT PLUS");
				break;
			case 0x2215:
				strcpy_s(buf, buf_size, "DIVISION SLASH");
				break;
			case 0x2216:
				strcpy_s(buf, buf_size, "SET MINUS");
				break;
			case 0x2217:
				strcpy_s(buf, buf_size, "ASTERISK OPERATOR");
				break;
			case 0x2218:
				strcpy_s(buf, buf_size, "RING OPERATOR");
				break;
			case 0x2219:
				strcpy_s(buf, buf_size, "BULLET OPERATOR");
				break;
			case 0x221A:
				strcpy_s(buf, buf_size, "SQUARE ROOT");
				break;
			case 0x221B:
				strcpy_s(buf, buf_size, "CUBE ROOT");
				break;
			case 0x221C:
				strcpy_s(buf, buf_size, "FOURTH ROOT");
				break;
			case 0x221D:
				strcpy_s(buf, buf_size, "PROPORTIONAL TO");
				break;
			case 0x221E:
				strcpy_s(buf, buf_size, "INFINITY");
				break;
			case 0x221F:
				strcpy_s(buf, buf_size, "RIGHT ANGLE");
				break;
			case 0x2220:
				strcpy_s(buf, buf_size, "ANGLE");
				break;
			case 0x2221:
				strcpy_s(buf, buf_size, "MEASURED ANGLE");
				break;
			case 0x2222:
				strcpy_s(buf, buf_size, "SPHERICAL ANGLE");
				break;
			case 0x2223:
				strcpy_s(buf, buf_size, "DIVIDES");
				break;
			case 0x2224:
				strcpy_s(buf, buf_size, "DOES NOT DIVIDE");
				break;
			case 0x2225:
				strcpy_s(buf, buf_size, "PARALLEL TO");
				break;
			case 0x2226:
				strcpy_s(buf, buf_size, "NOT PARALLEL TO");
				break;
			case 0x2227:
				strcpy_s(buf, buf_size, "LOGICAL AND");
				break;
			case 0x2228:
				strcpy_s(buf, buf_size, "LOGICAL OR");
				break;
			case 0x2229:
				strcpy_s(buf, buf_size, "INTERSECTION");
				break;
			case 0x222A:
				strcpy_s(buf, buf_size, "UNION");
				break;
			case 0x222B:
				strcpy_s(buf, buf_size, "INTEGRAL");
				break;
			case 0x222C:
				strcpy_s(buf, buf_size, "DOUBLE INTEGRAL");
				break;
			case 0x222D:
				strcpy_s(buf, buf_size, "TRIPLE INTEGRAL");
				break;
			case 0x222E:
				strcpy_s(buf, buf_size, "CONTOUR INTEGRAL");
				break;
			case 0x222F:
				strcpy_s(buf, buf_size, "SURFACE INTEGRAL");
				break;
			case 0x2230:
				strcpy_s(buf, buf_size, "VOLUME INTEGRAL");
				break;
			case 0x2231:
				strcpy_s(buf, buf_size, "CLOCKWISE INTEGRAL");
				break;
			case 0x2232:
				strcpy_s(buf, buf_size, "CLOCKWISE CONTOUR INTEGRAL");
				break;
			case 0x2233:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE CONTOUR INTEGRAL");
				break;
			case 0x2234:
				strcpy_s(buf, buf_size, "THEREFORE");
				break;
			case 0x2235:
				strcpy_s(buf, buf_size, "BECAUSE");
				break;
			case 0x2236:
				strcpy_s(buf, buf_size, "RATIO");
				break;
			case 0x2237:
				strcpy_s(buf, buf_size, "PROPORTION");
				break;
			case 0x2238:
				strcpy_s(buf, buf_size, "DOT MINUS");
				break;
			case 0x2239:
				strcpy_s(buf, buf_size, "EXCESS");
				break;
			case 0x223A:
				strcpy_s(buf, buf_size, "GEOMETRIC PROPORTION");
				break;
			case 0x223B:
				strcpy_s(buf, buf_size, "HOMOTHETIC");
				break;
			case 0x223C:
				strcpy_s(buf, buf_size, "TILDE OPERATOR");
				break;
			case 0x223D:
				strcpy_s(buf, buf_size, "REVERSED TILDE");
				break;
			case 0x223E:
				strcpy_s(buf, buf_size, "INVERTED LAZY S");
				break;
			case 0x223F:
				strcpy_s(buf, buf_size, "SINE WAVE");
				break;
			case 0x2240:
				strcpy_s(buf, buf_size, "WREATH PRODUCT");
				break;
			case 0x2241:
				strcpy_s(buf, buf_size, "NOT TILDE");
				break;
			case 0x2242:
				strcpy_s(buf, buf_size, "MINUS TILDE");
				break;
			case 0x2243:
				strcpy_s(buf, buf_size, "ASYMPTOTICALLY EQUAL TO");
				break;
			case 0x2244:
				strcpy_s(buf, buf_size, "NOT ASYMPTOTICALLY EQUAL TO");
				break;
			case 0x2245:
				strcpy_s(buf, buf_size, "APPROXIMATELY EQUAL TO");
				break;
			case 0x2246:
				strcpy_s(buf, buf_size, "APPROXIMATELY BUT NOT ACTUALLY EQUAL TO");
				break;
			case 0x2247:
				strcpy_s(buf, buf_size, "NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO");
				break;
			case 0x2248:
				strcpy_s(buf, buf_size, "ALMOST EQUAL TO");
				break;
			case 0x2249:
				strcpy_s(buf, buf_size, "NOT ALMOST EQUAL TO");
				break;
			case 0x224A:
				strcpy_s(buf, buf_size, "ALMOST EQUAL OR EQUAL TO");
				break;
			case 0x224B:
				strcpy_s(buf, buf_size, "TRIPLE TILDE");
				break;
			case 0x224C:
				strcpy_s(buf, buf_size, "ALL EQUAL TO");
				break;
			case 0x224D:
				strcpy_s(buf, buf_size, "EQUIVALENT TO");
				break;
			case 0x224E:
				strcpy_s(buf, buf_size, "GEOMETRICALLY EQUIVALENT TO");
				break;
			case 0x224F:
				strcpy_s(buf, buf_size, "DIFFERENCE BETWEEN");
				break;
			case 0x2250:
				strcpy_s(buf, buf_size, "APPROACHES THE LIMIT");
				break;
			case 0x2251:
				strcpy_s(buf, buf_size, "GEOMETRICALLY EQUAL TO");
				break;
			case 0x2252:
				strcpy_s(buf, buf_size, "APPROXIMATELY EQUAL TO OR THE IMAGE OF");
				break;
			case 0x2253:
				strcpy_s(buf, buf_size, "IMAGE OF OR APPROXIMATELY EQUAL TO");
				break;
			case 0x2254:
				strcpy_s(buf, buf_size, "COLON EQUALS");
				break;
			case 0x2255:
				strcpy_s(buf, buf_size, "EQUALS COLON");
				break;
			case 0x2256:
				strcpy_s(buf, buf_size, "RING IN EQUAL TO");
				break;
			case 0x2257:
				strcpy_s(buf, buf_size, "RING EQUAL TO");
				break;
			case 0x2258:
				strcpy_s(buf, buf_size, "CORRESPONDS TO");
				break;
			case 0x2259:
				strcpy_s(buf, buf_size, "ESTIMATES");
				break;
			case 0x225A:
				strcpy_s(buf, buf_size, "EQUIANGULAR TO");
				break;
			case 0x225B:
				strcpy_s(buf, buf_size, "STAR EQUALS");
				break;
			case 0x225C:
				strcpy_s(buf, buf_size, "DELTA EQUAL TO");
				break;
			case 0x225D:
				strcpy_s(buf, buf_size, "EQUAL TO BY DEFINITION");
				break;
			case 0x225E:
				strcpy_s(buf, buf_size, "MEASURED BY");
				break;
			case 0x225F:
				strcpy_s(buf, buf_size, "QUESTIONED EQUAL TO");
				break;
			case 0x2260:
				strcpy_s(buf, buf_size, "NOT EQUAL TO");
				break;
			case 0x2261:
				strcpy_s(buf, buf_size, "IDENTICAL TO");
				break;
			case 0x2262:
				strcpy_s(buf, buf_size, "NOT IDENTICAL TO");
				break;
			case 0x2263:
				strcpy_s(buf, buf_size, "STRICTLY EQUIVALENT TO");
				break;
			case 0x2264:
				strcpy_s(buf, buf_size, "LESS-THAN OR EQUAL TO");
				break;
			case 0x2265:
				strcpy_s(buf, buf_size, "GREATER-THAN OR EQUAL TO");
				break;
			case 0x2266:
				strcpy_s(buf, buf_size, "LESS-THAN OVER EQUAL TO");
				break;
			case 0x2267:
				strcpy_s(buf, buf_size, "GREATER-THAN OVER EQUAL TO");
				break;
			case 0x2268:
				strcpy_s(buf, buf_size, "LESS-THAN BUT NOT EQUAL TO");
				break;
			case 0x2269:
				strcpy_s(buf, buf_size, "GREATER-THAN BUT NOT EQUAL TO");
				break;
			case 0x226A:
				strcpy_s(buf, buf_size, "MUCH LESS-THAN");
				break;
			case 0x226B:
				strcpy_s(buf, buf_size, "MUCH GREATER-THAN");
				break;
			case 0x226C:
				strcpy_s(buf, buf_size, "BETWEEN");
				break;
			case 0x226D:
				strcpy_s(buf, buf_size, "NOT EQUIVALENT TO");
				break;
			case 0x226E:
				strcpy_s(buf, buf_size, "NOT LESS-THAN");
				break;
			case 0x226F:
				strcpy_s(buf, buf_size, "NOT GREATER-THAN");
				break;
			case 0x2270:
				strcpy_s(buf, buf_size, "NEITHER LESS-THAN NOR EQUAL TO");
				break;
			case 0x2271:
				strcpy_s(buf, buf_size, "NEITHER GREATER-THAN NOR EQUAL TO");
				break;
			case 0x2272:
				strcpy_s(buf, buf_size, "LESS-THAN OR EQUIVALENT TO");
				break;
			case 0x2273:
				strcpy_s(buf, buf_size, "GREATER-THAN OR EQUIVALENT TO");
				break;
			case 0x2274:
				strcpy_s(buf, buf_size, "NEITHER LESS-THAN NOR EQUIVALENT TO");
				break;
			case 0x2275:
				strcpy_s(buf, buf_size, "NEITHER GREATER-THAN NOR EQUIVALENT TO");
				break;
			case 0x2276:
				strcpy_s(buf, buf_size, "LESS-THAN OR GREATER-THAN");
				break;
			case 0x2277:
				strcpy_s(buf, buf_size, "GREATER-THAN OR LESS-THAN");
				break;
			case 0x2278:
				strcpy_s(buf, buf_size, "NEITHER LESS-THAN NOR GREATER-THAN");
				break;
			case 0x2279:
				strcpy_s(buf, buf_size, "NEITHER GREATER-THAN NOR LESS-THAN");
				break;
			case 0x227A:
				strcpy_s(buf, buf_size, "PRECEDES");
				break;
			case 0x227B:
				strcpy_s(buf, buf_size, "SUCCEEDS");
				break;
			case 0x227C:
				strcpy_s(buf, buf_size, "PRECEDES OR EQUAL TO");
				break;
			case 0x227D:
				strcpy_s(buf, buf_size, "SUCCEEDS OR EQUAL TO");
				break;
			case 0x227E:
				strcpy_s(buf, buf_size, "PRECEDES OR EQUIVALENT TO");
				break;
			case 0x227F:
				strcpy_s(buf, buf_size, "SUCCEEDS OR EQUIVALENT TO");
				break;
			case 0x2280:
				strcpy_s(buf, buf_size, "DOES NOT PRECEDE");
				break;
			case 0x2281:
				strcpy_s(buf, buf_size, "DOES NOT SUCCEED");
				break;
			case 0x2282:
				strcpy_s(buf, buf_size, "SUBSET OF");
				break;
			case 0x2283:
				strcpy_s(buf, buf_size, "SUPERSET OF");
				break;
			case 0x2284:
				strcpy_s(buf, buf_size, "NOT A SUBSET OF");
				break;
			case 0x2285:
				strcpy_s(buf, buf_size, "NOT A SUPERSET OF");
				break;
			case 0x2286:
				strcpy_s(buf, buf_size, "SUBSET OF OR EQUAL TO");
				break;
			case 0x2287:
				strcpy_s(buf, buf_size, "SUPERSET OF OR EQUAL TO");
				break;
			case 0x2288:
				strcpy_s(buf, buf_size, "NEITHER A SUBSET OF NOR EQUAL TO");
				break;
			case 0x2289:
				strcpy_s(buf, buf_size, "NEITHER A SUPERSET OF NOR EQUAL TO");
				break;
			case 0x228A:
				strcpy_s(buf, buf_size, "SUBSET OF WITH NOT EQUAL TO");
				break;
			case 0x228B:
				strcpy_s(buf, buf_size, "SUPERSET OF WITH NOT EQUAL TO");
				break;
			case 0x228C:
				strcpy_s(buf, buf_size, "MULTISET");
				break;
			case 0x228D:
				strcpy_s(buf, buf_size, "MULTISET MULTIPLICATION");
				break;
			case 0x228E:
				strcpy_s(buf, buf_size, "MULTISET UNION");
				break;
			case 0x228F:
				strcpy_s(buf, buf_size, "SQUARE IMAGE OF");
				break;
			case 0x2290:
				strcpy_s(buf, buf_size, "SQUARE ORIGINAL OF");
				break;
			case 0x2291:
				strcpy_s(buf, buf_size, "SQUARE IMAGE OF OR EQUAL TO");
				break;
			case 0x2292:
				strcpy_s(buf, buf_size, "SQUARE ORIGINAL OF OR EQUAL TO");
				break;
			case 0x2293:
				strcpy_s(buf, buf_size, "SQUARE CAP");
				break;
			case 0x2294:
				strcpy_s(buf, buf_size, "SQUARE CUP");
				break;
			case 0x2295:
				strcpy_s(buf, buf_size, "CIRCLED PLUS");
				break;
			case 0x2296:
				strcpy_s(buf, buf_size, "CIRCLED MINUS");
				break;
			case 0x2297:
				strcpy_s(buf, buf_size, "CIRCLED TIMES");
				break;
			case 0x2298:
				strcpy_s(buf, buf_size, "CIRCLED DIVISION SLASH");
				break;
			case 0x2299:
				strcpy_s(buf, buf_size, "CIRCLED DOT OPERATOR");
				break;
			case 0x229A:
				strcpy_s(buf, buf_size, "CIRCLED RING OPERATOR");
				break;
			case 0x229B:
				strcpy_s(buf, buf_size, "CIRCLED ASTERISK OPERATOR");
				break;
			case 0x229C:
				strcpy_s(buf, buf_size, "CIRCLED EQUALS");
				break;
			case 0x229D:
				strcpy_s(buf, buf_size, "CIRCLED DASH");
				break;
			case 0x229E:
				strcpy_s(buf, buf_size, "SQUARED PLUS");
				break;
			case 0x229F:
				strcpy_s(buf, buf_size, "SQUARED MINUS");
				break;
			case 0x22A0:
				strcpy_s(buf, buf_size, "SQUARED TIMES");
				break;
			case 0x22A1:
				strcpy_s(buf, buf_size, "SQUARED DOT OPERATOR");
				break;
			case 0x22A2:
				strcpy_s(buf, buf_size, "RIGHT TACK");
				break;
			case 0x22A3:
				strcpy_s(buf, buf_size, "LEFT TACK");
				break;
			case 0x22A4:
				strcpy_s(buf, buf_size, "DOWN TACK");
				break;
			case 0x22A5:
				strcpy_s(buf, buf_size, "UP TACK");
				break;
			case 0x22A6:
				strcpy_s(buf, buf_size, "ASSERTION");
				break;
			case 0x22A7:
				strcpy_s(buf, buf_size, "MODELS");
				break;
			case 0x22A8:
				strcpy_s(buf, buf_size, "TRUE");
				break;
			case 0x22A9:
				strcpy_s(buf, buf_size, "FORCES");
				break;
			case 0x22AA:
				strcpy_s(buf, buf_size, "TRIPLE VERTICAL BAR RIGHT TURNSTILE");
				break;
			case 0x22AB:
				strcpy_s(buf, buf_size, "DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE");
				break;
			case 0x22AC:
				strcpy_s(buf, buf_size, "DOES NOT PROVE");
				break;
			case 0x22AD:
				strcpy_s(buf, buf_size, "NOT TRUE");
				break;
			case 0x22AE:
				strcpy_s(buf, buf_size, "DOES NOT FORCE");
				break;
			case 0x22AF:
				strcpy_s(buf, buf_size, "NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE");
				break;
			case 0x22B0:
				strcpy_s(buf, buf_size, "PRECEDES UNDER RELATION");
				break;
			case 0x22B1:
				strcpy_s(buf, buf_size, "SUCCEEDS UNDER RELATION");
				break;
			case 0x22B2:
				strcpy_s(buf, buf_size, "NORMAL SUBGROUP OF");
				break;
			case 0x22B3:
				strcpy_s(buf, buf_size, "CONTAINS AS NORMAL SUBGROUP");
				break;
			case 0x22B4:
				strcpy_s(buf, buf_size, "NORMAL SUBGROUP OF OR EQUAL TO");
				break;
			case 0x22B5:
				strcpy_s(buf, buf_size, "CONTAINS AS NORMAL SUBGROUP OR EQUAL TO");
				break;
			case 0x22B6:
				strcpy_s(buf, buf_size, "ORIGINAL OF");
				break;
			case 0x22B7:
				strcpy_s(buf, buf_size, "IMAGE OF");
				break;
			case 0x22B8:
				strcpy_s(buf, buf_size, "MULTIMAP");
				break;
			case 0x22B9:
				strcpy_s(buf, buf_size, "HERMITIAN CONJUGATE MATRIX");
				break;
			case 0x22BA:
				strcpy_s(buf, buf_size, "INTERCALATE");
				break;
			case 0x22BB:
				strcpy_s(buf, buf_size, "XOR");
				break;
			case 0x22BC:
				strcpy_s(buf, buf_size, "NAND");
				break;
			case 0x22BD:
				strcpy_s(buf, buf_size, "NOR");
				break;
			case 0x22BE:
				strcpy_s(buf, buf_size, "RIGHT ANGLE WITH ARC");
				break;
			case 0x22BF:
				strcpy_s(buf, buf_size, "RIGHT TRIANGLE");
				break;
			case 0x22C0:
				strcpy_s(buf, buf_size, "N-ARY LOGICAL AND");
				break;
			case 0x22C1:
				strcpy_s(buf, buf_size, "N-ARY LOGICAL OR");
				break;
			case 0x22C2:
				strcpy_s(buf, buf_size, "N-ARY INTERSECTION");
				break;
			case 0x22C3:
				strcpy_s(buf, buf_size, "N-ARY UNION");
				break;
			case 0x22C4:
				strcpy_s(buf, buf_size, "DIAMOND OPERATOR");
				break;
			case 0x22C5:
				strcpy_s(buf, buf_size, "DOT OPERATOR");
				break;
			case 0x22C6:
				strcpy_s(buf, buf_size, "STAR OPERATOR");
				break;
			case 0x22C7:
				strcpy_s(buf, buf_size, "DIVISION TIMES");
				break;
			case 0x22C8:
				strcpy_s(buf, buf_size, "BOWTIE");
				break;
			case 0x22C9:
				strcpy_s(buf, buf_size, "LEFT NORMAL FACTOR SEMIDIRECT PRODUCT");
				break;
			case 0x22CA:
				strcpy_s(buf, buf_size, "RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT");
				break;
			case 0x22CB:
				strcpy_s(buf, buf_size, "LEFT SEMIDIRECT PRODUCT");
				break;
			case 0x22CC:
				strcpy_s(buf, buf_size, "RIGHT SEMIDIRECT PRODUCT");
				break;
			case 0x22CD:
				strcpy_s(buf, buf_size, "REVERSED TILDE EQUALS");
				break;
			case 0x22CE:
				strcpy_s(buf, buf_size, "CURLY LOGICAL OR");
				break;
			case 0x22CF:
				strcpy_s(buf, buf_size, "CURLY LOGICAL AND");
				break;
			case 0x22D0:
				strcpy_s(buf, buf_size, "DOUBLE SUBSET");
				break;
			case 0x22D1:
				strcpy_s(buf, buf_size, "DOUBLE SUPERSET");
				break;
			case 0x22D2:
				strcpy_s(buf, buf_size, "DOUBLE INTERSECTION");
				break;
			case 0x22D3:
				strcpy_s(buf, buf_size, "DOUBLE UNION");
				break;
			case 0x22D4:
				strcpy_s(buf, buf_size, "PITCHFORK");
				break;
			case 0x22D5:
				strcpy_s(buf, buf_size, "EQUAL AND PARALLEL TO");
				break;
			case 0x22D6:
				strcpy_s(buf, buf_size, "LESS-THAN WITH DOT");
				break;
			case 0x22D7:
				strcpy_s(buf, buf_size, "GREATER-THAN WITH DOT");
				break;
			case 0x22D8:
				strcpy_s(buf, buf_size, "VERY MUCH LESS-THAN");
				break;
			case 0x22D9:
				strcpy_s(buf, buf_size, "VERY MUCH GREATER-THAN");
				break;
			case 0x22DA:
				strcpy_s(buf, buf_size, "LESS-THAN EQUAL TO OR GREATER-THAN");
				break;
			case 0x22DB:
				strcpy_s(buf, buf_size, "GREATER-THAN EQUAL TO OR LESS-THAN");
				break;
			case 0x22DC:
				strcpy_s(buf, buf_size, "EQUAL TO OR LESS-THAN");
				break;
			case 0x22DD:
				strcpy_s(buf, buf_size, "EQUAL TO OR GREATER-THAN");
				break;
			case 0x22DE:
				strcpy_s(buf, buf_size, "EQUAL TO OR PRECEDES");
				break;
			case 0x22DF:
				strcpy_s(buf, buf_size, "EQUAL TO OR SUCCEEDS");
				break;
			case 0x22E0:
				strcpy_s(buf, buf_size, "DOES NOT PRECEDE OR EQUAL");
				break;
			case 0x22E1:
				strcpy_s(buf, buf_size, "DOES NOT SUCCEED OR EQUAL");
				break;
			case 0x22E2:
				strcpy_s(buf, buf_size, "NOT SQUARE IMAGE OF OR EQUAL TO");
				break;
			case 0x22E3:
				strcpy_s(buf, buf_size, "NOT SQUARE ORIGINAL OF OR EQUAL TO");
				break;
			case 0x22E4:
				strcpy_s(buf, buf_size, "SQUARE IMAGE OF OR NOT EQUAL TO");
				break;
			case 0x22E5:
				strcpy_s(buf, buf_size, "SQUARE ORIGINAL OF OR NOT EQUAL TO");
				break;
			case 0x22E6:
				strcpy_s(buf, buf_size, "LESS-THAN BUT NOT EQUIVALENT TO");
				break;
			case 0x22E7:
				strcpy_s(buf, buf_size, "GREATER-THAN BUT NOT EQUIVALENT TO");
				break;
			case 0x22E8:
				strcpy_s(buf, buf_size, "PRECEDES BUT NOT EQUIVALENT TO");
				break;
			case 0x22E9:
				strcpy_s(buf, buf_size, "SUCCEEDS BUT NOT EQUIVALENT TO");
				break;
			case 0x22EA:
				strcpy_s(buf, buf_size, "NOT NORMAL SUBGROUP OF");
				break;
			case 0x22EB:
				strcpy_s(buf, buf_size, "DOES NOT CONTAIN AS NORMAL SUBGROUP");
				break;
			case 0x22EC:
				strcpy_s(buf, buf_size, "NOT NORMAL SUBGROUP OF OR EQUAL TO");
				break;
			case 0x22ED:
				strcpy_s(buf, buf_size, "DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL");
				break;
			case 0x22EE:
				strcpy_s(buf, buf_size, "VERTICAL ELLIPSIS");
				break;
			case 0x22EF:
				strcpy_s(buf, buf_size, "MIDLINE HORIZONTAL ELLIPSIS");
				break;
			case 0x22F0:
				strcpy_s(buf, buf_size, "UP RIGHT DIAGONAL ELLIPSIS");
				break;
			case 0x22F1:
				strcpy_s(buf, buf_size, "DOWN RIGHT DIAGONAL ELLIPSIS");
				break;
			case 0x22F2:
				strcpy_s(buf, buf_size, "ELEMENT OF WITH LONG HORIZONTAL STROKE");
				break;
			case 0x22F3:
				strcpy_s(buf, buf_size, "ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE");
				break;
			case 0x22F4:
				strcpy_s(buf, buf_size, "SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE");
				break;
			case 0x22F5:
				strcpy_s(buf, buf_size, "ELEMENT OF WITH DOT ABOVE");
				break;
			case 0x22F6:
				strcpy_s(buf, buf_size, "ELEMENT OF WITH OVERBAR");
				break;
			case 0x22F7:
				strcpy_s(buf, buf_size, "SMALL ELEMENT OF WITH OVERBAR");
				break;
			case 0x22F8:
				strcpy_s(buf, buf_size, "ELEMENT OF WITH UNDERBAR");
				break;
			case 0x22F9:
				strcpy_s(buf, buf_size, "ELEMENT OF WITH TWO HORIZONTAL STROKES");
				break;
			case 0x22FA:
				strcpy_s(buf, buf_size, "CONTAINS WITH LONG HORIZONTAL STROKE");
				break;
			case 0x22FB:
				strcpy_s(buf, buf_size, "CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE");
				break;
			case 0x22FC:
				strcpy_s(buf, buf_size, "SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE");
				break;
			case 0x22FD:
				strcpy_s(buf, buf_size, "CONTAINS WITH OVERBAR");
				break;
			case 0x22FE:
				strcpy_s(buf, buf_size, "SMALL CONTAINS WITH OVERBAR");
				break;
			case 0x22FF:
				strcpy_s(buf, buf_size, "Z NOTATION BAG MEMBERSHIP");
				break;
			case 0x2300:
				strcpy_s(buf, buf_size, "DIAMETER SIGN");
				break;
			case 0x2301:
				strcpy_s(buf, buf_size, "ELECTRIC ARROW");
				break;
			case 0x2302:
				strcpy_s(buf, buf_size, "HOUSE");
				break;
			case 0x2303:
				strcpy_s(buf, buf_size, "UP ARROWHEAD");
				break;
			case 0x2304:
				strcpy_s(buf, buf_size, "DOWN ARROWHEAD");
				break;
			case 0x2305:
				strcpy_s(buf, buf_size, "PROJECTIVE");
				break;
			case 0x2306:
				strcpy_s(buf, buf_size, "PERSPECTIVE");
				break;
			case 0x2307:
				strcpy_s(buf, buf_size, "WAVY LINE");
				break;
			case 0x2308:
				strcpy_s(buf, buf_size, "LEFT CEILING");
				break;
			case 0x2309:
				strcpy_s(buf, buf_size, "RIGHT CEILING");
				break;
			case 0x230A:
				strcpy_s(buf, buf_size, "LEFT FLOOR");
				break;
			case 0x230B:
				strcpy_s(buf, buf_size, "RIGHT FLOOR");
				break;
			case 0x230C:
				strcpy_s(buf, buf_size, "BOTTOM RIGHT CROP");
				break;
			case 0x230D:
				strcpy_s(buf, buf_size, "BOTTOM LEFT CROP");
				break;
			case 0x230E:
				strcpy_s(buf, buf_size, "TOP RIGHT CROP");
				break;
			case 0x230F:
				strcpy_s(buf, buf_size, "TOP LEFT CROP");
				break;
			case 0x2310:
				strcpy_s(buf, buf_size, "REVERSED NOT SIGN");
				break;
			case 0x2311:
				strcpy_s(buf, buf_size, "SQUARE LOZENGE");
				break;
			case 0x2312:
				strcpy_s(buf, buf_size, "ARC");
				break;
			case 0x2313:
				strcpy_s(buf, buf_size, "SEGMENT");
				break;
			case 0x2314:
				strcpy_s(buf, buf_size, "SECTOR");
				break;
			case 0x2315:
				strcpy_s(buf, buf_size, "TELEPHONE RECORDER");
				break;
			case 0x2316:
				strcpy_s(buf, buf_size, "POSITION INDICATOR");
				break;
			case 0x2317:
				strcpy_s(buf, buf_size, "VIEWDATA SQUARE");
				break;
			case 0x2318:
				strcpy_s(buf, buf_size, "PLACE OF INTEREST SIGN");
				break;
			case 0x2319:
				strcpy_s(buf, buf_size, "TURNED NOT SIGN");
				break;
			case 0x231A:
				strcpy_s(buf, buf_size, "WATCH");
				break;
			case 0x231B:
				strcpy_s(buf, buf_size, "HOURGLASS");
				break;
			case 0x231C:
				strcpy_s(buf, buf_size, "TOP LEFT CORNER");
				break;
			case 0x231D:
				strcpy_s(buf, buf_size, "TOP RIGHT CORNER");
				break;
			case 0x231E:
				strcpy_s(buf, buf_size, "BOTTOM LEFT CORNER");
				break;
			case 0x231F:
				strcpy_s(buf, buf_size, "BOTTOM RIGHT CORNER");
				break;
			case 0x2320:
				strcpy_s(buf, buf_size, "TOP HALF INTEGRAL");
				break;
			case 0x2321:
				strcpy_s(buf, buf_size, "BOTTOM HALF INTEGRAL");
				break;
			case 0x2322:
				strcpy_s(buf, buf_size, "FROWN");
				break;
			case 0x2323:
				strcpy_s(buf, buf_size, "SMILE");
				break;
			case 0x2324:
				strcpy_s(buf, buf_size, "UP ARROWHEAD BETWEEN TWO HORIZONTAL BARS");
				break;
			case 0x2325:
				strcpy_s(buf, buf_size, "OPTION KEY");
				break;
			case 0x2326:
				strcpy_s(buf, buf_size, "ERASE TO THE RIGHT");
				break;
			case 0x2327:
				strcpy_s(buf, buf_size, "X IN A RECTANGLE BOX");
				break;
			case 0x2328:
				strcpy_s(buf, buf_size, "KEYBOARD");
				break;
			case 0x2329:
				strcpy_s(buf, buf_size, "LEFT-POINTING ANGLE BRACKET");
				break;
			case 0x232A:
				strcpy_s(buf, buf_size, "RIGHT-POINTING ANGLE BRACKET");
				break;
			case 0x232B:
				strcpy_s(buf, buf_size, "ERASE TO THE LEFT");
				break;
			case 0x232C:
				strcpy_s(buf, buf_size, "BENZENE RING");
				break;
			case 0x232D:
				strcpy_s(buf, buf_size, "CYLINDRICITY");
				break;
			case 0x232E:
				strcpy_s(buf, buf_size, "ALL AROUND-PROFILE");
				break;
			case 0x232F:
				strcpy_s(buf, buf_size, "SYMMETRY");
				break;
			case 0x2330:
				strcpy_s(buf, buf_size, "TOTAL RUNOUT");
				break;
			case 0x2331:
				strcpy_s(buf, buf_size, "DIMENSION ORIGIN");
				break;
			case 0x2332:
				strcpy_s(buf, buf_size, "CONICAL TAPER");
				break;
			case 0x2333:
				strcpy_s(buf, buf_size, "SLOPE");
				break;
			case 0x2334:
				strcpy_s(buf, buf_size, "COUNTERBORE");
				break;
			case 0x2335:
				strcpy_s(buf, buf_size, "COUNTERSINK");
				break;
			case 0x2336:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL I-BEAM");
				break;
			case 0x2337:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL SQUISH QUAD");
				break;
			case 0x2338:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD EQUAL");
				break;
			case 0x2339:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD DIVIDE");
				break;
			case 0x233A:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD DIAMOND");
				break;
			case 0x233B:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD JOT");
				break;
			case 0x233C:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD CIRCLE");
				break;
			case 0x233D:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL CIRCLE STILE");
				break;
			case 0x233E:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL CIRCLE JOT");
				break;
			case 0x233F:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL SLASH BAR");
				break;
			case 0x2340:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL BACKSLASH BAR");
				break;
			case 0x2341:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD SLASH");
				break;
			case 0x2342:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD BACKSLASH");
				break;
			case 0x2343:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD LESS-THAN");
				break;
			case 0x2344:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD GREATER-THAN");
				break;
			case 0x2345:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL LEFTWARDS VANE");
				break;
			case 0x2346:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL RIGHTWARDS VANE");
				break;
			case 0x2347:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD LEFTWARDS ARROW");
				break;
			case 0x2348:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD RIGHTWARDS ARROW");
				break;
			case 0x2349:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL CIRCLE BACKSLASH");
				break;
			case 0x234A:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DOWN TACK UNDERBAR");
				break;
			case 0x234B:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DELTA STILE");
				break;
			case 0x234C:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD DOWN CARET");
				break;
			case 0x234D:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD DELTA");
				break;
			case 0x234E:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DOWN TACK JOT");
				break;
			case 0x234F:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL UPWARDS VANE");
				break;
			case 0x2350:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD UPWARDS ARROW");
				break;
			case 0x2351:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL UP TACK OVERBAR");
				break;
			case 0x2352:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DEL STILE");
				break;
			case 0x2353:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD UP CARET");
				break;
			case 0x2354:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD DEL");
				break;
			case 0x2355:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL UP TACK JOT");
				break;
			case 0x2356:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DOWNWARDS VANE");
				break;
			case 0x2357:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD DOWNWARDS ARROW");
				break;
			case 0x2358:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUOTE UNDERBAR");
				break;
			case 0x2359:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DELTA UNDERBAR");
				break;
			case 0x235A:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DIAMOND UNDERBAR");
				break;
			case 0x235B:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL JOT UNDERBAR");
				break;
			case 0x235C:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL CIRCLE UNDERBAR");
				break;
			case 0x235D:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL UP SHOE JOT");
				break;
			case 0x235E:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUOTE QUAD");
				break;
			case 0x235F:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL CIRCLE STAR");
				break;
			case 0x2360:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD COLON");
				break;
			case 0x2361:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL UP TACK DIAERESIS");
				break;
			case 0x2362:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DEL DIAERESIS");
				break;
			case 0x2363:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL STAR DIAERESIS");
				break;
			case 0x2364:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL JOT DIAERESIS");
				break;
			case 0x2365:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL CIRCLE DIAERESIS");
				break;
			case 0x2366:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DOWN SHOE STILE");
				break;
			case 0x2367:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL LEFT SHOE STILE");
				break;
			case 0x2368:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL TILDE DIAERESIS");
				break;
			case 0x2369:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL GREATER-THAN DIAERESIS");
				break;
			case 0x236A:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL COMMA BAR");
				break;
			case 0x236B:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DEL TILDE");
				break;
			case 0x236C:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL ZILDE");
				break;
			case 0x236D:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL STILE TILDE");
				break;
			case 0x236E:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL SEMICOLON UNDERBAR");
				break;
			case 0x236F:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD NOT EQUAL");
				break;
			case 0x2370:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD QUESTION");
				break;
			case 0x2371:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL DOWN CARET TILDE");
				break;
			case 0x2372:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL UP CARET TILDE");
				break;
			case 0x2373:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL IOTA");
				break;
			case 0x2374:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL RHO");
				break;
			case 0x2375:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL OMEGA");
				break;
			case 0x2376:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL ALPHA UNDERBAR");
				break;
			case 0x2377:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL EPSILON UNDERBAR");
				break;
			case 0x2378:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL IOTA UNDERBAR");
				break;
			case 0x2379:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL OMEGA UNDERBAR");
				break;
			case 0x237A:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL ALPHA");
				break;
			case 0x237B:
				strcpy_s(buf, buf_size, "NOT CHECK MARK");
				break;
			case 0x237C:
				strcpy_s(buf, buf_size, "RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW");
				break;
			case 0x237D:
				strcpy_s(buf, buf_size, "SHOULDERED OPEN BOX");
				break;
			case 0x237E:
				strcpy_s(buf, buf_size, "BELL SYMBOL");
				break;
			case 0x237F:
				strcpy_s(buf, buf_size, "VERTICAL LINE WITH MIDDLE DOT");
				break;
			case 0x2380:
				strcpy_s(buf, buf_size, "INSERTION SYMBOL");
				break;
			case 0x2381:
				strcpy_s(buf, buf_size, "CONTINUOUS UNDERLINE SYMBOL");
				break;
			case 0x2382:
				strcpy_s(buf, buf_size, "DISCONTINUOUS UNDERLINE SYMBOL");
				break;
			case 0x2383:
				strcpy_s(buf, buf_size, "EMPHASIS SYMBOL");
				break;
			case 0x2384:
				strcpy_s(buf, buf_size, "COMPOSITION SYMBOL");
				break;
			case 0x2385:
				strcpy_s(buf, buf_size, "WHITE SQUARE WITH CENTRE VERTICAL LINE");
				break;
			case 0x2386:
				strcpy_s(buf, buf_size, "ENTER SYMBOL");
				break;
			case 0x2387:
				strcpy_s(buf, buf_size, "ALTERNATIVE KEY SYMBOL");
				break;
			case 0x2388:
				strcpy_s(buf, buf_size, "HELM SYMBOL");
				break;
			case 0x2389:
				strcpy_s(buf, buf_size, "CIRCLED HORIZONTAL BAR WITH NOTCH");
				break;
			case 0x238A:
				strcpy_s(buf, buf_size, "CIRCLED TRIANGLE DOWN");
				break;
			case 0x238B:
				strcpy_s(buf, buf_size, "BROKEN CIRCLE WITH NORTHWEST ARROW");
				break;
			case 0x238C:
				strcpy_s(buf, buf_size, "UNDO SYMBOL");
				break;
			case 0x238D:
				strcpy_s(buf, buf_size, "MONOSTABLE SYMBOL");
				break;
			case 0x238E:
				strcpy_s(buf, buf_size, "HYSTERESIS SYMBOL");
				break;
			case 0x238F:
				strcpy_s(buf, buf_size, "OPEN-CIRCUIT-OUTPUT H-TYPE SYMBOL");
				break;
			case 0x2390:
				strcpy_s(buf, buf_size, "OPEN-CIRCUIT-OUTPUT L-TYPE SYMBOL");
				break;
			case 0x2391:
				strcpy_s(buf, buf_size, "PASSIVE-PULL-DOWN-OUTPUT SYMBOL");
				break;
			case 0x2392:
				strcpy_s(buf, buf_size, "PASSIVE-PULL-UP-OUTPUT SYMBOL");
				break;
			case 0x2393:
				strcpy_s(buf, buf_size, "DIRECT CURRENT SYMBOL FORM TWO");
				break;
			case 0x2394:
				strcpy_s(buf, buf_size, "SOFTWARE-FUNCTION SYMBOL");
				break;
			case 0x2395:
				strcpy_s(buf, buf_size, "APL FUNCTIONAL SYMBOL QUAD");
				break;
			case 0x2396:
				strcpy_s(buf, buf_size, "DECIMAL SEPARATOR KEY SYMBOL");
				break;
			case 0x2397:
				strcpy_s(buf, buf_size, "PREVIOUS PAGE");
				break;
			case 0x2398:
				strcpy_s(buf, buf_size, "NEXT PAGE");
				break;
			case 0x2399:
				strcpy_s(buf, buf_size, "PRINT SCREEN SYMBOL");
				break;
			case 0x239A:
				strcpy_s(buf, buf_size, "CLEAR SCREEN SYMBOL");
				break;
			case 0x239B:
				strcpy_s(buf, buf_size, "LEFT PARENTHESIS UPPER HOOK");
				break;
			case 0x239C:
				strcpy_s(buf, buf_size, "LEFT PARENTHESIS EXTENSION");
				break;
			case 0x239D:
				strcpy_s(buf, buf_size, "LEFT PARENTHESIS LOWER HOOK");
				break;
			case 0x239E:
				strcpy_s(buf, buf_size, "RIGHT PARENTHESIS UPPER HOOK");
				break;
			case 0x239F:
				strcpy_s(buf, buf_size, "RIGHT PARENTHESIS EXTENSION");
				break;
			case 0x23A0:
				strcpy_s(buf, buf_size, "RIGHT PARENTHESIS LOWER HOOK");
				break;
			case 0x23A1:
				strcpy_s(buf, buf_size, "LEFT SQUARE BRACKET UPPER CORNER");
				break;
			case 0x23A2:
				strcpy_s(buf, buf_size, "LEFT SQUARE BRACKET EXTENSION");
				break;
			case 0x23A3:
				strcpy_s(buf, buf_size, "LEFT SQUARE BRACKET LOWER CORNER");
				break;
			case 0x23A4:
				strcpy_s(buf, buf_size, "RIGHT SQUARE BRACKET UPPER CORNER");
				break;
			case 0x23A5:
				strcpy_s(buf, buf_size, "RIGHT SQUARE BRACKET EXTENSION");
				break;
			case 0x23A6:
				strcpy_s(buf, buf_size, "RIGHT SQUARE BRACKET LOWER CORNER");
				break;
			case 0x23A7:
				strcpy_s(buf, buf_size, "LEFT CURLY BRACKET UPPER HOOK");
				break;
			case 0x23A8:
				strcpy_s(buf, buf_size, "LEFT CURLY BRACKET MIDDLE PIECE");
				break;
			case 0x23A9:
				strcpy_s(buf, buf_size, "LEFT CURLY BRACKET LOWER HOOK");
				break;
			case 0x23AA:
				strcpy_s(buf, buf_size, "CURLY BRACKET EXTENSION");
				break;
			case 0x23AB:
				strcpy_s(buf, buf_size, "RIGHT CURLY BRACKET UPPER HOOK");
				break;
			case 0x23AC:
				strcpy_s(buf, buf_size, "RIGHT CURLY BRACKET MIDDLE PIECE");
				break;
			case 0x23AD:
				strcpy_s(buf, buf_size, "RIGHT CURLY BRACKET LOWER HOOK");
				break;
			case 0x23AE:
				strcpy_s(buf, buf_size, "INTEGRAL EXTENSION");
				break;
			case 0x23AF:
				strcpy_s(buf, buf_size, "HORIZONTAL LINE EXTENSION");
				break;
			case 0x23B0:
				strcpy_s(buf, buf_size, "UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION");
				break;
			case 0x23B1:
				strcpy_s(buf, buf_size, "UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION");
				break;
			case 0x23B2:
				strcpy_s(buf, buf_size, "SUMMATION TOP");
				break;
			case 0x23B3:
				strcpy_s(buf, buf_size, "SUMMATION BOTTOM");
				break;
			case 0x23B4:
				strcpy_s(buf, buf_size, "TOP SQUARE BRACKET");
				break;
			case 0x23B5:
				strcpy_s(buf, buf_size, "BOTTOM SQUARE BRACKET");
				break;
			case 0x23B6:
				strcpy_s(buf, buf_size, "BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET");
				break;
			case 0x23B7:
				strcpy_s(buf, buf_size, "RADICAL SYMBOL BOTTOM");
				break;
			case 0x23B8:
				strcpy_s(buf, buf_size, "LEFT VERTICAL BOX LINE");
				break;
			case 0x23B9:
				strcpy_s(buf, buf_size, "RIGHT VERTICAL BOX LINE");
				break;
			case 0x23BA:
				strcpy_s(buf, buf_size, "HORIZONTAL SCAN LINE-1");
				break;
			case 0x23BB:
				strcpy_s(buf, buf_size, "HORIZONTAL SCAN LINE-3");
				break;
			case 0x23BC:
				strcpy_s(buf, buf_size, "HORIZONTAL SCAN LINE-7");
				break;
			case 0x23BD:
				strcpy_s(buf, buf_size, "HORIZONTAL SCAN LINE-9");
				break;
			case 0x23BE:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT VERTICAL AND TOP RIGHT");
				break;
			case 0x23BF:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM RIGHT");
				break;
			case 0x23C0:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT VERTICAL WITH CIRCLE");
				break;
			case 0x23C1:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH CIRCLE");
				break;
			case 0x23C2:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH CIRCLE");
				break;
			case 0x23C3:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT VERTICAL WITH TRIANGLE");
				break;
			case 0x23C4:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH TRIANGLE");
				break;
			case 0x23C5:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH TRIANGLE");
				break;
			case 0x23C6:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT VERTICAL AND WAVE");
				break;
			case 0x23C7:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH WAVE");
				break;
			case 0x23C8:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH WAVE");
				break;
			case 0x23C9:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL");
				break;
			case 0x23CA:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL");
				break;
			case 0x23CB:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT VERTICAL AND TOP LEFT");
				break;
			case 0x23CC:
				strcpy_s(buf, buf_size, "DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM LEFT");
				break;
			case 0x23CD:
				strcpy_s(buf, buf_size, "SQUARE FOOT");
				break;
			case 0x23CE:
				strcpy_s(buf, buf_size, "RETURN SYMBOL");
				break;
			case 0x23CF:
				strcpy_s(buf, buf_size, "EJECT SYMBOL");
				break;
			case 0x23D0:
				strcpy_s(buf, buf_size, "VERTICAL LINE EXTENSION");
				break;
			case 0x23D1:
				strcpy_s(buf, buf_size, "METRICAL BREVE");
				break;
			case 0x23D2:
				strcpy_s(buf, buf_size, "METRICAL LONG OVER SHORT");
				break;
			case 0x23D3:
				strcpy_s(buf, buf_size, "METRICAL SHORT OVER LONG");
				break;
			case 0x23D4:
				strcpy_s(buf, buf_size, "METRICAL LONG OVER TWO SHORTS");
				break;
			case 0x23D5:
				strcpy_s(buf, buf_size, "METRICAL TWO SHORTS OVER LONG");
				break;
			case 0x23D6:
				strcpy_s(buf, buf_size, "METRICAL TWO SHORTS JOINED");
				break;
			case 0x23D7:
				strcpy_s(buf, buf_size, "METRICAL TRISEME");
				break;
			case 0x23D8:
				strcpy_s(buf, buf_size, "METRICAL TETRASEME");
				break;
			case 0x23D9:
				strcpy_s(buf, buf_size, "METRICAL PENTASEME");
				break;
			case 0x23DA:
				strcpy_s(buf, buf_size, "EARTH GROUND");
				break;
			case 0x23DB:
				strcpy_s(buf, buf_size, "FUSE");
				break;
			case 0x23DC:
				strcpy_s(buf, buf_size, "TOP PARENTHESIS");
				break;
			case 0x23DD:
				strcpy_s(buf, buf_size, "BOTTOM PARENTHESIS");
				break;
			case 0x23DE:
				strcpy_s(buf, buf_size, "TOP CURLY BRACKET");
				break;
			case 0x23DF:
				strcpy_s(buf, buf_size, "BOTTOM CURLY BRACKET");
				break;
			case 0x23E0:
				strcpy_s(buf, buf_size, "TOP TORTOISE SHELL BRACKET");
				break;
			case 0x23E1:
				strcpy_s(buf, buf_size, "BOTTOM TORTOISE SHELL BRACKET");
				break;
			case 0x23E2:
				strcpy_s(buf, buf_size, "WHITE TRAPEZIUM");
				break;
			case 0x23E3:
				strcpy_s(buf, buf_size, "BENZENE RING WITH CIRCLE");
				break;
			case 0x23E4:
				strcpy_s(buf, buf_size, "STRAIGHTNESS");
				break;
			case 0x23E5:
				strcpy_s(buf, buf_size, "FLATNESS");
				break;
			case 0x23E6:
				strcpy_s(buf, buf_size, "AC CURRENT");
				break;
			case 0x23E7:
				strcpy_s(buf, buf_size, "ELECTRICAL INTERSECTION");
				break;
			case 0x23E8:
				strcpy_s(buf, buf_size, "DECIMAL EXPONENT SYMBOL");
				break;
			case 0x23E9:
				strcpy_s(buf, buf_size, "BLACK RIGHT-POINTING DOUBLE TRIANGLE");
				break;
			case 0x23EA:
				strcpy_s(buf, buf_size, "BLACK LEFT-POINTING DOUBLE TRIANGLE");
				break;
			case 0x23EB:
				strcpy_s(buf, buf_size, "BLACK UP-POINTING DOUBLE TRIANGLE");
				break;
			case 0x23EC:
				strcpy_s(buf, buf_size, "BLACK DOWN-POINTING DOUBLE TRIANGLE");
				break;
			case 0x23ED:
				strcpy_s(buf, buf_size, "BLACK RIGHT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR");
				break;
			case 0x23EE:
				strcpy_s(buf, buf_size, "BLACK LEFT-POINTING DOUBLE TRIANGLE WITH VERTICAL BAR");
				break;
			case 0x23EF:
				strcpy_s(buf, buf_size, "BLACK RIGHT-POINTING TRIANGLE WITH DOUBLE VERTICAL BAR");
				break;
			case 0x23F0:
				strcpy_s(buf, buf_size, "ALARM CLOCK");
				break;
			case 0x23F1:
				strcpy_s(buf, buf_size, "STOPWATCH");
				break;
			case 0x23F2:
				strcpy_s(buf, buf_size, "TIMER CLOCK");
				break;
			case 0x23F3:
				strcpy_s(buf, buf_size, "HOURGLASS WITH FLOWING SAND");
				break;
			case 0x23F4:
				strcpy_s(buf, buf_size, "BLACK MEDIUM LEFT-POINTING TRIANGLE");
				break;
			case 0x23F5:
				strcpy_s(buf, buf_size, "BLACK MEDIUM RIGHT-POINTING TRIANGLE");
				break;
			case 0x23F6:
				strcpy_s(buf, buf_size, "BLACK MEDIUM UP-POINTING TRIANGLE");
				break;
			case 0x23F7:
				strcpy_s(buf, buf_size, "BLACK MEDIUM DOWN-POINTING TRIANGLE");
				break;
			case 0x23F8:
				strcpy_s(buf, buf_size, "DOUBLE VERTICAL BAR");
				break;
			case 0x23F9:
				strcpy_s(buf, buf_size, "BLACK SQUARE FOR STOP");
				break;
			case 0x23FA:
				strcpy_s(buf, buf_size, "BLACK CIRCLE FOR RECORD");
				break;
			case 0x23FB:
				strcpy_s(buf, buf_size, "POWER SYMBOL");
				break;
			case 0x23FC:
				strcpy_s(buf, buf_size, "POWER ON-OFF SYMBOL");
				break;
			case 0x23FD:
				strcpy_s(buf, buf_size, "POWER ON SYMBOL");
				break;
			case 0x23FE:
				strcpy_s(buf, buf_size, "POWER SLEEP SYMBOL");
				break;
			case 0x23FF:
				strcpy_s(buf, buf_size, "OBSERVER EYE SYMBOL");
				break;
			case 0x2400:
				strcpy_s(buf, buf_size, "SYMBOL FOR NULL");
				break;
			case 0x2401:
				strcpy_s(buf, buf_size, "SYMBOL FOR START OF HEADING");
				break;
			case 0x2402:
				strcpy_s(buf, buf_size, "SYMBOL FOR START OF TEXT");
				break;
			case 0x2403:
				strcpy_s(buf, buf_size, "SYMBOL FOR END OF TEXT");
				break;
			case 0x2404:
				strcpy_s(buf, buf_size, "SYMBOL FOR END OF TRANSMISSION");
				break;
			case 0x2405:
				strcpy_s(buf, buf_size, "SYMBOL FOR ENQUIRY");
				break;
			case 0x2406:
				strcpy_s(buf, buf_size, "SYMBOL FOR ACKNOWLEDGE");
				break;
			case 0x2407:
				strcpy_s(buf, buf_size, "SYMBOL FOR BELL");
				break;
			case 0x2408:
				strcpy_s(buf, buf_size, "SYMBOL FOR BACKSPACE");
				break;
			case 0x2409:
				strcpy_s(buf, buf_size, "SYMBOL FOR HORIZONTAL TABULATION");
				break;
			case 0x240A:
				strcpy_s(buf, buf_size, "SYMBOL FOR LINE FEED");
				break;
			case 0x240B:
				strcpy_s(buf, buf_size, "SYMBOL FOR VERTICAL TABULATION");
				break;
			case 0x240C:
				strcpy_s(buf, buf_size, "SYMBOL FOR FORM FEED");
				break;
			case 0x240D:
				strcpy_s(buf, buf_size, "SYMBOL FOR CARRIAGE RETURN");
				break;
			case 0x240E:
				strcpy_s(buf, buf_size, "SYMBOL FOR SHIFT OUT");
				break;
			case 0x240F:
				strcpy_s(buf, buf_size, "SYMBOL FOR SHIFT IN");
				break;
			case 0x2410:
				strcpy_s(buf, buf_size, "SYMBOL FOR DATA LINK ESCAPE");
				break;
			case 0x2411:
				strcpy_s(buf, buf_size, "SYMBOL FOR DEVICE CONTROL ONE");
				break;
			case 0x2412:
				strcpy_s(buf, buf_size, "SYMBOL FOR DEVICE CONTROL TWO");
				break;
			case 0x2413:
				strcpy_s(buf, buf_size, "SYMBOL FOR DEVICE CONTROL THREE");
				break;
			case 0x2414:
				strcpy_s(buf, buf_size, "SYMBOL FOR DEVICE CONTROL FOUR");
				break;
			case 0x2415:
				strcpy_s(buf, buf_size, "SYMBOL FOR NEGATIVE ACKNOWLEDGE");
				break;
			case 0x2416:
				strcpy_s(buf, buf_size, "SYMBOL FOR SYNCHRONOUS IDLE");
				break;
			case 0x2417:
				strcpy_s(buf, buf_size, "SYMBOL FOR END OF TRANSMISSION BLOCK");
				break;
			case 0x2418:
				strcpy_s(buf, buf_size, "SYMBOL FOR CANCEL");
				break;
			case 0x2419:
				strcpy_s(buf, buf_size, "SYMBOL FOR END OF MEDIUM");
				break;
			case 0x241A:
				strcpy_s(buf, buf_size, "SYMBOL FOR SUBSTITUTE");
				break;
			case 0x241B:
				strcpy_s(buf, buf_size, "SYMBOL FOR ESCAPE");
				break;
			case 0x241C:
				strcpy_s(buf, buf_size, "SYMBOL FOR FILE SEPARATOR");
				break;
			case 0x241D:
				strcpy_s(buf, buf_size, "SYMBOL FOR GROUP SEPARATOR");
				break;
			case 0x241E:
				strcpy_s(buf, buf_size, "SYMBOL FOR RECORD SEPARATOR");
				break;
			case 0x241F:
				strcpy_s(buf, buf_size, "SYMBOL FOR UNIT SEPARATOR");
				break;
			case 0x2420:
				strcpy_s(buf, buf_size, "SYMBOL FOR SPACE");
				break;
			case 0x2421:
				strcpy_s(buf, buf_size, "SYMBOL FOR DELETE");
				break;
			case 0x2422:
				strcpy_s(buf, buf_size, "BLANK SYMBOL");
				break;
			case 0x2423:
				strcpy_s(buf, buf_size, "OPEN BOX");
				break;
			case 0x2424:
				strcpy_s(buf, buf_size, "SYMBOL FOR NEWLINE");
				break;
			case 0x2425:
				strcpy_s(buf, buf_size, "SYMBOL FOR DELETE FORM TWO");
				break;
			case 0x2426:
				strcpy_s(buf, buf_size, "SYMBOL FOR SUBSTITUTE FORM TWO");
				break;
			case 0x2440:
				strcpy_s(buf, buf_size, "OCR HOOK");
				break;
			case 0x2441:
				strcpy_s(buf, buf_size, "OCR CHAIR");
				break;
			case 0x2442:
				strcpy_s(buf, buf_size, "OCR FORK");
				break;
			case 0x2443:
				strcpy_s(buf, buf_size, "OCR INVERTED FORK");
				break;
			case 0x2444:
				strcpy_s(buf, buf_size, "OCR BELT BUCKLE");
				break;
			case 0x2445:
				strcpy_s(buf, buf_size, "OCR BOW TIE");
				break;
			case 0x2446:
				strcpy_s(buf, buf_size, "OCR BRANCH BANK IDENTIFICATION");
				break;
			case 0x2447:
				strcpy_s(buf, buf_size, "OCR AMOUNT OF CHECK");
				break;
			case 0x2448:
				strcpy_s(buf, buf_size, "OCR DASH");
				break;
			case 0x2449:
				strcpy_s(buf, buf_size, "OCR CUSTOMER ACCOUNT NUMBER");
				break;
			case 0x244A:
				strcpy_s(buf, buf_size, "OCR DOUBLE BACKSLASH");
				break;
			case 0x2460:
				strcpy_s(buf, buf_size, "CIRCLED DIGIT ONE");
				break;
			case 0x2461:
				strcpy_s(buf, buf_size, "CIRCLED DIGIT TWO");
				break;
			case 0x2462:
				strcpy_s(buf, buf_size, "CIRCLED DIGIT THREE");
				break;
			case 0x2463:
				strcpy_s(buf, buf_size, "CIRCLED DIGIT FOUR");
				break;
			case 0x2464:
				strcpy_s(buf, buf_size, "CIRCLED DIGIT FIVE");
				break;
			case 0x2465:
				strcpy_s(buf, buf_size, "CIRCLED DIGIT SIX");
				break;
			case 0x2466:
				strcpy_s(buf, buf_size, "CIRCLED DIGIT SEVEN");
				break;
			case 0x2467:
				strcpy_s(buf, buf_size, "CIRCLED DIGIT EIGHT");
				break;
			case 0x2468:
				strcpy_s(buf, buf_size, "CIRCLED DIGIT NINE");
				break;
			case 0x2469:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TEN");
				break;
			case 0x246A:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER ELEVEN");
				break;
			case 0x246B:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWELVE");
				break;
			case 0x246C:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTEEN");
				break;
			case 0x246D:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FOURTEEN");
				break;
			case 0x246E:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FIFTEEN");
				break;
			case 0x246F:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER SIXTEEN");
				break;
			case 0x2470:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER SEVENTEEN");
				break;
			case 0x2471:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER EIGHTEEN");
				break;
			case 0x2472:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER NINETEEN");
				break;
			case 0x2473:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY");
				break;
			case 0x2474:
				strcpy_s(buf, buf_size, "PARENTHESIZED DIGIT ONE");
				break;
			case 0x2475:
				strcpy_s(buf, buf_size, "PARENTHESIZED DIGIT TWO");
				break;
			case 0x2476:
				strcpy_s(buf, buf_size, "PARENTHESIZED DIGIT THREE");
				break;
			case 0x2477:
				strcpy_s(buf, buf_size, "PARENTHESIZED DIGIT FOUR");
				break;
			case 0x2478:
				strcpy_s(buf, buf_size, "PARENTHESIZED DIGIT FIVE");
				break;
			case 0x2479:
				strcpy_s(buf, buf_size, "PARENTHESIZED DIGIT SIX");
				break;
			case 0x247A:
				strcpy_s(buf, buf_size, "PARENTHESIZED DIGIT SEVEN");
				break;
			case 0x247B:
				strcpy_s(buf, buf_size, "PARENTHESIZED DIGIT EIGHT");
				break;
			case 0x247C:
				strcpy_s(buf, buf_size, "PARENTHESIZED DIGIT NINE");
				break;
			case 0x247D:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER TEN");
				break;
			case 0x247E:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER ELEVEN");
				break;
			case 0x247F:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER TWELVE");
				break;
			case 0x2480:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER THIRTEEN");
				break;
			case 0x2481:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER FOURTEEN");
				break;
			case 0x2482:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER FIFTEEN");
				break;
			case 0x2483:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER SIXTEEN");
				break;
			case 0x2484:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER SEVENTEEN");
				break;
			case 0x2485:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER EIGHTEEN");
				break;
			case 0x2486:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER NINETEEN");
				break;
			case 0x2487:
				strcpy_s(buf, buf_size, "PARENTHESIZED NUMBER TWENTY");
				break;
			case 0x2488:
				strcpy_s(buf, buf_size, "DIGIT ONE FULL STOP");
				break;
			case 0x2489:
				strcpy_s(buf, buf_size, "DIGIT TWO FULL STOP");
				break;
			case 0x248A:
				strcpy_s(buf, buf_size, "DIGIT THREE FULL STOP");
				break;
			case 0x248B:
				strcpy_s(buf, buf_size, "DIGIT FOUR FULL STOP");
				break;
			case 0x248C:
				strcpy_s(buf, buf_size, "DIGIT FIVE FULL STOP");
				break;
			case 0x248D:
				strcpy_s(buf, buf_size, "DIGIT SIX FULL STOP");
				break;
			case 0x248E:
				strcpy_s(buf, buf_size, "DIGIT SEVEN FULL STOP");
				break;
			case 0x248F:
				strcpy_s(buf, buf_size, "DIGIT EIGHT FULL STOP");
				break;
			case 0x2490:
				strcpy_s(buf, buf_size, "DIGIT NINE FULL STOP");
				break;
			case 0x2491:
				strcpy_s(buf, buf_size, "NUMBER TEN FULL STOP");
				break;
			case 0x2492:
				strcpy_s(buf, buf_size, "NUMBER ELEVEN FULL STOP");
				break;
			case 0x2493:
				strcpy_s(buf, buf_size, "NUMBER TWELVE FULL STOP");
				break;
			case 0x2494:
				strcpy_s(buf, buf_size, "NUMBER THIRTEEN FULL STOP");
				break;
			case 0x2495:
				strcpy_s(buf, buf_size, "NUMBER FOURTEEN FULL STOP");
				break;
			case 0x2496:
				strcpy_s(buf, buf_size, "NUMBER FIFTEEN FULL STOP");
				break;
			case 0x2497:
				strcpy_s(buf, buf_size, "NUMBER SIXTEEN FULL STOP");
				break;
			case 0x2498:
				strcpy_s(buf, buf_size, "NUMBER SEVENTEEN FULL STOP");
				break;
			case 0x2499:
				strcpy_s(buf, buf_size, "NUMBER EIGHTEEN FULL STOP");
				break;
			case 0x249A:
				strcpy_s(buf, buf_size, "NUMBER NINETEEN FULL STOP");
				break;
			case 0x249B:
				strcpy_s(buf, buf_size, "NUMBER TWENTY FULL STOP");
				break;
			case 0x249C:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER A");
				break;
			case 0x249D:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER B");
				break;
			case 0x249E:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER C");
				break;
			case 0x249F:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER D");
				break;
			case 0x24A0:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER E");
				break;
			case 0x24A1:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER F");
				break;
			case 0x24A2:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER G");
				break;
			case 0x24A3:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER H");
				break;
			case 0x24A4:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER I");
				break;
			case 0x24A5:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER J");
				break;
			case 0x24A6:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER K");
				break;
			case 0x24A7:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER L");
				break;
			case 0x24A8:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER M");
				break;
			case 0x24A9:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER N");
				break;
			case 0x24AA:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER O");
				break;
			case 0x24AB:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER P");
				break;
			case 0x24AC:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER Q");
				break;
			case 0x24AD:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER R");
				break;
			case 0x24AE:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER S");
				break;
			case 0x24AF:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER T");
				break;
			case 0x24B0:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER U");
				break;
			case 0x24B1:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER V");
				break;
			case 0x24B2:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER W");
				break;
			case 0x24B3:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER X");
				break;
			case 0x24B4:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER Y");
				break;
			case 0x24B5:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN SMALL LETTER Z");
				break;
			case 0x24B6:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER A");
				break;
			case 0x24B7:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER B");
				break;
			case 0x24B8:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER C");
				break;
			case 0x24B9:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER D");
				break;
			case 0x24BA:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER E");
				break;
			case 0x24BB:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER F");
				break;
			case 0x24BC:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER G");
				break;
			case 0x24BD:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER H");
				break;
			case 0x24BE:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER I");
				break;
			case 0x24BF:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER J");
				break;
			case 0x24C0:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER K");
				break;
			case 0x24C1:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER L");
				break;
			case 0x24C2:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER M");
				break;
			case 0x24C3:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER N");
				break;
			case 0x24C4:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER O");
				break;
			case 0x24C5:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER P");
				break;
			case 0x24C6:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER Q");
				break;
			case 0x24C7:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER R");
				break;
			case 0x24C8:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER S");
				break;
			case 0x24C9:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER T");
				break;
			case 0x24CA:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER U");
				break;
			case 0x24CB:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER V");
				break;
			case 0x24CC:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER W");
				break;
			case 0x24CD:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER X");
				break;
			case 0x24CE:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER Y");
				break;
			case 0x24CF:
				strcpy_s(buf, buf_size, "CIRCLED LATIN CAPITAL LETTER Z");
				break;
			case 0x24D0:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER A");
				break;
			case 0x24D1:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER B");
				break;
			case 0x24D2:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER C");
				break;
			case 0x24D3:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER D");
				break;
			case 0x24D4:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER E");
				break;
			case 0x24D5:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER F");
				break;
			case 0x24D6:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER G");
				break;
			case 0x24D7:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER H");
				break;
			case 0x24D8:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER I");
				break;
			case 0x24D9:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER J");
				break;
			case 0x24DA:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER K");
				break;
			case 0x24DB:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER L");
				break;
			case 0x24DC:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER M");
				break;
			case 0x24DD:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER N");
				break;
			case 0x24DE:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER O");
				break;
			case 0x24DF:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER P");
				break;
			case 0x24E0:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER Q");
				break;
			case 0x24E1:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER R");
				break;
			case 0x24E2:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER S");
				break;
			case 0x24E3:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER T");
				break;
			case 0x24E4:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER U");
				break;
			case 0x24E5:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER V");
				break;
			case 0x24E6:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER W");
				break;
			case 0x24E7:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER X");
				break;
			case 0x24E8:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER Y");
				break;
			case 0x24E9:
				strcpy_s(buf, buf_size, "CIRCLED LATIN SMALL LETTER Z");
				break;
			case 0x24EA:
				strcpy_s(buf, buf_size, "CIRCLED DIGIT ZERO");
				break;
			case 0x24EB:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED NUMBER ELEVEN");
				break;
			case 0x24EC:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED NUMBER TWELVE");
				break;
			case 0x24ED:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED NUMBER THIRTEEN");
				break;
			case 0x24EE:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED NUMBER FOURTEEN");
				break;
			case 0x24EF:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED NUMBER FIFTEEN");
				break;
			case 0x24F0:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED NUMBER SIXTEEN");
				break;
			case 0x24F1:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED NUMBER SEVENTEEN");
				break;
			case 0x24F2:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED NUMBER EIGHTEEN");
				break;
			case 0x24F3:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED NUMBER NINETEEN");
				break;
			case 0x24F4:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED NUMBER TWENTY");
				break;
			case 0x24F5:
				strcpy_s(buf, buf_size, "DOUBLE CIRCLED DIGIT ONE");
				break;
			case 0x24F6:
				strcpy_s(buf, buf_size, "DOUBLE CIRCLED DIGIT TWO");
				break;
			case 0x24F7:
				strcpy_s(buf, buf_size, "DOUBLE CIRCLED DIGIT THREE");
				break;
			case 0x24F8:
				strcpy_s(buf, buf_size, "DOUBLE CIRCLED DIGIT FOUR");
				break;
			case 0x24F9:
				strcpy_s(buf, buf_size, "DOUBLE CIRCLED DIGIT FIVE");
				break;
			case 0x24FA:
				strcpy_s(buf, buf_size, "DOUBLE CIRCLED DIGIT SIX");
				break;
			case 0x24FB:
				strcpy_s(buf, buf_size, "DOUBLE CIRCLED DIGIT SEVEN");
				break;
			case 0x24FC:
				strcpy_s(buf, buf_size, "DOUBLE CIRCLED DIGIT EIGHT");
				break;
			case 0x24FD:
				strcpy_s(buf, buf_size, "DOUBLE CIRCLED DIGIT NINE");
				break;
			case 0x24FE:
				strcpy_s(buf, buf_size, "DOUBLE CIRCLED NUMBER TEN");
				break;
			case 0x24FF:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED DIGIT ZERO");
				break;
			case 0x2500:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT HORIZONTAL");
				break;
			case 0x2501:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY HORIZONTAL");
				break;
			case 0x2502:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT VERTICAL");
				break;
			case 0x2503:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY VERTICAL");
				break;
			case 0x2504:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT TRIPLE DASH HORIZONTAL");
				break;
			case 0x2505:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY TRIPLE DASH HORIZONTAL");
				break;
			case 0x2506:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT TRIPLE DASH VERTICAL");
				break;
			case 0x2507:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY TRIPLE DASH VERTICAL");
				break;
			case 0x2508:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT QUADRUPLE DASH HORIZONTAL");
				break;
			case 0x2509:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY QUADRUPLE DASH HORIZONTAL");
				break;
			case 0x250A:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT QUADRUPLE DASH VERTICAL");
				break;
			case 0x250B:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY QUADRUPLE DASH VERTICAL");
				break;
			case 0x250C:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DOWN AND RIGHT");
				break;
			case 0x250D:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN LIGHT AND RIGHT HEAVY");
				break;
			case 0x250E:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN HEAVY AND RIGHT LIGHT");
				break;
			case 0x250F:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY DOWN AND RIGHT");
				break;
			case 0x2510:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DOWN AND LEFT");
				break;
			case 0x2511:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN LIGHT AND LEFT HEAVY");
				break;
			case 0x2512:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN HEAVY AND LEFT LIGHT");
				break;
			case 0x2513:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY DOWN AND LEFT");
				break;
			case 0x2514:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT UP AND RIGHT");
				break;
			case 0x2515:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP LIGHT AND RIGHT HEAVY");
				break;
			case 0x2516:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP HEAVY AND RIGHT LIGHT");
				break;
			case 0x2517:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY UP AND RIGHT");
				break;
			case 0x2518:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT UP AND LEFT");
				break;
			case 0x2519:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP LIGHT AND LEFT HEAVY");
				break;
			case 0x251A:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP HEAVY AND LEFT LIGHT");
				break;
			case 0x251B:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY UP AND LEFT");
				break;
			case 0x251C:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT VERTICAL AND RIGHT");
				break;
			case 0x251D:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL LIGHT AND RIGHT HEAVY");
				break;
			case 0x251E:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP HEAVY AND RIGHT DOWN LIGHT");
				break;
			case 0x251F:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN HEAVY AND RIGHT UP LIGHT");
				break;
			case 0x2520:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL HEAVY AND RIGHT LIGHT");
				break;
			case 0x2521:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN LIGHT AND RIGHT UP HEAVY");
				break;
			case 0x2522:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP LIGHT AND RIGHT DOWN HEAVY");
				break;
			case 0x2523:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY VERTICAL AND RIGHT");
				break;
			case 0x2524:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT VERTICAL AND LEFT");
				break;
			case 0x2525:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL LIGHT AND LEFT HEAVY");
				break;
			case 0x2526:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP HEAVY AND LEFT DOWN LIGHT");
				break;
			case 0x2527:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN HEAVY AND LEFT UP LIGHT");
				break;
			case 0x2528:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL HEAVY AND LEFT LIGHT");
				break;
			case 0x2529:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN LIGHT AND LEFT UP HEAVY");
				break;
			case 0x252A:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP LIGHT AND LEFT DOWN HEAVY");
				break;
			case 0x252B:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY VERTICAL AND LEFT");
				break;
			case 0x252C:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DOWN AND HORIZONTAL");
				break;
			case 0x252D:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LEFT HEAVY AND RIGHT DOWN LIGHT");
				break;
			case 0x252E:
				strcpy_s(buf, buf_size, "BOX DRAWINGS RIGHT HEAVY AND LEFT DOWN LIGHT");
				break;
			case 0x252F:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN LIGHT AND HORIZONTAL HEAVY");
				break;
			case 0x2530:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN HEAVY AND HORIZONTAL LIGHT");
				break;
			case 0x2531:
				strcpy_s(buf, buf_size, "BOX DRAWINGS RIGHT LIGHT AND LEFT DOWN HEAVY");
				break;
			case 0x2532:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LEFT LIGHT AND RIGHT DOWN HEAVY");
				break;
			case 0x2533:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY DOWN AND HORIZONTAL");
				break;
			case 0x2534:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT UP AND HORIZONTAL");
				break;
			case 0x2535:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LEFT HEAVY AND RIGHT UP LIGHT");
				break;
			case 0x2536:
				strcpy_s(buf, buf_size, "BOX DRAWINGS RIGHT HEAVY AND LEFT UP LIGHT");
				break;
			case 0x2537:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP LIGHT AND HORIZONTAL HEAVY");
				break;
			case 0x2538:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP HEAVY AND HORIZONTAL LIGHT");
				break;
			case 0x2539:
				strcpy_s(buf, buf_size, "BOX DRAWINGS RIGHT LIGHT AND LEFT UP HEAVY");
				break;
			case 0x253A:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LEFT LIGHT AND RIGHT UP HEAVY");
				break;
			case 0x253B:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY UP AND HORIZONTAL");
				break;
			case 0x253C:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL");
				break;
			case 0x253D:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LEFT HEAVY AND RIGHT VERTICAL LIGHT");
				break;
			case 0x253E:
				strcpy_s(buf, buf_size, "BOX DRAWINGS RIGHT HEAVY AND LEFT VERTICAL LIGHT");
				break;
			case 0x253F:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL LIGHT AND HORIZONTAL HEAVY");
				break;
			case 0x2540:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP HEAVY AND DOWN HORIZONTAL LIGHT");
				break;
			case 0x2541:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN HEAVY AND UP HORIZONTAL LIGHT");
				break;
			case 0x2542:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL HEAVY AND HORIZONTAL LIGHT");
				break;
			case 0x2543:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LEFT UP HEAVY AND RIGHT DOWN LIGHT");
				break;
			case 0x2544:
				strcpy_s(buf, buf_size, "BOX DRAWINGS RIGHT UP HEAVY AND LEFT DOWN LIGHT");
				break;
			case 0x2545:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LEFT DOWN HEAVY AND RIGHT UP LIGHT");
				break;
			case 0x2546:
				strcpy_s(buf, buf_size, "BOX DRAWINGS RIGHT DOWN HEAVY AND LEFT UP LIGHT");
				break;
			case 0x2547:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN LIGHT AND UP HORIZONTAL HEAVY");
				break;
			case 0x2548:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP LIGHT AND DOWN HORIZONTAL HEAVY");
				break;
			case 0x2549:
				strcpy_s(buf, buf_size, "BOX DRAWINGS RIGHT LIGHT AND LEFT VERTICAL HEAVY");
				break;
			case 0x254A:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LEFT LIGHT AND RIGHT VERTICAL HEAVY");
				break;
			case 0x254B:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY VERTICAL AND HORIZONTAL");
				break;
			case 0x254C:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DOUBLE DASH HORIZONTAL");
				break;
			case 0x254D:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY DOUBLE DASH HORIZONTAL");
				break;
			case 0x254E:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DOUBLE DASH VERTICAL");
				break;
			case 0x254F:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY DOUBLE DASH VERTICAL");
				break;
			case 0x2550:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE HORIZONTAL");
				break;
			case 0x2551:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE VERTICAL");
				break;
			case 0x2552:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE");
				break;
			case 0x2553:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE");
				break;
			case 0x2554:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE DOWN AND RIGHT");
				break;
			case 0x2555:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE");
				break;
			case 0x2556:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE");
				break;
			case 0x2557:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE DOWN AND LEFT");
				break;
			case 0x2558:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE");
				break;
			case 0x2559:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE");
				break;
			case 0x255A:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE UP AND RIGHT");
				break;
			case 0x255B:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP SINGLE AND LEFT DOUBLE");
				break;
			case 0x255C:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP DOUBLE AND LEFT SINGLE");
				break;
			case 0x255D:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE UP AND LEFT");
				break;
			case 0x255E:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE");
				break;
			case 0x255F:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE");
				break;
			case 0x2560:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE VERTICAL AND RIGHT");
				break;
			case 0x2561:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE");
				break;
			case 0x2562:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE");
				break;
			case 0x2563:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE VERTICAL AND LEFT");
				break;
			case 0x2564:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE");
				break;
			case 0x2565:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE");
				break;
			case 0x2566:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL");
				break;
			case 0x2567:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE");
				break;
			case 0x2568:
				strcpy_s(buf, buf_size, "BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE");
				break;
			case 0x2569:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE UP AND HORIZONTAL");
				break;
			case 0x256A:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE");
				break;
			case 0x256B:
				strcpy_s(buf, buf_size, "BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE");
				break;
			case 0x256C:
				strcpy_s(buf, buf_size, "BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL");
				break;
			case 0x256D:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT ARC DOWN AND RIGHT");
				break;
			case 0x256E:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT ARC DOWN AND LEFT");
				break;
			case 0x256F:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT ARC UP AND LEFT");
				break;
			case 0x2570:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT ARC UP AND RIGHT");
				break;
			case 0x2571:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL UPPER RIGHT TO LOWER LEFT");
				break;
			case 0x2572:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL UPPER LEFT TO LOWER RIGHT");
				break;
			case 0x2573:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL CROSS");
				break;
			case 0x2574:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT LEFT");
				break;
			case 0x2575:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT UP");
				break;
			case 0x2576:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT RIGHT");
				break;
			case 0x2577:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DOWN");
				break;
			case 0x2578:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY LEFT");
				break;
			case 0x2579:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY UP");
				break;
			case 0x257A:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY RIGHT");
				break;
			case 0x257B:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY DOWN");
				break;
			case 0x257C:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT LEFT AND HEAVY RIGHT");
				break;
			case 0x257D:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT UP AND HEAVY DOWN");
				break;
			case 0x257E:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY LEFT AND LIGHT RIGHT");
				break;
			case 0x257F:
				strcpy_s(buf, buf_size, "BOX DRAWINGS HEAVY UP AND LIGHT DOWN");
				break;
			case 0x2580:
				strcpy_s(buf, buf_size, "UPPER HALF BLOCK");
				break;
			case 0x2581:
				strcpy_s(buf, buf_size, "LOWER ONE EIGHTH BLOCK");
				break;
			case 0x2582:
				strcpy_s(buf, buf_size, "LOWER ONE QUARTER BLOCK");
				break;
			case 0x2583:
				strcpy_s(buf, buf_size, "LOWER THREE EIGHTHS BLOCK");
				break;
			case 0x2584:
				strcpy_s(buf, buf_size, "LOWER HALF BLOCK");
				break;
			case 0x2585:
				strcpy_s(buf, buf_size, "LOWER FIVE EIGHTHS BLOCK");
				break;
			case 0x2586:
				strcpy_s(buf, buf_size, "LOWER THREE QUARTERS BLOCK");
				break;
			case 0x2587:
				strcpy_s(buf, buf_size, "LOWER SEVEN EIGHTHS BLOCK");
				break;
			case 0x2588:
				strcpy_s(buf, buf_size, "FULL BLOCK");
				break;
			case 0x2589:
				strcpy_s(buf, buf_size, "LEFT SEVEN EIGHTHS BLOCK");
				break;
			case 0x258A:
				strcpy_s(buf, buf_size, "LEFT THREE QUARTERS BLOCK");
				break;
			case 0x258B:
				strcpy_s(buf, buf_size, "LEFT FIVE EIGHTHS BLOCK");
				break;
			case 0x258C:
				strcpy_s(buf, buf_size, "LEFT HALF BLOCK");
				break;
			case 0x258D:
				strcpy_s(buf, buf_size, "LEFT THREE EIGHTHS BLOCK");
				break;
			case 0x258E:
				strcpy_s(buf, buf_size, "LEFT ONE QUARTER BLOCK");
				break;
			case 0x258F:
				strcpy_s(buf, buf_size, "LEFT ONE EIGHTH BLOCK");
				break;
			case 0x2590:
				strcpy_s(buf, buf_size, "RIGHT HALF BLOCK");
				break;
			case 0x2591:
				strcpy_s(buf, buf_size, "LIGHT SHADE");
				break;
			case 0x2592:
				strcpy_s(buf, buf_size, "MEDIUM SHADE");
				break;
			case 0x2593:
				strcpy_s(buf, buf_size, "DARK SHADE");
				break;
			case 0x2594:
				strcpy_s(buf, buf_size, "UPPER ONE EIGHTH BLOCK");
				break;
			case 0x2595:
				strcpy_s(buf, buf_size, "RIGHT ONE EIGHTH BLOCK");
				break;
			case 0x2596:
				strcpy_s(buf, buf_size, "QUADRANT LOWER LEFT");
				break;
			case 0x2597:
				strcpy_s(buf, buf_size, "QUADRANT LOWER RIGHT");
				break;
			case 0x2598:
				strcpy_s(buf, buf_size, "QUADRANT UPPER LEFT");
				break;
			case 0x2599:
				strcpy_s(buf, buf_size, "QUADRANT UPPER LEFT AND LOWER LEFT AND LOWER RIGHT");
				break;
			case 0x259A:
				strcpy_s(buf, buf_size, "QUADRANT UPPER LEFT AND LOWER RIGHT");
				break;
			case 0x259B:
				strcpy_s(buf, buf_size, "QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER LEFT");
				break;
			case 0x259C:
				strcpy_s(buf, buf_size, "QUADRANT UPPER LEFT AND UPPER RIGHT AND LOWER RIGHT");
				break;
			case 0x259D:
				strcpy_s(buf, buf_size, "QUADRANT UPPER RIGHT");
				break;
			case 0x259E:
				strcpy_s(buf, buf_size, "QUADRANT UPPER RIGHT AND LOWER LEFT");
				break;
			case 0x259F:
				strcpy_s(buf, buf_size, "QUADRANT UPPER RIGHT AND LOWER LEFT AND LOWER RIGHT");
				break;
			case 0x25A0:
				strcpy_s(buf, buf_size, "BLACK SQUARE");
				break;
			case 0x25A1:
				strcpy_s(buf, buf_size, "WHITE SQUARE");
				break;
			case 0x25A2:
				strcpy_s(buf, buf_size, "WHITE SQUARE WITH ROUNDED CORNERS");
				break;
			case 0x25A3:
				strcpy_s(buf, buf_size, "WHITE SQUARE CONTAINING BLACK SMALL SQUARE");
				break;
			case 0x25A4:
				strcpy_s(buf, buf_size, "SQUARE WITH HORIZONTAL FILL");
				break;
			case 0x25A5:
				strcpy_s(buf, buf_size, "SQUARE WITH VERTICAL FILL");
				break;
			case 0x25A6:
				strcpy_s(buf, buf_size, "SQUARE WITH ORTHOGONAL CROSSHATCH FILL");
				break;
			case 0x25A7:
				strcpy_s(buf, buf_size, "SQUARE WITH UPPER LEFT TO LOWER RIGHT FILL");
				break;
			case 0x25A8:
				strcpy_s(buf, buf_size, "SQUARE WITH UPPER RIGHT TO LOWER LEFT FILL");
				break;
			case 0x25A9:
				strcpy_s(buf, buf_size, "SQUARE WITH DIAGONAL CROSSHATCH FILL");
				break;
			case 0x25AA:
				strcpy_s(buf, buf_size, "BLACK SMALL SQUARE");
				break;
			case 0x25AB:
				strcpy_s(buf, buf_size, "WHITE SMALL SQUARE");
				break;
			case 0x25AC:
				strcpy_s(buf, buf_size, "BLACK RECTANGLE");
				break;
			case 0x25AD:
				strcpy_s(buf, buf_size, "WHITE RECTANGLE");
				break;
			case 0x25AE:
				strcpy_s(buf, buf_size, "BLACK VERTICAL RECTANGLE");
				break;
			case 0x25AF:
				strcpy_s(buf, buf_size, "WHITE VERTICAL RECTANGLE");
				break;
			case 0x25B0:
				strcpy_s(buf, buf_size, "BLACK PARALLELOGRAM");
				break;
			case 0x25B1:
				strcpy_s(buf, buf_size, "WHITE PARALLELOGRAM");
				break;
			case 0x25B2:
				strcpy_s(buf, buf_size, "BLACK UP-POINTING TRIANGLE");
				break;
			case 0x25B3:
				strcpy_s(buf, buf_size, "WHITE UP-POINTING TRIANGLE");
				break;
			case 0x25B4:
				strcpy_s(buf, buf_size, "BLACK UP-POINTING SMALL TRIANGLE");
				break;
			case 0x25B5:
				strcpy_s(buf, buf_size, "WHITE UP-POINTING SMALL TRIANGLE");
				break;
			case 0x25B6:
				strcpy_s(buf, buf_size, "BLACK RIGHT-POINTING TRIANGLE");
				break;
			case 0x25B7:
				strcpy_s(buf, buf_size, "WHITE RIGHT-POINTING TRIANGLE");
				break;
			case 0x25B8:
				strcpy_s(buf, buf_size, "BLACK RIGHT-POINTING SMALL TRIANGLE");
				break;
			case 0x25B9:
				strcpy_s(buf, buf_size, "WHITE RIGHT-POINTING SMALL TRIANGLE");
				break;
			case 0x25BA:
				strcpy_s(buf, buf_size, "BLACK RIGHT-POINTING POINTER");
				break;
			case 0x25BB:
				strcpy_s(buf, buf_size, "WHITE RIGHT-POINTING POINTER");
				break;
			case 0x25BC:
				strcpy_s(buf, buf_size, "BLACK DOWN-POINTING TRIANGLE");
				break;
			case 0x25BD:
				strcpy_s(buf, buf_size, "WHITE DOWN-POINTING TRIANGLE");
				break;
			case 0x25BE:
				strcpy_s(buf, buf_size, "BLACK DOWN-POINTING SMALL TRIANGLE");
				break;
			case 0x25BF:
				strcpy_s(buf, buf_size, "WHITE DOWN-POINTING SMALL TRIANGLE");
				break;
			case 0x25C0:
				strcpy_s(buf, buf_size, "BLACK LEFT-POINTING TRIANGLE");
				break;
			case 0x25C1:
				strcpy_s(buf, buf_size, "WHITE LEFT-POINTING TRIANGLE");
				break;
			case 0x25C2:
				strcpy_s(buf, buf_size, "BLACK LEFT-POINTING SMALL TRIANGLE");
				break;
			case 0x25C3:
				strcpy_s(buf, buf_size, "WHITE LEFT-POINTING SMALL TRIANGLE");
				break;
			case 0x25C4:
				strcpy_s(buf, buf_size, "BLACK LEFT-POINTING POINTER");
				break;
			case 0x25C5:
				strcpy_s(buf, buf_size, "WHITE LEFT-POINTING POINTER");
				break;
			case 0x25C6:
				strcpy_s(buf, buf_size, "BLACK DIAMOND");
				break;
			case 0x25C7:
				strcpy_s(buf, buf_size, "WHITE DIAMOND");
				break;
			case 0x25C8:
				strcpy_s(buf, buf_size, "WHITE DIAMOND CONTAINING BLACK SMALL DIAMOND");
				break;
			case 0x25C9:
				strcpy_s(buf, buf_size, "FISHEYE");
				break;
			case 0x25CA:
				strcpy_s(buf, buf_size, "LOZENGE");
				break;
			case 0x25CB:
				strcpy_s(buf, buf_size, "WHITE CIRCLE");
				break;
			case 0x25CC:
				strcpy_s(buf, buf_size, "DOTTED CIRCLE");
				break;
			case 0x25CD:
				strcpy_s(buf, buf_size, "CIRCLE WITH VERTICAL FILL");
				break;
			case 0x25CE:
				strcpy_s(buf, buf_size, "BULLSEYE");
				break;
			case 0x25CF:
				strcpy_s(buf, buf_size, "BLACK CIRCLE");
				break;
			case 0x25D0:
				strcpy_s(buf, buf_size, "CIRCLE WITH LEFT HALF BLACK");
				break;
			case 0x25D1:
				strcpy_s(buf, buf_size, "CIRCLE WITH RIGHT HALF BLACK");
				break;
			case 0x25D2:
				strcpy_s(buf, buf_size, "CIRCLE WITH LOWER HALF BLACK");
				break;
			case 0x25D3:
				strcpy_s(buf, buf_size, "CIRCLE WITH UPPER HALF BLACK");
				break;
			case 0x25D4:
				strcpy_s(buf, buf_size, "CIRCLE WITH UPPER RIGHT QUADRANT BLACK");
				break;
			case 0x25D5:
				strcpy_s(buf, buf_size, "CIRCLE WITH ALL BUT UPPER LEFT QUADRANT BLACK");
				break;
			case 0x25D6:
				strcpy_s(buf, buf_size, "LEFT HALF BLACK CIRCLE");
				break;
			case 0x25D7:
				strcpy_s(buf, buf_size, "RIGHT HALF BLACK CIRCLE");
				break;
			case 0x25D8:
				strcpy_s(buf, buf_size, "INVERSE BULLET");
				break;
			case 0x25D9:
				strcpy_s(buf, buf_size, "INVERSE WHITE CIRCLE");
				break;
			case 0x25DA:
				strcpy_s(buf, buf_size, "UPPER HALF INVERSE WHITE CIRCLE");
				break;
			case 0x25DB:
				strcpy_s(buf, buf_size, "LOWER HALF INVERSE WHITE CIRCLE");
				break;
			case 0x25DC:
				strcpy_s(buf, buf_size, "UPPER LEFT QUADRANT CIRCULAR ARC");
				break;
			case 0x25DD:
				strcpy_s(buf, buf_size, "UPPER RIGHT QUADRANT CIRCULAR ARC");
				break;
			case 0x25DE:
				strcpy_s(buf, buf_size, "LOWER RIGHT QUADRANT CIRCULAR ARC");
				break;
			case 0x25DF:
				strcpy_s(buf, buf_size, "LOWER LEFT QUADRANT CIRCULAR ARC");
				break;
			case 0x25E0:
				strcpy_s(buf, buf_size, "UPPER HALF CIRCLE");
				break;
			case 0x25E1:
				strcpy_s(buf, buf_size, "LOWER HALF CIRCLE");
				break;
			case 0x25E2:
				strcpy_s(buf, buf_size, "BLACK LOWER RIGHT TRIANGLE");
				break;
			case 0x25E3:
				strcpy_s(buf, buf_size, "BLACK LOWER LEFT TRIANGLE");
				break;
			case 0x25E4:
				strcpy_s(buf, buf_size, "BLACK UPPER LEFT TRIANGLE");
				break;
			case 0x25E5:
				strcpy_s(buf, buf_size, "BLACK UPPER RIGHT TRIANGLE");
				break;
			case 0x25E6:
				strcpy_s(buf, buf_size, "WHITE BULLET");
				break;
			case 0x25E7:
				strcpy_s(buf, buf_size, "SQUARE WITH LEFT HALF BLACK");
				break;
			case 0x25E8:
				strcpy_s(buf, buf_size, "SQUARE WITH RIGHT HALF BLACK");
				break;
			case 0x25E9:
				strcpy_s(buf, buf_size, "SQUARE WITH UPPER LEFT DIAGONAL HALF BLACK");
				break;
			case 0x25EA:
				strcpy_s(buf, buf_size, "SQUARE WITH LOWER RIGHT DIAGONAL HALF BLACK");
				break;
			case 0x25EB:
				strcpy_s(buf, buf_size, "WHITE SQUARE WITH VERTICAL BISECTING LINE");
				break;
			case 0x25EC:
				strcpy_s(buf, buf_size, "WHITE UP-POINTING TRIANGLE WITH DOT");
				break;
			case 0x25ED:
				strcpy_s(buf, buf_size, "UP-POINTING TRIANGLE WITH LEFT HALF BLACK");
				break;
			case 0x25EE:
				strcpy_s(buf, buf_size, "UP-POINTING TRIANGLE WITH RIGHT HALF BLACK");
				break;
			case 0x25EF:
				strcpy_s(buf, buf_size, "LARGE CIRCLE");
				break;
			case 0x25F0:
				strcpy_s(buf, buf_size, "WHITE SQUARE WITH UPPER LEFT QUADRANT");
				break;
			case 0x25F1:
				strcpy_s(buf, buf_size, "WHITE SQUARE WITH LOWER LEFT QUADRANT");
				break;
			case 0x25F2:
				strcpy_s(buf, buf_size, "WHITE SQUARE WITH LOWER RIGHT QUADRANT");
				break;
			case 0x25F3:
				strcpy_s(buf, buf_size, "WHITE SQUARE WITH UPPER RIGHT QUADRANT");
				break;
			case 0x25F4:
				strcpy_s(buf, buf_size, "WHITE CIRCLE WITH UPPER LEFT QUADRANT");
				break;
			case 0x25F5:
				strcpy_s(buf, buf_size, "WHITE CIRCLE WITH LOWER LEFT QUADRANT");
				break;
			case 0x25F6:
				strcpy_s(buf, buf_size, "WHITE CIRCLE WITH LOWER RIGHT QUADRANT");
				break;
			case 0x25F7:
				strcpy_s(buf, buf_size, "WHITE CIRCLE WITH UPPER RIGHT QUADRANT");
				break;
			case 0x25F8:
				strcpy_s(buf, buf_size, "UPPER LEFT TRIANGLE");
				break;
			case 0x25F9:
				strcpy_s(buf, buf_size, "UPPER RIGHT TRIANGLE");
				break;
			case 0x25FA:
				strcpy_s(buf, buf_size, "LOWER LEFT TRIANGLE");
				break;
			case 0x25FB:
				strcpy_s(buf, buf_size, "WHITE MEDIUM SQUARE");
				break;
			case 0x25FC:
				strcpy_s(buf, buf_size, "BLACK MEDIUM SQUARE");
				break;
			case 0x25FD:
				strcpy_s(buf, buf_size, "WHITE MEDIUM SMALL SQUARE");
				break;
			case 0x25FE:
				strcpy_s(buf, buf_size, "BLACK MEDIUM SMALL SQUARE");
				break;
			case 0x25FF:
				strcpy_s(buf, buf_size, "LOWER RIGHT TRIANGLE");
				break;
			case 0x2600:
				strcpy_s(buf, buf_size, "BLACK SUN WITH RAYS");
				break;
			case 0x2601:
				strcpy_s(buf, buf_size, "CLOUD");
				break;
			case 0x2602:
				strcpy_s(buf, buf_size, "UMBRELLA");
				break;
			case 0x2603:
				strcpy_s(buf, buf_size, "SNOWMAN");
				break;
			case 0x2604:
				strcpy_s(buf, buf_size, "COMET");
				break;
			case 0x2605:
				strcpy_s(buf, buf_size, "BLACK STAR");
				break;
			case 0x2606:
				strcpy_s(buf, buf_size, "WHITE STAR");
				break;
			case 0x2607:
				strcpy_s(buf, buf_size, "LIGHTNING");
				break;
			case 0x2608:
				strcpy_s(buf, buf_size, "THUNDERSTORM");
				break;
			case 0x2609:
				strcpy_s(buf, buf_size, "SUN");
				break;
			case 0x260A:
				strcpy_s(buf, buf_size, "ASCENDING NODE");
				break;
			case 0x260B:
				strcpy_s(buf, buf_size, "DESCENDING NODE");
				break;
			case 0x260C:
				strcpy_s(buf, buf_size, "CONJUNCTION");
				break;
			case 0x260D:
				strcpy_s(buf, buf_size, "OPPOSITION");
				break;
			case 0x260E:
				strcpy_s(buf, buf_size, "BLACK TELEPHONE");
				break;
			case 0x260F:
				strcpy_s(buf, buf_size, "WHITE TELEPHONE");
				break;
			case 0x2610:
				strcpy_s(buf, buf_size, "BALLOT BOX");
				break;
			case 0x2611:
				strcpy_s(buf, buf_size, "BALLOT BOX WITH CHECK");
				break;
			case 0x2612:
				strcpy_s(buf, buf_size, "BALLOT BOX WITH X");
				break;
			case 0x2613:
				strcpy_s(buf, buf_size, "SALTIRE");
				break;
			case 0x2614:
				strcpy_s(buf, buf_size, "UMBRELLA WITH RAIN DROPS");
				break;
			case 0x2615:
				strcpy_s(buf, buf_size, "HOT BEVERAGE");
				break;
			case 0x2616:
				strcpy_s(buf, buf_size, "WHITE SHOGI PIECE");
				break;
			case 0x2617:
				strcpy_s(buf, buf_size, "BLACK SHOGI PIECE");
				break;
			case 0x2618:
				strcpy_s(buf, buf_size, "SHAMROCK");
				break;
			case 0x2619:
				strcpy_s(buf, buf_size, "REVERSED ROTATED FLORAL HEART BULLET");
				break;
			case 0x261A:
				strcpy_s(buf, buf_size, "BLACK LEFT POINTING INDEX");
				break;
			case 0x261B:
				strcpy_s(buf, buf_size, "BLACK RIGHT POINTING INDEX");
				break;
			case 0x261C:
				strcpy_s(buf, buf_size, "WHITE LEFT POINTING INDEX");
				break;
			case 0x261D:
				strcpy_s(buf, buf_size, "WHITE UP POINTING INDEX");
				break;
			case 0x261E:
				strcpy_s(buf, buf_size, "WHITE RIGHT POINTING INDEX");
				break;
			case 0x261F:
				strcpy_s(buf, buf_size, "WHITE DOWN POINTING INDEX");
				break;
			case 0x2620:
				strcpy_s(buf, buf_size, "SKULL AND CROSSBONES");
				break;
			case 0x2621:
				strcpy_s(buf, buf_size, "CAUTION SIGN");
				break;
			case 0x2622:
				strcpy_s(buf, buf_size, "RADIOACTIVE SIGN");
				break;
			case 0x2623:
				strcpy_s(buf, buf_size, "BIOHAZARD SIGN");
				break;
			case 0x2624:
				strcpy_s(buf, buf_size, "CADUCEUS");
				break;
			case 0x2625:
				strcpy_s(buf, buf_size, "ANKH");
				break;
			case 0x2626:
				strcpy_s(buf, buf_size, "ORTHODOX CROSS");
				break;
			case 0x2627:
				strcpy_s(buf, buf_size, "CHI RHO");
				break;
			case 0x2628:
				strcpy_s(buf, buf_size, "CROSS OF LORRAINE");
				break;
			case 0x2629:
				strcpy_s(buf, buf_size, "CROSS OF JERUSALEM");
				break;
			case 0x262A:
				strcpy_s(buf, buf_size, "STAR AND CRESCENT");
				break;
			case 0x262B:
				strcpy_s(buf, buf_size, "FARSI SYMBOL");
				break;
			case 0x262C:
				strcpy_s(buf, buf_size, "ADI SHAKTI");
				break;
			case 0x262D:
				strcpy_s(buf, buf_size, "HAMMER AND SICKLE");
				break;
			case 0x262E:
				strcpy_s(buf, buf_size, "PEACE SYMBOL");
				break;
			case 0x262F:
				strcpy_s(buf, buf_size, "YIN YANG");
				break;
			case 0x2630:
				strcpy_s(buf, buf_size, "TRIGRAM FOR HEAVEN");
				break;
			case 0x2631:
				strcpy_s(buf, buf_size, "TRIGRAM FOR LAKE");
				break;
			case 0x2632:
				strcpy_s(buf, buf_size, "TRIGRAM FOR FIRE");
				break;
			case 0x2633:
				strcpy_s(buf, buf_size, "TRIGRAM FOR THUNDER");
				break;
			case 0x2634:
				strcpy_s(buf, buf_size, "TRIGRAM FOR WIND");
				break;
			case 0x2635:
				strcpy_s(buf, buf_size, "TRIGRAM FOR WATER");
				break;
			case 0x2636:
				strcpy_s(buf, buf_size, "TRIGRAM FOR MOUNTAIN");
				break;
			case 0x2637:
				strcpy_s(buf, buf_size, "TRIGRAM FOR EARTH");
				break;
			case 0x2638:
				strcpy_s(buf, buf_size, "WHEEL OF DHARMA");
				break;
			case 0x2639:
				strcpy_s(buf, buf_size, "WHITE FROWNING FACE");
				break;
			case 0x263A:
				strcpy_s(buf, buf_size, "WHITE SMILING FACE");
				break;
			case 0x263B:
				strcpy_s(buf, buf_size, "BLACK SMILING FACE");
				break;
			case 0x263C:
				strcpy_s(buf, buf_size, "WHITE SUN WITH RAYS");
				break;
			case 0x263D:
				strcpy_s(buf, buf_size, "FIRST QUARTER MOON");
				break;
			case 0x263E:
				strcpy_s(buf, buf_size, "LAST QUARTER MOON");
				break;
			case 0x263F:
				strcpy_s(buf, buf_size, "MERCURY");
				break;
			case 0x2640:
				strcpy_s(buf, buf_size, "FEMALE SIGN");
				break;
			case 0x2641:
				strcpy_s(buf, buf_size, "EARTH");
				break;
			case 0x2642:
				strcpy_s(buf, buf_size, "MALE SIGN");
				break;
			case 0x2643:
				strcpy_s(buf, buf_size, "JUPITER");
				break;
			case 0x2644:
				strcpy_s(buf, buf_size, "SATURN");
				break;
			case 0x2645:
				strcpy_s(buf, buf_size, "URANUS");
				break;
			case 0x2646:
				strcpy_s(buf, buf_size, "NEPTUNE");
				break;
			case 0x2647:
				strcpy_s(buf, buf_size, "PLUTO");
				break;
			case 0x2648:
				strcpy_s(buf, buf_size, "ARIES");
				break;
			case 0x2649:
				strcpy_s(buf, buf_size, "TAURUS");
				break;
			case 0x264A:
				strcpy_s(buf, buf_size, "GEMINI");
				break;
			case 0x264B:
				strcpy_s(buf, buf_size, "CANCER");
				break;
			case 0x264C:
				strcpy_s(buf, buf_size, "LEO");
				break;
			case 0x264D:
				strcpy_s(buf, buf_size, "VIRGO");
				break;
			case 0x264E:
				strcpy_s(buf, buf_size, "LIBRA");
				break;
			case 0x264F:
				strcpy_s(buf, buf_size, "SCORPIUS");
				break;
			case 0x2650:
				strcpy_s(buf, buf_size, "SAGITTARIUS");
				break;
			case 0x2651:
				strcpy_s(buf, buf_size, "CAPRICORN");
				break;
			case 0x2652:
				strcpy_s(buf, buf_size, "AQUARIUS");
				break;
			case 0x2653:
				strcpy_s(buf, buf_size, "PISCES");
				break;
			case 0x2654:
				strcpy_s(buf, buf_size, "WHITE CHESS KING");
				break;
			case 0x2655:
				strcpy_s(buf, buf_size, "WHITE CHESS QUEEN");
				break;
			case 0x2656:
				strcpy_s(buf, buf_size, "WHITE CHESS ROOK");
				break;
			case 0x2657:
				strcpy_s(buf, buf_size, "WHITE CHESS BISHOP");
				break;
			case 0x2658:
				strcpy_s(buf, buf_size, "WHITE CHESS KNIGHT");
				break;
			case 0x2659:
				strcpy_s(buf, buf_size, "WHITE CHESS PAWN");
				break;
			case 0x265A:
				strcpy_s(buf, buf_size, "BLACK CHESS KING");
				break;
			case 0x265B:
				strcpy_s(buf, buf_size, "BLACK CHESS QUEEN");
				break;
			case 0x265C:
				strcpy_s(buf, buf_size, "BLACK CHESS ROOK");
				break;
			case 0x265D:
				strcpy_s(buf, buf_size, "BLACK CHESS BISHOP");
				break;
			case 0x265E:
				strcpy_s(buf, buf_size, "BLACK CHESS KNIGHT");
				break;
			case 0x265F:
				strcpy_s(buf, buf_size, "BLACK CHESS PAWN");
				break;
			case 0x2660:
				strcpy_s(buf, buf_size, "BLACK SPADE SUIT");
				break;
			case 0x2661:
				strcpy_s(buf, buf_size, "WHITE HEART SUIT");
				break;
			case 0x2662:
				strcpy_s(buf, buf_size, "WHITE DIAMOND SUIT");
				break;
			case 0x2663:
				strcpy_s(buf, buf_size, "BLACK CLUB SUIT");
				break;
			case 0x2664:
				strcpy_s(buf, buf_size, "WHITE SPADE SUIT");
				break;
			case 0x2665:
				strcpy_s(buf, buf_size, "BLACK HEART SUIT");
				break;
			case 0x2666:
				strcpy_s(buf, buf_size, "BLACK DIAMOND SUIT");
				break;
			case 0x2667:
				strcpy_s(buf, buf_size, "WHITE CLUB SUIT");
				break;
			case 0x2668:
				strcpy_s(buf, buf_size, "HOT SPRINGS");
				break;
			case 0x2669:
				strcpy_s(buf, buf_size, "QUARTER NOTE");
				break;
			case 0x266A:
				strcpy_s(buf, buf_size, "EIGHTH NOTE");
				break;
			case 0x266B:
				strcpy_s(buf, buf_size, "BEAMED EIGHTH NOTES");
				break;
			case 0x266C:
				strcpy_s(buf, buf_size, "BEAMED SIXTEENTH NOTES");
				break;
			case 0x266D:
				strcpy_s(buf, buf_size, "MUSIC FLAT SIGN");
				break;
			case 0x266E:
				strcpy_s(buf, buf_size, "MUSIC NATURAL SIGN");
				break;
			case 0x266F:
				strcpy_s(buf, buf_size, "MUSIC SHARP SIGN");
				break;
			case 0x2670:
				strcpy_s(buf, buf_size, "WEST SYRIAC CROSS");
				break;
			case 0x2671:
				strcpy_s(buf, buf_size, "EAST SYRIAC CROSS");
				break;
			case 0x2672:
				strcpy_s(buf, buf_size, "UNIVERSAL RECYCLING SYMBOL");
				break;
			case 0x2673:
				strcpy_s(buf, buf_size, "RECYCLING SYMBOL FOR TYPE-1 PLASTICS");
				break;
			case 0x2674:
				strcpy_s(buf, buf_size, "RECYCLING SYMBOL FOR TYPE-2 PLASTICS");
				break;
			case 0x2675:
				strcpy_s(buf, buf_size, "RECYCLING SYMBOL FOR TYPE-3 PLASTICS");
				break;
			case 0x2676:
				strcpy_s(buf, buf_size, "RECYCLING SYMBOL FOR TYPE-4 PLASTICS");
				break;
			case 0x2677:
				strcpy_s(buf, buf_size, "RECYCLING SYMBOL FOR TYPE-5 PLASTICS");
				break;
			case 0x2678:
				strcpy_s(buf, buf_size, "RECYCLING SYMBOL FOR TYPE-6 PLASTICS");
				break;
			case 0x2679:
				strcpy_s(buf, buf_size, "RECYCLING SYMBOL FOR TYPE-7 PLASTICS");
				break;
			case 0x267A:
				strcpy_s(buf, buf_size, "RECYCLING SYMBOL FOR GENERIC MATERIALS");
				break;
			case 0x267B:
				strcpy_s(buf, buf_size, "BLACK UNIVERSAL RECYCLING SYMBOL");
				break;
			case 0x267C:
				strcpy_s(buf, buf_size, "RECYCLED PAPER SYMBOL");
				break;
			case 0x267D:
				strcpy_s(buf, buf_size, "PARTIALLY-RECYCLED PAPER SYMBOL");
				break;
			case 0x267E:
				strcpy_s(buf, buf_size, "PERMANENT PAPER SIGN");
				break;
			case 0x267F:
				strcpy_s(buf, buf_size, "WHEELCHAIR SYMBOL");
				break;
			case 0x2680:
				strcpy_s(buf, buf_size, "DIE FACE-1");
				break;
			case 0x2681:
				strcpy_s(buf, buf_size, "DIE FACE-2");
				break;
			case 0x2682:
				strcpy_s(buf, buf_size, "DIE FACE-3");
				break;
			case 0x2683:
				strcpy_s(buf, buf_size, "DIE FACE-4");
				break;
			case 0x2684:
				strcpy_s(buf, buf_size, "DIE FACE-5");
				break;
			case 0x2685:
				strcpy_s(buf, buf_size, "DIE FACE-6");
				break;
			case 0x2686:
				strcpy_s(buf, buf_size, "WHITE CIRCLE WITH DOT RIGHT");
				break;
			case 0x2687:
				strcpy_s(buf, buf_size, "WHITE CIRCLE WITH TWO DOTS");
				break;
			case 0x2688:
				strcpy_s(buf, buf_size, "BLACK CIRCLE WITH WHITE DOT RIGHT");
				break;
			case 0x2689:
				strcpy_s(buf, buf_size, "BLACK CIRCLE WITH TWO WHITE DOTS");
				break;
			case 0x268A:
				strcpy_s(buf, buf_size, "MONOGRAM FOR YANG");
				break;
			case 0x268B:
				strcpy_s(buf, buf_size, "MONOGRAM FOR YIN");
				break;
			case 0x268C:
				strcpy_s(buf, buf_size, "DIGRAM FOR GREATER YANG");
				break;
			case 0x268D:
				strcpy_s(buf, buf_size, "DIGRAM FOR LESSER YIN");
				break;
			case 0x268E:
				strcpy_s(buf, buf_size, "DIGRAM FOR LESSER YANG");
				break;
			case 0x268F:
				strcpy_s(buf, buf_size, "DIGRAM FOR GREATER YIN");
				break;
			case 0x2690:
				strcpy_s(buf, buf_size, "WHITE FLAG");
				break;
			case 0x2691:
				strcpy_s(buf, buf_size, "BLACK FLAG");
				break;
			case 0x2692:
				strcpy_s(buf, buf_size, "HAMMER AND PICK");
				break;
			case 0x2693:
				strcpy_s(buf, buf_size, "ANCHOR");
				break;
			case 0x2694:
				strcpy_s(buf, buf_size, "CROSSED SWORDS");
				break;
			case 0x2695:
				strcpy_s(buf, buf_size, "STAFF OF AESCULAPIUS");
				break;
			case 0x2696:
				strcpy_s(buf, buf_size, "SCALES");
				break;
			case 0x2697:
				strcpy_s(buf, buf_size, "ALEMBIC");
				break;
			case 0x2698:
				strcpy_s(buf, buf_size, "FLOWER");
				break;
			case 0x2699:
				strcpy_s(buf, buf_size, "GEAR");
				break;
			case 0x269A:
				strcpy_s(buf, buf_size, "STAFF OF HERMES");
				break;
			case 0x269B:
				strcpy_s(buf, buf_size, "ATOM SYMBOL");
				break;
			case 0x269C:
				strcpy_s(buf, buf_size, "FLEUR-DE-LIS");
				break;
			case 0x269D:
				strcpy_s(buf, buf_size, "OUTLINED WHITE STAR");
				break;
			case 0x269E:
				strcpy_s(buf, buf_size, "THREE LINES CONVERGING RIGHT");
				break;
			case 0x269F:
				strcpy_s(buf, buf_size, "THREE LINES CONVERGING LEFT");
				break;
			case 0x26A0:
				strcpy_s(buf, buf_size, "WARNING SIGN");
				break;
			case 0x26A1:
				strcpy_s(buf, buf_size, "HIGH VOLTAGE SIGN");
				break;
			case 0x26A2:
				strcpy_s(buf, buf_size, "DOUBLED FEMALE SIGN");
				break;
			case 0x26A3:
				strcpy_s(buf, buf_size, "DOUBLED MALE SIGN");
				break;
			case 0x26A4:
				strcpy_s(buf, buf_size, "INTERLOCKED FEMALE AND MALE SIGN");
				break;
			case 0x26A5:
				strcpy_s(buf, buf_size, "MALE AND FEMALE SIGN");
				break;
			case 0x26A6:
				strcpy_s(buf, buf_size, "MALE WITH STROKE SIGN");
				break;
			case 0x26A7:
				strcpy_s(buf, buf_size, "MALE WITH STROKE AND MALE AND FEMALE SIGN");
				break;
			case 0x26A8:
				strcpy_s(buf, buf_size, "VERTICAL MALE WITH STROKE SIGN");
				break;
			case 0x26A9:
				strcpy_s(buf, buf_size, "HORIZONTAL MALE WITH STROKE SIGN");
				break;
			case 0x26AA:
				strcpy_s(buf, buf_size, "MEDIUM WHITE CIRCLE");
				break;
			case 0x26AB:
				strcpy_s(buf, buf_size, "MEDIUM BLACK CIRCLE");
				break;
			case 0x26AC:
				strcpy_s(buf, buf_size, "MEDIUM SMALL WHITE CIRCLE");
				break;
			case 0x26AD:
				strcpy_s(buf, buf_size, "MARRIAGE SYMBOL");
				break;
			case 0x26AE:
				strcpy_s(buf, buf_size, "DIVORCE SYMBOL");
				break;
			case 0x26AF:
				strcpy_s(buf, buf_size, "UNMARRIED PARTNERSHIP SYMBOL");
				break;
			case 0x26B0:
				strcpy_s(buf, buf_size, "COFFIN");
				break;
			case 0x26B1:
				strcpy_s(buf, buf_size, "FUNERAL URN");
				break;
			case 0x26B2:
				strcpy_s(buf, buf_size, "NEUTER");
				break;
			case 0x26B3:
				strcpy_s(buf, buf_size, "CERES");
				break;
			case 0x26B4:
				strcpy_s(buf, buf_size, "PALLAS");
				break;
			case 0x26B5:
				strcpy_s(buf, buf_size, "JUNO");
				break;
			case 0x26B6:
				strcpy_s(buf, buf_size, "VESTA");
				break;
			case 0x26B7:
				strcpy_s(buf, buf_size, "CHIRON");
				break;
			case 0x26B8:
				strcpy_s(buf, buf_size, "BLACK MOON LILITH");
				break;
			case 0x26B9:
				strcpy_s(buf, buf_size, "SEXTILE");
				break;
			case 0x26BA:
				strcpy_s(buf, buf_size, "SEMISEXTILE");
				break;
			case 0x26BB:
				strcpy_s(buf, buf_size, "QUINCUNX");
				break;
			case 0x26BC:
				strcpy_s(buf, buf_size, "SESQUIQUADRATE");
				break;
			case 0x26BD:
				strcpy_s(buf, buf_size, "SOCCER BALL");
				break;
			case 0x26BE:
				strcpy_s(buf, buf_size, "BASEBALL");
				break;
			case 0x26BF:
				strcpy_s(buf, buf_size, "SQUARED KEY");
				break;
			case 0x26C0:
				strcpy_s(buf, buf_size, "WHITE DRAUGHTS MAN");
				break;
			case 0x26C1:
				strcpy_s(buf, buf_size, "WHITE DRAUGHTS KING");
				break;
			case 0x26C2:
				strcpy_s(buf, buf_size, "BLACK DRAUGHTS MAN");
				break;
			case 0x26C3:
				strcpy_s(buf, buf_size, "BLACK DRAUGHTS KING");
				break;
			case 0x26C4:
				strcpy_s(buf, buf_size, "SNOWMAN WITHOUT SNOW");
				break;
			case 0x26C5:
				strcpy_s(buf, buf_size, "SUN BEHIND CLOUD");
				break;
			case 0x26C6:
				strcpy_s(buf, buf_size, "RAIN");
				break;
			case 0x26C7:
				strcpy_s(buf, buf_size, "BLACK SNOWMAN");
				break;
			case 0x26C8:
				strcpy_s(buf, buf_size, "THUNDER CLOUD AND RAIN");
				break;
			case 0x26C9:
				strcpy_s(buf, buf_size, "TURNED WHITE SHOGI PIECE");
				break;
			case 0x26CA:
				strcpy_s(buf, buf_size, "TURNED BLACK SHOGI PIECE");
				break;
			case 0x26CB:
				strcpy_s(buf, buf_size, "WHITE DIAMOND IN SQUARE");
				break;
			case 0x26CC:
				strcpy_s(buf, buf_size, "CROSSING LANES");
				break;
			case 0x26CD:
				strcpy_s(buf, buf_size, "DISABLED CAR");
				break;
			case 0x26CE:
				strcpy_s(buf, buf_size, "OPHIUCHUS");
				break;
			case 0x26CF:
				strcpy_s(buf, buf_size, "PICK");
				break;
			case 0x26D0:
				strcpy_s(buf, buf_size, "CAR SLIDING");
				break;
			case 0x26D1:
				strcpy_s(buf, buf_size, "HELMET WITH WHITE CROSS");
				break;
			case 0x26D2:
				strcpy_s(buf, buf_size, "CIRCLED CROSSING LANES");
				break;
			case 0x26D3:
				strcpy_s(buf, buf_size, "CHAINS");
				break;
			case 0x26D4:
				strcpy_s(buf, buf_size, "NO ENTRY");
				break;
			case 0x26D5:
				strcpy_s(buf, buf_size, "ALTERNATE ONE-WAY LEFT WAY TRAFFIC");
				break;
			case 0x26D6:
				strcpy_s(buf, buf_size, "BLACK TWO-WAY LEFT WAY TRAFFIC");
				break;
			case 0x26D7:
				strcpy_s(buf, buf_size, "WHITE TWO-WAY LEFT WAY TRAFFIC");
				break;
			case 0x26D8:
				strcpy_s(buf, buf_size, "BLACK LEFT LANE MERGE");
				break;
			case 0x26D9:
				strcpy_s(buf, buf_size, "WHITE LEFT LANE MERGE");
				break;
			case 0x26DA:
				strcpy_s(buf, buf_size, "DRIVE SLOW SIGN");
				break;
			case 0x26DB:
				strcpy_s(buf, buf_size, "HEAVY WHITE DOWN-POINTING TRIANGLE");
				break;
			case 0x26DC:
				strcpy_s(buf, buf_size, "LEFT CLOSED ENTRY");
				break;
			case 0x26DD:
				strcpy_s(buf, buf_size, "SQUARED SALTIRE");
				break;
			case 0x26DE:
				strcpy_s(buf, buf_size, "FALLING DIAGONAL IN WHITE CIRCLE IN BLACK SQUARE");
				break;
			case 0x26DF:
				strcpy_s(buf, buf_size, "BLACK TRUCK");
				break;
			case 0x26E0:
				strcpy_s(buf, buf_size, "RESTRICTED LEFT ENTRY-1");
				break;
			case 0x26E1:
				strcpy_s(buf, buf_size, "RESTRICTED LEFT ENTRY-2");
				break;
			case 0x26E2:
				strcpy_s(buf, buf_size, "ASTRONOMICAL SYMBOL FOR URANUS");
				break;
			case 0x26E3:
				strcpy_s(buf, buf_size, "HEAVY CIRCLE WITH STROKE AND TWO DOTS ABOVE");
				break;
			case 0x26E4:
				strcpy_s(buf, buf_size, "PENTAGRAM");
				break;
			case 0x26E5:
				strcpy_s(buf, buf_size, "RIGHT-HANDED INTERLACED PENTAGRAM");
				break;
			case 0x26E6:
				strcpy_s(buf, buf_size, "LEFT-HANDED INTERLACED PENTAGRAM");
				break;
			case 0x26E7:
				strcpy_s(buf, buf_size, "INVERTED PENTAGRAM");
				break;
			case 0x26E8:
				strcpy_s(buf, buf_size, "BLACK CROSS ON SHIELD");
				break;
			case 0x26E9:
				strcpy_s(buf, buf_size, "SHINTO SHRINE");
				break;
			case 0x26EA:
				strcpy_s(buf, buf_size, "CHURCH");
				break;
			case 0x26EB:
				strcpy_s(buf, buf_size, "CASTLE");
				break;
			case 0x26EC:
				strcpy_s(buf, buf_size, "HISTORIC SITE");
				break;
			case 0x26ED:
				strcpy_s(buf, buf_size, "GEAR WITHOUT HUB");
				break;
			case 0x26EE:
				strcpy_s(buf, buf_size, "GEAR WITH HANDLES");
				break;
			case 0x26EF:
				strcpy_s(buf, buf_size, "MAP SYMBOL FOR LIGHTHOUSE");
				break;
			case 0x26F0:
				strcpy_s(buf, buf_size, "MOUNTAIN");
				break;
			case 0x26F1:
				strcpy_s(buf, buf_size, "UMBRELLA ON GROUND");
				break;
			case 0x26F2:
				strcpy_s(buf, buf_size, "FOUNTAIN");
				break;
			case 0x26F3:
				strcpy_s(buf, buf_size, "FLAG IN HOLE");
				break;
			case 0x26F4:
				strcpy_s(buf, buf_size, "FERRY");
				break;
			case 0x26F5:
				strcpy_s(buf, buf_size, "SAILBOAT");
				break;
			case 0x26F6:
				strcpy_s(buf, buf_size, "SQUARE FOUR CORNERS");
				break;
			case 0x26F7:
				strcpy_s(buf, buf_size, "SKIER");
				break;
			case 0x26F8:
				strcpy_s(buf, buf_size, "ICE SKATE");
				break;
			case 0x26F9:
				strcpy_s(buf, buf_size, "PERSON WITH BALL");
				break;
			case 0x26FA:
				strcpy_s(buf, buf_size, "TENT");
				break;
			case 0x26FB:
				strcpy_s(buf, buf_size, "JAPANESE BANK SYMBOL");
				break;
			case 0x26FC:
				strcpy_s(buf, buf_size, "HEADSTONE GRAVEYARD SYMBOL");
				break;
			case 0x26FD:
				strcpy_s(buf, buf_size, "FUEL PUMP");
				break;
			case 0x26FE:
				strcpy_s(buf, buf_size, "CUP ON BLACK SQUARE");
				break;
			case 0x26FF:
				strcpy_s(buf, buf_size, "WHITE FLAG WITH HORIZONTAL MIDDLE BLACK STRIPE");
				break;
			case 0x2700:
				strcpy_s(buf, buf_size, "BLACK SAFETY SCISSORS");
				break;
			case 0x2701:
				strcpy_s(buf, buf_size, "UPPER BLADE SCISSORS");
				break;
			case 0x2702:
				strcpy_s(buf, buf_size, "BLACK SCISSORS");
				break;
			case 0x2703:
				strcpy_s(buf, buf_size, "LOWER BLADE SCISSORS");
				break;
			case 0x2704:
				strcpy_s(buf, buf_size, "WHITE SCISSORS");
				break;
			case 0x2705:
				strcpy_s(buf, buf_size, "WHITE HEAVY CHECK MARK");
				break;
			case 0x2706:
				strcpy_s(buf, buf_size, "TELEPHONE LOCATION SIGN");
				break;
			case 0x2707:
				strcpy_s(buf, buf_size, "TAPE DRIVE");
				break;
			case 0x2708:
				strcpy_s(buf, buf_size, "AIRPLANE");
				break;
			case 0x2709:
				strcpy_s(buf, buf_size, "ENVELOPE");
				break;
			case 0x270A:
				strcpy_s(buf, buf_size, "RAISED FIST");
				break;
			case 0x270B:
				strcpy_s(buf, buf_size, "RAISED HAND");
				break;
			case 0x270C:
				strcpy_s(buf, buf_size, "VICTORY HAND");
				break;
			case 0x270D:
				strcpy_s(buf, buf_size, "WRITING HAND");
				break;
			case 0x270E:
				strcpy_s(buf, buf_size, "LOWER RIGHT PENCIL");
				break;
			case 0x270F:
				strcpy_s(buf, buf_size, "PENCIL");
				break;
			case 0x2710:
				strcpy_s(buf, buf_size, "UPPER RIGHT PENCIL");
				break;
			case 0x2711:
				strcpy_s(buf, buf_size, "WHITE NIB");
				break;
			case 0x2712:
				strcpy_s(buf, buf_size, "BLACK NIB");
				break;
			case 0x2713:
				strcpy_s(buf, buf_size, "CHECK MARK");
				break;
			case 0x2714:
				strcpy_s(buf, buf_size, "HEAVY CHECK MARK");
				break;
			case 0x2715:
				strcpy_s(buf, buf_size, "MULTIPLICATION X");
				break;
			case 0x2716:
				strcpy_s(buf, buf_size, "HEAVY MULTIPLICATION X");
				break;
			case 0x2717:
				strcpy_s(buf, buf_size, "BALLOT X");
				break;
			case 0x2718:
				strcpy_s(buf, buf_size, "HEAVY BALLOT X");
				break;
			case 0x2719:
				strcpy_s(buf, buf_size, "OUTLINED GREEK CROSS");
				break;
			case 0x271A:
				strcpy_s(buf, buf_size, "HEAVY GREEK CROSS");
				break;
			case 0x271B:
				strcpy_s(buf, buf_size, "OPEN CENTRE CROSS");
				break;
			case 0x271C:
				strcpy_s(buf, buf_size, "HEAVY OPEN CENTRE CROSS");
				break;
			case 0x271D:
				strcpy_s(buf, buf_size, "LATIN CROSS");
				break;
			case 0x271E:
				strcpy_s(buf, buf_size, "SHADOWED WHITE LATIN CROSS");
				break;
			case 0x271F:
				strcpy_s(buf, buf_size, "OUTLINED LATIN CROSS");
				break;
			case 0x2720:
				strcpy_s(buf, buf_size, "MALTESE CROSS");
				break;
			case 0x2721:
				strcpy_s(buf, buf_size, "STAR OF DAVID");
				break;
			case 0x2722:
				strcpy_s(buf, buf_size, "FOUR TEARDROP-SPOKED ASTERISK");
				break;
			case 0x2723:
				strcpy_s(buf, buf_size, "FOUR BALLOON-SPOKED ASTERISK");
				break;
			case 0x2724:
				strcpy_s(buf, buf_size, "HEAVY FOUR BALLOON-SPOKED ASTERISK");
				break;
			case 0x2725:
				strcpy_s(buf, buf_size, "FOUR CLUB-SPOKED ASTERISK");
				break;
			case 0x2726:
				strcpy_s(buf, buf_size, "BLACK FOUR POINTED STAR");
				break;
			case 0x2727:
				strcpy_s(buf, buf_size, "WHITE FOUR POINTED STAR");
				break;
			case 0x2728:
				strcpy_s(buf, buf_size, "SPARKLES");
				break;
			case 0x2729:
				strcpy_s(buf, buf_size, "STRESS OUTLINED WHITE STAR");
				break;
			case 0x272A:
				strcpy_s(buf, buf_size, "CIRCLED WHITE STAR");
				break;
			case 0x272B:
				strcpy_s(buf, buf_size, "OPEN CENTRE BLACK STAR");
				break;
			case 0x272C:
				strcpy_s(buf, buf_size, "BLACK CENTRE WHITE STAR");
				break;
			case 0x272D:
				strcpy_s(buf, buf_size, "OUTLINED BLACK STAR");
				break;
			case 0x272E:
				strcpy_s(buf, buf_size, "HEAVY OUTLINED BLACK STAR");
				break;
			case 0x272F:
				strcpy_s(buf, buf_size, "PINWHEEL STAR");
				break;
			case 0x2730:
				strcpy_s(buf, buf_size, "SHADOWED WHITE STAR");
				break;
			case 0x2731:
				strcpy_s(buf, buf_size, "HEAVY ASTERISK");
				break;
			case 0x2732:
				strcpy_s(buf, buf_size, "OPEN CENTRE ASTERISK");
				break;
			case 0x2733:
				strcpy_s(buf, buf_size, "EIGHT SPOKED ASTERISK");
				break;
			case 0x2734:
				strcpy_s(buf, buf_size, "EIGHT POINTED BLACK STAR");
				break;
			case 0x2735:
				strcpy_s(buf, buf_size, "EIGHT POINTED PINWHEEL STAR");
				break;
			case 0x2736:
				strcpy_s(buf, buf_size, "SIX POINTED BLACK STAR");
				break;
			case 0x2737:
				strcpy_s(buf, buf_size, "EIGHT POINTED RECTILINEAR BLACK STAR");
				break;
			case 0x2738:
				strcpy_s(buf, buf_size, "HEAVY EIGHT POINTED RECTILINEAR BLACK STAR");
				break;
			case 0x2739:
				strcpy_s(buf, buf_size, "TWELVE POINTED BLACK STAR");
				break;
			case 0x273A:
				strcpy_s(buf, buf_size, "SIXTEEN POINTED ASTERISK");
				break;
			case 0x273B:
				strcpy_s(buf, buf_size, "TEARDROP-SPOKED ASTERISK");
				break;
			case 0x273C:
				strcpy_s(buf, buf_size, "OPEN CENTRE TEARDROP-SPOKED ASTERISK");
				break;
			case 0x273D:
				strcpy_s(buf, buf_size, "HEAVY TEARDROP-SPOKED ASTERISK");
				break;
			case 0x273E:
				strcpy_s(buf, buf_size, "SIX PETALLED BLACK AND WHITE FLORETTE");
				break;
			case 0x273F:
				strcpy_s(buf, buf_size, "BLACK FLORETTE");
				break;
			case 0x2740:
				strcpy_s(buf, buf_size, "WHITE FLORETTE");
				break;
			case 0x2741:
				strcpy_s(buf, buf_size, "EIGHT PETALLED OUTLINED BLACK FLORETTE");
				break;
			case 0x2742:
				strcpy_s(buf, buf_size, "CIRCLED OPEN CENTRE EIGHT POINTED STAR");
				break;
			case 0x2743:
				strcpy_s(buf, buf_size, "HEAVY TEARDROP-SPOKED PINWHEEL ASTERISK");
				break;
			case 0x2744:
				strcpy_s(buf, buf_size, "SNOWFLAKE");
				break;
			case 0x2745:
				strcpy_s(buf, buf_size, "TIGHT TRIFOLIATE SNOWFLAKE");
				break;
			case 0x2746:
				strcpy_s(buf, buf_size, "HEAVY CHEVRON SNOWFLAKE");
				break;
			case 0x2747:
				strcpy_s(buf, buf_size, "SPARKLE");
				break;
			case 0x2748:
				strcpy_s(buf, buf_size, "HEAVY SPARKLE");
				break;
			case 0x2749:
				strcpy_s(buf, buf_size, "BALLOON-SPOKED ASTERISK");
				break;
			case 0x274A:
				strcpy_s(buf, buf_size, "EIGHT TEARDROP-SPOKED PROPELLER ASTERISK");
				break;
			case 0x274B:
				strcpy_s(buf, buf_size, "HEAVY EIGHT TEARDROP-SPOKED PROPELLER ASTERISK");
				break;
			case 0x274C:
				strcpy_s(buf, buf_size, "CROSS MARK");
				break;
			case 0x274D:
				strcpy_s(buf, buf_size, "SHADOWED WHITE CIRCLE");
				break;
			case 0x274E:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED CROSS MARK");
				break;
			case 0x274F:
				strcpy_s(buf, buf_size, "LOWER RIGHT DROP-SHADOWED WHITE SQUARE");
				break;
			case 0x2750:
				strcpy_s(buf, buf_size, "UPPER RIGHT DROP-SHADOWED WHITE SQUARE");
				break;
			case 0x2751:
				strcpy_s(buf, buf_size, "LOWER RIGHT SHADOWED WHITE SQUARE");
				break;
			case 0x2752:
				strcpy_s(buf, buf_size, "UPPER RIGHT SHADOWED WHITE SQUARE");
				break;
			case 0x2753:
				strcpy_s(buf, buf_size, "BLACK QUESTION MARK ORNAMENT");
				break;
			case 0x2754:
				strcpy_s(buf, buf_size, "WHITE QUESTION MARK ORNAMENT");
				break;
			case 0x2755:
				strcpy_s(buf, buf_size, "WHITE EXCLAMATION MARK ORNAMENT");
				break;
			case 0x2756:
				strcpy_s(buf, buf_size, "BLACK DIAMOND MINUS WHITE X");
				break;
			case 0x2757:
				strcpy_s(buf, buf_size, "HEAVY EXCLAMATION MARK SYMBOL");
				break;
			case 0x2758:
				strcpy_s(buf, buf_size, "LIGHT VERTICAL BAR");
				break;
			case 0x2759:
				strcpy_s(buf, buf_size, "MEDIUM VERTICAL BAR");
				break;
			case 0x275A:
				strcpy_s(buf, buf_size, "HEAVY VERTICAL BAR");
				break;
			case 0x275B:
				strcpy_s(buf, buf_size, "HEAVY SINGLE TURNED COMMA QUOTATION MARK ORNAMENT");
				break;
			case 0x275C:
				strcpy_s(buf, buf_size, "HEAVY SINGLE COMMA QUOTATION MARK ORNAMENT");
				break;
			case 0x275D:
				strcpy_s(buf, buf_size, "HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT");
				break;
			case 0x275E:
				strcpy_s(buf, buf_size, "HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT");
				break;
			case 0x275F:
				strcpy_s(buf, buf_size, "HEAVY LOW SINGLE COMMA QUOTATION MARK ORNAMENT");
				break;
			case 0x2760:
				strcpy_s(buf, buf_size, "HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT");
				break;
			case 0x2761:
				strcpy_s(buf, buf_size, "CURVED STEM PARAGRAPH SIGN ORNAMENT");
				break;
			case 0x2762:
				strcpy_s(buf, buf_size, "HEAVY EXCLAMATION MARK ORNAMENT");
				break;
			case 0x2763:
				strcpy_s(buf, buf_size, "HEAVY HEART EXCLAMATION MARK ORNAMENT");
				break;
			case 0x2764:
				strcpy_s(buf, buf_size, "HEAVY BLACK HEART");
				break;
			case 0x2765:
				strcpy_s(buf, buf_size, "ROTATED HEAVY BLACK HEART BULLET");
				break;
			case 0x2766:
				strcpy_s(buf, buf_size, "FLORAL HEART");
				break;
			case 0x2767:
				strcpy_s(buf, buf_size, "ROTATED FLORAL HEART BULLET");
				break;
			case 0x2768:
				strcpy_s(buf, buf_size, "MEDIUM LEFT PARENTHESIS ORNAMENT");
				break;
			case 0x2769:
				strcpy_s(buf, buf_size, "MEDIUM RIGHT PARENTHESIS ORNAMENT");
				break;
			case 0x276A:
				strcpy_s(buf, buf_size, "MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT");
				break;
			case 0x276B:
				strcpy_s(buf, buf_size, "MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT");
				break;
			case 0x276C:
				strcpy_s(buf, buf_size, "MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT");
				break;
			case 0x276D:
				strcpy_s(buf, buf_size, "MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT");
				break;
			case 0x276E:
				strcpy_s(buf, buf_size, "HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT");
				break;
			case 0x276F:
				strcpy_s(buf, buf_size, "HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT");
				break;
			case 0x2770:
				strcpy_s(buf, buf_size, "HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT");
				break;
			case 0x2771:
				strcpy_s(buf, buf_size, "HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT");
				break;
			case 0x2772:
				strcpy_s(buf, buf_size, "LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT");
				break;
			case 0x2773:
				strcpy_s(buf, buf_size, "LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT");
				break;
			case 0x2774:
				strcpy_s(buf, buf_size, "MEDIUM LEFT CURLY BRACKET ORNAMENT");
				break;
			case 0x2775:
				strcpy_s(buf, buf_size, "MEDIUM RIGHT CURLY BRACKET ORNAMENT");
				break;
			case 0x2776:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED DIGIT ONE");
				break;
			case 0x2777:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED DIGIT TWO");
				break;
			case 0x2778:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED DIGIT THREE");
				break;
			case 0x2779:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED DIGIT FOUR");
				break;
			case 0x277A:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED DIGIT FIVE");
				break;
			case 0x277B:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED DIGIT SIX");
				break;
			case 0x277C:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED DIGIT SEVEN");
				break;
			case 0x277D:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED DIGIT EIGHT");
				break;
			case 0x277E:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED DIGIT NINE");
				break;
			case 0x277F:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED NUMBER TEN");
				break;
			case 0x2780:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF DIGIT ONE");
				break;
			case 0x2781:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF DIGIT TWO");
				break;
			case 0x2782:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF DIGIT THREE");
				break;
			case 0x2783:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF DIGIT FOUR");
				break;
			case 0x2784:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF DIGIT FIVE");
				break;
			case 0x2785:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF DIGIT SIX");
				break;
			case 0x2786:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF DIGIT SEVEN");
				break;
			case 0x2787:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF DIGIT EIGHT");
				break;
			case 0x2788:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF DIGIT NINE");
				break;
			case 0x2789:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF NUMBER TEN");
				break;
			case 0x278A:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ONE");
				break;
			case 0x278B:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT TWO");
				break;
			case 0x278C:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT THREE");
				break;
			case 0x278D:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FOUR");
				break;
			case 0x278E:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT FIVE");
				break;
			case 0x278F:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SIX");
				break;
			case 0x2790:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT SEVEN");
				break;
			case 0x2791:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT EIGHT");
				break;
			case 0x2792:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT NINE");
				break;
			case 0x2793:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF NUMBER TEN");
				break;
			case 0x2794:
				strcpy_s(buf, buf_size, "HEAVY WIDE-HEADED RIGHTWARDS ARROW");
				break;
			case 0x2795:
				strcpy_s(buf, buf_size, "HEAVY PLUS SIGN");
				break;
			case 0x2796:
				strcpy_s(buf, buf_size, "HEAVY MINUS SIGN");
				break;
			case 0x2797:
				strcpy_s(buf, buf_size, "HEAVY DIVISION SIGN");
				break;
			case 0x2798:
				strcpy_s(buf, buf_size, "HEAVY SOUTH EAST ARROW");
				break;
			case 0x2799:
				strcpy_s(buf, buf_size, "HEAVY RIGHTWARDS ARROW");
				break;
			case 0x279A:
				strcpy_s(buf, buf_size, "HEAVY NORTH EAST ARROW");
				break;
			case 0x279B:
				strcpy_s(buf, buf_size, "DRAFTING POINT RIGHTWARDS ARROW");
				break;
			case 0x279C:
				strcpy_s(buf, buf_size, "HEAVY ROUND-TIPPED RIGHTWARDS ARROW");
				break;
			case 0x279D:
				strcpy_s(buf, buf_size, "TRIANGLE-HEADED RIGHTWARDS ARROW");
				break;
			case 0x279E:
				strcpy_s(buf, buf_size, "HEAVY TRIANGLE-HEADED RIGHTWARDS ARROW");
				break;
			case 0x279F:
				strcpy_s(buf, buf_size, "DASHED TRIANGLE-HEADED RIGHTWARDS ARROW");
				break;
			case 0x27A0:
				strcpy_s(buf, buf_size, "HEAVY DASHED TRIANGLE-HEADED RIGHTWARDS ARROW");
				break;
			case 0x27A1:
				strcpy_s(buf, buf_size, "BLACK RIGHTWARDS ARROW");
				break;
			case 0x27A2:
				strcpy_s(buf, buf_size, "THREE-D TOP-LIGHTED RIGHTWARDS ARROWHEAD");
				break;
			case 0x27A3:
				strcpy_s(buf, buf_size, "THREE-D BOTTOM-LIGHTED RIGHTWARDS ARROWHEAD");
				break;
			case 0x27A4:
				strcpy_s(buf, buf_size, "BLACK RIGHTWARDS ARROWHEAD");
				break;
			case 0x27A5:
				strcpy_s(buf, buf_size, "HEAVY BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW");
				break;
			case 0x27A6:
				strcpy_s(buf, buf_size, "HEAVY BLACK CURVED UPWARDS AND RIGHTWARDS ARROW");
				break;
			case 0x27A7:
				strcpy_s(buf, buf_size, "SQUAT BLACK RIGHTWARDS ARROW");
				break;
			case 0x27A8:
				strcpy_s(buf, buf_size, "HEAVY CONCAVE-POINTED BLACK RIGHTWARDS ARROW");
				break;
			case 0x27A9:
				strcpy_s(buf, buf_size, "RIGHT-SHADED WHITE RIGHTWARDS ARROW");
				break;
			case 0x27AA:
				strcpy_s(buf, buf_size, "LEFT-SHADED WHITE RIGHTWARDS ARROW");
				break;
			case 0x27AB:
				strcpy_s(buf, buf_size, "BACK-TILTED SHADOWED WHITE RIGHTWARDS ARROW");
				break;
			case 0x27AC:
				strcpy_s(buf, buf_size, "FRONT-TILTED SHADOWED WHITE RIGHTWARDS ARROW");
				break;
			case 0x27AD:
				strcpy_s(buf, buf_size, "HEAVY LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW");
				break;
			case 0x27AE:
				strcpy_s(buf, buf_size, "HEAVY UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW");
				break;
			case 0x27AF:
				strcpy_s(buf, buf_size, "NOTCHED LOWER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW");
				break;
			case 0x27B0:
				strcpy_s(buf, buf_size, "CURLY LOOP");
				break;
			case 0x27B1:
				strcpy_s(buf, buf_size, "NOTCHED UPPER RIGHT-SHADOWED WHITE RIGHTWARDS ARROW");
				break;
			case 0x27B2:
				strcpy_s(buf, buf_size, "CIRCLED HEAVY WHITE RIGHTWARDS ARROW");
				break;
			case 0x27B3:
				strcpy_s(buf, buf_size, "WHITE-FEATHERED RIGHTWARDS ARROW");
				break;
			case 0x27B4:
				strcpy_s(buf, buf_size, "BLACK-FEATHERED SOUTH EAST ARROW");
				break;
			case 0x27B5:
				strcpy_s(buf, buf_size, "BLACK-FEATHERED RIGHTWARDS ARROW");
				break;
			case 0x27B6:
				strcpy_s(buf, buf_size, "BLACK-FEATHERED NORTH EAST ARROW");
				break;
			case 0x27B7:
				strcpy_s(buf, buf_size, "HEAVY BLACK-FEATHERED SOUTH EAST ARROW");
				break;
			case 0x27B8:
				strcpy_s(buf, buf_size, "HEAVY BLACK-FEATHERED RIGHTWARDS ARROW");
				break;
			case 0x27B9:
				strcpy_s(buf, buf_size, "HEAVY BLACK-FEATHERED NORTH EAST ARROW");
				break;
			case 0x27BA:
				strcpy_s(buf, buf_size, "TEARDROP-BARBED RIGHTWARDS ARROW");
				break;
			case 0x27BB:
				strcpy_s(buf, buf_size, "HEAVY TEARDROP-SHANKED RIGHTWARDS ARROW");
				break;
			case 0x27BC:
				strcpy_s(buf, buf_size, "WEDGE-TAILED RIGHTWARDS ARROW");
				break;
			case 0x27BD:
				strcpy_s(buf, buf_size, "HEAVY WEDGE-TAILED RIGHTWARDS ARROW");
				break;
			case 0x27BE:
				strcpy_s(buf, buf_size, "OPEN-OUTLINED RIGHTWARDS ARROW");
				break;
			case 0x27BF:
				strcpy_s(buf, buf_size, "DOUBLE CURLY LOOP");
				break;
			case 0x27C0:
				strcpy_s(buf, buf_size, "THREE DIMENSIONAL ANGLE");
				break;
			case 0x27C1:
				strcpy_s(buf, buf_size, "WHITE TRIANGLE CONTAINING SMALL WHITE TRIANGLE");
				break;
			case 0x27C2:
				strcpy_s(buf, buf_size, "PERPENDICULAR");
				break;
			case 0x27C3:
				strcpy_s(buf, buf_size, "OPEN SUBSET");
				break;
			case 0x27C4:
				strcpy_s(buf, buf_size, "OPEN SUPERSET");
				break;
			case 0x27C5:
				strcpy_s(buf, buf_size, "LEFT S-SHAPED BAG DELIMITER");
				break;
			case 0x27C6:
				strcpy_s(buf, buf_size, "RIGHT S-SHAPED BAG DELIMITER");
				break;
			case 0x27C7:
				strcpy_s(buf, buf_size, "OR WITH DOT INSIDE");
				break;
			case 0x27C8:
				strcpy_s(buf, buf_size, "REVERSE SOLIDUS PRECEDING SUBSET");
				break;
			case 0x27C9:
				strcpy_s(buf, buf_size, "SUPERSET PRECEDING SOLIDUS");
				break;
			case 0x27CA:
				strcpy_s(buf, buf_size, "VERTICAL BAR WITH HORIZONTAL STROKE");
				break;
			case 0x27CB:
				strcpy_s(buf, buf_size, "MATHEMATICAL RISING DIAGONAL");
				break;
			case 0x27CC:
				strcpy_s(buf, buf_size, "LONG DIVISION");
				break;
			case 0x27CD:
				strcpy_s(buf, buf_size, "MATHEMATICAL FALLING DIAGONAL");
				break;
			case 0x27CE:
				strcpy_s(buf, buf_size, "SQUARED LOGICAL AND");
				break;
			case 0x27CF:
				strcpy_s(buf, buf_size, "SQUARED LOGICAL OR");
				break;
			case 0x27D0:
				strcpy_s(buf, buf_size, "WHITE DIAMOND WITH CENTRED DOT");
				break;
			case 0x27D1:
				strcpy_s(buf, buf_size, "AND WITH DOT");
				break;
			case 0x27D2:
				strcpy_s(buf, buf_size, "ELEMENT OF OPENING UPWARDS");
				break;
			case 0x27D3:
				strcpy_s(buf, buf_size, "LOWER RIGHT CORNER WITH DOT");
				break;
			case 0x27D4:
				strcpy_s(buf, buf_size, "UPPER LEFT CORNER WITH DOT");
				break;
			case 0x27D5:
				strcpy_s(buf, buf_size, "LEFT OUTER JOIN");
				break;
			case 0x27D6:
				strcpy_s(buf, buf_size, "RIGHT OUTER JOIN");
				break;
			case 0x27D7:
				strcpy_s(buf, buf_size, "FULL OUTER JOIN");
				break;
			case 0x27D8:
				strcpy_s(buf, buf_size, "LARGE UP TACK");
				break;
			case 0x27D9:
				strcpy_s(buf, buf_size, "LARGE DOWN TACK");
				break;
			case 0x27DA:
				strcpy_s(buf, buf_size, "LEFT AND RIGHT DOUBLE TURNSTILE");
				break;
			case 0x27DB:
				strcpy_s(buf, buf_size, "LEFT AND RIGHT TACK");
				break;
			case 0x27DC:
				strcpy_s(buf, buf_size, "LEFT MULTIMAP");
				break;
			case 0x27DD:
				strcpy_s(buf, buf_size, "LONG RIGHT TACK");
				break;
			case 0x27DE:
				strcpy_s(buf, buf_size, "LONG LEFT TACK");
				break;
			case 0x27DF:
				strcpy_s(buf, buf_size, "UP TACK WITH CIRCLE ABOVE");
				break;
			case 0x27E0:
				strcpy_s(buf, buf_size, "LOZENGE DIVIDED BY HORIZONTAL RULE");
				break;
			case 0x27E1:
				strcpy_s(buf, buf_size, "WHITE CONCAVE-SIDED DIAMOND");
				break;
			case 0x27E2:
				strcpy_s(buf, buf_size, "WHITE CONCAVE-SIDED DIAMOND WITH LEFTWARDS TICK");
				break;
			case 0x27E3:
				strcpy_s(buf, buf_size, "WHITE CONCAVE-SIDED DIAMOND WITH RIGHTWARDS TICK");
				break;
			case 0x27E4:
				strcpy_s(buf, buf_size, "WHITE SQUARE WITH LEFTWARDS TICK");
				break;
			case 0x27E5:
				strcpy_s(buf, buf_size, "WHITE SQUARE WITH RIGHTWARDS TICK");
				break;
			case 0x27E6:
				strcpy_s(buf, buf_size, "MATHEMATICAL LEFT WHITE SQUARE BRACKET");
				break;
			case 0x27E7:
				strcpy_s(buf, buf_size, "MATHEMATICAL RIGHT WHITE SQUARE BRACKET");
				break;
			case 0x27E8:
				strcpy_s(buf, buf_size, "MATHEMATICAL LEFT ANGLE BRACKET");
				break;
			case 0x27E9:
				strcpy_s(buf, buf_size, "MATHEMATICAL RIGHT ANGLE BRACKET");
				break;
			case 0x27EA:
				strcpy_s(buf, buf_size, "MATHEMATICAL LEFT DOUBLE ANGLE BRACKET");
				break;
			case 0x27EB:
				strcpy_s(buf, buf_size, "MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET");
				break;
			case 0x27EC:
				strcpy_s(buf, buf_size, "MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET");
				break;
			case 0x27ED:
				strcpy_s(buf, buf_size, "MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET");
				break;
			case 0x27EE:
				strcpy_s(buf, buf_size, "MATHEMATICAL LEFT FLATTENED PARENTHESIS");
				break;
			case 0x27EF:
				strcpy_s(buf, buf_size, "MATHEMATICAL RIGHT FLATTENED PARENTHESIS");
				break;
			case 0x27F0:
				strcpy_s(buf, buf_size, "UPWARDS QUADRUPLE ARROW");
				break;
			case 0x27F1:
				strcpy_s(buf, buf_size, "DOWNWARDS QUADRUPLE ARROW");
				break;
			case 0x27F2:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE GAPPED CIRCLE ARROW");
				break;
			case 0x27F3:
				strcpy_s(buf, buf_size, "CLOCKWISE GAPPED CIRCLE ARROW");
				break;
			case 0x27F4:
				strcpy_s(buf, buf_size, "RIGHT ARROW WITH CIRCLED PLUS");
				break;
			case 0x27F5:
				strcpy_s(buf, buf_size, "LONG LEFTWARDS ARROW");
				break;
			case 0x27F6:
				strcpy_s(buf, buf_size, "LONG RIGHTWARDS ARROW");
				break;
			case 0x27F7:
				strcpy_s(buf, buf_size, "LONG LEFT RIGHT ARROW");
				break;
			case 0x27F8:
				strcpy_s(buf, buf_size, "LONG LEFTWARDS DOUBLE ARROW");
				break;
			case 0x27F9:
				strcpy_s(buf, buf_size, "LONG RIGHTWARDS DOUBLE ARROW");
				break;
			case 0x27FA:
				strcpy_s(buf, buf_size, "LONG LEFT RIGHT DOUBLE ARROW");
				break;
			case 0x27FB:
				strcpy_s(buf, buf_size, "LONG LEFTWARDS ARROW FROM BAR");
				break;
			case 0x27FC:
				strcpy_s(buf, buf_size, "LONG RIGHTWARDS ARROW FROM BAR");
				break;
			case 0x27FD:
				strcpy_s(buf, buf_size, "LONG LEFTWARDS DOUBLE ARROW FROM BAR");
				break;
			case 0x27FE:
				strcpy_s(buf, buf_size, "LONG RIGHTWARDS DOUBLE ARROW FROM BAR");
				break;
			case 0x27FF:
				strcpy_s(buf, buf_size, "LONG RIGHTWARDS SQUIGGLE ARROW");
				break;
			case 0x2800:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN BLANK");
				break;
			case 0x2801:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1");
				break;
			case 0x2802:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2");
				break;
			case 0x2803:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12");
				break;
			case 0x2804:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3");
				break;
			case 0x2805:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13");
				break;
			case 0x2806:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23");
				break;
			case 0x2807:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123");
				break;
			case 0x2808:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-4");
				break;
			case 0x2809:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-14");
				break;
			case 0x280A:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-24");
				break;
			case 0x280B:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-124");
				break;
			case 0x280C:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-34");
				break;
			case 0x280D:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-134");
				break;
			case 0x280E:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-234");
				break;
			case 0x280F:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1234");
				break;
			case 0x2810:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-5");
				break;
			case 0x2811:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-15");
				break;
			case 0x2812:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-25");
				break;
			case 0x2813:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-125");
				break;
			case 0x2814:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-35");
				break;
			case 0x2815:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-135");
				break;
			case 0x2816:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-235");
				break;
			case 0x2817:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1235");
				break;
			case 0x2818:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-45");
				break;
			case 0x2819:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-145");
				break;
			case 0x281A:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-245");
				break;
			case 0x281B:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1245");
				break;
			case 0x281C:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-345");
				break;
			case 0x281D:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1345");
				break;
			case 0x281E:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2345");
				break;
			case 0x281F:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12345");
				break;
			case 0x2820:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-6");
				break;
			case 0x2821:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-16");
				break;
			case 0x2822:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-26");
				break;
			case 0x2823:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-126");
				break;
			case 0x2824:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-36");
				break;
			case 0x2825:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-136");
				break;
			case 0x2826:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-236");
				break;
			case 0x2827:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1236");
				break;
			case 0x2828:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-46");
				break;
			case 0x2829:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-146");
				break;
			case 0x282A:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-246");
				break;
			case 0x282B:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1246");
				break;
			case 0x282C:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-346");
				break;
			case 0x282D:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1346");
				break;
			case 0x282E:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2346");
				break;
			case 0x282F:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12346");
				break;
			case 0x2830:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-56");
				break;
			case 0x2831:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-156");
				break;
			case 0x2832:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-256");
				break;
			case 0x2833:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1256");
				break;
			case 0x2834:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-356");
				break;
			case 0x2835:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1356");
				break;
			case 0x2836:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2356");
				break;
			case 0x2837:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12356");
				break;
			case 0x2838:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-456");
				break;
			case 0x2839:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1456");
				break;
			case 0x283A:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2456");
				break;
			case 0x283B:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12456");
				break;
			case 0x283C:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3456");
				break;
			case 0x283D:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13456");
				break;
			case 0x283E:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23456");
				break;
			case 0x283F:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123456");
				break;
			case 0x2840:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-7");
				break;
			case 0x2841:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-17");
				break;
			case 0x2842:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-27");
				break;
			case 0x2843:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-127");
				break;
			case 0x2844:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-37");
				break;
			case 0x2845:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-137");
				break;
			case 0x2846:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-237");
				break;
			case 0x2847:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1237");
				break;
			case 0x2848:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-47");
				break;
			case 0x2849:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-147");
				break;
			case 0x284A:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-247");
				break;
			case 0x284B:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1247");
				break;
			case 0x284C:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-347");
				break;
			case 0x284D:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1347");
				break;
			case 0x284E:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2347");
				break;
			case 0x284F:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12347");
				break;
			case 0x2850:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-57");
				break;
			case 0x2851:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-157");
				break;
			case 0x2852:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-257");
				break;
			case 0x2853:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1257");
				break;
			case 0x2854:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-357");
				break;
			case 0x2855:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1357");
				break;
			case 0x2856:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2357");
				break;
			case 0x2857:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12357");
				break;
			case 0x2858:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-457");
				break;
			case 0x2859:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1457");
				break;
			case 0x285A:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2457");
				break;
			case 0x285B:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12457");
				break;
			case 0x285C:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3457");
				break;
			case 0x285D:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13457");
				break;
			case 0x285E:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23457");
				break;
			case 0x285F:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123457");
				break;
			case 0x2860:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-67");
				break;
			case 0x2861:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-167");
				break;
			case 0x2862:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-267");
				break;
			case 0x2863:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1267");
				break;
			case 0x2864:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-367");
				break;
			case 0x2865:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1367");
				break;
			case 0x2866:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2367");
				break;
			case 0x2867:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12367");
				break;
			case 0x2868:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-467");
				break;
			case 0x2869:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1467");
				break;
			case 0x286A:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2467");
				break;
			case 0x286B:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12467");
				break;
			case 0x286C:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3467");
				break;
			case 0x286D:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13467");
				break;
			case 0x286E:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23467");
				break;
			case 0x286F:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123467");
				break;
			case 0x2870:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-567");
				break;
			case 0x2871:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1567");
				break;
			case 0x2872:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2567");
				break;
			case 0x2873:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12567");
				break;
			case 0x2874:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3567");
				break;
			case 0x2875:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13567");
				break;
			case 0x2876:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23567");
				break;
			case 0x2877:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123567");
				break;
			case 0x2878:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-4567");
				break;
			case 0x2879:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-14567");
				break;
			case 0x287A:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-24567");
				break;
			case 0x287B:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-124567");
				break;
			case 0x287C:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-34567");
				break;
			case 0x287D:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-134567");
				break;
			case 0x287E:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-234567");
				break;
			case 0x287F:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1234567");
				break;
			case 0x2880:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-8");
				break;
			case 0x2881:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-18");
				break;
			case 0x2882:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-28");
				break;
			case 0x2883:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-128");
				break;
			case 0x2884:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-38");
				break;
			case 0x2885:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-138");
				break;
			case 0x2886:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-238");
				break;
			case 0x2887:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1238");
				break;
			case 0x2888:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-48");
				break;
			case 0x2889:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-148");
				break;
			case 0x288A:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-248");
				break;
			case 0x288B:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1248");
				break;
			case 0x288C:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-348");
				break;
			case 0x288D:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1348");
				break;
			case 0x288E:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2348");
				break;
			case 0x288F:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12348");
				break;
			case 0x2890:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-58");
				break;
			case 0x2891:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-158");
				break;
			case 0x2892:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-258");
				break;
			case 0x2893:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1258");
				break;
			case 0x2894:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-358");
				break;
			case 0x2895:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1358");
				break;
			case 0x2896:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2358");
				break;
			case 0x2897:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12358");
				break;
			case 0x2898:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-458");
				break;
			case 0x2899:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1458");
				break;
			case 0x289A:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2458");
				break;
			case 0x289B:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12458");
				break;
			case 0x289C:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3458");
				break;
			case 0x289D:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13458");
				break;
			case 0x289E:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23458");
				break;
			case 0x289F:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123458");
				break;
			case 0x28A0:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-68");
				break;
			case 0x28A1:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-168");
				break;
			case 0x28A2:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-268");
				break;
			case 0x28A3:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1268");
				break;
			case 0x28A4:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-368");
				break;
			case 0x28A5:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1368");
				break;
			case 0x28A6:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2368");
				break;
			case 0x28A7:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12368");
				break;
			case 0x28A8:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-468");
				break;
			case 0x28A9:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1468");
				break;
			case 0x28AA:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2468");
				break;
			case 0x28AB:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12468");
				break;
			case 0x28AC:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3468");
				break;
			case 0x28AD:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13468");
				break;
			case 0x28AE:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23468");
				break;
			case 0x28AF:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123468");
				break;
			case 0x28B0:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-568");
				break;
			case 0x28B1:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1568");
				break;
			case 0x28B2:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2568");
				break;
			case 0x28B3:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12568");
				break;
			case 0x28B4:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3568");
				break;
			case 0x28B5:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13568");
				break;
			case 0x28B6:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23568");
				break;
			case 0x28B7:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123568");
				break;
			case 0x28B8:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-4568");
				break;
			case 0x28B9:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-14568");
				break;
			case 0x28BA:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-24568");
				break;
			case 0x28BB:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-124568");
				break;
			case 0x28BC:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-34568");
				break;
			case 0x28BD:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-134568");
				break;
			case 0x28BE:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-234568");
				break;
			case 0x28BF:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1234568");
				break;
			case 0x28C0:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-78");
				break;
			case 0x28C1:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-178");
				break;
			case 0x28C2:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-278");
				break;
			case 0x28C3:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1278");
				break;
			case 0x28C4:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-378");
				break;
			case 0x28C5:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1378");
				break;
			case 0x28C6:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2378");
				break;
			case 0x28C7:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12378");
				break;
			case 0x28C8:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-478");
				break;
			case 0x28C9:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1478");
				break;
			case 0x28CA:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2478");
				break;
			case 0x28CB:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12478");
				break;
			case 0x28CC:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3478");
				break;
			case 0x28CD:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13478");
				break;
			case 0x28CE:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23478");
				break;
			case 0x28CF:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123478");
				break;
			case 0x28D0:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-578");
				break;
			case 0x28D1:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1578");
				break;
			case 0x28D2:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2578");
				break;
			case 0x28D3:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12578");
				break;
			case 0x28D4:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3578");
				break;
			case 0x28D5:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13578");
				break;
			case 0x28D6:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23578");
				break;
			case 0x28D7:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123578");
				break;
			case 0x28D8:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-4578");
				break;
			case 0x28D9:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-14578");
				break;
			case 0x28DA:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-24578");
				break;
			case 0x28DB:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-124578");
				break;
			case 0x28DC:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-34578");
				break;
			case 0x28DD:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-134578");
				break;
			case 0x28DE:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-234578");
				break;
			case 0x28DF:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1234578");
				break;
			case 0x28E0:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-678");
				break;
			case 0x28E1:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1678");
				break;
			case 0x28E2:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2678");
				break;
			case 0x28E3:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12678");
				break;
			case 0x28E4:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-3678");
				break;
			case 0x28E5:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-13678");
				break;
			case 0x28E6:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-23678");
				break;
			case 0x28E7:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-123678");
				break;
			case 0x28E8:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-4678");
				break;
			case 0x28E9:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-14678");
				break;
			case 0x28EA:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-24678");
				break;
			case 0x28EB:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-124678");
				break;
			case 0x28EC:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-34678");
				break;
			case 0x28ED:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-134678");
				break;
			case 0x28EE:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-234678");
				break;
			case 0x28EF:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1234678");
				break;
			case 0x28F0:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-5678");
				break;
			case 0x28F1:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-15678");
				break;
			case 0x28F2:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-25678");
				break;
			case 0x28F3:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-125678");
				break;
			case 0x28F4:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-35678");
				break;
			case 0x28F5:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-135678");
				break;
			case 0x28F6:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-235678");
				break;
			case 0x28F7:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1235678");
				break;
			case 0x28F8:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-45678");
				break;
			case 0x28F9:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-145678");
				break;
			case 0x28FA:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-245678");
				break;
			case 0x28FB:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1245678");
				break;
			case 0x28FC:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-345678");
				break;
			case 0x28FD:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-1345678");
				break;
			case 0x28FE:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-2345678");
				break;
			case 0x28FF:
				strcpy_s(buf, buf_size, "BRAILLE PATTERN DOTS-12345678");
				break;
			case 0x2900:
				strcpy_s(buf, buf_size, "RIGHTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE");
				break;
			case 0x2901:
				strcpy_s(buf, buf_size, "RIGHTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE");
				break;
			case 0x2902:
				strcpy_s(buf, buf_size, "LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE");
				break;
			case 0x2903:
				strcpy_s(buf, buf_size, "RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE");
				break;
			case 0x2904:
				strcpy_s(buf, buf_size, "LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE");
				break;
			case 0x2905:
				strcpy_s(buf, buf_size, "RIGHTWARDS TWO-HEADED ARROW FROM BAR");
				break;
			case 0x2906:
				strcpy_s(buf, buf_size, "LEFTWARDS DOUBLE ARROW FROM BAR");
				break;
			case 0x2907:
				strcpy_s(buf, buf_size, "RIGHTWARDS DOUBLE ARROW FROM BAR");
				break;
			case 0x2908:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH HORIZONTAL STROKE");
				break;
			case 0x2909:
				strcpy_s(buf, buf_size, "UPWARDS ARROW WITH HORIZONTAL STROKE");
				break;
			case 0x290A:
				strcpy_s(buf, buf_size, "UPWARDS TRIPLE ARROW");
				break;
			case 0x290B:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIPLE ARROW");
				break;
			case 0x290C:
				strcpy_s(buf, buf_size, "LEFTWARDS DOUBLE DASH ARROW");
				break;
			case 0x290D:
				strcpy_s(buf, buf_size, "RIGHTWARDS DOUBLE DASH ARROW");
				break;
			case 0x290E:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIPLE DASH ARROW");
				break;
			case 0x290F:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIPLE DASH ARROW");
				break;
			case 0x2910:
				strcpy_s(buf, buf_size, "RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW");
				break;
			case 0x2911:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH DOTTED STEM");
				break;
			case 0x2912:
				strcpy_s(buf, buf_size, "UPWARDS ARROW TO BAR");
				break;
			case 0x2913:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW TO BAR");
				break;
			case 0x2914:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH TAIL WITH VERTICAL STROKE");
				break;
			case 0x2915:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE");
				break;
			case 0x2916:
				strcpy_s(buf, buf_size, "RIGHTWARDS TWO-HEADED ARROW WITH TAIL");
				break;
			case 0x2917:
				strcpy_s(buf, buf_size, "RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE");
				break;
			case 0x2918:
				strcpy_s(buf, buf_size, "RIGHTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE");
				break;
			case 0x2919:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW-TAIL");
				break;
			case 0x291A:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW-TAIL");
				break;
			case 0x291B:
				strcpy_s(buf, buf_size, "LEFTWARDS DOUBLE ARROW-TAIL");
				break;
			case 0x291C:
				strcpy_s(buf, buf_size, "RIGHTWARDS DOUBLE ARROW-TAIL");
				break;
			case 0x291D:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW TO BLACK DIAMOND");
				break;
			case 0x291E:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW TO BLACK DIAMOND");
				break;
			case 0x291F:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND");
				break;
			case 0x2920:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND");
				break;
			case 0x2921:
				strcpy_s(buf, buf_size, "NORTH WEST AND SOUTH EAST ARROW");
				break;
			case 0x2922:
				strcpy_s(buf, buf_size, "NORTH EAST AND SOUTH WEST ARROW");
				break;
			case 0x2923:
				strcpy_s(buf, buf_size, "NORTH WEST ARROW WITH HOOK");
				break;
			case 0x2924:
				strcpy_s(buf, buf_size, "NORTH EAST ARROW WITH HOOK");
				break;
			case 0x2925:
				strcpy_s(buf, buf_size, "SOUTH EAST ARROW WITH HOOK");
				break;
			case 0x2926:
				strcpy_s(buf, buf_size, "SOUTH WEST ARROW WITH HOOK");
				break;
			case 0x2927:
				strcpy_s(buf, buf_size, "NORTH WEST ARROW AND NORTH EAST ARROW");
				break;
			case 0x2928:
				strcpy_s(buf, buf_size, "NORTH EAST ARROW AND SOUTH EAST ARROW");
				break;
			case 0x2929:
				strcpy_s(buf, buf_size, "SOUTH EAST ARROW AND SOUTH WEST ARROW");
				break;
			case 0x292A:
				strcpy_s(buf, buf_size, "SOUTH WEST ARROW AND NORTH WEST ARROW");
				break;
			case 0x292B:
				strcpy_s(buf, buf_size, "RISING DIAGONAL CROSSING FALLING DIAGONAL");
				break;
			case 0x292C:
				strcpy_s(buf, buf_size, "FALLING DIAGONAL CROSSING RISING DIAGONAL");
				break;
			case 0x292D:
				strcpy_s(buf, buf_size, "SOUTH EAST ARROW CROSSING NORTH EAST ARROW");
				break;
			case 0x292E:
				strcpy_s(buf, buf_size, "NORTH EAST ARROW CROSSING SOUTH EAST ARROW");
				break;
			case 0x292F:
				strcpy_s(buf, buf_size, "FALLING DIAGONAL CROSSING NORTH EAST ARROW");
				break;
			case 0x2930:
				strcpy_s(buf, buf_size, "RISING DIAGONAL CROSSING SOUTH EAST ARROW");
				break;
			case 0x2931:
				strcpy_s(buf, buf_size, "NORTH EAST ARROW CROSSING NORTH WEST ARROW");
				break;
			case 0x2932:
				strcpy_s(buf, buf_size, "NORTH WEST ARROW CROSSING NORTH EAST ARROW");
				break;
			case 0x2933:
				strcpy_s(buf, buf_size, "WAVE ARROW POINTING DIRECTLY RIGHT");
				break;
			case 0x2934:
				strcpy_s(buf, buf_size, "ARROW POINTING RIGHTWARDS THEN CURVING UPWARDS");
				break;
			case 0x2935:
				strcpy_s(buf, buf_size, "ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS");
				break;
			case 0x2936:
				strcpy_s(buf, buf_size, "ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS");
				break;
			case 0x2937:
				strcpy_s(buf, buf_size, "ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS");
				break;
			case 0x2938:
				strcpy_s(buf, buf_size, "RIGHT-SIDE ARC CLOCKWISE ARROW");
				break;
			case 0x2939:
				strcpy_s(buf, buf_size, "LEFT-SIDE ARC ANTICLOCKWISE ARROW");
				break;
			case 0x293A:
				strcpy_s(buf, buf_size, "TOP ARC ANTICLOCKWISE ARROW");
				break;
			case 0x293B:
				strcpy_s(buf, buf_size, "BOTTOM ARC ANTICLOCKWISE ARROW");
				break;
			case 0x293C:
				strcpy_s(buf, buf_size, "TOP ARC CLOCKWISE ARROW WITH MINUS");
				break;
			case 0x293D:
				strcpy_s(buf, buf_size, "TOP ARC ANTICLOCKWISE ARROW WITH PLUS");
				break;
			case 0x293E:
				strcpy_s(buf, buf_size, "LOWER RIGHT SEMICIRCULAR CLOCKWISE ARROW");
				break;
			case 0x293F:
				strcpy_s(buf, buf_size, "LOWER LEFT SEMICIRCULAR ANTICLOCKWISE ARROW");
				break;
			case 0x2940:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE CLOSED CIRCLE ARROW");
				break;
			case 0x2941:
				strcpy_s(buf, buf_size, "CLOCKWISE CLOSED CIRCLE ARROW");
				break;
			case 0x2942:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW ABOVE SHORT LEFTWARDS ARROW");
				break;
			case 0x2943:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW ABOVE SHORT RIGHTWARDS ARROW");
				break;
			case 0x2944:
				strcpy_s(buf, buf_size, "SHORT RIGHTWARDS ARROW ABOVE LEFTWARDS ARROW");
				break;
			case 0x2945:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH PLUS BELOW");
				break;
			case 0x2946:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH PLUS BELOW");
				break;
			case 0x2947:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW THROUGH X");
				break;
			case 0x2948:
				strcpy_s(buf, buf_size, "LEFT RIGHT ARROW THROUGH SMALL CIRCLE");
				break;
			case 0x2949:
				strcpy_s(buf, buf_size, "UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE");
				break;
			case 0x294A:
				strcpy_s(buf, buf_size, "LEFT BARB UP RIGHT BARB DOWN HARPOON");
				break;
			case 0x294B:
				strcpy_s(buf, buf_size, "LEFT BARB DOWN RIGHT BARB UP HARPOON");
				break;
			case 0x294C:
				strcpy_s(buf, buf_size, "UP BARB RIGHT DOWN BARB LEFT HARPOON");
				break;
			case 0x294D:
				strcpy_s(buf, buf_size, "UP BARB LEFT DOWN BARB RIGHT HARPOON");
				break;
			case 0x294E:
				strcpy_s(buf, buf_size, "LEFT BARB UP RIGHT BARB UP HARPOON");
				break;
			case 0x294F:
				strcpy_s(buf, buf_size, "UP BARB RIGHT DOWN BARB RIGHT HARPOON");
				break;
			case 0x2950:
				strcpy_s(buf, buf_size, "LEFT BARB DOWN RIGHT BARB DOWN HARPOON");
				break;
			case 0x2951:
				strcpy_s(buf, buf_size, "UP BARB LEFT DOWN BARB LEFT HARPOON");
				break;
			case 0x2952:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB UP TO BAR");
				break;
			case 0x2953:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB UP TO BAR");
				break;
			case 0x2954:
				strcpy_s(buf, buf_size, "UPWARDS HARPOON WITH BARB RIGHT TO BAR");
				break;
			case 0x2955:
				strcpy_s(buf, buf_size, "DOWNWARDS HARPOON WITH BARB RIGHT TO BAR");
				break;
			case 0x2956:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB DOWN TO BAR");
				break;
			case 0x2957:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB DOWN TO BAR");
				break;
			case 0x2958:
				strcpy_s(buf, buf_size, "UPWARDS HARPOON WITH BARB LEFT TO BAR");
				break;
			case 0x2959:
				strcpy_s(buf, buf_size, "DOWNWARDS HARPOON WITH BARB LEFT TO BAR");
				break;
			case 0x295A:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB UP FROM BAR");
				break;
			case 0x295B:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB UP FROM BAR");
				break;
			case 0x295C:
				strcpy_s(buf, buf_size, "UPWARDS HARPOON WITH BARB RIGHT FROM BAR");
				break;
			case 0x295D:
				strcpy_s(buf, buf_size, "DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR");
				break;
			case 0x295E:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB DOWN FROM BAR");
				break;
			case 0x295F:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR");
				break;
			case 0x2960:
				strcpy_s(buf, buf_size, "UPWARDS HARPOON WITH BARB LEFT FROM BAR");
				break;
			case 0x2961:
				strcpy_s(buf, buf_size, "DOWNWARDS HARPOON WITH BARB LEFT FROM BAR");
				break;
			case 0x2962:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN");
				break;
			case 0x2963:
				strcpy_s(buf, buf_size, "UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT");
				break;
			case 0x2964:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN");
				break;
			case 0x2965:
				strcpy_s(buf, buf_size, "DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT");
				break;
			case 0x2966:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP");
				break;
			case 0x2967:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN");
				break;
			case 0x2968:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP");
				break;
			case 0x2969:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN");
				break;
			case 0x296A:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH");
				break;
			case 0x296B:
				strcpy_s(buf, buf_size, "LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH");
				break;
			case 0x296C:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH");
				break;
			case 0x296D:
				strcpy_s(buf, buf_size, "RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH");
				break;
			case 0x296E:
				strcpy_s(buf, buf_size, "UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT");
				break;
			case 0x296F:
				strcpy_s(buf, buf_size, "DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT");
				break;
			case 0x2970:
				strcpy_s(buf, buf_size, "RIGHT DOUBLE ARROW WITH ROUNDED HEAD");
				break;
			case 0x2971:
				strcpy_s(buf, buf_size, "EQUALS SIGN ABOVE RIGHTWARDS ARROW");
				break;
			case 0x2972:
				strcpy_s(buf, buf_size, "TILDE OPERATOR ABOVE RIGHTWARDS ARROW");
				break;
			case 0x2973:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW ABOVE TILDE OPERATOR");
				break;
			case 0x2974:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW ABOVE TILDE OPERATOR");
				break;
			case 0x2975:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO");
				break;
			case 0x2976:
				strcpy_s(buf, buf_size, "LESS-THAN ABOVE LEFTWARDS ARROW");
				break;
			case 0x2977:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW THROUGH LESS-THAN");
				break;
			case 0x2978:
				strcpy_s(buf, buf_size, "GREATER-THAN ABOVE RIGHTWARDS ARROW");
				break;
			case 0x2979:
				strcpy_s(buf, buf_size, "SUBSET ABOVE RIGHTWARDS ARROW");
				break;
			case 0x297A:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW THROUGH SUBSET");
				break;
			case 0x297B:
				strcpy_s(buf, buf_size, "SUPERSET ABOVE LEFTWARDS ARROW");
				break;
			case 0x297C:
				strcpy_s(buf, buf_size, "LEFT FISH TAIL");
				break;
			case 0x297D:
				strcpy_s(buf, buf_size, "RIGHT FISH TAIL");
				break;
			case 0x297E:
				strcpy_s(buf, buf_size, "UP FISH TAIL");
				break;
			case 0x297F:
				strcpy_s(buf, buf_size, "DOWN FISH TAIL");
				break;
			case 0x2980:
				strcpy_s(buf, buf_size, "TRIPLE VERTICAL BAR DELIMITER");
				break;
			case 0x2981:
				strcpy_s(buf, buf_size, "Z NOTATION SPOT");
				break;
			case 0x2982:
				strcpy_s(buf, buf_size, "Z NOTATION TYPE COLON");
				break;
			case 0x2983:
				strcpy_s(buf, buf_size, "LEFT WHITE CURLY BRACKET");
				break;
			case 0x2984:
				strcpy_s(buf, buf_size, "RIGHT WHITE CURLY BRACKET");
				break;
			case 0x2985:
				strcpy_s(buf, buf_size, "LEFT WHITE PARENTHESIS");
				break;
			case 0x2986:
				strcpy_s(buf, buf_size, "RIGHT WHITE PARENTHESIS");
				break;
			case 0x2987:
				strcpy_s(buf, buf_size, "Z NOTATION LEFT IMAGE BRACKET");
				break;
			case 0x2988:
				strcpy_s(buf, buf_size, "Z NOTATION RIGHT IMAGE BRACKET");
				break;
			case 0x2989:
				strcpy_s(buf, buf_size, "Z NOTATION LEFT BINDING BRACKET");
				break;
			case 0x298A:
				strcpy_s(buf, buf_size, "Z NOTATION RIGHT BINDING BRACKET");
				break;
			case 0x298B:
				strcpy_s(buf, buf_size, "LEFT SQUARE BRACKET WITH UNDERBAR");
				break;
			case 0x298C:
				strcpy_s(buf, buf_size, "RIGHT SQUARE BRACKET WITH UNDERBAR");
				break;
			case 0x298D:
				strcpy_s(buf, buf_size, "LEFT SQUARE BRACKET WITH TICK IN TOP CORNER");
				break;
			case 0x298E:
				strcpy_s(buf, buf_size, "RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER");
				break;
			case 0x298F:
				strcpy_s(buf, buf_size, "LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER");
				break;
			case 0x2990:
				strcpy_s(buf, buf_size, "RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER");
				break;
			case 0x2991:
				strcpy_s(buf, buf_size, "LEFT ANGLE BRACKET WITH DOT");
				break;
			case 0x2992:
				strcpy_s(buf, buf_size, "RIGHT ANGLE BRACKET WITH DOT");
				break;
			case 0x2993:
				strcpy_s(buf, buf_size, "LEFT ARC LESS-THAN BRACKET");
				break;
			case 0x2994:
				strcpy_s(buf, buf_size, "RIGHT ARC GREATER-THAN BRACKET");
				break;
			case 0x2995:
				strcpy_s(buf, buf_size, "DOUBLE LEFT ARC GREATER-THAN BRACKET");
				break;
			case 0x2996:
				strcpy_s(buf, buf_size, "DOUBLE RIGHT ARC LESS-THAN BRACKET");
				break;
			case 0x2997:
				strcpy_s(buf, buf_size, "LEFT BLACK TORTOISE SHELL BRACKET");
				break;
			case 0x2998:
				strcpy_s(buf, buf_size, "RIGHT BLACK TORTOISE SHELL BRACKET");
				break;
			case 0x2999:
				strcpy_s(buf, buf_size, "DOTTED FENCE");
				break;
			case 0x299A:
				strcpy_s(buf, buf_size, "VERTICAL ZIGZAG LINE");
				break;
			case 0x299B:
				strcpy_s(buf, buf_size, "MEASURED ANGLE OPENING LEFT");
				break;
			case 0x299C:
				strcpy_s(buf, buf_size, "RIGHT ANGLE VARIANT WITH SQUARE");
				break;
			case 0x299D:
				strcpy_s(buf, buf_size, "MEASURED RIGHT ANGLE WITH DOT");
				break;
			case 0x299E:
				strcpy_s(buf, buf_size, "ANGLE WITH S INSIDE");
				break;
			case 0x299F:
				strcpy_s(buf, buf_size, "ACUTE ANGLE");
				break;
			case 0x29A0:
				strcpy_s(buf, buf_size, "SPHERICAL ANGLE OPENING LEFT");
				break;
			case 0x29A1:
				strcpy_s(buf, buf_size, "SPHERICAL ANGLE OPENING UP");
				break;
			case 0x29A2:
				strcpy_s(buf, buf_size, "TURNED ANGLE");
				break;
			case 0x29A3:
				strcpy_s(buf, buf_size, "REVERSED ANGLE");
				break;
			case 0x29A4:
				strcpy_s(buf, buf_size, "ANGLE WITH UNDERBAR");
				break;
			case 0x29A5:
				strcpy_s(buf, buf_size, "REVERSED ANGLE WITH UNDERBAR");
				break;
			case 0x29A6:
				strcpy_s(buf, buf_size, "OBLIQUE ANGLE OPENING UP");
				break;
			case 0x29A7:
				strcpy_s(buf, buf_size, "OBLIQUE ANGLE OPENING DOWN");
				break;
			case 0x29A8:
				strcpy_s(buf, buf_size, "MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT");
				break;
			case 0x29A9:
				strcpy_s(buf, buf_size, "MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT");
				break;
			case 0x29AA:
				strcpy_s(buf, buf_size, "MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT");
				break;
			case 0x29AB:
				strcpy_s(buf, buf_size, "MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT");
				break;
			case 0x29AC:
				strcpy_s(buf, buf_size, "MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP");
				break;
			case 0x29AD:
				strcpy_s(buf, buf_size, "MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP");
				break;
			case 0x29AE:
				strcpy_s(buf, buf_size, "MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN");
				break;
			case 0x29AF:
				strcpy_s(buf, buf_size, "MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN");
				break;
			case 0x29B0:
				strcpy_s(buf, buf_size, "REVERSED EMPTY SET");
				break;
			case 0x29B1:
				strcpy_s(buf, buf_size, "EMPTY SET WITH OVERBAR");
				break;
			case 0x29B2:
				strcpy_s(buf, buf_size, "EMPTY SET WITH SMALL CIRCLE ABOVE");
				break;
			case 0x29B3:
				strcpy_s(buf, buf_size, "EMPTY SET WITH RIGHT ARROW ABOVE");
				break;
			case 0x29B4:
				strcpy_s(buf, buf_size, "EMPTY SET WITH LEFT ARROW ABOVE");
				break;
			case 0x29B5:
				strcpy_s(buf, buf_size, "CIRCLE WITH HORIZONTAL BAR");
				break;
			case 0x29B6:
				strcpy_s(buf, buf_size, "CIRCLED VERTICAL BAR");
				break;
			case 0x29B7:
				strcpy_s(buf, buf_size, "CIRCLED PARALLEL");
				break;
			case 0x29B8:
				strcpy_s(buf, buf_size, "CIRCLED REVERSE SOLIDUS");
				break;
			case 0x29B9:
				strcpy_s(buf, buf_size, "CIRCLED PERPENDICULAR");
				break;
			case 0x29BA:
				strcpy_s(buf, buf_size, "CIRCLE DIVIDED BY HORIZONTAL BAR AND TOP HALF DIVIDED BY VERTICAL BAR");
				break;
			case 0x29BB:
				strcpy_s(buf, buf_size, "CIRCLE WITH SUPERIMPOSED X");
				break;
			case 0x29BC:
				strcpy_s(buf, buf_size, "CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN");
				break;
			case 0x29BD:
				strcpy_s(buf, buf_size, "UP ARROW THROUGH CIRCLE");
				break;
			case 0x29BE:
				strcpy_s(buf, buf_size, "CIRCLED WHITE BULLET");
				break;
			case 0x29BF:
				strcpy_s(buf, buf_size, "CIRCLED BULLET");
				break;
			case 0x29C0:
				strcpy_s(buf, buf_size, "CIRCLED LESS-THAN");
				break;
			case 0x29C1:
				strcpy_s(buf, buf_size, "CIRCLED GREATER-THAN");
				break;
			case 0x29C2:
				strcpy_s(buf, buf_size, "CIRCLE WITH SMALL CIRCLE TO THE RIGHT");
				break;
			case 0x29C3:
				strcpy_s(buf, buf_size, "CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT");
				break;
			case 0x29C4:
				strcpy_s(buf, buf_size, "SQUARED RISING DIAGONAL SLASH");
				break;
			case 0x29C5:
				strcpy_s(buf, buf_size, "SQUARED FALLING DIAGONAL SLASH");
				break;
			case 0x29C6:
				strcpy_s(buf, buf_size, "SQUARED ASTERISK");
				break;
			case 0x29C7:
				strcpy_s(buf, buf_size, "SQUARED SMALL CIRCLE");
				break;
			case 0x29C8:
				strcpy_s(buf, buf_size, "SQUARED SQUARE");
				break;
			case 0x29C9:
				strcpy_s(buf, buf_size, "TWO JOINED SQUARES");
				break;
			case 0x29CA:
				strcpy_s(buf, buf_size, "TRIANGLE WITH DOT ABOVE");
				break;
			case 0x29CB:
				strcpy_s(buf, buf_size, "TRIANGLE WITH UNDERBAR");
				break;
			case 0x29CC:
				strcpy_s(buf, buf_size, "S IN TRIANGLE");
				break;
			case 0x29CD:
				strcpy_s(buf, buf_size, "TRIANGLE WITH SERIFS AT BOTTOM");
				break;
			case 0x29CE:
				strcpy_s(buf, buf_size, "RIGHT TRIANGLE ABOVE LEFT TRIANGLE");
				break;
			case 0x29CF:
				strcpy_s(buf, buf_size, "LEFT TRIANGLE BESIDE VERTICAL BAR");
				break;
			case 0x29D0:
				strcpy_s(buf, buf_size, "VERTICAL BAR BESIDE RIGHT TRIANGLE");
				break;
			case 0x29D1:
				strcpy_s(buf, buf_size, "BOWTIE WITH LEFT HALF BLACK");
				break;
			case 0x29D2:
				strcpy_s(buf, buf_size, "BOWTIE WITH RIGHT HALF BLACK");
				break;
			case 0x29D3:
				strcpy_s(buf, buf_size, "BLACK BOWTIE");
				break;
			case 0x29D4:
				strcpy_s(buf, buf_size, "TIMES WITH LEFT HALF BLACK");
				break;
			case 0x29D5:
				strcpy_s(buf, buf_size, "TIMES WITH RIGHT HALF BLACK");
				break;
			case 0x29D6:
				strcpy_s(buf, buf_size, "WHITE HOURGLASS");
				break;
			case 0x29D7:
				strcpy_s(buf, buf_size, "BLACK HOURGLASS");
				break;
			case 0x29D8:
				strcpy_s(buf, buf_size, "LEFT WIGGLY FENCE");
				break;
			case 0x29D9:
				strcpy_s(buf, buf_size, "RIGHT WIGGLY FENCE");
				break;
			case 0x29DA:
				strcpy_s(buf, buf_size, "LEFT DOUBLE WIGGLY FENCE");
				break;
			case 0x29DB:
				strcpy_s(buf, buf_size, "RIGHT DOUBLE WIGGLY FENCE");
				break;
			case 0x29DC:
				strcpy_s(buf, buf_size, "INCOMPLETE INFINITY");
				break;
			case 0x29DD:
				strcpy_s(buf, buf_size, "TIE OVER INFINITY");
				break;
			case 0x29DE:
				strcpy_s(buf, buf_size, "INFINITY NEGATED WITH VERTICAL BAR");
				break;
			case 0x29DF:
				strcpy_s(buf, buf_size, "DOUBLE-ENDED MULTIMAP");
				break;
			case 0x29E0:
				strcpy_s(buf, buf_size, "SQUARE WITH CONTOURED OUTLINE");
				break;
			case 0x29E1:
				strcpy_s(buf, buf_size, "INCREASES AS");
				break;
			case 0x29E2:
				strcpy_s(buf, buf_size, "SHUFFLE PRODUCT");
				break;
			case 0x29E3:
				strcpy_s(buf, buf_size, "EQUALS SIGN AND SLANTED PARALLEL");
				break;
			case 0x29E4:
				strcpy_s(buf, buf_size, "EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE");
				break;
			case 0x29E5:
				strcpy_s(buf, buf_size, "IDENTICAL TO AND SLANTED PARALLEL");
				break;
			case 0x29E6:
				strcpy_s(buf, buf_size, "GLEICH STARK");
				break;
			case 0x29E7:
				strcpy_s(buf, buf_size, "THERMODYNAMIC");
				break;
			case 0x29E8:
				strcpy_s(buf, buf_size, "DOWN-POINTING TRIANGLE WITH LEFT HALF BLACK");
				break;
			case 0x29E9:
				strcpy_s(buf, buf_size, "DOWN-POINTING TRIANGLE WITH RIGHT HALF BLACK");
				break;
			case 0x29EA:
				strcpy_s(buf, buf_size, "BLACK DIAMOND WITH DOWN ARROW");
				break;
			case 0x29EB:
				strcpy_s(buf, buf_size, "BLACK LOZENGE");
				break;
			case 0x29EC:
				strcpy_s(buf, buf_size, "WHITE CIRCLE WITH DOWN ARROW");
				break;
			case 0x29ED:
				strcpy_s(buf, buf_size, "BLACK CIRCLE WITH DOWN ARROW");
				break;
			case 0x29EE:
				strcpy_s(buf, buf_size, "ERROR-BARRED WHITE SQUARE");
				break;
			case 0x29EF:
				strcpy_s(buf, buf_size, "ERROR-BARRED BLACK SQUARE");
				break;
			case 0x29F0:
				strcpy_s(buf, buf_size, "ERROR-BARRED WHITE DIAMOND");
				break;
			case 0x29F1:
				strcpy_s(buf, buf_size, "ERROR-BARRED BLACK DIAMOND");
				break;
			case 0x29F2:
				strcpy_s(buf, buf_size, "ERROR-BARRED WHITE CIRCLE");
				break;
			case 0x29F3:
				strcpy_s(buf, buf_size, "ERROR-BARRED BLACK CIRCLE");
				break;
			case 0x29F4:
				strcpy_s(buf, buf_size, "RULE-DELAYED");
				break;
			case 0x29F5:
				strcpy_s(buf, buf_size, "REVERSE SOLIDUS OPERATOR");
				break;
			case 0x29F6:
				strcpy_s(buf, buf_size, "SOLIDUS WITH OVERBAR");
				break;
			case 0x29F7:
				strcpy_s(buf, buf_size, "REVERSE SOLIDUS WITH HORIZONTAL STROKE");
				break;
			case 0x29F8:
				strcpy_s(buf, buf_size, "BIG SOLIDUS");
				break;
			case 0x29F9:
				strcpy_s(buf, buf_size, "BIG REVERSE SOLIDUS");
				break;
			case 0x29FA:
				strcpy_s(buf, buf_size, "DOUBLE PLUS");
				break;
			case 0x29FB:
				strcpy_s(buf, buf_size, "TRIPLE PLUS");
				break;
			case 0x29FC:
				strcpy_s(buf, buf_size, "LEFT-POINTING CURVED ANGLE BRACKET");
				break;
			case 0x29FD:
				strcpy_s(buf, buf_size, "RIGHT-POINTING CURVED ANGLE BRACKET");
				break;
			case 0x29FE:
				strcpy_s(buf, buf_size, "TINY");
				break;
			case 0x29FF:
				strcpy_s(buf, buf_size, "MINY");
				break;
			case 0x2A00:
				strcpy_s(buf, buf_size, "N-ARY CIRCLED DOT OPERATOR");
				break;
			case 0x2A01:
				strcpy_s(buf, buf_size, "N-ARY CIRCLED PLUS OPERATOR");
				break;
			case 0x2A02:
				strcpy_s(buf, buf_size, "N-ARY CIRCLED TIMES OPERATOR");
				break;
			case 0x2A03:
				strcpy_s(buf, buf_size, "N-ARY UNION OPERATOR WITH DOT");
				break;
			case 0x2A04:
				strcpy_s(buf, buf_size, "N-ARY UNION OPERATOR WITH PLUS");
				break;
			case 0x2A05:
				strcpy_s(buf, buf_size, "N-ARY SQUARE INTERSECTION OPERATOR");
				break;
			case 0x2A06:
				strcpy_s(buf, buf_size, "N-ARY SQUARE UNION OPERATOR");
				break;
			case 0x2A07:
				strcpy_s(buf, buf_size, "TWO LOGICAL AND OPERATOR");
				break;
			case 0x2A08:
				strcpy_s(buf, buf_size, "TWO LOGICAL OR OPERATOR");
				break;
			case 0x2A09:
				strcpy_s(buf, buf_size, "N-ARY TIMES OPERATOR");
				break;
			case 0x2A0A:
				strcpy_s(buf, buf_size, "MODULO TWO SUM");
				break;
			case 0x2A0B:
				strcpy_s(buf, buf_size, "SUMMATION WITH INTEGRAL");
				break;
			case 0x2A0C:
				strcpy_s(buf, buf_size, "QUADRUPLE INTEGRAL OPERATOR");
				break;
			case 0x2A0D:
				strcpy_s(buf, buf_size, "FINITE PART INTEGRAL");
				break;
			case 0x2A0E:
				strcpy_s(buf, buf_size, "INTEGRAL WITH DOUBLE STROKE");
				break;
			case 0x2A0F:
				strcpy_s(buf, buf_size, "INTEGRAL AVERAGE WITH SLASH");
				break;
			case 0x2A10:
				strcpy_s(buf, buf_size, "CIRCULATION FUNCTION");
				break;
			case 0x2A11:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE INTEGRATION");
				break;
			case 0x2A12:
				strcpy_s(buf, buf_size, "LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE");
				break;
			case 0x2A13:
				strcpy_s(buf, buf_size, "LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE");
				break;
			case 0x2A14:
				strcpy_s(buf, buf_size, "LINE INTEGRATION NOT INCLUDING THE POLE");
				break;
			case 0x2A15:
				strcpy_s(buf, buf_size, "INTEGRAL AROUND A POINT OPERATOR");
				break;
			case 0x2A16:
				strcpy_s(buf, buf_size, "QUATERNION INTEGRAL OPERATOR");
				break;
			case 0x2A17:
				strcpy_s(buf, buf_size, "INTEGRAL WITH LEFTWARDS ARROW WITH HOOK");
				break;
			case 0x2A18:
				strcpy_s(buf, buf_size, "INTEGRAL WITH TIMES SIGN");
				break;
			case 0x2A19:
				strcpy_s(buf, buf_size, "INTEGRAL WITH INTERSECTION");
				break;
			case 0x2A1A:
				strcpy_s(buf, buf_size, "INTEGRAL WITH UNION");
				break;
			case 0x2A1B:
				strcpy_s(buf, buf_size, "INTEGRAL WITH OVERBAR");
				break;
			case 0x2A1C:
				strcpy_s(buf, buf_size, "INTEGRAL WITH UNDERBAR");
				break;
			case 0x2A1D:
				strcpy_s(buf, buf_size, "JOIN");
				break;
			case 0x2A1E:
				strcpy_s(buf, buf_size, "LARGE LEFT TRIANGLE OPERATOR");
				break;
			case 0x2A1F:
				strcpy_s(buf, buf_size, "Z NOTATION SCHEMA COMPOSITION");
				break;
			case 0x2A20:
				strcpy_s(buf, buf_size, "Z NOTATION SCHEMA PIPING");
				break;
			case 0x2A21:
				strcpy_s(buf, buf_size, "Z NOTATION SCHEMA PROJECTION");
				break;
			case 0x2A22:
				strcpy_s(buf, buf_size, "PLUS SIGN WITH SMALL CIRCLE ABOVE");
				break;
			case 0x2A23:
				strcpy_s(buf, buf_size, "PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE");
				break;
			case 0x2A24:
				strcpy_s(buf, buf_size, "PLUS SIGN WITH TILDE ABOVE");
				break;
			case 0x2A25:
				strcpy_s(buf, buf_size, "PLUS SIGN WITH DOT BELOW");
				break;
			case 0x2A26:
				strcpy_s(buf, buf_size, "PLUS SIGN WITH TILDE BELOW");
				break;
			case 0x2A27:
				strcpy_s(buf, buf_size, "PLUS SIGN WITH SUBSCRIPT TWO");
				break;
			case 0x2A28:
				strcpy_s(buf, buf_size, "PLUS SIGN WITH BLACK TRIANGLE");
				break;
			case 0x2A29:
				strcpy_s(buf, buf_size, "MINUS SIGN WITH COMMA ABOVE");
				break;
			case 0x2A2A:
				strcpy_s(buf, buf_size, "MINUS SIGN WITH DOT BELOW");
				break;
			case 0x2A2B:
				strcpy_s(buf, buf_size, "MINUS SIGN WITH FALLING DOTS");
				break;
			case 0x2A2C:
				strcpy_s(buf, buf_size, "MINUS SIGN WITH RISING DOTS");
				break;
			case 0x2A2D:
				strcpy_s(buf, buf_size, "PLUS SIGN IN LEFT HALF CIRCLE");
				break;
			case 0x2A2E:
				strcpy_s(buf, buf_size, "PLUS SIGN IN RIGHT HALF CIRCLE");
				break;
			case 0x2A2F:
				strcpy_s(buf, buf_size, "VECTOR OR CROSS PRODUCT");
				break;
			case 0x2A30:
				strcpy_s(buf, buf_size, "MULTIPLICATION SIGN WITH DOT ABOVE");
				break;
			case 0x2A31:
				strcpy_s(buf, buf_size, "MULTIPLICATION SIGN WITH UNDERBAR");
				break;
			case 0x2A32:
				strcpy_s(buf, buf_size, "SEMIDIRECT PRODUCT WITH BOTTOM CLOSED");
				break;
			case 0x2A33:
				strcpy_s(buf, buf_size, "SMASH PRODUCT");
				break;
			case 0x2A34:
				strcpy_s(buf, buf_size, "MULTIPLICATION SIGN IN LEFT HALF CIRCLE");
				break;
			case 0x2A35:
				strcpy_s(buf, buf_size, "MULTIPLICATION SIGN IN RIGHT HALF CIRCLE");
				break;
			case 0x2A36:
				strcpy_s(buf, buf_size, "CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT");
				break;
			case 0x2A37:
				strcpy_s(buf, buf_size, "MULTIPLICATION SIGN IN DOUBLE CIRCLE");
				break;
			case 0x2A38:
				strcpy_s(buf, buf_size, "CIRCLED DIVISION SIGN");
				break;
			case 0x2A39:
				strcpy_s(buf, buf_size, "PLUS SIGN IN TRIANGLE");
				break;
			case 0x2A3A:
				strcpy_s(buf, buf_size, "MINUS SIGN IN TRIANGLE");
				break;
			case 0x2A3B:
				strcpy_s(buf, buf_size, "MULTIPLICATION SIGN IN TRIANGLE");
				break;
			case 0x2A3C:
				strcpy_s(buf, buf_size, "INTERIOR PRODUCT");
				break;
			case 0x2A3D:
				strcpy_s(buf, buf_size, "RIGHTHAND INTERIOR PRODUCT");
				break;
			case 0x2A3E:
				strcpy_s(buf, buf_size, "Z NOTATION RELATIONAL COMPOSITION");
				break;
			case 0x2A3F:
				strcpy_s(buf, buf_size, "AMALGAMATION OR COPRODUCT");
				break;
			case 0x2A40:
				strcpy_s(buf, buf_size, "INTERSECTION WITH DOT");
				break;
			case 0x2A41:
				strcpy_s(buf, buf_size, "UNION WITH MINUS SIGN");
				break;
			case 0x2A42:
				strcpy_s(buf, buf_size, "UNION WITH OVERBAR");
				break;
			case 0x2A43:
				strcpy_s(buf, buf_size, "INTERSECTION WITH OVERBAR");
				break;
			case 0x2A44:
				strcpy_s(buf, buf_size, "INTERSECTION WITH LOGICAL AND");
				break;
			case 0x2A45:
				strcpy_s(buf, buf_size, "UNION WITH LOGICAL OR");
				break;
			case 0x2A46:
				strcpy_s(buf, buf_size, "UNION ABOVE INTERSECTION");
				break;
			case 0x2A47:
				strcpy_s(buf, buf_size, "INTERSECTION ABOVE UNION");
				break;
			case 0x2A48:
				strcpy_s(buf, buf_size, "UNION ABOVE BAR ABOVE INTERSECTION");
				break;
			case 0x2A49:
				strcpy_s(buf, buf_size, "INTERSECTION ABOVE BAR ABOVE UNION");
				break;
			case 0x2A4A:
				strcpy_s(buf, buf_size, "UNION BESIDE AND JOINED WITH UNION");
				break;
			case 0x2A4B:
				strcpy_s(buf, buf_size, "INTERSECTION BESIDE AND JOINED WITH INTERSECTION");
				break;
			case 0x2A4C:
				strcpy_s(buf, buf_size, "CLOSED UNION WITH SERIFS");
				break;
			case 0x2A4D:
				strcpy_s(buf, buf_size, "CLOSED INTERSECTION WITH SERIFS");
				break;
			case 0x2A4E:
				strcpy_s(buf, buf_size, "DOUBLE SQUARE INTERSECTION");
				break;
			case 0x2A4F:
				strcpy_s(buf, buf_size, "DOUBLE SQUARE UNION");
				break;
			case 0x2A50:
				strcpy_s(buf, buf_size, "CLOSED UNION WITH SERIFS AND SMASH PRODUCT");
				break;
			case 0x2A51:
				strcpy_s(buf, buf_size, "LOGICAL AND WITH DOT ABOVE");
				break;
			case 0x2A52:
				strcpy_s(buf, buf_size, "LOGICAL OR WITH DOT ABOVE");
				break;
			case 0x2A53:
				strcpy_s(buf, buf_size, "DOUBLE LOGICAL AND");
				break;
			case 0x2A54:
				strcpy_s(buf, buf_size, "DOUBLE LOGICAL OR");
				break;
			case 0x2A55:
				strcpy_s(buf, buf_size, "TWO INTERSECTING LOGICAL AND");
				break;
			case 0x2A56:
				strcpy_s(buf, buf_size, "TWO INTERSECTING LOGICAL OR");
				break;
			case 0x2A57:
				strcpy_s(buf, buf_size, "SLOPING LARGE OR");
				break;
			case 0x2A58:
				strcpy_s(buf, buf_size, "SLOPING LARGE AND");
				break;
			case 0x2A59:
				strcpy_s(buf, buf_size, "LOGICAL OR OVERLAPPING LOGICAL AND");
				break;
			case 0x2A5A:
				strcpy_s(buf, buf_size, "LOGICAL AND WITH MIDDLE STEM");
				break;
			case 0x2A5B:
				strcpy_s(buf, buf_size, "LOGICAL OR WITH MIDDLE STEM");
				break;
			case 0x2A5C:
				strcpy_s(buf, buf_size, "LOGICAL AND WITH HORIZONTAL DASH");
				break;
			case 0x2A5D:
				strcpy_s(buf, buf_size, "LOGICAL OR WITH HORIZONTAL DASH");
				break;
			case 0x2A5E:
				strcpy_s(buf, buf_size, "LOGICAL AND WITH DOUBLE OVERBAR");
				break;
			case 0x2A5F:
				strcpy_s(buf, buf_size, "LOGICAL AND WITH UNDERBAR");
				break;
			case 0x2A60:
				strcpy_s(buf, buf_size, "LOGICAL AND WITH DOUBLE UNDERBAR");
				break;
			case 0x2A61:
				strcpy_s(buf, buf_size, "SMALL VEE WITH UNDERBAR");
				break;
			case 0x2A62:
				strcpy_s(buf, buf_size, "LOGICAL OR WITH DOUBLE OVERBAR");
				break;
			case 0x2A63:
				strcpy_s(buf, buf_size, "LOGICAL OR WITH DOUBLE UNDERBAR");
				break;
			case 0x2A64:
				strcpy_s(buf, buf_size, "Z NOTATION DOMAIN ANTIRESTRICTION");
				break;
			case 0x2A65:
				strcpy_s(buf, buf_size, "Z NOTATION RANGE ANTIRESTRICTION");
				break;
			case 0x2A66:
				strcpy_s(buf, buf_size, "EQUALS SIGN WITH DOT BELOW");
				break;
			case 0x2A67:
				strcpy_s(buf, buf_size, "IDENTICAL WITH DOT ABOVE");
				break;
			case 0x2A68:
				strcpy_s(buf, buf_size, "TRIPLE HORIZONTAL BAR WITH DOUBLE VERTICAL STROKE");
				break;
			case 0x2A69:
				strcpy_s(buf, buf_size, "TRIPLE HORIZONTAL BAR WITH TRIPLE VERTICAL STROKE");
				break;
			case 0x2A6A:
				strcpy_s(buf, buf_size, "TILDE OPERATOR WITH DOT ABOVE");
				break;
			case 0x2A6B:
				strcpy_s(buf, buf_size, "TILDE OPERATOR WITH RISING DOTS");
				break;
			case 0x2A6C:
				strcpy_s(buf, buf_size, "SIMILAR MINUS SIMILAR");
				break;
			case 0x2A6D:
				strcpy_s(buf, buf_size, "CONGRUENT WITH DOT ABOVE");
				break;
			case 0x2A6E:
				strcpy_s(buf, buf_size, "EQUALS WITH ASTERISK");
				break;
			case 0x2A6F:
				strcpy_s(buf, buf_size, "ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT");
				break;
			case 0x2A70:
				strcpy_s(buf, buf_size, "APPROXIMATELY EQUAL OR EQUAL TO");
				break;
			case 0x2A71:
				strcpy_s(buf, buf_size, "EQUALS SIGN ABOVE PLUS SIGN");
				break;
			case 0x2A72:
				strcpy_s(buf, buf_size, "PLUS SIGN ABOVE EQUALS SIGN");
				break;
			case 0x2A73:
				strcpy_s(buf, buf_size, "EQUALS SIGN ABOVE TILDE OPERATOR");
				break;
			case 0x2A74:
				strcpy_s(buf, buf_size, "DOUBLE COLON EQUAL");
				break;
			case 0x2A75:
				strcpy_s(buf, buf_size, "TWO CONSECUTIVE EQUALS SIGNS");
				break;
			case 0x2A76:
				strcpy_s(buf, buf_size, "THREE CONSECUTIVE EQUALS SIGNS");
				break;
			case 0x2A77:
				strcpy_s(buf, buf_size, "EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW");
				break;
			case 0x2A78:
				strcpy_s(buf, buf_size, "EQUIVALENT WITH FOUR DOTS ABOVE");
				break;
			case 0x2A79:
				strcpy_s(buf, buf_size, "LESS-THAN WITH CIRCLE INSIDE");
				break;
			case 0x2A7A:
				strcpy_s(buf, buf_size, "GREATER-THAN WITH CIRCLE INSIDE");
				break;
			case 0x2A7B:
				strcpy_s(buf, buf_size, "LESS-THAN WITH QUESTION MARK ABOVE");
				break;
			case 0x2A7C:
				strcpy_s(buf, buf_size, "GREATER-THAN WITH QUESTION MARK ABOVE");
				break;
			case 0x2A7D:
				strcpy_s(buf, buf_size, "LESS-THAN OR SLANTED EQUAL TO");
				break;
			case 0x2A7E:
				strcpy_s(buf, buf_size, "GREATER-THAN OR SLANTED EQUAL TO");
				break;
			case 0x2A7F:
				strcpy_s(buf, buf_size, "LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE");
				break;
			case 0x2A80:
				strcpy_s(buf, buf_size, "GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE");
				break;
			case 0x2A81:
				strcpy_s(buf, buf_size, "LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE");
				break;
			case 0x2A82:
				strcpy_s(buf, buf_size, "GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE");
				break;
			case 0x2A83:
				strcpy_s(buf, buf_size, "LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT");
				break;
			case 0x2A84:
				strcpy_s(buf, buf_size, "GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT");
				break;
			case 0x2A85:
				strcpy_s(buf, buf_size, "LESS-THAN OR APPROXIMATE");
				break;
			case 0x2A86:
				strcpy_s(buf, buf_size, "GREATER-THAN OR APPROXIMATE");
				break;
			case 0x2A87:
				strcpy_s(buf, buf_size, "LESS-THAN AND SINGLE-LINE NOT EQUAL TO");
				break;
			case 0x2A88:
				strcpy_s(buf, buf_size, "GREATER-THAN AND SINGLE-LINE NOT EQUAL TO");
				break;
			case 0x2A89:
				strcpy_s(buf, buf_size, "LESS-THAN AND NOT APPROXIMATE");
				break;
			case 0x2A8A:
				strcpy_s(buf, buf_size, "GREATER-THAN AND NOT APPROXIMATE");
				break;
			case 0x2A8B:
				strcpy_s(buf, buf_size, "LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN");
				break;
			case 0x2A8C:
				strcpy_s(buf, buf_size, "GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN");
				break;
			case 0x2A8D:
				strcpy_s(buf, buf_size, "LESS-THAN ABOVE SIMILAR OR EQUAL");
				break;
			case 0x2A8E:
				strcpy_s(buf, buf_size, "GREATER-THAN ABOVE SIMILAR OR EQUAL");
				break;
			case 0x2A8F:
				strcpy_s(buf, buf_size, "LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN");
				break;
			case 0x2A90:
				strcpy_s(buf, buf_size, "GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN");
				break;
			case 0x2A91:
				strcpy_s(buf, buf_size, "LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL");
				break;
			case 0x2A92:
				strcpy_s(buf, buf_size, "GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL");
				break;
			case 0x2A93:
				strcpy_s(buf, buf_size, "LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL");
				break;
			case 0x2A94:
				strcpy_s(buf, buf_size, "GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL");
				break;
			case 0x2A95:
				strcpy_s(buf, buf_size, "SLANTED EQUAL TO OR LESS-THAN");
				break;
			case 0x2A96:
				strcpy_s(buf, buf_size, "SLANTED EQUAL TO OR GREATER-THAN");
				break;
			case 0x2A97:
				strcpy_s(buf, buf_size, "SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE");
				break;
			case 0x2A98:
				strcpy_s(buf, buf_size, "SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE");
				break;
			case 0x2A99:
				strcpy_s(buf, buf_size, "DOUBLE-LINE EQUAL TO OR LESS-THAN");
				break;
			case 0x2A9A:
				strcpy_s(buf, buf_size, "DOUBLE-LINE EQUAL TO OR GREATER-THAN");
				break;
			case 0x2A9B:
				strcpy_s(buf, buf_size, "DOUBLE-LINE SLANTED EQUAL TO OR LESS-THAN");
				break;
			case 0x2A9C:
				strcpy_s(buf, buf_size, "DOUBLE-LINE SLANTED EQUAL TO OR GREATER-THAN");
				break;
			case 0x2A9D:
				strcpy_s(buf, buf_size, "SIMILAR OR LESS-THAN");
				break;
			case 0x2A9E:
				strcpy_s(buf, buf_size, "SIMILAR OR GREATER-THAN");
				break;
			case 0x2A9F:
				strcpy_s(buf, buf_size, "SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN");
				break;
			case 0x2AA0:
				strcpy_s(buf, buf_size, "SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN");
				break;
			case 0x2AA1:
				strcpy_s(buf, buf_size, "DOUBLE NESTED LESS-THAN");
				break;
			case 0x2AA2:
				strcpy_s(buf, buf_size, "DOUBLE NESTED GREATER-THAN");
				break;
			case 0x2AA3:
				strcpy_s(buf, buf_size, "DOUBLE NESTED LESS-THAN WITH UNDERBAR");
				break;
			case 0x2AA4:
				strcpy_s(buf, buf_size, "GREATER-THAN OVERLAPPING LESS-THAN");
				break;
			case 0x2AA5:
				strcpy_s(buf, buf_size, "GREATER-THAN BESIDE LESS-THAN");
				break;
			case 0x2AA6:
				strcpy_s(buf, buf_size, "LESS-THAN CLOSED BY CURVE");
				break;
			case 0x2AA7:
				strcpy_s(buf, buf_size, "GREATER-THAN CLOSED BY CURVE");
				break;
			case 0x2AA8:
				strcpy_s(buf, buf_size, "LESS-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL");
				break;
			case 0x2AA9:
				strcpy_s(buf, buf_size, "GREATER-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL");
				break;
			case 0x2AAA:
				strcpy_s(buf, buf_size, "SMALLER THAN");
				break;
			case 0x2AAB:
				strcpy_s(buf, buf_size, "LARGER THAN");
				break;
			case 0x2AAC:
				strcpy_s(buf, buf_size, "SMALLER THAN OR EQUAL TO");
				break;
			case 0x2AAD:
				strcpy_s(buf, buf_size, "LARGER THAN OR EQUAL TO");
				break;
			case 0x2AAE:
				strcpy_s(buf, buf_size, "EQUALS SIGN WITH BUMPY ABOVE");
				break;
			case 0x2AAF:
				strcpy_s(buf, buf_size, "PRECEDES ABOVE SINGLE-LINE EQUALS SIGN");
				break;
			case 0x2AB0:
				strcpy_s(buf, buf_size, "SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN");
				break;
			case 0x2AB1:
				strcpy_s(buf, buf_size, "PRECEDES ABOVE SINGLE-LINE NOT EQUAL TO");
				break;
			case 0x2AB2:
				strcpy_s(buf, buf_size, "SUCCEEDS ABOVE SINGLE-LINE NOT EQUAL TO");
				break;
			case 0x2AB3:
				strcpy_s(buf, buf_size, "PRECEDES ABOVE EQUALS SIGN");
				break;
			case 0x2AB4:
				strcpy_s(buf, buf_size, "SUCCEEDS ABOVE EQUALS SIGN");
				break;
			case 0x2AB5:
				strcpy_s(buf, buf_size, "PRECEDES ABOVE NOT EQUAL TO");
				break;
			case 0x2AB6:
				strcpy_s(buf, buf_size, "SUCCEEDS ABOVE NOT EQUAL TO");
				break;
			case 0x2AB7:
				strcpy_s(buf, buf_size, "PRECEDES ABOVE ALMOST EQUAL TO");
				break;
			case 0x2AB8:
				strcpy_s(buf, buf_size, "SUCCEEDS ABOVE ALMOST EQUAL TO");
				break;
			case 0x2AB9:
				strcpy_s(buf, buf_size, "PRECEDES ABOVE NOT ALMOST EQUAL TO");
				break;
			case 0x2ABA:
				strcpy_s(buf, buf_size, "SUCCEEDS ABOVE NOT ALMOST EQUAL TO");
				break;
			case 0x2ABB:
				strcpy_s(buf, buf_size, "DOUBLE PRECEDES");
				break;
			case 0x2ABC:
				strcpy_s(buf, buf_size, "DOUBLE SUCCEEDS");
				break;
			case 0x2ABD:
				strcpy_s(buf, buf_size, "SUBSET WITH DOT");
				break;
			case 0x2ABE:
				strcpy_s(buf, buf_size, "SUPERSET WITH DOT");
				break;
			case 0x2ABF:
				strcpy_s(buf, buf_size, "SUBSET WITH PLUS SIGN BELOW");
				break;
			case 0x2AC0:
				strcpy_s(buf, buf_size, "SUPERSET WITH PLUS SIGN BELOW");
				break;
			case 0x2AC1:
				strcpy_s(buf, buf_size, "SUBSET WITH MULTIPLICATION SIGN BELOW");
				break;
			case 0x2AC2:
				strcpy_s(buf, buf_size, "SUPERSET WITH MULTIPLICATION SIGN BELOW");
				break;
			case 0x2AC3:
				strcpy_s(buf, buf_size, "SUBSET OF OR EQUAL TO WITH DOT ABOVE");
				break;
			case 0x2AC4:
				strcpy_s(buf, buf_size, "SUPERSET OF OR EQUAL TO WITH DOT ABOVE");
				break;
			case 0x2AC5:
				strcpy_s(buf, buf_size, "SUBSET OF ABOVE EQUALS SIGN");
				break;
			case 0x2AC6:
				strcpy_s(buf, buf_size, "SUPERSET OF ABOVE EQUALS SIGN");
				break;
			case 0x2AC7:
				strcpy_s(buf, buf_size, "SUBSET OF ABOVE TILDE OPERATOR");
				break;
			case 0x2AC8:
				strcpy_s(buf, buf_size, "SUPERSET OF ABOVE TILDE OPERATOR");
				break;
			case 0x2AC9:
				strcpy_s(buf, buf_size, "SUBSET OF ABOVE ALMOST EQUAL TO");
				break;
			case 0x2ACA:
				strcpy_s(buf, buf_size, "SUPERSET OF ABOVE ALMOST EQUAL TO");
				break;
			case 0x2ACB:
				strcpy_s(buf, buf_size, "SUBSET OF ABOVE NOT EQUAL TO");
				break;
			case 0x2ACC:
				strcpy_s(buf, buf_size, "SUPERSET OF ABOVE NOT EQUAL TO");
				break;
			case 0x2ACD:
				strcpy_s(buf, buf_size, "SQUARE LEFT OPEN BOX OPERATOR");
				break;
			case 0x2ACE:
				strcpy_s(buf, buf_size, "SQUARE RIGHT OPEN BOX OPERATOR");
				break;
			case 0x2ACF:
				strcpy_s(buf, buf_size, "CLOSED SUBSET");
				break;
			case 0x2AD0:
				strcpy_s(buf, buf_size, "CLOSED SUPERSET");
				break;
			case 0x2AD1:
				strcpy_s(buf, buf_size, "CLOSED SUBSET OR EQUAL TO");
				break;
			case 0x2AD2:
				strcpy_s(buf, buf_size, "CLOSED SUPERSET OR EQUAL TO");
				break;
			case 0x2AD3:
				strcpy_s(buf, buf_size, "SUBSET ABOVE SUPERSET");
				break;
			case 0x2AD4:
				strcpy_s(buf, buf_size, "SUPERSET ABOVE SUBSET");
				break;
			case 0x2AD5:
				strcpy_s(buf, buf_size, "SUBSET ABOVE SUBSET");
				break;
			case 0x2AD6:
				strcpy_s(buf, buf_size, "SUPERSET ABOVE SUPERSET");
				break;
			case 0x2AD7:
				strcpy_s(buf, buf_size, "SUPERSET BESIDE SUBSET");
				break;
			case 0x2AD8:
				strcpy_s(buf, buf_size, "SUPERSET BESIDE AND JOINED BY DASH WITH SUBSET");
				break;
			case 0x2AD9:
				strcpy_s(buf, buf_size, "ELEMENT OF OPENING DOWNWARDS");
				break;
			case 0x2ADA:
				strcpy_s(buf, buf_size, "PITCHFORK WITH TEE TOP");
				break;
			case 0x2ADB:
				strcpy_s(buf, buf_size, "TRANSVERSAL INTERSECTION");
				break;
			case 0x2ADC:
				strcpy_s(buf, buf_size, "FORKING");
				break;
			case 0x2ADD:
				strcpy_s(buf, buf_size, "NONFORKING");
				break;
			case 0x2ADE:
				strcpy_s(buf, buf_size, "SHORT LEFT TACK");
				break;
			case 0x2ADF:
				strcpy_s(buf, buf_size, "SHORT DOWN TACK");
				break;
			case 0x2AE0:
				strcpy_s(buf, buf_size, "SHORT UP TACK");
				break;
			case 0x2AE1:
				strcpy_s(buf, buf_size, "PERPENDICULAR WITH S");
				break;
			case 0x2AE2:
				strcpy_s(buf, buf_size, "VERTICAL BAR TRIPLE RIGHT TURNSTILE");
				break;
			case 0x2AE3:
				strcpy_s(buf, buf_size, "DOUBLE VERTICAL BAR LEFT TURNSTILE");
				break;
			case 0x2AE4:
				strcpy_s(buf, buf_size, "VERTICAL BAR DOUBLE LEFT TURNSTILE");
				break;
			case 0x2AE5:
				strcpy_s(buf, buf_size, "DOUBLE VERTICAL BAR DOUBLE LEFT TURNSTILE");
				break;
			case 0x2AE6:
				strcpy_s(buf, buf_size, "LONG DASH FROM LEFT MEMBER OF DOUBLE VERTICAL");
				break;
			case 0x2AE7:
				strcpy_s(buf, buf_size, "SHORT DOWN TACK WITH OVERBAR");
				break;
			case 0x2AE8:
				strcpy_s(buf, buf_size, "SHORT UP TACK WITH UNDERBAR");
				break;
			case 0x2AE9:
				strcpy_s(buf, buf_size, "SHORT UP TACK ABOVE SHORT DOWN TACK");
				break;
			case 0x2AEA:
				strcpy_s(buf, buf_size, "DOUBLE DOWN TACK");
				break;
			case 0x2AEB:
				strcpy_s(buf, buf_size, "DOUBLE UP TACK");
				break;
			case 0x2AEC:
				strcpy_s(buf, buf_size, "DOUBLE STROKE NOT SIGN");
				break;
			case 0x2AED:
				strcpy_s(buf, buf_size, "REVERSED DOUBLE STROKE NOT SIGN");
				break;
			case 0x2AEE:
				strcpy_s(buf, buf_size, "DOES NOT DIVIDE WITH REVERSED NEGATION SLASH");
				break;
			case 0x2AEF:
				strcpy_s(buf, buf_size, "VERTICAL LINE WITH CIRCLE ABOVE");
				break;
			case 0x2AF0:
				strcpy_s(buf, buf_size, "VERTICAL LINE WITH CIRCLE BELOW");
				break;
			case 0x2AF1:
				strcpy_s(buf, buf_size, "DOWN TACK WITH CIRCLE BELOW");
				break;
			case 0x2AF2:
				strcpy_s(buf, buf_size, "PARALLEL WITH HORIZONTAL STROKE");
				break;
			case 0x2AF3:
				strcpy_s(buf, buf_size, "PARALLEL WITH TILDE OPERATOR");
				break;
			case 0x2AF4:
				strcpy_s(buf, buf_size, "TRIPLE VERTICAL BAR BINARY RELATION");
				break;
			case 0x2AF5:
				strcpy_s(buf, buf_size, "TRIPLE VERTICAL BAR WITH HORIZONTAL STROKE");
				break;
			case 0x2AF6:
				strcpy_s(buf, buf_size, "TRIPLE COLON OPERATOR");
				break;
			case 0x2AF7:
				strcpy_s(buf, buf_size, "TRIPLE NESTED LESS-THAN");
				break;
			case 0x2AF8:
				strcpy_s(buf, buf_size, "TRIPLE NESTED GREATER-THAN");
				break;
			case 0x2AF9:
				strcpy_s(buf, buf_size, "DOUBLE-LINE SLANTED LESS-THAN OR EQUAL TO");
				break;
			case 0x2AFA:
				strcpy_s(buf, buf_size, "DOUBLE-LINE SLANTED GREATER-THAN OR EQUAL TO");
				break;
			case 0x2AFB:
				strcpy_s(buf, buf_size, "TRIPLE SOLIDUS BINARY RELATION");
				break;
			case 0x2AFC:
				strcpy_s(buf, buf_size, "LARGE TRIPLE VERTICAL BAR OPERATOR");
				break;
			case 0x2AFD:
				strcpy_s(buf, buf_size, "DOUBLE SOLIDUS OPERATOR");
				break;
			case 0x2AFE:
				strcpy_s(buf, buf_size, "WHITE VERTICAL BAR");
				break;
			case 0x2AFF:
				strcpy_s(buf, buf_size, "N-ARY WHITE VERTICAL BAR");
				break;
			case 0x2B00:
				strcpy_s(buf, buf_size, "NORTH EAST WHITE ARROW");
				break;
			case 0x2B01:
				strcpy_s(buf, buf_size, "NORTH WEST WHITE ARROW");
				break;
			case 0x2B02:
				strcpy_s(buf, buf_size, "SOUTH EAST WHITE ARROW");
				break;
			case 0x2B03:
				strcpy_s(buf, buf_size, "SOUTH WEST WHITE ARROW");
				break;
			case 0x2B04:
				strcpy_s(buf, buf_size, "LEFT RIGHT WHITE ARROW");
				break;
			case 0x2B05:
				strcpy_s(buf, buf_size, "LEFTWARDS BLACK ARROW");
				break;
			case 0x2B06:
				strcpy_s(buf, buf_size, "UPWARDS BLACK ARROW");
				break;
			case 0x2B07:
				strcpy_s(buf, buf_size, "DOWNWARDS BLACK ARROW");
				break;
			case 0x2B08:
				strcpy_s(buf, buf_size, "NORTH EAST BLACK ARROW");
				break;
			case 0x2B09:
				strcpy_s(buf, buf_size, "NORTH WEST BLACK ARROW");
				break;
			case 0x2B0A:
				strcpy_s(buf, buf_size, "SOUTH EAST BLACK ARROW");
				break;
			case 0x2B0B:
				strcpy_s(buf, buf_size, "SOUTH WEST BLACK ARROW");
				break;
			case 0x2B0C:
				strcpy_s(buf, buf_size, "LEFT RIGHT BLACK ARROW");
				break;
			case 0x2B0D:
				strcpy_s(buf, buf_size, "UP DOWN BLACK ARROW");
				break;
			case 0x2B0E:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH TIP DOWNWARDS");
				break;
			case 0x2B0F:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH TIP UPWARDS");
				break;
			case 0x2B10:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH TIP DOWNWARDS");
				break;
			case 0x2B11:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH TIP UPWARDS");
				break;
			case 0x2B12:
				strcpy_s(buf, buf_size, "SQUARE WITH TOP HALF BLACK");
				break;
			case 0x2B13:
				strcpy_s(buf, buf_size, "SQUARE WITH BOTTOM HALF BLACK");
				break;
			case 0x2B14:
				strcpy_s(buf, buf_size, "SQUARE WITH UPPER RIGHT DIAGONAL HALF BLACK");
				break;
			case 0x2B15:
				strcpy_s(buf, buf_size, "SQUARE WITH LOWER LEFT DIAGONAL HALF BLACK");
				break;
			case 0x2B16:
				strcpy_s(buf, buf_size, "DIAMOND WITH LEFT HALF BLACK");
				break;
			case 0x2B17:
				strcpy_s(buf, buf_size, "DIAMOND WITH RIGHT HALF BLACK");
				break;
			case 0x2B18:
				strcpy_s(buf, buf_size, "DIAMOND WITH TOP HALF BLACK");
				break;
			case 0x2B19:
				strcpy_s(buf, buf_size, "DIAMOND WITH BOTTOM HALF BLACK");
				break;
			case 0x2B1A:
				strcpy_s(buf, buf_size, "DOTTED SQUARE");
				break;
			case 0x2B1B:
				strcpy_s(buf, buf_size, "BLACK LARGE SQUARE");
				break;
			case 0x2B1C:
				strcpy_s(buf, buf_size, "WHITE LARGE SQUARE");
				break;
			case 0x2B1D:
				strcpy_s(buf, buf_size, "BLACK VERY SMALL SQUARE");
				break;
			case 0x2B1E:
				strcpy_s(buf, buf_size, "WHITE VERY SMALL SQUARE");
				break;
			case 0x2B1F:
				strcpy_s(buf, buf_size, "BLACK PENTAGON");
				break;
			case 0x2B20:
				strcpy_s(buf, buf_size, "WHITE PENTAGON");
				break;
			case 0x2B21:
				strcpy_s(buf, buf_size, "WHITE HEXAGON");
				break;
			case 0x2B22:
				strcpy_s(buf, buf_size, "BLACK HEXAGON");
				break;
			case 0x2B23:
				strcpy_s(buf, buf_size, "HORIZONTAL BLACK HEXAGON");
				break;
			case 0x2B24:
				strcpy_s(buf, buf_size, "BLACK LARGE CIRCLE");
				break;
			case 0x2B25:
				strcpy_s(buf, buf_size, "BLACK MEDIUM DIAMOND");
				break;
			case 0x2B26:
				strcpy_s(buf, buf_size, "WHITE MEDIUM DIAMOND");
				break;
			case 0x2B27:
				strcpy_s(buf, buf_size, "BLACK MEDIUM LOZENGE");
				break;
			case 0x2B28:
				strcpy_s(buf, buf_size, "WHITE MEDIUM LOZENGE");
				break;
			case 0x2B29:
				strcpy_s(buf, buf_size, "BLACK SMALL DIAMOND");
				break;
			case 0x2B2A:
				strcpy_s(buf, buf_size, "BLACK SMALL LOZENGE");
				break;
			case 0x2B2B:
				strcpy_s(buf, buf_size, "WHITE SMALL LOZENGE");
				break;
			case 0x2B2C:
				strcpy_s(buf, buf_size, "BLACK HORIZONTAL ELLIPSE");
				break;
			case 0x2B2D:
				strcpy_s(buf, buf_size, "WHITE HORIZONTAL ELLIPSE");
				break;
			case 0x2B2E:
				strcpy_s(buf, buf_size, "BLACK VERTICAL ELLIPSE");
				break;
			case 0x2B2F:
				strcpy_s(buf, buf_size, "WHITE VERTICAL ELLIPSE");
				break;
			case 0x2B30:
				strcpy_s(buf, buf_size, "LEFT ARROW WITH SMALL CIRCLE");
				break;
			case 0x2B31:
				strcpy_s(buf, buf_size, "THREE LEFTWARDS ARROWS");
				break;
			case 0x2B32:
				strcpy_s(buf, buf_size, "LEFT ARROW WITH CIRCLED PLUS");
				break;
			case 0x2B33:
				strcpy_s(buf, buf_size, "LONG LEFTWARDS SQUIGGLE ARROW");
				break;
			case 0x2B34:
				strcpy_s(buf, buf_size, "LEFTWARDS TWO-HEADED ARROW WITH VERTICAL STROKE");
				break;
			case 0x2B35:
				strcpy_s(buf, buf_size, "LEFTWARDS TWO-HEADED ARROW WITH DOUBLE VERTICAL STROKE");
				break;
			case 0x2B36:
				strcpy_s(buf, buf_size, "LEFTWARDS TWO-HEADED ARROW FROM BAR");
				break;
			case 0x2B37:
				strcpy_s(buf, buf_size, "LEFTWARDS TWO-HEADED TRIPLE DASH ARROW");
				break;
			case 0x2B38:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH DOTTED STEM");
				break;
			case 0x2B39:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH TAIL WITH VERTICAL STROKE");
				break;
			case 0x2B3A:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE");
				break;
			case 0x2B3B:
				strcpy_s(buf, buf_size, "LEFTWARDS TWO-HEADED ARROW WITH TAIL");
				break;
			case 0x2B3C:
				strcpy_s(buf, buf_size, "LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH VERTICAL STROKE");
				break;
			case 0x2B3D:
				strcpy_s(buf, buf_size, "LEFTWARDS TWO-HEADED ARROW WITH TAIL WITH DOUBLE VERTICAL STROKE");
				break;
			case 0x2B3E:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW THROUGH X");
				break;
			case 0x2B3F:
				strcpy_s(buf, buf_size, "WAVE ARROW POINTING DIRECTLY LEFT");
				break;
			case 0x2B40:
				strcpy_s(buf, buf_size, "EQUALS SIGN ABOVE LEFTWARDS ARROW");
				break;
			case 0x2B41:
				strcpy_s(buf, buf_size, "REVERSE TILDE OPERATOR ABOVE LEFTWARDS ARROW");
				break;
			case 0x2B42:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO");
				break;
			case 0x2B43:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW THROUGH GREATER-THAN");
				break;
			case 0x2B44:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW THROUGH SUPERSET");
				break;
			case 0x2B45:
				strcpy_s(buf, buf_size, "LEFTWARDS QUADRUPLE ARROW");
				break;
			case 0x2B46:
				strcpy_s(buf, buf_size, "RIGHTWARDS QUADRUPLE ARROW");
				break;
			case 0x2B47:
				strcpy_s(buf, buf_size, "REVERSE TILDE OPERATOR ABOVE RIGHTWARDS ARROW");
				break;
			case 0x2B48:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW ABOVE REVERSE ALMOST EQUAL TO");
				break;
			case 0x2B49:
				strcpy_s(buf, buf_size, "TILDE OPERATOR ABOVE LEFTWARDS ARROW");
				break;
			case 0x2B4A:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW ABOVE ALMOST EQUAL TO");
				break;
			case 0x2B4B:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW ABOVE REVERSE TILDE OPERATOR");
				break;
			case 0x2B4C:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW ABOVE REVERSE TILDE OPERATOR");
				break;
			case 0x2B4D:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ZIGZAG ARROW");
				break;
			case 0x2B4E:
				strcpy_s(buf, buf_size, "SHORT SLANTED NORTH ARROW");
				break;
			case 0x2B4F:
				strcpy_s(buf, buf_size, "SHORT BACKSLANTED SOUTH ARROW");
				break;
			case 0x2B50:
				strcpy_s(buf, buf_size, "WHITE MEDIUM STAR");
				break;
			case 0x2B51:
				strcpy_s(buf, buf_size, "BLACK SMALL STAR");
				break;
			case 0x2B52:
				strcpy_s(buf, buf_size, "WHITE SMALL STAR");
				break;
			case 0x2B53:
				strcpy_s(buf, buf_size, "BLACK RIGHT-POINTING PENTAGON");
				break;
			case 0x2B54:
				strcpy_s(buf, buf_size, "WHITE RIGHT-POINTING PENTAGON");
				break;
			case 0x2B55:
				strcpy_s(buf, buf_size, "HEAVY LARGE CIRCLE");
				break;
			case 0x2B56:
				strcpy_s(buf, buf_size, "HEAVY OVAL WITH OVAL INSIDE");
				break;
			case 0x2B57:
				strcpy_s(buf, buf_size, "HEAVY CIRCLE WITH CIRCLE INSIDE");
				break;
			case 0x2B58:
				strcpy_s(buf, buf_size, "HEAVY CIRCLE");
				break;
			case 0x2B59:
				strcpy_s(buf, buf_size, "HEAVY CIRCLED SALTIRE");
				break;
			case 0x2B5A:
				strcpy_s(buf, buf_size, "SLANTED NORTH ARROW WITH HOOKED HEAD");
				break;
			case 0x2B5B:
				strcpy_s(buf, buf_size, "BACKSLANTED SOUTH ARROW WITH HOOKED TAIL");
				break;
			case 0x2B5C:
				strcpy_s(buf, buf_size, "SLANTED NORTH ARROW WITH HORIZONTAL TAIL");
				break;
			case 0x2B5D:
				strcpy_s(buf, buf_size, "BACKSLANTED SOUTH ARROW WITH HORIZONTAL TAIL");
				break;
			case 0x2B5E:
				strcpy_s(buf, buf_size, "BENT ARROW POINTING DOWNWARDS THEN NORTH EAST");
				break;
			case 0x2B5F:
				strcpy_s(buf, buf_size, "SHORT BENT ARROW POINTING DOWNWARDS THEN NORTH EAST");
				break;
			case 0x2B60:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW");
				break;
			case 0x2B61:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW");
				break;
			case 0x2B62:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW");
				break;
			case 0x2B63:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW");
				break;
			case 0x2B64:
				strcpy_s(buf, buf_size, "LEFT RIGHT TRIANGLE-HEADED ARROW");
				break;
			case 0x2B65:
				strcpy_s(buf, buf_size, "UP DOWN TRIANGLE-HEADED ARROW");
				break;
			case 0x2B66:
				strcpy_s(buf, buf_size, "NORTH WEST TRIANGLE-HEADED ARROW");
				break;
			case 0x2B67:
				strcpy_s(buf, buf_size, "NORTH EAST TRIANGLE-HEADED ARROW");
				break;
			case 0x2B68:
				strcpy_s(buf, buf_size, "SOUTH EAST TRIANGLE-HEADED ARROW");
				break;
			case 0x2B69:
				strcpy_s(buf, buf_size, "SOUTH WEST TRIANGLE-HEADED ARROW");
				break;
			case 0x2B6A:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED DASHED ARROW");
				break;
			case 0x2B6B:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED DASHED ARROW");
				break;
			case 0x2B6C:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED DASHED ARROW");
				break;
			case 0x2B6D:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED DASHED ARROW");
				break;
			case 0x2B6E:
				strcpy_s(buf, buf_size, "CLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW");
				break;
			case 0x2B6F:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE TRIANGLE-HEADED OPEN CIRCLE ARROW");
				break;
			case 0x2B70:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW TO BAR");
				break;
			case 0x2B71:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW TO BAR");
				break;
			case 0x2B72:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW TO BAR");
				break;
			case 0x2B73:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW TO BAR");
				break;
			case 0x2B76:
				strcpy_s(buf, buf_size, "NORTH WEST TRIANGLE-HEADED ARROW TO BAR");
				break;
			case 0x2B77:
				strcpy_s(buf, buf_size, "NORTH EAST TRIANGLE-HEADED ARROW TO BAR");
				break;
			case 0x2B78:
				strcpy_s(buf, buf_size, "SOUTH EAST TRIANGLE-HEADED ARROW TO BAR");
				break;
			case 0x2B79:
				strcpy_s(buf, buf_size, "SOUTH WEST TRIANGLE-HEADED ARROW TO BAR");
				break;
			case 0x2B7A:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE");
				break;
			case 0x2B7B:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE");
				break;
			case 0x2B7C:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE");
				break;
			case 0x2B7D:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW WITH DOUBLE HORIZONTAL STROKE");
				break;
			case 0x2B7E:
				strcpy_s(buf, buf_size, "HORIZONTAL TAB KEY");
				break;
			case 0x2B7F:
				strcpy_s(buf, buf_size, "VERTICAL TAB KEY");
				break;
			case 0x2B80:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW OVER RIGHTWARDS TRIANGLE-HEADED ARROW");
				break;
			case 0x2B81:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF DOWNWARDS TRIANGLE-HEADED ARROW");
				break;
			case 0x2B82:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW OVER LEFTWARDS TRIANGLE-HEADED ARROW");
				break;
			case 0x2B83:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW LEFTWARDS OF UPWARDS TRIANGLE-HEADED ARROW");
				break;
			case 0x2B84:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED PAIRED ARROWS");
				break;
			case 0x2B85:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED PAIRED ARROWS");
				break;
			case 0x2B86:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED PAIRED ARROWS");
				break;
			case 0x2B87:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED PAIRED ARROWS");
				break;
			case 0x2B88:
				strcpy_s(buf, buf_size, "LEFTWARDS BLACK CIRCLED WHITE ARROW");
				break;
			case 0x2B89:
				strcpy_s(buf, buf_size, "UPWARDS BLACK CIRCLED WHITE ARROW");
				break;
			case 0x2B8A:
				strcpy_s(buf, buf_size, "RIGHTWARDS BLACK CIRCLED WHITE ARROW");
				break;
			case 0x2B8B:
				strcpy_s(buf, buf_size, "DOWNWARDS BLACK CIRCLED WHITE ARROW");
				break;
			case 0x2B8C:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE TRIANGLE-HEADED RIGHT U-SHAPED ARROW");
				break;
			case 0x2B8D:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE TRIANGLE-HEADED BOTTOM U-SHAPED ARROW");
				break;
			case 0x2B8E:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE TRIANGLE-HEADED LEFT U-SHAPED ARROW");
				break;
			case 0x2B8F:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE TRIANGLE-HEADED TOP U-SHAPED ARROW");
				break;
			case 0x2B90:
				strcpy_s(buf, buf_size, "RETURN LEFT");
				break;
			case 0x2B91:
				strcpy_s(buf, buf_size, "RETURN RIGHT");
				break;
			case 0x2B92:
				strcpy_s(buf, buf_size, "NEWLINE LEFT");
				break;
			case 0x2B93:
				strcpy_s(buf, buf_size, "NEWLINE RIGHT");
				break;
			case 0x2B94:
				strcpy_s(buf, buf_size, "FOUR CORNER ARROWS CIRCLING ANTICLOCKWISE");
				break;
			case 0x2B95:
				strcpy_s(buf, buf_size, "RIGHTWARDS BLACK ARROW");
				break;
			case 0x2B97:
				strcpy_s(buf, buf_size, "SYMBOL FOR TYPE A ELECTRONICS");
				break;
			case 0x2B98:
				strcpy_s(buf, buf_size, "THREE-D TOP-LIGHTED LEFTWARDS EQUILATERAL ARROWHEAD");
				break;
			case 0x2B99:
				strcpy_s(buf, buf_size, "THREE-D RIGHT-LIGHTED UPWARDS EQUILATERAL ARROWHEAD");
				break;
			case 0x2B9A:
				strcpy_s(buf, buf_size, "THREE-D TOP-LIGHTED RIGHTWARDS EQUILATERAL ARROWHEAD");
				break;
			case 0x2B9B:
				strcpy_s(buf, buf_size, "THREE-D LEFT-LIGHTED DOWNWARDS EQUILATERAL ARROWHEAD");
				break;
			case 0x2B9C:
				strcpy_s(buf, buf_size, "BLACK LEFTWARDS EQUILATERAL ARROWHEAD");
				break;
			case 0x2B9D:
				strcpy_s(buf, buf_size, "BLACK UPWARDS EQUILATERAL ARROWHEAD");
				break;
			case 0x2B9E:
				strcpy_s(buf, buf_size, "BLACK RIGHTWARDS EQUILATERAL ARROWHEAD");
				break;
			case 0x2B9F:
				strcpy_s(buf, buf_size, "BLACK DOWNWARDS EQUILATERAL ARROWHEAD");
				break;
			case 0x2BA0:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS");
				break;
			case 0x2BA1:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS");
				break;
			case 0x2BA2:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP LEFTWARDS");
				break;
			case 0x2BA3:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW WITH LONG TIP RIGHTWARDS");
				break;
			case 0x2BA4:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS");
				break;
			case 0x2BA5:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP UPWARDS");
				break;
			case 0x2BA6:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS");
				break;
			case 0x2BA7:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW WITH LONG TIP DOWNWARDS");
				break;
			case 0x2BA8:
				strcpy_s(buf, buf_size, "BLACK CURVED DOWNWARDS AND LEFTWARDS ARROW");
				break;
			case 0x2BA9:
				strcpy_s(buf, buf_size, "BLACK CURVED DOWNWARDS AND RIGHTWARDS ARROW");
				break;
			case 0x2BAA:
				strcpy_s(buf, buf_size, "BLACK CURVED UPWARDS AND LEFTWARDS ARROW");
				break;
			case 0x2BAB:
				strcpy_s(buf, buf_size, "BLACK CURVED UPWARDS AND RIGHTWARDS ARROW");
				break;
			case 0x2BAC:
				strcpy_s(buf, buf_size, "BLACK CURVED LEFTWARDS AND UPWARDS ARROW");
				break;
			case 0x2BAD:
				strcpy_s(buf, buf_size, "BLACK CURVED RIGHTWARDS AND UPWARDS ARROW");
				break;
			case 0x2BAE:
				strcpy_s(buf, buf_size, "BLACK CURVED LEFTWARDS AND DOWNWARDS ARROW");
				break;
			case 0x2BAF:
				strcpy_s(buf, buf_size, "BLACK CURVED RIGHTWARDS AND DOWNWARDS ARROW");
				break;
			case 0x2BB0:
				strcpy_s(buf, buf_size, "RIBBON ARROW DOWN LEFT");
				break;
			case 0x2BB1:
				strcpy_s(buf, buf_size, "RIBBON ARROW DOWN RIGHT");
				break;
			case 0x2BB2:
				strcpy_s(buf, buf_size, "RIBBON ARROW UP LEFT");
				break;
			case 0x2BB3:
				strcpy_s(buf, buf_size, "RIBBON ARROW UP RIGHT");
				break;
			case 0x2BB4:
				strcpy_s(buf, buf_size, "RIBBON ARROW LEFT UP");
				break;
			case 0x2BB5:
				strcpy_s(buf, buf_size, "RIBBON ARROW RIGHT UP");
				break;
			case 0x2BB6:
				strcpy_s(buf, buf_size, "RIBBON ARROW LEFT DOWN");
				break;
			case 0x2BB7:
				strcpy_s(buf, buf_size, "RIBBON ARROW RIGHT DOWN");
				break;
			case 0x2BB8:
				strcpy_s(buf, buf_size, "UPWARDS WHITE ARROW FROM BAR WITH HORIZONTAL BAR");
				break;
			case 0x2BB9:
				strcpy_s(buf, buf_size, "UP ARROWHEAD IN A RECTANGLE BOX");
				break;
			case 0x2BBA:
				strcpy_s(buf, buf_size, "OVERLAPPING WHITE SQUARES");
				break;
			case 0x2BBB:
				strcpy_s(buf, buf_size, "OVERLAPPING WHITE AND BLACK SQUARES");
				break;
			case 0x2BBC:
				strcpy_s(buf, buf_size, "OVERLAPPING BLACK SQUARES");
				break;
			case 0x2BBD:
				strcpy_s(buf, buf_size, "BALLOT BOX WITH LIGHT X");
				break;
			case 0x2BBE:
				strcpy_s(buf, buf_size, "CIRCLED X");
				break;
			case 0x2BBF:
				strcpy_s(buf, buf_size, "CIRCLED BOLD X");
				break;
			case 0x2BC0:
				strcpy_s(buf, buf_size, "BLACK SQUARE CENTRED");
				break;
			case 0x2BC1:
				strcpy_s(buf, buf_size, "BLACK DIAMOND CENTRED");
				break;
			case 0x2BC2:
				strcpy_s(buf, buf_size, "TURNED BLACK PENTAGON");
				break;
			case 0x2BC3:
				strcpy_s(buf, buf_size, "HORIZONTAL BLACK OCTAGON");
				break;
			case 0x2BC4:
				strcpy_s(buf, buf_size, "BLACK OCTAGON");
				break;
			case 0x2BC5:
				strcpy_s(buf, buf_size, "BLACK MEDIUM UP-POINTING TRIANGLE CENTRED");
				break;
			case 0x2BC6:
				strcpy_s(buf, buf_size, "BLACK MEDIUM DOWN-POINTING TRIANGLE CENTRED");
				break;
			case 0x2BC7:
				strcpy_s(buf, buf_size, "BLACK MEDIUM LEFT-POINTING TRIANGLE CENTRED");
				break;
			case 0x2BC8:
				strcpy_s(buf, buf_size, "BLACK MEDIUM RIGHT-POINTING TRIANGLE CENTRED");
				break;
			case 0x2BC9:
				strcpy_s(buf, buf_size, "NEPTUNE FORM TWO");
				break;
			case 0x2BCA:
				strcpy_s(buf, buf_size, "TOP HALF BLACK CIRCLE");
				break;
			case 0x2BCB:
				strcpy_s(buf, buf_size, "BOTTOM HALF BLACK CIRCLE");
				break;
			case 0x2BCC:
				strcpy_s(buf, buf_size, "LIGHT FOUR POINTED BLACK CUSP");
				break;
			case 0x2BCD:
				strcpy_s(buf, buf_size, "ROTATED LIGHT FOUR POINTED BLACK CUSP");
				break;
			case 0x2BCE:
				strcpy_s(buf, buf_size, "WHITE FOUR POINTED CUSP");
				break;
			case 0x2BCF:
				strcpy_s(buf, buf_size, "ROTATED WHITE FOUR POINTED CUSP");
				break;
			case 0x2BD0:
				strcpy_s(buf, buf_size, "SQUARE POSITION INDICATOR");
				break;
			case 0x2BD1:
				strcpy_s(buf, buf_size, "UNCERTAINTY SIGN");
				break;
			case 0x2BD2:
				strcpy_s(buf, buf_size, "GROUP MARK");
				break;
			case 0x2BD3:
				strcpy_s(buf, buf_size, "PLUTO FORM TWO");
				break;
			case 0x2BD4:
				strcpy_s(buf, buf_size, "PLUTO FORM THREE");
				break;
			case 0x2BD5:
				strcpy_s(buf, buf_size, "PLUTO FORM FOUR");
				break;
			case 0x2BD6:
				strcpy_s(buf, buf_size, "PLUTO FORM FIVE");
				break;
			case 0x2BD7:
				strcpy_s(buf, buf_size, "TRANSPLUTO");
				break;
			case 0x2BD8:
				strcpy_s(buf, buf_size, "PROSERPINA");
				break;
			case 0x2BD9:
				strcpy_s(buf, buf_size, "ASTRAEA");
				break;
			case 0x2BDA:
				strcpy_s(buf, buf_size, "HYGIEA");
				break;
			case 0x2BDB:
				strcpy_s(buf, buf_size, "PHOLUS");
				break;
			case 0x2BDC:
				strcpy_s(buf, buf_size, "NESSUS");
				break;
			case 0x2BDD:
				strcpy_s(buf, buf_size, "WHITE MOON SELENA");
				break;
			case 0x2BDE:
				strcpy_s(buf, buf_size, "BLACK DIAMOND ON CROSS");
				break;
			case 0x2BDF:
				strcpy_s(buf, buf_size, "TRUE LIGHT MOON ARTA");
				break;
			case 0x2BE0:
				strcpy_s(buf, buf_size, "CUPIDO");
				break;
			case 0x2BE1:
				strcpy_s(buf, buf_size, "HADES");
				break;
			case 0x2BE2:
				strcpy_s(buf, buf_size, "ZEUS");
				break;
			case 0x2BE3:
				strcpy_s(buf, buf_size, "KRONOS");
				break;
			case 0x2BE4:
				strcpy_s(buf, buf_size, "APOLLON");
				break;
			case 0x2BE5:
				strcpy_s(buf, buf_size, "ADMETOS");
				break;
			case 0x2BE6:
				strcpy_s(buf, buf_size, "VULCANUS");
				break;
			case 0x2BE7:
				strcpy_s(buf, buf_size, "POSEIDON");
				break;
			case 0x2BE8:
				strcpy_s(buf, buf_size, "LEFT HALF BLACK STAR");
				break;
			case 0x2BE9:
				strcpy_s(buf, buf_size, "RIGHT HALF BLACK STAR");
				break;
			case 0x2BEA:
				strcpy_s(buf, buf_size, "STAR WITH LEFT HALF BLACK");
				break;
			case 0x2BEB:
				strcpy_s(buf, buf_size, "STAR WITH RIGHT HALF BLACK");
				break;
			case 0x2BEC:
				strcpy_s(buf, buf_size, "LEFTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS");
				break;
			case 0x2BED:
				strcpy_s(buf, buf_size, "UPWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS");
				break;
			case 0x2BEE:
				strcpy_s(buf, buf_size, "RIGHTWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS");
				break;
			case 0x2BEF:
				strcpy_s(buf, buf_size, "DOWNWARDS TWO-HEADED ARROW WITH TRIANGLE ARROWHEADS");
				break;
			case 0x2BF0:
				strcpy_s(buf, buf_size, "ERIS FORM ONE");
				break;
			case 0x2BF1:
				strcpy_s(buf, buf_size, "ERIS FORM TWO");
				break;
			case 0x2BF2:
				strcpy_s(buf, buf_size, "SEDNA");
				break;
			case 0x2BF3:
				strcpy_s(buf, buf_size, "RUSSIAN ASTROLOGICAL SYMBOL VIGINTILE");
				break;
			case 0x2BF4:
				strcpy_s(buf, buf_size, "RUSSIAN ASTROLOGICAL SYMBOL NOVILE");
				break;
			case 0x2BF5:
				strcpy_s(buf, buf_size, "RUSSIAN ASTROLOGICAL SYMBOL QUINTILE");
				break;
			case 0x2BF6:
				strcpy_s(buf, buf_size, "RUSSIAN ASTROLOGICAL SYMBOL BINOVILE");
				break;
			case 0x2BF7:
				strcpy_s(buf, buf_size, "RUSSIAN ASTROLOGICAL SYMBOL SENTAGON");
				break;
			case 0x2BF8:
				strcpy_s(buf, buf_size, "RUSSIAN ASTROLOGICAL SYMBOL TREDECILE");
				break;
			case 0x2BF9:
				strcpy_s(buf, buf_size, "EQUALS SIGN WITH INFINITY BELOW");
				break;
			case 0x2BFA:
				strcpy_s(buf, buf_size, "UNITED SYMBOL");
				break;
			case 0x2BFB:
				strcpy_s(buf, buf_size, "SEPARATED SYMBOL");
				break;
			case 0x2BFC:
				strcpy_s(buf, buf_size, "DOUBLED SYMBOL");
				break;
			case 0x2BFD:
				strcpy_s(buf, buf_size, "PASSED SYMBOL");
				break;
			case 0x2BFE:
				strcpy_s(buf, buf_size, "REVERSED RIGHT ANGLE");
				break;
			case 0x2BFF:
				strcpy_s(buf, buf_size, "HELLSCHREIBER PAUSE SYMBOL");
				break;
			case 0x2C00:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER AZU");
				break;
			case 0x2C01:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER BUKY");
				break;
			case 0x2C02:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER VEDE");
				break;
			case 0x2C03:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER GLAGOLI");
				break;
			case 0x2C04:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER DOBRO");
				break;
			case 0x2C05:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER YESTU");
				break;
			case 0x2C06:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER ZHIVETE");
				break;
			case 0x2C07:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER DZELO");
				break;
			case 0x2C08:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER ZEMLJA");
				break;
			case 0x2C09:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER IZHE");
				break;
			case 0x2C0A:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER INITIAL IZHE");
				break;
			case 0x2C0B:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER I");
				break;
			case 0x2C0C:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER DJERVI");
				break;
			case 0x2C0D:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER KAKO");
				break;
			case 0x2C0E:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER LJUDIJE");
				break;
			case 0x2C0F:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER MYSLITE");
				break;
			case 0x2C10:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER NASHI");
				break;
			case 0x2C11:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER ONU");
				break;
			case 0x2C12:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER POKOJI");
				break;
			case 0x2C13:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER RITSI");
				break;
			case 0x2C14:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER SLOVO");
				break;
			case 0x2C15:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER TVRIDO");
				break;
			case 0x2C16:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER UKU");
				break;
			case 0x2C17:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER FRITU");
				break;
			case 0x2C18:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER HERU");
				break;
			case 0x2C19:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER OTU");
				break;
			case 0x2C1A:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER PE");
				break;
			case 0x2C1B:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER SHTA");
				break;
			case 0x2C1C:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER TSI");
				break;
			case 0x2C1D:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER CHRIVI");
				break;
			case 0x2C1E:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER SHA");
				break;
			case 0x2C1F:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER YERU");
				break;
			case 0x2C20:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER YERI");
				break;
			case 0x2C21:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER YATI");
				break;
			case 0x2C22:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER SPIDERY HA");
				break;
			case 0x2C23:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER YU");
				break;
			case 0x2C24:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER SMALL YUS");
				break;
			case 0x2C25:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER SMALL YUS WITH TAIL");
				break;
			case 0x2C26:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER YO");
				break;
			case 0x2C27:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER IOTATED SMALL YUS");
				break;
			case 0x2C28:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER BIG YUS");
				break;
			case 0x2C29:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER IOTATED BIG YUS");
				break;
			case 0x2C2A:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER FITA");
				break;
			case 0x2C2B:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER IZHITSA");
				break;
			case 0x2C2C:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER SHTAPIC");
				break;
			case 0x2C2D:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER TROKUTASTI A");
				break;
			case 0x2C2E:
				strcpy_s(buf, buf_size, "GLAGOLITIC CAPITAL LETTER LATINATE MYSLITE");
				break;
			case 0x2C30:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER AZU");
				break;
			case 0x2C31:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER BUKY");
				break;
			case 0x2C32:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER VEDE");
				break;
			case 0x2C33:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER GLAGOLI");
				break;
			case 0x2C34:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER DOBRO");
				break;
			case 0x2C35:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER YESTU");
				break;
			case 0x2C36:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER ZHIVETE");
				break;
			case 0x2C37:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER DZELO");
				break;
			case 0x2C38:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER ZEMLJA");
				break;
			case 0x2C39:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER IZHE");
				break;
			case 0x2C3A:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER INITIAL IZHE");
				break;
			case 0x2C3B:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER I");
				break;
			case 0x2C3C:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER DJERVI");
				break;
			case 0x2C3D:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER KAKO");
				break;
			case 0x2C3E:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER LJUDIJE");
				break;
			case 0x2C3F:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER MYSLITE");
				break;
			case 0x2C40:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER NASHI");
				break;
			case 0x2C41:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER ONU");
				break;
			case 0x2C42:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER POKOJI");
				break;
			case 0x2C43:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER RITSI");
				break;
			case 0x2C44:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER SLOVO");
				break;
			case 0x2C45:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER TVRIDO");
				break;
			case 0x2C46:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER UKU");
				break;
			case 0x2C47:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER FRITU");
				break;
			case 0x2C48:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER HERU");
				break;
			case 0x2C49:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER OTU");
				break;
			case 0x2C4A:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER PE");
				break;
			case 0x2C4B:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER SHTA");
				break;
			case 0x2C4C:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER TSI");
				break;
			case 0x2C4D:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER CHRIVI");
				break;
			case 0x2C4E:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER SHA");
				break;
			case 0x2C4F:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER YERU");
				break;
			case 0x2C50:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER YERI");
				break;
			case 0x2C51:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER YATI");
				break;
			case 0x2C52:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER SPIDERY HA");
				break;
			case 0x2C53:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER YU");
				break;
			case 0x2C54:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER SMALL YUS");
				break;
			case 0x2C55:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER SMALL YUS WITH TAIL");
				break;
			case 0x2C56:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER YO");
				break;
			case 0x2C57:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER IOTATED SMALL YUS");
				break;
			case 0x2C58:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER BIG YUS");
				break;
			case 0x2C59:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER IOTATED BIG YUS");
				break;
			case 0x2C5A:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER FITA");
				break;
			case 0x2C5B:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER IZHITSA");
				break;
			case 0x2C5C:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER SHTAPIC");
				break;
			case 0x2C5D:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER TROKUTASTI A");
				break;
			case 0x2C5E:
				strcpy_s(buf, buf_size, "GLAGOLITIC SMALL LETTER LATINATE MYSLITE");
				break;
			case 0x2C60:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH DOUBLE BAR");
				break;
			case 0x2C61:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH DOUBLE BAR");
				break;
			case 0x2C62:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH MIDDLE TILDE");
				break;
			case 0x2C63:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER P WITH STROKE");
				break;
			case 0x2C64:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH TAIL");
				break;
			case 0x2C65:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A WITH STROKE");
				break;
			case 0x2C66:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER T WITH DIAGONAL STROKE");
				break;
			case 0x2C67:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H WITH DESCENDER");
				break;
			case 0x2C68:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH DESCENDER");
				break;
			case 0x2C69:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH DESCENDER");
				break;
			case 0x2C6A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH DESCENDER");
				break;
			case 0x2C6B:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH DESCENDER");
				break;
			case 0x2C6C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Z WITH DESCENDER");
				break;
			case 0x2C6D:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER ALPHA");
				break;
			case 0x2C6E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER M WITH HOOK");
				break;
			case 0x2C6F:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TURNED A");
				break;
			case 0x2C70:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TURNED ALPHA");
				break;
			case 0x2C71:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER V WITH RIGHT HOOK");
				break;
			case 0x2C72:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER W WITH HOOK");
				break;
			case 0x2C73:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER W WITH HOOK");
				break;
			case 0x2C74:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER V WITH CURL");
				break;
			case 0x2C75:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER HALF H");
				break;
			case 0x2C76:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER HALF H");
				break;
			case 0x2C77:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TAILLESS PHI");
				break;
			case 0x2C78:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH NOTCH");
				break;
			case 0x2C79:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED R WITH TAIL");
				break;
			case 0x2C7A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH LOW RING INSIDE");
				break;
			case 0x2C7B:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL TURNED E");
				break;
			case 0x2C7C:
				strcpy_s(buf, buf_size, "LATIN SUBSCRIPT SMALL LETTER J");
				break;
			case 0x2C7D:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL V");
				break;
			case 0x2C7E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH SWASH TAIL");
				break;
			case 0x2C7F:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH SWASH TAIL");
				break;
			case 0x2C80:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER ALFA");
				break;
			case 0x2C81:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER ALFA");
				break;
			case 0x2C82:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER VIDA");
				break;
			case 0x2C83:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER VIDA");
				break;
			case 0x2C84:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER GAMMA");
				break;
			case 0x2C85:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER GAMMA");
				break;
			case 0x2C86:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER DALDA");
				break;
			case 0x2C87:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER DALDA");
				break;
			case 0x2C88:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER EIE");
				break;
			case 0x2C89:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER EIE");
				break;
			case 0x2C8A:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER SOU");
				break;
			case 0x2C8B:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER SOU");
				break;
			case 0x2C8C:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER ZATA");
				break;
			case 0x2C8D:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER ZATA");
				break;
			case 0x2C8E:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER HATE");
				break;
			case 0x2C8F:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER HATE");
				break;
			case 0x2C90:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER THETHE");
				break;
			case 0x2C91:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER THETHE");
				break;
			case 0x2C92:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER IAUDA");
				break;
			case 0x2C93:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER IAUDA");
				break;
			case 0x2C94:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER KAPA");
				break;
			case 0x2C95:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER KAPA");
				break;
			case 0x2C96:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER LAULA");
				break;
			case 0x2C97:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER LAULA");
				break;
			case 0x2C98:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER MI");
				break;
			case 0x2C99:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER MI");
				break;
			case 0x2C9A:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER NI");
				break;
			case 0x2C9B:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER NI");
				break;
			case 0x2C9C:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER KSI");
				break;
			case 0x2C9D:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER KSI");
				break;
			case 0x2C9E:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER O");
				break;
			case 0x2C9F:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER O");
				break;
			case 0x2CA0:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER PI");
				break;
			case 0x2CA1:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER PI");
				break;
			case 0x2CA2:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER RO");
				break;
			case 0x2CA3:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER RO");
				break;
			case 0x2CA4:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER SIMA");
				break;
			case 0x2CA5:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER SIMA");
				break;
			case 0x2CA6:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER TAU");
				break;
			case 0x2CA7:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER TAU");
				break;
			case 0x2CA8:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER UA");
				break;
			case 0x2CA9:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER UA");
				break;
			case 0x2CAA:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER FI");
				break;
			case 0x2CAB:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER FI");
				break;
			case 0x2CAC:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER KHI");
				break;
			case 0x2CAD:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER KHI");
				break;
			case 0x2CAE:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER PSI");
				break;
			case 0x2CAF:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER PSI");
				break;
			case 0x2CB0:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OOU");
				break;
			case 0x2CB1:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OOU");
				break;
			case 0x2CB2:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER DIALECT-P ALEF");
				break;
			case 0x2CB3:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER DIALECT-P ALEF");
				break;
			case 0x2CB4:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC AIN");
				break;
			case 0x2CB5:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC AIN");
				break;
			case 0x2CB6:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE");
				break;
			case 0x2CB7:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER CRYPTOGRAMMIC EIE");
				break;
			case 0x2CB8:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER DIALECT-P KAPA");
				break;
			case 0x2CB9:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER DIALECT-P KAPA");
				break;
			case 0x2CBA:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER DIALECT-P NI");
				break;
			case 0x2CBB:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER DIALECT-P NI");
				break;
			case 0x2CBC:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER CRYPTOGRAMMIC NI");
				break;
			case 0x2CBD:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER CRYPTOGRAMMIC NI");
				break;
			case 0x2CBE:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC OOU");
				break;
			case 0x2CBF:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC OOU");
				break;
			case 0x2CC0:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER SAMPI");
				break;
			case 0x2CC1:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER SAMPI");
				break;
			case 0x2CC2:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER CROSSED SHEI");
				break;
			case 0x2CC3:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER CROSSED SHEI");
				break;
			case 0x2CC4:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC SHEI");
				break;
			case 0x2CC5:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC SHEI");
				break;
			case 0x2CC6:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC ESH");
				break;
			case 0x2CC7:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC ESH");
				break;
			case 0x2CC8:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER AKHMIMIC KHEI");
				break;
			case 0x2CC9:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER AKHMIMIC KHEI");
				break;
			case 0x2CCA:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER DIALECT-P HORI");
				break;
			case 0x2CCB:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER DIALECT-P HORI");
				break;
			case 0x2CCC:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC HORI");
				break;
			case 0x2CCD:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC HORI");
				break;
			case 0x2CCE:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC HA");
				break;
			case 0x2CCF:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC HA");
				break;
			case 0x2CD0:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER L-SHAPED HA");
				break;
			case 0x2CD1:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER L-SHAPED HA");
				break;
			case 0x2CD2:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC HEI");
				break;
			case 0x2CD3:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC HEI");
				break;
			case 0x2CD4:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC HAT");
				break;
			case 0x2CD5:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC HAT");
				break;
			case 0x2CD6:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC GANGIA");
				break;
			case 0x2CD7:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC GANGIA");
				break;
			case 0x2CD8:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC DJA");
				break;
			case 0x2CD9:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC DJA");
				break;
			case 0x2CDA:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD COPTIC SHIMA");
				break;
			case 0x2CDB:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD COPTIC SHIMA");
				break;
			case 0x2CDC:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD NUBIAN SHIMA");
				break;
			case 0x2CDD:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD NUBIAN SHIMA");
				break;
			case 0x2CDE:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD NUBIAN NGI");
				break;
			case 0x2CDF:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD NUBIAN NGI");
				break;
			case 0x2CE0:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD NUBIAN NYI");
				break;
			case 0x2CE1:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD NUBIAN NYI");
				break;
			case 0x2CE2:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER OLD NUBIAN WAU");
				break;
			case 0x2CE3:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER OLD NUBIAN WAU");
				break;
			case 0x2CE4:
				strcpy_s(buf, buf_size, "COPTIC SYMBOL KAI");
				break;
			case 0x2CE5:
				strcpy_s(buf, buf_size, "COPTIC SYMBOL MI RO");
				break;
			case 0x2CE6:
				strcpy_s(buf, buf_size, "COPTIC SYMBOL PI RO");
				break;
			case 0x2CE7:
				strcpy_s(buf, buf_size, "COPTIC SYMBOL STAUROS");
				break;
			case 0x2CE8:
				strcpy_s(buf, buf_size, "COPTIC SYMBOL TAU RO");
				break;
			case 0x2CE9:
				strcpy_s(buf, buf_size, "COPTIC SYMBOL KHI RO");
				break;
			case 0x2CEA:
				strcpy_s(buf, buf_size, "COPTIC SYMBOL SHIMA SIMA");
				break;
			case 0x2CEB:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER CRYPTOGRAMMIC SHEI");
				break;
			case 0x2CEC:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER CRYPTOGRAMMIC SHEI");
				break;
			case 0x2CED:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER CRYPTOGRAMMIC GANGIA");
				break;
			case 0x2CEE:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER CRYPTOGRAMMIC GANGIA");
				break;
			case 0x2CEF:
				strcpy_s(buf, buf_size, "COPTIC COMBINING NI ABOVE");
				break;
			case 0x2CF0:
				strcpy_s(buf, buf_size, "COPTIC COMBINING SPIRITUS ASPER");
				break;
			case 0x2CF1:
				strcpy_s(buf, buf_size, "COPTIC COMBINING SPIRITUS LENIS");
				break;
			case 0x2CF2:
				strcpy_s(buf, buf_size, "COPTIC CAPITAL LETTER BOHAIRIC KHEI");
				break;
			case 0x2CF3:
				strcpy_s(buf, buf_size, "COPTIC SMALL LETTER BOHAIRIC KHEI");
				break;
			case 0x2CF9:
				strcpy_s(buf, buf_size, "COPTIC OLD NUBIAN FULL STOP");
				break;
			case 0x2CFA:
				strcpy_s(buf, buf_size, "COPTIC OLD NUBIAN DIRECT QUESTION MARK");
				break;
			case 0x2CFB:
				strcpy_s(buf, buf_size, "COPTIC OLD NUBIAN INDIRECT QUESTION MARK");
				break;
			case 0x2CFC:
				strcpy_s(buf, buf_size, "COPTIC OLD NUBIAN VERSE DIVIDER");
				break;
			case 0x2CFD:
				strcpy_s(buf, buf_size, "COPTIC FRACTION ONE HALF");
				break;
			case 0x2CFE:
				strcpy_s(buf, buf_size, "COPTIC FULL STOP");
				break;
			case 0x2CFF:
				strcpy_s(buf, buf_size, "COPTIC MORPHOLOGICAL DIVIDER");
				break;
			case 0x2D00:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER AN");
				break;
			case 0x2D01:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER BAN");
				break;
			case 0x2D02:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER GAN");
				break;
			case 0x2D03:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER DON");
				break;
			case 0x2D04:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER EN");
				break;
			case 0x2D05:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER VIN");
				break;
			case 0x2D06:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER ZEN");
				break;
			case 0x2D07:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER TAN");
				break;
			case 0x2D08:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER IN");
				break;
			case 0x2D09:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER KAN");
				break;
			case 0x2D0A:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER LAS");
				break;
			case 0x2D0B:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER MAN");
				break;
			case 0x2D0C:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER NAR");
				break;
			case 0x2D0D:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER ON");
				break;
			case 0x2D0E:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER PAR");
				break;
			case 0x2D0F:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER ZHAR");
				break;
			case 0x2D10:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER RAE");
				break;
			case 0x2D11:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER SAN");
				break;
			case 0x2D12:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER TAR");
				break;
			case 0x2D13:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER UN");
				break;
			case 0x2D14:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER PHAR");
				break;
			case 0x2D15:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER KHAR");
				break;
			case 0x2D16:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER GHAN");
				break;
			case 0x2D17:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER QAR");
				break;
			case 0x2D18:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER SHIN");
				break;
			case 0x2D19:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER CHIN");
				break;
			case 0x2D1A:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER CAN");
				break;
			case 0x2D1B:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER JIL");
				break;
			case 0x2D1C:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER CIL");
				break;
			case 0x2D1D:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER CHAR");
				break;
			case 0x2D1E:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER XAN");
				break;
			case 0x2D1F:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER JHAN");
				break;
			case 0x2D20:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER HAE");
				break;
			case 0x2D21:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER HE");
				break;
			case 0x2D22:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER HIE");
				break;
			case 0x2D23:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER WE");
				break;
			case 0x2D24:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER HAR");
				break;
			case 0x2D25:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER HOE");
				break;
			case 0x2D27:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER YN");
				break;
			case 0x2D2D:
				strcpy_s(buf, buf_size, "GEORGIAN SMALL LETTER AEN");
				break;
			case 0x2D30:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YA");
				break;
			case 0x2D31:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAB");
				break;
			case 0x2D32:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YABH");
				break;
			case 0x2D33:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAG");
				break;
			case 0x2D34:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAGHH");
				break;
			case 0x2D35:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER BERBER ACADEMY YAJ");
				break;
			case 0x2D36:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAJ");
				break;
			case 0x2D37:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAD");
				break;
			case 0x2D38:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YADH");
				break;
			case 0x2D39:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YADD");
				break;
			case 0x2D3A:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YADDH");
				break;
			case 0x2D3B:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YEY");
				break;
			case 0x2D3C:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAF");
				break;
			case 0x2D3D:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAK");
				break;
			case 0x2D3E:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER TUAREG YAK");
				break;
			case 0x2D3F:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAKHH");
				break;
			case 0x2D40:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAH");
				break;
			case 0x2D41:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER BERBER ACADEMY YAH");
				break;
			case 0x2D42:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER TUAREG YAH");
				break;
			case 0x2D43:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAHH");
				break;
			case 0x2D44:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAA");
				break;
			case 0x2D45:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAKH");
				break;
			case 0x2D46:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER TUAREG YAKH");
				break;
			case 0x2D47:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAQ");
				break;
			case 0x2D48:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER TUAREG YAQ");
				break;
			case 0x2D49:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YI");
				break;
			case 0x2D4A:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAZH");
				break;
			case 0x2D4B:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER AHAGGAR YAZH");
				break;
			case 0x2D4C:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER TUAREG YAZH");
				break;
			case 0x2D4D:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAL");
				break;
			case 0x2D4E:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAM");
				break;
			case 0x2D4F:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAN");
				break;
			case 0x2D50:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER TUAREG YAGN");
				break;
			case 0x2D51:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER TUAREG YANG");
				break;
			case 0x2D52:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAP");
				break;
			case 0x2D53:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YU");
				break;
			case 0x2D54:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAR");
				break;
			case 0x2D55:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YARR");
				break;
			case 0x2D56:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAGH");
				break;
			case 0x2D57:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER TUAREG YAGH");
				break;
			case 0x2D58:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER AYER YAGH");
				break;
			case 0x2D59:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAS");
				break;
			case 0x2D5A:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YASS");
				break;
			case 0x2D5B:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YASH");
				break;
			case 0x2D5C:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAT");
				break;
			case 0x2D5D:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YATH");
				break;
			case 0x2D5E:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YACH");
				break;
			case 0x2D5F:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YATT");
				break;
			case 0x2D60:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAV");
				break;
			case 0x2D61:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAW");
				break;
			case 0x2D62:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAY");
				break;
			case 0x2D63:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAZ");
				break;
			case 0x2D64:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER TAWELLEMET YAZ");
				break;
			case 0x2D65:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YAZZ");
				break;
			case 0x2D66:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YE");
				break;
			case 0x2D67:
				strcpy_s(buf, buf_size, "TIFINAGH LETTER YO");
				break;
			case 0x2D6F:
				strcpy_s(buf, buf_size, "TIFINAGH MODIFIER LETTER LABIALIZATION MARK");
				break;
			case 0x2D70:
				strcpy_s(buf, buf_size, "TIFINAGH SEPARATOR MARK");
				break;
			case 0x2D7F:
				strcpy_s(buf, buf_size, "TIFINAGH CONSONANT JOINER");
				break;
			case 0x2D80:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE LOA");
				break;
			case 0x2D81:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE MOA");
				break;
			case 0x2D82:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ROA");
				break;
			case 0x2D83:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SOA");
				break;
			case 0x2D84:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SHOA");
				break;
			case 0x2D85:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BOA");
				break;
			case 0x2D86:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TOA");
				break;
			case 0x2D87:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE COA");
				break;
			case 0x2D88:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NOA");
				break;
			case 0x2D89:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE NYOA");
				break;
			case 0x2D8A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GLOTTAL OA");
				break;
			case 0x2D8B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZOA");
				break;
			case 0x2D8C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DOA");
				break;
			case 0x2D8D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDOA");
				break;
			case 0x2D8E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE JOA");
				break;
			case 0x2D8F:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE THOA");
				break;
			case 0x2D90:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CHOA");
				break;
			case 0x2D91:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE PHOA");
				break;
			case 0x2D92:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE POA");
				break;
			case 0x2D93:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGWA");
				break;
			case 0x2D94:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGWI");
				break;
			case 0x2D95:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGWEE");
				break;
			case 0x2D96:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GGWE");
				break;
			case 0x2DA0:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SSA");
				break;
			case 0x2DA1:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SSU");
				break;
			case 0x2DA2:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SSI");
				break;
			case 0x2DA3:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SSAA");
				break;
			case 0x2DA4:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SSEE");
				break;
			case 0x2DA5:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SSE");
				break;
			case 0x2DA6:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE SSO");
				break;
			case 0x2DA8:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCA");
				break;
			case 0x2DA9:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCU");
				break;
			case 0x2DAA:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCI");
				break;
			case 0x2DAB:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCAA");
				break;
			case 0x2DAC:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCEE");
				break;
			case 0x2DAD:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCE");
				break;
			case 0x2DAE:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCO");
				break;
			case 0x2DB0:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZZA");
				break;
			case 0x2DB1:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZZU");
				break;
			case 0x2DB2:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZZI");
				break;
			case 0x2DB3:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZZAA");
				break;
			case 0x2DB4:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZZEE");
				break;
			case 0x2DB5:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZZE");
				break;
			case 0x2DB6:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE ZZO");
				break;
			case 0x2DB8:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHA");
				break;
			case 0x2DB9:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHU");
				break;
			case 0x2DBA:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHI");
				break;
			case 0x2DBB:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHAA");
				break;
			case 0x2DBC:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHEE");
				break;
			case 0x2DBD:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHE");
				break;
			case 0x2DBE:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHO");
				break;
			case 0x2DC0:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QYA");
				break;
			case 0x2DC1:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QYU");
				break;
			case 0x2DC2:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QYI");
				break;
			case 0x2DC3:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QYAA");
				break;
			case 0x2DC4:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QYEE");
				break;
			case 0x2DC5:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QYE");
				break;
			case 0x2DC6:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE QYO");
				break;
			case 0x2DC8:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KYA");
				break;
			case 0x2DC9:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KYU");
				break;
			case 0x2DCA:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KYI");
				break;
			case 0x2DCB:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KYAA");
				break;
			case 0x2DCC:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KYEE");
				break;
			case 0x2DCD:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KYE");
				break;
			case 0x2DCE:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE KYO");
				break;
			case 0x2DD0:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XYA");
				break;
			case 0x2DD1:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XYU");
				break;
			case 0x2DD2:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XYI");
				break;
			case 0x2DD3:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XYAA");
				break;
			case 0x2DD4:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XYEE");
				break;
			case 0x2DD5:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XYE");
				break;
			case 0x2DD6:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE XYO");
				break;
			case 0x2DD8:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GYA");
				break;
			case 0x2DD9:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GYU");
				break;
			case 0x2DDA:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GYI");
				break;
			case 0x2DDB:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GYAA");
				break;
			case 0x2DDC:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GYEE");
				break;
			case 0x2DDD:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GYE");
				break;
			case 0x2DDE:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE GYO");
				break;
			case 0x2DE0:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER BE");
				break;
			case 0x2DE1:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER VE");
				break;
			case 0x2DE2:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER GHE");
				break;
			case 0x2DE3:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER DE");
				break;
			case 0x2DE4:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER ZHE");
				break;
			case 0x2DE5:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER ZE");
				break;
			case 0x2DE6:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER KA");
				break;
			case 0x2DE7:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER EL");
				break;
			case 0x2DE8:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER EM");
				break;
			case 0x2DE9:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER EN");
				break;
			case 0x2DEA:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER O");
				break;
			case 0x2DEB:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER PE");
				break;
			case 0x2DEC:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER ER");
				break;
			case 0x2DED:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER ES");
				break;
			case 0x2DEE:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER TE");
				break;
			case 0x2DEF:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER HA");
				break;
			case 0x2DF0:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER TSE");
				break;
			case 0x2DF1:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER CHE");
				break;
			case 0x2DF2:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER SHA");
				break;
			case 0x2DF3:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER SHCHA");
				break;
			case 0x2DF4:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER FITA");
				break;
			case 0x2DF5:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER ES-TE");
				break;
			case 0x2DF6:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER A");
				break;
			case 0x2DF7:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER IE");
				break;
			case 0x2DF8:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER DJERV");
				break;
			case 0x2DF9:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER MONOGRAPH UK");
				break;
			case 0x2DFA:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER YAT");
				break;
			case 0x2DFB:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER YU");
				break;
			case 0x2DFC:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER IOTIFIED A");
				break;
			case 0x2DFD:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER LITTLE YUS");
				break;
			case 0x2DFE:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER BIG YUS");
				break;
			case 0x2DFF:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER IOTIFIED BIG YUS");
				break;
			case 0x2E00:
				strcpy_s(buf, buf_size, "RIGHT ANGLE SUBSTITUTION MARKER");
				break;
			case 0x2E01:
				strcpy_s(buf, buf_size, "RIGHT ANGLE DOTTED SUBSTITUTION MARKER");
				break;
			case 0x2E02:
				strcpy_s(buf, buf_size, "LEFT SUBSTITUTION BRACKET");
				break;
			case 0x2E03:
				strcpy_s(buf, buf_size, "RIGHT SUBSTITUTION BRACKET");
				break;
			case 0x2E04:
				strcpy_s(buf, buf_size, "LEFT DOTTED SUBSTITUTION BRACKET");
				break;
			case 0x2E05:
				strcpy_s(buf, buf_size, "RIGHT DOTTED SUBSTITUTION BRACKET");
				break;
			case 0x2E06:
				strcpy_s(buf, buf_size, "RAISED INTERPOLATION MARKER");
				break;
			case 0x2E07:
				strcpy_s(buf, buf_size, "RAISED DOTTED INTERPOLATION MARKER");
				break;
			case 0x2E08:
				strcpy_s(buf, buf_size, "DOTTED TRANSPOSITION MARKER");
				break;
			case 0x2E09:
				strcpy_s(buf, buf_size, "LEFT TRANSPOSITION BRACKET");
				break;
			case 0x2E0A:
				strcpy_s(buf, buf_size, "RIGHT TRANSPOSITION BRACKET");
				break;
			case 0x2E0B:
				strcpy_s(buf, buf_size, "RAISED SQUARE");
				break;
			case 0x2E0C:
				strcpy_s(buf, buf_size, "LEFT RAISED OMISSION BRACKET");
				break;
			case 0x2E0D:
				strcpy_s(buf, buf_size, "RIGHT RAISED OMISSION BRACKET");
				break;
			case 0x2E0E:
				strcpy_s(buf, buf_size, "EDITORIAL CORONIS");
				break;
			case 0x2E0F:
				strcpy_s(buf, buf_size, "PARAGRAPHOS");
				break;
			case 0x2E10:
				strcpy_s(buf, buf_size, "FORKED PARAGRAPHOS");
				break;
			case 0x2E11:
				strcpy_s(buf, buf_size, "REVERSED FORKED PARAGRAPHOS");
				break;
			case 0x2E12:
				strcpy_s(buf, buf_size, "HYPODIASTOLE");
				break;
			case 0x2E13:
				strcpy_s(buf, buf_size, "DOTTED OBELOS");
				break;
			case 0x2E14:
				strcpy_s(buf, buf_size, "DOWNWARDS ANCORA");
				break;
			case 0x2E15:
				strcpy_s(buf, buf_size, "UPWARDS ANCORA");
				break;
			case 0x2E16:
				strcpy_s(buf, buf_size, "DOTTED RIGHT-POINTING ANGLE");
				break;
			case 0x2E17:
				strcpy_s(buf, buf_size, "DOUBLE OBLIQUE HYPHEN");
				break;
			case 0x2E18:
				strcpy_s(buf, buf_size, "INVERTED INTERROBANG");
				break;
			case 0x2E19:
				strcpy_s(buf, buf_size, "PALM BRANCH");
				break;
			case 0x2E1A:
				strcpy_s(buf, buf_size, "HYPHEN WITH DIAERESIS");
				break;
			case 0x2E1B:
				strcpy_s(buf, buf_size, "TILDE WITH RING ABOVE");
				break;
			case 0x2E1C:
				strcpy_s(buf, buf_size, "LEFT LOW PARAPHRASE BRACKET");
				break;
			case 0x2E1D:
				strcpy_s(buf, buf_size, "RIGHT LOW PARAPHRASE BRACKET");
				break;
			case 0x2E1E:
				strcpy_s(buf, buf_size, "TILDE WITH DOT ABOVE");
				break;
			case 0x2E1F:
				strcpy_s(buf, buf_size, "TILDE WITH DOT BELOW");
				break;
			case 0x2E20:
				strcpy_s(buf, buf_size, "LEFT VERTICAL BAR WITH QUILL");
				break;
			case 0x2E21:
				strcpy_s(buf, buf_size, "RIGHT VERTICAL BAR WITH QUILL");
				break;
			case 0x2E22:
				strcpy_s(buf, buf_size, "TOP LEFT HALF BRACKET");
				break;
			case 0x2E23:
				strcpy_s(buf, buf_size, "TOP RIGHT HALF BRACKET");
				break;
			case 0x2E24:
				strcpy_s(buf, buf_size, "BOTTOM LEFT HALF BRACKET");
				break;
			case 0x2E25:
				strcpy_s(buf, buf_size, "BOTTOM RIGHT HALF BRACKET");
				break;
			case 0x2E26:
				strcpy_s(buf, buf_size, "LEFT SIDEWAYS U BRACKET");
				break;
			case 0x2E27:
				strcpy_s(buf, buf_size, "RIGHT SIDEWAYS U BRACKET");
				break;
			case 0x2E28:
				strcpy_s(buf, buf_size, "LEFT DOUBLE PARENTHESIS");
				break;
			case 0x2E29:
				strcpy_s(buf, buf_size, "RIGHT DOUBLE PARENTHESIS");
				break;
			case 0x2E2A:
				strcpy_s(buf, buf_size, "TWO DOTS OVER ONE DOT PUNCTUATION");
				break;
			case 0x2E2B:
				strcpy_s(buf, buf_size, "ONE DOT OVER TWO DOTS PUNCTUATION");
				break;
			case 0x2E2C:
				strcpy_s(buf, buf_size, "SQUARED FOUR DOT PUNCTUATION");
				break;
			case 0x2E2D:
				strcpy_s(buf, buf_size, "FIVE DOT MARK");
				break;
			case 0x2E2E:
				strcpy_s(buf, buf_size, "REVERSED QUESTION MARK");
				break;
			case 0x2E2F:
				strcpy_s(buf, buf_size, "VERTICAL TILDE");
				break;
			case 0x2E30:
				strcpy_s(buf, buf_size, "RING POINT");
				break;
			case 0x2E31:
				strcpy_s(buf, buf_size, "WORD SEPARATOR MIDDLE DOT");
				break;
			case 0x2E32:
				strcpy_s(buf, buf_size, "TURNED COMMA");
				break;
			case 0x2E33:
				strcpy_s(buf, buf_size, "RAISED DOT");
				break;
			case 0x2E34:
				strcpy_s(buf, buf_size, "RAISED COMMA");
				break;
			case 0x2E35:
				strcpy_s(buf, buf_size, "TURNED SEMICOLON");
				break;
			case 0x2E36:
				strcpy_s(buf, buf_size, "DAGGER WITH LEFT GUARD");
				break;
			case 0x2E37:
				strcpy_s(buf, buf_size, "DAGGER WITH RIGHT GUARD");
				break;
			case 0x2E38:
				strcpy_s(buf, buf_size, "TURNED DAGGER");
				break;
			case 0x2E39:
				strcpy_s(buf, buf_size, "TOP HALF SECTION SIGN");
				break;
			case 0x2E3A:
				strcpy_s(buf, buf_size, "TWO-EM DASH");
				break;
			case 0x2E3B:
				strcpy_s(buf, buf_size, "THREE-EM DASH");
				break;
			case 0x2E3C:
				strcpy_s(buf, buf_size, "STENOGRAPHIC FULL STOP");
				break;
			case 0x2E3D:
				strcpy_s(buf, buf_size, "VERTICAL SIX DOTS");
				break;
			case 0x2E3E:
				strcpy_s(buf, buf_size, "WIGGLY VERTICAL LINE");
				break;
			case 0x2E3F:
				strcpy_s(buf, buf_size, "CAPITULUM");
				break;
			case 0x2E40:
				strcpy_s(buf, buf_size, "DOUBLE HYPHEN");
				break;
			case 0x2E41:
				strcpy_s(buf, buf_size, "REVERSED COMMA");
				break;
			case 0x2E42:
				strcpy_s(buf, buf_size, "DOUBLE LOW-REVERSED-9 QUOTATION MARK");
				break;
			case 0x2E43:
				strcpy_s(buf, buf_size, "DASH WITH LEFT UPTURN");
				break;
			case 0x2E44:
				strcpy_s(buf, buf_size, "DOUBLE SUSPENSION MARK");
				break;
			case 0x2E45:
				strcpy_s(buf, buf_size, "INVERTED LOW KAVYKA");
				break;
			case 0x2E46:
				strcpy_s(buf, buf_size, "INVERTED LOW KAVYKA WITH KAVYKA ABOVE");
				break;
			case 0x2E47:
				strcpy_s(buf, buf_size, "LOW KAVYKA");
				break;
			case 0x2E48:
				strcpy_s(buf, buf_size, "LOW KAVYKA WITH DOT");
				break;
			case 0x2E49:
				strcpy_s(buf, buf_size, "DOUBLE STACKED COMMA");
				break;
			case 0x2E4A:
				strcpy_s(buf, buf_size, "DOTTED SOLIDUS");
				break;
			case 0x2E4B:
				strcpy_s(buf, buf_size, "TRIPLE DAGGER");
				break;
			case 0x2E4C:
				strcpy_s(buf, buf_size, "MEDIEVAL COMMA");
				break;
			case 0x2E4D:
				strcpy_s(buf, buf_size, "PARAGRAPHUS MARK");
				break;
			case 0x2E4E:
				strcpy_s(buf, buf_size, "PUNCTUS ELEVATUS MARK");
				break;
			case 0x2E4F:
				strcpy_s(buf, buf_size, "CORNISH VERSE DIVIDER");
				break;
			case 0x2E50:
				strcpy_s(buf, buf_size, "CROSS PATTY WITH RIGHT CROSSBAR");
				break;
			case 0x2E51:
				strcpy_s(buf, buf_size, "CROSS PATTY WITH LEFT CROSSBAR");
				break;
			case 0x2E52:
				strcpy_s(buf, buf_size, "TIRONIAN SIGN CAPITAL ET");
				break;
			case 0x2E80:
				strcpy_s(buf, buf_size, "CJK RADICAL REPEAT");
				break;
			case 0x2E81:
				strcpy_s(buf, buf_size, "CJK RADICAL CLIFF");
				break;
			case 0x2E82:
				strcpy_s(buf, buf_size, "CJK RADICAL SECOND ONE");
				break;
			case 0x2E83:
				strcpy_s(buf, buf_size, "CJK RADICAL SECOND TWO");
				break;
			case 0x2E84:
				strcpy_s(buf, buf_size, "CJK RADICAL SECOND THREE");
				break;
			case 0x2E85:
				strcpy_s(buf, buf_size, "CJK RADICAL PERSON");
				break;
			case 0x2E86:
				strcpy_s(buf, buf_size, "CJK RADICAL BOX");
				break;
			case 0x2E87:
				strcpy_s(buf, buf_size, "CJK RADICAL TABLE");
				break;
			case 0x2E88:
				strcpy_s(buf, buf_size, "CJK RADICAL KNIFE ONE");
				break;
			case 0x2E89:
				strcpy_s(buf, buf_size, "CJK RADICAL KNIFE TWO");
				break;
			case 0x2E8A:
				strcpy_s(buf, buf_size, "CJK RADICAL DIVINATION");
				break;
			case 0x2E8B:
				strcpy_s(buf, buf_size, "CJK RADICAL SEAL");
				break;
			case 0x2E8C:
				strcpy_s(buf, buf_size, "CJK RADICAL SMALL ONE");
				break;
			case 0x2E8D:
				strcpy_s(buf, buf_size, "CJK RADICAL SMALL TWO");
				break;
			case 0x2E8E:
				strcpy_s(buf, buf_size, "CJK RADICAL LAME ONE");
				break;
			case 0x2E8F:
				strcpy_s(buf, buf_size, "CJK RADICAL LAME TWO");
				break;
			case 0x2E90:
				strcpy_s(buf, buf_size, "CJK RADICAL LAME THREE");
				break;
			case 0x2E91:
				strcpy_s(buf, buf_size, "CJK RADICAL LAME FOUR");
				break;
			case 0x2E92:
				strcpy_s(buf, buf_size, "CJK RADICAL SNAKE");
				break;
			case 0x2E93:
				strcpy_s(buf, buf_size, "CJK RADICAL THREAD");
				break;
			case 0x2E94:
				strcpy_s(buf, buf_size, "CJK RADICAL SNOUT ONE");
				break;
			case 0x2E95:
				strcpy_s(buf, buf_size, "CJK RADICAL SNOUT TWO");
				break;
			case 0x2E96:
				strcpy_s(buf, buf_size, "CJK RADICAL HEART ONE");
				break;
			case 0x2E97:
				strcpy_s(buf, buf_size, "CJK RADICAL HEART TWO");
				break;
			case 0x2E98:
				strcpy_s(buf, buf_size, "CJK RADICAL HAND");
				break;
			case 0x2E99:
				strcpy_s(buf, buf_size, "CJK RADICAL RAP");
				break;
			case 0x2E9B:
				strcpy_s(buf, buf_size, "CJK RADICAL CHOKE");
				break;
			case 0x2E9C:
				strcpy_s(buf, buf_size, "CJK RADICAL SUN");
				break;
			case 0x2E9D:
				strcpy_s(buf, buf_size, "CJK RADICAL MOON");
				break;
			case 0x2E9E:
				strcpy_s(buf, buf_size, "CJK RADICAL DEATH");
				break;
			case 0x2E9F:
				strcpy_s(buf, buf_size, "CJK RADICAL MOTHER");
				break;
			case 0x2EA0:
				strcpy_s(buf, buf_size, "CJK RADICAL CIVILIAN");
				break;
			case 0x2EA1:
				strcpy_s(buf, buf_size, "CJK RADICAL WATER ONE");
				break;
			case 0x2EA2:
				strcpy_s(buf, buf_size, "CJK RADICAL WATER TWO");
				break;
			case 0x2EA3:
				strcpy_s(buf, buf_size, "CJK RADICAL FIRE");
				break;
			case 0x2EA4:
				strcpy_s(buf, buf_size, "CJK RADICAL PAW ONE");
				break;
			case 0x2EA5:
				strcpy_s(buf, buf_size, "CJK RADICAL PAW TWO");
				break;
			case 0x2EA6:
				strcpy_s(buf, buf_size, "CJK RADICAL SIMPLIFIED HALF TREE TRUNK");
				break;
			case 0x2EA7:
				strcpy_s(buf, buf_size, "CJK RADICAL COW");
				break;
			case 0x2EA8:
				strcpy_s(buf, buf_size, "CJK RADICAL DOG");
				break;
			case 0x2EA9:
				strcpy_s(buf, buf_size, "CJK RADICAL JADE");
				break;
			case 0x2EAA:
				strcpy_s(buf, buf_size, "CJK RADICAL BOLT OF CLOTH");
				break;
			case 0x2EAB:
				strcpy_s(buf, buf_size, "CJK RADICAL EYE");
				break;
			case 0x2EAC:
				strcpy_s(buf, buf_size, "CJK RADICAL SPIRIT ONE");
				break;
			case 0x2EAD:
				strcpy_s(buf, buf_size, "CJK RADICAL SPIRIT TWO");
				break;
			case 0x2EAE:
				strcpy_s(buf, buf_size, "CJK RADICAL BAMBOO");
				break;
			case 0x2EAF:
				strcpy_s(buf, buf_size, "CJK RADICAL SILK");
				break;
			case 0x2EB0:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED SILK");
				break;
			case 0x2EB1:
				strcpy_s(buf, buf_size, "CJK RADICAL NET ONE");
				break;
			case 0x2EB2:
				strcpy_s(buf, buf_size, "CJK RADICAL NET TWO");
				break;
			case 0x2EB3:
				strcpy_s(buf, buf_size, "CJK RADICAL NET THREE");
				break;
			case 0x2EB4:
				strcpy_s(buf, buf_size, "CJK RADICAL NET FOUR");
				break;
			case 0x2EB5:
				strcpy_s(buf, buf_size, "CJK RADICAL MESH");
				break;
			case 0x2EB6:
				strcpy_s(buf, buf_size, "CJK RADICAL SHEEP");
				break;
			case 0x2EB7:
				strcpy_s(buf, buf_size, "CJK RADICAL RAM");
				break;
			case 0x2EB8:
				strcpy_s(buf, buf_size, "CJK RADICAL EWE");
				break;
			case 0x2EB9:
				strcpy_s(buf, buf_size, "CJK RADICAL OLD");
				break;
			case 0x2EBA:
				strcpy_s(buf, buf_size, "CJK RADICAL BRUSH ONE");
				break;
			case 0x2EBB:
				strcpy_s(buf, buf_size, "CJK RADICAL BRUSH TWO");
				break;
			case 0x2EBC:
				strcpy_s(buf, buf_size, "CJK RADICAL MEAT");
				break;
			case 0x2EBD:
				strcpy_s(buf, buf_size, "CJK RADICAL MORTAR");
				break;
			case 0x2EBE:
				strcpy_s(buf, buf_size, "CJK RADICAL GRASS ONE");
				break;
			case 0x2EBF:
				strcpy_s(buf, buf_size, "CJK RADICAL GRASS TWO");
				break;
			case 0x2EC0:
				strcpy_s(buf, buf_size, "CJK RADICAL GRASS THREE");
				break;
			case 0x2EC1:
				strcpy_s(buf, buf_size, "CJK RADICAL TIGER");
				break;
			case 0x2EC2:
				strcpy_s(buf, buf_size, "CJK RADICAL CLOTHES");
				break;
			case 0x2EC3:
				strcpy_s(buf, buf_size, "CJK RADICAL WEST ONE");
				break;
			case 0x2EC4:
				strcpy_s(buf, buf_size, "CJK RADICAL WEST TWO");
				break;
			case 0x2EC5:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED SEE");
				break;
			case 0x2EC6:
				strcpy_s(buf, buf_size, "CJK RADICAL SIMPLIFIED HORN");
				break;
			case 0x2EC7:
				strcpy_s(buf, buf_size, "CJK RADICAL HORN");
				break;
			case 0x2EC8:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED SPEECH");
				break;
			case 0x2EC9:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED SHELL");
				break;
			case 0x2ECA:
				strcpy_s(buf, buf_size, "CJK RADICAL FOOT");
				break;
			case 0x2ECB:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED CART");
				break;
			case 0x2ECC:
				strcpy_s(buf, buf_size, "CJK RADICAL SIMPLIFIED WALK");
				break;
			case 0x2ECD:
				strcpy_s(buf, buf_size, "CJK RADICAL WALK ONE");
				break;
			case 0x2ECE:
				strcpy_s(buf, buf_size, "CJK RADICAL WALK TWO");
				break;
			case 0x2ECF:
				strcpy_s(buf, buf_size, "CJK RADICAL CITY");
				break;
			case 0x2ED0:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED GOLD");
				break;
			case 0x2ED1:
				strcpy_s(buf, buf_size, "CJK RADICAL LONG ONE");
				break;
			case 0x2ED2:
				strcpy_s(buf, buf_size, "CJK RADICAL LONG TWO");
				break;
			case 0x2ED3:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED LONG");
				break;
			case 0x2ED4:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED GATE");
				break;
			case 0x2ED5:
				strcpy_s(buf, buf_size, "CJK RADICAL MOUND ONE");
				break;
			case 0x2ED6:
				strcpy_s(buf, buf_size, "CJK RADICAL MOUND TWO");
				break;
			case 0x2ED7:
				strcpy_s(buf, buf_size, "CJK RADICAL RAIN");
				break;
			case 0x2ED8:
				strcpy_s(buf, buf_size, "CJK RADICAL BLUE");
				break;
			case 0x2ED9:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED TANNED LEATHER");
				break;
			case 0x2EDA:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED LEAF");
				break;
			case 0x2EDB:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED WIND");
				break;
			case 0x2EDC:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED FLY");
				break;
			case 0x2EDD:
				strcpy_s(buf, buf_size, "CJK RADICAL EAT ONE");
				break;
			case 0x2EDE:
				strcpy_s(buf, buf_size, "CJK RADICAL EAT TWO");
				break;
			case 0x2EDF:
				strcpy_s(buf, buf_size, "CJK RADICAL EAT THREE");
				break;
			case 0x2EE0:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED EAT");
				break;
			case 0x2EE1:
				strcpy_s(buf, buf_size, "CJK RADICAL HEAD");
				break;
			case 0x2EE2:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED HORSE");
				break;
			case 0x2EE3:
				strcpy_s(buf, buf_size, "CJK RADICAL BONE");
				break;
			case 0x2EE4:
				strcpy_s(buf, buf_size, "CJK RADICAL GHOST");
				break;
			case 0x2EE5:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED FISH");
				break;
			case 0x2EE6:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED BIRD");
				break;
			case 0x2EE7:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED SALT");
				break;
			case 0x2EE8:
				strcpy_s(buf, buf_size, "CJK RADICAL SIMPLIFIED WHEAT");
				break;
			case 0x2EE9:
				strcpy_s(buf, buf_size, "CJK RADICAL SIMPLIFIED YELLOW");
				break;
			case 0x2EEA:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED FROG");
				break;
			case 0x2EEB:
				strcpy_s(buf, buf_size, "CJK RADICAL J-SIMPLIFIED EVEN");
				break;
			case 0x2EEC:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED EVEN");
				break;
			case 0x2EED:
				strcpy_s(buf, buf_size, "CJK RADICAL J-SIMPLIFIED TOOTH");
				break;
			case 0x2EEE:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED TOOTH");
				break;
			case 0x2EEF:
				strcpy_s(buf, buf_size, "CJK RADICAL J-SIMPLIFIED DRAGON");
				break;
			case 0x2EF0:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED DRAGON");
				break;
			case 0x2EF1:
				strcpy_s(buf, buf_size, "CJK RADICAL TURTLE");
				break;
			case 0x2EF2:
				strcpy_s(buf, buf_size, "CJK RADICAL J-SIMPLIFIED TURTLE");
				break;
			case 0x2EF3:
				strcpy_s(buf, buf_size, "CJK RADICAL C-SIMPLIFIED TURTLE");
				break;
			case 0x2F00:
				strcpy_s(buf, buf_size, "KANGXI RADICAL ONE");
				break;
			case 0x2F01:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LINE");
				break;
			case 0x2F02:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DOT");
				break;
			case 0x2F03:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SLASH");
				break;
			case 0x2F04:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SECOND");
				break;
			case 0x2F05:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HOOK");
				break;
			case 0x2F06:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TWO");
				break;
			case 0x2F07:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LID");
				break;
			case 0x2F08:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MAN");
				break;
			case 0x2F09:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LEGS");
				break;
			case 0x2F0A:
				strcpy_s(buf, buf_size, "KANGXI RADICAL ENTER");
				break;
			case 0x2F0B:
				strcpy_s(buf, buf_size, "KANGXI RADICAL EIGHT");
				break;
			case 0x2F0C:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DOWN BOX");
				break;
			case 0x2F0D:
				strcpy_s(buf, buf_size, "KANGXI RADICAL COVER");
				break;
			case 0x2F0E:
				strcpy_s(buf, buf_size, "KANGXI RADICAL ICE");
				break;
			case 0x2F0F:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TABLE");
				break;
			case 0x2F10:
				strcpy_s(buf, buf_size, "KANGXI RADICAL OPEN BOX");
				break;
			case 0x2F11:
				strcpy_s(buf, buf_size, "KANGXI RADICAL KNIFE");
				break;
			case 0x2F12:
				strcpy_s(buf, buf_size, "KANGXI RADICAL POWER");
				break;
			case 0x2F13:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WRAP");
				break;
			case 0x2F14:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SPOON");
				break;
			case 0x2F15:
				strcpy_s(buf, buf_size, "KANGXI RADICAL RIGHT OPEN BOX");
				break;
			case 0x2F16:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HIDING ENCLOSURE");
				break;
			case 0x2F17:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TEN");
				break;
			case 0x2F18:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DIVINATION");
				break;
			case 0x2F19:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SEAL");
				break;
			case 0x2F1A:
				strcpy_s(buf, buf_size, "KANGXI RADICAL CLIFF");
				break;
			case 0x2F1B:
				strcpy_s(buf, buf_size, "KANGXI RADICAL PRIVATE");
				break;
			case 0x2F1C:
				strcpy_s(buf, buf_size, "KANGXI RADICAL AGAIN");
				break;
			case 0x2F1D:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MOUTH");
				break;
			case 0x2F1E:
				strcpy_s(buf, buf_size, "KANGXI RADICAL ENCLOSURE");
				break;
			case 0x2F1F:
				strcpy_s(buf, buf_size, "KANGXI RADICAL EARTH");
				break;
			case 0x2F20:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SCHOLAR");
				break;
			case 0x2F21:
				strcpy_s(buf, buf_size, "KANGXI RADICAL GO");
				break;
			case 0x2F22:
				strcpy_s(buf, buf_size, "KANGXI RADICAL GO SLOWLY");
				break;
			case 0x2F23:
				strcpy_s(buf, buf_size, "KANGXI RADICAL EVENING");
				break;
			case 0x2F24:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BIG");
				break;
			case 0x2F25:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WOMAN");
				break;
			case 0x2F26:
				strcpy_s(buf, buf_size, "KANGXI RADICAL CHILD");
				break;
			case 0x2F27:
				strcpy_s(buf, buf_size, "KANGXI RADICAL ROOF");
				break;
			case 0x2F28:
				strcpy_s(buf, buf_size, "KANGXI RADICAL INCH");
				break;
			case 0x2F29:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SMALL");
				break;
			case 0x2F2A:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LAME");
				break;
			case 0x2F2B:
				strcpy_s(buf, buf_size, "KANGXI RADICAL CORPSE");
				break;
			case 0x2F2C:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SPROUT");
				break;
			case 0x2F2D:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MOUNTAIN");
				break;
			case 0x2F2E:
				strcpy_s(buf, buf_size, "KANGXI RADICAL RIVER");
				break;
			case 0x2F2F:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WORK");
				break;
			case 0x2F30:
				strcpy_s(buf, buf_size, "KANGXI RADICAL ONESELF");
				break;
			case 0x2F31:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TURBAN");
				break;
			case 0x2F32:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DRY");
				break;
			case 0x2F33:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SHORT THREAD");
				break;
			case 0x2F34:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DOTTED CLIFF");
				break;
			case 0x2F35:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LONG STRIDE");
				break;
			case 0x2F36:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TWO HANDS");
				break;
			case 0x2F37:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SHOOT");
				break;
			case 0x2F38:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BOW");
				break;
			case 0x2F39:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SNOUT");
				break;
			case 0x2F3A:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BRISTLE");
				break;
			case 0x2F3B:
				strcpy_s(buf, buf_size, "KANGXI RADICAL STEP");
				break;
			case 0x2F3C:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HEART");
				break;
			case 0x2F3D:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HALBERD");
				break;
			case 0x2F3E:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DOOR");
				break;
			case 0x2F3F:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HAND");
				break;
			case 0x2F40:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BRANCH");
				break;
			case 0x2F41:
				strcpy_s(buf, buf_size, "KANGXI RADICAL RAP");
				break;
			case 0x2F42:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SCRIPT");
				break;
			case 0x2F43:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DIPPER");
				break;
			case 0x2F44:
				strcpy_s(buf, buf_size, "KANGXI RADICAL AXE");
				break;
			case 0x2F45:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SQUARE");
				break;
			case 0x2F46:
				strcpy_s(buf, buf_size, "KANGXI RADICAL NOT");
				break;
			case 0x2F47:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SUN");
				break;
			case 0x2F48:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SAY");
				break;
			case 0x2F49:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MOON");
				break;
			case 0x2F4A:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TREE");
				break;
			case 0x2F4B:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LACK");
				break;
			case 0x2F4C:
				strcpy_s(buf, buf_size, "KANGXI RADICAL STOP");
				break;
			case 0x2F4D:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DEATH");
				break;
			case 0x2F4E:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WEAPON");
				break;
			case 0x2F4F:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DO NOT");
				break;
			case 0x2F50:
				strcpy_s(buf, buf_size, "KANGXI RADICAL COMPARE");
				break;
			case 0x2F51:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FUR");
				break;
			case 0x2F52:
				strcpy_s(buf, buf_size, "KANGXI RADICAL CLAN");
				break;
			case 0x2F53:
				strcpy_s(buf, buf_size, "KANGXI RADICAL STEAM");
				break;
			case 0x2F54:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WATER");
				break;
			case 0x2F55:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FIRE");
				break;
			case 0x2F56:
				strcpy_s(buf, buf_size, "KANGXI RADICAL CLAW");
				break;
			case 0x2F57:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FATHER");
				break;
			case 0x2F58:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DOUBLE X");
				break;
			case 0x2F59:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HALF TREE TRUNK");
				break;
			case 0x2F5A:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SLICE");
				break;
			case 0x2F5B:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FANG");
				break;
			case 0x2F5C:
				strcpy_s(buf, buf_size, "KANGXI RADICAL COW");
				break;
			case 0x2F5D:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DOG");
				break;
			case 0x2F5E:
				strcpy_s(buf, buf_size, "KANGXI RADICAL PROFOUND");
				break;
			case 0x2F5F:
				strcpy_s(buf, buf_size, "KANGXI RADICAL JADE");
				break;
			case 0x2F60:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MELON");
				break;
			case 0x2F61:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TILE");
				break;
			case 0x2F62:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SWEET");
				break;
			case 0x2F63:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LIFE");
				break;
			case 0x2F64:
				strcpy_s(buf, buf_size, "KANGXI RADICAL USE");
				break;
			case 0x2F65:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FIELD");
				break;
			case 0x2F66:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BOLT OF CLOTH");
				break;
			case 0x2F67:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SICKNESS");
				break;
			case 0x2F68:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DOTTED TENT");
				break;
			case 0x2F69:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WHITE");
				break;
			case 0x2F6A:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SKIN");
				break;
			case 0x2F6B:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DISH");
				break;
			case 0x2F6C:
				strcpy_s(buf, buf_size, "KANGXI RADICAL EYE");
				break;
			case 0x2F6D:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SPEAR");
				break;
			case 0x2F6E:
				strcpy_s(buf, buf_size, "KANGXI RADICAL ARROW");
				break;
			case 0x2F6F:
				strcpy_s(buf, buf_size, "KANGXI RADICAL STONE");
				break;
			case 0x2F70:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SPIRIT");
				break;
			case 0x2F71:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TRACK");
				break;
			case 0x2F72:
				strcpy_s(buf, buf_size, "KANGXI RADICAL GRAIN");
				break;
			case 0x2F73:
				strcpy_s(buf, buf_size, "KANGXI RADICAL CAVE");
				break;
			case 0x2F74:
				strcpy_s(buf, buf_size, "KANGXI RADICAL STAND");
				break;
			case 0x2F75:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BAMBOO");
				break;
			case 0x2F76:
				strcpy_s(buf, buf_size, "KANGXI RADICAL RICE");
				break;
			case 0x2F77:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SILK");
				break;
			case 0x2F78:
				strcpy_s(buf, buf_size, "KANGXI RADICAL JAR");
				break;
			case 0x2F79:
				strcpy_s(buf, buf_size, "KANGXI RADICAL NET");
				break;
			case 0x2F7A:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SHEEP");
				break;
			case 0x2F7B:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FEATHER");
				break;
			case 0x2F7C:
				strcpy_s(buf, buf_size, "KANGXI RADICAL OLD");
				break;
			case 0x2F7D:
				strcpy_s(buf, buf_size, "KANGXI RADICAL AND");
				break;
			case 0x2F7E:
				strcpy_s(buf, buf_size, "KANGXI RADICAL PLOW");
				break;
			case 0x2F7F:
				strcpy_s(buf, buf_size, "KANGXI RADICAL EAR");
				break;
			case 0x2F80:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BRUSH");
				break;
			case 0x2F81:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MEAT");
				break;
			case 0x2F82:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MINISTER");
				break;
			case 0x2F83:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SELF");
				break;
			case 0x2F84:
				strcpy_s(buf, buf_size, "KANGXI RADICAL ARRIVE");
				break;
			case 0x2F85:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MORTAR");
				break;
			case 0x2F86:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TONGUE");
				break;
			case 0x2F87:
				strcpy_s(buf, buf_size, "KANGXI RADICAL OPPOSE");
				break;
			case 0x2F88:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BOAT");
				break;
			case 0x2F89:
				strcpy_s(buf, buf_size, "KANGXI RADICAL STOPPING");
				break;
			case 0x2F8A:
				strcpy_s(buf, buf_size, "KANGXI RADICAL COLOR");
				break;
			case 0x2F8B:
				strcpy_s(buf, buf_size, "KANGXI RADICAL GRASS");
				break;
			case 0x2F8C:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TIGER");
				break;
			case 0x2F8D:
				strcpy_s(buf, buf_size, "KANGXI RADICAL INSECT");
				break;
			case 0x2F8E:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BLOOD");
				break;
			case 0x2F8F:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WALK ENCLOSURE");
				break;
			case 0x2F90:
				strcpy_s(buf, buf_size, "KANGXI RADICAL CLOTHES");
				break;
			case 0x2F91:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WEST");
				break;
			case 0x2F92:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SEE");
				break;
			case 0x2F93:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HORN");
				break;
			case 0x2F94:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SPEECH");
				break;
			case 0x2F95:
				strcpy_s(buf, buf_size, "KANGXI RADICAL VALLEY");
				break;
			case 0x2F96:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BEAN");
				break;
			case 0x2F97:
				strcpy_s(buf, buf_size, "KANGXI RADICAL PIG");
				break;
			case 0x2F98:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BADGER");
				break;
			case 0x2F99:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SHELL");
				break;
			case 0x2F9A:
				strcpy_s(buf, buf_size, "KANGXI RADICAL RED");
				break;
			case 0x2F9B:
				strcpy_s(buf, buf_size, "KANGXI RADICAL RUN");
				break;
			case 0x2F9C:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FOOT");
				break;
			case 0x2F9D:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BODY");
				break;
			case 0x2F9E:
				strcpy_s(buf, buf_size, "KANGXI RADICAL CART");
				break;
			case 0x2F9F:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BITTER");
				break;
			case 0x2FA0:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MORNING");
				break;
			case 0x2FA1:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WALK");
				break;
			case 0x2FA2:
				strcpy_s(buf, buf_size, "KANGXI RADICAL CITY");
				break;
			case 0x2FA3:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WINE");
				break;
			case 0x2FA4:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DISTINGUISH");
				break;
			case 0x2FA5:
				strcpy_s(buf, buf_size, "KANGXI RADICAL VILLAGE");
				break;
			case 0x2FA6:
				strcpy_s(buf, buf_size, "KANGXI RADICAL GOLD");
				break;
			case 0x2FA7:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LONG");
				break;
			case 0x2FA8:
				strcpy_s(buf, buf_size, "KANGXI RADICAL GATE");
				break;
			case 0x2FA9:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MOUND");
				break;
			case 0x2FAA:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SLAVE");
				break;
			case 0x2FAB:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SHORT TAILED BIRD");
				break;
			case 0x2FAC:
				strcpy_s(buf, buf_size, "KANGXI RADICAL RAIN");
				break;
			case 0x2FAD:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BLUE");
				break;
			case 0x2FAE:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WRONG");
				break;
			case 0x2FAF:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FACE");
				break;
			case 0x2FB0:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LEATHER");
				break;
			case 0x2FB1:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TANNED LEATHER");
				break;
			case 0x2FB2:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LEEK");
				break;
			case 0x2FB3:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SOUND");
				break;
			case 0x2FB4:
				strcpy_s(buf, buf_size, "KANGXI RADICAL LEAF");
				break;
			case 0x2FB5:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WIND");
				break;
			case 0x2FB6:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FLY");
				break;
			case 0x2FB7:
				strcpy_s(buf, buf_size, "KANGXI RADICAL EAT");
				break;
			case 0x2FB8:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HEAD");
				break;
			case 0x2FB9:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FRAGRANT");
				break;
			case 0x2FBA:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HORSE");
				break;
			case 0x2FBB:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BONE");
				break;
			case 0x2FBC:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TALL");
				break;
			case 0x2FBD:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HAIR");
				break;
			case 0x2FBE:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FIGHT");
				break;
			case 0x2FBF:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SACRIFICIAL WINE");
				break;
			case 0x2FC0:
				strcpy_s(buf, buf_size, "KANGXI RADICAL CAULDRON");
				break;
			case 0x2FC1:
				strcpy_s(buf, buf_size, "KANGXI RADICAL GHOST");
				break;
			case 0x2FC2:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FISH");
				break;
			case 0x2FC3:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BIRD");
				break;
			case 0x2FC4:
				strcpy_s(buf, buf_size, "KANGXI RADICAL SALT");
				break;
			case 0x2FC5:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DEER");
				break;
			case 0x2FC6:
				strcpy_s(buf, buf_size, "KANGXI RADICAL WHEAT");
				break;
			case 0x2FC7:
				strcpy_s(buf, buf_size, "KANGXI RADICAL HEMP");
				break;
			case 0x2FC8:
				strcpy_s(buf, buf_size, "KANGXI RADICAL YELLOW");
				break;
			case 0x2FC9:
				strcpy_s(buf, buf_size, "KANGXI RADICAL MILLET");
				break;
			case 0x2FCA:
				strcpy_s(buf, buf_size, "KANGXI RADICAL BLACK");
				break;
			case 0x2FCB:
				strcpy_s(buf, buf_size, "KANGXI RADICAL EMBROIDERY");
				break;
			case 0x2FCC:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FROG");
				break;
			case 0x2FCD:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TRIPOD");
				break;
			case 0x2FCE:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DRUM");
				break;
			case 0x2FCF:
				strcpy_s(buf, buf_size, "KANGXI RADICAL RAT");
				break;
			case 0x2FD0:
				strcpy_s(buf, buf_size, "KANGXI RADICAL NOSE");
				break;
			case 0x2FD1:
				strcpy_s(buf, buf_size, "KANGXI RADICAL EVEN");
				break;
			case 0x2FD2:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TOOTH");
				break;
			case 0x2FD3:
				strcpy_s(buf, buf_size, "KANGXI RADICAL DRAGON");
				break;
			case 0x2FD4:
				strcpy_s(buf, buf_size, "KANGXI RADICAL TURTLE");
				break;
			case 0x2FD5:
				strcpy_s(buf, buf_size, "KANGXI RADICAL FLUTE");
				break;
			case 0x2FF0:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO RIGHT");
				break;
			case 0x2FF1:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO BELOW");
				break;
			case 0x2FF2:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER LEFT TO MIDDLE AND RIGHT");
				break;
			case 0x2FF3:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER ABOVE TO MIDDLE AND BELOW");
				break;
			case 0x2FF4:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER FULL SURROUND");
				break;
			case 0x2FF5:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM ABOVE");
				break;
			case 0x2FF6:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM BELOW");
				break;
			case 0x2FF7:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LEFT");
				break;
			case 0x2FF8:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER LEFT");
				break;
			case 0x2FF9:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM UPPER RIGHT");
				break;
			case 0x2FFA:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER SURROUND FROM LOWER LEFT");
				break;
			case 0x2FFB:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DESCRIPTION CHARACTER OVERLAID");
				break;
			case 0x3000:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC SPACE");
				break;
			case 0x3001:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC COMMA");
				break;
			case 0x3002:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC FULL STOP");
				break;
			case 0x3003:
				strcpy_s(buf, buf_size, "DITTO MARK");
				break;
			case 0x3004:
				strcpy_s(buf, buf_size, "JAPANESE INDUSTRIAL STANDARD SYMBOL");
				break;
			case 0x3005:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ITERATION MARK");
				break;
			case 0x3006:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC CLOSING MARK");
				break;
			case 0x3007:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC NUMBER ZERO");
				break;
			case 0x3008:
				strcpy_s(buf, buf_size, "LEFT ANGLE BRACKET");
				break;
			case 0x3009:
				strcpy_s(buf, buf_size, "RIGHT ANGLE BRACKET");
				break;
			case 0x300A:
				strcpy_s(buf, buf_size, "LEFT DOUBLE ANGLE BRACKET");
				break;
			case 0x300B:
				strcpy_s(buf, buf_size, "RIGHT DOUBLE ANGLE BRACKET");
				break;
			case 0x300C:
				strcpy_s(buf, buf_size, "LEFT CORNER BRACKET");
				break;
			case 0x300D:
				strcpy_s(buf, buf_size, "RIGHT CORNER BRACKET");
				break;
			case 0x300E:
				strcpy_s(buf, buf_size, "LEFT WHITE CORNER BRACKET");
				break;
			case 0x300F:
				strcpy_s(buf, buf_size, "RIGHT WHITE CORNER BRACKET");
				break;
			case 0x3010:
				strcpy_s(buf, buf_size, "LEFT BLACK LENTICULAR BRACKET");
				break;
			case 0x3011:
				strcpy_s(buf, buf_size, "RIGHT BLACK LENTICULAR BRACKET");
				break;
			case 0x3012:
				strcpy_s(buf, buf_size, "POSTAL MARK");
				break;
			case 0x3013:
				strcpy_s(buf, buf_size, "GETA MARK");
				break;
			case 0x3014:
				strcpy_s(buf, buf_size, "LEFT TORTOISE SHELL BRACKET");
				break;
			case 0x3015:
				strcpy_s(buf, buf_size, "RIGHT TORTOISE SHELL BRACKET");
				break;
			case 0x3016:
				strcpy_s(buf, buf_size, "LEFT WHITE LENTICULAR BRACKET");
				break;
			case 0x3017:
				strcpy_s(buf, buf_size, "RIGHT WHITE LENTICULAR BRACKET");
				break;
			case 0x3018:
				strcpy_s(buf, buf_size, "LEFT WHITE TORTOISE SHELL BRACKET");
				break;
			case 0x3019:
				strcpy_s(buf, buf_size, "RIGHT WHITE TORTOISE SHELL BRACKET");
				break;
			case 0x301A:
				strcpy_s(buf, buf_size, "LEFT WHITE SQUARE BRACKET");
				break;
			case 0x301B:
				strcpy_s(buf, buf_size, "RIGHT WHITE SQUARE BRACKET");
				break;
			case 0x301C:
				strcpy_s(buf, buf_size, "WAVE DASH");
				break;
			case 0x301D:
				strcpy_s(buf, buf_size, "REVERSED DOUBLE PRIME QUOTATION MARK");
				break;
			case 0x301E:
				strcpy_s(buf, buf_size, "DOUBLE PRIME QUOTATION MARK");
				break;
			case 0x301F:
				strcpy_s(buf, buf_size, "LOW DOUBLE PRIME QUOTATION MARK");
				break;
			case 0x3020:
				strcpy_s(buf, buf_size, "POSTAL MARK FACE");
				break;
			case 0x3021:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL ONE");
				break;
			case 0x3022:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL TWO");
				break;
			case 0x3023:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL THREE");
				break;
			case 0x3024:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL FOUR");
				break;
			case 0x3025:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL FIVE");
				break;
			case 0x3026:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL SIX");
				break;
			case 0x3027:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL SEVEN");
				break;
			case 0x3028:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL EIGHT");
				break;
			case 0x3029:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL NINE");
				break;
			case 0x302A:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC LEVEL TONE MARK");
				break;
			case 0x302B:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC RISING TONE MARK");
				break;
			case 0x302C:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC DEPARTING TONE MARK");
				break;
			case 0x302D:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ENTERING TONE MARK");
				break;
			case 0x302E:
				strcpy_s(buf, buf_size, "HANGUL SINGLE DOT TONE MARK");
				break;
			case 0x302F:
				strcpy_s(buf, buf_size, "HANGUL DOUBLE DOT TONE MARK");
				break;
			case 0x3030:
				strcpy_s(buf, buf_size, "WAVY DASH");
				break;
			case 0x3031:
				strcpy_s(buf, buf_size, "VERTICAL KANA REPEAT MARK");
				break;
			case 0x3032:
				strcpy_s(buf, buf_size, "VERTICAL KANA REPEAT WITH VOICED SOUND MARK");
				break;
			case 0x3033:
				strcpy_s(buf, buf_size, "VERTICAL KANA REPEAT MARK UPPER HALF");
				break;
			case 0x3034:
				strcpy_s(buf, buf_size, "VERTICAL KANA REPEAT WITH VOICED SOUND MARK UPPER HALF");
				break;
			case 0x3035:
				strcpy_s(buf, buf_size, "VERTICAL KANA REPEAT MARK LOWER HALF");
				break;
			case 0x3036:
				strcpy_s(buf, buf_size, "CIRCLED POSTAL MARK");
				break;
			case 0x3037:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH LINE FEED SEPARATOR SYMBOL");
				break;
			case 0x3038:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL TEN");
				break;
			case 0x3039:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL TWENTY");
				break;
			case 0x303A:
				strcpy_s(buf, buf_size, "HANGZHOU NUMERAL THIRTY");
				break;
			case 0x303B:
				strcpy_s(buf, buf_size, "VERTICAL IDEOGRAPHIC ITERATION MARK");
				break;
			case 0x303C:
				strcpy_s(buf, buf_size, "MASU MARK");
				break;
			case 0x303D:
				strcpy_s(buf, buf_size, "PART ALTERNATION MARK");
				break;
			case 0x303E:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC VARIATION INDICATOR");
				break;
			case 0x303F:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC HALF FILL SPACE");
				break;
			case 0x3041:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL A");
				break;
			case 0x3042:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER A");
				break;
			case 0x3043:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL I");
				break;
			case 0x3044:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER I");
				break;
			case 0x3045:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL U");
				break;
			case 0x3046:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER U");
				break;
			case 0x3047:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL E");
				break;
			case 0x3048:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER E");
				break;
			case 0x3049:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL O");
				break;
			case 0x304A:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER O");
				break;
			case 0x304B:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER KA");
				break;
			case 0x304C:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER GA");
				break;
			case 0x304D:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER KI");
				break;
			case 0x304E:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER GI");
				break;
			case 0x304F:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER KU");
				break;
			case 0x3050:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER GU");
				break;
			case 0x3051:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER KE");
				break;
			case 0x3052:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER GE");
				break;
			case 0x3053:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER KO");
				break;
			case 0x3054:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER GO");
				break;
			case 0x3055:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SA");
				break;
			case 0x3056:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER ZA");
				break;
			case 0x3057:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SI");
				break;
			case 0x3058:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER ZI");
				break;
			case 0x3059:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SU");
				break;
			case 0x305A:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER ZU");
				break;
			case 0x305B:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SE");
				break;
			case 0x305C:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER ZE");
				break;
			case 0x305D:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SO");
				break;
			case 0x305E:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER ZO");
				break;
			case 0x305F:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER TA");
				break;
			case 0x3060:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER DA");
				break;
			case 0x3061:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER TI");
				break;
			case 0x3062:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER DI");
				break;
			case 0x3063:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL TU");
				break;
			case 0x3064:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER TU");
				break;
			case 0x3065:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER DU");
				break;
			case 0x3066:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER TE");
				break;
			case 0x3067:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER DE");
				break;
			case 0x3068:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER TO");
				break;
			case 0x3069:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER DO");
				break;
			case 0x306A:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER NA");
				break;
			case 0x306B:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER NI");
				break;
			case 0x306C:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER NU");
				break;
			case 0x306D:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER NE");
				break;
			case 0x306E:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER NO");
				break;
			case 0x306F:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER HA");
				break;
			case 0x3070:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER BA");
				break;
			case 0x3071:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER PA");
				break;
			case 0x3072:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER HI");
				break;
			case 0x3073:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER BI");
				break;
			case 0x3074:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER PI");
				break;
			case 0x3075:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER HU");
				break;
			case 0x3076:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER BU");
				break;
			case 0x3077:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER PU");
				break;
			case 0x3078:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER HE");
				break;
			case 0x3079:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER BE");
				break;
			case 0x307A:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER PE");
				break;
			case 0x307B:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER HO");
				break;
			case 0x307C:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER BO");
				break;
			case 0x307D:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER PO");
				break;
			case 0x307E:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER MA");
				break;
			case 0x307F:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER MI");
				break;
			case 0x3080:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER MU");
				break;
			case 0x3081:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER ME");
				break;
			case 0x3082:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER MO");
				break;
			case 0x3083:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL YA");
				break;
			case 0x3084:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER YA");
				break;
			case 0x3085:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL YU");
				break;
			case 0x3086:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER YU");
				break;
			case 0x3087:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL YO");
				break;
			case 0x3088:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER YO");
				break;
			case 0x3089:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER RA");
				break;
			case 0x308A:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER RI");
				break;
			case 0x308B:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER RU");
				break;
			case 0x308C:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER RE");
				break;
			case 0x308D:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER RO");
				break;
			case 0x308E:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL WA");
				break;
			case 0x308F:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER WA");
				break;
			case 0x3090:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER WI");
				break;
			case 0x3091:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER WE");
				break;
			case 0x3092:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER WO");
				break;
			case 0x3093:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER N");
				break;
			case 0x3094:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER VU");
				break;
			case 0x3095:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL KA");
				break;
			case 0x3096:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL KE");
				break;
			case 0x3099:
				strcpy_s(buf, buf_size, "COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK");
				break;
			case 0x309A:
				strcpy_s(buf, buf_size, "COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK");
				break;
			case 0x309B:
				strcpy_s(buf, buf_size, "KATAKANA-HIRAGANA VOICED SOUND MARK");
				break;
			case 0x309C:
				strcpy_s(buf, buf_size, "KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK");
				break;
			case 0x309D:
				strcpy_s(buf, buf_size, "HIRAGANA ITERATION MARK");
				break;
			case 0x309E:
				strcpy_s(buf, buf_size, "HIRAGANA VOICED ITERATION MARK");
				break;
			case 0x309F:
				strcpy_s(buf, buf_size, "HIRAGANA DIGRAPH YORI");
				break;
			case 0x30A0:
				strcpy_s(buf, buf_size, "KATAKANA-HIRAGANA DOUBLE HYPHEN");
				break;
			case 0x30A1:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL A");
				break;
			case 0x30A2:
				strcpy_s(buf, buf_size, "KATAKANA LETTER A");
				break;
			case 0x30A3:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL I");
				break;
			case 0x30A4:
				strcpy_s(buf, buf_size, "KATAKANA LETTER I");
				break;
			case 0x30A5:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL U");
				break;
			case 0x30A6:
				strcpy_s(buf, buf_size, "KATAKANA LETTER U");
				break;
			case 0x30A7:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL E");
				break;
			case 0x30A8:
				strcpy_s(buf, buf_size, "KATAKANA LETTER E");
				break;
			case 0x30A9:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL O");
				break;
			case 0x30AA:
				strcpy_s(buf, buf_size, "KATAKANA LETTER O");
				break;
			case 0x30AB:
				strcpy_s(buf, buf_size, "KATAKANA LETTER KA");
				break;
			case 0x30AC:
				strcpy_s(buf, buf_size, "KATAKANA LETTER GA");
				break;
			case 0x30AD:
				strcpy_s(buf, buf_size, "KATAKANA LETTER KI");
				break;
			case 0x30AE:
				strcpy_s(buf, buf_size, "KATAKANA LETTER GI");
				break;
			case 0x30AF:
				strcpy_s(buf, buf_size, "KATAKANA LETTER KU");
				break;
			case 0x30B0:
				strcpy_s(buf, buf_size, "KATAKANA LETTER GU");
				break;
			case 0x30B1:
				strcpy_s(buf, buf_size, "KATAKANA LETTER KE");
				break;
			case 0x30B2:
				strcpy_s(buf, buf_size, "KATAKANA LETTER GE");
				break;
			case 0x30B3:
				strcpy_s(buf, buf_size, "KATAKANA LETTER KO");
				break;
			case 0x30B4:
				strcpy_s(buf, buf_size, "KATAKANA LETTER GO");
				break;
			case 0x30B5:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SA");
				break;
			case 0x30B6:
				strcpy_s(buf, buf_size, "KATAKANA LETTER ZA");
				break;
			case 0x30B7:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SI");
				break;
			case 0x30B8:
				strcpy_s(buf, buf_size, "KATAKANA LETTER ZI");
				break;
			case 0x30B9:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SU");
				break;
			case 0x30BA:
				strcpy_s(buf, buf_size, "KATAKANA LETTER ZU");
				break;
			case 0x30BB:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SE");
				break;
			case 0x30BC:
				strcpy_s(buf, buf_size, "KATAKANA LETTER ZE");
				break;
			case 0x30BD:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SO");
				break;
			case 0x30BE:
				strcpy_s(buf, buf_size, "KATAKANA LETTER ZO");
				break;
			case 0x30BF:
				strcpy_s(buf, buf_size, "KATAKANA LETTER TA");
				break;
			case 0x30C0:
				strcpy_s(buf, buf_size, "KATAKANA LETTER DA");
				break;
			case 0x30C1:
				strcpy_s(buf, buf_size, "KATAKANA LETTER TI");
				break;
			case 0x30C2:
				strcpy_s(buf, buf_size, "KATAKANA LETTER DI");
				break;
			case 0x30C3:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL TU");
				break;
			case 0x30C4:
				strcpy_s(buf, buf_size, "KATAKANA LETTER TU");
				break;
			case 0x30C5:
				strcpy_s(buf, buf_size, "KATAKANA LETTER DU");
				break;
			case 0x30C6:
				strcpy_s(buf, buf_size, "KATAKANA LETTER TE");
				break;
			case 0x30C7:
				strcpy_s(buf, buf_size, "KATAKANA LETTER DE");
				break;
			case 0x30C8:
				strcpy_s(buf, buf_size, "KATAKANA LETTER TO");
				break;
			case 0x30C9:
				strcpy_s(buf, buf_size, "KATAKANA LETTER DO");
				break;
			case 0x30CA:
				strcpy_s(buf, buf_size, "KATAKANA LETTER NA");
				break;
			case 0x30CB:
				strcpy_s(buf, buf_size, "KATAKANA LETTER NI");
				break;
			case 0x30CC:
				strcpy_s(buf, buf_size, "KATAKANA LETTER NU");
				break;
			case 0x30CD:
				strcpy_s(buf, buf_size, "KATAKANA LETTER NE");
				break;
			case 0x30CE:
				strcpy_s(buf, buf_size, "KATAKANA LETTER NO");
				break;
			case 0x30CF:
				strcpy_s(buf, buf_size, "KATAKANA LETTER HA");
				break;
			case 0x30D0:
				strcpy_s(buf, buf_size, "KATAKANA LETTER BA");
				break;
			case 0x30D1:
				strcpy_s(buf, buf_size, "KATAKANA LETTER PA");
				break;
			case 0x30D2:
				strcpy_s(buf, buf_size, "KATAKANA LETTER HI");
				break;
			case 0x30D3:
				strcpy_s(buf, buf_size, "KATAKANA LETTER BI");
				break;
			case 0x30D4:
				strcpy_s(buf, buf_size, "KATAKANA LETTER PI");
				break;
			case 0x30D5:
				strcpy_s(buf, buf_size, "KATAKANA LETTER HU");
				break;
			case 0x30D6:
				strcpy_s(buf, buf_size, "KATAKANA LETTER BU");
				break;
			case 0x30D7:
				strcpy_s(buf, buf_size, "KATAKANA LETTER PU");
				break;
			case 0x30D8:
				strcpy_s(buf, buf_size, "KATAKANA LETTER HE");
				break;
			case 0x30D9:
				strcpy_s(buf, buf_size, "KATAKANA LETTER BE");
				break;
			case 0x30DA:
				strcpy_s(buf, buf_size, "KATAKANA LETTER PE");
				break;
			case 0x30DB:
				strcpy_s(buf, buf_size, "KATAKANA LETTER HO");
				break;
			case 0x30DC:
				strcpy_s(buf, buf_size, "KATAKANA LETTER BO");
				break;
			case 0x30DD:
				strcpy_s(buf, buf_size, "KATAKANA LETTER PO");
				break;
			case 0x30DE:
				strcpy_s(buf, buf_size, "KATAKANA LETTER MA");
				break;
			case 0x30DF:
				strcpy_s(buf, buf_size, "KATAKANA LETTER MI");
				break;
			case 0x30E0:
				strcpy_s(buf, buf_size, "KATAKANA LETTER MU");
				break;
			case 0x30E1:
				strcpy_s(buf, buf_size, "KATAKANA LETTER ME");
				break;
			case 0x30E2:
				strcpy_s(buf, buf_size, "KATAKANA LETTER MO");
				break;
			case 0x30E3:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL YA");
				break;
			case 0x30E4:
				strcpy_s(buf, buf_size, "KATAKANA LETTER YA");
				break;
			case 0x30E5:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL YU");
				break;
			case 0x30E6:
				strcpy_s(buf, buf_size, "KATAKANA LETTER YU");
				break;
			case 0x30E7:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL YO");
				break;
			case 0x30E8:
				strcpy_s(buf, buf_size, "KATAKANA LETTER YO");
				break;
			case 0x30E9:
				strcpy_s(buf, buf_size, "KATAKANA LETTER RA");
				break;
			case 0x30EA:
				strcpy_s(buf, buf_size, "KATAKANA LETTER RI");
				break;
			case 0x30EB:
				strcpy_s(buf, buf_size, "KATAKANA LETTER RU");
				break;
			case 0x30EC:
				strcpy_s(buf, buf_size, "KATAKANA LETTER RE");
				break;
			case 0x30ED:
				strcpy_s(buf, buf_size, "KATAKANA LETTER RO");
				break;
			case 0x30EE:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL WA");
				break;
			case 0x30EF:
				strcpy_s(buf, buf_size, "KATAKANA LETTER WA");
				break;
			case 0x30F0:
				strcpy_s(buf, buf_size, "KATAKANA LETTER WI");
				break;
			case 0x30F1:
				strcpy_s(buf, buf_size, "KATAKANA LETTER WE");
				break;
			case 0x30F2:
				strcpy_s(buf, buf_size, "KATAKANA LETTER WO");
				break;
			case 0x30F3:
				strcpy_s(buf, buf_size, "KATAKANA LETTER N");
				break;
			case 0x30F4:
				strcpy_s(buf, buf_size, "KATAKANA LETTER VU");
				break;
			case 0x30F5:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL KA");
				break;
			case 0x30F6:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL KE");
				break;
			case 0x30F7:
				strcpy_s(buf, buf_size, "KATAKANA LETTER VA");
				break;
			case 0x30F8:
				strcpy_s(buf, buf_size, "KATAKANA LETTER VI");
				break;
			case 0x30F9:
				strcpy_s(buf, buf_size, "KATAKANA LETTER VE");
				break;
			case 0x30FA:
				strcpy_s(buf, buf_size, "KATAKANA LETTER VO");
				break;
			case 0x30FB:
				strcpy_s(buf, buf_size, "KATAKANA MIDDLE DOT");
				break;
			case 0x30FC:
				strcpy_s(buf, buf_size, "KATAKANA-HIRAGANA PROLONGED SOUND MARK");
				break;
			case 0x30FD:
				strcpy_s(buf, buf_size, "KATAKANA ITERATION MARK");
				break;
			case 0x30FE:
				strcpy_s(buf, buf_size, "KATAKANA VOICED ITERATION MARK");
				break;
			case 0x30FF:
				strcpy_s(buf, buf_size, "KATAKANA DIGRAPH KOTO");
				break;
			case 0x3105:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER B");
				break;
			case 0x3106:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER P");
				break;
			case 0x3107:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER M");
				break;
			case 0x3108:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER F");
				break;
			case 0x3109:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER D");
				break;
			case 0x310A:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER T");
				break;
			case 0x310B:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER N");
				break;
			case 0x310C:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER L");
				break;
			case 0x310D:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER G");
				break;
			case 0x310E:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER K");
				break;
			case 0x310F:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER H");
				break;
			case 0x3110:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER J");
				break;
			case 0x3111:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER Q");
				break;
			case 0x3112:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER X");
				break;
			case 0x3113:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER ZH");
				break;
			case 0x3114:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER CH");
				break;
			case 0x3115:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER SH");
				break;
			case 0x3116:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER R");
				break;
			case 0x3117:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER Z");
				break;
			case 0x3118:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER C");
				break;
			case 0x3119:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER S");
				break;
			case 0x311A:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER A");
				break;
			case 0x311B:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER O");
				break;
			case 0x311C:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER E");
				break;
			case 0x311D:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER EH");
				break;
			case 0x311E:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER AI");
				break;
			case 0x311F:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER EI");
				break;
			case 0x3120:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER AU");
				break;
			case 0x3121:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER OU");
				break;
			case 0x3122:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER AN");
				break;
			case 0x3123:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER EN");
				break;
			case 0x3124:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER ANG");
				break;
			case 0x3125:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER ENG");
				break;
			case 0x3126:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER ER");
				break;
			case 0x3127:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER I");
				break;
			case 0x3128:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER U");
				break;
			case 0x3129:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER IU");
				break;
			case 0x312A:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER V");
				break;
			case 0x312B:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER NG");
				break;
			case 0x312C:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER GN");
				break;
			case 0x312D:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER IH");
				break;
			case 0x312E:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER O WITH DOT ABOVE");
				break;
			case 0x312F:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER NN");
				break;
			case 0x3131:
				strcpy_s(buf, buf_size, "HANGUL LETTER KIYEOK");
				break;
			case 0x3132:
				strcpy_s(buf, buf_size, "HANGUL LETTER SSANGKIYEOK");
				break;
			case 0x3133:
				strcpy_s(buf, buf_size, "HANGUL LETTER KIYEOK-SIOS");
				break;
			case 0x3134:
				strcpy_s(buf, buf_size, "HANGUL LETTER NIEUN");
				break;
			case 0x3135:
				strcpy_s(buf, buf_size, "HANGUL LETTER NIEUN-CIEUC");
				break;
			case 0x3136:
				strcpy_s(buf, buf_size, "HANGUL LETTER NIEUN-HIEUH");
				break;
			case 0x3137:
				strcpy_s(buf, buf_size, "HANGUL LETTER TIKEUT");
				break;
			case 0x3138:
				strcpy_s(buf, buf_size, "HANGUL LETTER SSANGTIKEUT");
				break;
			case 0x3139:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL");
				break;
			case 0x313A:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-KIYEOK");
				break;
			case 0x313B:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-MIEUM");
				break;
			case 0x313C:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-PIEUP");
				break;
			case 0x313D:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-SIOS");
				break;
			case 0x313E:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-THIEUTH");
				break;
			case 0x313F:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-PHIEUPH");
				break;
			case 0x3140:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-HIEUH");
				break;
			case 0x3141:
				strcpy_s(buf, buf_size, "HANGUL LETTER MIEUM");
				break;
			case 0x3142:
				strcpy_s(buf, buf_size, "HANGUL LETTER PIEUP");
				break;
			case 0x3143:
				strcpy_s(buf, buf_size, "HANGUL LETTER SSANGPIEUP");
				break;
			case 0x3144:
				strcpy_s(buf, buf_size, "HANGUL LETTER PIEUP-SIOS");
				break;
			case 0x3145:
				strcpy_s(buf, buf_size, "HANGUL LETTER SIOS");
				break;
			case 0x3146:
				strcpy_s(buf, buf_size, "HANGUL LETTER SSANGSIOS");
				break;
			case 0x3147:
				strcpy_s(buf, buf_size, "HANGUL LETTER IEUNG");
				break;
			case 0x3148:
				strcpy_s(buf, buf_size, "HANGUL LETTER CIEUC");
				break;
			case 0x3149:
				strcpy_s(buf, buf_size, "HANGUL LETTER SSANGCIEUC");
				break;
			case 0x314A:
				strcpy_s(buf, buf_size, "HANGUL LETTER CHIEUCH");
				break;
			case 0x314B:
				strcpy_s(buf, buf_size, "HANGUL LETTER KHIEUKH");
				break;
			case 0x314C:
				strcpy_s(buf, buf_size, "HANGUL LETTER THIEUTH");
				break;
			case 0x314D:
				strcpy_s(buf, buf_size, "HANGUL LETTER PHIEUPH");
				break;
			case 0x314E:
				strcpy_s(buf, buf_size, "HANGUL LETTER HIEUH");
				break;
			case 0x314F:
				strcpy_s(buf, buf_size, "HANGUL LETTER A");
				break;
			case 0x3150:
				strcpy_s(buf, buf_size, "HANGUL LETTER AE");
				break;
			case 0x3151:
				strcpy_s(buf, buf_size, "HANGUL LETTER YA");
				break;
			case 0x3152:
				strcpy_s(buf, buf_size, "HANGUL LETTER YAE");
				break;
			case 0x3153:
				strcpy_s(buf, buf_size, "HANGUL LETTER EO");
				break;
			case 0x3154:
				strcpy_s(buf, buf_size, "HANGUL LETTER E");
				break;
			case 0x3155:
				strcpy_s(buf, buf_size, "HANGUL LETTER YEO");
				break;
			case 0x3156:
				strcpy_s(buf, buf_size, "HANGUL LETTER YE");
				break;
			case 0x3157:
				strcpy_s(buf, buf_size, "HANGUL LETTER O");
				break;
			case 0x3158:
				strcpy_s(buf, buf_size, "HANGUL LETTER WA");
				break;
			case 0x3159:
				strcpy_s(buf, buf_size, "HANGUL LETTER WAE");
				break;
			case 0x315A:
				strcpy_s(buf, buf_size, "HANGUL LETTER OE");
				break;
			case 0x315B:
				strcpy_s(buf, buf_size, "HANGUL LETTER YO");
				break;
			case 0x315C:
				strcpy_s(buf, buf_size, "HANGUL LETTER U");
				break;
			case 0x315D:
				strcpy_s(buf, buf_size, "HANGUL LETTER WEO");
				break;
			case 0x315E:
				strcpy_s(buf, buf_size, "HANGUL LETTER WE");
				break;
			case 0x315F:
				strcpy_s(buf, buf_size, "HANGUL LETTER WI");
				break;
			case 0x3160:
				strcpy_s(buf, buf_size, "HANGUL LETTER YU");
				break;
			case 0x3161:
				strcpy_s(buf, buf_size, "HANGUL LETTER EU");
				break;
			case 0x3162:
				strcpy_s(buf, buf_size, "HANGUL LETTER YI");
				break;
			case 0x3163:
				strcpy_s(buf, buf_size, "HANGUL LETTER I");
				break;
			case 0x3164:
				strcpy_s(buf, buf_size, "HANGUL FILLER");
				break;
			case 0x3165:
				strcpy_s(buf, buf_size, "HANGUL LETTER SSANGNIEUN");
				break;
			case 0x3166:
				strcpy_s(buf, buf_size, "HANGUL LETTER NIEUN-TIKEUT");
				break;
			case 0x3167:
				strcpy_s(buf, buf_size, "HANGUL LETTER NIEUN-SIOS");
				break;
			case 0x3168:
				strcpy_s(buf, buf_size, "HANGUL LETTER NIEUN-PANSIOS");
				break;
			case 0x3169:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-KIYEOK-SIOS");
				break;
			case 0x316A:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-TIKEUT");
				break;
			case 0x316B:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-PIEUP-SIOS");
				break;
			case 0x316C:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-PANSIOS");
				break;
			case 0x316D:
				strcpy_s(buf, buf_size, "HANGUL LETTER RIEUL-YEORINHIEUH");
				break;
			case 0x316E:
				strcpy_s(buf, buf_size, "HANGUL LETTER MIEUM-PIEUP");
				break;
			case 0x316F:
				strcpy_s(buf, buf_size, "HANGUL LETTER MIEUM-SIOS");
				break;
			case 0x3170:
				strcpy_s(buf, buf_size, "HANGUL LETTER MIEUM-PANSIOS");
				break;
			case 0x3171:
				strcpy_s(buf, buf_size, "HANGUL LETTER KAPYEOUNMIEUM");
				break;
			case 0x3172:
				strcpy_s(buf, buf_size, "HANGUL LETTER PIEUP-KIYEOK");
				break;
			case 0x3173:
				strcpy_s(buf, buf_size, "HANGUL LETTER PIEUP-TIKEUT");
				break;
			case 0x3174:
				strcpy_s(buf, buf_size, "HANGUL LETTER PIEUP-SIOS-KIYEOK");
				break;
			case 0x3175:
				strcpy_s(buf, buf_size, "HANGUL LETTER PIEUP-SIOS-TIKEUT");
				break;
			case 0x3176:
				strcpy_s(buf, buf_size, "HANGUL LETTER PIEUP-CIEUC");
				break;
			case 0x3177:
				strcpy_s(buf, buf_size, "HANGUL LETTER PIEUP-THIEUTH");
				break;
			case 0x3178:
				strcpy_s(buf, buf_size, "HANGUL LETTER KAPYEOUNPIEUP");
				break;
			case 0x3179:
				strcpy_s(buf, buf_size, "HANGUL LETTER KAPYEOUNSSANGPIEUP");
				break;
			case 0x317A:
				strcpy_s(buf, buf_size, "HANGUL LETTER SIOS-KIYEOK");
				break;
			case 0x317B:
				strcpy_s(buf, buf_size, "HANGUL LETTER SIOS-NIEUN");
				break;
			case 0x317C:
				strcpy_s(buf, buf_size, "HANGUL LETTER SIOS-TIKEUT");
				break;
			case 0x317D:
				strcpy_s(buf, buf_size, "HANGUL LETTER SIOS-PIEUP");
				break;
			case 0x317E:
				strcpy_s(buf, buf_size, "HANGUL LETTER SIOS-CIEUC");
				break;
			case 0x317F:
				strcpy_s(buf, buf_size, "HANGUL LETTER PANSIOS");
				break;
			case 0x3180:
				strcpy_s(buf, buf_size, "HANGUL LETTER SSANGIEUNG");
				break;
			case 0x3181:
				strcpy_s(buf, buf_size, "HANGUL LETTER YESIEUNG");
				break;
			case 0x3182:
				strcpy_s(buf, buf_size, "HANGUL LETTER YESIEUNG-SIOS");
				break;
			case 0x3183:
				strcpy_s(buf, buf_size, "HANGUL LETTER YESIEUNG-PANSIOS");
				break;
			case 0x3184:
				strcpy_s(buf, buf_size, "HANGUL LETTER KAPYEOUNPHIEUPH");
				break;
			case 0x3185:
				strcpy_s(buf, buf_size, "HANGUL LETTER SSANGHIEUH");
				break;
			case 0x3186:
				strcpy_s(buf, buf_size, "HANGUL LETTER YEORINHIEUH");
				break;
			case 0x3187:
				strcpy_s(buf, buf_size, "HANGUL LETTER YO-YA");
				break;
			case 0x3188:
				strcpy_s(buf, buf_size, "HANGUL LETTER YO-YAE");
				break;
			case 0x3189:
				strcpy_s(buf, buf_size, "HANGUL LETTER YO-I");
				break;
			case 0x318A:
				strcpy_s(buf, buf_size, "HANGUL LETTER YU-YEO");
				break;
			case 0x318B:
				strcpy_s(buf, buf_size, "HANGUL LETTER YU-YE");
				break;
			case 0x318C:
				strcpy_s(buf, buf_size, "HANGUL LETTER YU-I");
				break;
			case 0x318D:
				strcpy_s(buf, buf_size, "HANGUL LETTER ARAEA");
				break;
			case 0x318E:
				strcpy_s(buf, buf_size, "HANGUL LETTER ARAEAE");
				break;
			case 0x3190:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION LINKING MARK");
				break;
			case 0x3191:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION REVERSE MARK");
				break;
			case 0x3192:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION ONE MARK");
				break;
			case 0x3193:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION TWO MARK");
				break;
			case 0x3194:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION THREE MARK");
				break;
			case 0x3195:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION FOUR MARK");
				break;
			case 0x3196:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION TOP MARK");
				break;
			case 0x3197:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION MIDDLE MARK");
				break;
			case 0x3198:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION BOTTOM MARK");
				break;
			case 0x3199:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION FIRST MARK");
				break;
			case 0x319A:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION SECOND MARK");
				break;
			case 0x319B:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION THIRD MARK");
				break;
			case 0x319C:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION FOURTH MARK");
				break;
			case 0x319D:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION HEAVEN MARK");
				break;
			case 0x319E:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION EARTH MARK");
				break;
			case 0x319F:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC ANNOTATION MAN MARK");
				break;
			case 0x31A0:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER BU");
				break;
			case 0x31A1:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER ZI");
				break;
			case 0x31A2:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER JI");
				break;
			case 0x31A3:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER GU");
				break;
			case 0x31A4:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER EE");
				break;
			case 0x31A5:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER ENN");
				break;
			case 0x31A6:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER OO");
				break;
			case 0x31A7:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER ONN");
				break;
			case 0x31A8:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER IR");
				break;
			case 0x31A9:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER ANN");
				break;
			case 0x31AA:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER INN");
				break;
			case 0x31AB:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER UNN");
				break;
			case 0x31AC:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER IM");
				break;
			case 0x31AD:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER NGG");
				break;
			case 0x31AE:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER AINN");
				break;
			case 0x31AF:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER AUNN");
				break;
			case 0x31B0:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER AM");
				break;
			case 0x31B1:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER OM");
				break;
			case 0x31B2:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER ONG");
				break;
			case 0x31B3:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER INNN");
				break;
			case 0x31B4:
				strcpy_s(buf, buf_size, "BOPOMOFO FINAL LETTER P");
				break;
			case 0x31B5:
				strcpy_s(buf, buf_size, "BOPOMOFO FINAL LETTER T");
				break;
			case 0x31B6:
				strcpy_s(buf, buf_size, "BOPOMOFO FINAL LETTER K");
				break;
			case 0x31B7:
				strcpy_s(buf, buf_size, "BOPOMOFO FINAL LETTER H");
				break;
			case 0x31B8:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER GH");
				break;
			case 0x31B9:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER LH");
				break;
			case 0x31BA:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER ZY");
				break;
			case 0x31BB:
				strcpy_s(buf, buf_size, "BOPOMOFO FINAL LETTER G");
				break;
			case 0x31BC:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER GW");
				break;
			case 0x31BD:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER KW");
				break;
			case 0x31BE:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER OE");
				break;
			case 0x31BF:
				strcpy_s(buf, buf_size, "BOPOMOFO LETTER AH");
				break;
			case 0x31C0:
				strcpy_s(buf, buf_size, "CJK STROKE T");
				break;
			case 0x31C1:
				strcpy_s(buf, buf_size, "CJK STROKE WG");
				break;
			case 0x31C2:
				strcpy_s(buf, buf_size, "CJK STROKE XG");
				break;
			case 0x31C3:
				strcpy_s(buf, buf_size, "CJK STROKE BXG");
				break;
			case 0x31C4:
				strcpy_s(buf, buf_size, "CJK STROKE SW");
				break;
			case 0x31C5:
				strcpy_s(buf, buf_size, "CJK STROKE HZZ");
				break;
			case 0x31C6:
				strcpy_s(buf, buf_size, "CJK STROKE HZG");
				break;
			case 0x31C7:
				strcpy_s(buf, buf_size, "CJK STROKE HP");
				break;
			case 0x31C8:
				strcpy_s(buf, buf_size, "CJK STROKE HZWG");
				break;
			case 0x31C9:
				strcpy_s(buf, buf_size, "CJK STROKE SZWG");
				break;
			case 0x31CA:
				strcpy_s(buf, buf_size, "CJK STROKE HZT");
				break;
			case 0x31CB:
				strcpy_s(buf, buf_size, "CJK STROKE HZZP");
				break;
			case 0x31CC:
				strcpy_s(buf, buf_size, "CJK STROKE HPWG");
				break;
			case 0x31CD:
				strcpy_s(buf, buf_size, "CJK STROKE HZW");
				break;
			case 0x31CE:
				strcpy_s(buf, buf_size, "CJK STROKE HZZZ");
				break;
			case 0x31CF:
				strcpy_s(buf, buf_size, "CJK STROKE N");
				break;
			case 0x31D0:
				strcpy_s(buf, buf_size, "CJK STROKE H");
				break;
			case 0x31D1:
				strcpy_s(buf, buf_size, "CJK STROKE S");
				break;
			case 0x31D2:
				strcpy_s(buf, buf_size, "CJK STROKE P");
				break;
			case 0x31D3:
				strcpy_s(buf, buf_size, "CJK STROKE SP");
				break;
			case 0x31D4:
				strcpy_s(buf, buf_size, "CJK STROKE D");
				break;
			case 0x31D5:
				strcpy_s(buf, buf_size, "CJK STROKE HZ");
				break;
			case 0x31D6:
				strcpy_s(buf, buf_size, "CJK STROKE HG");
				break;
			case 0x31D7:
				strcpy_s(buf, buf_size, "CJK STROKE SZ");
				break;
			case 0x31D8:
				strcpy_s(buf, buf_size, "CJK STROKE SWZ");
				break;
			case 0x31D9:
				strcpy_s(buf, buf_size, "CJK STROKE ST");
				break;
			case 0x31DA:
				strcpy_s(buf, buf_size, "CJK STROKE SG");
				break;
			case 0x31DB:
				strcpy_s(buf, buf_size, "CJK STROKE PD");
				break;
			case 0x31DC:
				strcpy_s(buf, buf_size, "CJK STROKE PZ");
				break;
			case 0x31DD:
				strcpy_s(buf, buf_size, "CJK STROKE TN");
				break;
			case 0x31DE:
				strcpy_s(buf, buf_size, "CJK STROKE SZZ");
				break;
			case 0x31DF:
				strcpy_s(buf, buf_size, "CJK STROKE SWG");
				break;
			case 0x31E0:
				strcpy_s(buf, buf_size, "CJK STROKE HXWG");
				break;
			case 0x31E1:
				strcpy_s(buf, buf_size, "CJK STROKE HZZZG");
				break;
			case 0x31E2:
				strcpy_s(buf, buf_size, "CJK STROKE PG");
				break;
			case 0x31E3:
				strcpy_s(buf, buf_size, "CJK STROKE Q");
				break;
			case 0x31F0:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL KU");
				break;
			case 0x31F1:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL SI");
				break;
			case 0x31F2:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL SU");
				break;
			case 0x31F3:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL TO");
				break;
			case 0x31F4:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL NU");
				break;
			case 0x31F5:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL HA");
				break;
			case 0x31F6:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL HI");
				break;
			case 0x31F7:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL HU");
				break;
			case 0x31F8:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL HE");
				break;
			case 0x31F9:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL HO");
				break;
			case 0x31FA:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL MU");
				break;
			case 0x31FB:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL RA");
				break;
			case 0x31FC:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL RI");
				break;
			case 0x31FD:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL RU");
				break;
			case 0x31FE:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL RE");
				break;
			case 0x31FF:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL RO");
				break;
			case 0x3200:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL KIYEOK");
				break;
			case 0x3201:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL NIEUN");
				break;
			case 0x3202:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL TIKEUT");
				break;
			case 0x3203:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL RIEUL");
				break;
			case 0x3204:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL MIEUM");
				break;
			case 0x3205:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL PIEUP");
				break;
			case 0x3206:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL SIOS");
				break;
			case 0x3207:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL IEUNG");
				break;
			case 0x3208:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL CIEUC");
				break;
			case 0x3209:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL CHIEUCH");
				break;
			case 0x320A:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL KHIEUKH");
				break;
			case 0x320B:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL THIEUTH");
				break;
			case 0x320C:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL PHIEUPH");
				break;
			case 0x320D:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL HIEUH");
				break;
			case 0x320E:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL KIYEOK A");
				break;
			case 0x320F:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL NIEUN A");
				break;
			case 0x3210:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL TIKEUT A");
				break;
			case 0x3211:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL RIEUL A");
				break;
			case 0x3212:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL MIEUM A");
				break;
			case 0x3213:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL PIEUP A");
				break;
			case 0x3214:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL SIOS A");
				break;
			case 0x3215:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL IEUNG A");
				break;
			case 0x3216:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL CIEUC A");
				break;
			case 0x3217:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL CHIEUCH A");
				break;
			case 0x3218:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL KHIEUKH A");
				break;
			case 0x3219:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL THIEUTH A");
				break;
			case 0x321A:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL PHIEUPH A");
				break;
			case 0x321B:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL HIEUH A");
				break;
			case 0x321C:
				strcpy_s(buf, buf_size, "PARENTHESIZED HANGUL CIEUC U");
				break;
			case 0x321D:
				strcpy_s(buf, buf_size, "PARENTHESIZED KOREAN CHARACTER OJEON");
				break;
			case 0x321E:
				strcpy_s(buf, buf_size, "PARENTHESIZED KOREAN CHARACTER O HU");
				break;
			case 0x3220:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH ONE");
				break;
			case 0x3221:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH TWO");
				break;
			case 0x3222:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH THREE");
				break;
			case 0x3223:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH FOUR");
				break;
			case 0x3224:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH FIVE");
				break;
			case 0x3225:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH SIX");
				break;
			case 0x3226:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH SEVEN");
				break;
			case 0x3227:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH EIGHT");
				break;
			case 0x3228:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH NINE");
				break;
			case 0x3229:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH TEN");
				break;
			case 0x322A:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH MOON");
				break;
			case 0x322B:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH FIRE");
				break;
			case 0x322C:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH WATER");
				break;
			case 0x322D:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH WOOD");
				break;
			case 0x322E:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH METAL");
				break;
			case 0x322F:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH EARTH");
				break;
			case 0x3230:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH SUN");
				break;
			case 0x3231:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH STOCK");
				break;
			case 0x3232:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH HAVE");
				break;
			case 0x3233:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH SOCIETY");
				break;
			case 0x3234:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH NAME");
				break;
			case 0x3235:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH SPECIAL");
				break;
			case 0x3236:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH FINANCIAL");
				break;
			case 0x3237:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH CONGRATULATION");
				break;
			case 0x3238:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH LABOR");
				break;
			case 0x3239:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH REPRESENT");
				break;
			case 0x323A:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH CALL");
				break;
			case 0x323B:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH STUDY");
				break;
			case 0x323C:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH SUPERVISE");
				break;
			case 0x323D:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH ENTERPRISE");
				break;
			case 0x323E:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH RESOURCE");
				break;
			case 0x323F:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH ALLIANCE");
				break;
			case 0x3240:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH FESTIVAL");
				break;
			case 0x3241:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH REST");
				break;
			case 0x3242:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH SELF");
				break;
			case 0x3243:
				strcpy_s(buf, buf_size, "PARENTHESIZED IDEOGRAPH REACH");
				break;
			case 0x3244:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH QUESTION");
				break;
			case 0x3245:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH KINDERGARTEN");
				break;
			case 0x3246:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH SCHOOL");
				break;
			case 0x3247:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH KOTO");
				break;
			case 0x3248:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TEN ON BLACK SQUARE");
				break;
			case 0x3249:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY ON BLACK SQUARE");
				break;
			case 0x324A:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY ON BLACK SQUARE");
				break;
			case 0x324B:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY ON BLACK SQUARE");
				break;
			case 0x324C:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FIFTY ON BLACK SQUARE");
				break;
			case 0x324D:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER SIXTY ON BLACK SQUARE");
				break;
			case 0x324E:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER SEVENTY ON BLACK SQUARE");
				break;
			case 0x324F:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER EIGHTY ON BLACK SQUARE");
				break;
			case 0x3250:
				strcpy_s(buf, buf_size, "PARTNERSHIP SIGN");
				break;
			case 0x3251:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY ONE");
				break;
			case 0x3252:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY TWO");
				break;
			case 0x3253:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY THREE");
				break;
			case 0x3254:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY FOUR");
				break;
			case 0x3255:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY FIVE");
				break;
			case 0x3256:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY SIX");
				break;
			case 0x3257:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY SEVEN");
				break;
			case 0x3258:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY EIGHT");
				break;
			case 0x3259:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER TWENTY NINE");
				break;
			case 0x325A:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY");
				break;
			case 0x325B:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY ONE");
				break;
			case 0x325C:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY TWO");
				break;
			case 0x325D:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY THREE");
				break;
			case 0x325E:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY FOUR");
				break;
			case 0x325F:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY FIVE");
				break;
			case 0x3260:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL KIYEOK");
				break;
			case 0x3261:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL NIEUN");
				break;
			case 0x3262:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL TIKEUT");
				break;
			case 0x3263:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL RIEUL");
				break;
			case 0x3264:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL MIEUM");
				break;
			case 0x3265:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL PIEUP");
				break;
			case 0x3266:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL SIOS");
				break;
			case 0x3267:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL IEUNG");
				break;
			case 0x3268:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL CIEUC");
				break;
			case 0x3269:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL CHIEUCH");
				break;
			case 0x326A:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL KHIEUKH");
				break;
			case 0x326B:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL THIEUTH");
				break;
			case 0x326C:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL PHIEUPH");
				break;
			case 0x326D:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL HIEUH");
				break;
			case 0x326E:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL KIYEOK A");
				break;
			case 0x326F:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL NIEUN A");
				break;
			case 0x3270:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL TIKEUT A");
				break;
			case 0x3271:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL RIEUL A");
				break;
			case 0x3272:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL MIEUM A");
				break;
			case 0x3273:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL PIEUP A");
				break;
			case 0x3274:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL SIOS A");
				break;
			case 0x3275:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL IEUNG A");
				break;
			case 0x3276:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL CIEUC A");
				break;
			case 0x3277:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL CHIEUCH A");
				break;
			case 0x3278:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL KHIEUKH A");
				break;
			case 0x3279:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL THIEUTH A");
				break;
			case 0x327A:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL PHIEUPH A");
				break;
			case 0x327B:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL HIEUH A");
				break;
			case 0x327C:
				strcpy_s(buf, buf_size, "CIRCLED KOREAN CHARACTER CHAMKO");
				break;
			case 0x327D:
				strcpy_s(buf, buf_size, "CIRCLED KOREAN CHARACTER JUEUI");
				break;
			case 0x327E:
				strcpy_s(buf, buf_size, "CIRCLED HANGUL IEUNG U");
				break;
			case 0x327F:
				strcpy_s(buf, buf_size, "KOREAN STANDARD SYMBOL");
				break;
			case 0x3280:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH ONE");
				break;
			case 0x3281:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH TWO");
				break;
			case 0x3282:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH THREE");
				break;
			case 0x3283:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH FOUR");
				break;
			case 0x3284:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH FIVE");
				break;
			case 0x3285:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH SIX");
				break;
			case 0x3286:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH SEVEN");
				break;
			case 0x3287:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH EIGHT");
				break;
			case 0x3288:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH NINE");
				break;
			case 0x3289:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH TEN");
				break;
			case 0x328A:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH MOON");
				break;
			case 0x328B:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH FIRE");
				break;
			case 0x328C:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH WATER");
				break;
			case 0x328D:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH WOOD");
				break;
			case 0x328E:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH METAL");
				break;
			case 0x328F:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH EARTH");
				break;
			case 0x3290:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH SUN");
				break;
			case 0x3291:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH STOCK");
				break;
			case 0x3292:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH HAVE");
				break;
			case 0x3293:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH SOCIETY");
				break;
			case 0x3294:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH NAME");
				break;
			case 0x3295:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH SPECIAL");
				break;
			case 0x3296:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH FINANCIAL");
				break;
			case 0x3297:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH CONGRATULATION");
				break;
			case 0x3298:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH LABOR");
				break;
			case 0x3299:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH SECRET");
				break;
			case 0x329A:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH MALE");
				break;
			case 0x329B:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH FEMALE");
				break;
			case 0x329C:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH SUITABLE");
				break;
			case 0x329D:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH EXCELLENT");
				break;
			case 0x329E:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH PRINT");
				break;
			case 0x329F:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH ATTENTION");
				break;
			case 0x32A0:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH ITEM");
				break;
			case 0x32A1:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH REST");
				break;
			case 0x32A2:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH COPY");
				break;
			case 0x32A3:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH CORRECT");
				break;
			case 0x32A4:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH HIGH");
				break;
			case 0x32A5:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH CENTRE");
				break;
			case 0x32A6:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH LOW");
				break;
			case 0x32A7:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH LEFT");
				break;
			case 0x32A8:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH RIGHT");
				break;
			case 0x32A9:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH MEDICINE");
				break;
			case 0x32AA:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH RELIGION");
				break;
			case 0x32AB:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH STUDY");
				break;
			case 0x32AC:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH SUPERVISE");
				break;
			case 0x32AD:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH ENTERPRISE");
				break;
			case 0x32AE:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH RESOURCE");
				break;
			case 0x32AF:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH ALLIANCE");
				break;
			case 0x32B0:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH NIGHT");
				break;
			case 0x32B1:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY SIX");
				break;
			case 0x32B2:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY SEVEN");
				break;
			case 0x32B3:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY EIGHT");
				break;
			case 0x32B4:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER THIRTY NINE");
				break;
			case 0x32B5:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY");
				break;
			case 0x32B6:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY ONE");
				break;
			case 0x32B7:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY TWO");
				break;
			case 0x32B8:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY THREE");
				break;
			case 0x32B9:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY FOUR");
				break;
			case 0x32BA:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY FIVE");
				break;
			case 0x32BB:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY SIX");
				break;
			case 0x32BC:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY SEVEN");
				break;
			case 0x32BD:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY EIGHT");
				break;
			case 0x32BE:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FORTY NINE");
				break;
			case 0x32BF:
				strcpy_s(buf, buf_size, "CIRCLED NUMBER FIFTY");
				break;
			case 0x32C0:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR JANUARY");
				break;
			case 0x32C1:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR FEBRUARY");
				break;
			case 0x32C2:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR MARCH");
				break;
			case 0x32C3:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR APRIL");
				break;
			case 0x32C4:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR MAY");
				break;
			case 0x32C5:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR JUNE");
				break;
			case 0x32C6:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR JULY");
				break;
			case 0x32C7:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR AUGUST");
				break;
			case 0x32C8:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR SEPTEMBER");
				break;
			case 0x32C9:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR OCTOBER");
				break;
			case 0x32CA:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR NOVEMBER");
				break;
			case 0x32CB:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DECEMBER");
				break;
			case 0x32CC:
				strcpy_s(buf, buf_size, "SQUARE HG");
				break;
			case 0x32CD:
				strcpy_s(buf, buf_size, "SQUARE ERG");
				break;
			case 0x32CE:
				strcpy_s(buf, buf_size, "SQUARE EV");
				break;
			case 0x32CF:
				strcpy_s(buf, buf_size, "LIMITED LIABILITY SIGN");
				break;
			case 0x32D0:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA A");
				break;
			case 0x32D1:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA I");
				break;
			case 0x32D2:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA U");
				break;
			case 0x32D3:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA E");
				break;
			case 0x32D4:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA O");
				break;
			case 0x32D5:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA KA");
				break;
			case 0x32D6:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA KI");
				break;
			case 0x32D7:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA KU");
				break;
			case 0x32D8:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA KE");
				break;
			case 0x32D9:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA KO");
				break;
			case 0x32DA:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA SA");
				break;
			case 0x32DB:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA SI");
				break;
			case 0x32DC:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA SU");
				break;
			case 0x32DD:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA SE");
				break;
			case 0x32DE:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA SO");
				break;
			case 0x32DF:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA TA");
				break;
			case 0x32E0:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA TI");
				break;
			case 0x32E1:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA TU");
				break;
			case 0x32E2:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA TE");
				break;
			case 0x32E3:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA TO");
				break;
			case 0x32E4:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA NA");
				break;
			case 0x32E5:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA NI");
				break;
			case 0x32E6:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA NU");
				break;
			case 0x32E7:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA NE");
				break;
			case 0x32E8:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA NO");
				break;
			case 0x32E9:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA HA");
				break;
			case 0x32EA:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA HI");
				break;
			case 0x32EB:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA HU");
				break;
			case 0x32EC:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA HE");
				break;
			case 0x32ED:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA HO");
				break;
			case 0x32EE:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA MA");
				break;
			case 0x32EF:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA MI");
				break;
			case 0x32F0:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA MU");
				break;
			case 0x32F1:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA ME");
				break;
			case 0x32F2:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA MO");
				break;
			case 0x32F3:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA YA");
				break;
			case 0x32F4:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA YU");
				break;
			case 0x32F5:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA YO");
				break;
			case 0x32F6:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA RA");
				break;
			case 0x32F7:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA RI");
				break;
			case 0x32F8:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA RU");
				break;
			case 0x32F9:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA RE");
				break;
			case 0x32FA:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA RO");
				break;
			case 0x32FB:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA WA");
				break;
			case 0x32FC:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA WI");
				break;
			case 0x32FD:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA WE");
				break;
			case 0x32FE:
				strcpy_s(buf, buf_size, "CIRCLED KATAKANA WO");
				break;
			case 0x32FF:
				strcpy_s(buf, buf_size, "SQUARE ERA NAME REIWA");
				break;
			case 0x3300:
				strcpy_s(buf, buf_size, "SQUARE APAATO");
				break;
			case 0x3301:
				strcpy_s(buf, buf_size, "SQUARE ARUHUA");
				break;
			case 0x3302:
				strcpy_s(buf, buf_size, "SQUARE ANPEA");
				break;
			case 0x3303:
				strcpy_s(buf, buf_size, "SQUARE AARU");
				break;
			case 0x3304:
				strcpy_s(buf, buf_size, "SQUARE ININGU");
				break;
			case 0x3305:
				strcpy_s(buf, buf_size, "SQUARE INTI");
				break;
			case 0x3306:
				strcpy_s(buf, buf_size, "SQUARE UON");
				break;
			case 0x3307:
				strcpy_s(buf, buf_size, "SQUARE ESUKUUDO");
				break;
			case 0x3308:
				strcpy_s(buf, buf_size, "SQUARE EEKAA");
				break;
			case 0x3309:
				strcpy_s(buf, buf_size, "SQUARE ONSU");
				break;
			case 0x330A:
				strcpy_s(buf, buf_size, "SQUARE OOMU");
				break;
			case 0x330B:
				strcpy_s(buf, buf_size, "SQUARE KAIRI");
				break;
			case 0x330C:
				strcpy_s(buf, buf_size, "SQUARE KARATTO");
				break;
			case 0x330D:
				strcpy_s(buf, buf_size, "SQUARE KARORII");
				break;
			case 0x330E:
				strcpy_s(buf, buf_size, "SQUARE GARON");
				break;
			case 0x330F:
				strcpy_s(buf, buf_size, "SQUARE GANMA");
				break;
			case 0x3310:
				strcpy_s(buf, buf_size, "SQUARE GIGA");
				break;
			case 0x3311:
				strcpy_s(buf, buf_size, "SQUARE GINII");
				break;
			case 0x3312:
				strcpy_s(buf, buf_size, "SQUARE KYURII");
				break;
			case 0x3313:
				strcpy_s(buf, buf_size, "SQUARE GIRUDAA");
				break;
			case 0x3314:
				strcpy_s(buf, buf_size, "SQUARE KIRO");
				break;
			case 0x3315:
				strcpy_s(buf, buf_size, "SQUARE KIROGURAMU");
				break;
			case 0x3316:
				strcpy_s(buf, buf_size, "SQUARE KIROMEETORU");
				break;
			case 0x3317:
				strcpy_s(buf, buf_size, "SQUARE KIROWATTO");
				break;
			case 0x3318:
				strcpy_s(buf, buf_size, "SQUARE GURAMU");
				break;
			case 0x3319:
				strcpy_s(buf, buf_size, "SQUARE GURAMUTON");
				break;
			case 0x331A:
				strcpy_s(buf, buf_size, "SQUARE KURUZEIRO");
				break;
			case 0x331B:
				strcpy_s(buf, buf_size, "SQUARE KUROONE");
				break;
			case 0x331C:
				strcpy_s(buf, buf_size, "SQUARE KEESU");
				break;
			case 0x331D:
				strcpy_s(buf, buf_size, "SQUARE KORUNA");
				break;
			case 0x331E:
				strcpy_s(buf, buf_size, "SQUARE KOOPO");
				break;
			case 0x331F:
				strcpy_s(buf, buf_size, "SQUARE SAIKURU");
				break;
			case 0x3320:
				strcpy_s(buf, buf_size, "SQUARE SANTIIMU");
				break;
			case 0x3321:
				strcpy_s(buf, buf_size, "SQUARE SIRINGU");
				break;
			case 0x3322:
				strcpy_s(buf, buf_size, "SQUARE SENTI");
				break;
			case 0x3323:
				strcpy_s(buf, buf_size, "SQUARE SENTO");
				break;
			case 0x3324:
				strcpy_s(buf, buf_size, "SQUARE DAASU");
				break;
			case 0x3325:
				strcpy_s(buf, buf_size, "SQUARE DESI");
				break;
			case 0x3326:
				strcpy_s(buf, buf_size, "SQUARE DORU");
				break;
			case 0x3327:
				strcpy_s(buf, buf_size, "SQUARE TON");
				break;
			case 0x3328:
				strcpy_s(buf, buf_size, "SQUARE NANO");
				break;
			case 0x3329:
				strcpy_s(buf, buf_size, "SQUARE NOTTO");
				break;
			case 0x332A:
				strcpy_s(buf, buf_size, "SQUARE HAITU");
				break;
			case 0x332B:
				strcpy_s(buf, buf_size, "SQUARE PAASENTO");
				break;
			case 0x332C:
				strcpy_s(buf, buf_size, "SQUARE PAATU");
				break;
			case 0x332D:
				strcpy_s(buf, buf_size, "SQUARE BAARERU");
				break;
			case 0x332E:
				strcpy_s(buf, buf_size, "SQUARE PIASUTORU");
				break;
			case 0x332F:
				strcpy_s(buf, buf_size, "SQUARE PIKURU");
				break;
			case 0x3330:
				strcpy_s(buf, buf_size, "SQUARE PIKO");
				break;
			case 0x3331:
				strcpy_s(buf, buf_size, "SQUARE BIRU");
				break;
			case 0x3332:
				strcpy_s(buf, buf_size, "SQUARE HUARADDO");
				break;
			case 0x3333:
				strcpy_s(buf, buf_size, "SQUARE HUIITO");
				break;
			case 0x3334:
				strcpy_s(buf, buf_size, "SQUARE BUSSYERU");
				break;
			case 0x3335:
				strcpy_s(buf, buf_size, "SQUARE HURAN");
				break;
			case 0x3336:
				strcpy_s(buf, buf_size, "SQUARE HEKUTAARU");
				break;
			case 0x3337:
				strcpy_s(buf, buf_size, "SQUARE PESO");
				break;
			case 0x3338:
				strcpy_s(buf, buf_size, "SQUARE PENIHI");
				break;
			case 0x3339:
				strcpy_s(buf, buf_size, "SQUARE HERUTU");
				break;
			case 0x333A:
				strcpy_s(buf, buf_size, "SQUARE PENSU");
				break;
			case 0x333B:
				strcpy_s(buf, buf_size, "SQUARE PEEZI");
				break;
			case 0x333C:
				strcpy_s(buf, buf_size, "SQUARE BEETA");
				break;
			case 0x333D:
				strcpy_s(buf, buf_size, "SQUARE POINTO");
				break;
			case 0x333E:
				strcpy_s(buf, buf_size, "SQUARE BORUTO");
				break;
			case 0x333F:
				strcpy_s(buf, buf_size, "SQUARE HON");
				break;
			case 0x3340:
				strcpy_s(buf, buf_size, "SQUARE PONDO");
				break;
			case 0x3341:
				strcpy_s(buf, buf_size, "SQUARE HOORU");
				break;
			case 0x3342:
				strcpy_s(buf, buf_size, "SQUARE HOON");
				break;
			case 0x3343:
				strcpy_s(buf, buf_size, "SQUARE MAIKURO");
				break;
			case 0x3344:
				strcpy_s(buf, buf_size, "SQUARE MAIRU");
				break;
			case 0x3345:
				strcpy_s(buf, buf_size, "SQUARE MAHHA");
				break;
			case 0x3346:
				strcpy_s(buf, buf_size, "SQUARE MARUKU");
				break;
			case 0x3347:
				strcpy_s(buf, buf_size, "SQUARE MANSYON");
				break;
			case 0x3348:
				strcpy_s(buf, buf_size, "SQUARE MIKURON");
				break;
			case 0x3349:
				strcpy_s(buf, buf_size, "SQUARE MIRI");
				break;
			case 0x334A:
				strcpy_s(buf, buf_size, "SQUARE MIRIBAARU");
				break;
			case 0x334B:
				strcpy_s(buf, buf_size, "SQUARE MEGA");
				break;
			case 0x334C:
				strcpy_s(buf, buf_size, "SQUARE MEGATON");
				break;
			case 0x334D:
				strcpy_s(buf, buf_size, "SQUARE MEETORU");
				break;
			case 0x334E:
				strcpy_s(buf, buf_size, "SQUARE YAADO");
				break;
			case 0x334F:
				strcpy_s(buf, buf_size, "SQUARE YAARU");
				break;
			case 0x3350:
				strcpy_s(buf, buf_size, "SQUARE YUAN");
				break;
			case 0x3351:
				strcpy_s(buf, buf_size, "SQUARE RITTORU");
				break;
			case 0x3352:
				strcpy_s(buf, buf_size, "SQUARE RIRA");
				break;
			case 0x3353:
				strcpy_s(buf, buf_size, "SQUARE RUPII");
				break;
			case 0x3354:
				strcpy_s(buf, buf_size, "SQUARE RUUBURU");
				break;
			case 0x3355:
				strcpy_s(buf, buf_size, "SQUARE REMU");
				break;
			case 0x3356:
				strcpy_s(buf, buf_size, "SQUARE RENTOGEN");
				break;
			case 0x3357:
				strcpy_s(buf, buf_size, "SQUARE WATTO");
				break;
			case 0x3358:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR ZERO");
				break;
			case 0x3359:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR ONE");
				break;
			case 0x335A:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWO");
				break;
			case 0x335B:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THREE");
				break;
			case 0x335C:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOUR");
				break;
			case 0x335D:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIVE");
				break;
			case 0x335E:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIX");
				break;
			case 0x335F:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVEN");
				break;
			case 0x3360:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHT");
				break;
			case 0x3361:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINE");
				break;
			case 0x3362:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TEN");
				break;
			case 0x3363:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR ELEVEN");
				break;
			case 0x3364:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWELVE");
				break;
			case 0x3365:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THIRTEEN");
				break;
			case 0x3366:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOURTEEN");
				break;
			case 0x3367:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIFTEEN");
				break;
			case 0x3368:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIXTEEN");
				break;
			case 0x3369:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVENTEEN");
				break;
			case 0x336A:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHTEEN");
				break;
			case 0x336B:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINETEEN");
				break;
			case 0x336C:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY");
				break;
			case 0x336D:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-ONE");
				break;
			case 0x336E:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-TWO");
				break;
			case 0x336F:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-THREE");
				break;
			case 0x3370:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWENTY-FOUR");
				break;
			case 0x3371:
				strcpy_s(buf, buf_size, "SQUARE HPA");
				break;
			case 0x3372:
				strcpy_s(buf, buf_size, "SQUARE DA");
				break;
			case 0x3373:
				strcpy_s(buf, buf_size, "SQUARE AU");
				break;
			case 0x3374:
				strcpy_s(buf, buf_size, "SQUARE BAR");
				break;
			case 0x3375:
				strcpy_s(buf, buf_size, "SQUARE OV");
				break;
			case 0x3376:
				strcpy_s(buf, buf_size, "SQUARE PC");
				break;
			case 0x3377:
				strcpy_s(buf, buf_size, "SQUARE DM");
				break;
			case 0x3378:
				strcpy_s(buf, buf_size, "SQUARE DM SQUARED");
				break;
			case 0x3379:
				strcpy_s(buf, buf_size, "SQUARE DM CUBED");
				break;
			case 0x337A:
				strcpy_s(buf, buf_size, "SQUARE IU");
				break;
			case 0x337B:
				strcpy_s(buf, buf_size, "SQUARE ERA NAME HEISEI");
				break;
			case 0x337C:
				strcpy_s(buf, buf_size, "SQUARE ERA NAME SYOUWA");
				break;
			case 0x337D:
				strcpy_s(buf, buf_size, "SQUARE ERA NAME TAISYOU");
				break;
			case 0x337E:
				strcpy_s(buf, buf_size, "SQUARE ERA NAME MEIZI");
				break;
			case 0x337F:
				strcpy_s(buf, buf_size, "SQUARE CORPORATION");
				break;
			case 0x3380:
				strcpy_s(buf, buf_size, "SQUARE PA AMPS");
				break;
			case 0x3381:
				strcpy_s(buf, buf_size, "SQUARE NA");
				break;
			case 0x3382:
				strcpy_s(buf, buf_size, "SQUARE MU A");
				break;
			case 0x3383:
				strcpy_s(buf, buf_size, "SQUARE MA");
				break;
			case 0x3384:
				strcpy_s(buf, buf_size, "SQUARE KA");
				break;
			case 0x3385:
				strcpy_s(buf, buf_size, "SQUARE KB");
				break;
			case 0x3386:
				strcpy_s(buf, buf_size, "SQUARE MB");
				break;
			case 0x3387:
				strcpy_s(buf, buf_size, "SQUARE GB");
				break;
			case 0x3388:
				strcpy_s(buf, buf_size, "SQUARE CAL");
				break;
			case 0x3389:
				strcpy_s(buf, buf_size, "SQUARE KCAL");
				break;
			case 0x338A:
				strcpy_s(buf, buf_size, "SQUARE PF");
				break;
			case 0x338B:
				strcpy_s(buf, buf_size, "SQUARE NF");
				break;
			case 0x338C:
				strcpy_s(buf, buf_size, "SQUARE MU F");
				break;
			case 0x338D:
				strcpy_s(buf, buf_size, "SQUARE MU G");
				break;
			case 0x338E:
				strcpy_s(buf, buf_size, "SQUARE MG");
				break;
			case 0x338F:
				strcpy_s(buf, buf_size, "SQUARE KG");
				break;
			case 0x3390:
				strcpy_s(buf, buf_size, "SQUARE HZ");
				break;
			case 0x3391:
				strcpy_s(buf, buf_size, "SQUARE KHZ");
				break;
			case 0x3392:
				strcpy_s(buf, buf_size, "SQUARE MHZ");
				break;
			case 0x3393:
				strcpy_s(buf, buf_size, "SQUARE GHZ");
				break;
			case 0x3394:
				strcpy_s(buf, buf_size, "SQUARE THZ");
				break;
			case 0x3395:
				strcpy_s(buf, buf_size, "SQUARE MU L");
				break;
			case 0x3396:
				strcpy_s(buf, buf_size, "SQUARE ML");
				break;
			case 0x3397:
				strcpy_s(buf, buf_size, "SQUARE DL");
				break;
			case 0x3398:
				strcpy_s(buf, buf_size, "SQUARE KL");
				break;
			case 0x3399:
				strcpy_s(buf, buf_size, "SQUARE FM");
				break;
			case 0x339A:
				strcpy_s(buf, buf_size, "SQUARE NM");
				break;
			case 0x339B:
				strcpy_s(buf, buf_size, "SQUARE MU M");
				break;
			case 0x339C:
				strcpy_s(buf, buf_size, "SQUARE MM");
				break;
			case 0x339D:
				strcpy_s(buf, buf_size, "SQUARE CM");
				break;
			case 0x339E:
				strcpy_s(buf, buf_size, "SQUARE KM");
				break;
			case 0x339F:
				strcpy_s(buf, buf_size, "SQUARE MM SQUARED");
				break;
			case 0x33A0:
				strcpy_s(buf, buf_size, "SQUARE CM SQUARED");
				break;
			case 0x33A1:
				strcpy_s(buf, buf_size, "SQUARE M SQUARED");
				break;
			case 0x33A2:
				strcpy_s(buf, buf_size, "SQUARE KM SQUARED");
				break;
			case 0x33A3:
				strcpy_s(buf, buf_size, "SQUARE MM CUBED");
				break;
			case 0x33A4:
				strcpy_s(buf, buf_size, "SQUARE CM CUBED");
				break;
			case 0x33A5:
				strcpy_s(buf, buf_size, "SQUARE M CUBED");
				break;
			case 0x33A6:
				strcpy_s(buf, buf_size, "SQUARE KM CUBED");
				break;
			case 0x33A7:
				strcpy_s(buf, buf_size, "SQUARE M OVER S");
				break;
			case 0x33A8:
				strcpy_s(buf, buf_size, "SQUARE M OVER S SQUARED");
				break;
			case 0x33A9:
				strcpy_s(buf, buf_size, "SQUARE PA");
				break;
			case 0x33AA:
				strcpy_s(buf, buf_size, "SQUARE KPA");
				break;
			case 0x33AB:
				strcpy_s(buf, buf_size, "SQUARE MPA");
				break;
			case 0x33AC:
				strcpy_s(buf, buf_size, "SQUARE GPA");
				break;
			case 0x33AD:
				strcpy_s(buf, buf_size, "SQUARE RAD");
				break;
			case 0x33AE:
				strcpy_s(buf, buf_size, "SQUARE RAD OVER S");
				break;
			case 0x33AF:
				strcpy_s(buf, buf_size, "SQUARE RAD OVER S SQUARED");
				break;
			case 0x33B0:
				strcpy_s(buf, buf_size, "SQUARE PS");
				break;
			case 0x33B1:
				strcpy_s(buf, buf_size, "SQUARE NS");
				break;
			case 0x33B2:
				strcpy_s(buf, buf_size, "SQUARE MU S");
				break;
			case 0x33B3:
				strcpy_s(buf, buf_size, "SQUARE MS");
				break;
			case 0x33B4:
				strcpy_s(buf, buf_size, "SQUARE PV");
				break;
			case 0x33B5:
				strcpy_s(buf, buf_size, "SQUARE NV");
				break;
			case 0x33B6:
				strcpy_s(buf, buf_size, "SQUARE MU V");
				break;
			case 0x33B7:
				strcpy_s(buf, buf_size, "SQUARE MV");
				break;
			case 0x33B8:
				strcpy_s(buf, buf_size, "SQUARE KV");
				break;
			case 0x33B9:
				strcpy_s(buf, buf_size, "SQUARE MV MEGA");
				break;
			case 0x33BA:
				strcpy_s(buf, buf_size, "SQUARE PW");
				break;
			case 0x33BB:
				strcpy_s(buf, buf_size, "SQUARE NW");
				break;
			case 0x33BC:
				strcpy_s(buf, buf_size, "SQUARE MU W");
				break;
			case 0x33BD:
				strcpy_s(buf, buf_size, "SQUARE MW");
				break;
			case 0x33BE:
				strcpy_s(buf, buf_size, "SQUARE KW");
				break;
			case 0x33BF:
				strcpy_s(buf, buf_size, "SQUARE MW MEGA");
				break;
			case 0x33C0:
				strcpy_s(buf, buf_size, "SQUARE K OHM");
				break;
			case 0x33C1:
				strcpy_s(buf, buf_size, "SQUARE M OHM");
				break;
			case 0x33C2:
				strcpy_s(buf, buf_size, "SQUARE AM");
				break;
			case 0x33C3:
				strcpy_s(buf, buf_size, "SQUARE BQ");
				break;
			case 0x33C4:
				strcpy_s(buf, buf_size, "SQUARE CC");
				break;
			case 0x33C5:
				strcpy_s(buf, buf_size, "SQUARE CD");
				break;
			case 0x33C6:
				strcpy_s(buf, buf_size, "SQUARE C OVER KG");
				break;
			case 0x33C7:
				strcpy_s(buf, buf_size, "SQUARE CO");
				break;
			case 0x33C8:
				strcpy_s(buf, buf_size, "SQUARE DB");
				break;
			case 0x33C9:
				strcpy_s(buf, buf_size, "SQUARE GY");
				break;
			case 0x33CA:
				strcpy_s(buf, buf_size, "SQUARE HA");
				break;
			case 0x33CB:
				strcpy_s(buf, buf_size, "SQUARE HP");
				break;
			case 0x33CC:
				strcpy_s(buf, buf_size, "SQUARE IN");
				break;
			case 0x33CD:
				strcpy_s(buf, buf_size, "SQUARE KK");
				break;
			case 0x33CE:
				strcpy_s(buf, buf_size, "SQUARE KM CAPITAL");
				break;
			case 0x33CF:
				strcpy_s(buf, buf_size, "SQUARE KT");
				break;
			case 0x33D0:
				strcpy_s(buf, buf_size, "SQUARE LM");
				break;
			case 0x33D1:
				strcpy_s(buf, buf_size, "SQUARE LN");
				break;
			case 0x33D2:
				strcpy_s(buf, buf_size, "SQUARE LOG");
				break;
			case 0x33D3:
				strcpy_s(buf, buf_size, "SQUARE LX");
				break;
			case 0x33D4:
				strcpy_s(buf, buf_size, "SQUARE MB SMALL");
				break;
			case 0x33D5:
				strcpy_s(buf, buf_size, "SQUARE MIL");
				break;
			case 0x33D6:
				strcpy_s(buf, buf_size, "SQUARE MOL");
				break;
			case 0x33D7:
				strcpy_s(buf, buf_size, "SQUARE PH");
				break;
			case 0x33D8:
				strcpy_s(buf, buf_size, "SQUARE PM");
				break;
			case 0x33D9:
				strcpy_s(buf, buf_size, "SQUARE PPM");
				break;
			case 0x33DA:
				strcpy_s(buf, buf_size, "SQUARE PR");
				break;
			case 0x33DB:
				strcpy_s(buf, buf_size, "SQUARE SR");
				break;
			case 0x33DC:
				strcpy_s(buf, buf_size, "SQUARE SV");
				break;
			case 0x33DD:
				strcpy_s(buf, buf_size, "SQUARE WB");
				break;
			case 0x33DE:
				strcpy_s(buf, buf_size, "SQUARE V OVER M");
				break;
			case 0x33DF:
				strcpy_s(buf, buf_size, "SQUARE A OVER M");
				break;
			case 0x33E0:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY ONE");
				break;
			case 0x33E1:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWO");
				break;
			case 0x33E2:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THREE");
				break;
			case 0x33E3:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOUR");
				break;
			case 0x33E4:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIVE");
				break;
			case 0x33E5:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIX");
				break;
			case 0x33E6:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVEN");
				break;
			case 0x33E7:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHT");
				break;
			case 0x33E8:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINE");
				break;
			case 0x33E9:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TEN");
				break;
			case 0x33EA:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY ELEVEN");
				break;
			case 0x33EB:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWELVE");
				break;
			case 0x33EC:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTEEN");
				break;
			case 0x33ED:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FOURTEEN");
				break;
			case 0x33EE:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY FIFTEEN");
				break;
			case 0x33EF:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SIXTEEN");
				break;
			case 0x33F0:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY SEVENTEEN");
				break;
			case 0x33F1:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY EIGHTEEN");
				break;
			case 0x33F2:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY NINETEEN");
				break;
			case 0x33F3:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY");
				break;
			case 0x33F4:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-ONE");
				break;
			case 0x33F5:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-TWO");
				break;
			case 0x33F6:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-THREE");
				break;
			case 0x33F7:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-FOUR");
				break;
			case 0x33F8:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-FIVE");
				break;
			case 0x33F9:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-SIX");
				break;
			case 0x33FA:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-SEVEN");
				break;
			case 0x33FB:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-EIGHT");
				break;
			case 0x33FC:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY TWENTY-NINE");
				break;
			case 0x33FD:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY");
				break;
			case 0x33FE:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TELEGRAPH SYMBOL FOR DAY THIRTY-ONE");
				break;
			case 0x33FF:
				strcpy_s(buf, buf_size, "SQUARE GAL");
				break;
			case 0x3400:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension A, First>");
				break;
			case 0x4DBF:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension A, Last>");
				break;
			case 0x4DC0:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE CREATIVE HEAVEN");
				break;
			case 0x4DC1:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE RECEPTIVE EARTH");
				break;
			case 0x4DC2:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR DIFFICULTY AT THE BEGINNING");
				break;
			case 0x4DC3:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR YOUTHFUL FOLLY");
				break;
			case 0x4DC4:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR WAITING");
				break;
			case 0x4DC5:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR CONFLICT");
				break;
			case 0x4DC6:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE ARMY");
				break;
			case 0x4DC7:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR HOLDING TOGETHER");
				break;
			case 0x4DC8:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR SMALL TAMING");
				break;
			case 0x4DC9:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR TREADING");
				break;
			case 0x4DCA:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR PEACE");
				break;
			case 0x4DCB:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR STANDSTILL");
				break;
			case 0x4DCC:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR FELLOWSHIP");
				break;
			case 0x4DCD:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR GREAT POSSESSION");
				break;
			case 0x4DCE:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR MODESTY");
				break;
			case 0x4DCF:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR ENTHUSIASM");
				break;
			case 0x4DD0:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR FOLLOWING");
				break;
			case 0x4DD1:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR WORK ON THE DECAYED");
				break;
			case 0x4DD2:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR APPROACH");
				break;
			case 0x4DD3:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR CONTEMPLATION");
				break;
			case 0x4DD4:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR BITING THROUGH");
				break;
			case 0x4DD5:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR GRACE");
				break;
			case 0x4DD6:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR SPLITTING APART");
				break;
			case 0x4DD7:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR RETURN");
				break;
			case 0x4DD8:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR INNOCENCE");
				break;
			case 0x4DD9:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR GREAT TAMING");
				break;
			case 0x4DDA:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR MOUTH CORNERS");
				break;
			case 0x4DDB:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR GREAT PREPONDERANCE");
				break;
			case 0x4DDC:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE ABYSMAL WATER");
				break;
			case 0x4DDD:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE CLINGING FIRE");
				break;
			case 0x4DDE:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR INFLUENCE");
				break;
			case 0x4DDF:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR DURATION");
				break;
			case 0x4DE0:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR RETREAT");
				break;
			case 0x4DE1:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR GREAT POWER");
				break;
			case 0x4DE2:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR PROGRESS");
				break;
			case 0x4DE3:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR DARKENING OF THE LIGHT");
				break;
			case 0x4DE4:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE FAMILY");
				break;
			case 0x4DE5:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR OPPOSITION");
				break;
			case 0x4DE6:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR OBSTRUCTION");
				break;
			case 0x4DE7:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR DELIVERANCE");
				break;
			case 0x4DE8:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR DECREASE");
				break;
			case 0x4DE9:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR INCREASE");
				break;
			case 0x4DEA:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR BREAKTHROUGH");
				break;
			case 0x4DEB:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR COMING TO MEET");
				break;
			case 0x4DEC:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR GATHERING TOGETHER");
				break;
			case 0x4DED:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR PUSHING UPWARD");
				break;
			case 0x4DEE:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR OPPRESSION");
				break;
			case 0x4DEF:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE WELL");
				break;
			case 0x4DF0:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR REVOLUTION");
				break;
			case 0x4DF1:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE CAULDRON");
				break;
			case 0x4DF2:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE AROUSING THUNDER");
				break;
			case 0x4DF3:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE KEEPING STILL MOUNTAIN");
				break;
			case 0x4DF4:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR DEVELOPMENT");
				break;
			case 0x4DF5:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE MARRYING MAIDEN");
				break;
			case 0x4DF6:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR ABUNDANCE");
				break;
			case 0x4DF7:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE WANDERER");
				break;
			case 0x4DF8:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE GENTLE WIND");
				break;
			case 0x4DF9:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR THE JOYOUS LAKE");
				break;
			case 0x4DFA:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR DISPERSION");
				break;
			case 0x4DFB:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR LIMITATION");
				break;
			case 0x4DFC:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR INNER TRUTH");
				break;
			case 0x4DFD:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR SMALL PREPONDERANCE");
				break;
			case 0x4DFE:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR AFTER COMPLETION");
				break;
			case 0x4DFF:
				strcpy_s(buf, buf_size, "HEXAGRAM FOR BEFORE COMPLETION");
				break;
			case 0x4E00:
				strcpy_s(buf, buf_size, "<CJK Ideograph, First>");
				break;
			case 0x9FFC:
				strcpy_s(buf, buf_size, "<CJK Ideograph, Last>");
				break;
			case 0xA000:
				strcpy_s(buf, buf_size, "YI SYLLABLE IT");
				break;
			case 0xA001:
				strcpy_s(buf, buf_size, "YI SYLLABLE IX");
				break;
			case 0xA002:
				strcpy_s(buf, buf_size, "YI SYLLABLE I");
				break;
			case 0xA003:
				strcpy_s(buf, buf_size, "YI SYLLABLE IP");
				break;
			case 0xA004:
				strcpy_s(buf, buf_size, "YI SYLLABLE IET");
				break;
			case 0xA005:
				strcpy_s(buf, buf_size, "YI SYLLABLE IEX");
				break;
			case 0xA006:
				strcpy_s(buf, buf_size, "YI SYLLABLE IE");
				break;
			case 0xA007:
				strcpy_s(buf, buf_size, "YI SYLLABLE IEP");
				break;
			case 0xA008:
				strcpy_s(buf, buf_size, "YI SYLLABLE AT");
				break;
			case 0xA009:
				strcpy_s(buf, buf_size, "YI SYLLABLE AX");
				break;
			case 0xA00A:
				strcpy_s(buf, buf_size, "YI SYLLABLE A");
				break;
			case 0xA00B:
				strcpy_s(buf, buf_size, "YI SYLLABLE AP");
				break;
			case 0xA00C:
				strcpy_s(buf, buf_size, "YI SYLLABLE UOX");
				break;
			case 0xA00D:
				strcpy_s(buf, buf_size, "YI SYLLABLE UO");
				break;
			case 0xA00E:
				strcpy_s(buf, buf_size, "YI SYLLABLE UOP");
				break;
			case 0xA00F:
				strcpy_s(buf, buf_size, "YI SYLLABLE OT");
				break;
			case 0xA010:
				strcpy_s(buf, buf_size, "YI SYLLABLE OX");
				break;
			case 0xA011:
				strcpy_s(buf, buf_size, "YI SYLLABLE O");
				break;
			case 0xA012:
				strcpy_s(buf, buf_size, "YI SYLLABLE OP");
				break;
			case 0xA013:
				strcpy_s(buf, buf_size, "YI SYLLABLE EX");
				break;
			case 0xA014:
				strcpy_s(buf, buf_size, "YI SYLLABLE E");
				break;
			case 0xA015:
				strcpy_s(buf, buf_size, "YI SYLLABLE WU");
				break;
			case 0xA016:
				strcpy_s(buf, buf_size, "YI SYLLABLE BIT");
				break;
			case 0xA017:
				strcpy_s(buf, buf_size, "YI SYLLABLE BIX");
				break;
			case 0xA018:
				strcpy_s(buf, buf_size, "YI SYLLABLE BI");
				break;
			case 0xA019:
				strcpy_s(buf, buf_size, "YI SYLLABLE BIP");
				break;
			case 0xA01A:
				strcpy_s(buf, buf_size, "YI SYLLABLE BIET");
				break;
			case 0xA01B:
				strcpy_s(buf, buf_size, "YI SYLLABLE BIEX");
				break;
			case 0xA01C:
				strcpy_s(buf, buf_size, "YI SYLLABLE BIE");
				break;
			case 0xA01D:
				strcpy_s(buf, buf_size, "YI SYLLABLE BIEP");
				break;
			case 0xA01E:
				strcpy_s(buf, buf_size, "YI SYLLABLE BAT");
				break;
			case 0xA01F:
				strcpy_s(buf, buf_size, "YI SYLLABLE BAX");
				break;
			case 0xA020:
				strcpy_s(buf, buf_size, "YI SYLLABLE BA");
				break;
			case 0xA021:
				strcpy_s(buf, buf_size, "YI SYLLABLE BAP");
				break;
			case 0xA022:
				strcpy_s(buf, buf_size, "YI SYLLABLE BUOX");
				break;
			case 0xA023:
				strcpy_s(buf, buf_size, "YI SYLLABLE BUO");
				break;
			case 0xA024:
				strcpy_s(buf, buf_size, "YI SYLLABLE BUOP");
				break;
			case 0xA025:
				strcpy_s(buf, buf_size, "YI SYLLABLE BOT");
				break;
			case 0xA026:
				strcpy_s(buf, buf_size, "YI SYLLABLE BOX");
				break;
			case 0xA027:
				strcpy_s(buf, buf_size, "YI SYLLABLE BO");
				break;
			case 0xA028:
				strcpy_s(buf, buf_size, "YI SYLLABLE BOP");
				break;
			case 0xA029:
				strcpy_s(buf, buf_size, "YI SYLLABLE BEX");
				break;
			case 0xA02A:
				strcpy_s(buf, buf_size, "YI SYLLABLE BE");
				break;
			case 0xA02B:
				strcpy_s(buf, buf_size, "YI SYLLABLE BEP");
				break;
			case 0xA02C:
				strcpy_s(buf, buf_size, "YI SYLLABLE BUT");
				break;
			case 0xA02D:
				strcpy_s(buf, buf_size, "YI SYLLABLE BUX");
				break;
			case 0xA02E:
				strcpy_s(buf, buf_size, "YI SYLLABLE BU");
				break;
			case 0xA02F:
				strcpy_s(buf, buf_size, "YI SYLLABLE BUP");
				break;
			case 0xA030:
				strcpy_s(buf, buf_size, "YI SYLLABLE BURX");
				break;
			case 0xA031:
				strcpy_s(buf, buf_size, "YI SYLLABLE BUR");
				break;
			case 0xA032:
				strcpy_s(buf, buf_size, "YI SYLLABLE BYT");
				break;
			case 0xA033:
				strcpy_s(buf, buf_size, "YI SYLLABLE BYX");
				break;
			case 0xA034:
				strcpy_s(buf, buf_size, "YI SYLLABLE BY");
				break;
			case 0xA035:
				strcpy_s(buf, buf_size, "YI SYLLABLE BYP");
				break;
			case 0xA036:
				strcpy_s(buf, buf_size, "YI SYLLABLE BYRX");
				break;
			case 0xA037:
				strcpy_s(buf, buf_size, "YI SYLLABLE BYR");
				break;
			case 0xA038:
				strcpy_s(buf, buf_size, "YI SYLLABLE PIT");
				break;
			case 0xA039:
				strcpy_s(buf, buf_size, "YI SYLLABLE PIX");
				break;
			case 0xA03A:
				strcpy_s(buf, buf_size, "YI SYLLABLE PI");
				break;
			case 0xA03B:
				strcpy_s(buf, buf_size, "YI SYLLABLE PIP");
				break;
			case 0xA03C:
				strcpy_s(buf, buf_size, "YI SYLLABLE PIEX");
				break;
			case 0xA03D:
				strcpy_s(buf, buf_size, "YI SYLLABLE PIE");
				break;
			case 0xA03E:
				strcpy_s(buf, buf_size, "YI SYLLABLE PIEP");
				break;
			case 0xA03F:
				strcpy_s(buf, buf_size, "YI SYLLABLE PAT");
				break;
			case 0xA040:
				strcpy_s(buf, buf_size, "YI SYLLABLE PAX");
				break;
			case 0xA041:
				strcpy_s(buf, buf_size, "YI SYLLABLE PA");
				break;
			case 0xA042:
				strcpy_s(buf, buf_size, "YI SYLLABLE PAP");
				break;
			case 0xA043:
				strcpy_s(buf, buf_size, "YI SYLLABLE PUOX");
				break;
			case 0xA044:
				strcpy_s(buf, buf_size, "YI SYLLABLE PUO");
				break;
			case 0xA045:
				strcpy_s(buf, buf_size, "YI SYLLABLE PUOP");
				break;
			case 0xA046:
				strcpy_s(buf, buf_size, "YI SYLLABLE POT");
				break;
			case 0xA047:
				strcpy_s(buf, buf_size, "YI SYLLABLE POX");
				break;
			case 0xA048:
				strcpy_s(buf, buf_size, "YI SYLLABLE PO");
				break;
			case 0xA049:
				strcpy_s(buf, buf_size, "YI SYLLABLE POP");
				break;
			case 0xA04A:
				strcpy_s(buf, buf_size, "YI SYLLABLE PUT");
				break;
			case 0xA04B:
				strcpy_s(buf, buf_size, "YI SYLLABLE PUX");
				break;
			case 0xA04C:
				strcpy_s(buf, buf_size, "YI SYLLABLE PU");
				break;
			case 0xA04D:
				strcpy_s(buf, buf_size, "YI SYLLABLE PUP");
				break;
			case 0xA04E:
				strcpy_s(buf, buf_size, "YI SYLLABLE PURX");
				break;
			case 0xA04F:
				strcpy_s(buf, buf_size, "YI SYLLABLE PUR");
				break;
			case 0xA050:
				strcpy_s(buf, buf_size, "YI SYLLABLE PYT");
				break;
			case 0xA051:
				strcpy_s(buf, buf_size, "YI SYLLABLE PYX");
				break;
			case 0xA052:
				strcpy_s(buf, buf_size, "YI SYLLABLE PY");
				break;
			case 0xA053:
				strcpy_s(buf, buf_size, "YI SYLLABLE PYP");
				break;
			case 0xA054:
				strcpy_s(buf, buf_size, "YI SYLLABLE PYRX");
				break;
			case 0xA055:
				strcpy_s(buf, buf_size, "YI SYLLABLE PYR");
				break;
			case 0xA056:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBIT");
				break;
			case 0xA057:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBIX");
				break;
			case 0xA058:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBI");
				break;
			case 0xA059:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBIP");
				break;
			case 0xA05A:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBIET");
				break;
			case 0xA05B:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBIEX");
				break;
			case 0xA05C:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBIE");
				break;
			case 0xA05D:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBIEP");
				break;
			case 0xA05E:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBAT");
				break;
			case 0xA05F:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBAX");
				break;
			case 0xA060:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBA");
				break;
			case 0xA061:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBAP");
				break;
			case 0xA062:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBUOX");
				break;
			case 0xA063:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBUO");
				break;
			case 0xA064:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBUOP");
				break;
			case 0xA065:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBOT");
				break;
			case 0xA066:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBOX");
				break;
			case 0xA067:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBO");
				break;
			case 0xA068:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBOP");
				break;
			case 0xA069:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBEX");
				break;
			case 0xA06A:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBE");
				break;
			case 0xA06B:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBEP");
				break;
			case 0xA06C:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBUT");
				break;
			case 0xA06D:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBUX");
				break;
			case 0xA06E:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBU");
				break;
			case 0xA06F:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBUP");
				break;
			case 0xA070:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBURX");
				break;
			case 0xA071:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBUR");
				break;
			case 0xA072:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBYT");
				break;
			case 0xA073:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBYX");
				break;
			case 0xA074:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBY");
				break;
			case 0xA075:
				strcpy_s(buf, buf_size, "YI SYLLABLE BBYP");
				break;
			case 0xA076:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBIT");
				break;
			case 0xA077:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBIX");
				break;
			case 0xA078:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBI");
				break;
			case 0xA079:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBIP");
				break;
			case 0xA07A:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBIEX");
				break;
			case 0xA07B:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBIE");
				break;
			case 0xA07C:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBIEP");
				break;
			case 0xA07D:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBAT");
				break;
			case 0xA07E:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBAX");
				break;
			case 0xA07F:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBA");
				break;
			case 0xA080:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBAP");
				break;
			case 0xA081:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBOT");
				break;
			case 0xA082:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBOX");
				break;
			case 0xA083:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBO");
				break;
			case 0xA084:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBOP");
				break;
			case 0xA085:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBUT");
				break;
			case 0xA086:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBUX");
				break;
			case 0xA087:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBU");
				break;
			case 0xA088:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBUP");
				break;
			case 0xA089:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBURX");
				break;
			case 0xA08A:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBUR");
				break;
			case 0xA08B:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBYT");
				break;
			case 0xA08C:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBYX");
				break;
			case 0xA08D:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBY");
				break;
			case 0xA08E:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBYP");
				break;
			case 0xA08F:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBYRX");
				break;
			case 0xA090:
				strcpy_s(buf, buf_size, "YI SYLLABLE NBYR");
				break;
			case 0xA091:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMIT");
				break;
			case 0xA092:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMIX");
				break;
			case 0xA093:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMI");
				break;
			case 0xA094:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMIP");
				break;
			case 0xA095:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMIEX");
				break;
			case 0xA096:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMIE");
				break;
			case 0xA097:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMIEP");
				break;
			case 0xA098:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMAT");
				break;
			case 0xA099:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMAX");
				break;
			case 0xA09A:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMA");
				break;
			case 0xA09B:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMAP");
				break;
			case 0xA09C:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMUOX");
				break;
			case 0xA09D:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMUO");
				break;
			case 0xA09E:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMUOP");
				break;
			case 0xA09F:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMOT");
				break;
			case 0xA0A0:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMOX");
				break;
			case 0xA0A1:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMO");
				break;
			case 0xA0A2:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMOP");
				break;
			case 0xA0A3:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMUT");
				break;
			case 0xA0A4:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMUX");
				break;
			case 0xA0A5:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMU");
				break;
			case 0xA0A6:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMUP");
				break;
			case 0xA0A7:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMURX");
				break;
			case 0xA0A8:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMUR");
				break;
			case 0xA0A9:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMYX");
				break;
			case 0xA0AA:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMY");
				break;
			case 0xA0AB:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMYP");
				break;
			case 0xA0AC:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMYRX");
				break;
			case 0xA0AD:
				strcpy_s(buf, buf_size, "YI SYLLABLE HMYR");
				break;
			case 0xA0AE:
				strcpy_s(buf, buf_size, "YI SYLLABLE MIT");
				break;
			case 0xA0AF:
				strcpy_s(buf, buf_size, "YI SYLLABLE MIX");
				break;
			case 0xA0B0:
				strcpy_s(buf, buf_size, "YI SYLLABLE MI");
				break;
			case 0xA0B1:
				strcpy_s(buf, buf_size, "YI SYLLABLE MIP");
				break;
			case 0xA0B2:
				strcpy_s(buf, buf_size, "YI SYLLABLE MIEX");
				break;
			case 0xA0B3:
				strcpy_s(buf, buf_size, "YI SYLLABLE MIE");
				break;
			case 0xA0B4:
				strcpy_s(buf, buf_size, "YI SYLLABLE MIEP");
				break;
			case 0xA0B5:
				strcpy_s(buf, buf_size, "YI SYLLABLE MAT");
				break;
			case 0xA0B6:
				strcpy_s(buf, buf_size, "YI SYLLABLE MAX");
				break;
			case 0xA0B7:
				strcpy_s(buf, buf_size, "YI SYLLABLE MA");
				break;
			case 0xA0B8:
				strcpy_s(buf, buf_size, "YI SYLLABLE MAP");
				break;
			case 0xA0B9:
				strcpy_s(buf, buf_size, "YI SYLLABLE MUOT");
				break;
			case 0xA0BA:
				strcpy_s(buf, buf_size, "YI SYLLABLE MUOX");
				break;
			case 0xA0BB:
				strcpy_s(buf, buf_size, "YI SYLLABLE MUO");
				break;
			case 0xA0BC:
				strcpy_s(buf, buf_size, "YI SYLLABLE MUOP");
				break;
			case 0xA0BD:
				strcpy_s(buf, buf_size, "YI SYLLABLE MOT");
				break;
			case 0xA0BE:
				strcpy_s(buf, buf_size, "YI SYLLABLE MOX");
				break;
			case 0xA0BF:
				strcpy_s(buf, buf_size, "YI SYLLABLE MO");
				break;
			case 0xA0C0:
				strcpy_s(buf, buf_size, "YI SYLLABLE MOP");
				break;
			case 0xA0C1:
				strcpy_s(buf, buf_size, "YI SYLLABLE MEX");
				break;
			case 0xA0C2:
				strcpy_s(buf, buf_size, "YI SYLLABLE ME");
				break;
			case 0xA0C3:
				strcpy_s(buf, buf_size, "YI SYLLABLE MUT");
				break;
			case 0xA0C4:
				strcpy_s(buf, buf_size, "YI SYLLABLE MUX");
				break;
			case 0xA0C5:
				strcpy_s(buf, buf_size, "YI SYLLABLE MU");
				break;
			case 0xA0C6:
				strcpy_s(buf, buf_size, "YI SYLLABLE MUP");
				break;
			case 0xA0C7:
				strcpy_s(buf, buf_size, "YI SYLLABLE MURX");
				break;
			case 0xA0C8:
				strcpy_s(buf, buf_size, "YI SYLLABLE MUR");
				break;
			case 0xA0C9:
				strcpy_s(buf, buf_size, "YI SYLLABLE MYT");
				break;
			case 0xA0CA:
				strcpy_s(buf, buf_size, "YI SYLLABLE MYX");
				break;
			case 0xA0CB:
				strcpy_s(buf, buf_size, "YI SYLLABLE MY");
				break;
			case 0xA0CC:
				strcpy_s(buf, buf_size, "YI SYLLABLE MYP");
				break;
			case 0xA0CD:
				strcpy_s(buf, buf_size, "YI SYLLABLE FIT");
				break;
			case 0xA0CE:
				strcpy_s(buf, buf_size, "YI SYLLABLE FIX");
				break;
			case 0xA0CF:
				strcpy_s(buf, buf_size, "YI SYLLABLE FI");
				break;
			case 0xA0D0:
				strcpy_s(buf, buf_size, "YI SYLLABLE FIP");
				break;
			case 0xA0D1:
				strcpy_s(buf, buf_size, "YI SYLLABLE FAT");
				break;
			case 0xA0D2:
				strcpy_s(buf, buf_size, "YI SYLLABLE FAX");
				break;
			case 0xA0D3:
				strcpy_s(buf, buf_size, "YI SYLLABLE FA");
				break;
			case 0xA0D4:
				strcpy_s(buf, buf_size, "YI SYLLABLE FAP");
				break;
			case 0xA0D5:
				strcpy_s(buf, buf_size, "YI SYLLABLE FOX");
				break;
			case 0xA0D6:
				strcpy_s(buf, buf_size, "YI SYLLABLE FO");
				break;
			case 0xA0D7:
				strcpy_s(buf, buf_size, "YI SYLLABLE FOP");
				break;
			case 0xA0D8:
				strcpy_s(buf, buf_size, "YI SYLLABLE FUT");
				break;
			case 0xA0D9:
				strcpy_s(buf, buf_size, "YI SYLLABLE FUX");
				break;
			case 0xA0DA:
				strcpy_s(buf, buf_size, "YI SYLLABLE FU");
				break;
			case 0xA0DB:
				strcpy_s(buf, buf_size, "YI SYLLABLE FUP");
				break;
			case 0xA0DC:
				strcpy_s(buf, buf_size, "YI SYLLABLE FURX");
				break;
			case 0xA0DD:
				strcpy_s(buf, buf_size, "YI SYLLABLE FUR");
				break;
			case 0xA0DE:
				strcpy_s(buf, buf_size, "YI SYLLABLE FYT");
				break;
			case 0xA0DF:
				strcpy_s(buf, buf_size, "YI SYLLABLE FYX");
				break;
			case 0xA0E0:
				strcpy_s(buf, buf_size, "YI SYLLABLE FY");
				break;
			case 0xA0E1:
				strcpy_s(buf, buf_size, "YI SYLLABLE FYP");
				break;
			case 0xA0E2:
				strcpy_s(buf, buf_size, "YI SYLLABLE VIT");
				break;
			case 0xA0E3:
				strcpy_s(buf, buf_size, "YI SYLLABLE VIX");
				break;
			case 0xA0E4:
				strcpy_s(buf, buf_size, "YI SYLLABLE VI");
				break;
			case 0xA0E5:
				strcpy_s(buf, buf_size, "YI SYLLABLE VIP");
				break;
			case 0xA0E6:
				strcpy_s(buf, buf_size, "YI SYLLABLE VIET");
				break;
			case 0xA0E7:
				strcpy_s(buf, buf_size, "YI SYLLABLE VIEX");
				break;
			case 0xA0E8:
				strcpy_s(buf, buf_size, "YI SYLLABLE VIE");
				break;
			case 0xA0E9:
				strcpy_s(buf, buf_size, "YI SYLLABLE VIEP");
				break;
			case 0xA0EA:
				strcpy_s(buf, buf_size, "YI SYLLABLE VAT");
				break;
			case 0xA0EB:
				strcpy_s(buf, buf_size, "YI SYLLABLE VAX");
				break;
			case 0xA0EC:
				strcpy_s(buf, buf_size, "YI SYLLABLE VA");
				break;
			case 0xA0ED:
				strcpy_s(buf, buf_size, "YI SYLLABLE VAP");
				break;
			case 0xA0EE:
				strcpy_s(buf, buf_size, "YI SYLLABLE VOT");
				break;
			case 0xA0EF:
				strcpy_s(buf, buf_size, "YI SYLLABLE VOX");
				break;
			case 0xA0F0:
				strcpy_s(buf, buf_size, "YI SYLLABLE VO");
				break;
			case 0xA0F1:
				strcpy_s(buf, buf_size, "YI SYLLABLE VOP");
				break;
			case 0xA0F2:
				strcpy_s(buf, buf_size, "YI SYLLABLE VEX");
				break;
			case 0xA0F3:
				strcpy_s(buf, buf_size, "YI SYLLABLE VEP");
				break;
			case 0xA0F4:
				strcpy_s(buf, buf_size, "YI SYLLABLE VUT");
				break;
			case 0xA0F5:
				strcpy_s(buf, buf_size, "YI SYLLABLE VUX");
				break;
			case 0xA0F6:
				strcpy_s(buf, buf_size, "YI SYLLABLE VU");
				break;
			case 0xA0F7:
				strcpy_s(buf, buf_size, "YI SYLLABLE VUP");
				break;
			case 0xA0F8:
				strcpy_s(buf, buf_size, "YI SYLLABLE VURX");
				break;
			case 0xA0F9:
				strcpy_s(buf, buf_size, "YI SYLLABLE VUR");
				break;
			case 0xA0FA:
				strcpy_s(buf, buf_size, "YI SYLLABLE VYT");
				break;
			case 0xA0FB:
				strcpy_s(buf, buf_size, "YI SYLLABLE VYX");
				break;
			case 0xA0FC:
				strcpy_s(buf, buf_size, "YI SYLLABLE VY");
				break;
			case 0xA0FD:
				strcpy_s(buf, buf_size, "YI SYLLABLE VYP");
				break;
			case 0xA0FE:
				strcpy_s(buf, buf_size, "YI SYLLABLE VYRX");
				break;
			case 0xA0FF:
				strcpy_s(buf, buf_size, "YI SYLLABLE VYR");
				break;
			case 0xA100:
				strcpy_s(buf, buf_size, "YI SYLLABLE DIT");
				break;
			case 0xA101:
				strcpy_s(buf, buf_size, "YI SYLLABLE DIX");
				break;
			case 0xA102:
				strcpy_s(buf, buf_size, "YI SYLLABLE DI");
				break;
			case 0xA103:
				strcpy_s(buf, buf_size, "YI SYLLABLE DIP");
				break;
			case 0xA104:
				strcpy_s(buf, buf_size, "YI SYLLABLE DIEX");
				break;
			case 0xA105:
				strcpy_s(buf, buf_size, "YI SYLLABLE DIE");
				break;
			case 0xA106:
				strcpy_s(buf, buf_size, "YI SYLLABLE DIEP");
				break;
			case 0xA107:
				strcpy_s(buf, buf_size, "YI SYLLABLE DAT");
				break;
			case 0xA108:
				strcpy_s(buf, buf_size, "YI SYLLABLE DAX");
				break;
			case 0xA109:
				strcpy_s(buf, buf_size, "YI SYLLABLE DA");
				break;
			case 0xA10A:
				strcpy_s(buf, buf_size, "YI SYLLABLE DAP");
				break;
			case 0xA10B:
				strcpy_s(buf, buf_size, "YI SYLLABLE DUOX");
				break;
			case 0xA10C:
				strcpy_s(buf, buf_size, "YI SYLLABLE DUO");
				break;
			case 0xA10D:
				strcpy_s(buf, buf_size, "YI SYLLABLE DOT");
				break;
			case 0xA10E:
				strcpy_s(buf, buf_size, "YI SYLLABLE DOX");
				break;
			case 0xA10F:
				strcpy_s(buf, buf_size, "YI SYLLABLE DO");
				break;
			case 0xA110:
				strcpy_s(buf, buf_size, "YI SYLLABLE DOP");
				break;
			case 0xA111:
				strcpy_s(buf, buf_size, "YI SYLLABLE DEX");
				break;
			case 0xA112:
				strcpy_s(buf, buf_size, "YI SYLLABLE DE");
				break;
			case 0xA113:
				strcpy_s(buf, buf_size, "YI SYLLABLE DEP");
				break;
			case 0xA114:
				strcpy_s(buf, buf_size, "YI SYLLABLE DUT");
				break;
			case 0xA115:
				strcpy_s(buf, buf_size, "YI SYLLABLE DUX");
				break;
			case 0xA116:
				strcpy_s(buf, buf_size, "YI SYLLABLE DU");
				break;
			case 0xA117:
				strcpy_s(buf, buf_size, "YI SYLLABLE DUP");
				break;
			case 0xA118:
				strcpy_s(buf, buf_size, "YI SYLLABLE DURX");
				break;
			case 0xA119:
				strcpy_s(buf, buf_size, "YI SYLLABLE DUR");
				break;
			case 0xA11A:
				strcpy_s(buf, buf_size, "YI SYLLABLE TIT");
				break;
			case 0xA11B:
				strcpy_s(buf, buf_size, "YI SYLLABLE TIX");
				break;
			case 0xA11C:
				strcpy_s(buf, buf_size, "YI SYLLABLE TI");
				break;
			case 0xA11D:
				strcpy_s(buf, buf_size, "YI SYLLABLE TIP");
				break;
			case 0xA11E:
				strcpy_s(buf, buf_size, "YI SYLLABLE TIEX");
				break;
			case 0xA11F:
				strcpy_s(buf, buf_size, "YI SYLLABLE TIE");
				break;
			case 0xA120:
				strcpy_s(buf, buf_size, "YI SYLLABLE TIEP");
				break;
			case 0xA121:
				strcpy_s(buf, buf_size, "YI SYLLABLE TAT");
				break;
			case 0xA122:
				strcpy_s(buf, buf_size, "YI SYLLABLE TAX");
				break;
			case 0xA123:
				strcpy_s(buf, buf_size, "YI SYLLABLE TA");
				break;
			case 0xA124:
				strcpy_s(buf, buf_size, "YI SYLLABLE TAP");
				break;
			case 0xA125:
				strcpy_s(buf, buf_size, "YI SYLLABLE TUOT");
				break;
			case 0xA126:
				strcpy_s(buf, buf_size, "YI SYLLABLE TUOX");
				break;
			case 0xA127:
				strcpy_s(buf, buf_size, "YI SYLLABLE TUO");
				break;
			case 0xA128:
				strcpy_s(buf, buf_size, "YI SYLLABLE TUOP");
				break;
			case 0xA129:
				strcpy_s(buf, buf_size, "YI SYLLABLE TOT");
				break;
			case 0xA12A:
				strcpy_s(buf, buf_size, "YI SYLLABLE TOX");
				break;
			case 0xA12B:
				strcpy_s(buf, buf_size, "YI SYLLABLE TO");
				break;
			case 0xA12C:
				strcpy_s(buf, buf_size, "YI SYLLABLE TOP");
				break;
			case 0xA12D:
				strcpy_s(buf, buf_size, "YI SYLLABLE TEX");
				break;
			case 0xA12E:
				strcpy_s(buf, buf_size, "YI SYLLABLE TE");
				break;
			case 0xA12F:
				strcpy_s(buf, buf_size, "YI SYLLABLE TEP");
				break;
			case 0xA130:
				strcpy_s(buf, buf_size, "YI SYLLABLE TUT");
				break;
			case 0xA131:
				strcpy_s(buf, buf_size, "YI SYLLABLE TUX");
				break;
			case 0xA132:
				strcpy_s(buf, buf_size, "YI SYLLABLE TU");
				break;
			case 0xA133:
				strcpy_s(buf, buf_size, "YI SYLLABLE TUP");
				break;
			case 0xA134:
				strcpy_s(buf, buf_size, "YI SYLLABLE TURX");
				break;
			case 0xA135:
				strcpy_s(buf, buf_size, "YI SYLLABLE TUR");
				break;
			case 0xA136:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDIT");
				break;
			case 0xA137:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDIX");
				break;
			case 0xA138:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDI");
				break;
			case 0xA139:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDIP");
				break;
			case 0xA13A:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDIEX");
				break;
			case 0xA13B:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDIE");
				break;
			case 0xA13C:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDIEP");
				break;
			case 0xA13D:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDAT");
				break;
			case 0xA13E:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDAX");
				break;
			case 0xA13F:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDA");
				break;
			case 0xA140:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDAP");
				break;
			case 0xA141:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDUOX");
				break;
			case 0xA142:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDUO");
				break;
			case 0xA143:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDUOP");
				break;
			case 0xA144:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDOT");
				break;
			case 0xA145:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDOX");
				break;
			case 0xA146:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDO");
				break;
			case 0xA147:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDOP");
				break;
			case 0xA148:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDEX");
				break;
			case 0xA149:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDE");
				break;
			case 0xA14A:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDEP");
				break;
			case 0xA14B:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDUT");
				break;
			case 0xA14C:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDUX");
				break;
			case 0xA14D:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDU");
				break;
			case 0xA14E:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDUP");
				break;
			case 0xA14F:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDURX");
				break;
			case 0xA150:
				strcpy_s(buf, buf_size, "YI SYLLABLE DDUR");
				break;
			case 0xA151:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDIT");
				break;
			case 0xA152:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDIX");
				break;
			case 0xA153:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDI");
				break;
			case 0xA154:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDIP");
				break;
			case 0xA155:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDIEX");
				break;
			case 0xA156:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDIE");
				break;
			case 0xA157:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDAT");
				break;
			case 0xA158:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDAX");
				break;
			case 0xA159:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDA");
				break;
			case 0xA15A:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDAP");
				break;
			case 0xA15B:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDOT");
				break;
			case 0xA15C:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDOX");
				break;
			case 0xA15D:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDO");
				break;
			case 0xA15E:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDOP");
				break;
			case 0xA15F:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDEX");
				break;
			case 0xA160:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDE");
				break;
			case 0xA161:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDEP");
				break;
			case 0xA162:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDUT");
				break;
			case 0xA163:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDUX");
				break;
			case 0xA164:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDU");
				break;
			case 0xA165:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDUP");
				break;
			case 0xA166:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDURX");
				break;
			case 0xA167:
				strcpy_s(buf, buf_size, "YI SYLLABLE NDUR");
				break;
			case 0xA168:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNIT");
				break;
			case 0xA169:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNIX");
				break;
			case 0xA16A:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNI");
				break;
			case 0xA16B:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNIP");
				break;
			case 0xA16C:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNIET");
				break;
			case 0xA16D:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNIEX");
				break;
			case 0xA16E:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNIE");
				break;
			case 0xA16F:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNIEP");
				break;
			case 0xA170:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNAT");
				break;
			case 0xA171:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNAX");
				break;
			case 0xA172:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNA");
				break;
			case 0xA173:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNAP");
				break;
			case 0xA174:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNUOX");
				break;
			case 0xA175:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNUO");
				break;
			case 0xA176:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNOT");
				break;
			case 0xA177:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNOX");
				break;
			case 0xA178:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNOP");
				break;
			case 0xA179:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNEX");
				break;
			case 0xA17A:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNE");
				break;
			case 0xA17B:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNEP");
				break;
			case 0xA17C:
				strcpy_s(buf, buf_size, "YI SYLLABLE HNUT");
				break;
			case 0xA17D:
				strcpy_s(buf, buf_size, "YI SYLLABLE NIT");
				break;
			case 0xA17E:
				strcpy_s(buf, buf_size, "YI SYLLABLE NIX");
				break;
			case 0xA17F:
				strcpy_s(buf, buf_size, "YI SYLLABLE NI");
				break;
			case 0xA180:
				strcpy_s(buf, buf_size, "YI SYLLABLE NIP");
				break;
			case 0xA181:
				strcpy_s(buf, buf_size, "YI SYLLABLE NIEX");
				break;
			case 0xA182:
				strcpy_s(buf, buf_size, "YI SYLLABLE NIE");
				break;
			case 0xA183:
				strcpy_s(buf, buf_size, "YI SYLLABLE NIEP");
				break;
			case 0xA184:
				strcpy_s(buf, buf_size, "YI SYLLABLE NAX");
				break;
			case 0xA185:
				strcpy_s(buf, buf_size, "YI SYLLABLE NA");
				break;
			case 0xA186:
				strcpy_s(buf, buf_size, "YI SYLLABLE NAP");
				break;
			case 0xA187:
				strcpy_s(buf, buf_size, "YI SYLLABLE NUOX");
				break;
			case 0xA188:
				strcpy_s(buf, buf_size, "YI SYLLABLE NUO");
				break;
			case 0xA189:
				strcpy_s(buf, buf_size, "YI SYLLABLE NUOP");
				break;
			case 0xA18A:
				strcpy_s(buf, buf_size, "YI SYLLABLE NOT");
				break;
			case 0xA18B:
				strcpy_s(buf, buf_size, "YI SYLLABLE NOX");
				break;
			case 0xA18C:
				strcpy_s(buf, buf_size, "YI SYLLABLE NO");
				break;
			case 0xA18D:
				strcpy_s(buf, buf_size, "YI SYLLABLE NOP");
				break;
			case 0xA18E:
				strcpy_s(buf, buf_size, "YI SYLLABLE NEX");
				break;
			case 0xA18F:
				strcpy_s(buf, buf_size, "YI SYLLABLE NE");
				break;
			case 0xA190:
				strcpy_s(buf, buf_size, "YI SYLLABLE NEP");
				break;
			case 0xA191:
				strcpy_s(buf, buf_size, "YI SYLLABLE NUT");
				break;
			case 0xA192:
				strcpy_s(buf, buf_size, "YI SYLLABLE NUX");
				break;
			case 0xA193:
				strcpy_s(buf, buf_size, "YI SYLLABLE NU");
				break;
			case 0xA194:
				strcpy_s(buf, buf_size, "YI SYLLABLE NUP");
				break;
			case 0xA195:
				strcpy_s(buf, buf_size, "YI SYLLABLE NURX");
				break;
			case 0xA196:
				strcpy_s(buf, buf_size, "YI SYLLABLE NUR");
				break;
			case 0xA197:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLIT");
				break;
			case 0xA198:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLIX");
				break;
			case 0xA199:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLI");
				break;
			case 0xA19A:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLIP");
				break;
			case 0xA19B:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLIEX");
				break;
			case 0xA19C:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLIE");
				break;
			case 0xA19D:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLIEP");
				break;
			case 0xA19E:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLAT");
				break;
			case 0xA19F:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLAX");
				break;
			case 0xA1A0:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLA");
				break;
			case 0xA1A1:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLAP");
				break;
			case 0xA1A2:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLUOX");
				break;
			case 0xA1A3:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLUO");
				break;
			case 0xA1A4:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLUOP");
				break;
			case 0xA1A5:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLOX");
				break;
			case 0xA1A6:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLO");
				break;
			case 0xA1A7:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLOP");
				break;
			case 0xA1A8:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLEX");
				break;
			case 0xA1A9:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLE");
				break;
			case 0xA1AA:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLEP");
				break;
			case 0xA1AB:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLUT");
				break;
			case 0xA1AC:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLUX");
				break;
			case 0xA1AD:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLU");
				break;
			case 0xA1AE:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLUP");
				break;
			case 0xA1AF:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLURX");
				break;
			case 0xA1B0:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLUR");
				break;
			case 0xA1B1:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLYT");
				break;
			case 0xA1B2:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLYX");
				break;
			case 0xA1B3:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLY");
				break;
			case 0xA1B4:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLYP");
				break;
			case 0xA1B5:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLYRX");
				break;
			case 0xA1B6:
				strcpy_s(buf, buf_size, "YI SYLLABLE HLYR");
				break;
			case 0xA1B7:
				strcpy_s(buf, buf_size, "YI SYLLABLE LIT");
				break;
			case 0xA1B8:
				strcpy_s(buf, buf_size, "YI SYLLABLE LIX");
				break;
			case 0xA1B9:
				strcpy_s(buf, buf_size, "YI SYLLABLE LI");
				break;
			case 0xA1BA:
				strcpy_s(buf, buf_size, "YI SYLLABLE LIP");
				break;
			case 0xA1BB:
				strcpy_s(buf, buf_size, "YI SYLLABLE LIET");
				break;
			case 0xA1BC:
				strcpy_s(buf, buf_size, "YI SYLLABLE LIEX");
				break;
			case 0xA1BD:
				strcpy_s(buf, buf_size, "YI SYLLABLE LIE");
				break;
			case 0xA1BE:
				strcpy_s(buf, buf_size, "YI SYLLABLE LIEP");
				break;
			case 0xA1BF:
				strcpy_s(buf, buf_size, "YI SYLLABLE LAT");
				break;
			case 0xA1C0:
				strcpy_s(buf, buf_size, "YI SYLLABLE LAX");
				break;
			case 0xA1C1:
				strcpy_s(buf, buf_size, "YI SYLLABLE LA");
				break;
			case 0xA1C2:
				strcpy_s(buf, buf_size, "YI SYLLABLE LAP");
				break;
			case 0xA1C3:
				strcpy_s(buf, buf_size, "YI SYLLABLE LUOT");
				break;
			case 0xA1C4:
				strcpy_s(buf, buf_size, "YI SYLLABLE LUOX");
				break;
			case 0xA1C5:
				strcpy_s(buf, buf_size, "YI SYLLABLE LUO");
				break;
			case 0xA1C6:
				strcpy_s(buf, buf_size, "YI SYLLABLE LUOP");
				break;
			case 0xA1C7:
				strcpy_s(buf, buf_size, "YI SYLLABLE LOT");
				break;
			case 0xA1C8:
				strcpy_s(buf, buf_size, "YI SYLLABLE LOX");
				break;
			case 0xA1C9:
				strcpy_s(buf, buf_size, "YI SYLLABLE LO");
				break;
			case 0xA1CA:
				strcpy_s(buf, buf_size, "YI SYLLABLE LOP");
				break;
			case 0xA1CB:
				strcpy_s(buf, buf_size, "YI SYLLABLE LEX");
				break;
			case 0xA1CC:
				strcpy_s(buf, buf_size, "YI SYLLABLE LE");
				break;
			case 0xA1CD:
				strcpy_s(buf, buf_size, "YI SYLLABLE LEP");
				break;
			case 0xA1CE:
				strcpy_s(buf, buf_size, "YI SYLLABLE LUT");
				break;
			case 0xA1CF:
				strcpy_s(buf, buf_size, "YI SYLLABLE LUX");
				break;
			case 0xA1D0:
				strcpy_s(buf, buf_size, "YI SYLLABLE LU");
				break;
			case 0xA1D1:
				strcpy_s(buf, buf_size, "YI SYLLABLE LUP");
				break;
			case 0xA1D2:
				strcpy_s(buf, buf_size, "YI SYLLABLE LURX");
				break;
			case 0xA1D3:
				strcpy_s(buf, buf_size, "YI SYLLABLE LUR");
				break;
			case 0xA1D4:
				strcpy_s(buf, buf_size, "YI SYLLABLE LYT");
				break;
			case 0xA1D5:
				strcpy_s(buf, buf_size, "YI SYLLABLE LYX");
				break;
			case 0xA1D6:
				strcpy_s(buf, buf_size, "YI SYLLABLE LY");
				break;
			case 0xA1D7:
				strcpy_s(buf, buf_size, "YI SYLLABLE LYP");
				break;
			case 0xA1D8:
				strcpy_s(buf, buf_size, "YI SYLLABLE LYRX");
				break;
			case 0xA1D9:
				strcpy_s(buf, buf_size, "YI SYLLABLE LYR");
				break;
			case 0xA1DA:
				strcpy_s(buf, buf_size, "YI SYLLABLE GIT");
				break;
			case 0xA1DB:
				strcpy_s(buf, buf_size, "YI SYLLABLE GIX");
				break;
			case 0xA1DC:
				strcpy_s(buf, buf_size, "YI SYLLABLE GI");
				break;
			case 0xA1DD:
				strcpy_s(buf, buf_size, "YI SYLLABLE GIP");
				break;
			case 0xA1DE:
				strcpy_s(buf, buf_size, "YI SYLLABLE GIET");
				break;
			case 0xA1DF:
				strcpy_s(buf, buf_size, "YI SYLLABLE GIEX");
				break;
			case 0xA1E0:
				strcpy_s(buf, buf_size, "YI SYLLABLE GIE");
				break;
			case 0xA1E1:
				strcpy_s(buf, buf_size, "YI SYLLABLE GIEP");
				break;
			case 0xA1E2:
				strcpy_s(buf, buf_size, "YI SYLLABLE GAT");
				break;
			case 0xA1E3:
				strcpy_s(buf, buf_size, "YI SYLLABLE GAX");
				break;
			case 0xA1E4:
				strcpy_s(buf, buf_size, "YI SYLLABLE GA");
				break;
			case 0xA1E5:
				strcpy_s(buf, buf_size, "YI SYLLABLE GAP");
				break;
			case 0xA1E6:
				strcpy_s(buf, buf_size, "YI SYLLABLE GUOT");
				break;
			case 0xA1E7:
				strcpy_s(buf, buf_size, "YI SYLLABLE GUOX");
				break;
			case 0xA1E8:
				strcpy_s(buf, buf_size, "YI SYLLABLE GUO");
				break;
			case 0xA1E9:
				strcpy_s(buf, buf_size, "YI SYLLABLE GUOP");
				break;
			case 0xA1EA:
				strcpy_s(buf, buf_size, "YI SYLLABLE GOT");
				break;
			case 0xA1EB:
				strcpy_s(buf, buf_size, "YI SYLLABLE GOX");
				break;
			case 0xA1EC:
				strcpy_s(buf, buf_size, "YI SYLLABLE GO");
				break;
			case 0xA1ED:
				strcpy_s(buf, buf_size, "YI SYLLABLE GOP");
				break;
			case 0xA1EE:
				strcpy_s(buf, buf_size, "YI SYLLABLE GET");
				break;
			case 0xA1EF:
				strcpy_s(buf, buf_size, "YI SYLLABLE GEX");
				break;
			case 0xA1F0:
				strcpy_s(buf, buf_size, "YI SYLLABLE GE");
				break;
			case 0xA1F1:
				strcpy_s(buf, buf_size, "YI SYLLABLE GEP");
				break;
			case 0xA1F2:
				strcpy_s(buf, buf_size, "YI SYLLABLE GUT");
				break;
			case 0xA1F3:
				strcpy_s(buf, buf_size, "YI SYLLABLE GUX");
				break;
			case 0xA1F4:
				strcpy_s(buf, buf_size, "YI SYLLABLE GU");
				break;
			case 0xA1F5:
				strcpy_s(buf, buf_size, "YI SYLLABLE GUP");
				break;
			case 0xA1F6:
				strcpy_s(buf, buf_size, "YI SYLLABLE GURX");
				break;
			case 0xA1F7:
				strcpy_s(buf, buf_size, "YI SYLLABLE GUR");
				break;
			case 0xA1F8:
				strcpy_s(buf, buf_size, "YI SYLLABLE KIT");
				break;
			case 0xA1F9:
				strcpy_s(buf, buf_size, "YI SYLLABLE KIX");
				break;
			case 0xA1FA:
				strcpy_s(buf, buf_size, "YI SYLLABLE KI");
				break;
			case 0xA1FB:
				strcpy_s(buf, buf_size, "YI SYLLABLE KIP");
				break;
			case 0xA1FC:
				strcpy_s(buf, buf_size, "YI SYLLABLE KIEX");
				break;
			case 0xA1FD:
				strcpy_s(buf, buf_size, "YI SYLLABLE KIE");
				break;
			case 0xA1FE:
				strcpy_s(buf, buf_size, "YI SYLLABLE KIEP");
				break;
			case 0xA1FF:
				strcpy_s(buf, buf_size, "YI SYLLABLE KAT");
				break;
			case 0xA200:
				strcpy_s(buf, buf_size, "YI SYLLABLE KAX");
				break;
			case 0xA201:
				strcpy_s(buf, buf_size, "YI SYLLABLE KA");
				break;
			case 0xA202:
				strcpy_s(buf, buf_size, "YI SYLLABLE KAP");
				break;
			case 0xA203:
				strcpy_s(buf, buf_size, "YI SYLLABLE KUOX");
				break;
			case 0xA204:
				strcpy_s(buf, buf_size, "YI SYLLABLE KUO");
				break;
			case 0xA205:
				strcpy_s(buf, buf_size, "YI SYLLABLE KUOP");
				break;
			case 0xA206:
				strcpy_s(buf, buf_size, "YI SYLLABLE KOT");
				break;
			case 0xA207:
				strcpy_s(buf, buf_size, "YI SYLLABLE KOX");
				break;
			case 0xA208:
				strcpy_s(buf, buf_size, "YI SYLLABLE KO");
				break;
			case 0xA209:
				strcpy_s(buf, buf_size, "YI SYLLABLE KOP");
				break;
			case 0xA20A:
				strcpy_s(buf, buf_size, "YI SYLLABLE KET");
				break;
			case 0xA20B:
				strcpy_s(buf, buf_size, "YI SYLLABLE KEX");
				break;
			case 0xA20C:
				strcpy_s(buf, buf_size, "YI SYLLABLE KE");
				break;
			case 0xA20D:
				strcpy_s(buf, buf_size, "YI SYLLABLE KEP");
				break;
			case 0xA20E:
				strcpy_s(buf, buf_size, "YI SYLLABLE KUT");
				break;
			case 0xA20F:
				strcpy_s(buf, buf_size, "YI SYLLABLE KUX");
				break;
			case 0xA210:
				strcpy_s(buf, buf_size, "YI SYLLABLE KU");
				break;
			case 0xA211:
				strcpy_s(buf, buf_size, "YI SYLLABLE KUP");
				break;
			case 0xA212:
				strcpy_s(buf, buf_size, "YI SYLLABLE KURX");
				break;
			case 0xA213:
				strcpy_s(buf, buf_size, "YI SYLLABLE KUR");
				break;
			case 0xA214:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGIT");
				break;
			case 0xA215:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGIX");
				break;
			case 0xA216:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGI");
				break;
			case 0xA217:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGIEX");
				break;
			case 0xA218:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGIE");
				break;
			case 0xA219:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGIEP");
				break;
			case 0xA21A:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGAT");
				break;
			case 0xA21B:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGAX");
				break;
			case 0xA21C:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGA");
				break;
			case 0xA21D:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGAP");
				break;
			case 0xA21E:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGUOT");
				break;
			case 0xA21F:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGUOX");
				break;
			case 0xA220:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGUO");
				break;
			case 0xA221:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGUOP");
				break;
			case 0xA222:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGOT");
				break;
			case 0xA223:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGOX");
				break;
			case 0xA224:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGO");
				break;
			case 0xA225:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGOP");
				break;
			case 0xA226:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGET");
				break;
			case 0xA227:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGEX");
				break;
			case 0xA228:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGE");
				break;
			case 0xA229:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGEP");
				break;
			case 0xA22A:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGUT");
				break;
			case 0xA22B:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGUX");
				break;
			case 0xA22C:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGU");
				break;
			case 0xA22D:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGUP");
				break;
			case 0xA22E:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGURX");
				break;
			case 0xA22F:
				strcpy_s(buf, buf_size, "YI SYLLABLE GGUR");
				break;
			case 0xA230:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGIEX");
				break;
			case 0xA231:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGIE");
				break;
			case 0xA232:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGAT");
				break;
			case 0xA233:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGAX");
				break;
			case 0xA234:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGA");
				break;
			case 0xA235:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGAP");
				break;
			case 0xA236:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGUOX");
				break;
			case 0xA237:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGUO");
				break;
			case 0xA238:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGUOP");
				break;
			case 0xA239:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGOT");
				break;
			case 0xA23A:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGOX");
				break;
			case 0xA23B:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGO");
				break;
			case 0xA23C:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGOP");
				break;
			case 0xA23D:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGEX");
				break;
			case 0xA23E:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGE");
				break;
			case 0xA23F:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGEP");
				break;
			case 0xA240:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGUT");
				break;
			case 0xA241:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGUX");
				break;
			case 0xA242:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGU");
				break;
			case 0xA243:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGUP");
				break;
			case 0xA244:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGURX");
				break;
			case 0xA245:
				strcpy_s(buf, buf_size, "YI SYLLABLE MGUR");
				break;
			case 0xA246:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXIT");
				break;
			case 0xA247:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXIX");
				break;
			case 0xA248:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXI");
				break;
			case 0xA249:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXIP");
				break;
			case 0xA24A:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXIET");
				break;
			case 0xA24B:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXIEX");
				break;
			case 0xA24C:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXIE");
				break;
			case 0xA24D:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXIEP");
				break;
			case 0xA24E:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXAT");
				break;
			case 0xA24F:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXAX");
				break;
			case 0xA250:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXA");
				break;
			case 0xA251:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXAP");
				break;
			case 0xA252:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXUOT");
				break;
			case 0xA253:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXUOX");
				break;
			case 0xA254:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXUO");
				break;
			case 0xA255:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXUOP");
				break;
			case 0xA256:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXOT");
				break;
			case 0xA257:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXOX");
				break;
			case 0xA258:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXO");
				break;
			case 0xA259:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXOP");
				break;
			case 0xA25A:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXEX");
				break;
			case 0xA25B:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXE");
				break;
			case 0xA25C:
				strcpy_s(buf, buf_size, "YI SYLLABLE HXEP");
				break;
			case 0xA25D:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGIEX");
				break;
			case 0xA25E:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGIE");
				break;
			case 0xA25F:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGIEP");
				break;
			case 0xA260:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGAT");
				break;
			case 0xA261:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGAX");
				break;
			case 0xA262:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGA");
				break;
			case 0xA263:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGAP");
				break;
			case 0xA264:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGUOT");
				break;
			case 0xA265:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGUOX");
				break;
			case 0xA266:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGUO");
				break;
			case 0xA267:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGOT");
				break;
			case 0xA268:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGOX");
				break;
			case 0xA269:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGO");
				break;
			case 0xA26A:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGOP");
				break;
			case 0xA26B:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGEX");
				break;
			case 0xA26C:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGE");
				break;
			case 0xA26D:
				strcpy_s(buf, buf_size, "YI SYLLABLE NGEP");
				break;
			case 0xA26E:
				strcpy_s(buf, buf_size, "YI SYLLABLE HIT");
				break;
			case 0xA26F:
				strcpy_s(buf, buf_size, "YI SYLLABLE HIEX");
				break;
			case 0xA270:
				strcpy_s(buf, buf_size, "YI SYLLABLE HIE");
				break;
			case 0xA271:
				strcpy_s(buf, buf_size, "YI SYLLABLE HAT");
				break;
			case 0xA272:
				strcpy_s(buf, buf_size, "YI SYLLABLE HAX");
				break;
			case 0xA273:
				strcpy_s(buf, buf_size, "YI SYLLABLE HA");
				break;
			case 0xA274:
				strcpy_s(buf, buf_size, "YI SYLLABLE HAP");
				break;
			case 0xA275:
				strcpy_s(buf, buf_size, "YI SYLLABLE HUOT");
				break;
			case 0xA276:
				strcpy_s(buf, buf_size, "YI SYLLABLE HUOX");
				break;
			case 0xA277:
				strcpy_s(buf, buf_size, "YI SYLLABLE HUO");
				break;
			case 0xA278:
				strcpy_s(buf, buf_size, "YI SYLLABLE HUOP");
				break;
			case 0xA279:
				strcpy_s(buf, buf_size, "YI SYLLABLE HOT");
				break;
			case 0xA27A:
				strcpy_s(buf, buf_size, "YI SYLLABLE HOX");
				break;
			case 0xA27B:
				strcpy_s(buf, buf_size, "YI SYLLABLE HO");
				break;
			case 0xA27C:
				strcpy_s(buf, buf_size, "YI SYLLABLE HOP");
				break;
			case 0xA27D:
				strcpy_s(buf, buf_size, "YI SYLLABLE HEX");
				break;
			case 0xA27E:
				strcpy_s(buf, buf_size, "YI SYLLABLE HE");
				break;
			case 0xA27F:
				strcpy_s(buf, buf_size, "YI SYLLABLE HEP");
				break;
			case 0xA280:
				strcpy_s(buf, buf_size, "YI SYLLABLE WAT");
				break;
			case 0xA281:
				strcpy_s(buf, buf_size, "YI SYLLABLE WAX");
				break;
			case 0xA282:
				strcpy_s(buf, buf_size, "YI SYLLABLE WA");
				break;
			case 0xA283:
				strcpy_s(buf, buf_size, "YI SYLLABLE WAP");
				break;
			case 0xA284:
				strcpy_s(buf, buf_size, "YI SYLLABLE WUOX");
				break;
			case 0xA285:
				strcpy_s(buf, buf_size, "YI SYLLABLE WUO");
				break;
			case 0xA286:
				strcpy_s(buf, buf_size, "YI SYLLABLE WUOP");
				break;
			case 0xA287:
				strcpy_s(buf, buf_size, "YI SYLLABLE WOX");
				break;
			case 0xA288:
				strcpy_s(buf, buf_size, "YI SYLLABLE WO");
				break;
			case 0xA289:
				strcpy_s(buf, buf_size, "YI SYLLABLE WOP");
				break;
			case 0xA28A:
				strcpy_s(buf, buf_size, "YI SYLLABLE WEX");
				break;
			case 0xA28B:
				strcpy_s(buf, buf_size, "YI SYLLABLE WE");
				break;
			case 0xA28C:
				strcpy_s(buf, buf_size, "YI SYLLABLE WEP");
				break;
			case 0xA28D:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZIT");
				break;
			case 0xA28E:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZIX");
				break;
			case 0xA28F:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZI");
				break;
			case 0xA290:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZIP");
				break;
			case 0xA291:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZIEX");
				break;
			case 0xA292:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZIE");
				break;
			case 0xA293:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZIEP");
				break;
			case 0xA294:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZAT");
				break;
			case 0xA295:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZAX");
				break;
			case 0xA296:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZA");
				break;
			case 0xA297:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZAP");
				break;
			case 0xA298:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZUOX");
				break;
			case 0xA299:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZUO");
				break;
			case 0xA29A:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZUOP");
				break;
			case 0xA29B:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZOT");
				break;
			case 0xA29C:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZOX");
				break;
			case 0xA29D:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZO");
				break;
			case 0xA29E:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZOP");
				break;
			case 0xA29F:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZEX");
				break;
			case 0xA2A0:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZE");
				break;
			case 0xA2A1:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZEP");
				break;
			case 0xA2A2:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZUT");
				break;
			case 0xA2A3:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZUX");
				break;
			case 0xA2A4:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZU");
				break;
			case 0xA2A5:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZUP");
				break;
			case 0xA2A6:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZURX");
				break;
			case 0xA2A7:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZUR");
				break;
			case 0xA2A8:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZYT");
				break;
			case 0xA2A9:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZYX");
				break;
			case 0xA2AA:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZY");
				break;
			case 0xA2AB:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZYP");
				break;
			case 0xA2AC:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZYRX");
				break;
			case 0xA2AD:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZYR");
				break;
			case 0xA2AE:
				strcpy_s(buf, buf_size, "YI SYLLABLE CIT");
				break;
			case 0xA2AF:
				strcpy_s(buf, buf_size, "YI SYLLABLE CIX");
				break;
			case 0xA2B0:
				strcpy_s(buf, buf_size, "YI SYLLABLE CI");
				break;
			case 0xA2B1:
				strcpy_s(buf, buf_size, "YI SYLLABLE CIP");
				break;
			case 0xA2B2:
				strcpy_s(buf, buf_size, "YI SYLLABLE CIET");
				break;
			case 0xA2B3:
				strcpy_s(buf, buf_size, "YI SYLLABLE CIEX");
				break;
			case 0xA2B4:
				strcpy_s(buf, buf_size, "YI SYLLABLE CIE");
				break;
			case 0xA2B5:
				strcpy_s(buf, buf_size, "YI SYLLABLE CIEP");
				break;
			case 0xA2B6:
				strcpy_s(buf, buf_size, "YI SYLLABLE CAT");
				break;
			case 0xA2B7:
				strcpy_s(buf, buf_size, "YI SYLLABLE CAX");
				break;
			case 0xA2B8:
				strcpy_s(buf, buf_size, "YI SYLLABLE CA");
				break;
			case 0xA2B9:
				strcpy_s(buf, buf_size, "YI SYLLABLE CAP");
				break;
			case 0xA2BA:
				strcpy_s(buf, buf_size, "YI SYLLABLE CUOX");
				break;
			case 0xA2BB:
				strcpy_s(buf, buf_size, "YI SYLLABLE CUO");
				break;
			case 0xA2BC:
				strcpy_s(buf, buf_size, "YI SYLLABLE CUOP");
				break;
			case 0xA2BD:
				strcpy_s(buf, buf_size, "YI SYLLABLE COT");
				break;
			case 0xA2BE:
				strcpy_s(buf, buf_size, "YI SYLLABLE COX");
				break;
			case 0xA2BF:
				strcpy_s(buf, buf_size, "YI SYLLABLE CO");
				break;
			case 0xA2C0:
				strcpy_s(buf, buf_size, "YI SYLLABLE COP");
				break;
			case 0xA2C1:
				strcpy_s(buf, buf_size, "YI SYLLABLE CEX");
				break;
			case 0xA2C2:
				strcpy_s(buf, buf_size, "YI SYLLABLE CE");
				break;
			case 0xA2C3:
				strcpy_s(buf, buf_size, "YI SYLLABLE CEP");
				break;
			case 0xA2C4:
				strcpy_s(buf, buf_size, "YI SYLLABLE CUT");
				break;
			case 0xA2C5:
				strcpy_s(buf, buf_size, "YI SYLLABLE CUX");
				break;
			case 0xA2C6:
				strcpy_s(buf, buf_size, "YI SYLLABLE CU");
				break;
			case 0xA2C7:
				strcpy_s(buf, buf_size, "YI SYLLABLE CUP");
				break;
			case 0xA2C8:
				strcpy_s(buf, buf_size, "YI SYLLABLE CURX");
				break;
			case 0xA2C9:
				strcpy_s(buf, buf_size, "YI SYLLABLE CUR");
				break;
			case 0xA2CA:
				strcpy_s(buf, buf_size, "YI SYLLABLE CYT");
				break;
			case 0xA2CB:
				strcpy_s(buf, buf_size, "YI SYLLABLE CYX");
				break;
			case 0xA2CC:
				strcpy_s(buf, buf_size, "YI SYLLABLE CY");
				break;
			case 0xA2CD:
				strcpy_s(buf, buf_size, "YI SYLLABLE CYP");
				break;
			case 0xA2CE:
				strcpy_s(buf, buf_size, "YI SYLLABLE CYRX");
				break;
			case 0xA2CF:
				strcpy_s(buf, buf_size, "YI SYLLABLE CYR");
				break;
			case 0xA2D0:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZIT");
				break;
			case 0xA2D1:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZIX");
				break;
			case 0xA2D2:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZI");
				break;
			case 0xA2D3:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZIP");
				break;
			case 0xA2D4:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZIET");
				break;
			case 0xA2D5:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZIEX");
				break;
			case 0xA2D6:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZIE");
				break;
			case 0xA2D7:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZIEP");
				break;
			case 0xA2D8:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZAT");
				break;
			case 0xA2D9:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZAX");
				break;
			case 0xA2DA:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZA");
				break;
			case 0xA2DB:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZAP");
				break;
			case 0xA2DC:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZOX");
				break;
			case 0xA2DD:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZO");
				break;
			case 0xA2DE:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZOP");
				break;
			case 0xA2DF:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZEX");
				break;
			case 0xA2E0:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZE");
				break;
			case 0xA2E1:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZEP");
				break;
			case 0xA2E2:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZUX");
				break;
			case 0xA2E3:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZU");
				break;
			case 0xA2E4:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZUP");
				break;
			case 0xA2E5:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZURX");
				break;
			case 0xA2E6:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZUR");
				break;
			case 0xA2E7:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZYT");
				break;
			case 0xA2E8:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZYX");
				break;
			case 0xA2E9:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZY");
				break;
			case 0xA2EA:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZYP");
				break;
			case 0xA2EB:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZYRX");
				break;
			case 0xA2EC:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZZYR");
				break;
			case 0xA2ED:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZIT");
				break;
			case 0xA2EE:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZIX");
				break;
			case 0xA2EF:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZI");
				break;
			case 0xA2F0:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZIP");
				break;
			case 0xA2F1:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZIEX");
				break;
			case 0xA2F2:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZIE");
				break;
			case 0xA2F3:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZIEP");
				break;
			case 0xA2F4:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZAT");
				break;
			case 0xA2F5:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZAX");
				break;
			case 0xA2F6:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZA");
				break;
			case 0xA2F7:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZAP");
				break;
			case 0xA2F8:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZUOX");
				break;
			case 0xA2F9:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZUO");
				break;
			case 0xA2FA:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZOX");
				break;
			case 0xA2FB:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZOP");
				break;
			case 0xA2FC:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZEX");
				break;
			case 0xA2FD:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZE");
				break;
			case 0xA2FE:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZUX");
				break;
			case 0xA2FF:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZU");
				break;
			case 0xA300:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZUP");
				break;
			case 0xA301:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZURX");
				break;
			case 0xA302:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZUR");
				break;
			case 0xA303:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZYT");
				break;
			case 0xA304:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZYX");
				break;
			case 0xA305:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZY");
				break;
			case 0xA306:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZYP");
				break;
			case 0xA307:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZYRX");
				break;
			case 0xA308:
				strcpy_s(buf, buf_size, "YI SYLLABLE NZYR");
				break;
			case 0xA309:
				strcpy_s(buf, buf_size, "YI SYLLABLE SIT");
				break;
			case 0xA30A:
				strcpy_s(buf, buf_size, "YI SYLLABLE SIX");
				break;
			case 0xA30B:
				strcpy_s(buf, buf_size, "YI SYLLABLE SI");
				break;
			case 0xA30C:
				strcpy_s(buf, buf_size, "YI SYLLABLE SIP");
				break;
			case 0xA30D:
				strcpy_s(buf, buf_size, "YI SYLLABLE SIEX");
				break;
			case 0xA30E:
				strcpy_s(buf, buf_size, "YI SYLLABLE SIE");
				break;
			case 0xA30F:
				strcpy_s(buf, buf_size, "YI SYLLABLE SIEP");
				break;
			case 0xA310:
				strcpy_s(buf, buf_size, "YI SYLLABLE SAT");
				break;
			case 0xA311:
				strcpy_s(buf, buf_size, "YI SYLLABLE SAX");
				break;
			case 0xA312:
				strcpy_s(buf, buf_size, "YI SYLLABLE SA");
				break;
			case 0xA313:
				strcpy_s(buf, buf_size, "YI SYLLABLE SAP");
				break;
			case 0xA314:
				strcpy_s(buf, buf_size, "YI SYLLABLE SUOX");
				break;
			case 0xA315:
				strcpy_s(buf, buf_size, "YI SYLLABLE SUO");
				break;
			case 0xA316:
				strcpy_s(buf, buf_size, "YI SYLLABLE SUOP");
				break;
			case 0xA317:
				strcpy_s(buf, buf_size, "YI SYLLABLE SOT");
				break;
			case 0xA318:
				strcpy_s(buf, buf_size, "YI SYLLABLE SOX");
				break;
			case 0xA319:
				strcpy_s(buf, buf_size, "YI SYLLABLE SO");
				break;
			case 0xA31A:
				strcpy_s(buf, buf_size, "YI SYLLABLE SOP");
				break;
			case 0xA31B:
				strcpy_s(buf, buf_size, "YI SYLLABLE SEX");
				break;
			case 0xA31C:
				strcpy_s(buf, buf_size, "YI SYLLABLE SE");
				break;
			case 0xA31D:
				strcpy_s(buf, buf_size, "YI SYLLABLE SEP");
				break;
			case 0xA31E:
				strcpy_s(buf, buf_size, "YI SYLLABLE SUT");
				break;
			case 0xA31F:
				strcpy_s(buf, buf_size, "YI SYLLABLE SUX");
				break;
			case 0xA320:
				strcpy_s(buf, buf_size, "YI SYLLABLE SU");
				break;
			case 0xA321:
				strcpy_s(buf, buf_size, "YI SYLLABLE SUP");
				break;
			case 0xA322:
				strcpy_s(buf, buf_size, "YI SYLLABLE SURX");
				break;
			case 0xA323:
				strcpy_s(buf, buf_size, "YI SYLLABLE SUR");
				break;
			case 0xA324:
				strcpy_s(buf, buf_size, "YI SYLLABLE SYT");
				break;
			case 0xA325:
				strcpy_s(buf, buf_size, "YI SYLLABLE SYX");
				break;
			case 0xA326:
				strcpy_s(buf, buf_size, "YI SYLLABLE SY");
				break;
			case 0xA327:
				strcpy_s(buf, buf_size, "YI SYLLABLE SYP");
				break;
			case 0xA328:
				strcpy_s(buf, buf_size, "YI SYLLABLE SYRX");
				break;
			case 0xA329:
				strcpy_s(buf, buf_size, "YI SYLLABLE SYR");
				break;
			case 0xA32A:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSIT");
				break;
			case 0xA32B:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSIX");
				break;
			case 0xA32C:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSI");
				break;
			case 0xA32D:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSIP");
				break;
			case 0xA32E:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSIEX");
				break;
			case 0xA32F:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSIE");
				break;
			case 0xA330:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSIEP");
				break;
			case 0xA331:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSAT");
				break;
			case 0xA332:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSAX");
				break;
			case 0xA333:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSA");
				break;
			case 0xA334:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSAP");
				break;
			case 0xA335:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSOT");
				break;
			case 0xA336:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSOX");
				break;
			case 0xA337:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSO");
				break;
			case 0xA338:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSOP");
				break;
			case 0xA339:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSEX");
				break;
			case 0xA33A:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSE");
				break;
			case 0xA33B:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSEP");
				break;
			case 0xA33C:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSUT");
				break;
			case 0xA33D:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSUX");
				break;
			case 0xA33E:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSU");
				break;
			case 0xA33F:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSUP");
				break;
			case 0xA340:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSYT");
				break;
			case 0xA341:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSYX");
				break;
			case 0xA342:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSY");
				break;
			case 0xA343:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSYP");
				break;
			case 0xA344:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSYRX");
				break;
			case 0xA345:
				strcpy_s(buf, buf_size, "YI SYLLABLE SSYR");
				break;
			case 0xA346:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHAT");
				break;
			case 0xA347:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHAX");
				break;
			case 0xA348:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHA");
				break;
			case 0xA349:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHAP");
				break;
			case 0xA34A:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHUOX");
				break;
			case 0xA34B:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHUO");
				break;
			case 0xA34C:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHUOP");
				break;
			case 0xA34D:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHOT");
				break;
			case 0xA34E:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHOX");
				break;
			case 0xA34F:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHO");
				break;
			case 0xA350:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHOP");
				break;
			case 0xA351:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHET");
				break;
			case 0xA352:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHEX");
				break;
			case 0xA353:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHE");
				break;
			case 0xA354:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHEP");
				break;
			case 0xA355:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHUT");
				break;
			case 0xA356:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHUX");
				break;
			case 0xA357:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHU");
				break;
			case 0xA358:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHUP");
				break;
			case 0xA359:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHURX");
				break;
			case 0xA35A:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHUR");
				break;
			case 0xA35B:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHYT");
				break;
			case 0xA35C:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHYX");
				break;
			case 0xA35D:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHY");
				break;
			case 0xA35E:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHYP");
				break;
			case 0xA35F:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHYRX");
				break;
			case 0xA360:
				strcpy_s(buf, buf_size, "YI SYLLABLE ZHYR");
				break;
			case 0xA361:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHAT");
				break;
			case 0xA362:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHAX");
				break;
			case 0xA363:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHA");
				break;
			case 0xA364:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHAP");
				break;
			case 0xA365:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHUOT");
				break;
			case 0xA366:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHUOX");
				break;
			case 0xA367:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHUO");
				break;
			case 0xA368:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHUOP");
				break;
			case 0xA369:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHOT");
				break;
			case 0xA36A:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHOX");
				break;
			case 0xA36B:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHO");
				break;
			case 0xA36C:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHOP");
				break;
			case 0xA36D:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHET");
				break;
			case 0xA36E:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHEX");
				break;
			case 0xA36F:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHE");
				break;
			case 0xA370:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHEP");
				break;
			case 0xA371:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHUX");
				break;
			case 0xA372:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHU");
				break;
			case 0xA373:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHUP");
				break;
			case 0xA374:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHURX");
				break;
			case 0xA375:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHUR");
				break;
			case 0xA376:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHYT");
				break;
			case 0xA377:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHYX");
				break;
			case 0xA378:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHY");
				break;
			case 0xA379:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHYP");
				break;
			case 0xA37A:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHYRX");
				break;
			case 0xA37B:
				strcpy_s(buf, buf_size, "YI SYLLABLE CHYR");
				break;
			case 0xA37C:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRAX");
				break;
			case 0xA37D:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRA");
				break;
			case 0xA37E:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRUOX");
				break;
			case 0xA37F:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRUO");
				break;
			case 0xA380:
				strcpy_s(buf, buf_size, "YI SYLLABLE RROT");
				break;
			case 0xA381:
				strcpy_s(buf, buf_size, "YI SYLLABLE RROX");
				break;
			case 0xA382:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRO");
				break;
			case 0xA383:
				strcpy_s(buf, buf_size, "YI SYLLABLE RROP");
				break;
			case 0xA384:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRET");
				break;
			case 0xA385:
				strcpy_s(buf, buf_size, "YI SYLLABLE RREX");
				break;
			case 0xA386:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRE");
				break;
			case 0xA387:
				strcpy_s(buf, buf_size, "YI SYLLABLE RREP");
				break;
			case 0xA388:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRUT");
				break;
			case 0xA389:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRUX");
				break;
			case 0xA38A:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRU");
				break;
			case 0xA38B:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRUP");
				break;
			case 0xA38C:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRURX");
				break;
			case 0xA38D:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRUR");
				break;
			case 0xA38E:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRYT");
				break;
			case 0xA38F:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRYX");
				break;
			case 0xA390:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRY");
				break;
			case 0xA391:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRYP");
				break;
			case 0xA392:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRYRX");
				break;
			case 0xA393:
				strcpy_s(buf, buf_size, "YI SYLLABLE RRYR");
				break;
			case 0xA394:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRAT");
				break;
			case 0xA395:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRAX");
				break;
			case 0xA396:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRA");
				break;
			case 0xA397:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRAP");
				break;
			case 0xA398:
				strcpy_s(buf, buf_size, "YI SYLLABLE NROX");
				break;
			case 0xA399:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRO");
				break;
			case 0xA39A:
				strcpy_s(buf, buf_size, "YI SYLLABLE NROP");
				break;
			case 0xA39B:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRET");
				break;
			case 0xA39C:
				strcpy_s(buf, buf_size, "YI SYLLABLE NREX");
				break;
			case 0xA39D:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRE");
				break;
			case 0xA39E:
				strcpy_s(buf, buf_size, "YI SYLLABLE NREP");
				break;
			case 0xA39F:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRUT");
				break;
			case 0xA3A0:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRUX");
				break;
			case 0xA3A1:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRU");
				break;
			case 0xA3A2:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRUP");
				break;
			case 0xA3A3:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRURX");
				break;
			case 0xA3A4:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRUR");
				break;
			case 0xA3A5:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRYT");
				break;
			case 0xA3A6:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRYX");
				break;
			case 0xA3A7:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRY");
				break;
			case 0xA3A8:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRYP");
				break;
			case 0xA3A9:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRYRX");
				break;
			case 0xA3AA:
				strcpy_s(buf, buf_size, "YI SYLLABLE NRYR");
				break;
			case 0xA3AB:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHAT");
				break;
			case 0xA3AC:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHAX");
				break;
			case 0xA3AD:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHA");
				break;
			case 0xA3AE:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHAP");
				break;
			case 0xA3AF:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHUOX");
				break;
			case 0xA3B0:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHUO");
				break;
			case 0xA3B1:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHUOP");
				break;
			case 0xA3B2:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHOT");
				break;
			case 0xA3B3:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHOX");
				break;
			case 0xA3B4:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHO");
				break;
			case 0xA3B5:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHOP");
				break;
			case 0xA3B6:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHET");
				break;
			case 0xA3B7:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHEX");
				break;
			case 0xA3B8:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHE");
				break;
			case 0xA3B9:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHEP");
				break;
			case 0xA3BA:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHUT");
				break;
			case 0xA3BB:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHUX");
				break;
			case 0xA3BC:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHU");
				break;
			case 0xA3BD:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHUP");
				break;
			case 0xA3BE:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHURX");
				break;
			case 0xA3BF:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHUR");
				break;
			case 0xA3C0:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHYT");
				break;
			case 0xA3C1:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHYX");
				break;
			case 0xA3C2:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHY");
				break;
			case 0xA3C3:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHYP");
				break;
			case 0xA3C4:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHYRX");
				break;
			case 0xA3C5:
				strcpy_s(buf, buf_size, "YI SYLLABLE SHYR");
				break;
			case 0xA3C6:
				strcpy_s(buf, buf_size, "YI SYLLABLE RAT");
				break;
			case 0xA3C7:
				strcpy_s(buf, buf_size, "YI SYLLABLE RAX");
				break;
			case 0xA3C8:
				strcpy_s(buf, buf_size, "YI SYLLABLE RA");
				break;
			case 0xA3C9:
				strcpy_s(buf, buf_size, "YI SYLLABLE RAP");
				break;
			case 0xA3CA:
				strcpy_s(buf, buf_size, "YI SYLLABLE RUOX");
				break;
			case 0xA3CB:
				strcpy_s(buf, buf_size, "YI SYLLABLE RUO");
				break;
			case 0xA3CC:
				strcpy_s(buf, buf_size, "YI SYLLABLE RUOP");
				break;
			case 0xA3CD:
				strcpy_s(buf, buf_size, "YI SYLLABLE ROT");
				break;
			case 0xA3CE:
				strcpy_s(buf, buf_size, "YI SYLLABLE ROX");
				break;
			case 0xA3CF:
				strcpy_s(buf, buf_size, "YI SYLLABLE RO");
				break;
			case 0xA3D0:
				strcpy_s(buf, buf_size, "YI SYLLABLE ROP");
				break;
			case 0xA3D1:
				strcpy_s(buf, buf_size, "YI SYLLABLE REX");
				break;
			case 0xA3D2:
				strcpy_s(buf, buf_size, "YI SYLLABLE RE");
				break;
			case 0xA3D3:
				strcpy_s(buf, buf_size, "YI SYLLABLE REP");
				break;
			case 0xA3D4:
				strcpy_s(buf, buf_size, "YI SYLLABLE RUT");
				break;
			case 0xA3D5:
				strcpy_s(buf, buf_size, "YI SYLLABLE RUX");
				break;
			case 0xA3D6:
				strcpy_s(buf, buf_size, "YI SYLLABLE RU");
				break;
			case 0xA3D7:
				strcpy_s(buf, buf_size, "YI SYLLABLE RUP");
				break;
			case 0xA3D8:
				strcpy_s(buf, buf_size, "YI SYLLABLE RURX");
				break;
			case 0xA3D9:
				strcpy_s(buf, buf_size, "YI SYLLABLE RUR");
				break;
			case 0xA3DA:
				strcpy_s(buf, buf_size, "YI SYLLABLE RYT");
				break;
			case 0xA3DB:
				strcpy_s(buf, buf_size, "YI SYLLABLE RYX");
				break;
			case 0xA3DC:
				strcpy_s(buf, buf_size, "YI SYLLABLE RY");
				break;
			case 0xA3DD:
				strcpy_s(buf, buf_size, "YI SYLLABLE RYP");
				break;
			case 0xA3DE:
				strcpy_s(buf, buf_size, "YI SYLLABLE RYRX");
				break;
			case 0xA3DF:
				strcpy_s(buf, buf_size, "YI SYLLABLE RYR");
				break;
			case 0xA3E0:
				strcpy_s(buf, buf_size, "YI SYLLABLE JIT");
				break;
			case 0xA3E1:
				strcpy_s(buf, buf_size, "YI SYLLABLE JIX");
				break;
			case 0xA3E2:
				strcpy_s(buf, buf_size, "YI SYLLABLE JI");
				break;
			case 0xA3E3:
				strcpy_s(buf, buf_size, "YI SYLLABLE JIP");
				break;
			case 0xA3E4:
				strcpy_s(buf, buf_size, "YI SYLLABLE JIET");
				break;
			case 0xA3E5:
				strcpy_s(buf, buf_size, "YI SYLLABLE JIEX");
				break;
			case 0xA3E6:
				strcpy_s(buf, buf_size, "YI SYLLABLE JIE");
				break;
			case 0xA3E7:
				strcpy_s(buf, buf_size, "YI SYLLABLE JIEP");
				break;
			case 0xA3E8:
				strcpy_s(buf, buf_size, "YI SYLLABLE JUOT");
				break;
			case 0xA3E9:
				strcpy_s(buf, buf_size, "YI SYLLABLE JUOX");
				break;
			case 0xA3EA:
				strcpy_s(buf, buf_size, "YI SYLLABLE JUO");
				break;
			case 0xA3EB:
				strcpy_s(buf, buf_size, "YI SYLLABLE JUOP");
				break;
			case 0xA3EC:
				strcpy_s(buf, buf_size, "YI SYLLABLE JOT");
				break;
			case 0xA3ED:
				strcpy_s(buf, buf_size, "YI SYLLABLE JOX");
				break;
			case 0xA3EE:
				strcpy_s(buf, buf_size, "YI SYLLABLE JO");
				break;
			case 0xA3EF:
				strcpy_s(buf, buf_size, "YI SYLLABLE JOP");
				break;
			case 0xA3F0:
				strcpy_s(buf, buf_size, "YI SYLLABLE JUT");
				break;
			case 0xA3F1:
				strcpy_s(buf, buf_size, "YI SYLLABLE JUX");
				break;
			case 0xA3F2:
				strcpy_s(buf, buf_size, "YI SYLLABLE JU");
				break;
			case 0xA3F3:
				strcpy_s(buf, buf_size, "YI SYLLABLE JUP");
				break;
			case 0xA3F4:
				strcpy_s(buf, buf_size, "YI SYLLABLE JURX");
				break;
			case 0xA3F5:
				strcpy_s(buf, buf_size, "YI SYLLABLE JUR");
				break;
			case 0xA3F6:
				strcpy_s(buf, buf_size, "YI SYLLABLE JYT");
				break;
			case 0xA3F7:
				strcpy_s(buf, buf_size, "YI SYLLABLE JYX");
				break;
			case 0xA3F8:
				strcpy_s(buf, buf_size, "YI SYLLABLE JY");
				break;
			case 0xA3F9:
				strcpy_s(buf, buf_size, "YI SYLLABLE JYP");
				break;
			case 0xA3FA:
				strcpy_s(buf, buf_size, "YI SYLLABLE JYRX");
				break;
			case 0xA3FB:
				strcpy_s(buf, buf_size, "YI SYLLABLE JYR");
				break;
			case 0xA3FC:
				strcpy_s(buf, buf_size, "YI SYLLABLE QIT");
				break;
			case 0xA3FD:
				strcpy_s(buf, buf_size, "YI SYLLABLE QIX");
				break;
			case 0xA3FE:
				strcpy_s(buf, buf_size, "YI SYLLABLE QI");
				break;
			case 0xA3FF:
				strcpy_s(buf, buf_size, "YI SYLLABLE QIP");
				break;
			case 0xA400:
				strcpy_s(buf, buf_size, "YI SYLLABLE QIET");
				break;
			case 0xA401:
				strcpy_s(buf, buf_size, "YI SYLLABLE QIEX");
				break;
			case 0xA402:
				strcpy_s(buf, buf_size, "YI SYLLABLE QIE");
				break;
			case 0xA403:
				strcpy_s(buf, buf_size, "YI SYLLABLE QIEP");
				break;
			case 0xA404:
				strcpy_s(buf, buf_size, "YI SYLLABLE QUOT");
				break;
			case 0xA405:
				strcpy_s(buf, buf_size, "YI SYLLABLE QUOX");
				break;
			case 0xA406:
				strcpy_s(buf, buf_size, "YI SYLLABLE QUO");
				break;
			case 0xA407:
				strcpy_s(buf, buf_size, "YI SYLLABLE QUOP");
				break;
			case 0xA408:
				strcpy_s(buf, buf_size, "YI SYLLABLE QOT");
				break;
			case 0xA409:
				strcpy_s(buf, buf_size, "YI SYLLABLE QOX");
				break;
			case 0xA40A:
				strcpy_s(buf, buf_size, "YI SYLLABLE QO");
				break;
			case 0xA40B:
				strcpy_s(buf, buf_size, "YI SYLLABLE QOP");
				break;
			case 0xA40C:
				strcpy_s(buf, buf_size, "YI SYLLABLE QUT");
				break;
			case 0xA40D:
				strcpy_s(buf, buf_size, "YI SYLLABLE QUX");
				break;
			case 0xA40E:
				strcpy_s(buf, buf_size, "YI SYLLABLE QU");
				break;
			case 0xA40F:
				strcpy_s(buf, buf_size, "YI SYLLABLE QUP");
				break;
			case 0xA410:
				strcpy_s(buf, buf_size, "YI SYLLABLE QURX");
				break;
			case 0xA411:
				strcpy_s(buf, buf_size, "YI SYLLABLE QUR");
				break;
			case 0xA412:
				strcpy_s(buf, buf_size, "YI SYLLABLE QYT");
				break;
			case 0xA413:
				strcpy_s(buf, buf_size, "YI SYLLABLE QYX");
				break;
			case 0xA414:
				strcpy_s(buf, buf_size, "YI SYLLABLE QY");
				break;
			case 0xA415:
				strcpy_s(buf, buf_size, "YI SYLLABLE QYP");
				break;
			case 0xA416:
				strcpy_s(buf, buf_size, "YI SYLLABLE QYRX");
				break;
			case 0xA417:
				strcpy_s(buf, buf_size, "YI SYLLABLE QYR");
				break;
			case 0xA418:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJIT");
				break;
			case 0xA419:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJIX");
				break;
			case 0xA41A:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJI");
				break;
			case 0xA41B:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJIP");
				break;
			case 0xA41C:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJIET");
				break;
			case 0xA41D:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJIEX");
				break;
			case 0xA41E:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJIE");
				break;
			case 0xA41F:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJIEP");
				break;
			case 0xA420:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJUOX");
				break;
			case 0xA421:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJUO");
				break;
			case 0xA422:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJUOP");
				break;
			case 0xA423:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJOT");
				break;
			case 0xA424:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJOX");
				break;
			case 0xA425:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJO");
				break;
			case 0xA426:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJOP");
				break;
			case 0xA427:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJUT");
				break;
			case 0xA428:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJUX");
				break;
			case 0xA429:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJU");
				break;
			case 0xA42A:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJUP");
				break;
			case 0xA42B:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJURX");
				break;
			case 0xA42C:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJUR");
				break;
			case 0xA42D:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJYT");
				break;
			case 0xA42E:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJYX");
				break;
			case 0xA42F:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJY");
				break;
			case 0xA430:
				strcpy_s(buf, buf_size, "YI SYLLABLE JJYP");
				break;
			case 0xA431:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJIT");
				break;
			case 0xA432:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJIX");
				break;
			case 0xA433:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJI");
				break;
			case 0xA434:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJIP");
				break;
			case 0xA435:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJIET");
				break;
			case 0xA436:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJIEX");
				break;
			case 0xA437:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJIE");
				break;
			case 0xA438:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJIEP");
				break;
			case 0xA439:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJUOX");
				break;
			case 0xA43A:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJUO");
				break;
			case 0xA43B:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJOT");
				break;
			case 0xA43C:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJOX");
				break;
			case 0xA43D:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJO");
				break;
			case 0xA43E:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJOP");
				break;
			case 0xA43F:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJUX");
				break;
			case 0xA440:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJU");
				break;
			case 0xA441:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJUP");
				break;
			case 0xA442:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJURX");
				break;
			case 0xA443:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJUR");
				break;
			case 0xA444:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJYT");
				break;
			case 0xA445:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJYX");
				break;
			case 0xA446:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJY");
				break;
			case 0xA447:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJYP");
				break;
			case 0xA448:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJYRX");
				break;
			case 0xA449:
				strcpy_s(buf, buf_size, "YI SYLLABLE NJYR");
				break;
			case 0xA44A:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYIT");
				break;
			case 0xA44B:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYIX");
				break;
			case 0xA44C:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYI");
				break;
			case 0xA44D:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYIP");
				break;
			case 0xA44E:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYIET");
				break;
			case 0xA44F:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYIEX");
				break;
			case 0xA450:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYIE");
				break;
			case 0xA451:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYIEP");
				break;
			case 0xA452:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYUOX");
				break;
			case 0xA453:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYUO");
				break;
			case 0xA454:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYUOP");
				break;
			case 0xA455:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYOT");
				break;
			case 0xA456:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYOX");
				break;
			case 0xA457:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYO");
				break;
			case 0xA458:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYOP");
				break;
			case 0xA459:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYUT");
				break;
			case 0xA45A:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYUX");
				break;
			case 0xA45B:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYU");
				break;
			case 0xA45C:
				strcpy_s(buf, buf_size, "YI SYLLABLE NYUP");
				break;
			case 0xA45D:
				strcpy_s(buf, buf_size, "YI SYLLABLE XIT");
				break;
			case 0xA45E:
				strcpy_s(buf, buf_size, "YI SYLLABLE XIX");
				break;
			case 0xA45F:
				strcpy_s(buf, buf_size, "YI SYLLABLE XI");
				break;
			case 0xA460:
				strcpy_s(buf, buf_size, "YI SYLLABLE XIP");
				break;
			case 0xA461:
				strcpy_s(buf, buf_size, "YI SYLLABLE XIET");
				break;
			case 0xA462:
				strcpy_s(buf, buf_size, "YI SYLLABLE XIEX");
				break;
			case 0xA463:
				strcpy_s(buf, buf_size, "YI SYLLABLE XIE");
				break;
			case 0xA464:
				strcpy_s(buf, buf_size, "YI SYLLABLE XIEP");
				break;
			case 0xA465:
				strcpy_s(buf, buf_size, "YI SYLLABLE XUOX");
				break;
			case 0xA466:
				strcpy_s(buf, buf_size, "YI SYLLABLE XUO");
				break;
			case 0xA467:
				strcpy_s(buf, buf_size, "YI SYLLABLE XOT");
				break;
			case 0xA468:
				strcpy_s(buf, buf_size, "YI SYLLABLE XOX");
				break;
			case 0xA469:
				strcpy_s(buf, buf_size, "YI SYLLABLE XO");
				break;
			case 0xA46A:
				strcpy_s(buf, buf_size, "YI SYLLABLE XOP");
				break;
			case 0xA46B:
				strcpy_s(buf, buf_size, "YI SYLLABLE XYT");
				break;
			case 0xA46C:
				strcpy_s(buf, buf_size, "YI SYLLABLE XYX");
				break;
			case 0xA46D:
				strcpy_s(buf, buf_size, "YI SYLLABLE XY");
				break;
			case 0xA46E:
				strcpy_s(buf, buf_size, "YI SYLLABLE XYP");
				break;
			case 0xA46F:
				strcpy_s(buf, buf_size, "YI SYLLABLE XYRX");
				break;
			case 0xA470:
				strcpy_s(buf, buf_size, "YI SYLLABLE XYR");
				break;
			case 0xA471:
				strcpy_s(buf, buf_size, "YI SYLLABLE YIT");
				break;
			case 0xA472:
				strcpy_s(buf, buf_size, "YI SYLLABLE YIX");
				break;
			case 0xA473:
				strcpy_s(buf, buf_size, "YI SYLLABLE YI");
				break;
			case 0xA474:
				strcpy_s(buf, buf_size, "YI SYLLABLE YIP");
				break;
			case 0xA475:
				strcpy_s(buf, buf_size, "YI SYLLABLE YIET");
				break;
			case 0xA476:
				strcpy_s(buf, buf_size, "YI SYLLABLE YIEX");
				break;
			case 0xA477:
				strcpy_s(buf, buf_size, "YI SYLLABLE YIE");
				break;
			case 0xA478:
				strcpy_s(buf, buf_size, "YI SYLLABLE YIEP");
				break;
			case 0xA479:
				strcpy_s(buf, buf_size, "YI SYLLABLE YUOT");
				break;
			case 0xA47A:
				strcpy_s(buf, buf_size, "YI SYLLABLE YUOX");
				break;
			case 0xA47B:
				strcpy_s(buf, buf_size, "YI SYLLABLE YUO");
				break;
			case 0xA47C:
				strcpy_s(buf, buf_size, "YI SYLLABLE YUOP");
				break;
			case 0xA47D:
				strcpy_s(buf, buf_size, "YI SYLLABLE YOT");
				break;
			case 0xA47E:
				strcpy_s(buf, buf_size, "YI SYLLABLE YOX");
				break;
			case 0xA47F:
				strcpy_s(buf, buf_size, "YI SYLLABLE YO");
				break;
			case 0xA480:
				strcpy_s(buf, buf_size, "YI SYLLABLE YOP");
				break;
			case 0xA481:
				strcpy_s(buf, buf_size, "YI SYLLABLE YUT");
				break;
			case 0xA482:
				strcpy_s(buf, buf_size, "YI SYLLABLE YUX");
				break;
			case 0xA483:
				strcpy_s(buf, buf_size, "YI SYLLABLE YU");
				break;
			case 0xA484:
				strcpy_s(buf, buf_size, "YI SYLLABLE YUP");
				break;
			case 0xA485:
				strcpy_s(buf, buf_size, "YI SYLLABLE YURX");
				break;
			case 0xA486:
				strcpy_s(buf, buf_size, "YI SYLLABLE YUR");
				break;
			case 0xA487:
				strcpy_s(buf, buf_size, "YI SYLLABLE YYT");
				break;
			case 0xA488:
				strcpy_s(buf, buf_size, "YI SYLLABLE YYX");
				break;
			case 0xA489:
				strcpy_s(buf, buf_size, "YI SYLLABLE YY");
				break;
			case 0xA48A:
				strcpy_s(buf, buf_size, "YI SYLLABLE YYP");
				break;
			case 0xA48B:
				strcpy_s(buf, buf_size, "YI SYLLABLE YYRX");
				break;
			case 0xA48C:
				strcpy_s(buf, buf_size, "YI SYLLABLE YYR");
				break;
			case 0xA490:
				strcpy_s(buf, buf_size, "YI RADICAL QOT");
				break;
			case 0xA491:
				strcpy_s(buf, buf_size, "YI RADICAL LI");
				break;
			case 0xA492:
				strcpy_s(buf, buf_size, "YI RADICAL KIT");
				break;
			case 0xA493:
				strcpy_s(buf, buf_size, "YI RADICAL NYIP");
				break;
			case 0xA494:
				strcpy_s(buf, buf_size, "YI RADICAL CYP");
				break;
			case 0xA495:
				strcpy_s(buf, buf_size, "YI RADICAL SSI");
				break;
			case 0xA496:
				strcpy_s(buf, buf_size, "YI RADICAL GGOP");
				break;
			case 0xA497:
				strcpy_s(buf, buf_size, "YI RADICAL GEP");
				break;
			case 0xA498:
				strcpy_s(buf, buf_size, "YI RADICAL MI");
				break;
			case 0xA499:
				strcpy_s(buf, buf_size, "YI RADICAL HXIT");
				break;
			case 0xA49A:
				strcpy_s(buf, buf_size, "YI RADICAL LYR");
				break;
			case 0xA49B:
				strcpy_s(buf, buf_size, "YI RADICAL BBUT");
				break;
			case 0xA49C:
				strcpy_s(buf, buf_size, "YI RADICAL MOP");
				break;
			case 0xA49D:
				strcpy_s(buf, buf_size, "YI RADICAL YO");
				break;
			case 0xA49E:
				strcpy_s(buf, buf_size, "YI RADICAL PUT");
				break;
			case 0xA49F:
				strcpy_s(buf, buf_size, "YI RADICAL HXUO");
				break;
			case 0xA4A0:
				strcpy_s(buf, buf_size, "YI RADICAL TAT");
				break;
			case 0xA4A1:
				strcpy_s(buf, buf_size, "YI RADICAL GA");
				break;
			case 0xA4A2:
				strcpy_s(buf, buf_size, "YI RADICAL ZUP");
				break;
			case 0xA4A3:
				strcpy_s(buf, buf_size, "YI RADICAL CYT");
				break;
			case 0xA4A4:
				strcpy_s(buf, buf_size, "YI RADICAL DDUR");
				break;
			case 0xA4A5:
				strcpy_s(buf, buf_size, "YI RADICAL BUR");
				break;
			case 0xA4A6:
				strcpy_s(buf, buf_size, "YI RADICAL GGUO");
				break;
			case 0xA4A7:
				strcpy_s(buf, buf_size, "YI RADICAL NYOP");
				break;
			case 0xA4A8:
				strcpy_s(buf, buf_size, "YI RADICAL TU");
				break;
			case 0xA4A9:
				strcpy_s(buf, buf_size, "YI RADICAL OP");
				break;
			case 0xA4AA:
				strcpy_s(buf, buf_size, "YI RADICAL JJUT");
				break;
			case 0xA4AB:
				strcpy_s(buf, buf_size, "YI RADICAL ZOT");
				break;
			case 0xA4AC:
				strcpy_s(buf, buf_size, "YI RADICAL PYT");
				break;
			case 0xA4AD:
				strcpy_s(buf, buf_size, "YI RADICAL HMO");
				break;
			case 0xA4AE:
				strcpy_s(buf, buf_size, "YI RADICAL YIT");
				break;
			case 0xA4AF:
				strcpy_s(buf, buf_size, "YI RADICAL VUR");
				break;
			case 0xA4B0:
				strcpy_s(buf, buf_size, "YI RADICAL SHY");
				break;
			case 0xA4B1:
				strcpy_s(buf, buf_size, "YI RADICAL VEP");
				break;
			case 0xA4B2:
				strcpy_s(buf, buf_size, "YI RADICAL ZA");
				break;
			case 0xA4B3:
				strcpy_s(buf, buf_size, "YI RADICAL JO");
				break;
			case 0xA4B4:
				strcpy_s(buf, buf_size, "YI RADICAL NZUP");
				break;
			case 0xA4B5:
				strcpy_s(buf, buf_size, "YI RADICAL JJY");
				break;
			case 0xA4B6:
				strcpy_s(buf, buf_size, "YI RADICAL GOT");
				break;
			case 0xA4B7:
				strcpy_s(buf, buf_size, "YI RADICAL JJIE");
				break;
			case 0xA4B8:
				strcpy_s(buf, buf_size, "YI RADICAL WO");
				break;
			case 0xA4B9:
				strcpy_s(buf, buf_size, "YI RADICAL DU");
				break;
			case 0xA4BA:
				strcpy_s(buf, buf_size, "YI RADICAL SHUR");
				break;
			case 0xA4BB:
				strcpy_s(buf, buf_size, "YI RADICAL LIE");
				break;
			case 0xA4BC:
				strcpy_s(buf, buf_size, "YI RADICAL CY");
				break;
			case 0xA4BD:
				strcpy_s(buf, buf_size, "YI RADICAL CUOP");
				break;
			case 0xA4BE:
				strcpy_s(buf, buf_size, "YI RADICAL CIP");
				break;
			case 0xA4BF:
				strcpy_s(buf, buf_size, "YI RADICAL HXOP");
				break;
			case 0xA4C0:
				strcpy_s(buf, buf_size, "YI RADICAL SHAT");
				break;
			case 0xA4C1:
				strcpy_s(buf, buf_size, "YI RADICAL ZUR");
				break;
			case 0xA4C2:
				strcpy_s(buf, buf_size, "YI RADICAL SHOP");
				break;
			case 0xA4C3:
				strcpy_s(buf, buf_size, "YI RADICAL CHE");
				break;
			case 0xA4C4:
				strcpy_s(buf, buf_size, "YI RADICAL ZZIET");
				break;
			case 0xA4C5:
				strcpy_s(buf, buf_size, "YI RADICAL NBIE");
				break;
			case 0xA4C6:
				strcpy_s(buf, buf_size, "YI RADICAL KE");
				break;
			case 0xA4D0:
				strcpy_s(buf, buf_size, "LISU LETTER BA");
				break;
			case 0xA4D1:
				strcpy_s(buf, buf_size, "LISU LETTER PA");
				break;
			case 0xA4D2:
				strcpy_s(buf, buf_size, "LISU LETTER PHA");
				break;
			case 0xA4D3:
				strcpy_s(buf, buf_size, "LISU LETTER DA");
				break;
			case 0xA4D4:
				strcpy_s(buf, buf_size, "LISU LETTER TA");
				break;
			case 0xA4D5:
				strcpy_s(buf, buf_size, "LISU LETTER THA");
				break;
			case 0xA4D6:
				strcpy_s(buf, buf_size, "LISU LETTER GA");
				break;
			case 0xA4D7:
				strcpy_s(buf, buf_size, "LISU LETTER KA");
				break;
			case 0xA4D8:
				strcpy_s(buf, buf_size, "LISU LETTER KHA");
				break;
			case 0xA4D9:
				strcpy_s(buf, buf_size, "LISU LETTER JA");
				break;
			case 0xA4DA:
				strcpy_s(buf, buf_size, "LISU LETTER CA");
				break;
			case 0xA4DB:
				strcpy_s(buf, buf_size, "LISU LETTER CHA");
				break;
			case 0xA4DC:
				strcpy_s(buf, buf_size, "LISU LETTER DZA");
				break;
			case 0xA4DD:
				strcpy_s(buf, buf_size, "LISU LETTER TSA");
				break;
			case 0xA4DE:
				strcpy_s(buf, buf_size, "LISU LETTER TSHA");
				break;
			case 0xA4DF:
				strcpy_s(buf, buf_size, "LISU LETTER MA");
				break;
			case 0xA4E0:
				strcpy_s(buf, buf_size, "LISU LETTER NA");
				break;
			case 0xA4E1:
				strcpy_s(buf, buf_size, "LISU LETTER LA");
				break;
			case 0xA4E2:
				strcpy_s(buf, buf_size, "LISU LETTER SA");
				break;
			case 0xA4E3:
				strcpy_s(buf, buf_size, "LISU LETTER ZHA");
				break;
			case 0xA4E4:
				strcpy_s(buf, buf_size, "LISU LETTER ZA");
				break;
			case 0xA4E5:
				strcpy_s(buf, buf_size, "LISU LETTER NGA");
				break;
			case 0xA4E6:
				strcpy_s(buf, buf_size, "LISU LETTER HA");
				break;
			case 0xA4E7:
				strcpy_s(buf, buf_size, "LISU LETTER XA");
				break;
			case 0xA4E8:
				strcpy_s(buf, buf_size, "LISU LETTER HHA");
				break;
			case 0xA4E9:
				strcpy_s(buf, buf_size, "LISU LETTER FA");
				break;
			case 0xA4EA:
				strcpy_s(buf, buf_size, "LISU LETTER WA");
				break;
			case 0xA4EB:
				strcpy_s(buf, buf_size, "LISU LETTER SHA");
				break;
			case 0xA4EC:
				strcpy_s(buf, buf_size, "LISU LETTER YA");
				break;
			case 0xA4ED:
				strcpy_s(buf, buf_size, "LISU LETTER GHA");
				break;
			case 0xA4EE:
				strcpy_s(buf, buf_size, "LISU LETTER A");
				break;
			case 0xA4EF:
				strcpy_s(buf, buf_size, "LISU LETTER AE");
				break;
			case 0xA4F0:
				strcpy_s(buf, buf_size, "LISU LETTER E");
				break;
			case 0xA4F1:
				strcpy_s(buf, buf_size, "LISU LETTER EU");
				break;
			case 0xA4F2:
				strcpy_s(buf, buf_size, "LISU LETTER I");
				break;
			case 0xA4F3:
				strcpy_s(buf, buf_size, "LISU LETTER O");
				break;
			case 0xA4F4:
				strcpy_s(buf, buf_size, "LISU LETTER U");
				break;
			case 0xA4F5:
				strcpy_s(buf, buf_size, "LISU LETTER UE");
				break;
			case 0xA4F6:
				strcpy_s(buf, buf_size, "LISU LETTER UH");
				break;
			case 0xA4F7:
				strcpy_s(buf, buf_size, "LISU LETTER OE");
				break;
			case 0xA4F8:
				strcpy_s(buf, buf_size, "LISU LETTER TONE MYA TI");
				break;
			case 0xA4F9:
				strcpy_s(buf, buf_size, "LISU LETTER TONE NA PO");
				break;
			case 0xA4FA:
				strcpy_s(buf, buf_size, "LISU LETTER TONE MYA CYA");
				break;
			case 0xA4FB:
				strcpy_s(buf, buf_size, "LISU LETTER TONE MYA BO");
				break;
			case 0xA4FC:
				strcpy_s(buf, buf_size, "LISU LETTER TONE MYA NA");
				break;
			case 0xA4FD:
				strcpy_s(buf, buf_size, "LISU LETTER TONE MYA JEU");
				break;
			case 0xA4FE:
				strcpy_s(buf, buf_size, "LISU PUNCTUATION COMMA");
				break;
			case 0xA4FF:
				strcpy_s(buf, buf_size, "LISU PUNCTUATION FULL STOP");
				break;
			case 0xA500:
				strcpy_s(buf, buf_size, "VAI SYLLABLE EE");
				break;
			case 0xA501:
				strcpy_s(buf, buf_size, "VAI SYLLABLE EEN");
				break;
			case 0xA502:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HEE");
				break;
			case 0xA503:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WEE");
				break;
			case 0xA504:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WEEN");
				break;
			case 0xA505:
				strcpy_s(buf, buf_size, "VAI SYLLABLE PEE");
				break;
			case 0xA506:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BHEE");
				break;
			case 0xA507:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BEE");
				break;
			case 0xA508:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MBEE");
				break;
			case 0xA509:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KPEE");
				break;
			case 0xA50A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MGBEE");
				break;
			case 0xA50B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GBEE");
				break;
			case 0xA50C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE FEE");
				break;
			case 0xA50D:
				strcpy_s(buf, buf_size, "VAI SYLLABLE VEE");
				break;
			case 0xA50E:
				strcpy_s(buf, buf_size, "VAI SYLLABLE TEE");
				break;
			case 0xA50F:
				strcpy_s(buf, buf_size, "VAI SYLLABLE THEE");
				break;
			case 0xA510:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHEE");
				break;
			case 0xA511:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHHEE");
				break;
			case 0xA512:
				strcpy_s(buf, buf_size, "VAI SYLLABLE LEE");
				break;
			case 0xA513:
				strcpy_s(buf, buf_size, "VAI SYLLABLE REE");
				break;
			case 0xA514:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DEE");
				break;
			case 0xA515:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDEE");
				break;
			case 0xA516:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SEE");
				break;
			case 0xA517:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SHEE");
				break;
			case 0xA518:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZEE");
				break;
			case 0xA519:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZHEE");
				break;
			case 0xA51A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE CEE");
				break;
			case 0xA51B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE JEE");
				break;
			case 0xA51C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NJEE");
				break;
			case 0xA51D:
				strcpy_s(buf, buf_size, "VAI SYLLABLE YEE");
				break;
			case 0xA51E:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KEE");
				break;
			case 0xA51F:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGGEE");
				break;
			case 0xA520:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GEE");
				break;
			case 0xA521:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MEE");
				break;
			case 0xA522:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NEE");
				break;
			case 0xA523:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NYEE");
				break;
			case 0xA524:
				strcpy_s(buf, buf_size, "VAI SYLLABLE I");
				break;
			case 0xA525:
				strcpy_s(buf, buf_size, "VAI SYLLABLE IN");
				break;
			case 0xA526:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HI");
				break;
			case 0xA527:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HIN");
				break;
			case 0xA528:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WI");
				break;
			case 0xA529:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WIN");
				break;
			case 0xA52A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE PI");
				break;
			case 0xA52B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BHI");
				break;
			case 0xA52C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BI");
				break;
			case 0xA52D:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MBI");
				break;
			case 0xA52E:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KPI");
				break;
			case 0xA52F:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MGBI");
				break;
			case 0xA530:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GBI");
				break;
			case 0xA531:
				strcpy_s(buf, buf_size, "VAI SYLLABLE FI");
				break;
			case 0xA532:
				strcpy_s(buf, buf_size, "VAI SYLLABLE VI");
				break;
			case 0xA533:
				strcpy_s(buf, buf_size, "VAI SYLLABLE TI");
				break;
			case 0xA534:
				strcpy_s(buf, buf_size, "VAI SYLLABLE THI");
				break;
			case 0xA535:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHI");
				break;
			case 0xA536:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHHI");
				break;
			case 0xA537:
				strcpy_s(buf, buf_size, "VAI SYLLABLE LI");
				break;
			case 0xA538:
				strcpy_s(buf, buf_size, "VAI SYLLABLE RI");
				break;
			case 0xA539:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DI");
				break;
			case 0xA53A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDI");
				break;
			case 0xA53B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SI");
				break;
			case 0xA53C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SHI");
				break;
			case 0xA53D:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZI");
				break;
			case 0xA53E:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZHI");
				break;
			case 0xA53F:
				strcpy_s(buf, buf_size, "VAI SYLLABLE CI");
				break;
			case 0xA540:
				strcpy_s(buf, buf_size, "VAI SYLLABLE JI");
				break;
			case 0xA541:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NJI");
				break;
			case 0xA542:
				strcpy_s(buf, buf_size, "VAI SYLLABLE YI");
				break;
			case 0xA543:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KI");
				break;
			case 0xA544:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGGI");
				break;
			case 0xA545:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GI");
				break;
			case 0xA546:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MI");
				break;
			case 0xA547:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NI");
				break;
			case 0xA548:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NYI");
				break;
			case 0xA549:
				strcpy_s(buf, buf_size, "VAI SYLLABLE A");
				break;
			case 0xA54A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE AN");
				break;
			case 0xA54B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGAN");
				break;
			case 0xA54C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HA");
				break;
			case 0xA54D:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HAN");
				break;
			case 0xA54E:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WA");
				break;
			case 0xA54F:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WAN");
				break;
			case 0xA550:
				strcpy_s(buf, buf_size, "VAI SYLLABLE PA");
				break;
			case 0xA551:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BHA");
				break;
			case 0xA552:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BA");
				break;
			case 0xA553:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MBA");
				break;
			case 0xA554:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KPA");
				break;
			case 0xA555:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KPAN");
				break;
			case 0xA556:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MGBA");
				break;
			case 0xA557:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GBA");
				break;
			case 0xA558:
				strcpy_s(buf, buf_size, "VAI SYLLABLE FA");
				break;
			case 0xA559:
				strcpy_s(buf, buf_size, "VAI SYLLABLE VA");
				break;
			case 0xA55A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE TA");
				break;
			case 0xA55B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE THA");
				break;
			case 0xA55C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHA");
				break;
			case 0xA55D:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHHA");
				break;
			case 0xA55E:
				strcpy_s(buf, buf_size, "VAI SYLLABLE LA");
				break;
			case 0xA55F:
				strcpy_s(buf, buf_size, "VAI SYLLABLE RA");
				break;
			case 0xA560:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DA");
				break;
			case 0xA561:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDA");
				break;
			case 0xA562:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SA");
				break;
			case 0xA563:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SHA");
				break;
			case 0xA564:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZA");
				break;
			case 0xA565:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZHA");
				break;
			case 0xA566:
				strcpy_s(buf, buf_size, "VAI SYLLABLE CA");
				break;
			case 0xA567:
				strcpy_s(buf, buf_size, "VAI SYLLABLE JA");
				break;
			case 0xA568:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NJA");
				break;
			case 0xA569:
				strcpy_s(buf, buf_size, "VAI SYLLABLE YA");
				break;
			case 0xA56A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KA");
				break;
			case 0xA56B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KAN");
				break;
			case 0xA56C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGGA");
				break;
			case 0xA56D:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GA");
				break;
			case 0xA56E:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MA");
				break;
			case 0xA56F:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NA");
				break;
			case 0xA570:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NYA");
				break;
			case 0xA571:
				strcpy_s(buf, buf_size, "VAI SYLLABLE OO");
				break;
			case 0xA572:
				strcpy_s(buf, buf_size, "VAI SYLLABLE OON");
				break;
			case 0xA573:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HOO");
				break;
			case 0xA574:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WOO");
				break;
			case 0xA575:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WOON");
				break;
			case 0xA576:
				strcpy_s(buf, buf_size, "VAI SYLLABLE POO");
				break;
			case 0xA577:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BHOO");
				break;
			case 0xA578:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BOO");
				break;
			case 0xA579:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MBOO");
				break;
			case 0xA57A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KPOO");
				break;
			case 0xA57B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MGBOO");
				break;
			case 0xA57C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GBOO");
				break;
			case 0xA57D:
				strcpy_s(buf, buf_size, "VAI SYLLABLE FOO");
				break;
			case 0xA57E:
				strcpy_s(buf, buf_size, "VAI SYLLABLE VOO");
				break;
			case 0xA57F:
				strcpy_s(buf, buf_size, "VAI SYLLABLE TOO");
				break;
			case 0xA580:
				strcpy_s(buf, buf_size, "VAI SYLLABLE THOO");
				break;
			case 0xA581:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHOO");
				break;
			case 0xA582:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHHOO");
				break;
			case 0xA583:
				strcpy_s(buf, buf_size, "VAI SYLLABLE LOO");
				break;
			case 0xA584:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ROO");
				break;
			case 0xA585:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DOO");
				break;
			case 0xA586:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDOO");
				break;
			case 0xA587:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SOO");
				break;
			case 0xA588:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SHOO");
				break;
			case 0xA589:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZOO");
				break;
			case 0xA58A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZHOO");
				break;
			case 0xA58B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE COO");
				break;
			case 0xA58C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE JOO");
				break;
			case 0xA58D:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NJOO");
				break;
			case 0xA58E:
				strcpy_s(buf, buf_size, "VAI SYLLABLE YOO");
				break;
			case 0xA58F:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KOO");
				break;
			case 0xA590:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGGOO");
				break;
			case 0xA591:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GOO");
				break;
			case 0xA592:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MOO");
				break;
			case 0xA593:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NOO");
				break;
			case 0xA594:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NYOO");
				break;
			case 0xA595:
				strcpy_s(buf, buf_size, "VAI SYLLABLE U");
				break;
			case 0xA596:
				strcpy_s(buf, buf_size, "VAI SYLLABLE UN");
				break;
			case 0xA597:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HU");
				break;
			case 0xA598:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HUN");
				break;
			case 0xA599:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WU");
				break;
			case 0xA59A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WUN");
				break;
			case 0xA59B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE PU");
				break;
			case 0xA59C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BHU");
				break;
			case 0xA59D:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BU");
				break;
			case 0xA59E:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MBU");
				break;
			case 0xA59F:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KPU");
				break;
			case 0xA5A0:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MGBU");
				break;
			case 0xA5A1:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GBU");
				break;
			case 0xA5A2:
				strcpy_s(buf, buf_size, "VAI SYLLABLE FU");
				break;
			case 0xA5A3:
				strcpy_s(buf, buf_size, "VAI SYLLABLE VU");
				break;
			case 0xA5A4:
				strcpy_s(buf, buf_size, "VAI SYLLABLE TU");
				break;
			case 0xA5A5:
				strcpy_s(buf, buf_size, "VAI SYLLABLE THU");
				break;
			case 0xA5A6:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHU");
				break;
			case 0xA5A7:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHHU");
				break;
			case 0xA5A8:
				strcpy_s(buf, buf_size, "VAI SYLLABLE LU");
				break;
			case 0xA5A9:
				strcpy_s(buf, buf_size, "VAI SYLLABLE RU");
				break;
			case 0xA5AA:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DU");
				break;
			case 0xA5AB:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDU");
				break;
			case 0xA5AC:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SU");
				break;
			case 0xA5AD:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SHU");
				break;
			case 0xA5AE:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZU");
				break;
			case 0xA5AF:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZHU");
				break;
			case 0xA5B0:
				strcpy_s(buf, buf_size, "VAI SYLLABLE CU");
				break;
			case 0xA5B1:
				strcpy_s(buf, buf_size, "VAI SYLLABLE JU");
				break;
			case 0xA5B2:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NJU");
				break;
			case 0xA5B3:
				strcpy_s(buf, buf_size, "VAI SYLLABLE YU");
				break;
			case 0xA5B4:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KU");
				break;
			case 0xA5B5:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGGU");
				break;
			case 0xA5B6:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GU");
				break;
			case 0xA5B7:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MU");
				break;
			case 0xA5B8:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NU");
				break;
			case 0xA5B9:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NYU");
				break;
			case 0xA5BA:
				strcpy_s(buf, buf_size, "VAI SYLLABLE O");
				break;
			case 0xA5BB:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ON");
				break;
			case 0xA5BC:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGON");
				break;
			case 0xA5BD:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HO");
				break;
			case 0xA5BE:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HON");
				break;
			case 0xA5BF:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WO");
				break;
			case 0xA5C0:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WON");
				break;
			case 0xA5C1:
				strcpy_s(buf, buf_size, "VAI SYLLABLE PO");
				break;
			case 0xA5C2:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BHO");
				break;
			case 0xA5C3:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BO");
				break;
			case 0xA5C4:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MBO");
				break;
			case 0xA5C5:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KPO");
				break;
			case 0xA5C6:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MGBO");
				break;
			case 0xA5C7:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GBO");
				break;
			case 0xA5C8:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GBON");
				break;
			case 0xA5C9:
				strcpy_s(buf, buf_size, "VAI SYLLABLE FO");
				break;
			case 0xA5CA:
				strcpy_s(buf, buf_size, "VAI SYLLABLE VO");
				break;
			case 0xA5CB:
				strcpy_s(buf, buf_size, "VAI SYLLABLE TO");
				break;
			case 0xA5CC:
				strcpy_s(buf, buf_size, "VAI SYLLABLE THO");
				break;
			case 0xA5CD:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHO");
				break;
			case 0xA5CE:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHHO");
				break;
			case 0xA5CF:
				strcpy_s(buf, buf_size, "VAI SYLLABLE LO");
				break;
			case 0xA5D0:
				strcpy_s(buf, buf_size, "VAI SYLLABLE RO");
				break;
			case 0xA5D1:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DO");
				break;
			case 0xA5D2:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDO");
				break;
			case 0xA5D3:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SO");
				break;
			case 0xA5D4:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SHO");
				break;
			case 0xA5D5:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZO");
				break;
			case 0xA5D6:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZHO");
				break;
			case 0xA5D7:
				strcpy_s(buf, buf_size, "VAI SYLLABLE CO");
				break;
			case 0xA5D8:
				strcpy_s(buf, buf_size, "VAI SYLLABLE JO");
				break;
			case 0xA5D9:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NJO");
				break;
			case 0xA5DA:
				strcpy_s(buf, buf_size, "VAI SYLLABLE YO");
				break;
			case 0xA5DB:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KO");
				break;
			case 0xA5DC:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGGO");
				break;
			case 0xA5DD:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GO");
				break;
			case 0xA5DE:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MO");
				break;
			case 0xA5DF:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NO");
				break;
			case 0xA5E0:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NYO");
				break;
			case 0xA5E1:
				strcpy_s(buf, buf_size, "VAI SYLLABLE E");
				break;
			case 0xA5E2:
				strcpy_s(buf, buf_size, "VAI SYLLABLE EN");
				break;
			case 0xA5E3:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGEN");
				break;
			case 0xA5E4:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HE");
				break;
			case 0xA5E5:
				strcpy_s(buf, buf_size, "VAI SYLLABLE HEN");
				break;
			case 0xA5E6:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WE");
				break;
			case 0xA5E7:
				strcpy_s(buf, buf_size, "VAI SYLLABLE WEN");
				break;
			case 0xA5E8:
				strcpy_s(buf, buf_size, "VAI SYLLABLE PE");
				break;
			case 0xA5E9:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BHE");
				break;
			case 0xA5EA:
				strcpy_s(buf, buf_size, "VAI SYLLABLE BE");
				break;
			case 0xA5EB:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MBE");
				break;
			case 0xA5EC:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KPE");
				break;
			case 0xA5ED:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KPEN");
				break;
			case 0xA5EE:
				strcpy_s(buf, buf_size, "VAI SYLLABLE MGBE");
				break;
			case 0xA5EF:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GBE");
				break;
			case 0xA5F0:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GBEN");
				break;
			case 0xA5F1:
				strcpy_s(buf, buf_size, "VAI SYLLABLE FE");
				break;
			case 0xA5F2:
				strcpy_s(buf, buf_size, "VAI SYLLABLE VE");
				break;
			case 0xA5F3:
				strcpy_s(buf, buf_size, "VAI SYLLABLE TE");
				break;
			case 0xA5F4:
				strcpy_s(buf, buf_size, "VAI SYLLABLE THE");
				break;
			case 0xA5F5:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHE");
				break;
			case 0xA5F6:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DHHE");
				break;
			case 0xA5F7:
				strcpy_s(buf, buf_size, "VAI SYLLABLE LE");
				break;
			case 0xA5F8:
				strcpy_s(buf, buf_size, "VAI SYLLABLE RE");
				break;
			case 0xA5F9:
				strcpy_s(buf, buf_size, "VAI SYLLABLE DE");
				break;
			case 0xA5FA:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDE");
				break;
			case 0xA5FB:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SE");
				break;
			case 0xA5FC:
				strcpy_s(buf, buf_size, "VAI SYLLABLE SHE");
				break;
			case 0xA5FD:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZE");
				break;
			case 0xA5FE:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ZHE");
				break;
			case 0xA5FF:
				strcpy_s(buf, buf_size, "VAI SYLLABLE CE");
				break;
			case 0xA600:
				strcpy_s(buf, buf_size, "VAI SYLLABLE JE");
				break;
			case 0xA601:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NJE");
				break;
			case 0xA602:
				strcpy_s(buf, buf_size, "VAI SYLLABLE YE");
				break;
			case 0xA603:
				strcpy_s(buf, buf_size, "VAI SYLLABLE KE");
				break;
			case 0xA604:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGGE");
				break;
			case 0xA605:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NGGEN");
				break;
			case 0xA606:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GE");
				break;
			case 0xA607:
				strcpy_s(buf, buf_size, "VAI SYLLABLE GEN");
				break;
			case 0xA608:
				strcpy_s(buf, buf_size, "VAI SYLLABLE ME");
				break;
			case 0xA609:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NE");
				break;
			case 0xA60A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NYE");
				break;
			case 0xA60B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NG");
				break;
			case 0xA60C:
				strcpy_s(buf, buf_size, "VAI SYLLABLE LENGTHENER");
				break;
			case 0xA60D:
				strcpy_s(buf, buf_size, "VAI COMMA");
				break;
			case 0xA60E:
				strcpy_s(buf, buf_size, "VAI FULL STOP");
				break;
			case 0xA60F:
				strcpy_s(buf, buf_size, "VAI QUESTION MARK");
				break;
			case 0xA610:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDOLE FA");
				break;
			case 0xA611:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDOLE KA");
				break;
			case 0xA612:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDOLE SOO");
				break;
			case 0xA613:
				strcpy_s(buf, buf_size, "VAI SYMBOL FEENG");
				break;
			case 0xA614:
				strcpy_s(buf, buf_size, "VAI SYMBOL KEENG");
				break;
			case 0xA615:
				strcpy_s(buf, buf_size, "VAI SYMBOL TING");
				break;
			case 0xA616:
				strcpy_s(buf, buf_size, "VAI SYMBOL NII");
				break;
			case 0xA617:
				strcpy_s(buf, buf_size, "VAI SYMBOL BANG");
				break;
			case 0xA618:
				strcpy_s(buf, buf_size, "VAI SYMBOL FAA");
				break;
			case 0xA619:
				strcpy_s(buf, buf_size, "VAI SYMBOL TAA");
				break;
			case 0xA61A:
				strcpy_s(buf, buf_size, "VAI SYMBOL DANG");
				break;
			case 0xA61B:
				strcpy_s(buf, buf_size, "VAI SYMBOL DOONG");
				break;
			case 0xA61C:
				strcpy_s(buf, buf_size, "VAI SYMBOL KUNG");
				break;
			case 0xA61D:
				strcpy_s(buf, buf_size, "VAI SYMBOL TONG");
				break;
			case 0xA61E:
				strcpy_s(buf, buf_size, "VAI SYMBOL DO-O");
				break;
			case 0xA61F:
				strcpy_s(buf, buf_size, "VAI SYMBOL JONG");
				break;
			case 0xA620:
				strcpy_s(buf, buf_size, "VAI DIGIT ZERO");
				break;
			case 0xA621:
				strcpy_s(buf, buf_size, "VAI DIGIT ONE");
				break;
			case 0xA622:
				strcpy_s(buf, buf_size, "VAI DIGIT TWO");
				break;
			case 0xA623:
				strcpy_s(buf, buf_size, "VAI DIGIT THREE");
				break;
			case 0xA624:
				strcpy_s(buf, buf_size, "VAI DIGIT FOUR");
				break;
			case 0xA625:
				strcpy_s(buf, buf_size, "VAI DIGIT FIVE");
				break;
			case 0xA626:
				strcpy_s(buf, buf_size, "VAI DIGIT SIX");
				break;
			case 0xA627:
				strcpy_s(buf, buf_size, "VAI DIGIT SEVEN");
				break;
			case 0xA628:
				strcpy_s(buf, buf_size, "VAI DIGIT EIGHT");
				break;
			case 0xA629:
				strcpy_s(buf, buf_size, "VAI DIGIT NINE");
				break;
			case 0xA62A:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDOLE MA");
				break;
			case 0xA62B:
				strcpy_s(buf, buf_size, "VAI SYLLABLE NDOLE DO");
				break;
			case 0xA640:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ZEMLYA");
				break;
			case 0xA641:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ZEMLYA");
				break;
			case 0xA642:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DZELO");
				break;
			case 0xA643:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DZELO");
				break;
			case 0xA644:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER REVERSED DZE");
				break;
			case 0xA645:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER REVERSED DZE");
				break;
			case 0xA646:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IOTA");
				break;
			case 0xA647:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IOTA");
				break;
			case 0xA648:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DJERV");
				break;
			case 0xA649:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DJERV");
				break;
			case 0xA64A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER MONOGRAPH UK");
				break;
			case 0xA64B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER MONOGRAPH UK");
				break;
			case 0xA64C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER BROAD OMEGA");
				break;
			case 0xA64D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER BROAD OMEGA");
				break;
			case 0xA64E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER NEUTRAL YER");
				break;
			case 0xA64F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER NEUTRAL YER");
				break;
			case 0xA650:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER YERU WITH BACK YER");
				break;
			case 0xA651:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER YERU WITH BACK YER");
				break;
			case 0xA652:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IOTIFIED YAT");
				break;
			case 0xA653:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IOTIFIED YAT");
				break;
			case 0xA654:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER REVERSED YU");
				break;
			case 0xA655:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER REVERSED YU");
				break;
			case 0xA656:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IOTIFIED A");
				break;
			case 0xA657:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IOTIFIED A");
				break;
			case 0xA658:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER CLOSED LITTLE YUS");
				break;
			case 0xA659:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER CLOSED LITTLE YUS");
				break;
			case 0xA65A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER BLENDED YUS");
				break;
			case 0xA65B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER BLENDED YUS");
				break;
			case 0xA65C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER IOTIFIED CLOSED LITTLE YUS");
				break;
			case 0xA65D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER IOTIFIED CLOSED LITTLE YUS");
				break;
			case 0xA65E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER YN");
				break;
			case 0xA65F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER YN");
				break;
			case 0xA660:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER REVERSED TSE");
				break;
			case 0xA661:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER REVERSED TSE");
				break;
			case 0xA662:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SOFT DE");
				break;
			case 0xA663:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SOFT DE");
				break;
			case 0xA664:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SOFT EL");
				break;
			case 0xA665:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SOFT EL");
				break;
			case 0xA666:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SOFT EM");
				break;
			case 0xA667:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SOFT EM");
				break;
			case 0xA668:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER MONOCULAR O");
				break;
			case 0xA669:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER MONOCULAR O");
				break;
			case 0xA66A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER BINOCULAR O");
				break;
			case 0xA66B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER BINOCULAR O");
				break;
			case 0xA66C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DOUBLE MONOCULAR O");
				break;
			case 0xA66D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DOUBLE MONOCULAR O");
				break;
			case 0xA66E:
				strcpy_s(buf, buf_size, "CYRILLIC LETTER MULTIOCULAR O");
				break;
			case 0xA66F:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC VZMET");
				break;
			case 0xA670:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC TEN MILLIONS SIGN");
				break;
			case 0xA671:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC HUNDRED MILLIONS SIGN");
				break;
			case 0xA672:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC THOUSAND MILLIONS SIGN");
				break;
			case 0xA673:
				strcpy_s(buf, buf_size, "SLAVONIC ASTERISK");
				break;
			case 0xA674:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER UKRAINIAN IE");
				break;
			case 0xA675:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER I");
				break;
			case 0xA676:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER YI");
				break;
			case 0xA677:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER U");
				break;
			case 0xA678:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER HARD SIGN");
				break;
			case 0xA679:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER YERU");
				break;
			case 0xA67A:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER SOFT SIGN");
				break;
			case 0xA67B:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER OMEGA");
				break;
			case 0xA67C:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC KAVYKA");
				break;
			case 0xA67D:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC PAYEROK");
				break;
			case 0xA67E:
				strcpy_s(buf, buf_size, "CYRILLIC KAVYKA");
				break;
			case 0xA67F:
				strcpy_s(buf, buf_size, "CYRILLIC PAYEROK");
				break;
			case 0xA680:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DWE");
				break;
			case 0xA681:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DWE");
				break;
			case 0xA682:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DZWE");
				break;
			case 0xA683:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DZWE");
				break;
			case 0xA684:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER ZHWE");
				break;
			case 0xA685:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER ZHWE");
				break;
			case 0xA686:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER CCHE");
				break;
			case 0xA687:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER CCHE");
				break;
			case 0xA688:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DZZE");
				break;
			case 0xA689:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DZZE");
				break;
			case 0xA68A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER TE WITH MIDDLE HOOK");
				break;
			case 0xA68B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TE WITH MIDDLE HOOK");
				break;
			case 0xA68C:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER TWE");
				break;
			case 0xA68D:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TWE");
				break;
			case 0xA68E:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER TSWE");
				break;
			case 0xA68F:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TSWE");
				break;
			case 0xA690:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER TSSE");
				break;
			case 0xA691:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TSSE");
				break;
			case 0xA692:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER TCHE");
				break;
			case 0xA693:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER TCHE");
				break;
			case 0xA694:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER HWE");
				break;
			case 0xA695:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER HWE");
				break;
			case 0xA696:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER SHWE");
				break;
			case 0xA697:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER SHWE");
				break;
			case 0xA698:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER DOUBLE O");
				break;
			case 0xA699:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER DOUBLE O");
				break;
			case 0xA69A:
				strcpy_s(buf, buf_size, "CYRILLIC CAPITAL LETTER CROSSED O");
				break;
			case 0xA69B:
				strcpy_s(buf, buf_size, "CYRILLIC SMALL LETTER CROSSED O");
				break;
			case 0xA69C:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CYRILLIC HARD SIGN");
				break;
			case 0xA69D:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CYRILLIC SOFT SIGN");
				break;
			case 0xA69E:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER EF");
				break;
			case 0xA69F:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC LETTER IOTIFIED E");
				break;
			case 0xA6A0:
				strcpy_s(buf, buf_size, "BAMUM LETTER A");
				break;
			case 0xA6A1:
				strcpy_s(buf, buf_size, "BAMUM LETTER KA");
				break;
			case 0xA6A2:
				strcpy_s(buf, buf_size, "BAMUM LETTER U");
				break;
			case 0xA6A3:
				strcpy_s(buf, buf_size, "BAMUM LETTER KU");
				break;
			case 0xA6A4:
				strcpy_s(buf, buf_size, "BAMUM LETTER EE");
				break;
			case 0xA6A5:
				strcpy_s(buf, buf_size, "BAMUM LETTER REE");
				break;
			case 0xA6A6:
				strcpy_s(buf, buf_size, "BAMUM LETTER TAE");
				break;
			case 0xA6A7:
				strcpy_s(buf, buf_size, "BAMUM LETTER O");
				break;
			case 0xA6A8:
				strcpy_s(buf, buf_size, "BAMUM LETTER NYI");
				break;
			case 0xA6A9:
				strcpy_s(buf, buf_size, "BAMUM LETTER I");
				break;
			case 0xA6AA:
				strcpy_s(buf, buf_size, "BAMUM LETTER LA");
				break;
			case 0xA6AB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PA");
				break;
			case 0xA6AC:
				strcpy_s(buf, buf_size, "BAMUM LETTER RII");
				break;
			case 0xA6AD:
				strcpy_s(buf, buf_size, "BAMUM LETTER RIEE");
				break;
			case 0xA6AE:
				strcpy_s(buf, buf_size, "BAMUM LETTER LEEEE");
				break;
			case 0xA6AF:
				strcpy_s(buf, buf_size, "BAMUM LETTER MEEEE");
				break;
			case 0xA6B0:
				strcpy_s(buf, buf_size, "BAMUM LETTER TAA");
				break;
			case 0xA6B1:
				strcpy_s(buf, buf_size, "BAMUM LETTER NDAA");
				break;
			case 0xA6B2:
				strcpy_s(buf, buf_size, "BAMUM LETTER NJAEM");
				break;
			case 0xA6B3:
				strcpy_s(buf, buf_size, "BAMUM LETTER M");
				break;
			case 0xA6B4:
				strcpy_s(buf, buf_size, "BAMUM LETTER SUU");
				break;
			case 0xA6B5:
				strcpy_s(buf, buf_size, "BAMUM LETTER MU");
				break;
			case 0xA6B6:
				strcpy_s(buf, buf_size, "BAMUM LETTER SHII");
				break;
			case 0xA6B7:
				strcpy_s(buf, buf_size, "BAMUM LETTER SI");
				break;
			case 0xA6B8:
				strcpy_s(buf, buf_size, "BAMUM LETTER SHEUX");
				break;
			case 0xA6B9:
				strcpy_s(buf, buf_size, "BAMUM LETTER SEUX");
				break;
			case 0xA6BA:
				strcpy_s(buf, buf_size, "BAMUM LETTER KYEE");
				break;
			case 0xA6BB:
				strcpy_s(buf, buf_size, "BAMUM LETTER KET");
				break;
			case 0xA6BC:
				strcpy_s(buf, buf_size, "BAMUM LETTER NUAE");
				break;
			case 0xA6BD:
				strcpy_s(buf, buf_size, "BAMUM LETTER NU");
				break;
			case 0xA6BE:
				strcpy_s(buf, buf_size, "BAMUM LETTER NJUAE");
				break;
			case 0xA6BF:
				strcpy_s(buf, buf_size, "BAMUM LETTER YOQ");
				break;
			case 0xA6C0:
				strcpy_s(buf, buf_size, "BAMUM LETTER SHU");
				break;
			case 0xA6C1:
				strcpy_s(buf, buf_size, "BAMUM LETTER YUQ");
				break;
			case 0xA6C2:
				strcpy_s(buf, buf_size, "BAMUM LETTER YA");
				break;
			case 0xA6C3:
				strcpy_s(buf, buf_size, "BAMUM LETTER NSHA");
				break;
			case 0xA6C4:
				strcpy_s(buf, buf_size, "BAMUM LETTER KEUX");
				break;
			case 0xA6C5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PEUX");
				break;
			case 0xA6C6:
				strcpy_s(buf, buf_size, "BAMUM LETTER NJEE");
				break;
			case 0xA6C7:
				strcpy_s(buf, buf_size, "BAMUM LETTER NTEE");
				break;
			case 0xA6C8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PUE");
				break;
			case 0xA6C9:
				strcpy_s(buf, buf_size, "BAMUM LETTER WUE");
				break;
			case 0xA6CA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PEE");
				break;
			case 0xA6CB:
				strcpy_s(buf, buf_size, "BAMUM LETTER FEE");
				break;
			case 0xA6CC:
				strcpy_s(buf, buf_size, "BAMUM LETTER RU");
				break;
			case 0xA6CD:
				strcpy_s(buf, buf_size, "BAMUM LETTER LU");
				break;
			case 0xA6CE:
				strcpy_s(buf, buf_size, "BAMUM LETTER MI");
				break;
			case 0xA6CF:
				strcpy_s(buf, buf_size, "BAMUM LETTER NI");
				break;
			case 0xA6D0:
				strcpy_s(buf, buf_size, "BAMUM LETTER REUX");
				break;
			case 0xA6D1:
				strcpy_s(buf, buf_size, "BAMUM LETTER RAE");
				break;
			case 0xA6D2:
				strcpy_s(buf, buf_size, "BAMUM LETTER KEN");
				break;
			case 0xA6D3:
				strcpy_s(buf, buf_size, "BAMUM LETTER NGKWAEN");
				break;
			case 0xA6D4:
				strcpy_s(buf, buf_size, "BAMUM LETTER NGGA");
				break;
			case 0xA6D5:
				strcpy_s(buf, buf_size, "BAMUM LETTER NGA");
				break;
			case 0xA6D6:
				strcpy_s(buf, buf_size, "BAMUM LETTER SHO");
				break;
			case 0xA6D7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PUAE");
				break;
			case 0xA6D8:
				strcpy_s(buf, buf_size, "BAMUM LETTER FU");
				break;
			case 0xA6D9:
				strcpy_s(buf, buf_size, "BAMUM LETTER FOM");
				break;
			case 0xA6DA:
				strcpy_s(buf, buf_size, "BAMUM LETTER WA");
				break;
			case 0xA6DB:
				strcpy_s(buf, buf_size, "BAMUM LETTER NA");
				break;
			case 0xA6DC:
				strcpy_s(buf, buf_size, "BAMUM LETTER LI");
				break;
			case 0xA6DD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PI");
				break;
			case 0xA6DE:
				strcpy_s(buf, buf_size, "BAMUM LETTER LOQ");
				break;
			case 0xA6DF:
				strcpy_s(buf, buf_size, "BAMUM LETTER KO");
				break;
			case 0xA6E0:
				strcpy_s(buf, buf_size, "BAMUM LETTER MBEN");
				break;
			case 0xA6E1:
				strcpy_s(buf, buf_size, "BAMUM LETTER REN");
				break;
			case 0xA6E2:
				strcpy_s(buf, buf_size, "BAMUM LETTER MEN");
				break;
			case 0xA6E3:
				strcpy_s(buf, buf_size, "BAMUM LETTER MA");
				break;
			case 0xA6E4:
				strcpy_s(buf, buf_size, "BAMUM LETTER TI");
				break;
			case 0xA6E5:
				strcpy_s(buf, buf_size, "BAMUM LETTER KI");
				break;
			case 0xA6E6:
				strcpy_s(buf, buf_size, "BAMUM LETTER MO");
				break;
			case 0xA6E7:
				strcpy_s(buf, buf_size, "BAMUM LETTER MBAA");
				break;
			case 0xA6E8:
				strcpy_s(buf, buf_size, "BAMUM LETTER TET");
				break;
			case 0xA6E9:
				strcpy_s(buf, buf_size, "BAMUM LETTER KPA");
				break;
			case 0xA6EA:
				strcpy_s(buf, buf_size, "BAMUM LETTER TEN");
				break;
			case 0xA6EB:
				strcpy_s(buf, buf_size, "BAMUM LETTER NTUU");
				break;
			case 0xA6EC:
				strcpy_s(buf, buf_size, "BAMUM LETTER SAMBA");
				break;
			case 0xA6ED:
				strcpy_s(buf, buf_size, "BAMUM LETTER FAAMAE");
				break;
			case 0xA6EE:
				strcpy_s(buf, buf_size, "BAMUM LETTER KOVUU");
				break;
			case 0xA6EF:
				strcpy_s(buf, buf_size, "BAMUM LETTER KOGHOM");
				break;
			case 0xA6F0:
				strcpy_s(buf, buf_size, "BAMUM COMBINING MARK KOQNDON");
				break;
			case 0xA6F1:
				strcpy_s(buf, buf_size, "BAMUM COMBINING MARK TUKWENTIS");
				break;
			case 0xA6F2:
				strcpy_s(buf, buf_size, "BAMUM NJAEMLI");
				break;
			case 0xA6F3:
				strcpy_s(buf, buf_size, "BAMUM FULL STOP");
				break;
			case 0xA6F4:
				strcpy_s(buf, buf_size, "BAMUM COLON");
				break;
			case 0xA6F5:
				strcpy_s(buf, buf_size, "BAMUM COMMA");
				break;
			case 0xA6F6:
				strcpy_s(buf, buf_size, "BAMUM SEMICOLON");
				break;
			case 0xA6F7:
				strcpy_s(buf, buf_size, "BAMUM QUESTION MARK");
				break;
			case 0xA700:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CHINESE TONE YIN PING");
				break;
			case 0xA701:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CHINESE TONE YANG PING");
				break;
			case 0xA702:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CHINESE TONE YIN SHANG");
				break;
			case 0xA703:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CHINESE TONE YANG SHANG");
				break;
			case 0xA704:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CHINESE TONE YIN QU");
				break;
			case 0xA705:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CHINESE TONE YANG QU");
				break;
			case 0xA706:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CHINESE TONE YIN RU");
				break;
			case 0xA707:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CHINESE TONE YANG RU");
				break;
			case 0xA708:
				strcpy_s(buf, buf_size, "MODIFIER LETTER EXTRA-HIGH DOTTED TONE BAR");
				break;
			case 0xA709:
				strcpy_s(buf, buf_size, "MODIFIER LETTER HIGH DOTTED TONE BAR");
				break;
			case 0xA70A:
				strcpy_s(buf, buf_size, "MODIFIER LETTER MID DOTTED TONE BAR");
				break;
			case 0xA70B:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW DOTTED TONE BAR");
				break;
			case 0xA70C:
				strcpy_s(buf, buf_size, "MODIFIER LETTER EXTRA-LOW DOTTED TONE BAR");
				break;
			case 0xA70D:
				strcpy_s(buf, buf_size, "MODIFIER LETTER EXTRA-HIGH DOTTED LEFT-STEM TONE BAR");
				break;
			case 0xA70E:
				strcpy_s(buf, buf_size, "MODIFIER LETTER HIGH DOTTED LEFT-STEM TONE BAR");
				break;
			case 0xA70F:
				strcpy_s(buf, buf_size, "MODIFIER LETTER MID DOTTED LEFT-STEM TONE BAR");
				break;
			case 0xA710:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW DOTTED LEFT-STEM TONE BAR");
				break;
			case 0xA711:
				strcpy_s(buf, buf_size, "MODIFIER LETTER EXTRA-LOW DOTTED LEFT-STEM TONE BAR");
				break;
			case 0xA712:
				strcpy_s(buf, buf_size, "MODIFIER LETTER EXTRA-HIGH LEFT-STEM TONE BAR");
				break;
			case 0xA713:
				strcpy_s(buf, buf_size, "MODIFIER LETTER HIGH LEFT-STEM TONE BAR");
				break;
			case 0xA714:
				strcpy_s(buf, buf_size, "MODIFIER LETTER MID LEFT-STEM TONE BAR");
				break;
			case 0xA715:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW LEFT-STEM TONE BAR");
				break;
			case 0xA716:
				strcpy_s(buf, buf_size, "MODIFIER LETTER EXTRA-LOW LEFT-STEM TONE BAR");
				break;
			case 0xA717:
				strcpy_s(buf, buf_size, "MODIFIER LETTER DOT VERTICAL BAR");
				break;
			case 0xA718:
				strcpy_s(buf, buf_size, "MODIFIER LETTER DOT SLASH");
				break;
			case 0xA719:
				strcpy_s(buf, buf_size, "MODIFIER LETTER DOT HORIZONTAL BAR");
				break;
			case 0xA71A:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOWER RIGHT CORNER ANGLE");
				break;
			case 0xA71B:
				strcpy_s(buf, buf_size, "MODIFIER LETTER RAISED UP ARROW");
				break;
			case 0xA71C:
				strcpy_s(buf, buf_size, "MODIFIER LETTER RAISED DOWN ARROW");
				break;
			case 0xA71D:
				strcpy_s(buf, buf_size, "MODIFIER LETTER RAISED EXCLAMATION MARK");
				break;
			case 0xA71E:
				strcpy_s(buf, buf_size, "MODIFIER LETTER RAISED INVERTED EXCLAMATION MARK");
				break;
			case 0xA71F:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW INVERTED EXCLAMATION MARK");
				break;
			case 0xA720:
				strcpy_s(buf, buf_size, "MODIFIER LETTER STRESS AND HIGH TONE");
				break;
			case 0xA721:
				strcpy_s(buf, buf_size, "MODIFIER LETTER STRESS AND LOW TONE");
				break;
			case 0xA722:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF");
				break;
			case 0xA723:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER EGYPTOLOGICAL ALEF");
				break;
			case 0xA724:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER EGYPTOLOGICAL AIN");
				break;
			case 0xA725:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER EGYPTOLOGICAL AIN");
				break;
			case 0xA726:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER HENG");
				break;
			case 0xA727:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER HENG");
				break;
			case 0xA728:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TZ");
				break;
			case 0xA729:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TZ");
				break;
			case 0xA72A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TRESILLO");
				break;
			case 0xA72B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TRESILLO");
				break;
			case 0xA72C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER CUATRILLO");
				break;
			case 0xA72D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER CUATRILLO");
				break;
			case 0xA72E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER CUATRILLO WITH COMMA");
				break;
			case 0xA72F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER CUATRILLO WITH COMMA");
				break;
			case 0xA730:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL F");
				break;
			case 0xA731:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL S");
				break;
			case 0xA732:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER AA");
				break;
			case 0xA733:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER AA");
				break;
			case 0xA734:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER AO");
				break;
			case 0xA735:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER AO");
				break;
			case 0xA736:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER AU");
				break;
			case 0xA737:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER AU");
				break;
			case 0xA738:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER AV");
				break;
			case 0xA739:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER AV");
				break;
			case 0xA73A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR");
				break;
			case 0xA73B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER AV WITH HORIZONTAL BAR");
				break;
			case 0xA73C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER AY");
				break;
			case 0xA73D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER AY");
				break;
			case 0xA73E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER REVERSED C WITH DOT");
				break;
			case 0xA73F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER REVERSED C WITH DOT");
				break;
			case 0xA740:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH STROKE");
				break;
			case 0xA741:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH STROKE");
				break;
			case 0xA742:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH DIAGONAL STROKE");
				break;
			case 0xA743:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH DIAGONAL STROKE");
				break;
			case 0xA744:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE");
				break;
			case 0xA745:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH STROKE AND DIAGONAL STROKE");
				break;
			case 0xA746:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER BROKEN L");
				break;
			case 0xA747:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER BROKEN L");
				break;
			case 0xA748:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH HIGH STROKE");
				break;
			case 0xA749:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH HIGH STROKE");
				break;
			case 0xA74A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY");
				break;
			case 0xA74B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH LONG STROKE OVERLAY");
				break;
			case 0xA74C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER O WITH LOOP");
				break;
			case 0xA74D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER O WITH LOOP");
				break;
			case 0xA74E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER OO");
				break;
			case 0xA74F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER OO");
				break;
			case 0xA750:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER");
				break;
			case 0xA751:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER");
				break;
			case 0xA752:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER P WITH FLOURISH");
				break;
			case 0xA753:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER P WITH FLOURISH");
				break;
			case 0xA754:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER P WITH SQUIRREL TAIL");
				break;
			case 0xA755:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER P WITH SQUIRREL TAIL");
				break;
			case 0xA756:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER");
				break;
			case 0xA757:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Q WITH STROKE THROUGH DESCENDER");
				break;
			case 0xA758:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE");
				break;
			case 0xA759:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Q WITH DIAGONAL STROKE");
				break;
			case 0xA75A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R ROTUNDA");
				break;
			case 0xA75B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R ROTUNDA");
				break;
			case 0xA75C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER RUM ROTUNDA");
				break;
			case 0xA75D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER RUM ROTUNDA");
				break;
			case 0xA75E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER V WITH DIAGONAL STROKE");
				break;
			case 0xA75F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER V WITH DIAGONAL STROKE");
				break;
			case 0xA760:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER VY");
				break;
			case 0xA761:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER VY");
				break;
			case 0xA762:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER VISIGOTHIC Z");
				break;
			case 0xA763:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER VISIGOTHIC Z");
				break;
			case 0xA764:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER THORN WITH STROKE");
				break;
			case 0xA765:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER THORN WITH STROKE");
				break;
			case 0xA766:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER");
				break;
			case 0xA767:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER");
				break;
			case 0xA768:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER VEND");
				break;
			case 0xA769:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER VEND");
				break;
			case 0xA76A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER ET");
				break;
			case 0xA76B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ET");
				break;
			case 0xA76C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER IS");
				break;
			case 0xA76D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER IS");
				break;
			case 0xA76E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER CON");
				break;
			case 0xA76F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER CON");
				break;
			case 0xA770:
				strcpy_s(buf, buf_size, "MODIFIER LETTER US");
				break;
			case 0xA771:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DUM");
				break;
			case 0xA772:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LUM");
				break;
			case 0xA773:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER MUM");
				break;
			case 0xA774:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER NUM");
				break;
			case 0xA775:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER RUM");
				break;
			case 0xA776:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL RUM");
				break;
			case 0xA777:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TUM");
				break;
			case 0xA778:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER UM");
				break;
			case 0xA779:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER INSULAR D");
				break;
			case 0xA77A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER INSULAR D");
				break;
			case 0xA77B:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER INSULAR F");
				break;
			case 0xA77C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER INSULAR F");
				break;
			case 0xA77D:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER INSULAR G");
				break;
			case 0xA77E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TURNED INSULAR G");
				break;
			case 0xA77F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED INSULAR G");
				break;
			case 0xA780:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TURNED L");
				break;
			case 0xA781:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED L");
				break;
			case 0xA782:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER INSULAR R");
				break;
			case 0xA783:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER INSULAR R");
				break;
			case 0xA784:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER INSULAR S");
				break;
			case 0xA785:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER INSULAR S");
				break;
			case 0xA786:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER INSULAR T");
				break;
			case 0xA787:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER INSULAR T");
				break;
			case 0xA788:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LOW CIRCUMFLEX ACCENT");
				break;
			case 0xA789:
				strcpy_s(buf, buf_size, "MODIFIER LETTER COLON");
				break;
			case 0xA78A:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SHORT EQUALS SIGN");
				break;
			case 0xA78B:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER SALTILLO");
				break;
			case 0xA78C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SALTILLO");
				break;
			case 0xA78D:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TURNED H");
				break;
			case 0xA78E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH RETROFLEX HOOK AND BELT");
				break;
			case 0xA78F:
				strcpy_s(buf, buf_size, "LATIN LETTER SINOLOGICAL DOT");
				break;
			case 0xA790:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH DESCENDER");
				break;
			case 0xA791:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH DESCENDER");
				break;
			case 0xA792:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C WITH BAR");
				break;
			case 0xA793:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH BAR");
				break;
			case 0xA794:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER C WITH PALATAL HOOK");
				break;
			case 0xA795:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER H WITH PALATAL HOOK");
				break;
			case 0xA796:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER B WITH FLOURISH");
				break;
			case 0xA797:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER B WITH FLOURISH");
				break;
			case 0xA798:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER F WITH STROKE");
				break;
			case 0xA799:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER F WITH STROKE");
				break;
			case 0xA79A:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER VOLAPUK AE");
				break;
			case 0xA79B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER VOLAPUK AE");
				break;
			case 0xA79C:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER VOLAPUK OE");
				break;
			case 0xA79D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER VOLAPUK OE");
				break;
			case 0xA79E:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER VOLAPUK UE");
				break;
			case 0xA79F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER VOLAPUK UE");
				break;
			case 0xA7A0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER G WITH OBLIQUE STROKE");
				break;
			case 0xA7A1:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER G WITH OBLIQUE STROKE");
				break;
			case 0xA7A2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER K WITH OBLIQUE STROKE");
				break;
			case 0xA7A3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER K WITH OBLIQUE STROKE");
				break;
			case 0xA7A4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER N WITH OBLIQUE STROKE");
				break;
			case 0xA7A5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH OBLIQUE STROKE");
				break;
			case 0xA7A6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER R WITH OBLIQUE STROKE");
				break;
			case 0xA7A7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH OBLIQUE STROKE");
				break;
			case 0xA7A8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH OBLIQUE STROKE");
				break;
			case 0xA7A9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH OBLIQUE STROKE");
				break;
			case 0xA7AA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER H WITH HOOK");
				break;
			case 0xA7AB:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER REVERSED OPEN E");
				break;
			case 0xA7AC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER SCRIPT G");
				break;
			case 0xA7AD:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER L WITH BELT");
				break;
			case 0xA7AE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER SMALL CAPITAL I");
				break;
			case 0xA7AF:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL Q");
				break;
			case 0xA7B0:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TURNED K");
				break;
			case 0xA7B1:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER TURNED T");
				break;
			case 0xA7B2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER J WITH CROSSED-TAIL");
				break;
			case 0xA7B3:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER CHI");
				break;
			case 0xA7B4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER BETA");
				break;
			case 0xA7B5:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER BETA");
				break;
			case 0xA7B6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER OMEGA");
				break;
			case 0xA7B7:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER OMEGA");
				break;
			case 0xA7B8:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER U WITH STROKE");
				break;
			case 0xA7B9:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH STROKE");
				break;
			case 0xA7BA:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER GLOTTAL A");
				break;
			case 0xA7BB:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER GLOTTAL A");
				break;
			case 0xA7BC:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER GLOTTAL I");
				break;
			case 0xA7BD:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER GLOTTAL I");
				break;
			case 0xA7BE:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER GLOTTAL U");
				break;
			case 0xA7BF:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER GLOTTAL U");
				break;
			case 0xA7C2:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER ANGLICANA W");
				break;
			case 0xA7C3:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ANGLICANA W");
				break;
			case 0xA7C4:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER C WITH PALATAL HOOK");
				break;
			case 0xA7C5:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH HOOK");
				break;
			case 0xA7C6:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER Z WITH PALATAL HOOK");
				break;
			case 0xA7C7:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER D WITH SHORT STROKE OVERLAY");
				break;
			case 0xA7C8:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER D WITH SHORT STROKE OVERLAY");
				break;
			case 0xA7C9:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER S WITH SHORT STROKE OVERLAY");
				break;
			case 0xA7CA:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER S WITH SHORT STROKE OVERLAY");
				break;
			case 0xA7F5:
				strcpy_s(buf, buf_size, "LATIN CAPITAL LETTER REVERSED HALF H");
				break;
			case 0xA7F6:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER REVERSED HALF H");
				break;
			case 0xA7F7:
				strcpy_s(buf, buf_size, "LATIN EPIGRAPHIC LETTER SIDEWAYS I");
				break;
			case 0xA7F8:
				strcpy_s(buf, buf_size, "MODIFIER LETTER CAPITAL H WITH STROKE");
				break;
			case 0xA7F9:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL LIGATURE OE");
				break;
			case 0xA7FA:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL TURNED M");
				break;
			case 0xA7FB:
				strcpy_s(buf, buf_size, "LATIN EPIGRAPHIC LETTER REVERSED F");
				break;
			case 0xA7FC:
				strcpy_s(buf, buf_size, "LATIN EPIGRAPHIC LETTER REVERSED P");
				break;
			case 0xA7FD:
				strcpy_s(buf, buf_size, "LATIN EPIGRAPHIC LETTER INVERTED M");
				break;
			case 0xA7FE:
				strcpy_s(buf, buf_size, "LATIN EPIGRAPHIC LETTER I LONGA");
				break;
			case 0xA7FF:
				strcpy_s(buf, buf_size, "LATIN EPIGRAPHIC LETTER ARCHAIC M");
				break;
			case 0xA800:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER A");
				break;
			case 0xA801:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER I");
				break;
			case 0xA802:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI SIGN DVISVARA");
				break;
			case 0xA803:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER U");
				break;
			case 0xA804:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER E");
				break;
			case 0xA805:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER O");
				break;
			case 0xA806:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI SIGN HASANTA");
				break;
			case 0xA807:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER KO");
				break;
			case 0xA808:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER KHO");
				break;
			case 0xA809:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER GO");
				break;
			case 0xA80A:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER GHO");
				break;
			case 0xA80B:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI SIGN ANUSVARA");
				break;
			case 0xA80C:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER CO");
				break;
			case 0xA80D:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER CHO");
				break;
			case 0xA80E:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER JO");
				break;
			case 0xA80F:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER JHO");
				break;
			case 0xA810:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER TTO");
				break;
			case 0xA811:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER TTHO");
				break;
			case 0xA812:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER DDO");
				break;
			case 0xA813:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER DDHO");
				break;
			case 0xA814:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER TO");
				break;
			case 0xA815:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER THO");
				break;
			case 0xA816:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER DO");
				break;
			case 0xA817:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER DHO");
				break;
			case 0xA818:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER NO");
				break;
			case 0xA819:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER PO");
				break;
			case 0xA81A:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER PHO");
				break;
			case 0xA81B:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER BO");
				break;
			case 0xA81C:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER BHO");
				break;
			case 0xA81D:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER MO");
				break;
			case 0xA81E:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER RO");
				break;
			case 0xA81F:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER LO");
				break;
			case 0xA820:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER RRO");
				break;
			case 0xA821:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER SO");
				break;
			case 0xA822:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI LETTER HO");
				break;
			case 0xA823:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI VOWEL SIGN A");
				break;
			case 0xA824:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI VOWEL SIGN I");
				break;
			case 0xA825:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI VOWEL SIGN U");
				break;
			case 0xA826:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI VOWEL SIGN E");
				break;
			case 0xA827:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI VOWEL SIGN OO");
				break;
			case 0xA828:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI POETRY MARK-1");
				break;
			case 0xA829:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI POETRY MARK-2");
				break;
			case 0xA82A:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI POETRY MARK-3");
				break;
			case 0xA82B:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI POETRY MARK-4");
				break;
			case 0xA82C:
				strcpy_s(buf, buf_size, "SYLOTI NAGRI SIGN ALTERNATE HASANTA");
				break;
			case 0xA830:
				strcpy_s(buf, buf_size, "NORTH INDIC FRACTION ONE QUARTER");
				break;
			case 0xA831:
				strcpy_s(buf, buf_size, "NORTH INDIC FRACTION ONE HALF");
				break;
			case 0xA832:
				strcpy_s(buf, buf_size, "NORTH INDIC FRACTION THREE QUARTERS");
				break;
			case 0xA833:
				strcpy_s(buf, buf_size, "NORTH INDIC FRACTION ONE SIXTEENTH");
				break;
			case 0xA834:
				strcpy_s(buf, buf_size, "NORTH INDIC FRACTION ONE EIGHTH");
				break;
			case 0xA835:
				strcpy_s(buf, buf_size, "NORTH INDIC FRACTION THREE SIXTEENTHS");
				break;
			case 0xA836:
				strcpy_s(buf, buf_size, "NORTH INDIC QUARTER MARK");
				break;
			case 0xA837:
				strcpy_s(buf, buf_size, "NORTH INDIC PLACEHOLDER MARK");
				break;
			case 0xA838:
				strcpy_s(buf, buf_size, "NORTH INDIC RUPEE MARK");
				break;
			case 0xA839:
				strcpy_s(buf, buf_size, "NORTH INDIC QUANTITY MARK");
				break;
			case 0xA840:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER KA");
				break;
			case 0xA841:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER KHA");
				break;
			case 0xA842:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER GA");
				break;
			case 0xA843:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER NGA");
				break;
			case 0xA844:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER CA");
				break;
			case 0xA845:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER CHA");
				break;
			case 0xA846:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER JA");
				break;
			case 0xA847:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER NYA");
				break;
			case 0xA848:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER TA");
				break;
			case 0xA849:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER THA");
				break;
			case 0xA84A:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER DA");
				break;
			case 0xA84B:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER NA");
				break;
			case 0xA84C:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER PA");
				break;
			case 0xA84D:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER PHA");
				break;
			case 0xA84E:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER BA");
				break;
			case 0xA84F:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER MA");
				break;
			case 0xA850:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER TSA");
				break;
			case 0xA851:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER TSHA");
				break;
			case 0xA852:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER DZA");
				break;
			case 0xA853:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER WA");
				break;
			case 0xA854:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER ZHA");
				break;
			case 0xA855:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER ZA");
				break;
			case 0xA856:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER SMALL A");
				break;
			case 0xA857:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER YA");
				break;
			case 0xA858:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER RA");
				break;
			case 0xA859:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER LA");
				break;
			case 0xA85A:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER SHA");
				break;
			case 0xA85B:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER SA");
				break;
			case 0xA85C:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER HA");
				break;
			case 0xA85D:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER A");
				break;
			case 0xA85E:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER I");
				break;
			case 0xA85F:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER U");
				break;
			case 0xA860:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER E");
				break;
			case 0xA861:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER O");
				break;
			case 0xA862:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER QA");
				break;
			case 0xA863:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER XA");
				break;
			case 0xA864:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER FA");
				break;
			case 0xA865:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER GGA");
				break;
			case 0xA866:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER EE");
				break;
			case 0xA867:
				strcpy_s(buf, buf_size, "PHAGS-PA SUBJOINED LETTER WA");
				break;
			case 0xA868:
				strcpy_s(buf, buf_size, "PHAGS-PA SUBJOINED LETTER YA");
				break;
			case 0xA869:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER TTA");
				break;
			case 0xA86A:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER TTHA");
				break;
			case 0xA86B:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER DDA");
				break;
			case 0xA86C:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER NNA");
				break;
			case 0xA86D:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER ALTERNATE YA");
				break;
			case 0xA86E:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER VOICELESS SHA");
				break;
			case 0xA86F:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER VOICED HA");
				break;
			case 0xA870:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER ASPIRATED FA");
				break;
			case 0xA871:
				strcpy_s(buf, buf_size, "PHAGS-PA SUBJOINED LETTER RA");
				break;
			case 0xA872:
				strcpy_s(buf, buf_size, "PHAGS-PA SUPERFIXED LETTER RA");
				break;
			case 0xA873:
				strcpy_s(buf, buf_size, "PHAGS-PA LETTER CANDRABINDU");
				break;
			case 0xA874:
				strcpy_s(buf, buf_size, "PHAGS-PA SINGLE HEAD MARK");
				break;
			case 0xA875:
				strcpy_s(buf, buf_size, "PHAGS-PA DOUBLE HEAD MARK");
				break;
			case 0xA876:
				strcpy_s(buf, buf_size, "PHAGS-PA MARK SHAD");
				break;
			case 0xA877:
				strcpy_s(buf, buf_size, "PHAGS-PA MARK DOUBLE SHAD");
				break;
			case 0xA880:
				strcpy_s(buf, buf_size, "SAURASHTRA SIGN ANUSVARA");
				break;
			case 0xA881:
				strcpy_s(buf, buf_size, "SAURASHTRA SIGN VISARGA");
				break;
			case 0xA882:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER A");
				break;
			case 0xA883:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER AA");
				break;
			case 0xA884:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER I");
				break;
			case 0xA885:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER II");
				break;
			case 0xA886:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER U");
				break;
			case 0xA887:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER UU");
				break;
			case 0xA888:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER VOCALIC R");
				break;
			case 0xA889:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER VOCALIC RR");
				break;
			case 0xA88A:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER VOCALIC L");
				break;
			case 0xA88B:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER VOCALIC LL");
				break;
			case 0xA88C:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER E");
				break;
			case 0xA88D:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER EE");
				break;
			case 0xA88E:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER AI");
				break;
			case 0xA88F:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER O");
				break;
			case 0xA890:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER OO");
				break;
			case 0xA891:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER AU");
				break;
			case 0xA892:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER KA");
				break;
			case 0xA893:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER KHA");
				break;
			case 0xA894:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER GA");
				break;
			case 0xA895:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER GHA");
				break;
			case 0xA896:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER NGA");
				break;
			case 0xA897:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER CA");
				break;
			case 0xA898:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER CHA");
				break;
			case 0xA899:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER JA");
				break;
			case 0xA89A:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER JHA");
				break;
			case 0xA89B:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER NYA");
				break;
			case 0xA89C:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER TTA");
				break;
			case 0xA89D:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER TTHA");
				break;
			case 0xA89E:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER DDA");
				break;
			case 0xA89F:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER DDHA");
				break;
			case 0xA8A0:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER NNA");
				break;
			case 0xA8A1:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER TA");
				break;
			case 0xA8A2:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER THA");
				break;
			case 0xA8A3:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER DA");
				break;
			case 0xA8A4:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER DHA");
				break;
			case 0xA8A5:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER NA");
				break;
			case 0xA8A6:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER PA");
				break;
			case 0xA8A7:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER PHA");
				break;
			case 0xA8A8:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER BA");
				break;
			case 0xA8A9:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER BHA");
				break;
			case 0xA8AA:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER MA");
				break;
			case 0xA8AB:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER YA");
				break;
			case 0xA8AC:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER RA");
				break;
			case 0xA8AD:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER LA");
				break;
			case 0xA8AE:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER VA");
				break;
			case 0xA8AF:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER SHA");
				break;
			case 0xA8B0:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER SSA");
				break;
			case 0xA8B1:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER SA");
				break;
			case 0xA8B2:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER HA");
				break;
			case 0xA8B3:
				strcpy_s(buf, buf_size, "SAURASHTRA LETTER LLA");
				break;
			case 0xA8B4:
				strcpy_s(buf, buf_size, "SAURASHTRA CONSONANT SIGN HAARU");
				break;
			case 0xA8B5:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN AA");
				break;
			case 0xA8B6:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN I");
				break;
			case 0xA8B7:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN II");
				break;
			case 0xA8B8:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN U");
				break;
			case 0xA8B9:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN UU");
				break;
			case 0xA8BA:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN VOCALIC R");
				break;
			case 0xA8BB:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN VOCALIC RR");
				break;
			case 0xA8BC:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN VOCALIC L");
				break;
			case 0xA8BD:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN VOCALIC LL");
				break;
			case 0xA8BE:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN E");
				break;
			case 0xA8BF:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN EE");
				break;
			case 0xA8C0:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN AI");
				break;
			case 0xA8C1:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN O");
				break;
			case 0xA8C2:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN OO");
				break;
			case 0xA8C3:
				strcpy_s(buf, buf_size, "SAURASHTRA VOWEL SIGN AU");
				break;
			case 0xA8C4:
				strcpy_s(buf, buf_size, "SAURASHTRA SIGN VIRAMA");
				break;
			case 0xA8C5:
				strcpy_s(buf, buf_size, "SAURASHTRA SIGN CANDRABINDU");
				break;
			case 0xA8CE:
				strcpy_s(buf, buf_size, "SAURASHTRA DANDA");
				break;
			case 0xA8CF:
				strcpy_s(buf, buf_size, "SAURASHTRA DOUBLE DANDA");
				break;
			case 0xA8D0:
				strcpy_s(buf, buf_size, "SAURASHTRA DIGIT ZERO");
				break;
			case 0xA8D1:
				strcpy_s(buf, buf_size, "SAURASHTRA DIGIT ONE");
				break;
			case 0xA8D2:
				strcpy_s(buf, buf_size, "SAURASHTRA DIGIT TWO");
				break;
			case 0xA8D3:
				strcpy_s(buf, buf_size, "SAURASHTRA DIGIT THREE");
				break;
			case 0xA8D4:
				strcpy_s(buf, buf_size, "SAURASHTRA DIGIT FOUR");
				break;
			case 0xA8D5:
				strcpy_s(buf, buf_size, "SAURASHTRA DIGIT FIVE");
				break;
			case 0xA8D6:
				strcpy_s(buf, buf_size, "SAURASHTRA DIGIT SIX");
				break;
			case 0xA8D7:
				strcpy_s(buf, buf_size, "SAURASHTRA DIGIT SEVEN");
				break;
			case 0xA8D8:
				strcpy_s(buf, buf_size, "SAURASHTRA DIGIT EIGHT");
				break;
			case 0xA8D9:
				strcpy_s(buf, buf_size, "SAURASHTRA DIGIT NINE");
				break;
			case 0xA8E0:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI DIGIT ZERO");
				break;
			case 0xA8E1:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI DIGIT ONE");
				break;
			case 0xA8E2:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI DIGIT TWO");
				break;
			case 0xA8E3:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI DIGIT THREE");
				break;
			case 0xA8E4:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI DIGIT FOUR");
				break;
			case 0xA8E5:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI DIGIT FIVE");
				break;
			case 0xA8E6:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI DIGIT SIX");
				break;
			case 0xA8E7:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI DIGIT SEVEN");
				break;
			case 0xA8E8:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI DIGIT EIGHT");
				break;
			case 0xA8E9:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI DIGIT NINE");
				break;
			case 0xA8EA:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI LETTER A");
				break;
			case 0xA8EB:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI LETTER U");
				break;
			case 0xA8EC:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI LETTER KA");
				break;
			case 0xA8ED:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI LETTER NA");
				break;
			case 0xA8EE:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI LETTER PA");
				break;
			case 0xA8EF:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI LETTER RA");
				break;
			case 0xA8F0:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI LETTER VI");
				break;
			case 0xA8F1:
				strcpy_s(buf, buf_size, "COMBINING DEVANAGARI SIGN AVAGRAHA");
				break;
			case 0xA8F2:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN SPACING CANDRABINDU");
				break;
			case 0xA8F3:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN CANDRABINDU VIRAMA");
				break;
			case 0xA8F4:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN DOUBLE CANDRABINDU VIRAMA");
				break;
			case 0xA8F5:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN CANDRABINDU TWO");
				break;
			case 0xA8F6:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN CANDRABINDU THREE");
				break;
			case 0xA8F7:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN CANDRABINDU AVAGRAHA");
				break;
			case 0xA8F8:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN PUSHPIKA");
				break;
			case 0xA8F9:
				strcpy_s(buf, buf_size, "DEVANAGARI GAP FILLER");
				break;
			case 0xA8FA:
				strcpy_s(buf, buf_size, "DEVANAGARI CARET");
				break;
			case 0xA8FB:
				strcpy_s(buf, buf_size, "DEVANAGARI HEADSTROKE");
				break;
			case 0xA8FC:
				strcpy_s(buf, buf_size, "DEVANAGARI SIGN SIDDHAM");
				break;
			case 0xA8FD:
				strcpy_s(buf, buf_size, "DEVANAGARI JAIN OM");
				break;
			case 0xA8FE:
				strcpy_s(buf, buf_size, "DEVANAGARI LETTER AY");
				break;
			case 0xA8FF:
				strcpy_s(buf, buf_size, "DEVANAGARI VOWEL SIGN AY");
				break;
			case 0xA900:
				strcpy_s(buf, buf_size, "KAYAH LI DIGIT ZERO");
				break;
			case 0xA901:
				strcpy_s(buf, buf_size, "KAYAH LI DIGIT ONE");
				break;
			case 0xA902:
				strcpy_s(buf, buf_size, "KAYAH LI DIGIT TWO");
				break;
			case 0xA903:
				strcpy_s(buf, buf_size, "KAYAH LI DIGIT THREE");
				break;
			case 0xA904:
				strcpy_s(buf, buf_size, "KAYAH LI DIGIT FOUR");
				break;
			case 0xA905:
				strcpy_s(buf, buf_size, "KAYAH LI DIGIT FIVE");
				break;
			case 0xA906:
				strcpy_s(buf, buf_size, "KAYAH LI DIGIT SIX");
				break;
			case 0xA907:
				strcpy_s(buf, buf_size, "KAYAH LI DIGIT SEVEN");
				break;
			case 0xA908:
				strcpy_s(buf, buf_size, "KAYAH LI DIGIT EIGHT");
				break;
			case 0xA909:
				strcpy_s(buf, buf_size, "KAYAH LI DIGIT NINE");
				break;
			case 0xA90A:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER KA");
				break;
			case 0xA90B:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER KHA");
				break;
			case 0xA90C:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER GA");
				break;
			case 0xA90D:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER NGA");
				break;
			case 0xA90E:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER SA");
				break;
			case 0xA90F:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER SHA");
				break;
			case 0xA910:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER ZA");
				break;
			case 0xA911:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER NYA");
				break;
			case 0xA912:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER TA");
				break;
			case 0xA913:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER HTA");
				break;
			case 0xA914:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER NA");
				break;
			case 0xA915:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER PA");
				break;
			case 0xA916:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER PHA");
				break;
			case 0xA917:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER MA");
				break;
			case 0xA918:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER DA");
				break;
			case 0xA919:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER BA");
				break;
			case 0xA91A:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER RA");
				break;
			case 0xA91B:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER YA");
				break;
			case 0xA91C:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER LA");
				break;
			case 0xA91D:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER WA");
				break;
			case 0xA91E:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER THA");
				break;
			case 0xA91F:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER HA");
				break;
			case 0xA920:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER VA");
				break;
			case 0xA921:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER CA");
				break;
			case 0xA922:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER A");
				break;
			case 0xA923:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER OE");
				break;
			case 0xA924:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER I");
				break;
			case 0xA925:
				strcpy_s(buf, buf_size, "KAYAH LI LETTER OO");
				break;
			case 0xA926:
				strcpy_s(buf, buf_size, "KAYAH LI VOWEL UE");
				break;
			case 0xA927:
				strcpy_s(buf, buf_size, "KAYAH LI VOWEL E");
				break;
			case 0xA928:
				strcpy_s(buf, buf_size, "KAYAH LI VOWEL U");
				break;
			case 0xA929:
				strcpy_s(buf, buf_size, "KAYAH LI VOWEL EE");
				break;
			case 0xA92A:
				strcpy_s(buf, buf_size, "KAYAH LI VOWEL O");
				break;
			case 0xA92B:
				strcpy_s(buf, buf_size, "KAYAH LI TONE PLOPHU");
				break;
			case 0xA92C:
				strcpy_s(buf, buf_size, "KAYAH LI TONE CALYA");
				break;
			case 0xA92D:
				strcpy_s(buf, buf_size, "KAYAH LI TONE CALYA PLOPHU");
				break;
			case 0xA92E:
				strcpy_s(buf, buf_size, "KAYAH LI SIGN CWI");
				break;
			case 0xA92F:
				strcpy_s(buf, buf_size, "KAYAH LI SIGN SHYA");
				break;
			case 0xA930:
				strcpy_s(buf, buf_size, "REJANG LETTER KA");
				break;
			case 0xA931:
				strcpy_s(buf, buf_size, "REJANG LETTER GA");
				break;
			case 0xA932:
				strcpy_s(buf, buf_size, "REJANG LETTER NGA");
				break;
			case 0xA933:
				strcpy_s(buf, buf_size, "REJANG LETTER TA");
				break;
			case 0xA934:
				strcpy_s(buf, buf_size, "REJANG LETTER DA");
				break;
			case 0xA935:
				strcpy_s(buf, buf_size, "REJANG LETTER NA");
				break;
			case 0xA936:
				strcpy_s(buf, buf_size, "REJANG LETTER PA");
				break;
			case 0xA937:
				strcpy_s(buf, buf_size, "REJANG LETTER BA");
				break;
			case 0xA938:
				strcpy_s(buf, buf_size, "REJANG LETTER MA");
				break;
			case 0xA939:
				strcpy_s(buf, buf_size, "REJANG LETTER CA");
				break;
			case 0xA93A:
				strcpy_s(buf, buf_size, "REJANG LETTER JA");
				break;
			case 0xA93B:
				strcpy_s(buf, buf_size, "REJANG LETTER NYA");
				break;
			case 0xA93C:
				strcpy_s(buf, buf_size, "REJANG LETTER SA");
				break;
			case 0xA93D:
				strcpy_s(buf, buf_size, "REJANG LETTER RA");
				break;
			case 0xA93E:
				strcpy_s(buf, buf_size, "REJANG LETTER LA");
				break;
			case 0xA93F:
				strcpy_s(buf, buf_size, "REJANG LETTER YA");
				break;
			case 0xA940:
				strcpy_s(buf, buf_size, "REJANG LETTER WA");
				break;
			case 0xA941:
				strcpy_s(buf, buf_size, "REJANG LETTER HA");
				break;
			case 0xA942:
				strcpy_s(buf, buf_size, "REJANG LETTER MBA");
				break;
			case 0xA943:
				strcpy_s(buf, buf_size, "REJANG LETTER NGGA");
				break;
			case 0xA944:
				strcpy_s(buf, buf_size, "REJANG LETTER NDA");
				break;
			case 0xA945:
				strcpy_s(buf, buf_size, "REJANG LETTER NYJA");
				break;
			case 0xA946:
				strcpy_s(buf, buf_size, "REJANG LETTER A");
				break;
			case 0xA947:
				strcpy_s(buf, buf_size, "REJANG VOWEL SIGN I");
				break;
			case 0xA948:
				strcpy_s(buf, buf_size, "REJANG VOWEL SIGN U");
				break;
			case 0xA949:
				strcpy_s(buf, buf_size, "REJANG VOWEL SIGN E");
				break;
			case 0xA94A:
				strcpy_s(buf, buf_size, "REJANG VOWEL SIGN AI");
				break;
			case 0xA94B:
				strcpy_s(buf, buf_size, "REJANG VOWEL SIGN O");
				break;
			case 0xA94C:
				strcpy_s(buf, buf_size, "REJANG VOWEL SIGN AU");
				break;
			case 0xA94D:
				strcpy_s(buf, buf_size, "REJANG VOWEL SIGN EU");
				break;
			case 0xA94E:
				strcpy_s(buf, buf_size, "REJANG VOWEL SIGN EA");
				break;
			case 0xA94F:
				strcpy_s(buf, buf_size, "REJANG CONSONANT SIGN NG");
				break;
			case 0xA950:
				strcpy_s(buf, buf_size, "REJANG CONSONANT SIGN N");
				break;
			case 0xA951:
				strcpy_s(buf, buf_size, "REJANG CONSONANT SIGN R");
				break;
			case 0xA952:
				strcpy_s(buf, buf_size, "REJANG CONSONANT SIGN H");
				break;
			case 0xA953:
				strcpy_s(buf, buf_size, "REJANG VIRAMA");
				break;
			case 0xA95F:
				strcpy_s(buf, buf_size, "REJANG SECTION MARK");
				break;
			case 0xA960:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG TIKEUT-MIEUM");
				break;
			case 0xA961:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG TIKEUT-PIEUP");
				break;
			case 0xA962:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG TIKEUT-SIOS");
				break;
			case 0xA963:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG TIKEUT-CIEUC");
				break;
			case 0xA964:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-KIYEOK");
				break;
			case 0xA965:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-SSANGKIYEOK");
				break;
			case 0xA966:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-TIKEUT");
				break;
			case 0xA967:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-SSANGTIKEUT");
				break;
			case 0xA968:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-MIEUM");
				break;
			case 0xA969:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-PIEUP");
				break;
			case 0xA96A:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-SSANGPIEUP");
				break;
			case 0xA96B:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-KAPYEOUNPIEUP");
				break;
			case 0xA96C:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-SIOS");
				break;
			case 0xA96D:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-CIEUC");
				break;
			case 0xA96E:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG RIEUL-KHIEUKH");
				break;
			case 0xA96F:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG MIEUM-KIYEOK");
				break;
			case 0xA970:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG MIEUM-TIKEUT");
				break;
			case 0xA971:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG MIEUM-SIOS");
				break;
			case 0xA972:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-SIOS-THIEUTH");
				break;
			case 0xA973:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-KHIEUKH");
				break;
			case 0xA974:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PIEUP-HIEUH");
				break;
			case 0xA975:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGSIOS-PIEUP");
				break;
			case 0xA976:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-RIEUL");
				break;
			case 0xA977:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG IEUNG-HIEUH");
				break;
			case 0xA978:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGCIEUC-HIEUH");
				break;
			case 0xA979:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGTHIEUTH");
				break;
			case 0xA97A:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG PHIEUPH-HIEUH");
				break;
			case 0xA97B:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG HIEUH-SIOS");
				break;
			case 0xA97C:
				strcpy_s(buf, buf_size, "HANGUL CHOSEONG SSANGYEORINHIEUH");
				break;
			case 0xA980:
				strcpy_s(buf, buf_size, "JAVANESE SIGN PANYANGGA");
				break;
			case 0xA981:
				strcpy_s(buf, buf_size, "JAVANESE SIGN CECAK");
				break;
			case 0xA982:
				strcpy_s(buf, buf_size, "JAVANESE SIGN LAYAR");
				break;
			case 0xA983:
				strcpy_s(buf, buf_size, "JAVANESE SIGN WIGNYAN");
				break;
			case 0xA984:
				strcpy_s(buf, buf_size, "JAVANESE LETTER A");
				break;
			case 0xA985:
				strcpy_s(buf, buf_size, "JAVANESE LETTER I KAWI");
				break;
			case 0xA986:
				strcpy_s(buf, buf_size, "JAVANESE LETTER I");
				break;
			case 0xA987:
				strcpy_s(buf, buf_size, "JAVANESE LETTER II");
				break;
			case 0xA988:
				strcpy_s(buf, buf_size, "JAVANESE LETTER U");
				break;
			case 0xA989:
				strcpy_s(buf, buf_size, "JAVANESE LETTER PA CEREK");
				break;
			case 0xA98A:
				strcpy_s(buf, buf_size, "JAVANESE LETTER NGA LELET");
				break;
			case 0xA98B:
				strcpy_s(buf, buf_size, "JAVANESE LETTER NGA LELET RASWADI");
				break;
			case 0xA98C:
				strcpy_s(buf, buf_size, "JAVANESE LETTER E");
				break;
			case 0xA98D:
				strcpy_s(buf, buf_size, "JAVANESE LETTER AI");
				break;
			case 0xA98E:
				strcpy_s(buf, buf_size, "JAVANESE LETTER O");
				break;
			case 0xA98F:
				strcpy_s(buf, buf_size, "JAVANESE LETTER KA");
				break;
			case 0xA990:
				strcpy_s(buf, buf_size, "JAVANESE LETTER KA SASAK");
				break;
			case 0xA991:
				strcpy_s(buf, buf_size, "JAVANESE LETTER KA MURDA");
				break;
			case 0xA992:
				strcpy_s(buf, buf_size, "JAVANESE LETTER GA");
				break;
			case 0xA993:
				strcpy_s(buf, buf_size, "JAVANESE LETTER GA MURDA");
				break;
			case 0xA994:
				strcpy_s(buf, buf_size, "JAVANESE LETTER NGA");
				break;
			case 0xA995:
				strcpy_s(buf, buf_size, "JAVANESE LETTER CA");
				break;
			case 0xA996:
				strcpy_s(buf, buf_size, "JAVANESE LETTER CA MURDA");
				break;
			case 0xA997:
				strcpy_s(buf, buf_size, "JAVANESE LETTER JA");
				break;
			case 0xA998:
				strcpy_s(buf, buf_size, "JAVANESE LETTER NYA MURDA");
				break;
			case 0xA999:
				strcpy_s(buf, buf_size, "JAVANESE LETTER JA MAHAPRANA");
				break;
			case 0xA99A:
				strcpy_s(buf, buf_size, "JAVANESE LETTER NYA");
				break;
			case 0xA99B:
				strcpy_s(buf, buf_size, "JAVANESE LETTER TTA");
				break;
			case 0xA99C:
				strcpy_s(buf, buf_size, "JAVANESE LETTER TTA MAHAPRANA");
				break;
			case 0xA99D:
				strcpy_s(buf, buf_size, "JAVANESE LETTER DDA");
				break;
			case 0xA99E:
				strcpy_s(buf, buf_size, "JAVANESE LETTER DDA MAHAPRANA");
				break;
			case 0xA99F:
				strcpy_s(buf, buf_size, "JAVANESE LETTER NA MURDA");
				break;
			case 0xA9A0:
				strcpy_s(buf, buf_size, "JAVANESE LETTER TA");
				break;
			case 0xA9A1:
				strcpy_s(buf, buf_size, "JAVANESE LETTER TA MURDA");
				break;
			case 0xA9A2:
				strcpy_s(buf, buf_size, "JAVANESE LETTER DA");
				break;
			case 0xA9A3:
				strcpy_s(buf, buf_size, "JAVANESE LETTER DA MAHAPRANA");
				break;
			case 0xA9A4:
				strcpy_s(buf, buf_size, "JAVANESE LETTER NA");
				break;
			case 0xA9A5:
				strcpy_s(buf, buf_size, "JAVANESE LETTER PA");
				break;
			case 0xA9A6:
				strcpy_s(buf, buf_size, "JAVANESE LETTER PA MURDA");
				break;
			case 0xA9A7:
				strcpy_s(buf, buf_size, "JAVANESE LETTER BA");
				break;
			case 0xA9A8:
				strcpy_s(buf, buf_size, "JAVANESE LETTER BA MURDA");
				break;
			case 0xA9A9:
				strcpy_s(buf, buf_size, "JAVANESE LETTER MA");
				break;
			case 0xA9AA:
				strcpy_s(buf, buf_size, "JAVANESE LETTER YA");
				break;
			case 0xA9AB:
				strcpy_s(buf, buf_size, "JAVANESE LETTER RA");
				break;
			case 0xA9AC:
				strcpy_s(buf, buf_size, "JAVANESE LETTER RA AGUNG");
				break;
			case 0xA9AD:
				strcpy_s(buf, buf_size, "JAVANESE LETTER LA");
				break;
			case 0xA9AE:
				strcpy_s(buf, buf_size, "JAVANESE LETTER WA");
				break;
			case 0xA9AF:
				strcpy_s(buf, buf_size, "JAVANESE LETTER SA MURDA");
				break;
			case 0xA9B0:
				strcpy_s(buf, buf_size, "JAVANESE LETTER SA MAHAPRANA");
				break;
			case 0xA9B1:
				strcpy_s(buf, buf_size, "JAVANESE LETTER SA");
				break;
			case 0xA9B2:
				strcpy_s(buf, buf_size, "JAVANESE LETTER HA");
				break;
			case 0xA9B3:
				strcpy_s(buf, buf_size, "JAVANESE SIGN CECAK TELU");
				break;
			case 0xA9B4:
				strcpy_s(buf, buf_size, "JAVANESE VOWEL SIGN TARUNG");
				break;
			case 0xA9B5:
				strcpy_s(buf, buf_size, "JAVANESE VOWEL SIGN TOLONG");
				break;
			case 0xA9B6:
				strcpy_s(buf, buf_size, "JAVANESE VOWEL SIGN WULU");
				break;
			case 0xA9B7:
				strcpy_s(buf, buf_size, "JAVANESE VOWEL SIGN WULU MELIK");
				break;
			case 0xA9B8:
				strcpy_s(buf, buf_size, "JAVANESE VOWEL SIGN SUKU");
				break;
			case 0xA9B9:
				strcpy_s(buf, buf_size, "JAVANESE VOWEL SIGN SUKU MENDUT");
				break;
			case 0xA9BA:
				strcpy_s(buf, buf_size, "JAVANESE VOWEL SIGN TALING");
				break;
			case 0xA9BB:
				strcpy_s(buf, buf_size, "JAVANESE VOWEL SIGN DIRGA MURE");
				break;
			case 0xA9BC:
				strcpy_s(buf, buf_size, "JAVANESE VOWEL SIGN PEPET");
				break;
			case 0xA9BD:
				strcpy_s(buf, buf_size, "JAVANESE CONSONANT SIGN KERET");
				break;
			case 0xA9BE:
				strcpy_s(buf, buf_size, "JAVANESE CONSONANT SIGN PENGKAL");
				break;
			case 0xA9BF:
				strcpy_s(buf, buf_size, "JAVANESE CONSONANT SIGN CAKRA");
				break;
			case 0xA9C0:
				strcpy_s(buf, buf_size, "JAVANESE PANGKON");
				break;
			case 0xA9C1:
				strcpy_s(buf, buf_size, "JAVANESE LEFT RERENGGAN");
				break;
			case 0xA9C2:
				strcpy_s(buf, buf_size, "JAVANESE RIGHT RERENGGAN");
				break;
			case 0xA9C3:
				strcpy_s(buf, buf_size, "JAVANESE PADA ANDAP");
				break;
			case 0xA9C4:
				strcpy_s(buf, buf_size, "JAVANESE PADA MADYA");
				break;
			case 0xA9C5:
				strcpy_s(buf, buf_size, "JAVANESE PADA LUHUR");
				break;
			case 0xA9C6:
				strcpy_s(buf, buf_size, "JAVANESE PADA WINDU");
				break;
			case 0xA9C7:
				strcpy_s(buf, buf_size, "JAVANESE PADA PANGKAT");
				break;
			case 0xA9C8:
				strcpy_s(buf, buf_size, "JAVANESE PADA LINGSA");
				break;
			case 0xA9C9:
				strcpy_s(buf, buf_size, "JAVANESE PADA LUNGSI");
				break;
			case 0xA9CA:
				strcpy_s(buf, buf_size, "JAVANESE PADA ADEG");
				break;
			case 0xA9CB:
				strcpy_s(buf, buf_size, "JAVANESE PADA ADEG ADEG");
				break;
			case 0xA9CC:
				strcpy_s(buf, buf_size, "JAVANESE PADA PISELEH");
				break;
			case 0xA9CD:
				strcpy_s(buf, buf_size, "JAVANESE TURNED PADA PISELEH");
				break;
			case 0xA9CF:
				strcpy_s(buf, buf_size, "JAVANESE PANGRANGKEP");
				break;
			case 0xA9D0:
				strcpy_s(buf, buf_size, "JAVANESE DIGIT ZERO");
				break;
			case 0xA9D1:
				strcpy_s(buf, buf_size, "JAVANESE DIGIT ONE");
				break;
			case 0xA9D2:
				strcpy_s(buf, buf_size, "JAVANESE DIGIT TWO");
				break;
			case 0xA9D3:
				strcpy_s(buf, buf_size, "JAVANESE DIGIT THREE");
				break;
			case 0xA9D4:
				strcpy_s(buf, buf_size, "JAVANESE DIGIT FOUR");
				break;
			case 0xA9D5:
				strcpy_s(buf, buf_size, "JAVANESE DIGIT FIVE");
				break;
			case 0xA9D6:
				strcpy_s(buf, buf_size, "JAVANESE DIGIT SIX");
				break;
			case 0xA9D7:
				strcpy_s(buf, buf_size, "JAVANESE DIGIT SEVEN");
				break;
			case 0xA9D8:
				strcpy_s(buf, buf_size, "JAVANESE DIGIT EIGHT");
				break;
			case 0xA9D9:
				strcpy_s(buf, buf_size, "JAVANESE DIGIT NINE");
				break;
			case 0xA9DE:
				strcpy_s(buf, buf_size, "JAVANESE PADA TIRTA TUMETES");
				break;
			case 0xA9DF:
				strcpy_s(buf, buf_size, "JAVANESE PADA ISEN-ISEN");
				break;
			case 0xA9E0:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN GHA");
				break;
			case 0xA9E1:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN CHA");
				break;
			case 0xA9E2:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN JHA");
				break;
			case 0xA9E3:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN NNA");
				break;
			case 0xA9E4:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHAN BHA");
				break;
			case 0xA9E5:
				strcpy_s(buf, buf_size, "MYANMAR SIGN SHAN SAW");
				break;
			case 0xA9E6:
				strcpy_s(buf, buf_size, "MYANMAR MODIFIER LETTER SHAN REDUPLICATION");
				break;
			case 0xA9E7:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING NYA");
				break;
			case 0xA9E8:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING FA");
				break;
			case 0xA9E9:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING GA");
				break;
			case 0xA9EA:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING GHA");
				break;
			case 0xA9EB:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING JA");
				break;
			case 0xA9EC:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING JHA");
				break;
			case 0xA9ED:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING DDA");
				break;
			case 0xA9EE:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING DDHA");
				break;
			case 0xA9EF:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING NNA");
				break;
			case 0xA9F0:
				strcpy_s(buf, buf_size, "MYANMAR TAI LAING DIGIT ZERO");
				break;
			case 0xA9F1:
				strcpy_s(buf, buf_size, "MYANMAR TAI LAING DIGIT ONE");
				break;
			case 0xA9F2:
				strcpy_s(buf, buf_size, "MYANMAR TAI LAING DIGIT TWO");
				break;
			case 0xA9F3:
				strcpy_s(buf, buf_size, "MYANMAR TAI LAING DIGIT THREE");
				break;
			case 0xA9F4:
				strcpy_s(buf, buf_size, "MYANMAR TAI LAING DIGIT FOUR");
				break;
			case 0xA9F5:
				strcpy_s(buf, buf_size, "MYANMAR TAI LAING DIGIT FIVE");
				break;
			case 0xA9F6:
				strcpy_s(buf, buf_size, "MYANMAR TAI LAING DIGIT SIX");
				break;
			case 0xA9F7:
				strcpy_s(buf, buf_size, "MYANMAR TAI LAING DIGIT SEVEN");
				break;
			case 0xA9F8:
				strcpy_s(buf, buf_size, "MYANMAR TAI LAING DIGIT EIGHT");
				break;
			case 0xA9F9:
				strcpy_s(buf, buf_size, "MYANMAR TAI LAING DIGIT NINE");
				break;
			case 0xA9FA:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING LLA");
				break;
			case 0xA9FB:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING DA");
				break;
			case 0xA9FC:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING DHA");
				break;
			case 0xA9FD:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING BA");
				break;
			case 0xA9FE:
				strcpy_s(buf, buf_size, "MYANMAR LETTER TAI LAING BHA");
				break;
			case 0xAA00:
				strcpy_s(buf, buf_size, "CHAM LETTER A");
				break;
			case 0xAA01:
				strcpy_s(buf, buf_size, "CHAM LETTER I");
				break;
			case 0xAA02:
				strcpy_s(buf, buf_size, "CHAM LETTER U");
				break;
			case 0xAA03:
				strcpy_s(buf, buf_size, "CHAM LETTER E");
				break;
			case 0xAA04:
				strcpy_s(buf, buf_size, "CHAM LETTER AI");
				break;
			case 0xAA05:
				strcpy_s(buf, buf_size, "CHAM LETTER O");
				break;
			case 0xAA06:
				strcpy_s(buf, buf_size, "CHAM LETTER KA");
				break;
			case 0xAA07:
				strcpy_s(buf, buf_size, "CHAM LETTER KHA");
				break;
			case 0xAA08:
				strcpy_s(buf, buf_size, "CHAM LETTER GA");
				break;
			case 0xAA09:
				strcpy_s(buf, buf_size, "CHAM LETTER GHA");
				break;
			case 0xAA0A:
				strcpy_s(buf, buf_size, "CHAM LETTER NGUE");
				break;
			case 0xAA0B:
				strcpy_s(buf, buf_size, "CHAM LETTER NGA");
				break;
			case 0xAA0C:
				strcpy_s(buf, buf_size, "CHAM LETTER CHA");
				break;
			case 0xAA0D:
				strcpy_s(buf, buf_size, "CHAM LETTER CHHA");
				break;
			case 0xAA0E:
				strcpy_s(buf, buf_size, "CHAM LETTER JA");
				break;
			case 0xAA0F:
				strcpy_s(buf, buf_size, "CHAM LETTER JHA");
				break;
			case 0xAA10:
				strcpy_s(buf, buf_size, "CHAM LETTER NHUE");
				break;
			case 0xAA11:
				strcpy_s(buf, buf_size, "CHAM LETTER NHA");
				break;
			case 0xAA12:
				strcpy_s(buf, buf_size, "CHAM LETTER NHJA");
				break;
			case 0xAA13:
				strcpy_s(buf, buf_size, "CHAM LETTER TA");
				break;
			case 0xAA14:
				strcpy_s(buf, buf_size, "CHAM LETTER THA");
				break;
			case 0xAA15:
				strcpy_s(buf, buf_size, "CHAM LETTER DA");
				break;
			case 0xAA16:
				strcpy_s(buf, buf_size, "CHAM LETTER DHA");
				break;
			case 0xAA17:
				strcpy_s(buf, buf_size, "CHAM LETTER NUE");
				break;
			case 0xAA18:
				strcpy_s(buf, buf_size, "CHAM LETTER NA");
				break;
			case 0xAA19:
				strcpy_s(buf, buf_size, "CHAM LETTER DDA");
				break;
			case 0xAA1A:
				strcpy_s(buf, buf_size, "CHAM LETTER PA");
				break;
			case 0xAA1B:
				strcpy_s(buf, buf_size, "CHAM LETTER PPA");
				break;
			case 0xAA1C:
				strcpy_s(buf, buf_size, "CHAM LETTER PHA");
				break;
			case 0xAA1D:
				strcpy_s(buf, buf_size, "CHAM LETTER BA");
				break;
			case 0xAA1E:
				strcpy_s(buf, buf_size, "CHAM LETTER BHA");
				break;
			case 0xAA1F:
				strcpy_s(buf, buf_size, "CHAM LETTER MUE");
				break;
			case 0xAA20:
				strcpy_s(buf, buf_size, "CHAM LETTER MA");
				break;
			case 0xAA21:
				strcpy_s(buf, buf_size, "CHAM LETTER BBA");
				break;
			case 0xAA22:
				strcpy_s(buf, buf_size, "CHAM LETTER YA");
				break;
			case 0xAA23:
				strcpy_s(buf, buf_size, "CHAM LETTER RA");
				break;
			case 0xAA24:
				strcpy_s(buf, buf_size, "CHAM LETTER LA");
				break;
			case 0xAA25:
				strcpy_s(buf, buf_size, "CHAM LETTER VA");
				break;
			case 0xAA26:
				strcpy_s(buf, buf_size, "CHAM LETTER SSA");
				break;
			case 0xAA27:
				strcpy_s(buf, buf_size, "CHAM LETTER SA");
				break;
			case 0xAA28:
				strcpy_s(buf, buf_size, "CHAM LETTER HA");
				break;
			case 0xAA29:
				strcpy_s(buf, buf_size, "CHAM VOWEL SIGN AA");
				break;
			case 0xAA2A:
				strcpy_s(buf, buf_size, "CHAM VOWEL SIGN I");
				break;
			case 0xAA2B:
				strcpy_s(buf, buf_size, "CHAM VOWEL SIGN II");
				break;
			case 0xAA2C:
				strcpy_s(buf, buf_size, "CHAM VOWEL SIGN EI");
				break;
			case 0xAA2D:
				strcpy_s(buf, buf_size, "CHAM VOWEL SIGN U");
				break;
			case 0xAA2E:
				strcpy_s(buf, buf_size, "CHAM VOWEL SIGN OE");
				break;
			case 0xAA2F:
				strcpy_s(buf, buf_size, "CHAM VOWEL SIGN O");
				break;
			case 0xAA30:
				strcpy_s(buf, buf_size, "CHAM VOWEL SIGN AI");
				break;
			case 0xAA31:
				strcpy_s(buf, buf_size, "CHAM VOWEL SIGN AU");
				break;
			case 0xAA32:
				strcpy_s(buf, buf_size, "CHAM VOWEL SIGN UE");
				break;
			case 0xAA33:
				strcpy_s(buf, buf_size, "CHAM CONSONANT SIGN YA");
				break;
			case 0xAA34:
				strcpy_s(buf, buf_size, "CHAM CONSONANT SIGN RA");
				break;
			case 0xAA35:
				strcpy_s(buf, buf_size, "CHAM CONSONANT SIGN LA");
				break;
			case 0xAA36:
				strcpy_s(buf, buf_size, "CHAM CONSONANT SIGN WA");
				break;
			case 0xAA40:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL K");
				break;
			case 0xAA41:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL G");
				break;
			case 0xAA42:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL NG");
				break;
			case 0xAA43:
				strcpy_s(buf, buf_size, "CHAM CONSONANT SIGN FINAL NG");
				break;
			case 0xAA44:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL CH");
				break;
			case 0xAA45:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL T");
				break;
			case 0xAA46:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL N");
				break;
			case 0xAA47:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL P");
				break;
			case 0xAA48:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL Y");
				break;
			case 0xAA49:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL R");
				break;
			case 0xAA4A:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL L");
				break;
			case 0xAA4B:
				strcpy_s(buf, buf_size, "CHAM LETTER FINAL SS");
				break;
			case 0xAA4C:
				strcpy_s(buf, buf_size, "CHAM CONSONANT SIGN FINAL M");
				break;
			case 0xAA4D:
				strcpy_s(buf, buf_size, "CHAM CONSONANT SIGN FINAL H");
				break;
			case 0xAA50:
				strcpy_s(buf, buf_size, "CHAM DIGIT ZERO");
				break;
			case 0xAA51:
				strcpy_s(buf, buf_size, "CHAM DIGIT ONE");
				break;
			case 0xAA52:
				strcpy_s(buf, buf_size, "CHAM DIGIT TWO");
				break;
			case 0xAA53:
				strcpy_s(buf, buf_size, "CHAM DIGIT THREE");
				break;
			case 0xAA54:
				strcpy_s(buf, buf_size, "CHAM DIGIT FOUR");
				break;
			case 0xAA55:
				strcpy_s(buf, buf_size, "CHAM DIGIT FIVE");
				break;
			case 0xAA56:
				strcpy_s(buf, buf_size, "CHAM DIGIT SIX");
				break;
			case 0xAA57:
				strcpy_s(buf, buf_size, "CHAM DIGIT SEVEN");
				break;
			case 0xAA58:
				strcpy_s(buf, buf_size, "CHAM DIGIT EIGHT");
				break;
			case 0xAA59:
				strcpy_s(buf, buf_size, "CHAM DIGIT NINE");
				break;
			case 0xAA5C:
				strcpy_s(buf, buf_size, "CHAM PUNCTUATION SPIRAL");
				break;
			case 0xAA5D:
				strcpy_s(buf, buf_size, "CHAM PUNCTUATION DANDA");
				break;
			case 0xAA5E:
				strcpy_s(buf, buf_size, "CHAM PUNCTUATION DOUBLE DANDA");
				break;
			case 0xAA5F:
				strcpy_s(buf, buf_size, "CHAM PUNCTUATION TRIPLE DANDA");
				break;
			case 0xAA60:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI GA");
				break;
			case 0xAA61:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI CA");
				break;
			case 0xAA62:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI CHA");
				break;
			case 0xAA63:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI JA");
				break;
			case 0xAA64:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI JHA");
				break;
			case 0xAA65:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI NYA");
				break;
			case 0xAA66:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI TTA");
				break;
			case 0xAA67:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI TTHA");
				break;
			case 0xAA68:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI DDA");
				break;
			case 0xAA69:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI DDHA");
				break;
			case 0xAA6A:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI DHA");
				break;
			case 0xAA6B:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI NA");
				break;
			case 0xAA6C:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI SA");
				break;
			case 0xAA6D:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI HA");
				break;
			case 0xAA6E:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI HHA");
				break;
			case 0xAA6F:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI FA");
				break;
			case 0xAA70:
				strcpy_s(buf, buf_size, "MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION");
				break;
			case 0xAA71:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI XA");
				break;
			case 0xAA72:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI ZA");
				break;
			case 0xAA73:
				strcpy_s(buf, buf_size, "MYANMAR LETTER KHAMTI RA");
				break;
			case 0xAA74:
				strcpy_s(buf, buf_size, "MYANMAR LOGOGRAM KHAMTI OAY");
				break;
			case 0xAA75:
				strcpy_s(buf, buf_size, "MYANMAR LOGOGRAM KHAMTI QN");
				break;
			case 0xAA76:
				strcpy_s(buf, buf_size, "MYANMAR LOGOGRAM KHAMTI HM");
				break;
			case 0xAA77:
				strcpy_s(buf, buf_size, "MYANMAR SYMBOL AITON EXCLAMATION");
				break;
			case 0xAA78:
				strcpy_s(buf, buf_size, "MYANMAR SYMBOL AITON ONE");
				break;
			case 0xAA79:
				strcpy_s(buf, buf_size, "MYANMAR SYMBOL AITON TWO");
				break;
			case 0xAA7A:
				strcpy_s(buf, buf_size, "MYANMAR LETTER AITON RA");
				break;
			case 0xAA7B:
				strcpy_s(buf, buf_size, "MYANMAR SIGN PAO KAREN TONE");
				break;
			case 0xAA7C:
				strcpy_s(buf, buf_size, "MYANMAR SIGN TAI LAING TONE-2");
				break;
			case 0xAA7D:
				strcpy_s(buf, buf_size, "MYANMAR SIGN TAI LAING TONE-5");
				break;
			case 0xAA7E:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHWE PALAUNG CHA");
				break;
			case 0xAA7F:
				strcpy_s(buf, buf_size, "MYANMAR LETTER SHWE PALAUNG SHA");
				break;
			case 0xAA80:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW KO");
				break;
			case 0xAA81:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH KO");
				break;
			case 0xAA82:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW KHO");
				break;
			case 0xAA83:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH KHO");
				break;
			case 0xAA84:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW KHHO");
				break;
			case 0xAA85:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH KHHO");
				break;
			case 0xAA86:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW GO");
				break;
			case 0xAA87:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH GO");
				break;
			case 0xAA88:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW NGO");
				break;
			case 0xAA89:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH NGO");
				break;
			case 0xAA8A:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW CO");
				break;
			case 0xAA8B:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH CO");
				break;
			case 0xAA8C:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW CHO");
				break;
			case 0xAA8D:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH CHO");
				break;
			case 0xAA8E:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW SO");
				break;
			case 0xAA8F:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH SO");
				break;
			case 0xAA90:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW NYO");
				break;
			case 0xAA91:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH NYO");
				break;
			case 0xAA92:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW DO");
				break;
			case 0xAA93:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH DO");
				break;
			case 0xAA94:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW TO");
				break;
			case 0xAA95:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH TO");
				break;
			case 0xAA96:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW THO");
				break;
			case 0xAA97:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH THO");
				break;
			case 0xAA98:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW NO");
				break;
			case 0xAA99:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH NO");
				break;
			case 0xAA9A:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW BO");
				break;
			case 0xAA9B:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH BO");
				break;
			case 0xAA9C:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW PO");
				break;
			case 0xAA9D:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH PO");
				break;
			case 0xAA9E:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW PHO");
				break;
			case 0xAA9F:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH PHO");
				break;
			case 0xAAA0:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW FO");
				break;
			case 0xAAA1:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH FO");
				break;
			case 0xAAA2:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW MO");
				break;
			case 0xAAA3:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH MO");
				break;
			case 0xAAA4:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW YO");
				break;
			case 0xAAA5:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH YO");
				break;
			case 0xAAA6:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW RO");
				break;
			case 0xAAA7:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH RO");
				break;
			case 0xAAA8:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW LO");
				break;
			case 0xAAA9:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH LO");
				break;
			case 0xAAAA:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW VO");
				break;
			case 0xAAAB:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH VO");
				break;
			case 0xAAAC:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW HO");
				break;
			case 0xAAAD:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH HO");
				break;
			case 0xAAAE:
				strcpy_s(buf, buf_size, "TAI VIET LETTER LOW O");
				break;
			case 0xAAAF:
				strcpy_s(buf, buf_size, "TAI VIET LETTER HIGH O");
				break;
			case 0xAAB0:
				strcpy_s(buf, buf_size, "TAI VIET MAI KANG");
				break;
			case 0xAAB1:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL AA");
				break;
			case 0xAAB2:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL I");
				break;
			case 0xAAB3:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL UE");
				break;
			case 0xAAB4:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL U");
				break;
			case 0xAAB5:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL E");
				break;
			case 0xAAB6:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL O");
				break;
			case 0xAAB7:
				strcpy_s(buf, buf_size, "TAI VIET MAI KHIT");
				break;
			case 0xAAB8:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL IA");
				break;
			case 0xAAB9:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL UEA");
				break;
			case 0xAABA:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL UA");
				break;
			case 0xAABB:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL AUE");
				break;
			case 0xAABC:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL AY");
				break;
			case 0xAABD:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL AN");
				break;
			case 0xAABE:
				strcpy_s(buf, buf_size, "TAI VIET VOWEL AM");
				break;
			case 0xAABF:
				strcpy_s(buf, buf_size, "TAI VIET TONE MAI EK");
				break;
			case 0xAAC0:
				strcpy_s(buf, buf_size, "TAI VIET TONE MAI NUENG");
				break;
			case 0xAAC1:
				strcpy_s(buf, buf_size, "TAI VIET TONE MAI THO");
				break;
			case 0xAAC2:
				strcpy_s(buf, buf_size, "TAI VIET TONE MAI SONG");
				break;
			case 0xAADB:
				strcpy_s(buf, buf_size, "TAI VIET SYMBOL KON");
				break;
			case 0xAADC:
				strcpy_s(buf, buf_size, "TAI VIET SYMBOL NUENG");
				break;
			case 0xAADD:
				strcpy_s(buf, buf_size, "TAI VIET SYMBOL SAM");
				break;
			case 0xAADE:
				strcpy_s(buf, buf_size, "TAI VIET SYMBOL HO HOI");
				break;
			case 0xAADF:
				strcpy_s(buf, buf_size, "TAI VIET SYMBOL KOI KOI");
				break;
			case 0xAAE0:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER E");
				break;
			case 0xAAE1:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER O");
				break;
			case 0xAAE2:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER CHA");
				break;
			case 0xAAE3:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER NYA");
				break;
			case 0xAAE4:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER TTA");
				break;
			case 0xAAE5:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER TTHA");
				break;
			case 0xAAE6:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER DDA");
				break;
			case 0xAAE7:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER DDHA");
				break;
			case 0xAAE8:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER NNA");
				break;
			case 0xAAE9:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER SHA");
				break;
			case 0xAAEA:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER SSA");
				break;
			case 0xAAEB:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN II");
				break;
			case 0xAAEC:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN UU");
				break;
			case 0xAAED:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN AAI");
				break;
			case 0xAAEE:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN AU");
				break;
			case 0xAAEF:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN AAU");
				break;
			case 0xAAF0:
				strcpy_s(buf, buf_size, "MEETEI MAYEK CHEIKHAN");
				break;
			case 0xAAF1:
				strcpy_s(buf, buf_size, "MEETEI MAYEK AHANG KHUDAM");
				break;
			case 0xAAF2:
				strcpy_s(buf, buf_size, "MEETEI MAYEK ANJI");
				break;
			case 0xAAF3:
				strcpy_s(buf, buf_size, "MEETEI MAYEK SYLLABLE REPETITION MARK");
				break;
			case 0xAAF4:
				strcpy_s(buf, buf_size, "MEETEI MAYEK WORD REPETITION MARK");
				break;
			case 0xAAF5:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN VISARGA");
				break;
			case 0xAAF6:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VIRAMA");
				break;
			case 0xAB01:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TTHU");
				break;
			case 0xAB02:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TTHI");
				break;
			case 0xAB03:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TTHAA");
				break;
			case 0xAB04:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TTHEE");
				break;
			case 0xAB05:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TTHE");
				break;
			case 0xAB06:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE TTHO");
				break;
			case 0xAB09:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDHU");
				break;
			case 0xAB0A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDHI");
				break;
			case 0xAB0B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDHAA");
				break;
			case 0xAB0C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDHEE");
				break;
			case 0xAB0D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDHE");
				break;
			case 0xAB0E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DDHO");
				break;
			case 0xAB11:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DZU");
				break;
			case 0xAB12:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DZI");
				break;
			case 0xAB13:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DZAA");
				break;
			case 0xAB14:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DZEE");
				break;
			case 0xAB15:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DZE");
				break;
			case 0xAB16:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE DZO");
				break;
			case 0xAB20:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHHA");
				break;
			case 0xAB21:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHHU");
				break;
			case 0xAB22:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHHI");
				break;
			case 0xAB23:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHHAA");
				break;
			case 0xAB24:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHHEE");
				break;
			case 0xAB25:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHHE");
				break;
			case 0xAB26:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE CCHHO");
				break;
			case 0xAB28:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BBA");
				break;
			case 0xAB29:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BBU");
				break;
			case 0xAB2A:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BBI");
				break;
			case 0xAB2B:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BBAA");
				break;
			case 0xAB2C:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BBEE");
				break;
			case 0xAB2D:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BBE");
				break;
			case 0xAB2E:
				strcpy_s(buf, buf_size, "ETHIOPIC SYLLABLE BBO");
				break;
			case 0xAB30:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER BARRED ALPHA");
				break;
			case 0xAB31:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER A REVERSED-SCHWA");
				break;
			case 0xAB32:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER BLACKLETTER E");
				break;
			case 0xAB33:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER BARRED E");
				break;
			case 0xAB34:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER E WITH FLOURISH");
				break;
			case 0xAB35:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER LENIS F");
				break;
			case 0xAB36:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SCRIPT G WITH CROSSED-TAIL");
				break;
			case 0xAB37:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH INVERTED LAZY S");
				break;
			case 0xAB38:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH DOUBLE MIDDLE TILDE");
				break;
			case 0xAB39:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER L WITH MIDDLE RING");
				break;
			case 0xAB3A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER M WITH CROSSED-TAIL");
				break;
			case 0xAB3B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER N WITH CROSSED-TAIL");
				break;
			case 0xAB3C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER ENG WITH CROSSED-TAIL");
				break;
			case 0xAB3D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER BLACKLETTER O");
				break;
			case 0xAB3E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER BLACKLETTER O WITH STROKE");
				break;
			case 0xAB3F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER OPEN O WITH STROKE");
				break;
			case 0xAB40:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER INVERTED OE");
				break;
			case 0xAB41:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED OE WITH STROKE");
				break;
			case 0xAB42:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED OE WITH HORIZONTAL STROKE");
				break;
			case 0xAB43:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED O OPEN-O");
				break;
			case 0xAB44:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED O OPEN-O WITH STROKE");
				break;
			case 0xAB45:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER STIRRUP R");
				break;
			case 0xAB46:
				strcpy_s(buf, buf_size, "LATIN LETTER SMALL CAPITAL R WITH RIGHT LEG");
				break;
			case 0xAB47:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITHOUT HANDLE");
				break;
			case 0xAB48:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DOUBLE R");
				break;
			case 0xAB49:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER R WITH CROSSED-TAIL");
				break;
			case 0xAB4A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DOUBLE R WITH CROSSED-TAIL");
				break;
			case 0xAB4B:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SCRIPT R");
				break;
			case 0xAB4C:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SCRIPT R WITH RING");
				break;
			case 0xAB4D:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER BASELINE ESH");
				break;
			case 0xAB4E:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH SHORT RIGHT LEG");
				break;
			case 0xAB4F:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U BAR WITH SHORT RIGHT LEG");
				break;
			case 0xAB50:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER UI");
				break;
			case 0xAB51:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED UI");
				break;
			case 0xAB52:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER U WITH LEFT HOOK");
				break;
			case 0xAB53:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER CHI");
				break;
			case 0xAB54:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER CHI WITH LOW RIGHT RING");
				break;
			case 0xAB55:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER CHI WITH LOW LEFT SERIF");
				break;
			case 0xAB56:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER X WITH LOW RIGHT RING");
				break;
			case 0xAB57:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER X WITH LONG LEFT LEG");
				break;
			case 0xAB58:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER X WITH LONG LEFT LEG AND LOW RIGHT RING");
				break;
			case 0xAB59:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER X WITH LONG LEFT LEG WITH SERIF");
				break;
			case 0xAB5A:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER Y WITH SHORT RIGHT LEG");
				break;
			case 0xAB5B:
				strcpy_s(buf, buf_size, "MODIFIER BREVE WITH INVERTED BREVE");
				break;
			case 0xAB5C:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL HENG");
				break;
			case 0xAB5D:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL L WITH INVERTED LAZY S");
				break;
			case 0xAB5E:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL L WITH MIDDLE TILDE");
				break;
			case 0xAB5F:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL U WITH LEFT HOOK");
				break;
			case 0xAB60:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER SAKHA YAT");
				break;
			case 0xAB61:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER IOTIFIED E");
				break;
			case 0xAB62:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER OPEN OE");
				break;
			case 0xAB63:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER UO");
				break;
			case 0xAB64:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER INVERTED ALPHA");
				break;
			case 0xAB65:
				strcpy_s(buf, buf_size, "GREEK LETTER SMALL CAPITAL OMEGA");
				break;
			case 0xAB66:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER DZ DIGRAPH WITH RETROFLEX HOOK");
				break;
			case 0xAB67:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TS DIGRAPH WITH RETROFLEX HOOK");
				break;
			case 0xAB68:
				strcpy_s(buf, buf_size, "LATIN SMALL LETTER TURNED R WITH MIDDLE TILDE");
				break;
			case 0xAB69:
				strcpy_s(buf, buf_size, "MODIFIER LETTER SMALL TURNED W");
				break;
			case 0xAB6A:
				strcpy_s(buf, buf_size, "MODIFIER LETTER LEFT TACK");
				break;
			case 0xAB6B:
				strcpy_s(buf, buf_size, "MODIFIER LETTER RIGHT TACK");
				break;
			case 0xAB70:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER A");
				break;
			case 0xAB71:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER E");
				break;
			case 0xAB72:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER I");
				break;
			case 0xAB73:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER O");
				break;
			case 0xAB74:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER U");
				break;
			case 0xAB75:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER V");
				break;
			case 0xAB76:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER GA");
				break;
			case 0xAB77:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER KA");
				break;
			case 0xAB78:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER GE");
				break;
			case 0xAB79:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER GI");
				break;
			case 0xAB7A:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER GO");
				break;
			case 0xAB7B:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER GU");
				break;
			case 0xAB7C:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER GV");
				break;
			case 0xAB7D:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER HA");
				break;
			case 0xAB7E:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER HE");
				break;
			case 0xAB7F:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER HI");
				break;
			case 0xAB80:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER HO");
				break;
			case 0xAB81:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER HU");
				break;
			case 0xAB82:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER HV");
				break;
			case 0xAB83:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER LA");
				break;
			case 0xAB84:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER LE");
				break;
			case 0xAB85:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER LI");
				break;
			case 0xAB86:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER LO");
				break;
			case 0xAB87:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER LU");
				break;
			case 0xAB88:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER LV");
				break;
			case 0xAB89:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER MA");
				break;
			case 0xAB8A:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER ME");
				break;
			case 0xAB8B:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER MI");
				break;
			case 0xAB8C:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER MO");
				break;
			case 0xAB8D:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER MU");
				break;
			case 0xAB8E:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER NA");
				break;
			case 0xAB8F:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER HNA");
				break;
			case 0xAB90:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER NAH");
				break;
			case 0xAB91:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER NE");
				break;
			case 0xAB92:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER NI");
				break;
			case 0xAB93:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER NO");
				break;
			case 0xAB94:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER NU");
				break;
			case 0xAB95:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER NV");
				break;
			case 0xAB96:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER QUA");
				break;
			case 0xAB97:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER QUE");
				break;
			case 0xAB98:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER QUI");
				break;
			case 0xAB99:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER QUO");
				break;
			case 0xAB9A:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER QUU");
				break;
			case 0xAB9B:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER QUV");
				break;
			case 0xAB9C:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER SA");
				break;
			case 0xAB9D:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER S");
				break;
			case 0xAB9E:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER SE");
				break;
			case 0xAB9F:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER SI");
				break;
			case 0xABA0:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER SO");
				break;
			case 0xABA1:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER SU");
				break;
			case 0xABA2:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER SV");
				break;
			case 0xABA3:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER DA");
				break;
			case 0xABA4:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TA");
				break;
			case 0xABA5:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER DE");
				break;
			case 0xABA6:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TE");
				break;
			case 0xABA7:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER DI");
				break;
			case 0xABA8:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TI");
				break;
			case 0xABA9:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER DO");
				break;
			case 0xABAA:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER DU");
				break;
			case 0xABAB:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER DV");
				break;
			case 0xABAC:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER DLA");
				break;
			case 0xABAD:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TLA");
				break;
			case 0xABAE:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TLE");
				break;
			case 0xABAF:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TLI");
				break;
			case 0xABB0:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TLO");
				break;
			case 0xABB1:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TLU");
				break;
			case 0xABB2:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TLV");
				break;
			case 0xABB3:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TSA");
				break;
			case 0xABB4:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TSE");
				break;
			case 0xABB5:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TSI");
				break;
			case 0xABB6:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TSO");
				break;
			case 0xABB7:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TSU");
				break;
			case 0xABB8:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER TSV");
				break;
			case 0xABB9:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER WA");
				break;
			case 0xABBA:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER WE");
				break;
			case 0xABBB:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER WI");
				break;
			case 0xABBC:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER WO");
				break;
			case 0xABBD:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER WU");
				break;
			case 0xABBE:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER WV");
				break;
			case 0xABBF:
				strcpy_s(buf, buf_size, "CHEROKEE SMALL LETTER YA");
				break;
			case 0xABC0:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER KOK");
				break;
			case 0xABC1:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER SAM");
				break;
			case 0xABC2:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER LAI");
				break;
			case 0xABC3:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER MIT");
				break;
			case 0xABC4:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER PA");
				break;
			case 0xABC5:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER NA");
				break;
			case 0xABC6:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER CHIL");
				break;
			case 0xABC7:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER TIL");
				break;
			case 0xABC8:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER KHOU");
				break;
			case 0xABC9:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER NGOU");
				break;
			case 0xABCA:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER THOU");
				break;
			case 0xABCB:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER WAI");
				break;
			case 0xABCC:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER YANG");
				break;
			case 0xABCD:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER HUK");
				break;
			case 0xABCE:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER UN");
				break;
			case 0xABCF:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER I");
				break;
			case 0xABD0:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER PHAM");
				break;
			case 0xABD1:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER ATIYA");
				break;
			case 0xABD2:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER GOK");
				break;
			case 0xABD3:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER JHAM");
				break;
			case 0xABD4:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER RAI");
				break;
			case 0xABD5:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER BA");
				break;
			case 0xABD6:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER JIL");
				break;
			case 0xABD7:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER DIL");
				break;
			case 0xABD8:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER GHOU");
				break;
			case 0xABD9:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER DHOU");
				break;
			case 0xABDA:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER BHAM");
				break;
			case 0xABDB:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER KOK LONSUM");
				break;
			case 0xABDC:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER LAI LONSUM");
				break;
			case 0xABDD:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER MIT LONSUM");
				break;
			case 0xABDE:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER PA LONSUM");
				break;
			case 0xABDF:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER NA LONSUM");
				break;
			case 0xABE0:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER TIL LONSUM");
				break;
			case 0xABE1:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER NGOU LONSUM");
				break;
			case 0xABE2:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LETTER I LONSUM");
				break;
			case 0xABE3:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN ONAP");
				break;
			case 0xABE4:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN INAP");
				break;
			case 0xABE5:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN ANAP");
				break;
			case 0xABE6:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN YENAP");
				break;
			case 0xABE7:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN SOUNAP");
				break;
			case 0xABE8:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN UNAP");
				break;
			case 0xABE9:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN CHEINAP");
				break;
			case 0xABEA:
				strcpy_s(buf, buf_size, "MEETEI MAYEK VOWEL SIGN NUNG");
				break;
			case 0xABEB:
				strcpy_s(buf, buf_size, "MEETEI MAYEK CHEIKHEI");
				break;
			case 0xABEC:
				strcpy_s(buf, buf_size, "MEETEI MAYEK LUM IYEK");
				break;
			case 0xABED:
				strcpy_s(buf, buf_size, "MEETEI MAYEK APUN IYEK");
				break;
			case 0xABF0:
				strcpy_s(buf, buf_size, "MEETEI MAYEK DIGIT ZERO");
				break;
			case 0xABF1:
				strcpy_s(buf, buf_size, "MEETEI MAYEK DIGIT ONE");
				break;
			case 0xABF2:
				strcpy_s(buf, buf_size, "MEETEI MAYEK DIGIT TWO");
				break;
			case 0xABF3:
				strcpy_s(buf, buf_size, "MEETEI MAYEK DIGIT THREE");
				break;
			case 0xABF4:
				strcpy_s(buf, buf_size, "MEETEI MAYEK DIGIT FOUR");
				break;
			case 0xABF5:
				strcpy_s(buf, buf_size, "MEETEI MAYEK DIGIT FIVE");
				break;
			case 0xABF6:
				strcpy_s(buf, buf_size, "MEETEI MAYEK DIGIT SIX");
				break;
			case 0xABF7:
				strcpy_s(buf, buf_size, "MEETEI MAYEK DIGIT SEVEN");
				break;
			case 0xABF8:
				strcpy_s(buf, buf_size, "MEETEI MAYEK DIGIT EIGHT");
				break;
			case 0xABF9:
				strcpy_s(buf, buf_size, "MEETEI MAYEK DIGIT NINE");
				break;
			case 0xAC00:
				strcpy_s(buf, buf_size, "<Hangul Syllable, First>");
				break;
			case 0xD7A3:
				strcpy_s(buf, buf_size, "<Hangul Syllable, Last>");
				break;
			case 0xD7B0:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG O-YEO");
				break;
			case 0xD7B1:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG O-O-I");
				break;
			case 0xD7B2:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YO-A");
				break;
			case 0xD7B3:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YO-AE");
				break;
			case 0xD7B4:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YO-EO");
				break;
			case 0xD7B5:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG U-YEO");
				break;
			case 0xD7B6:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG U-I-I");
				break;
			case 0xD7B7:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YU-AE");
				break;
			case 0xD7B8:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG YU-O");
				break;
			case 0xD7B9:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EU-A");
				break;
			case 0xD7BA:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EU-EO");
				break;
			case 0xD7BB:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EU-E");
				break;
			case 0xD7BC:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG EU-O");
				break;
			case 0xD7BD:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-YA-O");
				break;
			case 0xD7BE:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-YAE");
				break;
			case 0xD7BF:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-YEO");
				break;
			case 0xD7C0:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-YE");
				break;
			case 0xD7C1:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-O-I");
				break;
			case 0xD7C2:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-YO");
				break;
			case 0xD7C3:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-YU");
				break;
			case 0xD7C4:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG I-I");
				break;
			case 0xD7C5:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG ARAEA-A");
				break;
			case 0xD7C6:
				strcpy_s(buf, buf_size, "HANGUL JUNGSEONG ARAEA-E");
				break;
			case 0xD7CB:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG NIEUN-RIEUL");
				break;
			case 0xD7CC:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG NIEUN-CHIEUCH");
				break;
			case 0xD7CD:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGTIKEUT");
				break;
			case 0xD7CE:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGTIKEUT-PIEUP");
				break;
			case 0xD7CF:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG TIKEUT-PIEUP");
				break;
			case 0xD7D0:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG TIKEUT-SIOS");
				break;
			case 0xD7D1:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG TIKEUT-SIOS-KIYEOK");
				break;
			case 0xD7D2:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG TIKEUT-CIEUC");
				break;
			case 0xD7D3:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG TIKEUT-CHIEUCH");
				break;
			case 0xD7D4:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG TIKEUT-THIEUTH");
				break;
			case 0xD7D5:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-SSANGKIYEOK");
				break;
			case 0xD7D6:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-KIYEOK-HIEUH");
				break;
			case 0xD7D7:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGRIEUL-KHIEUKH");
				break;
			case 0xD7D8:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-MIEUM-HIEUH");
				break;
			case 0xD7D9:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-PIEUP-TIKEUT");
				break;
			case 0xD7DA:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-PIEUP-PHIEUPH");
				break;
			case 0xD7DB:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-YESIEUNG");
				break;
			case 0xD7DC:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG RIEUL-YEORINHIEUH-HIEUH");
				break;
			case 0xD7DD:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG KAPYEOUNRIEUL");
				break;
			case 0xD7DE:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-NIEUN");
				break;
			case 0xD7DF:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-SSANGNIEUN");
				break;
			case 0xD7E0:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGMIEUM");
				break;
			case 0xD7E1:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-PIEUP-SIOS");
				break;
			case 0xD7E2:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG MIEUM-CIEUC");
				break;
			case 0xD7E3:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP-TIKEUT");
				break;
			case 0xD7E4:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP-RIEUL-PHIEUPH");
				break;
			case 0xD7E5:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP-MIEUM");
				break;
			case 0xD7E6:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGPIEUP");
				break;
			case 0xD7E7:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP-SIOS-TIKEUT");
				break;
			case 0xD7E8:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP-CIEUC");
				break;
			case 0xD7E9:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PIEUP-CHIEUCH");
				break;
			case 0xD7EA:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-MIEUM");
				break;
			case 0xD7EB:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-KAPYEOUNPIEUP");
				break;
			case 0xD7EC:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGSIOS-KIYEOK");
				break;
			case 0xD7ED:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGSIOS-TIKEUT");
				break;
			case 0xD7EE:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-PANSIOS");
				break;
			case 0xD7EF:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-CIEUC");
				break;
			case 0xD7F0:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-CHIEUCH");
				break;
			case 0xD7F1:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-THIEUTH");
				break;
			case 0xD7F2:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SIOS-HIEUH");
				break;
			case 0xD7F3:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PANSIOS-PIEUP");
				break;
			case 0xD7F4:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PANSIOS-KAPYEOUNPIEUP");
				break;
			case 0xD7F5:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG YESIEUNG-MIEUM");
				break;
			case 0xD7F6:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG YESIEUNG-HIEUH");
				break;
			case 0xD7F7:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG CIEUC-PIEUP");
				break;
			case 0xD7F8:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG CIEUC-SSANGPIEUP");
				break;
			case 0xD7F9:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG SSANGCIEUC");
				break;
			case 0xD7FA:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PHIEUPH-SIOS");
				break;
			case 0xD7FB:
				strcpy_s(buf, buf_size, "HANGUL JONGSEONG PHIEUPH-THIEUTH");
				break;
			case 0xD800:
				strcpy_s(buf, buf_size, "<Non Private Use High Surrogate, First>");
				break;
			case 0xDB7F:
				strcpy_s(buf, buf_size, "<Non Private Use High Surrogate, Last>");
				break;
			case 0xDB80:
				strcpy_s(buf, buf_size, "<Private Use High Surrogate, First>");
				break;
			case 0xDBFF:
				strcpy_s(buf, buf_size, "<Private Use High Surrogate, Last>");
				break;
			case 0xDC00:
				strcpy_s(buf, buf_size, "<Low Surrogate, First>");
				break;
			case 0xDFFF:
				strcpy_s(buf, buf_size, "<Low Surrogate, Last>");
				break;
			case 0xE000:
				strcpy_s(buf, buf_size, "<Private Use, First>");
				break;
			case 0xF8FF:
				strcpy_s(buf, buf_size, "<Private Use, Last>");
				break;
			case 0xF900:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F900");
				break;
			case 0xF901:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F901");
				break;
			case 0xF902:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F902");
				break;
			case 0xF903:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F903");
				break;
			case 0xF904:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F904");
				break;
			case 0xF905:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F905");
				break;
			case 0xF906:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F906");
				break;
			case 0xF907:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F907");
				break;
			case 0xF908:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F908");
				break;
			case 0xF909:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F909");
				break;
			case 0xF90A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F90A");
				break;
			case 0xF90B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F90B");
				break;
			case 0xF90C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F90C");
				break;
			case 0xF90D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F90D");
				break;
			case 0xF90E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F90E");
				break;
			case 0xF90F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F90F");
				break;
			case 0xF910:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F910");
				break;
			case 0xF911:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F911");
				break;
			case 0xF912:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F912");
				break;
			case 0xF913:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F913");
				break;
			case 0xF914:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F914");
				break;
			case 0xF915:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F915");
				break;
			case 0xF916:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F916");
				break;
			case 0xF917:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F917");
				break;
			case 0xF918:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F918");
				break;
			case 0xF919:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F919");
				break;
			case 0xF91A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F91A");
				break;
			case 0xF91B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F91B");
				break;
			case 0xF91C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F91C");
				break;
			case 0xF91D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F91D");
				break;
			case 0xF91E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F91E");
				break;
			case 0xF91F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F91F");
				break;
			case 0xF920:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F920");
				break;
			case 0xF921:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F921");
				break;
			case 0xF922:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F922");
				break;
			case 0xF923:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F923");
				break;
			case 0xF924:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F924");
				break;
			case 0xF925:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F925");
				break;
			case 0xF926:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F926");
				break;
			case 0xF927:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F927");
				break;
			case 0xF928:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F928");
				break;
			case 0xF929:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F929");
				break;
			case 0xF92A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F92A");
				break;
			case 0xF92B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F92B");
				break;
			case 0xF92C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F92C");
				break;
			case 0xF92D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F92D");
				break;
			case 0xF92E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F92E");
				break;
			case 0xF92F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F92F");
				break;
			case 0xF930:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F930");
				break;
			case 0xF931:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F931");
				break;
			case 0xF932:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F932");
				break;
			case 0xF933:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F933");
				break;
			case 0xF934:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F934");
				break;
			case 0xF935:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F935");
				break;
			case 0xF936:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F936");
				break;
			case 0xF937:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F937");
				break;
			case 0xF938:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F938");
				break;
			case 0xF939:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F939");
				break;
			case 0xF93A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F93A");
				break;
			case 0xF93B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F93B");
				break;
			case 0xF93C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F93C");
				break;
			case 0xF93D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F93D");
				break;
			case 0xF93E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F93E");
				break;
			case 0xF93F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F93F");
				break;
			case 0xF940:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F940");
				break;
			case 0xF941:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F941");
				break;
			case 0xF942:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F942");
				break;
			case 0xF943:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F943");
				break;
			case 0xF944:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F944");
				break;
			case 0xF945:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F945");
				break;
			case 0xF946:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F946");
				break;
			case 0xF947:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F947");
				break;
			case 0xF948:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F948");
				break;
			case 0xF949:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F949");
				break;
			case 0xF94A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F94A");
				break;
			case 0xF94B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F94B");
				break;
			case 0xF94C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F94C");
				break;
			case 0xF94D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F94D");
				break;
			case 0xF94E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F94E");
				break;
			case 0xF94F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F94F");
				break;
			case 0xF950:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F950");
				break;
			case 0xF951:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F951");
				break;
			case 0xF952:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F952");
				break;
			case 0xF953:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F953");
				break;
			case 0xF954:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F954");
				break;
			case 0xF955:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F955");
				break;
			case 0xF956:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F956");
				break;
			case 0xF957:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F957");
				break;
			case 0xF958:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F958");
				break;
			case 0xF959:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F959");
				break;
			case 0xF95A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F95A");
				break;
			case 0xF95B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F95B");
				break;
			case 0xF95C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F95C");
				break;
			case 0xF95D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F95D");
				break;
			case 0xF95E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F95E");
				break;
			case 0xF95F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F95F");
				break;
			case 0xF960:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F960");
				break;
			case 0xF961:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F961");
				break;
			case 0xF962:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F962");
				break;
			case 0xF963:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F963");
				break;
			case 0xF964:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F964");
				break;
			case 0xF965:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F965");
				break;
			case 0xF966:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F966");
				break;
			case 0xF967:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F967");
				break;
			case 0xF968:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F968");
				break;
			case 0xF969:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F969");
				break;
			case 0xF96A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F96A");
				break;
			case 0xF96B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F96B");
				break;
			case 0xF96C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F96C");
				break;
			case 0xF96D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F96D");
				break;
			case 0xF96E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F96E");
				break;
			case 0xF96F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F96F");
				break;
			case 0xF970:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F970");
				break;
			case 0xF971:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F971");
				break;
			case 0xF972:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F972");
				break;
			case 0xF973:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F973");
				break;
			case 0xF974:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F974");
				break;
			case 0xF975:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F975");
				break;
			case 0xF976:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F976");
				break;
			case 0xF977:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F977");
				break;
			case 0xF978:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F978");
				break;
			case 0xF979:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F979");
				break;
			case 0xF97A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F97A");
				break;
			case 0xF97B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F97B");
				break;
			case 0xF97C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F97C");
				break;
			case 0xF97D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F97D");
				break;
			case 0xF97E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F97E");
				break;
			case 0xF97F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F97F");
				break;
			case 0xF980:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F980");
				break;
			case 0xF981:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F981");
				break;
			case 0xF982:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F982");
				break;
			case 0xF983:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F983");
				break;
			case 0xF984:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F984");
				break;
			case 0xF985:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F985");
				break;
			case 0xF986:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F986");
				break;
			case 0xF987:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F987");
				break;
			case 0xF988:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F988");
				break;
			case 0xF989:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F989");
				break;
			case 0xF98A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F98A");
				break;
			case 0xF98B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F98B");
				break;
			case 0xF98C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F98C");
				break;
			case 0xF98D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F98D");
				break;
			case 0xF98E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F98E");
				break;
			case 0xF98F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F98F");
				break;
			case 0xF990:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F990");
				break;
			case 0xF991:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F991");
				break;
			case 0xF992:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F992");
				break;
			case 0xF993:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F993");
				break;
			case 0xF994:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F994");
				break;
			case 0xF995:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F995");
				break;
			case 0xF996:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F996");
				break;
			case 0xF997:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F997");
				break;
			case 0xF998:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F998");
				break;
			case 0xF999:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F999");
				break;
			case 0xF99A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F99A");
				break;
			case 0xF99B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F99B");
				break;
			case 0xF99C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F99C");
				break;
			case 0xF99D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F99D");
				break;
			case 0xF99E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F99E");
				break;
			case 0xF99F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F99F");
				break;
			case 0xF9A0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9A0");
				break;
			case 0xF9A1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9A1");
				break;
			case 0xF9A2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9A2");
				break;
			case 0xF9A3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9A3");
				break;
			case 0xF9A4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9A4");
				break;
			case 0xF9A5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9A5");
				break;
			case 0xF9A6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9A6");
				break;
			case 0xF9A7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9A7");
				break;
			case 0xF9A8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9A8");
				break;
			case 0xF9A9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9A9");
				break;
			case 0xF9AA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9AA");
				break;
			case 0xF9AB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9AB");
				break;
			case 0xF9AC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9AC");
				break;
			case 0xF9AD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9AD");
				break;
			case 0xF9AE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9AE");
				break;
			case 0xF9AF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9AF");
				break;
			case 0xF9B0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9B0");
				break;
			case 0xF9B1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9B1");
				break;
			case 0xF9B2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9B2");
				break;
			case 0xF9B3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9B3");
				break;
			case 0xF9B4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9B4");
				break;
			case 0xF9B5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9B5");
				break;
			case 0xF9B6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9B6");
				break;
			case 0xF9B7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9B7");
				break;
			case 0xF9B8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9B8");
				break;
			case 0xF9B9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9B9");
				break;
			case 0xF9BA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9BA");
				break;
			case 0xF9BB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9BB");
				break;
			case 0xF9BC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9BC");
				break;
			case 0xF9BD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9BD");
				break;
			case 0xF9BE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9BE");
				break;
			case 0xF9BF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9BF");
				break;
			case 0xF9C0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9C0");
				break;
			case 0xF9C1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9C1");
				break;
			case 0xF9C2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9C2");
				break;
			case 0xF9C3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9C3");
				break;
			case 0xF9C4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9C4");
				break;
			case 0xF9C5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9C5");
				break;
			case 0xF9C6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9C6");
				break;
			case 0xF9C7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9C7");
				break;
			case 0xF9C8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9C8");
				break;
			case 0xF9C9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9C9");
				break;
			case 0xF9CA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9CA");
				break;
			case 0xF9CB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9CB");
				break;
			case 0xF9CC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9CC");
				break;
			case 0xF9CD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9CD");
				break;
			case 0xF9CE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9CE");
				break;
			case 0xF9CF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9CF");
				break;
			case 0xF9D0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9D0");
				break;
			case 0xF9D1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9D1");
				break;
			case 0xF9D2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9D2");
				break;
			case 0xF9D3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9D3");
				break;
			case 0xF9D4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9D4");
				break;
			case 0xF9D5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9D5");
				break;
			case 0xF9D6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9D6");
				break;
			case 0xF9D7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9D7");
				break;
			case 0xF9D8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9D8");
				break;
			case 0xF9D9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9D9");
				break;
			case 0xF9DA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9DA");
				break;
			case 0xF9DB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9DB");
				break;
			case 0xF9DC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9DC");
				break;
			case 0xF9DD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9DD");
				break;
			case 0xF9DE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9DE");
				break;
			case 0xF9DF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9DF");
				break;
			case 0xF9E0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9E0");
				break;
			case 0xF9E1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9E1");
				break;
			case 0xF9E2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9E2");
				break;
			case 0xF9E3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9E3");
				break;
			case 0xF9E4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9E4");
				break;
			case 0xF9E5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9E5");
				break;
			case 0xF9E6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9E6");
				break;
			case 0xF9E7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9E7");
				break;
			case 0xF9E8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9E8");
				break;
			case 0xF9E9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9E9");
				break;
			case 0xF9EA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9EA");
				break;
			case 0xF9EB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9EB");
				break;
			case 0xF9EC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9EC");
				break;
			case 0xF9ED:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9ED");
				break;
			case 0xF9EE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9EE");
				break;
			case 0xF9EF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9EF");
				break;
			case 0xF9F0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9F0");
				break;
			case 0xF9F1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9F1");
				break;
			case 0xF9F2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9F2");
				break;
			case 0xF9F3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9F3");
				break;
			case 0xF9F4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9F4");
				break;
			case 0xF9F5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9F5");
				break;
			case 0xF9F6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9F6");
				break;
			case 0xF9F7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9F7");
				break;
			case 0xF9F8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9F8");
				break;
			case 0xF9F9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9F9");
				break;
			case 0xF9FA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9FA");
				break;
			case 0xF9FB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9FB");
				break;
			case 0xF9FC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9FC");
				break;
			case 0xF9FD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9FD");
				break;
			case 0xF9FE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9FE");
				break;
			case 0xF9FF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-F9FF");
				break;
			case 0xFA00:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA00");
				break;
			case 0xFA01:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA01");
				break;
			case 0xFA02:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA02");
				break;
			case 0xFA03:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA03");
				break;
			case 0xFA04:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA04");
				break;
			case 0xFA05:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA05");
				break;
			case 0xFA06:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA06");
				break;
			case 0xFA07:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA07");
				break;
			case 0xFA08:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA08");
				break;
			case 0xFA09:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA09");
				break;
			case 0xFA0A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA0A");
				break;
			case 0xFA0B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA0B");
				break;
			case 0xFA0C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA0C");
				break;
			case 0xFA0D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA0D");
				break;
			case 0xFA0E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA0E");
				break;
			case 0xFA0F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA0F");
				break;
			case 0xFA10:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA10");
				break;
			case 0xFA11:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA11");
				break;
			case 0xFA12:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA12");
				break;
			case 0xFA13:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA13");
				break;
			case 0xFA14:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA14");
				break;
			case 0xFA15:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA15");
				break;
			case 0xFA16:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA16");
				break;
			case 0xFA17:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA17");
				break;
			case 0xFA18:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA18");
				break;
			case 0xFA19:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA19");
				break;
			case 0xFA1A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA1A");
				break;
			case 0xFA1B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA1B");
				break;
			case 0xFA1C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA1C");
				break;
			case 0xFA1D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA1D");
				break;
			case 0xFA1E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA1E");
				break;
			case 0xFA1F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA1F");
				break;
			case 0xFA20:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA20");
				break;
			case 0xFA21:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA21");
				break;
			case 0xFA22:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA22");
				break;
			case 0xFA23:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA23");
				break;
			case 0xFA24:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA24");
				break;
			case 0xFA25:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA25");
				break;
			case 0xFA26:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA26");
				break;
			case 0xFA27:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA27");
				break;
			case 0xFA28:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA28");
				break;
			case 0xFA29:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA29");
				break;
			case 0xFA2A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA2A");
				break;
			case 0xFA2B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA2B");
				break;
			case 0xFA2C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA2C");
				break;
			case 0xFA2D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA2D");
				break;
			case 0xFA2E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA2E");
				break;
			case 0xFA2F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA2F");
				break;
			case 0xFA30:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA30");
				break;
			case 0xFA31:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA31");
				break;
			case 0xFA32:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA32");
				break;
			case 0xFA33:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA33");
				break;
			case 0xFA34:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA34");
				break;
			case 0xFA35:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA35");
				break;
			case 0xFA36:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA36");
				break;
			case 0xFA37:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA37");
				break;
			case 0xFA38:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA38");
				break;
			case 0xFA39:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA39");
				break;
			case 0xFA3A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA3A");
				break;
			case 0xFA3B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA3B");
				break;
			case 0xFA3C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA3C");
				break;
			case 0xFA3D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA3D");
				break;
			case 0xFA3E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA3E");
				break;
			case 0xFA3F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA3F");
				break;
			case 0xFA40:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA40");
				break;
			case 0xFA41:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA41");
				break;
			case 0xFA42:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA42");
				break;
			case 0xFA43:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA43");
				break;
			case 0xFA44:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA44");
				break;
			case 0xFA45:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA45");
				break;
			case 0xFA46:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA46");
				break;
			case 0xFA47:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA47");
				break;
			case 0xFA48:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA48");
				break;
			case 0xFA49:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA49");
				break;
			case 0xFA4A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA4A");
				break;
			case 0xFA4B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA4B");
				break;
			case 0xFA4C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA4C");
				break;
			case 0xFA4D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA4D");
				break;
			case 0xFA4E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA4E");
				break;
			case 0xFA4F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA4F");
				break;
			case 0xFA50:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA50");
				break;
			case 0xFA51:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA51");
				break;
			case 0xFA52:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA52");
				break;
			case 0xFA53:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA53");
				break;
			case 0xFA54:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA54");
				break;
			case 0xFA55:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA55");
				break;
			case 0xFA56:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA56");
				break;
			case 0xFA57:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA57");
				break;
			case 0xFA58:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA58");
				break;
			case 0xFA59:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA59");
				break;
			case 0xFA5A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA5A");
				break;
			case 0xFA5B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA5B");
				break;
			case 0xFA5C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA5C");
				break;
			case 0xFA5D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA5D");
				break;
			case 0xFA5E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA5E");
				break;
			case 0xFA5F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA5F");
				break;
			case 0xFA60:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA60");
				break;
			case 0xFA61:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA61");
				break;
			case 0xFA62:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA62");
				break;
			case 0xFA63:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA63");
				break;
			case 0xFA64:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA64");
				break;
			case 0xFA65:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA65");
				break;
			case 0xFA66:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA66");
				break;
			case 0xFA67:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA67");
				break;
			case 0xFA68:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA68");
				break;
			case 0xFA69:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA69");
				break;
			case 0xFA6A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA6A");
				break;
			case 0xFA6B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA6B");
				break;
			case 0xFA6C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA6C");
				break;
			case 0xFA6D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA6D");
				break;
			case 0xFA70:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA70");
				break;
			case 0xFA71:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA71");
				break;
			case 0xFA72:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA72");
				break;
			case 0xFA73:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA73");
				break;
			case 0xFA74:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA74");
				break;
			case 0xFA75:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA75");
				break;
			case 0xFA76:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA76");
				break;
			case 0xFA77:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA77");
				break;
			case 0xFA78:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA78");
				break;
			case 0xFA79:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA79");
				break;
			case 0xFA7A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA7A");
				break;
			case 0xFA7B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA7B");
				break;
			case 0xFA7C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA7C");
				break;
			case 0xFA7D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA7D");
				break;
			case 0xFA7E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA7E");
				break;
			case 0xFA7F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA7F");
				break;
			case 0xFA80:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA80");
				break;
			case 0xFA81:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA81");
				break;
			case 0xFA82:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA82");
				break;
			case 0xFA83:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA83");
				break;
			case 0xFA84:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA84");
				break;
			case 0xFA85:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA85");
				break;
			case 0xFA86:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA86");
				break;
			case 0xFA87:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA87");
				break;
			case 0xFA88:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA88");
				break;
			case 0xFA89:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA89");
				break;
			case 0xFA8A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA8A");
				break;
			case 0xFA8B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA8B");
				break;
			case 0xFA8C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA8C");
				break;
			case 0xFA8D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA8D");
				break;
			case 0xFA8E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA8E");
				break;
			case 0xFA8F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA8F");
				break;
			case 0xFA90:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA90");
				break;
			case 0xFA91:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA91");
				break;
			case 0xFA92:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA92");
				break;
			case 0xFA93:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA93");
				break;
			case 0xFA94:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA94");
				break;
			case 0xFA95:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA95");
				break;
			case 0xFA96:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA96");
				break;
			case 0xFA97:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA97");
				break;
			case 0xFA98:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA98");
				break;
			case 0xFA99:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA99");
				break;
			case 0xFA9A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA9A");
				break;
			case 0xFA9B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA9B");
				break;
			case 0xFA9C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA9C");
				break;
			case 0xFA9D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA9D");
				break;
			case 0xFA9E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA9E");
				break;
			case 0xFA9F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FA9F");
				break;
			case 0xFAA0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAA0");
				break;
			case 0xFAA1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAA1");
				break;
			case 0xFAA2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAA2");
				break;
			case 0xFAA3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAA3");
				break;
			case 0xFAA4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAA4");
				break;
			case 0xFAA5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAA5");
				break;
			case 0xFAA6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAA6");
				break;
			case 0xFAA7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAA7");
				break;
			case 0xFAA8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAA8");
				break;
			case 0xFAA9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAA9");
				break;
			case 0xFAAA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAAA");
				break;
			case 0xFAAB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAAB");
				break;
			case 0xFAAC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAAC");
				break;
			case 0xFAAD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAAD");
				break;
			case 0xFAAE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAAE");
				break;
			case 0xFAAF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAAF");
				break;
			case 0xFAB0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAB0");
				break;
			case 0xFAB1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAB1");
				break;
			case 0xFAB2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAB2");
				break;
			case 0xFAB3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAB3");
				break;
			case 0xFAB4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAB4");
				break;
			case 0xFAB5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAB5");
				break;
			case 0xFAB6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAB6");
				break;
			case 0xFAB7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAB7");
				break;
			case 0xFAB8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAB8");
				break;
			case 0xFAB9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAB9");
				break;
			case 0xFABA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FABA");
				break;
			case 0xFABB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FABB");
				break;
			case 0xFABC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FABC");
				break;
			case 0xFABD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FABD");
				break;
			case 0xFABE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FABE");
				break;
			case 0xFABF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FABF");
				break;
			case 0xFAC0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAC0");
				break;
			case 0xFAC1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAC1");
				break;
			case 0xFAC2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAC2");
				break;
			case 0xFAC3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAC3");
				break;
			case 0xFAC4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAC4");
				break;
			case 0xFAC5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAC5");
				break;
			case 0xFAC6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAC6");
				break;
			case 0xFAC7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAC7");
				break;
			case 0xFAC8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAC8");
				break;
			case 0xFAC9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAC9");
				break;
			case 0xFACA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FACA");
				break;
			case 0xFACB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FACB");
				break;
			case 0xFACC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FACC");
				break;
			case 0xFACD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FACD");
				break;
			case 0xFACE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FACE");
				break;
			case 0xFACF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FACF");
				break;
			case 0xFAD0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAD0");
				break;
			case 0xFAD1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAD1");
				break;
			case 0xFAD2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAD2");
				break;
			case 0xFAD3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAD3");
				break;
			case 0xFAD4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAD4");
				break;
			case 0xFAD5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAD5");
				break;
			case 0xFAD6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAD6");
				break;
			case 0xFAD7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAD7");
				break;
			case 0xFAD8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAD8");
				break;
			case 0xFAD9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-FAD9");
				break;
			case 0xFB00:
				strcpy_s(buf, buf_size, "LATIN SMALL LIGATURE FF");
				break;
			case 0xFB01:
				strcpy_s(buf, buf_size, "LATIN SMALL LIGATURE FI");
				break;
			case 0xFB02:
				strcpy_s(buf, buf_size, "LATIN SMALL LIGATURE FL");
				break;
			case 0xFB03:
				strcpy_s(buf, buf_size, "LATIN SMALL LIGATURE FFI");
				break;
			case 0xFB04:
				strcpy_s(buf, buf_size, "LATIN SMALL LIGATURE FFL");
				break;
			case 0xFB05:
				strcpy_s(buf, buf_size, "LATIN SMALL LIGATURE LONG S T");
				break;
			case 0xFB06:
				strcpy_s(buf, buf_size, "LATIN SMALL LIGATURE ST");
				break;
			case 0xFB13:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LIGATURE MEN NOW");
				break;
			case 0xFB14:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LIGATURE MEN ECH");
				break;
			case 0xFB15:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LIGATURE MEN INI");
				break;
			case 0xFB16:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LIGATURE VEW NOW");
				break;
			case 0xFB17:
				strcpy_s(buf, buf_size, "ARMENIAN SMALL LIGATURE MEN XEH");
				break;
			case 0xFB1D:
				strcpy_s(buf, buf_size, "HEBREW LETTER YOD WITH HIRIQ");
				break;
			case 0xFB1E:
				strcpy_s(buf, buf_size, "HEBREW POINT JUDEO-SPANISH VARIKA");
				break;
			case 0xFB1F:
				strcpy_s(buf, buf_size, "HEBREW LIGATURE YIDDISH YOD YOD PATAH");
				break;
			case 0xFB20:
				strcpy_s(buf, buf_size, "HEBREW LETTER ALTERNATIVE AYIN");
				break;
			case 0xFB21:
				strcpy_s(buf, buf_size, "HEBREW LETTER WIDE ALEF");
				break;
			case 0xFB22:
				strcpy_s(buf, buf_size, "HEBREW LETTER WIDE DALET");
				break;
			case 0xFB23:
				strcpy_s(buf, buf_size, "HEBREW LETTER WIDE HE");
				break;
			case 0xFB24:
				strcpy_s(buf, buf_size, "HEBREW LETTER WIDE KAF");
				break;
			case 0xFB25:
				strcpy_s(buf, buf_size, "HEBREW LETTER WIDE LAMED");
				break;
			case 0xFB26:
				strcpy_s(buf, buf_size, "HEBREW LETTER WIDE FINAL MEM");
				break;
			case 0xFB27:
				strcpy_s(buf, buf_size, "HEBREW LETTER WIDE RESH");
				break;
			case 0xFB28:
				strcpy_s(buf, buf_size, "HEBREW LETTER WIDE TAV");
				break;
			case 0xFB29:
				strcpy_s(buf, buf_size, "HEBREW LETTER ALTERNATIVE PLUS SIGN");
				break;
			case 0xFB2A:
				strcpy_s(buf, buf_size, "HEBREW LETTER SHIN WITH SHIN DOT");
				break;
			case 0xFB2B:
				strcpy_s(buf, buf_size, "HEBREW LETTER SHIN WITH SIN DOT");
				break;
			case 0xFB2C:
				strcpy_s(buf, buf_size, "HEBREW LETTER SHIN WITH DAGESH AND SHIN DOT");
				break;
			case 0xFB2D:
				strcpy_s(buf, buf_size, "HEBREW LETTER SHIN WITH DAGESH AND SIN DOT");
				break;
			case 0xFB2E:
				strcpy_s(buf, buf_size, "HEBREW LETTER ALEF WITH PATAH");
				break;
			case 0xFB2F:
				strcpy_s(buf, buf_size, "HEBREW LETTER ALEF WITH QAMATS");
				break;
			case 0xFB30:
				strcpy_s(buf, buf_size, "HEBREW LETTER ALEF WITH MAPIQ");
				break;
			case 0xFB31:
				strcpy_s(buf, buf_size, "HEBREW LETTER BET WITH DAGESH");
				break;
			case 0xFB32:
				strcpy_s(buf, buf_size, "HEBREW LETTER GIMEL WITH DAGESH");
				break;
			case 0xFB33:
				strcpy_s(buf, buf_size, "HEBREW LETTER DALET WITH DAGESH");
				break;
			case 0xFB34:
				strcpy_s(buf, buf_size, "HEBREW LETTER HE WITH MAPIQ");
				break;
			case 0xFB35:
				strcpy_s(buf, buf_size, "HEBREW LETTER VAV WITH DAGESH");
				break;
			case 0xFB36:
				strcpy_s(buf, buf_size, "HEBREW LETTER ZAYIN WITH DAGESH");
				break;
			case 0xFB38:
				strcpy_s(buf, buf_size, "HEBREW LETTER TET WITH DAGESH");
				break;
			case 0xFB39:
				strcpy_s(buf, buf_size, "HEBREW LETTER YOD WITH DAGESH");
				break;
			case 0xFB3A:
				strcpy_s(buf, buf_size, "HEBREW LETTER FINAL KAF WITH DAGESH");
				break;
			case 0xFB3B:
				strcpy_s(buf, buf_size, "HEBREW LETTER KAF WITH DAGESH");
				break;
			case 0xFB3C:
				strcpy_s(buf, buf_size, "HEBREW LETTER LAMED WITH DAGESH");
				break;
			case 0xFB3E:
				strcpy_s(buf, buf_size, "HEBREW LETTER MEM WITH DAGESH");
				break;
			case 0xFB40:
				strcpy_s(buf, buf_size, "HEBREW LETTER NUN WITH DAGESH");
				break;
			case 0xFB41:
				strcpy_s(buf, buf_size, "HEBREW LETTER SAMEKH WITH DAGESH");
				break;
			case 0xFB43:
				strcpy_s(buf, buf_size, "HEBREW LETTER FINAL PE WITH DAGESH");
				break;
			case 0xFB44:
				strcpy_s(buf, buf_size, "HEBREW LETTER PE WITH DAGESH");
				break;
			case 0xFB46:
				strcpy_s(buf, buf_size, "HEBREW LETTER TSADI WITH DAGESH");
				break;
			case 0xFB47:
				strcpy_s(buf, buf_size, "HEBREW LETTER QOF WITH DAGESH");
				break;
			case 0xFB48:
				strcpy_s(buf, buf_size, "HEBREW LETTER RESH WITH DAGESH");
				break;
			case 0xFB49:
				strcpy_s(buf, buf_size, "HEBREW LETTER SHIN WITH DAGESH");
				break;
			case 0xFB4A:
				strcpy_s(buf, buf_size, "HEBREW LETTER TAV WITH DAGESH");
				break;
			case 0xFB4B:
				strcpy_s(buf, buf_size, "HEBREW LETTER VAV WITH HOLAM");
				break;
			case 0xFB4C:
				strcpy_s(buf, buf_size, "HEBREW LETTER BET WITH RAFE");
				break;
			case 0xFB4D:
				strcpy_s(buf, buf_size, "HEBREW LETTER KAF WITH RAFE");
				break;
			case 0xFB4E:
				strcpy_s(buf, buf_size, "HEBREW LETTER PE WITH RAFE");
				break;
			case 0xFB4F:
				strcpy_s(buf, buf_size, "HEBREW LIGATURE ALEF LAMED");
				break;
			case 0xFB50:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WASLA ISOLATED FORM");
				break;
			case 0xFB51:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WASLA FINAL FORM");
				break;
			case 0xFB52:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEEH ISOLATED FORM");
				break;
			case 0xFB53:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEEH FINAL FORM");
				break;
			case 0xFB54:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEEH INITIAL FORM");
				break;
			case 0xFB55:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEEH MEDIAL FORM");
				break;
			case 0xFB56:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEH ISOLATED FORM");
				break;
			case 0xFB57:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEH FINAL FORM");
				break;
			case 0xFB58:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEH INITIAL FORM");
				break;
			case 0xFB59:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEH MEDIAL FORM");
				break;
			case 0xFB5A:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEHEH ISOLATED FORM");
				break;
			case 0xFB5B:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEHEH FINAL FORM");
				break;
			case 0xFB5C:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEHEH INITIAL FORM");
				break;
			case 0xFB5D:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEHEH MEDIAL FORM");
				break;
			case 0xFB5E:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEHEH ISOLATED FORM");
				break;
			case 0xFB5F:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEHEH FINAL FORM");
				break;
			case 0xFB60:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEHEH INITIAL FORM");
				break;
			case 0xFB61:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEHEH MEDIAL FORM");
				break;
			case 0xFB62:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEHEH ISOLATED FORM");
				break;
			case 0xFB63:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEHEH FINAL FORM");
				break;
			case 0xFB64:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEHEH INITIAL FORM");
				break;
			case 0xFB65:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEHEH MEDIAL FORM");
				break;
			case 0xFB66:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEH ISOLATED FORM");
				break;
			case 0xFB67:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEH FINAL FORM");
				break;
			case 0xFB68:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEH INITIAL FORM");
				break;
			case 0xFB69:
				strcpy_s(buf, buf_size, "ARABIC LETTER TTEH MEDIAL FORM");
				break;
			case 0xFB6A:
				strcpy_s(buf, buf_size, "ARABIC LETTER VEH ISOLATED FORM");
				break;
			case 0xFB6B:
				strcpy_s(buf, buf_size, "ARABIC LETTER VEH FINAL FORM");
				break;
			case 0xFB6C:
				strcpy_s(buf, buf_size, "ARABIC LETTER VEH INITIAL FORM");
				break;
			case 0xFB6D:
				strcpy_s(buf, buf_size, "ARABIC LETTER VEH MEDIAL FORM");
				break;
			case 0xFB6E:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEHEH ISOLATED FORM");
				break;
			case 0xFB6F:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEHEH FINAL FORM");
				break;
			case 0xFB70:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEHEH INITIAL FORM");
				break;
			case 0xFB71:
				strcpy_s(buf, buf_size, "ARABIC LETTER PEHEH MEDIAL FORM");
				break;
			case 0xFB72:
				strcpy_s(buf, buf_size, "ARABIC LETTER DYEH ISOLATED FORM");
				break;
			case 0xFB73:
				strcpy_s(buf, buf_size, "ARABIC LETTER DYEH FINAL FORM");
				break;
			case 0xFB74:
				strcpy_s(buf, buf_size, "ARABIC LETTER DYEH INITIAL FORM");
				break;
			case 0xFB75:
				strcpy_s(buf, buf_size, "ARABIC LETTER DYEH MEDIAL FORM");
				break;
			case 0xFB76:
				strcpy_s(buf, buf_size, "ARABIC LETTER NYEH ISOLATED FORM");
				break;
			case 0xFB77:
				strcpy_s(buf, buf_size, "ARABIC LETTER NYEH FINAL FORM");
				break;
			case 0xFB78:
				strcpy_s(buf, buf_size, "ARABIC LETTER NYEH INITIAL FORM");
				break;
			case 0xFB79:
				strcpy_s(buf, buf_size, "ARABIC LETTER NYEH MEDIAL FORM");
				break;
			case 0xFB7A:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEH ISOLATED FORM");
				break;
			case 0xFB7B:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEH FINAL FORM");
				break;
			case 0xFB7C:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEH INITIAL FORM");
				break;
			case 0xFB7D:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEH MEDIAL FORM");
				break;
			case 0xFB7E:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEHEH ISOLATED FORM");
				break;
			case 0xFB7F:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEHEH FINAL FORM");
				break;
			case 0xFB80:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEHEH INITIAL FORM");
				break;
			case 0xFB81:
				strcpy_s(buf, buf_size, "ARABIC LETTER TCHEHEH MEDIAL FORM");
				break;
			case 0xFB82:
				strcpy_s(buf, buf_size, "ARABIC LETTER DDAHAL ISOLATED FORM");
				break;
			case 0xFB83:
				strcpy_s(buf, buf_size, "ARABIC LETTER DDAHAL FINAL FORM");
				break;
			case 0xFB84:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAHAL ISOLATED FORM");
				break;
			case 0xFB85:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAHAL FINAL FORM");
				break;
			case 0xFB86:
				strcpy_s(buf, buf_size, "ARABIC LETTER DUL ISOLATED FORM");
				break;
			case 0xFB87:
				strcpy_s(buf, buf_size, "ARABIC LETTER DUL FINAL FORM");
				break;
			case 0xFB88:
				strcpy_s(buf, buf_size, "ARABIC LETTER DDAL ISOLATED FORM");
				break;
			case 0xFB89:
				strcpy_s(buf, buf_size, "ARABIC LETTER DDAL FINAL FORM");
				break;
			case 0xFB8A:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEH ISOLATED FORM");
				break;
			case 0xFB8B:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEH FINAL FORM");
				break;
			case 0xFB8C:
				strcpy_s(buf, buf_size, "ARABIC LETTER RREH ISOLATED FORM");
				break;
			case 0xFB8D:
				strcpy_s(buf, buf_size, "ARABIC LETTER RREH FINAL FORM");
				break;
			case 0xFB8E:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH ISOLATED FORM");
				break;
			case 0xFB8F:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH FINAL FORM");
				break;
			case 0xFB90:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH INITIAL FORM");
				break;
			case 0xFB91:
				strcpy_s(buf, buf_size, "ARABIC LETTER KEHEH MEDIAL FORM");
				break;
			case 0xFB92:
				strcpy_s(buf, buf_size, "ARABIC LETTER GAF ISOLATED FORM");
				break;
			case 0xFB93:
				strcpy_s(buf, buf_size, "ARABIC LETTER GAF FINAL FORM");
				break;
			case 0xFB94:
				strcpy_s(buf, buf_size, "ARABIC LETTER GAF INITIAL FORM");
				break;
			case 0xFB95:
				strcpy_s(buf, buf_size, "ARABIC LETTER GAF MEDIAL FORM");
				break;
			case 0xFB96:
				strcpy_s(buf, buf_size, "ARABIC LETTER GUEH ISOLATED FORM");
				break;
			case 0xFB97:
				strcpy_s(buf, buf_size, "ARABIC LETTER GUEH FINAL FORM");
				break;
			case 0xFB98:
				strcpy_s(buf, buf_size, "ARABIC LETTER GUEH INITIAL FORM");
				break;
			case 0xFB99:
				strcpy_s(buf, buf_size, "ARABIC LETTER GUEH MEDIAL FORM");
				break;
			case 0xFB9A:
				strcpy_s(buf, buf_size, "ARABIC LETTER NGOEH ISOLATED FORM");
				break;
			case 0xFB9B:
				strcpy_s(buf, buf_size, "ARABIC LETTER NGOEH FINAL FORM");
				break;
			case 0xFB9C:
				strcpy_s(buf, buf_size, "ARABIC LETTER NGOEH INITIAL FORM");
				break;
			case 0xFB9D:
				strcpy_s(buf, buf_size, "ARABIC LETTER NGOEH MEDIAL FORM");
				break;
			case 0xFB9E:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON GHUNNA ISOLATED FORM");
				break;
			case 0xFB9F:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON GHUNNA FINAL FORM");
				break;
			case 0xFBA0:
				strcpy_s(buf, buf_size, "ARABIC LETTER RNOON ISOLATED FORM");
				break;
			case 0xFBA1:
				strcpy_s(buf, buf_size, "ARABIC LETTER RNOON FINAL FORM");
				break;
			case 0xFBA2:
				strcpy_s(buf, buf_size, "ARABIC LETTER RNOON INITIAL FORM");
				break;
			case 0xFBA3:
				strcpy_s(buf, buf_size, "ARABIC LETTER RNOON MEDIAL FORM");
				break;
			case 0xFBA4:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH WITH YEH ABOVE ISOLATED FORM");
				break;
			case 0xFBA5:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH WITH YEH ABOVE FINAL FORM");
				break;
			case 0xFBA6:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH GOAL ISOLATED FORM");
				break;
			case 0xFBA7:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH GOAL FINAL FORM");
				break;
			case 0xFBA8:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH GOAL INITIAL FORM");
				break;
			case 0xFBA9:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH GOAL MEDIAL FORM");
				break;
			case 0xFBAA:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH DOACHASHMEE ISOLATED FORM");
				break;
			case 0xFBAB:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH DOACHASHMEE FINAL FORM");
				break;
			case 0xFBAC:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH DOACHASHMEE INITIAL FORM");
				break;
			case 0xFBAD:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH DOACHASHMEE MEDIAL FORM");
				break;
			case 0xFBAE:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH BARREE ISOLATED FORM");
				break;
			case 0xFBAF:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH BARREE FINAL FORM");
				break;
			case 0xFBB0:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH BARREE WITH HAMZA ABOVE ISOLATED FORM");
				break;
			case 0xFBB1:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH BARREE WITH HAMZA ABOVE FINAL FORM");
				break;
			case 0xFBB2:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL DOT ABOVE");
				break;
			case 0xFBB3:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL DOT BELOW");
				break;
			case 0xFBB4:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL TWO DOTS ABOVE");
				break;
			case 0xFBB5:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL TWO DOTS BELOW");
				break;
			case 0xFBB6:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL THREE DOTS ABOVE");
				break;
			case 0xFBB7:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL THREE DOTS BELOW");
				break;
			case 0xFBB8:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS ABOVE");
				break;
			case 0xFBB9:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL THREE DOTS POINTING DOWNWARDS BELOW");
				break;
			case 0xFBBA:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL FOUR DOTS ABOVE");
				break;
			case 0xFBBB:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL FOUR DOTS BELOW");
				break;
			case 0xFBBC:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL DOUBLE VERTICAL BAR BELOW");
				break;
			case 0xFBBD:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL TWO DOTS VERTICALLY ABOVE");
				break;
			case 0xFBBE:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL TWO DOTS VERTICALLY BELOW");
				break;
			case 0xFBBF:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL RING");
				break;
			case 0xFBC0:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL SMALL TAH ABOVE");
				break;
			case 0xFBC1:
				strcpy_s(buf, buf_size, "ARABIC SYMBOL SMALL TAH BELOW");
				break;
			case 0xFBD3:
				strcpy_s(buf, buf_size, "ARABIC LETTER NG ISOLATED FORM");
				break;
			case 0xFBD4:
				strcpy_s(buf, buf_size, "ARABIC LETTER NG FINAL FORM");
				break;
			case 0xFBD5:
				strcpy_s(buf, buf_size, "ARABIC LETTER NG INITIAL FORM");
				break;
			case 0xFBD6:
				strcpy_s(buf, buf_size, "ARABIC LETTER NG MEDIAL FORM");
				break;
			case 0xFBD7:
				strcpy_s(buf, buf_size, "ARABIC LETTER U ISOLATED FORM");
				break;
			case 0xFBD8:
				strcpy_s(buf, buf_size, "ARABIC LETTER U FINAL FORM");
				break;
			case 0xFBD9:
				strcpy_s(buf, buf_size, "ARABIC LETTER OE ISOLATED FORM");
				break;
			case 0xFBDA:
				strcpy_s(buf, buf_size, "ARABIC LETTER OE FINAL FORM");
				break;
			case 0xFBDB:
				strcpy_s(buf, buf_size, "ARABIC LETTER YU ISOLATED FORM");
				break;
			case 0xFBDC:
				strcpy_s(buf, buf_size, "ARABIC LETTER YU FINAL FORM");
				break;
			case 0xFBDD:
				strcpy_s(buf, buf_size, "ARABIC LETTER U WITH HAMZA ABOVE ISOLATED FORM");
				break;
			case 0xFBDE:
				strcpy_s(buf, buf_size, "ARABIC LETTER VE ISOLATED FORM");
				break;
			case 0xFBDF:
				strcpy_s(buf, buf_size, "ARABIC LETTER VE FINAL FORM");
				break;
			case 0xFBE0:
				strcpy_s(buf, buf_size, "ARABIC LETTER KIRGHIZ OE ISOLATED FORM");
				break;
			case 0xFBE1:
				strcpy_s(buf, buf_size, "ARABIC LETTER KIRGHIZ OE FINAL FORM");
				break;
			case 0xFBE2:
				strcpy_s(buf, buf_size, "ARABIC LETTER KIRGHIZ YU ISOLATED FORM");
				break;
			case 0xFBE3:
				strcpy_s(buf, buf_size, "ARABIC LETTER KIRGHIZ YU FINAL FORM");
				break;
			case 0xFBE4:
				strcpy_s(buf, buf_size, "ARABIC LETTER E ISOLATED FORM");
				break;
			case 0xFBE5:
				strcpy_s(buf, buf_size, "ARABIC LETTER E FINAL FORM");
				break;
			case 0xFBE6:
				strcpy_s(buf, buf_size, "ARABIC LETTER E INITIAL FORM");
				break;
			case 0xFBE7:
				strcpy_s(buf, buf_size, "ARABIC LETTER E MEDIAL FORM");
				break;
			case 0xFBE8:
				strcpy_s(buf, buf_size, "ARABIC LETTER UIGHUR KAZAKH KIRGHIZ ALEF MAKSURA INITIAL FORM");
				break;
			case 0xFBE9:
				strcpy_s(buf, buf_size, "ARABIC LETTER UIGHUR KAZAKH KIRGHIZ ALEF MAKSURA MEDIAL FORM");
				break;
			case 0xFBEA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF ISOLATED FORM");
				break;
			case 0xFBEB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF FINAL FORM");
				break;
			case 0xFBEC:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE ISOLATED FORM");
				break;
			case 0xFBED:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH AE FINAL FORM");
				break;
			case 0xFBEE:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW ISOLATED FORM");
				break;
			case 0xFBEF:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH WAW FINAL FORM");
				break;
			case 0xFBF0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U ISOLATED FORM");
				break;
			case 0xFBF1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH U FINAL FORM");
				break;
			case 0xFBF2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE ISOLATED FORM");
				break;
			case 0xFBF3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH OE FINAL FORM");
				break;
			case 0xFBF4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU ISOLATED FORM");
				break;
			case 0xFBF5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YU FINAL FORM");
				break;
			case 0xFBF6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E ISOLATED FORM");
				break;
			case 0xFBF7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E FINAL FORM");
				break;
			case 0xFBF8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH E INITIAL FORM");
				break;
			case 0xFBF9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFBFA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFBFB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA INITIAL FORM");
				break;
			case 0xFBFC:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH ISOLATED FORM");
				break;
			case 0xFBFD:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH FINAL FORM");
				break;
			case 0xFBFE:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH INITIAL FORM");
				break;
			case 0xFBFF:
				strcpy_s(buf, buf_size, "ARABIC LETTER FARSI YEH MEDIAL FORM");
				break;
			case 0xFC00:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM ISOLATED FORM");
				break;
			case 0xFC01:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH ISOLATED FORM");
				break;
			case 0xFC02:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM ISOLATED FORM");
				break;
			case 0xFC03:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC04:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH ISOLATED FORM");
				break;
			case 0xFC05:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH JEEM ISOLATED FORM");
				break;
			case 0xFC06:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH HAH ISOLATED FORM");
				break;
			case 0xFC07:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH KHAH ISOLATED FORM");
				break;
			case 0xFC08:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH MEEM ISOLATED FORM");
				break;
			case 0xFC09:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC0A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH YEH ISOLATED FORM");
				break;
			case 0xFC0B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH JEEM ISOLATED FORM");
				break;
			case 0xFC0C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH HAH ISOLATED FORM");
				break;
			case 0xFC0D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH KHAH ISOLATED FORM");
				break;
			case 0xFC0E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH MEEM ISOLATED FORM");
				break;
			case 0xFC0F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC10:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH YEH ISOLATED FORM");
				break;
			case 0xFC11:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH JEEM ISOLATED FORM");
				break;
			case 0xFC12:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH MEEM ISOLATED FORM");
				break;
			case 0xFC13:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC14:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH YEH ISOLATED FORM");
				break;
			case 0xFC15:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH HAH ISOLATED FORM");
				break;
			case 0xFC16:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH MEEM ISOLATED FORM");
				break;
			case 0xFC17:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH JEEM ISOLATED FORM");
				break;
			case 0xFC18:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH MEEM ISOLATED FORM");
				break;
			case 0xFC19:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KHAH WITH JEEM ISOLATED FORM");
				break;
			case 0xFC1A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KHAH WITH HAH ISOLATED FORM");
				break;
			case 0xFC1B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KHAH WITH MEEM ISOLATED FORM");
				break;
			case 0xFC1C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH JEEM ISOLATED FORM");
				break;
			case 0xFC1D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH HAH ISOLATED FORM");
				break;
			case 0xFC1E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH KHAH ISOLATED FORM");
				break;
			case 0xFC1F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH MEEM ISOLATED FORM");
				break;
			case 0xFC20:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH HAH ISOLATED FORM");
				break;
			case 0xFC21:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM");
				break;
			case 0xFC22:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM");
				break;
			case 0xFC23:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH HAH ISOLATED FORM");
				break;
			case 0xFC24:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM");
				break;
			case 0xFC25:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM");
				break;
			case 0xFC26:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH HAH ISOLATED FORM");
				break;
			case 0xFC27:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH MEEM ISOLATED FORM");
				break;
			case 0xFC28:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE ZAH WITH MEEM ISOLATED FORM");
				break;
			case 0xFC29:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH JEEM ISOLATED FORM");
				break;
			case 0xFC2A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH MEEM ISOLATED FORM");
				break;
			case 0xFC2B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH JEEM ISOLATED FORM");
				break;
			case 0xFC2C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH MEEM ISOLATED FORM");
				break;
			case 0xFC2D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH JEEM ISOLATED FORM");
				break;
			case 0xFC2E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH HAH ISOLATED FORM");
				break;
			case 0xFC2F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH KHAH ISOLATED FORM");
				break;
			case 0xFC30:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH MEEM ISOLATED FORM");
				break;
			case 0xFC31:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC32:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH YEH ISOLATED FORM");
				break;
			case 0xFC33:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH HAH ISOLATED FORM");
				break;
			case 0xFC34:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH MEEM ISOLATED FORM");
				break;
			case 0xFC35:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC36:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH YEH ISOLATED FORM");
				break;
			case 0xFC37:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH ALEF ISOLATED FORM");
				break;
			case 0xFC38:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH JEEM ISOLATED FORM");
				break;
			case 0xFC39:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH HAH ISOLATED FORM");
				break;
			case 0xFC3A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH KHAH ISOLATED FORM");
				break;
			case 0xFC3B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH LAM ISOLATED FORM");
				break;
			case 0xFC3C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH MEEM ISOLATED FORM");
				break;
			case 0xFC3D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC3E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH YEH ISOLATED FORM");
				break;
			case 0xFC3F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH JEEM ISOLATED FORM");
				break;
			case 0xFC40:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH HAH ISOLATED FORM");
				break;
			case 0xFC41:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH KHAH ISOLATED FORM");
				break;
			case 0xFC42:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH MEEM ISOLATED FORM");
				break;
			case 0xFC43:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC44:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH YEH ISOLATED FORM");
				break;
			case 0xFC45:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH JEEM ISOLATED FORM");
				break;
			case 0xFC46:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH HAH ISOLATED FORM");
				break;
			case 0xFC47:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH KHAH ISOLATED FORM");
				break;
			case 0xFC48:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH MEEM ISOLATED FORM");
				break;
			case 0xFC49:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC4A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH YEH ISOLATED FORM");
				break;
			case 0xFC4B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH JEEM ISOLATED FORM");
				break;
			case 0xFC4C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH HAH ISOLATED FORM");
				break;
			case 0xFC4D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH KHAH ISOLATED FORM");
				break;
			case 0xFC4E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH MEEM ISOLATED FORM");
				break;
			case 0xFC4F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC50:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH YEH ISOLATED FORM");
				break;
			case 0xFC51:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HEH WITH JEEM ISOLATED FORM");
				break;
			case 0xFC52:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HEH WITH MEEM ISOLATED FORM");
				break;
			case 0xFC53:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HEH WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC54:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HEH WITH YEH ISOLATED FORM");
				break;
			case 0xFC55:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH JEEM ISOLATED FORM");
				break;
			case 0xFC56:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAH ISOLATED FORM");
				break;
			case 0xFC57:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH KHAH ISOLATED FORM");
				break;
			case 0xFC58:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH MEEM ISOLATED FORM");
				break;
			case 0xFC59:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFC5A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH YEH ISOLATED FORM");
				break;
			case 0xFC5B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THAL WITH SUPERSCRIPT ALEF ISOLATED FORM");
				break;
			case 0xFC5C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE REH WITH SUPERSCRIPT ALEF ISOLATED FORM");
				break;
			case 0xFC5D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF ISOLATED FORM");
				break;
			case 0xFC5E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHADDA WITH DAMMATAN ISOLATED FORM");
				break;
			case 0xFC5F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHADDA WITH KASRATAN ISOLATED FORM");
				break;
			case 0xFC60:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHADDA WITH FATHA ISOLATED FORM");
				break;
			case 0xFC61:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHADDA WITH DAMMA ISOLATED FORM");
				break;
			case 0xFC62:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHADDA WITH KASRA ISOLATED FORM");
				break;
			case 0xFC63:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHADDA WITH SUPERSCRIPT ALEF ISOLATED FORM");
				break;
			case 0xFC64:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH REH FINAL FORM");
				break;
			case 0xFC65:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ZAIN FINAL FORM");
				break;
			case 0xFC66:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM FINAL FORM");
				break;
			case 0xFC67:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH NOON FINAL FORM");
				break;
			case 0xFC68:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFC69:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH YEH FINAL FORM");
				break;
			case 0xFC6A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH REH FINAL FORM");
				break;
			case 0xFC6B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH ZAIN FINAL FORM");
				break;
			case 0xFC6C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH MEEM FINAL FORM");
				break;
			case 0xFC6D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH NOON FINAL FORM");
				break;
			case 0xFC6E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFC6F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH YEH FINAL FORM");
				break;
			case 0xFC70:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH REH FINAL FORM");
				break;
			case 0xFC71:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH ZAIN FINAL FORM");
				break;
			case 0xFC72:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH MEEM FINAL FORM");
				break;
			case 0xFC73:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH NOON FINAL FORM");
				break;
			case 0xFC74:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFC75:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH YEH FINAL FORM");
				break;
			case 0xFC76:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH REH FINAL FORM");
				break;
			case 0xFC77:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH ZAIN FINAL FORM");
				break;
			case 0xFC78:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH MEEM FINAL FORM");
				break;
			case 0xFC79:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH NOON FINAL FORM");
				break;
			case 0xFC7A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFC7B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH YEH FINAL FORM");
				break;
			case 0xFC7C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFC7D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH YEH FINAL FORM");
				break;
			case 0xFC7E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFC7F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH YEH FINAL FORM");
				break;
			case 0xFC80:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH ALEF FINAL FORM");
				break;
			case 0xFC81:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH LAM FINAL FORM");
				break;
			case 0xFC82:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH MEEM FINAL FORM");
				break;
			case 0xFC83:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFC84:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH YEH FINAL FORM");
				break;
			case 0xFC85:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH MEEM FINAL FORM");
				break;
			case 0xFC86:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFC87:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH YEH FINAL FORM");
				break;
			case 0xFC88:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH ALEF FINAL FORM");
				break;
			case 0xFC89:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH MEEM FINAL FORM");
				break;
			case 0xFC8A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH REH FINAL FORM");
				break;
			case 0xFC8B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH ZAIN FINAL FORM");
				break;
			case 0xFC8C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH MEEM FINAL FORM");
				break;
			case 0xFC8D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH NOON FINAL FORM");
				break;
			case 0xFC8E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFC8F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH YEH FINAL FORM");
				break;
			case 0xFC90:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE ALEF MAKSURA WITH SUPERSCRIPT ALEF FINAL FORM");
				break;
			case 0xFC91:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH REH FINAL FORM");
				break;
			case 0xFC92:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH ZAIN FINAL FORM");
				break;
			case 0xFC93:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH MEEM FINAL FORM");
				break;
			case 0xFC94:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH NOON FINAL FORM");
				break;
			case 0xFC95:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFC96:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH YEH FINAL FORM");
				break;
			case 0xFC97:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH JEEM INITIAL FORM");
				break;
			case 0xFC98:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HAH INITIAL FORM");
				break;
			case 0xFC99:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH KHAH INITIAL FORM");
				break;
			case 0xFC9A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM INITIAL FORM");
				break;
			case 0xFC9B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH INITIAL FORM");
				break;
			case 0xFC9C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH JEEM INITIAL FORM");
				break;
			case 0xFC9D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH HAH INITIAL FORM");
				break;
			case 0xFC9E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH KHAH INITIAL FORM");
				break;
			case 0xFC9F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH MEEM INITIAL FORM");
				break;
			case 0xFCA0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH HEH INITIAL FORM");
				break;
			case 0xFCA1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH JEEM INITIAL FORM");
				break;
			case 0xFCA2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH HAH INITIAL FORM");
				break;
			case 0xFCA3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH KHAH INITIAL FORM");
				break;
			case 0xFCA4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH MEEM INITIAL FORM");
				break;
			case 0xFCA5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH HEH INITIAL FORM");
				break;
			case 0xFCA6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH MEEM INITIAL FORM");
				break;
			case 0xFCA7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH HAH INITIAL FORM");
				break;
			case 0xFCA8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFCA9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH JEEM INITIAL FORM");
				break;
			case 0xFCAA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH MEEM INITIAL FORM");
				break;
			case 0xFCAB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KHAH WITH JEEM INITIAL FORM");
				break;
			case 0xFCAC:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KHAH WITH MEEM INITIAL FORM");
				break;
			case 0xFCAD:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH JEEM INITIAL FORM");
				break;
			case 0xFCAE:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH HAH INITIAL FORM");
				break;
			case 0xFCAF:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH KHAH INITIAL FORM");
				break;
			case 0xFCB0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH MEEM INITIAL FORM");
				break;
			case 0xFCB1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH HAH INITIAL FORM");
				break;
			case 0xFCB2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH KHAH INITIAL FORM");
				break;
			case 0xFCB3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH MEEM INITIAL FORM");
				break;
			case 0xFCB4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH JEEM INITIAL FORM");
				break;
			case 0xFCB5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH HAH INITIAL FORM");
				break;
			case 0xFCB6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH KHAH INITIAL FORM");
				break;
			case 0xFCB7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH MEEM INITIAL FORM");
				break;
			case 0xFCB8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH HAH INITIAL FORM");
				break;
			case 0xFCB9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE ZAH WITH MEEM INITIAL FORM");
				break;
			case 0xFCBA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH JEEM INITIAL FORM");
				break;
			case 0xFCBB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH MEEM INITIAL FORM");
				break;
			case 0xFCBC:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH JEEM INITIAL FORM");
				break;
			case 0xFCBD:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH MEEM INITIAL FORM");
				break;
			case 0xFCBE:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH JEEM INITIAL FORM");
				break;
			case 0xFCBF:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH HAH INITIAL FORM");
				break;
			case 0xFCC0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH KHAH INITIAL FORM");
				break;
			case 0xFCC1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH MEEM INITIAL FORM");
				break;
			case 0xFCC2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH HAH INITIAL FORM");
				break;
			case 0xFCC3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH MEEM INITIAL FORM");
				break;
			case 0xFCC4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH JEEM INITIAL FORM");
				break;
			case 0xFCC5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH HAH INITIAL FORM");
				break;
			case 0xFCC6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH KHAH INITIAL FORM");
				break;
			case 0xFCC7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH LAM INITIAL FORM");
				break;
			case 0xFCC8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH MEEM INITIAL FORM");
				break;
			case 0xFCC9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH JEEM INITIAL FORM");
				break;
			case 0xFCCA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH HAH INITIAL FORM");
				break;
			case 0xFCCB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH KHAH INITIAL FORM");
				break;
			case 0xFCCC:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH MEEM INITIAL FORM");
				break;
			case 0xFCCD:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH HEH INITIAL FORM");
				break;
			case 0xFCCE:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH JEEM INITIAL FORM");
				break;
			case 0xFCCF:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH HAH INITIAL FORM");
				break;
			case 0xFCD0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH KHAH INITIAL FORM");
				break;
			case 0xFCD1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFCD2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH JEEM INITIAL FORM");
				break;
			case 0xFCD3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH HAH INITIAL FORM");
				break;
			case 0xFCD4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH KHAH INITIAL FORM");
				break;
			case 0xFCD5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH MEEM INITIAL FORM");
				break;
			case 0xFCD6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH HEH INITIAL FORM");
				break;
			case 0xFCD7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HEH WITH JEEM INITIAL FORM");
				break;
			case 0xFCD8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HEH WITH MEEM INITIAL FORM");
				break;
			case 0xFCD9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HEH WITH SUPERSCRIPT ALEF INITIAL FORM");
				break;
			case 0xFCDA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH JEEM INITIAL FORM");
				break;
			case 0xFCDB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAH INITIAL FORM");
				break;
			case 0xFCDC:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH KHAH INITIAL FORM");
				break;
			case 0xFCDD:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH MEEM INITIAL FORM");
				break;
			case 0xFCDE:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HEH INITIAL FORM");
				break;
			case 0xFCDF:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH MEEM MEDIAL FORM");
				break;
			case 0xFCE0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAMZA ABOVE WITH HEH MEDIAL FORM");
				break;
			case 0xFCE1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH MEEM MEDIAL FORM");
				break;
			case 0xFCE2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH HEH MEDIAL FORM");
				break;
			case 0xFCE3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH MEEM MEDIAL FORM");
				break;
			case 0xFCE4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH HEH MEDIAL FORM");
				break;
			case 0xFCE5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH MEEM MEDIAL FORM");
				break;
			case 0xFCE6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE THEH WITH HEH MEDIAL FORM");
				break;
			case 0xFCE7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH MEEM MEDIAL FORM");
				break;
			case 0xFCE8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH HEH MEDIAL FORM");
				break;
			case 0xFCE9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM");
				break;
			case 0xFCEA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM");
				break;
			case 0xFCEB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH LAM MEDIAL FORM");
				break;
			case 0xFCEC:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH MEEM MEDIAL FORM");
				break;
			case 0xFCED:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH MEEM MEDIAL FORM");
				break;
			case 0xFCEE:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH MEEM MEDIAL FORM");
				break;
			case 0xFCEF:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH HEH MEDIAL FORM");
				break;
			case 0xFCF0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH MEEM MEDIAL FORM");
				break;
			case 0xFCF1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HEH MEDIAL FORM");
				break;
			case 0xFCF2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHADDA WITH FATHA MEDIAL FORM");
				break;
			case 0xFCF3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHADDA WITH DAMMA MEDIAL FORM");
				break;
			case 0xFCF4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHADDA WITH KASRA MEDIAL FORM");
				break;
			case 0xFCF5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFCF6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH YEH ISOLATED FORM");
				break;
			case 0xFCF7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFCF8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH YEH ISOLATED FORM");
				break;
			case 0xFCF9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFCFA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH YEH ISOLATED FORM");
				break;
			case 0xFCFB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFCFC:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH YEH ISOLATED FORM");
				break;
			case 0xFCFD:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFCFE:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM");
				break;
			case 0xFCFF:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFD00:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH YEH ISOLATED FORM");
				break;
			case 0xFD01:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFD02:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH YEH ISOLATED FORM");
				break;
			case 0xFD03:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KHAH WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFD04:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KHAH WITH YEH ISOLATED FORM");
				break;
			case 0xFD05:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFD06:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH YEH ISOLATED FORM");
				break;
			case 0xFD07:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFD08:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH YEH ISOLATED FORM");
				break;
			case 0xFD09:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH JEEM ISOLATED FORM");
				break;
			case 0xFD0A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH HAH ISOLATED FORM");
				break;
			case 0xFD0B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH KHAH ISOLATED FORM");
				break;
			case 0xFD0C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM");
				break;
			case 0xFD0D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM");
				break;
			case 0xFD0E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH REH ISOLATED FORM");
				break;
			case 0xFD0F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH REH ISOLATED FORM");
				break;
			case 0xFD10:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH REH ISOLATED FORM");
				break;
			case 0xFD11:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD12:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH YEH FINAL FORM");
				break;
			case 0xFD13:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD14:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH YEH FINAL FORM");
				break;
			case 0xFD15:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD16:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH YEH FINAL FORM");
				break;
			case 0xFD17:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD18:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH YEH FINAL FORM");
				break;
			case 0xFD19:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD1A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH YEH FINAL FORM");
				break;
			case 0xFD1B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD1C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH YEH FINAL FORM");
				break;
			case 0xFD1D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD1E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH YEH FINAL FORM");
				break;
			case 0xFD1F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KHAH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD20:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KHAH WITH YEH FINAL FORM");
				break;
			case 0xFD21:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD22:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH YEH FINAL FORM");
				break;
			case 0xFD23:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD24:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH YEH FINAL FORM");
				break;
			case 0xFD25:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH JEEM FINAL FORM");
				break;
			case 0xFD26:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH HAH FINAL FORM");
				break;
			case 0xFD27:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH KHAH FINAL FORM");
				break;
			case 0xFD28:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM");
				break;
			case 0xFD29:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH REH FINAL FORM");
				break;
			case 0xFD2A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH REH FINAL FORM");
				break;
			case 0xFD2B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH REH FINAL FORM");
				break;
			case 0xFD2C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH REH FINAL FORM");
				break;
			case 0xFD2D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH JEEM INITIAL FORM");
				break;
			case 0xFD2E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH HAH INITIAL FORM");
				break;
			case 0xFD2F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH KHAH INITIAL FORM");
				break;
			case 0xFD30:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM");
				break;
			case 0xFD31:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH HEH INITIAL FORM");
				break;
			case 0xFD32:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM");
				break;
			case 0xFD33:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH MEEM INITIAL FORM");
				break;
			case 0xFD34:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH JEEM MEDIAL FORM");
				break;
			case 0xFD35:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH HAH MEDIAL FORM");
				break;
			case 0xFD36:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH KHAH MEDIAL FORM");
				break;
			case 0xFD37:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH JEEM MEDIAL FORM");
				break;
			case 0xFD38:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH HAH MEDIAL FORM");
				break;
			case 0xFD39:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH KHAH MEDIAL FORM");
				break;
			case 0xFD3A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH MEEM MEDIAL FORM");
				break;
			case 0xFD3B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE ZAH WITH MEEM MEDIAL FORM");
				break;
			case 0xFD3C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE ALEF WITH FATHATAN FINAL FORM");
				break;
			case 0xFD3D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE ALEF WITH FATHATAN ISOLATED FORM");
				break;
			case 0xFD3E:
				strcpy_s(buf, buf_size, "ORNATE LEFT PARENTHESIS");
				break;
			case 0xFD3F:
				strcpy_s(buf, buf_size, "ORNATE RIGHT PARENTHESIS");
				break;
			case 0xFD50:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH JEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFD51:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH HAH WITH JEEM FINAL FORM");
				break;
			case 0xFD52:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH HAH WITH JEEM INITIAL FORM");
				break;
			case 0xFD53:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH HAH WITH MEEM INITIAL FORM");
				break;
			case 0xFD54:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH KHAH WITH MEEM INITIAL FORM");
				break;
			case 0xFD55:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH MEEM WITH JEEM INITIAL FORM");
				break;
			case 0xFD56:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH MEEM WITH HAH INITIAL FORM");
				break;
			case 0xFD57:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH MEEM WITH KHAH INITIAL FORM");
				break;
			case 0xFD58:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH MEEM WITH HAH FINAL FORM");
				break;
			case 0xFD59:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH MEEM WITH HAH INITIAL FORM");
				break;
			case 0xFD5A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFD5B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH MEEM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD5C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH HAH WITH JEEM INITIAL FORM");
				break;
			case 0xFD5D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH JEEM WITH HAH INITIAL FORM");
				break;
			case 0xFD5E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH JEEM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD5F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH MEEM WITH HAH FINAL FORM");
				break;
			case 0xFD60:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH MEEM WITH HAH INITIAL FORM");
				break;
			case 0xFD61:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH MEEM WITH JEEM INITIAL FORM");
				break;
			case 0xFD62:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH MEEM WITH MEEM FINAL FORM");
				break;
			case 0xFD63:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH MEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFD64:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM");
				break;
			case 0xFD65:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM");
				break;
			case 0xFD66:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM");
				break;
			case 0xFD67:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH HAH WITH MEEM FINAL FORM");
				break;
			case 0xFD68:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH HAH WITH MEEM INITIAL FORM");
				break;
			case 0xFD69:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH JEEM WITH YEH FINAL FORM");
				break;
			case 0xFD6A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM");
				break;
			case 0xFD6B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM");
				break;
			case 0xFD6C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM");
				break;
			case 0xFD6D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFD6E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD6F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM");
				break;
			case 0xFD70:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM");
				break;
			case 0xFD71:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH MEEM WITH HAH FINAL FORM");
				break;
			case 0xFD72:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH MEEM WITH HAH INITIAL FORM");
				break;
			case 0xFD73:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH MEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFD74:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TAH WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFD75:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH JEEM WITH MEEM FINAL FORM");
				break;
			case 0xFD76:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH MEEM WITH MEEM FINAL FORM");
				break;
			case 0xFD77:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH MEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFD78:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH MEEM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD79:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH MEEM WITH MEEM FINAL FORM");
				break;
			case 0xFD7A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFD7B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE GHAIN WITH MEEM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD7C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH KHAH WITH MEEM FINAL FORM");
				break;
			case 0xFD7D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH KHAH WITH MEEM INITIAL FORM");
				break;
			case 0xFD7E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH MEEM WITH HAH FINAL FORM");
				break;
			case 0xFD7F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH MEEM WITH MEEM FINAL FORM");
				break;
			case 0xFD80:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH HAH WITH MEEM FINAL FORM");
				break;
			case 0xFD81:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH HAH WITH YEH FINAL FORM");
				break;
			case 0xFD82:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH HAH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD83:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH JEEM WITH JEEM INITIAL FORM");
				break;
			case 0xFD84:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH JEEM WITH JEEM FINAL FORM");
				break;
			case 0xFD85:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH KHAH WITH MEEM FINAL FORM");
				break;
			case 0xFD86:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH KHAH WITH MEEM INITIAL FORM");
				break;
			case 0xFD87:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH MEEM WITH HAH FINAL FORM");
				break;
			case 0xFD88:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH MEEM WITH HAH INITIAL FORM");
				break;
			case 0xFD89:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH HAH WITH JEEM INITIAL FORM");
				break;
			case 0xFD8A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH HAH WITH MEEM INITIAL FORM");
				break;
			case 0xFD8B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH HAH WITH YEH FINAL FORM");
				break;
			case 0xFD8C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH JEEM WITH HAH INITIAL FORM");
				break;
			case 0xFD8D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH JEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFD8E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH KHAH WITH JEEM INITIAL FORM");
				break;
			case 0xFD8F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH KHAH WITH MEEM INITIAL FORM");
				break;
			case 0xFD92:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH JEEM WITH KHAH INITIAL FORM");
				break;
			case 0xFD93:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HEH WITH MEEM WITH JEEM INITIAL FORM");
				break;
			case 0xFD94:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HEH WITH MEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFD95:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH HAH WITH MEEM INITIAL FORM");
				break;
			case 0xFD96:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH HAH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD97:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH JEEM WITH MEEM FINAL FORM");
				break;
			case 0xFD98:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH JEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFD99:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH JEEM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD9A:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFD9B:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH MEEM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFD9C:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH MEEM WITH MEEM FINAL FORM");
				break;
			case 0xFD9D:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH MEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFD9E:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH KHAH WITH YEH FINAL FORM");
				break;
			case 0xFD9F:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH JEEM WITH YEH FINAL FORM");
				break;
			case 0xFDA0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH JEEM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFDA1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH KHAH WITH YEH FINAL FORM");
				break;
			case 0xFDA2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH KHAH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFDA3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFDA4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE TEH WITH MEEM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFDA5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFDA6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH HAH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFDA7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH MEEM WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFDA8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH KHAH WITH ALEF MAKSURA FINAL FORM");
				break;
			case 0xFDA9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM");
				break;
			case 0xFDAA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SHEEN WITH HAH WITH YEH FINAL FORM");
				break;
			case 0xFDAB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM");
				break;
			case 0xFDAC:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH JEEM WITH YEH FINAL FORM");
				break;
			case 0xFDAD:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFDAE:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH HAH WITH YEH FINAL FORM");
				break;
			case 0xFDAF:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH JEEM WITH YEH FINAL FORM");
				break;
			case 0xFDB0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE YEH WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFDB1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFDB2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFDB3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH HAH WITH YEH FINAL FORM");
				break;
			case 0xFDB4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QAF WITH MEEM WITH HAH INITIAL FORM");
				break;
			case 0xFDB5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH HAH WITH MEEM INITIAL FORM");
				break;
			case 0xFDB6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFDB7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFDB8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH JEEM WITH HAH INITIAL FORM");
				break;
			case 0xFDB9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH KHAH WITH YEH FINAL FORM");
				break;
			case 0xFDBA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH JEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFDBB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH MEEM WITH MEEM FINAL FORM");
				break;
			case 0xFDBC:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH JEEM WITH MEEM FINAL FORM");
				break;
			case 0xFDBD:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH JEEM WITH HAH FINAL FORM");
				break;
			case 0xFDBE:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JEEM WITH HAH WITH YEH FINAL FORM");
				break;
			case 0xFDBF:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE HAH WITH JEEM WITH YEH FINAL FORM");
				break;
			case 0xFDC0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MEEM WITH JEEM WITH YEH FINAL FORM");
				break;
			case 0xFDC1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE FEH WITH MEEM WITH YEH FINAL FORM");
				break;
			case 0xFDC2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BEH WITH HAH WITH YEH FINAL FORM");
				break;
			case 0xFDC3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE KAF WITH MEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFDC4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AIN WITH JEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFDC5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM");
				break;
			case 0xFDC6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SEEN WITH KHAH WITH YEH FINAL FORM");
				break;
			case 0xFDC7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE NOON WITH JEEM WITH YEH FINAL FORM");
				break;
			case 0xFDF0:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM");
				break;
			case 0xFDF1:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE QALA USED AS KORANIC STOP SIGN ISOLATED FORM");
				break;
			case 0xFDF2:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE ALLAH ISOLATED FORM");
				break;
			case 0xFDF3:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE AKBAR ISOLATED FORM");
				break;
			case 0xFDF4:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE MOHAMMAD ISOLATED FORM");
				break;
			case 0xFDF5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SALAM ISOLATED FORM");
				break;
			case 0xFDF6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE RASOUL ISOLATED FORM");
				break;
			case 0xFDF7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE ALAYHE ISOLATED FORM");
				break;
			case 0xFDF8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE WASALLAM ISOLATED FORM");
				break;
			case 0xFDF9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SALLA ISOLATED FORM");
				break;
			case 0xFDFA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM");
				break;
			case 0xFDFB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE JALLAJALALOUHOU");
				break;
			case 0xFDFC:
				strcpy_s(buf, buf_size, "RIAL SIGN");
				break;
			case 0xFDFD:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE BISMILLAH AR-RAHMAN AR-RAHEEM");
				break;
			case 0xFE00:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-1");
				break;
			case 0xFE01:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-2");
				break;
			case 0xFE02:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-3");
				break;
			case 0xFE03:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-4");
				break;
			case 0xFE04:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-5");
				break;
			case 0xFE05:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-6");
				break;
			case 0xFE06:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-7");
				break;
			case 0xFE07:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-8");
				break;
			case 0xFE08:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-9");
				break;
			case 0xFE09:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-10");
				break;
			case 0xFE0A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-11");
				break;
			case 0xFE0B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-12");
				break;
			case 0xFE0C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-13");
				break;
			case 0xFE0D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-14");
				break;
			case 0xFE0E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-15");
				break;
			case 0xFE0F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-16");
				break;
			case 0xFE10:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL COMMA");
				break;
			case 0xFE11:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA");
				break;
			case 0xFE12:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP");
				break;
			case 0xFE13:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL COLON");
				break;
			case 0xFE14:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL SEMICOLON");
				break;
			case 0xFE15:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK");
				break;
			case 0xFE16:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL QUESTION MARK");
				break;
			case 0xFE17:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LEFT WHITE LENTICULAR BRACKET");
				break;
			case 0xFE18:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET");
				break;
			case 0xFE19:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS");
				break;
			case 0xFE20:
				strcpy_s(buf, buf_size, "COMBINING LIGATURE LEFT HALF");
				break;
			case 0xFE21:
				strcpy_s(buf, buf_size, "COMBINING LIGATURE RIGHT HALF");
				break;
			case 0xFE22:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE TILDE LEFT HALF");
				break;
			case 0xFE23:
				strcpy_s(buf, buf_size, "COMBINING DOUBLE TILDE RIGHT HALF");
				break;
			case 0xFE24:
				strcpy_s(buf, buf_size, "COMBINING MACRON LEFT HALF");
				break;
			case 0xFE25:
				strcpy_s(buf, buf_size, "COMBINING MACRON RIGHT HALF");
				break;
			case 0xFE26:
				strcpy_s(buf, buf_size, "COMBINING CONJOINING MACRON");
				break;
			case 0xFE27:
				strcpy_s(buf, buf_size, "COMBINING LIGATURE LEFT HALF BELOW");
				break;
			case 0xFE28:
				strcpy_s(buf, buf_size, "COMBINING LIGATURE RIGHT HALF BELOW");
				break;
			case 0xFE29:
				strcpy_s(buf, buf_size, "COMBINING TILDE LEFT HALF BELOW");
				break;
			case 0xFE2A:
				strcpy_s(buf, buf_size, "COMBINING TILDE RIGHT HALF BELOW");
				break;
			case 0xFE2B:
				strcpy_s(buf, buf_size, "COMBINING MACRON LEFT HALF BELOW");
				break;
			case 0xFE2C:
				strcpy_s(buf, buf_size, "COMBINING MACRON RIGHT HALF BELOW");
				break;
			case 0xFE2D:
				strcpy_s(buf, buf_size, "COMBINING CONJOINING MACRON BELOW");
				break;
			case 0xFE2E:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC TITLO LEFT HALF");
				break;
			case 0xFE2F:
				strcpy_s(buf, buf_size, "COMBINING CYRILLIC TITLO RIGHT HALF");
				break;
			case 0xFE30:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL TWO DOT LEADER");
				break;
			case 0xFE31:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL EM DASH");
				break;
			case 0xFE32:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL EN DASH");
				break;
			case 0xFE33:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LOW LINE");
				break;
			case 0xFE34:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL WAVY LOW LINE");
				break;
			case 0xFE35:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS");
				break;
			case 0xFE36:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS");
				break;
			case 0xFE37:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET");
				break;
			case 0xFE38:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET");
				break;
			case 0xFE39:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LEFT TORTOISE SHELL BRACKET");
				break;
			case 0xFE3A:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL RIGHT TORTOISE SHELL BRACKET");
				break;
			case 0xFE3B:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET");
				break;
			case 0xFE3C:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL RIGHT BLACK LENTICULAR BRACKET");
				break;
			case 0xFE3D:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LEFT DOUBLE ANGLE BRACKET");
				break;
			case 0xFE3E:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL RIGHT DOUBLE ANGLE BRACKET");
				break;
			case 0xFE3F:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LEFT ANGLE BRACKET");
				break;
			case 0xFE40:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL RIGHT ANGLE BRACKET");
				break;
			case 0xFE41:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET");
				break;
			case 0xFE42:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET");
				break;
			case 0xFE43:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET");
				break;
			case 0xFE44:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET");
				break;
			case 0xFE45:
				strcpy_s(buf, buf_size, "SESAME DOT");
				break;
			case 0xFE46:
				strcpy_s(buf, buf_size, "WHITE SESAME DOT");
				break;
			case 0xFE47:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET");
				break;
			case 0xFE48:
				strcpy_s(buf, buf_size, "PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET");
				break;
			case 0xFE49:
				strcpy_s(buf, buf_size, "DASHED OVERLINE");
				break;
			case 0xFE4A:
				strcpy_s(buf, buf_size, "CENTRELINE OVERLINE");
				break;
			case 0xFE4B:
				strcpy_s(buf, buf_size, "WAVY OVERLINE");
				break;
			case 0xFE4C:
				strcpy_s(buf, buf_size, "DOUBLE WAVY OVERLINE");
				break;
			case 0xFE4D:
				strcpy_s(buf, buf_size, "DASHED LOW LINE");
				break;
			case 0xFE4E:
				strcpy_s(buf, buf_size, "CENTRELINE LOW LINE");
				break;
			case 0xFE4F:
				strcpy_s(buf, buf_size, "WAVY LOW LINE");
				break;
			case 0xFE50:
				strcpy_s(buf, buf_size, "SMALL COMMA");
				break;
			case 0xFE51:
				strcpy_s(buf, buf_size, "SMALL IDEOGRAPHIC COMMA");
				break;
			case 0xFE52:
				strcpy_s(buf, buf_size, "SMALL FULL STOP");
				break;
			case 0xFE54:
				strcpy_s(buf, buf_size, "SMALL SEMICOLON");
				break;
			case 0xFE55:
				strcpy_s(buf, buf_size, "SMALL COLON");
				break;
			case 0xFE56:
				strcpy_s(buf, buf_size, "SMALL QUESTION MARK");
				break;
			case 0xFE57:
				strcpy_s(buf, buf_size, "SMALL EXCLAMATION MARK");
				break;
			case 0xFE58:
				strcpy_s(buf, buf_size, "SMALL EM DASH");
				break;
			case 0xFE59:
				strcpy_s(buf, buf_size, "SMALL LEFT PARENTHESIS");
				break;
			case 0xFE5A:
				strcpy_s(buf, buf_size, "SMALL RIGHT PARENTHESIS");
				break;
			case 0xFE5B:
				strcpy_s(buf, buf_size, "SMALL LEFT CURLY BRACKET");
				break;
			case 0xFE5C:
				strcpy_s(buf, buf_size, "SMALL RIGHT CURLY BRACKET");
				break;
			case 0xFE5D:
				strcpy_s(buf, buf_size, "SMALL LEFT TORTOISE SHELL BRACKET");
				break;
			case 0xFE5E:
				strcpy_s(buf, buf_size, "SMALL RIGHT TORTOISE SHELL BRACKET");
				break;
			case 0xFE5F:
				strcpy_s(buf, buf_size, "SMALL NUMBER SIGN");
				break;
			case 0xFE60:
				strcpy_s(buf, buf_size, "SMALL AMPERSAND");
				break;
			case 0xFE61:
				strcpy_s(buf, buf_size, "SMALL ASTERISK");
				break;
			case 0xFE62:
				strcpy_s(buf, buf_size, "SMALL PLUS SIGN");
				break;
			case 0xFE63:
				strcpy_s(buf, buf_size, "SMALL HYPHEN-MINUS");
				break;
			case 0xFE64:
				strcpy_s(buf, buf_size, "SMALL LESS-THAN SIGN");
				break;
			case 0xFE65:
				strcpy_s(buf, buf_size, "SMALL GREATER-THAN SIGN");
				break;
			case 0xFE66:
				strcpy_s(buf, buf_size, "SMALL EQUALS SIGN");
				break;
			case 0xFE68:
				strcpy_s(buf, buf_size, "SMALL REVERSE SOLIDUS");
				break;
			case 0xFE69:
				strcpy_s(buf, buf_size, "SMALL DOLLAR SIGN");
				break;
			case 0xFE6A:
				strcpy_s(buf, buf_size, "SMALL PERCENT SIGN");
				break;
			case 0xFE6B:
				strcpy_s(buf, buf_size, "SMALL COMMERCIAL AT");
				break;
			case 0xFE70:
				strcpy_s(buf, buf_size, "ARABIC FATHATAN ISOLATED FORM");
				break;
			case 0xFE71:
				strcpy_s(buf, buf_size, "ARABIC TATWEEL WITH FATHATAN ABOVE");
				break;
			case 0xFE72:
				strcpy_s(buf, buf_size, "ARABIC DAMMATAN ISOLATED FORM");
				break;
			case 0xFE73:
				strcpy_s(buf, buf_size, "ARABIC TAIL FRAGMENT");
				break;
			case 0xFE74:
				strcpy_s(buf, buf_size, "ARABIC KASRATAN ISOLATED FORM");
				break;
			case 0xFE76:
				strcpy_s(buf, buf_size, "ARABIC FATHA ISOLATED FORM");
				break;
			case 0xFE77:
				strcpy_s(buf, buf_size, "ARABIC FATHA MEDIAL FORM");
				break;
			case 0xFE78:
				strcpy_s(buf, buf_size, "ARABIC DAMMA ISOLATED FORM");
				break;
			case 0xFE79:
				strcpy_s(buf, buf_size, "ARABIC DAMMA MEDIAL FORM");
				break;
			case 0xFE7A:
				strcpy_s(buf, buf_size, "ARABIC KASRA ISOLATED FORM");
				break;
			case 0xFE7B:
				strcpy_s(buf, buf_size, "ARABIC KASRA MEDIAL FORM");
				break;
			case 0xFE7C:
				strcpy_s(buf, buf_size, "ARABIC SHADDA ISOLATED FORM");
				break;
			case 0xFE7D:
				strcpy_s(buf, buf_size, "ARABIC SHADDA MEDIAL FORM");
				break;
			case 0xFE7E:
				strcpy_s(buf, buf_size, "ARABIC SUKUN ISOLATED FORM");
				break;
			case 0xFE7F:
				strcpy_s(buf, buf_size, "ARABIC SUKUN MEDIAL FORM");
				break;
			case 0xFE80:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAMZA ISOLATED FORM");
				break;
			case 0xFE81:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH MADDA ABOVE ISOLATED FORM");
				break;
			case 0xFE82:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH MADDA ABOVE FINAL FORM");
				break;
			case 0xFE83:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH HAMZA ABOVE ISOLATED FORM");
				break;
			case 0xFE84:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH HAMZA ABOVE FINAL FORM");
				break;
			case 0xFE85:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW WITH HAMZA ABOVE ISOLATED FORM");
				break;
			case 0xFE86:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW WITH HAMZA ABOVE FINAL FORM");
				break;
			case 0xFE87:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH HAMZA BELOW ISOLATED FORM");
				break;
			case 0xFE88:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF WITH HAMZA BELOW FINAL FORM");
				break;
			case 0xFE89:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH HAMZA ABOVE ISOLATED FORM");
				break;
			case 0xFE8A:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH HAMZA ABOVE FINAL FORM");
				break;
			case 0xFE8B:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH HAMZA ABOVE INITIAL FORM");
				break;
			case 0xFE8C:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH WITH HAMZA ABOVE MEDIAL FORM");
				break;
			case 0xFE8D:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF ISOLATED FORM");
				break;
			case 0xFE8E:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF FINAL FORM");
				break;
			case 0xFE8F:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH ISOLATED FORM");
				break;
			case 0xFE90:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH FINAL FORM");
				break;
			case 0xFE91:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH INITIAL FORM");
				break;
			case 0xFE92:
				strcpy_s(buf, buf_size, "ARABIC LETTER BEH MEDIAL FORM");
				break;
			case 0xFE93:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH MARBUTA ISOLATED FORM");
				break;
			case 0xFE94:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH MARBUTA FINAL FORM");
				break;
			case 0xFE95:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH ISOLATED FORM");
				break;
			case 0xFE96:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH FINAL FORM");
				break;
			case 0xFE97:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH INITIAL FORM");
				break;
			case 0xFE98:
				strcpy_s(buf, buf_size, "ARABIC LETTER TEH MEDIAL FORM");
				break;
			case 0xFE99:
				strcpy_s(buf, buf_size, "ARABIC LETTER THEH ISOLATED FORM");
				break;
			case 0xFE9A:
				strcpy_s(buf, buf_size, "ARABIC LETTER THEH FINAL FORM");
				break;
			case 0xFE9B:
				strcpy_s(buf, buf_size, "ARABIC LETTER THEH INITIAL FORM");
				break;
			case 0xFE9C:
				strcpy_s(buf, buf_size, "ARABIC LETTER THEH MEDIAL FORM");
				break;
			case 0xFE9D:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEEM ISOLATED FORM");
				break;
			case 0xFE9E:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEEM FINAL FORM");
				break;
			case 0xFE9F:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEEM INITIAL FORM");
				break;
			case 0xFEA0:
				strcpy_s(buf, buf_size, "ARABIC LETTER JEEM MEDIAL FORM");
				break;
			case 0xFEA1:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH ISOLATED FORM");
				break;
			case 0xFEA2:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH FINAL FORM");
				break;
			case 0xFEA3:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH INITIAL FORM");
				break;
			case 0xFEA4:
				strcpy_s(buf, buf_size, "ARABIC LETTER HAH MEDIAL FORM");
				break;
			case 0xFEA5:
				strcpy_s(buf, buf_size, "ARABIC LETTER KHAH ISOLATED FORM");
				break;
			case 0xFEA6:
				strcpy_s(buf, buf_size, "ARABIC LETTER KHAH FINAL FORM");
				break;
			case 0xFEA7:
				strcpy_s(buf, buf_size, "ARABIC LETTER KHAH INITIAL FORM");
				break;
			case 0xFEA8:
				strcpy_s(buf, buf_size, "ARABIC LETTER KHAH MEDIAL FORM");
				break;
			case 0xFEA9:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL ISOLATED FORM");
				break;
			case 0xFEAA:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAL FINAL FORM");
				break;
			case 0xFEAB:
				strcpy_s(buf, buf_size, "ARABIC LETTER THAL ISOLATED FORM");
				break;
			case 0xFEAC:
				strcpy_s(buf, buf_size, "ARABIC LETTER THAL FINAL FORM");
				break;
			case 0xFEAD:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH ISOLATED FORM");
				break;
			case 0xFEAE:
				strcpy_s(buf, buf_size, "ARABIC LETTER REH FINAL FORM");
				break;
			case 0xFEAF:
				strcpy_s(buf, buf_size, "ARABIC LETTER ZAIN ISOLATED FORM");
				break;
			case 0xFEB0:
				strcpy_s(buf, buf_size, "ARABIC LETTER ZAIN FINAL FORM");
				break;
			case 0xFEB1:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN ISOLATED FORM");
				break;
			case 0xFEB2:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN FINAL FORM");
				break;
			case 0xFEB3:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN INITIAL FORM");
				break;
			case 0xFEB4:
				strcpy_s(buf, buf_size, "ARABIC LETTER SEEN MEDIAL FORM");
				break;
			case 0xFEB5:
				strcpy_s(buf, buf_size, "ARABIC LETTER SHEEN ISOLATED FORM");
				break;
			case 0xFEB6:
				strcpy_s(buf, buf_size, "ARABIC LETTER SHEEN FINAL FORM");
				break;
			case 0xFEB7:
				strcpy_s(buf, buf_size, "ARABIC LETTER SHEEN INITIAL FORM");
				break;
			case 0xFEB8:
				strcpy_s(buf, buf_size, "ARABIC LETTER SHEEN MEDIAL FORM");
				break;
			case 0xFEB9:
				strcpy_s(buf, buf_size, "ARABIC LETTER SAD ISOLATED FORM");
				break;
			case 0xFEBA:
				strcpy_s(buf, buf_size, "ARABIC LETTER SAD FINAL FORM");
				break;
			case 0xFEBB:
				strcpy_s(buf, buf_size, "ARABIC LETTER SAD INITIAL FORM");
				break;
			case 0xFEBC:
				strcpy_s(buf, buf_size, "ARABIC LETTER SAD MEDIAL FORM");
				break;
			case 0xFEBD:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAD ISOLATED FORM");
				break;
			case 0xFEBE:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAD FINAL FORM");
				break;
			case 0xFEBF:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAD INITIAL FORM");
				break;
			case 0xFEC0:
				strcpy_s(buf, buf_size, "ARABIC LETTER DAD MEDIAL FORM");
				break;
			case 0xFEC1:
				strcpy_s(buf, buf_size, "ARABIC LETTER TAH ISOLATED FORM");
				break;
			case 0xFEC2:
				strcpy_s(buf, buf_size, "ARABIC LETTER TAH FINAL FORM");
				break;
			case 0xFEC3:
				strcpy_s(buf, buf_size, "ARABIC LETTER TAH INITIAL FORM");
				break;
			case 0xFEC4:
				strcpy_s(buf, buf_size, "ARABIC LETTER TAH MEDIAL FORM");
				break;
			case 0xFEC5:
				strcpy_s(buf, buf_size, "ARABIC LETTER ZAH ISOLATED FORM");
				break;
			case 0xFEC6:
				strcpy_s(buf, buf_size, "ARABIC LETTER ZAH FINAL FORM");
				break;
			case 0xFEC7:
				strcpy_s(buf, buf_size, "ARABIC LETTER ZAH INITIAL FORM");
				break;
			case 0xFEC8:
				strcpy_s(buf, buf_size, "ARABIC LETTER ZAH MEDIAL FORM");
				break;
			case 0xFEC9:
				strcpy_s(buf, buf_size, "ARABIC LETTER AIN ISOLATED FORM");
				break;
			case 0xFECA:
				strcpy_s(buf, buf_size, "ARABIC LETTER AIN FINAL FORM");
				break;
			case 0xFECB:
				strcpy_s(buf, buf_size, "ARABIC LETTER AIN INITIAL FORM");
				break;
			case 0xFECC:
				strcpy_s(buf, buf_size, "ARABIC LETTER AIN MEDIAL FORM");
				break;
			case 0xFECD:
				strcpy_s(buf, buf_size, "ARABIC LETTER GHAIN ISOLATED FORM");
				break;
			case 0xFECE:
				strcpy_s(buf, buf_size, "ARABIC LETTER GHAIN FINAL FORM");
				break;
			case 0xFECF:
				strcpy_s(buf, buf_size, "ARABIC LETTER GHAIN INITIAL FORM");
				break;
			case 0xFED0:
				strcpy_s(buf, buf_size, "ARABIC LETTER GHAIN MEDIAL FORM");
				break;
			case 0xFED1:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH ISOLATED FORM");
				break;
			case 0xFED2:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH FINAL FORM");
				break;
			case 0xFED3:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH INITIAL FORM");
				break;
			case 0xFED4:
				strcpy_s(buf, buf_size, "ARABIC LETTER FEH MEDIAL FORM");
				break;
			case 0xFED5:
				strcpy_s(buf, buf_size, "ARABIC LETTER QAF ISOLATED FORM");
				break;
			case 0xFED6:
				strcpy_s(buf, buf_size, "ARABIC LETTER QAF FINAL FORM");
				break;
			case 0xFED7:
				strcpy_s(buf, buf_size, "ARABIC LETTER QAF INITIAL FORM");
				break;
			case 0xFED8:
				strcpy_s(buf, buf_size, "ARABIC LETTER QAF MEDIAL FORM");
				break;
			case 0xFED9:
				strcpy_s(buf, buf_size, "ARABIC LETTER KAF ISOLATED FORM");
				break;
			case 0xFEDA:
				strcpy_s(buf, buf_size, "ARABIC LETTER KAF FINAL FORM");
				break;
			case 0xFEDB:
				strcpy_s(buf, buf_size, "ARABIC LETTER KAF INITIAL FORM");
				break;
			case 0xFEDC:
				strcpy_s(buf, buf_size, "ARABIC LETTER KAF MEDIAL FORM");
				break;
			case 0xFEDD:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM ISOLATED FORM");
				break;
			case 0xFEDE:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM FINAL FORM");
				break;
			case 0xFEDF:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM INITIAL FORM");
				break;
			case 0xFEE0:
				strcpy_s(buf, buf_size, "ARABIC LETTER LAM MEDIAL FORM");
				break;
			case 0xFEE1:
				strcpy_s(buf, buf_size, "ARABIC LETTER MEEM ISOLATED FORM");
				break;
			case 0xFEE2:
				strcpy_s(buf, buf_size, "ARABIC LETTER MEEM FINAL FORM");
				break;
			case 0xFEE3:
				strcpy_s(buf, buf_size, "ARABIC LETTER MEEM INITIAL FORM");
				break;
			case 0xFEE4:
				strcpy_s(buf, buf_size, "ARABIC LETTER MEEM MEDIAL FORM");
				break;
			case 0xFEE5:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON ISOLATED FORM");
				break;
			case 0xFEE6:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON FINAL FORM");
				break;
			case 0xFEE7:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON INITIAL FORM");
				break;
			case 0xFEE8:
				strcpy_s(buf, buf_size, "ARABIC LETTER NOON MEDIAL FORM");
				break;
			case 0xFEE9:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH ISOLATED FORM");
				break;
			case 0xFEEA:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH FINAL FORM");
				break;
			case 0xFEEB:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH INITIAL FORM");
				break;
			case 0xFEEC:
				strcpy_s(buf, buf_size, "ARABIC LETTER HEH MEDIAL FORM");
				break;
			case 0xFEED:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW ISOLATED FORM");
				break;
			case 0xFEEE:
				strcpy_s(buf, buf_size, "ARABIC LETTER WAW FINAL FORM");
				break;
			case 0xFEEF:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF MAKSURA ISOLATED FORM");
				break;
			case 0xFEF0:
				strcpy_s(buf, buf_size, "ARABIC LETTER ALEF MAKSURA FINAL FORM");
				break;
			case 0xFEF1:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH ISOLATED FORM");
				break;
			case 0xFEF2:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH FINAL FORM");
				break;
			case 0xFEF3:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH INITIAL FORM");
				break;
			case 0xFEF4:
				strcpy_s(buf, buf_size, "ARABIC LETTER YEH MEDIAL FORM");
				break;
			case 0xFEF5:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE ISOLATED FORM");
				break;
			case 0xFEF6:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH ALEF WITH MADDA ABOVE FINAL FORM");
				break;
			case 0xFEF7:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE ISOLATED FORM");
				break;
			case 0xFEF8:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH ALEF WITH HAMZA ABOVE FINAL FORM");
				break;
			case 0xFEF9:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW ISOLATED FORM");
				break;
			case 0xFEFA:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH ALEF WITH HAMZA BELOW FINAL FORM");
				break;
			case 0xFEFB:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH ALEF ISOLATED FORM");
				break;
			case 0xFEFC:
				strcpy_s(buf, buf_size, "ARABIC LIGATURE LAM WITH ALEF FINAL FORM");
				break;
			case 0xFEFF:
				strcpy_s(buf, buf_size, "ZERO WIDTH NO-BREAK SPACE");
				break;
			case 0xFF01:
				strcpy_s(buf, buf_size, "FULLWIDTH EXCLAMATION MARK");
				break;
			case 0xFF02:
				strcpy_s(buf, buf_size, "FULLWIDTH QUOTATION MARK");
				break;
			case 0xFF03:
				strcpy_s(buf, buf_size, "FULLWIDTH NUMBER SIGN");
				break;
			case 0xFF04:
				strcpy_s(buf, buf_size, "FULLWIDTH DOLLAR SIGN");
				break;
			case 0xFF05:
				strcpy_s(buf, buf_size, "FULLWIDTH PERCENT SIGN");
				break;
			case 0xFF06:
				strcpy_s(buf, buf_size, "FULLWIDTH AMPERSAND");
				break;
			case 0xFF07:
				strcpy_s(buf, buf_size, "FULLWIDTH APOSTROPHE");
				break;
			case 0xFF08:
				strcpy_s(buf, buf_size, "FULLWIDTH LEFT PARENTHESIS");
				break;
			case 0xFF09:
				strcpy_s(buf, buf_size, "FULLWIDTH RIGHT PARENTHESIS");
				break;
			case 0xFF0A:
				strcpy_s(buf, buf_size, "FULLWIDTH ASTERISK");
				break;
			case 0xFF0B:
				strcpy_s(buf, buf_size, "FULLWIDTH PLUS SIGN");
				break;
			case 0xFF0C:
				strcpy_s(buf, buf_size, "FULLWIDTH COMMA");
				break;
			case 0xFF0D:
				strcpy_s(buf, buf_size, "FULLWIDTH HYPHEN-MINUS");
				break;
			case 0xFF0E:
				strcpy_s(buf, buf_size, "FULLWIDTH FULL STOP");
				break;
			case 0xFF0F:
				strcpy_s(buf, buf_size, "FULLWIDTH SOLIDUS");
				break;
			case 0xFF10:
				strcpy_s(buf, buf_size, "FULLWIDTH DIGIT ZERO");
				break;
			case 0xFF11:
				strcpy_s(buf, buf_size, "FULLWIDTH DIGIT ONE");
				break;
			case 0xFF12:
				strcpy_s(buf, buf_size, "FULLWIDTH DIGIT TWO");
				break;
			case 0xFF13:
				strcpy_s(buf, buf_size, "FULLWIDTH DIGIT THREE");
				break;
			case 0xFF14:
				strcpy_s(buf, buf_size, "FULLWIDTH DIGIT FOUR");
				break;
			case 0xFF15:
				strcpy_s(buf, buf_size, "FULLWIDTH DIGIT FIVE");
				break;
			case 0xFF16:
				strcpy_s(buf, buf_size, "FULLWIDTH DIGIT SIX");
				break;
			case 0xFF17:
				strcpy_s(buf, buf_size, "FULLWIDTH DIGIT SEVEN");
				break;
			case 0xFF18:
				strcpy_s(buf, buf_size, "FULLWIDTH DIGIT EIGHT");
				break;
			case 0xFF19:
				strcpy_s(buf, buf_size, "FULLWIDTH DIGIT NINE");
				break;
			case 0xFF1A:
				strcpy_s(buf, buf_size, "FULLWIDTH COLON");
				break;
			case 0xFF1B:
				strcpy_s(buf, buf_size, "FULLWIDTH SEMICOLON");
				break;
			case 0xFF1C:
				strcpy_s(buf, buf_size, "FULLWIDTH LESS-THAN SIGN");
				break;
			case 0xFF1D:
				strcpy_s(buf, buf_size, "FULLWIDTH EQUALS SIGN");
				break;
			case 0xFF1E:
				strcpy_s(buf, buf_size, "FULLWIDTH GREATER-THAN SIGN");
				break;
			case 0xFF1F:
				strcpy_s(buf, buf_size, "FULLWIDTH QUESTION MARK");
				break;
			case 0xFF20:
				strcpy_s(buf, buf_size, "FULLWIDTH COMMERCIAL AT");
				break;
			case 0xFF21:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER A");
				break;
			case 0xFF22:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER B");
				break;
			case 0xFF23:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER C");
				break;
			case 0xFF24:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER D");
				break;
			case 0xFF25:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER E");
				break;
			case 0xFF26:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER F");
				break;
			case 0xFF27:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER G");
				break;
			case 0xFF28:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER H");
				break;
			case 0xFF29:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER I");
				break;
			case 0xFF2A:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER J");
				break;
			case 0xFF2B:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER K");
				break;
			case 0xFF2C:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER L");
				break;
			case 0xFF2D:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER M");
				break;
			case 0xFF2E:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER N");
				break;
			case 0xFF2F:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER O");
				break;
			case 0xFF30:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER P");
				break;
			case 0xFF31:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER Q");
				break;
			case 0xFF32:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER R");
				break;
			case 0xFF33:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER S");
				break;
			case 0xFF34:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER T");
				break;
			case 0xFF35:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER U");
				break;
			case 0xFF36:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER V");
				break;
			case 0xFF37:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER W");
				break;
			case 0xFF38:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER X");
				break;
			case 0xFF39:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER Y");
				break;
			case 0xFF3A:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN CAPITAL LETTER Z");
				break;
			case 0xFF3B:
				strcpy_s(buf, buf_size, "FULLWIDTH LEFT SQUARE BRACKET");
				break;
			case 0xFF3C:
				strcpy_s(buf, buf_size, "FULLWIDTH REVERSE SOLIDUS");
				break;
			case 0xFF3D:
				strcpy_s(buf, buf_size, "FULLWIDTH RIGHT SQUARE BRACKET");
				break;
			case 0xFF3E:
				strcpy_s(buf, buf_size, "FULLWIDTH CIRCUMFLEX ACCENT");
				break;
			case 0xFF3F:
				strcpy_s(buf, buf_size, "FULLWIDTH LOW LINE");
				break;
			case 0xFF40:
				strcpy_s(buf, buf_size, "FULLWIDTH GRAVE ACCENT");
				break;
			case 0xFF41:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER A");
				break;
			case 0xFF42:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER B");
				break;
			case 0xFF43:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER C");
				break;
			case 0xFF44:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER D");
				break;
			case 0xFF45:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER E");
				break;
			case 0xFF46:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER F");
				break;
			case 0xFF47:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER G");
				break;
			case 0xFF48:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER H");
				break;
			case 0xFF49:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER I");
				break;
			case 0xFF4A:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER J");
				break;
			case 0xFF4B:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER K");
				break;
			case 0xFF4C:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER L");
				break;
			case 0xFF4D:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER M");
				break;
			case 0xFF4E:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER N");
				break;
			case 0xFF4F:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER O");
				break;
			case 0xFF50:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER P");
				break;
			case 0xFF51:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER Q");
				break;
			case 0xFF52:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER R");
				break;
			case 0xFF53:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER S");
				break;
			case 0xFF54:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER T");
				break;
			case 0xFF55:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER U");
				break;
			case 0xFF56:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER V");
				break;
			case 0xFF57:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER W");
				break;
			case 0xFF58:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER X");
				break;
			case 0xFF59:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER Y");
				break;
			case 0xFF5A:
				strcpy_s(buf, buf_size, "FULLWIDTH LATIN SMALL LETTER Z");
				break;
			case 0xFF5B:
				strcpy_s(buf, buf_size, "FULLWIDTH LEFT CURLY BRACKET");
				break;
			case 0xFF5C:
				strcpy_s(buf, buf_size, "FULLWIDTH VERTICAL LINE");
				break;
			case 0xFF5D:
				strcpy_s(buf, buf_size, "FULLWIDTH RIGHT CURLY BRACKET");
				break;
			case 0xFF5E:
				strcpy_s(buf, buf_size, "FULLWIDTH TILDE");
				break;
			case 0xFF5F:
				strcpy_s(buf, buf_size, "FULLWIDTH LEFT WHITE PARENTHESIS");
				break;
			case 0xFF60:
				strcpy_s(buf, buf_size, "FULLWIDTH RIGHT WHITE PARENTHESIS");
				break;
			case 0xFF61:
				strcpy_s(buf, buf_size, "HALFWIDTH IDEOGRAPHIC FULL STOP");
				break;
			case 0xFF62:
				strcpy_s(buf, buf_size, "HALFWIDTH LEFT CORNER BRACKET");
				break;
			case 0xFF63:
				strcpy_s(buf, buf_size, "HALFWIDTH RIGHT CORNER BRACKET");
				break;
			case 0xFF64:
				strcpy_s(buf, buf_size, "HALFWIDTH IDEOGRAPHIC COMMA");
				break;
			case 0xFF65:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA MIDDLE DOT");
				break;
			case 0xFF66:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER WO");
				break;
			case 0xFF67:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SMALL A");
				break;
			case 0xFF68:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SMALL I");
				break;
			case 0xFF69:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SMALL U");
				break;
			case 0xFF6A:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SMALL E");
				break;
			case 0xFF6B:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SMALL O");
				break;
			case 0xFF6C:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SMALL YA");
				break;
			case 0xFF6D:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SMALL YU");
				break;
			case 0xFF6E:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SMALL YO");
				break;
			case 0xFF6F:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SMALL TU");
				break;
			case 0xFF70:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA-HIRAGANA PROLONGED SOUND MARK");
				break;
			case 0xFF71:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER A");
				break;
			case 0xFF72:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER I");
				break;
			case 0xFF73:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER U");
				break;
			case 0xFF74:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER E");
				break;
			case 0xFF75:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER O");
				break;
			case 0xFF76:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER KA");
				break;
			case 0xFF77:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER KI");
				break;
			case 0xFF78:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER KU");
				break;
			case 0xFF79:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER KE");
				break;
			case 0xFF7A:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER KO");
				break;
			case 0xFF7B:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SA");
				break;
			case 0xFF7C:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SI");
				break;
			case 0xFF7D:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SU");
				break;
			case 0xFF7E:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SE");
				break;
			case 0xFF7F:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER SO");
				break;
			case 0xFF80:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER TA");
				break;
			case 0xFF81:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER TI");
				break;
			case 0xFF82:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER TU");
				break;
			case 0xFF83:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER TE");
				break;
			case 0xFF84:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER TO");
				break;
			case 0xFF85:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER NA");
				break;
			case 0xFF86:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER NI");
				break;
			case 0xFF87:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER NU");
				break;
			case 0xFF88:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER NE");
				break;
			case 0xFF89:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER NO");
				break;
			case 0xFF8A:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER HA");
				break;
			case 0xFF8B:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER HI");
				break;
			case 0xFF8C:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER HU");
				break;
			case 0xFF8D:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER HE");
				break;
			case 0xFF8E:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER HO");
				break;
			case 0xFF8F:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER MA");
				break;
			case 0xFF90:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER MI");
				break;
			case 0xFF91:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER MU");
				break;
			case 0xFF92:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER ME");
				break;
			case 0xFF93:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER MO");
				break;
			case 0xFF94:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER YA");
				break;
			case 0xFF95:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER YU");
				break;
			case 0xFF96:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER YO");
				break;
			case 0xFF97:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER RA");
				break;
			case 0xFF98:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER RI");
				break;
			case 0xFF99:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER RU");
				break;
			case 0xFF9A:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER RE");
				break;
			case 0xFF9B:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER RO");
				break;
			case 0xFF9C:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER WA");
				break;
			case 0xFF9D:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA LETTER N");
				break;
			case 0xFF9E:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA VOICED SOUND MARK");
				break;
			case 0xFF9F:
				strcpy_s(buf, buf_size, "HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK");
				break;
			case 0xFFA0:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL FILLER");
				break;
			case 0xFFA1:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER KIYEOK");
				break;
			case 0xFFA2:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER SSANGKIYEOK");
				break;
			case 0xFFA3:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER KIYEOK-SIOS");
				break;
			case 0xFFA4:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER NIEUN");
				break;
			case 0xFFA5:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER NIEUN-CIEUC");
				break;
			case 0xFFA6:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER NIEUN-HIEUH");
				break;
			case 0xFFA7:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER TIKEUT");
				break;
			case 0xFFA8:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER SSANGTIKEUT");
				break;
			case 0xFFA9:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER RIEUL");
				break;
			case 0xFFAA:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER RIEUL-KIYEOK");
				break;
			case 0xFFAB:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER RIEUL-MIEUM");
				break;
			case 0xFFAC:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER RIEUL-PIEUP");
				break;
			case 0xFFAD:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER RIEUL-SIOS");
				break;
			case 0xFFAE:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER RIEUL-THIEUTH");
				break;
			case 0xFFAF:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER RIEUL-PHIEUPH");
				break;
			case 0xFFB0:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER RIEUL-HIEUH");
				break;
			case 0xFFB1:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER MIEUM");
				break;
			case 0xFFB2:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER PIEUP");
				break;
			case 0xFFB3:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER SSANGPIEUP");
				break;
			case 0xFFB4:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER PIEUP-SIOS");
				break;
			case 0xFFB5:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER SIOS");
				break;
			case 0xFFB6:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER SSANGSIOS");
				break;
			case 0xFFB7:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER IEUNG");
				break;
			case 0xFFB8:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER CIEUC");
				break;
			case 0xFFB9:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER SSANGCIEUC");
				break;
			case 0xFFBA:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER CHIEUCH");
				break;
			case 0xFFBB:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER KHIEUKH");
				break;
			case 0xFFBC:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER THIEUTH");
				break;
			case 0xFFBD:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER PHIEUPH");
				break;
			case 0xFFBE:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER HIEUH");
				break;
			case 0xFFC2:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER A");
				break;
			case 0xFFC3:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER AE");
				break;
			case 0xFFC4:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER YA");
				break;
			case 0xFFC5:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER YAE");
				break;
			case 0xFFC6:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER EO");
				break;
			case 0xFFC7:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER E");
				break;
			case 0xFFCA:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER YEO");
				break;
			case 0xFFCB:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER YE");
				break;
			case 0xFFCC:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER O");
				break;
			case 0xFFCD:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER WA");
				break;
			case 0xFFCE:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER WAE");
				break;
			case 0xFFCF:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER OE");
				break;
			case 0xFFD2:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER YO");
				break;
			case 0xFFD3:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER U");
				break;
			case 0xFFD4:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER WEO");
				break;
			case 0xFFD5:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER WE");
				break;
			case 0xFFD6:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER WI");
				break;
			case 0xFFD7:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER YU");
				break;
			case 0xFFDA:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER EU");
				break;
			case 0xFFDB:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER YI");
				break;
			case 0xFFDC:
				strcpy_s(buf, buf_size, "HALFWIDTH HANGUL LETTER I");
				break;
			case 0xFFE0:
				strcpy_s(buf, buf_size, "FULLWIDTH CENT SIGN");
				break;
			case 0xFFE1:
				strcpy_s(buf, buf_size, "FULLWIDTH POUND SIGN");
				break;
			case 0xFFE2:
				strcpy_s(buf, buf_size, "FULLWIDTH NOT SIGN");
				break;
			case 0xFFE3:
				strcpy_s(buf, buf_size, "FULLWIDTH MACRON");
				break;
			case 0xFFE4:
				strcpy_s(buf, buf_size, "FULLWIDTH BROKEN BAR");
				break;
			case 0xFFE5:
				strcpy_s(buf, buf_size, "FULLWIDTH YEN SIGN");
				break;
			case 0xFFE6:
				strcpy_s(buf, buf_size, "FULLWIDTH WON SIGN");
				break;
			case 0xFFE8:
				strcpy_s(buf, buf_size, "HALFWIDTH FORMS LIGHT VERTICAL");
				break;
			case 0xFFE9:
				strcpy_s(buf, buf_size, "HALFWIDTH LEFTWARDS ARROW");
				break;
			case 0xFFEA:
				strcpy_s(buf, buf_size, "HALFWIDTH UPWARDS ARROW");
				break;
			case 0xFFEB:
				strcpy_s(buf, buf_size, "HALFWIDTH RIGHTWARDS ARROW");
				break;
			case 0xFFEC:
				strcpy_s(buf, buf_size, "HALFWIDTH DOWNWARDS ARROW");
				break;
			case 0xFFED:
				strcpy_s(buf, buf_size, "HALFWIDTH BLACK SQUARE");
				break;
			case 0xFFEE:
				strcpy_s(buf, buf_size, "HALFWIDTH WHITE CIRCLE");
				break;
			case 0xFFF9:
				strcpy_s(buf, buf_size, "INTERLINEAR ANNOTATION ANCHOR");
				break;
			case 0xFFFA:
				strcpy_s(buf, buf_size, "INTERLINEAR ANNOTATION SEPARATOR");
				break;
			case 0xFFFB:
				strcpy_s(buf, buf_size, "INTERLINEAR ANNOTATION TERMINATOR");
				break;
			case 0xFFFC:
				strcpy_s(buf, buf_size, "OBJECT REPLACEMENT CHARACTER");
				break;
			case 0xFFFD:
				strcpy_s(buf, buf_size, "REPLACEMENT CHARACTER");
				break;
			case 0x10000:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B008 A");
				break;
			case 0x10001:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B038 E");
				break;
			case 0x10002:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B028 I");
				break;
			case 0x10003:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B061 O");
				break;
			case 0x10004:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B010 U");
				break;
			case 0x10005:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B001 DA");
				break;
			case 0x10006:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B045 DE");
				break;
			case 0x10007:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B007 DI");
				break;
			case 0x10008:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B014 DO");
				break;
			case 0x10009:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B051 DU");
				break;
			case 0x1000A:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B057 JA");
				break;
			case 0x1000B:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B046 JE");
				break;
			case 0x1000D:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B036 JO");
				break;
			case 0x1000E:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B065 JU");
				break;
			case 0x1000F:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B077 KA");
				break;
			case 0x10010:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B044 KE");
				break;
			case 0x10011:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B067 KI");
				break;
			case 0x10012:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B070 KO");
				break;
			case 0x10013:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B081 KU");
				break;
			case 0x10014:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B080 MA");
				break;
			case 0x10015:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B013 ME");
				break;
			case 0x10016:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B073 MI");
				break;
			case 0x10017:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B015 MO");
				break;
			case 0x10018:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B023 MU");
				break;
			case 0x10019:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B006 NA");
				break;
			case 0x1001A:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B024 NE");
				break;
			case 0x1001B:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B030 NI");
				break;
			case 0x1001C:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B052 NO");
				break;
			case 0x1001D:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B055 NU");
				break;
			case 0x1001E:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B003 PA");
				break;
			case 0x1001F:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B072 PE");
				break;
			case 0x10020:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B039 PI");
				break;
			case 0x10021:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B011 PO");
				break;
			case 0x10022:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B050 PU");
				break;
			case 0x10023:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B016 QA");
				break;
			case 0x10024:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B078 QE");
				break;
			case 0x10025:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B021 QI");
				break;
			case 0x10026:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B032 QO");
				break;
			case 0x10028:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B060 RA");
				break;
			case 0x10029:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B027 RE");
				break;
			case 0x1002A:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B053 RI");
				break;
			case 0x1002B:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B002 RO");
				break;
			case 0x1002C:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B026 RU");
				break;
			case 0x1002D:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B031 SA");
				break;
			case 0x1002E:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B009 SE");
				break;
			case 0x1002F:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B041 SI");
				break;
			case 0x10030:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B012 SO");
				break;
			case 0x10031:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B058 SU");
				break;
			case 0x10032:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B059 TA");
				break;
			case 0x10033:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B004 TE");
				break;
			case 0x10034:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B037 TI");
				break;
			case 0x10035:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B005 TO");
				break;
			case 0x10036:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B069 TU");
				break;
			case 0x10037:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B054 WA");
				break;
			case 0x10038:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B075 WE");
				break;
			case 0x10039:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B040 WI");
				break;
			case 0x1003A:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B042 WO");
				break;
			case 0x1003C:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B017 ZA");
				break;
			case 0x1003D:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B074 ZE");
				break;
			case 0x1003F:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B020 ZO");
				break;
			case 0x10040:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B025 A2");
				break;
			case 0x10041:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B043 A3");
				break;
			case 0x10042:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B085 AU");
				break;
			case 0x10043:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B071 DWE");
				break;
			case 0x10044:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B090 DWO");
				break;
			case 0x10045:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B048 NWA");
				break;
			case 0x10046:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B029 PU2");
				break;
			case 0x10047:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B062 PTE");
				break;
			case 0x10048:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B076 RA2");
				break;
			case 0x10049:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B033 RA3");
				break;
			case 0x1004A:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B068 RO2");
				break;
			case 0x1004B:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B066 TA2");
				break;
			case 0x1004C:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B087 TWE");
				break;
			case 0x1004D:
				strcpy_s(buf, buf_size, "LINEAR B SYLLABLE B091 TWO");
				break;
			case 0x10050:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B018");
				break;
			case 0x10051:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B019");
				break;
			case 0x10052:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B022");
				break;
			case 0x10053:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B034");
				break;
			case 0x10054:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B047");
				break;
			case 0x10055:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B049");
				break;
			case 0x10056:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B056");
				break;
			case 0x10057:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B063");
				break;
			case 0x10058:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B064");
				break;
			case 0x10059:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B079");
				break;
			case 0x1005A:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B082");
				break;
			case 0x1005B:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B083");
				break;
			case 0x1005C:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B086");
				break;
			case 0x1005D:
				strcpy_s(buf, buf_size, "LINEAR B SYMBOL B089");
				break;
			case 0x10080:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B100 MAN");
				break;
			case 0x10081:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B102 WOMAN");
				break;
			case 0x10082:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B104 DEER");
				break;
			case 0x10083:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B105 EQUID");
				break;
			case 0x10084:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B105F MARE");
				break;
			case 0x10085:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B105M STALLION");
				break;
			case 0x10086:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B106F EWE");
				break;
			case 0x10087:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B106M RAM");
				break;
			case 0x10088:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B107F SHE-GOAT");
				break;
			case 0x10089:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B107M HE-GOAT");
				break;
			case 0x1008A:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B108F SOW");
				break;
			case 0x1008B:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B108M BOAR");
				break;
			case 0x1008C:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B109F COW");
				break;
			case 0x1008D:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B109M BULL");
				break;
			case 0x1008E:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B120 WHEAT");
				break;
			case 0x1008F:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B121 BARLEY");
				break;
			case 0x10090:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B122 OLIVE");
				break;
			case 0x10091:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B123 SPICE");
				break;
			case 0x10092:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B125 CYPERUS");
				break;
			case 0x10093:
				strcpy_s(buf, buf_size, "LINEAR B MONOGRAM B127 KAPO");
				break;
			case 0x10094:
				strcpy_s(buf, buf_size, "LINEAR B MONOGRAM B128 KANAKO");
				break;
			case 0x10095:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B130 OIL");
				break;
			case 0x10096:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B131 WINE");
				break;
			case 0x10097:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B132");
				break;
			case 0x10098:
				strcpy_s(buf, buf_size, "LINEAR B MONOGRAM B133 AREPA");
				break;
			case 0x10099:
				strcpy_s(buf, buf_size, "LINEAR B MONOGRAM B135 MERI");
				break;
			case 0x1009A:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B140 BRONZE");
				break;
			case 0x1009B:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B141 GOLD");
				break;
			case 0x1009C:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B142");
				break;
			case 0x1009D:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B145 WOOL");
				break;
			case 0x1009E:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B146");
				break;
			case 0x1009F:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B150");
				break;
			case 0x100A0:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B151 HORN");
				break;
			case 0x100A1:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B152");
				break;
			case 0x100A2:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B153");
				break;
			case 0x100A3:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B154");
				break;
			case 0x100A4:
				strcpy_s(buf, buf_size, "LINEAR B MONOGRAM B156 TURO2");
				break;
			case 0x100A5:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B157");
				break;
			case 0x100A6:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B158");
				break;
			case 0x100A7:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B159 CLOTH");
				break;
			case 0x100A8:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B160");
				break;
			case 0x100A9:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B161");
				break;
			case 0x100AA:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B162 GARMENT");
				break;
			case 0x100AB:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B163 ARMOUR");
				break;
			case 0x100AC:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B164");
				break;
			case 0x100AD:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B165");
				break;
			case 0x100AE:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B166");
				break;
			case 0x100AF:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B167");
				break;
			case 0x100B0:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B168");
				break;
			case 0x100B1:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B169");
				break;
			case 0x100B2:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B170");
				break;
			case 0x100B3:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B171");
				break;
			case 0x100B4:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B172");
				break;
			case 0x100B5:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B173 MONTH");
				break;
			case 0x100B6:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B174");
				break;
			case 0x100B7:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B176 TREE");
				break;
			case 0x100B8:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B177");
				break;
			case 0x100B9:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B178");
				break;
			case 0x100BA:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B179");
				break;
			case 0x100BB:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B180");
				break;
			case 0x100BC:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B181");
				break;
			case 0x100BD:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B182");
				break;
			case 0x100BE:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B183");
				break;
			case 0x100BF:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B184");
				break;
			case 0x100C0:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B185");
				break;
			case 0x100C1:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B189");
				break;
			case 0x100C2:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B190");
				break;
			case 0x100C3:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B191 HELMET");
				break;
			case 0x100C4:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B220 FOOTSTOOL");
				break;
			case 0x100C5:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B225 BATHTUB");
				break;
			case 0x100C6:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B230 SPEAR");
				break;
			case 0x100C7:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B231 ARROW");
				break;
			case 0x100C8:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B232");
				break;
			case 0x100C9:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B233 SWORD");
				break;
			case 0x100CA:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B234");
				break;
			case 0x100CB:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B236");
				break;
			case 0x100CC:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B240 WHEELED CHARIOT");
				break;
			case 0x100CD:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B241 CHARIOT");
				break;
			case 0x100CE:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B242 CHARIOT FRAME");
				break;
			case 0x100CF:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B243 WHEEL");
				break;
			case 0x100D0:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B245");
				break;
			case 0x100D1:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B246");
				break;
			case 0x100D2:
				strcpy_s(buf, buf_size, "LINEAR B MONOGRAM B247 DIPTE");
				break;
			case 0x100D3:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B248");
				break;
			case 0x100D4:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B249");
				break;
			case 0x100D5:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B251");
				break;
			case 0x100D6:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B252");
				break;
			case 0x100D7:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B253");
				break;
			case 0x100D8:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B254 DART");
				break;
			case 0x100D9:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B255");
				break;
			case 0x100DA:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B256");
				break;
			case 0x100DB:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B257");
				break;
			case 0x100DC:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B258");
				break;
			case 0x100DD:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM B259");
				break;
			case 0x100DE:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B155");
				break;
			case 0x100DF:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B200");
				break;
			case 0x100E0:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B201");
				break;
			case 0x100E1:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B202");
				break;
			case 0x100E2:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B203");
				break;
			case 0x100E3:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B204");
				break;
			case 0x100E4:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B205");
				break;
			case 0x100E5:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B206");
				break;
			case 0x100E6:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B207");
				break;
			case 0x100E7:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B208");
				break;
			case 0x100E8:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B209");
				break;
			case 0x100E9:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B210");
				break;
			case 0x100EA:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B211");
				break;
			case 0x100EB:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B212");
				break;
			case 0x100EC:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B213");
				break;
			case 0x100ED:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B214");
				break;
			case 0x100EE:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B215");
				break;
			case 0x100EF:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B216");
				break;
			case 0x100F0:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B217");
				break;
			case 0x100F1:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B218");
				break;
			case 0x100F2:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B219");
				break;
			case 0x100F3:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B221");
				break;
			case 0x100F4:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B222");
				break;
			case 0x100F5:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B226");
				break;
			case 0x100F6:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B227");
				break;
			case 0x100F7:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B228");
				break;
			case 0x100F8:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B229");
				break;
			case 0x100F9:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B250");
				break;
			case 0x100FA:
				strcpy_s(buf, buf_size, "LINEAR B IDEOGRAM VESSEL B305");
				break;
			case 0x10100:
				strcpy_s(buf, buf_size, "AEGEAN WORD SEPARATOR LINE");
				break;
			case 0x10101:
				strcpy_s(buf, buf_size, "AEGEAN WORD SEPARATOR DOT");
				break;
			case 0x10102:
				strcpy_s(buf, buf_size, "AEGEAN CHECK MARK");
				break;
			case 0x10107:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER ONE");
				break;
			case 0x10108:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER TWO");
				break;
			case 0x10109:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER THREE");
				break;
			case 0x1010A:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER FOUR");
				break;
			case 0x1010B:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER FIVE");
				break;
			case 0x1010C:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER SIX");
				break;
			case 0x1010D:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER SEVEN");
				break;
			case 0x1010E:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER EIGHT");
				break;
			case 0x1010F:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER NINE");
				break;
			case 0x10110:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER TEN");
				break;
			case 0x10111:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER TWENTY");
				break;
			case 0x10112:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER THIRTY");
				break;
			case 0x10113:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER FORTY");
				break;
			case 0x10114:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER FIFTY");
				break;
			case 0x10115:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER SIXTY");
				break;
			case 0x10116:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER SEVENTY");
				break;
			case 0x10117:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER EIGHTY");
				break;
			case 0x10118:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER NINETY");
				break;
			case 0x10119:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER ONE HUNDRED");
				break;
			case 0x1011A:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER TWO HUNDRED");
				break;
			case 0x1011B:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER THREE HUNDRED");
				break;
			case 0x1011C:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER FOUR HUNDRED");
				break;
			case 0x1011D:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER FIVE HUNDRED");
				break;
			case 0x1011E:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER SIX HUNDRED");
				break;
			case 0x1011F:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER SEVEN HUNDRED");
				break;
			case 0x10120:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER EIGHT HUNDRED");
				break;
			case 0x10121:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER NINE HUNDRED");
				break;
			case 0x10122:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER ONE THOUSAND");
				break;
			case 0x10123:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER TWO THOUSAND");
				break;
			case 0x10124:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER THREE THOUSAND");
				break;
			case 0x10125:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER FOUR THOUSAND");
				break;
			case 0x10126:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER FIVE THOUSAND");
				break;
			case 0x10127:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER SIX THOUSAND");
				break;
			case 0x10128:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER SEVEN THOUSAND");
				break;
			case 0x10129:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER EIGHT THOUSAND");
				break;
			case 0x1012A:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER NINE THOUSAND");
				break;
			case 0x1012B:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER TEN THOUSAND");
				break;
			case 0x1012C:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER TWENTY THOUSAND");
				break;
			case 0x1012D:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER THIRTY THOUSAND");
				break;
			case 0x1012E:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER FORTY THOUSAND");
				break;
			case 0x1012F:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER FIFTY THOUSAND");
				break;
			case 0x10130:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER SIXTY THOUSAND");
				break;
			case 0x10131:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER SEVENTY THOUSAND");
				break;
			case 0x10132:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER EIGHTY THOUSAND");
				break;
			case 0x10133:
				strcpy_s(buf, buf_size, "AEGEAN NUMBER NINETY THOUSAND");
				break;
			case 0x10137:
				strcpy_s(buf, buf_size, "AEGEAN WEIGHT BASE UNIT");
				break;
			case 0x10138:
				strcpy_s(buf, buf_size, "AEGEAN WEIGHT FIRST SUBUNIT");
				break;
			case 0x10139:
				strcpy_s(buf, buf_size, "AEGEAN WEIGHT SECOND SUBUNIT");
				break;
			case 0x1013A:
				strcpy_s(buf, buf_size, "AEGEAN WEIGHT THIRD SUBUNIT");
				break;
			case 0x1013B:
				strcpy_s(buf, buf_size, "AEGEAN WEIGHT FOURTH SUBUNIT");
				break;
			case 0x1013C:
				strcpy_s(buf, buf_size, "AEGEAN DRY MEASURE FIRST SUBUNIT");
				break;
			case 0x1013D:
				strcpy_s(buf, buf_size, "AEGEAN LIQUID MEASURE FIRST SUBUNIT");
				break;
			case 0x1013E:
				strcpy_s(buf, buf_size, "AEGEAN MEASURE SECOND SUBUNIT");
				break;
			case 0x1013F:
				strcpy_s(buf, buf_size, "AEGEAN MEASURE THIRD SUBUNIT");
				break;
			case 0x10140:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC ONE QUARTER");
				break;
			case 0x10141:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC ONE HALF");
				break;
			case 0x10142:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC ONE DRACHMA");
				break;
			case 0x10143:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIVE");
				break;
			case 0x10144:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIFTY");
				break;
			case 0x10145:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIVE HUNDRED");
				break;
			case 0x10146:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIVE THOUSAND");
				break;
			case 0x10147:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIFTY THOUSAND");
				break;
			case 0x10148:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIVE TALENTS");
				break;
			case 0x10149:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC TEN TALENTS");
				break;
			case 0x1014A:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIFTY TALENTS");
				break;
			case 0x1014B:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC ONE HUNDRED TALENTS");
				break;
			case 0x1014C:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIVE HUNDRED TALENTS");
				break;
			case 0x1014D:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC ONE THOUSAND TALENTS");
				break;
			case 0x1014E:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIVE THOUSAND TALENTS");
				break;
			case 0x1014F:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIVE STATERS");
				break;
			case 0x10150:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC TEN STATERS");
				break;
			case 0x10151:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIFTY STATERS");
				break;
			case 0x10152:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC ONE HUNDRED STATERS");
				break;
			case 0x10153:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIVE HUNDRED STATERS");
				break;
			case 0x10154:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS");
				break;
			case 0x10155:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC TEN THOUSAND STATERS");
				break;
			case 0x10156:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC FIFTY THOUSAND STATERS");
				break;
			case 0x10157:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC ATTIC TEN MNAS");
				break;
			case 0x10158:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC HERAEUM ONE PLETHRON");
				break;
			case 0x10159:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC THESPIAN ONE");
				break;
			case 0x1015A:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC HERMIONIAN ONE");
				break;
			case 0x1015B:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC EPIDAUREAN TWO");
				break;
			case 0x1015C:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC THESPIAN TWO");
				break;
			case 0x1015D:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC CYRENAIC TWO DRACHMAS");
				break;
			case 0x1015E:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC EPIDAUREAN TWO DRACHMAS");
				break;
			case 0x1015F:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC TROEZENIAN FIVE");
				break;
			case 0x10160:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC TROEZENIAN TEN");
				break;
			case 0x10161:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC TROEZENIAN TEN ALTERNATE FORM");
				break;
			case 0x10162:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC HERMIONIAN TEN");
				break;
			case 0x10163:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC MESSENIAN TEN");
				break;
			case 0x10164:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC THESPIAN TEN");
				break;
			case 0x10165:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC THESPIAN THIRTY");
				break;
			case 0x10166:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC TROEZENIAN FIFTY");
				break;
			case 0x10167:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC TROEZENIAN FIFTY ALTERNATE FORM");
				break;
			case 0x10168:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC HERMIONIAN FIFTY");
				break;
			case 0x10169:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC THESPIAN FIFTY");
				break;
			case 0x1016A:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC THESPIAN ONE HUNDRED");
				break;
			case 0x1016B:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC THESPIAN THREE HUNDRED");
				break;
			case 0x1016C:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC EPIDAUREAN FIVE HUNDRED");
				break;
			case 0x1016D:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC TROEZENIAN FIVE HUNDRED");
				break;
			case 0x1016E:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC THESPIAN FIVE HUNDRED");
				break;
			case 0x1016F:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC CARYSTIAN FIVE HUNDRED");
				break;
			case 0x10170:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC NAXIAN FIVE HUNDRED");
				break;
			case 0x10171:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC THESPIAN ONE THOUSAND");
				break;
			case 0x10172:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC THESPIAN FIVE THOUSAND");
				break;
			case 0x10173:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC DELPHIC FIVE MNAS");
				break;
			case 0x10174:
				strcpy_s(buf, buf_size, "GREEK ACROPHONIC STRATIAN FIFTY MNAS");
				break;
			case 0x10175:
				strcpy_s(buf, buf_size, "GREEK ONE HALF SIGN");
				break;
			case 0x10176:
				strcpy_s(buf, buf_size, "GREEK ONE HALF SIGN ALTERNATE FORM");
				break;
			case 0x10177:
				strcpy_s(buf, buf_size, "GREEK TWO THIRDS SIGN");
				break;
			case 0x10178:
				strcpy_s(buf, buf_size, "GREEK THREE QUARTERS SIGN");
				break;
			case 0x10179:
				strcpy_s(buf, buf_size, "GREEK YEAR SIGN");
				break;
			case 0x1017A:
				strcpy_s(buf, buf_size, "GREEK TALENT SIGN");
				break;
			case 0x1017B:
				strcpy_s(buf, buf_size, "GREEK DRACHMA SIGN");
				break;
			case 0x1017C:
				strcpy_s(buf, buf_size, "GREEK OBOL SIGN");
				break;
			case 0x1017D:
				strcpy_s(buf, buf_size, "GREEK TWO OBOLS SIGN");
				break;
			case 0x1017E:
				strcpy_s(buf, buf_size, "GREEK THREE OBOLS SIGN");
				break;
			case 0x1017F:
				strcpy_s(buf, buf_size, "GREEK FOUR OBOLS SIGN");
				break;
			case 0x10180:
				strcpy_s(buf, buf_size, "GREEK FIVE OBOLS SIGN");
				break;
			case 0x10181:
				strcpy_s(buf, buf_size, "GREEK METRETES SIGN");
				break;
			case 0x10182:
				strcpy_s(buf, buf_size, "GREEK KYATHOS BASE SIGN");
				break;
			case 0x10183:
				strcpy_s(buf, buf_size, "GREEK LITRA SIGN");
				break;
			case 0x10184:
				strcpy_s(buf, buf_size, "GREEK OUNKIA SIGN");
				break;
			case 0x10185:
				strcpy_s(buf, buf_size, "GREEK XESTES SIGN");
				break;
			case 0x10186:
				strcpy_s(buf, buf_size, "GREEK ARTABE SIGN");
				break;
			case 0x10187:
				strcpy_s(buf, buf_size, "GREEK AROURA SIGN");
				break;
			case 0x10188:
				strcpy_s(buf, buf_size, "GREEK GRAMMA SIGN");
				break;
			case 0x10189:
				strcpy_s(buf, buf_size, "GREEK TRYBLION BASE SIGN");
				break;
			case 0x1018A:
				strcpy_s(buf, buf_size, "GREEK ZERO SIGN");
				break;
			case 0x1018B:
				strcpy_s(buf, buf_size, "GREEK ONE QUARTER SIGN");
				break;
			case 0x1018C:
				strcpy_s(buf, buf_size, "GREEK SINUSOID SIGN");
				break;
			case 0x1018D:
				strcpy_s(buf, buf_size, "GREEK INDICTION SIGN");
				break;
			case 0x1018E:
				strcpy_s(buf, buf_size, "NOMISMA SIGN");
				break;
			case 0x10190:
				strcpy_s(buf, buf_size, "ROMAN SEXTANS SIGN");
				break;
			case 0x10191:
				strcpy_s(buf, buf_size, "ROMAN UNCIA SIGN");
				break;
			case 0x10192:
				strcpy_s(buf, buf_size, "ROMAN SEMUNCIA SIGN");
				break;
			case 0x10193:
				strcpy_s(buf, buf_size, "ROMAN SEXTULA SIGN");
				break;
			case 0x10194:
				strcpy_s(buf, buf_size, "ROMAN DIMIDIA SEXTULA SIGN");
				break;
			case 0x10195:
				strcpy_s(buf, buf_size, "ROMAN SILIQUA SIGN");
				break;
			case 0x10196:
				strcpy_s(buf, buf_size, "ROMAN DENARIUS SIGN");
				break;
			case 0x10197:
				strcpy_s(buf, buf_size, "ROMAN QUINARIUS SIGN");
				break;
			case 0x10198:
				strcpy_s(buf, buf_size, "ROMAN SESTERTIUS SIGN");
				break;
			case 0x10199:
				strcpy_s(buf, buf_size, "ROMAN DUPONDIUS SIGN");
				break;
			case 0x1019A:
				strcpy_s(buf, buf_size, "ROMAN AS SIGN");
				break;
			case 0x1019B:
				strcpy_s(buf, buf_size, "ROMAN CENTURIAL SIGN");
				break;
			case 0x1019C:
				strcpy_s(buf, buf_size, "ASCIA SYMBOL");
				break;
			case 0x101A0:
				strcpy_s(buf, buf_size, "GREEK SYMBOL TAU RHO");
				break;
			case 0x101D0:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN PEDESTRIAN");
				break;
			case 0x101D1:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN PLUMED HEAD");
				break;
			case 0x101D2:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN TATTOOED HEAD");
				break;
			case 0x101D3:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN CAPTIVE");
				break;
			case 0x101D4:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN CHILD");
				break;
			case 0x101D5:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN WOMAN");
				break;
			case 0x101D6:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN HELMET");
				break;
			case 0x101D7:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN GAUNTLET");
				break;
			case 0x101D8:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN TIARA");
				break;
			case 0x101D9:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN ARROW");
				break;
			case 0x101DA:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN BOW");
				break;
			case 0x101DB:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN SHIELD");
				break;
			case 0x101DC:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN CLUB");
				break;
			case 0x101DD:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN MANACLES");
				break;
			case 0x101DE:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN MATTOCK");
				break;
			case 0x101DF:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN SAW");
				break;
			case 0x101E0:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN LID");
				break;
			case 0x101E1:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN BOOMERANG");
				break;
			case 0x101E2:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN CARPENTRY PLANE");
				break;
			case 0x101E3:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN DOLIUM");
				break;
			case 0x101E4:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN COMB");
				break;
			case 0x101E5:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN SLING");
				break;
			case 0x101E6:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN COLUMN");
				break;
			case 0x101E7:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN BEEHIVE");
				break;
			case 0x101E8:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN SHIP");
				break;
			case 0x101E9:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN HORN");
				break;
			case 0x101EA:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN HIDE");
				break;
			case 0x101EB:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN BULLS LEG");
				break;
			case 0x101EC:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN CAT");
				break;
			case 0x101ED:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN RAM");
				break;
			case 0x101EE:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN EAGLE");
				break;
			case 0x101EF:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN DOVE");
				break;
			case 0x101F0:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN TUNNY");
				break;
			case 0x101F1:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN BEE");
				break;
			case 0x101F2:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN PLANE TREE");
				break;
			case 0x101F3:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN VINE");
				break;
			case 0x101F4:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN PAPYRUS");
				break;
			case 0x101F5:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN ROSETTE");
				break;
			case 0x101F6:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN LILY");
				break;
			case 0x101F7:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN OX BACK");
				break;
			case 0x101F8:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN FLUTE");
				break;
			case 0x101F9:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN GRATER");
				break;
			case 0x101FA:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN STRAINER");
				break;
			case 0x101FB:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN SMALL AXE");
				break;
			case 0x101FC:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN WAVY BAND");
				break;
			case 0x101FD:
				strcpy_s(buf, buf_size, "PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE");
				break;
			case 0x10280:
				strcpy_s(buf, buf_size, "LYCIAN LETTER A");
				break;
			case 0x10281:
				strcpy_s(buf, buf_size, "LYCIAN LETTER E");
				break;
			case 0x10282:
				strcpy_s(buf, buf_size, "LYCIAN LETTER B");
				break;
			case 0x10283:
				strcpy_s(buf, buf_size, "LYCIAN LETTER BH");
				break;
			case 0x10284:
				strcpy_s(buf, buf_size, "LYCIAN LETTER G");
				break;
			case 0x10285:
				strcpy_s(buf, buf_size, "LYCIAN LETTER D");
				break;
			case 0x10286:
				strcpy_s(buf, buf_size, "LYCIAN LETTER I");
				break;
			case 0x10287:
				strcpy_s(buf, buf_size, "LYCIAN LETTER W");
				break;
			case 0x10288:
				strcpy_s(buf, buf_size, "LYCIAN LETTER Z");
				break;
			case 0x10289:
				strcpy_s(buf, buf_size, "LYCIAN LETTER TH");
				break;
			case 0x1028A:
				strcpy_s(buf, buf_size, "LYCIAN LETTER J");
				break;
			case 0x1028B:
				strcpy_s(buf, buf_size, "LYCIAN LETTER K");
				break;
			case 0x1028C:
				strcpy_s(buf, buf_size, "LYCIAN LETTER Q");
				break;
			case 0x1028D:
				strcpy_s(buf, buf_size, "LYCIAN LETTER L");
				break;
			case 0x1028E:
				strcpy_s(buf, buf_size, "LYCIAN LETTER M");
				break;
			case 0x1028F:
				strcpy_s(buf, buf_size, "LYCIAN LETTER N");
				break;
			case 0x10290:
				strcpy_s(buf, buf_size, "LYCIAN LETTER MM");
				break;
			case 0x10291:
				strcpy_s(buf, buf_size, "LYCIAN LETTER NN");
				break;
			case 0x10292:
				strcpy_s(buf, buf_size, "LYCIAN LETTER U");
				break;
			case 0x10293:
				strcpy_s(buf, buf_size, "LYCIAN LETTER P");
				break;
			case 0x10294:
				strcpy_s(buf, buf_size, "LYCIAN LETTER KK");
				break;
			case 0x10295:
				strcpy_s(buf, buf_size, "LYCIAN LETTER R");
				break;
			case 0x10296:
				strcpy_s(buf, buf_size, "LYCIAN LETTER S");
				break;
			case 0x10297:
				strcpy_s(buf, buf_size, "LYCIAN LETTER T");
				break;
			case 0x10298:
				strcpy_s(buf, buf_size, "LYCIAN LETTER TT");
				break;
			case 0x10299:
				strcpy_s(buf, buf_size, "LYCIAN LETTER AN");
				break;
			case 0x1029A:
				strcpy_s(buf, buf_size, "LYCIAN LETTER EN");
				break;
			case 0x1029B:
				strcpy_s(buf, buf_size, "LYCIAN LETTER H");
				break;
			case 0x1029C:
				strcpy_s(buf, buf_size, "LYCIAN LETTER X");
				break;
			case 0x102A0:
				strcpy_s(buf, buf_size, "CARIAN LETTER A");
				break;
			case 0x102A1:
				strcpy_s(buf, buf_size, "CARIAN LETTER P2");
				break;
			case 0x102A2:
				strcpy_s(buf, buf_size, "CARIAN LETTER D");
				break;
			case 0x102A3:
				strcpy_s(buf, buf_size, "CARIAN LETTER L");
				break;
			case 0x102A4:
				strcpy_s(buf, buf_size, "CARIAN LETTER UUU");
				break;
			case 0x102A5:
				strcpy_s(buf, buf_size, "CARIAN LETTER R");
				break;
			case 0x102A6:
				strcpy_s(buf, buf_size, "CARIAN LETTER LD");
				break;
			case 0x102A7:
				strcpy_s(buf, buf_size, "CARIAN LETTER A2");
				break;
			case 0x102A8:
				strcpy_s(buf, buf_size, "CARIAN LETTER Q");
				break;
			case 0x102A9:
				strcpy_s(buf, buf_size, "CARIAN LETTER B");
				break;
			case 0x102AA:
				strcpy_s(buf, buf_size, "CARIAN LETTER M");
				break;
			case 0x102AB:
				strcpy_s(buf, buf_size, "CARIAN LETTER O");
				break;
			case 0x102AC:
				strcpy_s(buf, buf_size, "CARIAN LETTER D2");
				break;
			case 0x102AD:
				strcpy_s(buf, buf_size, "CARIAN LETTER T");
				break;
			case 0x102AE:
				strcpy_s(buf, buf_size, "CARIAN LETTER SH");
				break;
			case 0x102AF:
				strcpy_s(buf, buf_size, "CARIAN LETTER SH2");
				break;
			case 0x102B0:
				strcpy_s(buf, buf_size, "CARIAN LETTER S");
				break;
			case 0x102B1:
				strcpy_s(buf, buf_size, "CARIAN LETTER C-18");
				break;
			case 0x102B2:
				strcpy_s(buf, buf_size, "CARIAN LETTER U");
				break;
			case 0x102B3:
				strcpy_s(buf, buf_size, "CARIAN LETTER NN");
				break;
			case 0x102B4:
				strcpy_s(buf, buf_size, "CARIAN LETTER X");
				break;
			case 0x102B5:
				strcpy_s(buf, buf_size, "CARIAN LETTER N");
				break;
			case 0x102B6:
				strcpy_s(buf, buf_size, "CARIAN LETTER TT2");
				break;
			case 0x102B7:
				strcpy_s(buf, buf_size, "CARIAN LETTER P");
				break;
			case 0x102B8:
				strcpy_s(buf, buf_size, "CARIAN LETTER SS");
				break;
			case 0x102B9:
				strcpy_s(buf, buf_size, "CARIAN LETTER I");
				break;
			case 0x102BA:
				strcpy_s(buf, buf_size, "CARIAN LETTER E");
				break;
			case 0x102BB:
				strcpy_s(buf, buf_size, "CARIAN LETTER UUUU");
				break;
			case 0x102BC:
				strcpy_s(buf, buf_size, "CARIAN LETTER K");
				break;
			case 0x102BD:
				strcpy_s(buf, buf_size, "CARIAN LETTER K2");
				break;
			case 0x102BE:
				strcpy_s(buf, buf_size, "CARIAN LETTER ND");
				break;
			case 0x102BF:
				strcpy_s(buf, buf_size, "CARIAN LETTER UU");
				break;
			case 0x102C0:
				strcpy_s(buf, buf_size, "CARIAN LETTER G");
				break;
			case 0x102C1:
				strcpy_s(buf, buf_size, "CARIAN LETTER G2");
				break;
			case 0x102C2:
				strcpy_s(buf, buf_size, "CARIAN LETTER ST");
				break;
			case 0x102C3:
				strcpy_s(buf, buf_size, "CARIAN LETTER ST2");
				break;
			case 0x102C4:
				strcpy_s(buf, buf_size, "CARIAN LETTER NG");
				break;
			case 0x102C5:
				strcpy_s(buf, buf_size, "CARIAN LETTER II");
				break;
			case 0x102C6:
				strcpy_s(buf, buf_size, "CARIAN LETTER C-39");
				break;
			case 0x102C7:
				strcpy_s(buf, buf_size, "CARIAN LETTER TT");
				break;
			case 0x102C8:
				strcpy_s(buf, buf_size, "CARIAN LETTER UUU2");
				break;
			case 0x102C9:
				strcpy_s(buf, buf_size, "CARIAN LETTER RR");
				break;
			case 0x102CA:
				strcpy_s(buf, buf_size, "CARIAN LETTER MB");
				break;
			case 0x102CB:
				strcpy_s(buf, buf_size, "CARIAN LETTER MB2");
				break;
			case 0x102CC:
				strcpy_s(buf, buf_size, "CARIAN LETTER MB3");
				break;
			case 0x102CD:
				strcpy_s(buf, buf_size, "CARIAN LETTER MB4");
				break;
			case 0x102CE:
				strcpy_s(buf, buf_size, "CARIAN LETTER LD2");
				break;
			case 0x102CF:
				strcpy_s(buf, buf_size, "CARIAN LETTER E2");
				break;
			case 0x102D0:
				strcpy_s(buf, buf_size, "CARIAN LETTER UUU3");
				break;
			case 0x102E0:
				strcpy_s(buf, buf_size, "COPTIC EPACT THOUSANDS MARK");
				break;
			case 0x102E1:
				strcpy_s(buf, buf_size, "COPTIC EPACT DIGIT ONE");
				break;
			case 0x102E2:
				strcpy_s(buf, buf_size, "COPTIC EPACT DIGIT TWO");
				break;
			case 0x102E3:
				strcpy_s(buf, buf_size, "COPTIC EPACT DIGIT THREE");
				break;
			case 0x102E4:
				strcpy_s(buf, buf_size, "COPTIC EPACT DIGIT FOUR");
				break;
			case 0x102E5:
				strcpy_s(buf, buf_size, "COPTIC EPACT DIGIT FIVE");
				break;
			case 0x102E6:
				strcpy_s(buf, buf_size, "COPTIC EPACT DIGIT SIX");
				break;
			case 0x102E7:
				strcpy_s(buf, buf_size, "COPTIC EPACT DIGIT SEVEN");
				break;
			case 0x102E8:
				strcpy_s(buf, buf_size, "COPTIC EPACT DIGIT EIGHT");
				break;
			case 0x102E9:
				strcpy_s(buf, buf_size, "COPTIC EPACT DIGIT NINE");
				break;
			case 0x102EA:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER TEN");
				break;
			case 0x102EB:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER TWENTY");
				break;
			case 0x102EC:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER THIRTY");
				break;
			case 0x102ED:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER FORTY");
				break;
			case 0x102EE:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER FIFTY");
				break;
			case 0x102EF:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER SIXTY");
				break;
			case 0x102F0:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER SEVENTY");
				break;
			case 0x102F1:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER EIGHTY");
				break;
			case 0x102F2:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER NINETY");
				break;
			case 0x102F3:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER ONE HUNDRED");
				break;
			case 0x102F4:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER TWO HUNDRED");
				break;
			case 0x102F5:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER THREE HUNDRED");
				break;
			case 0x102F6:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER FOUR HUNDRED");
				break;
			case 0x102F7:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER FIVE HUNDRED");
				break;
			case 0x102F8:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER SIX HUNDRED");
				break;
			case 0x102F9:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER SEVEN HUNDRED");
				break;
			case 0x102FA:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER EIGHT HUNDRED");
				break;
			case 0x102FB:
				strcpy_s(buf, buf_size, "COPTIC EPACT NUMBER NINE HUNDRED");
				break;
			case 0x10300:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER A");
				break;
			case 0x10301:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER BE");
				break;
			case 0x10302:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER KE");
				break;
			case 0x10303:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER DE");
				break;
			case 0x10304:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER E");
				break;
			case 0x10305:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER VE");
				break;
			case 0x10306:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER ZE");
				break;
			case 0x10307:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER HE");
				break;
			case 0x10308:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER THE");
				break;
			case 0x10309:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER I");
				break;
			case 0x1030A:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER KA");
				break;
			case 0x1030B:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER EL");
				break;
			case 0x1030C:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER EM");
				break;
			case 0x1030D:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER EN");
				break;
			case 0x1030E:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER ESH");
				break;
			case 0x1030F:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER O");
				break;
			case 0x10310:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER PE");
				break;
			case 0x10311:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER SHE");
				break;
			case 0x10312:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER KU");
				break;
			case 0x10313:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER ER");
				break;
			case 0x10314:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER ES");
				break;
			case 0x10315:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER TE");
				break;
			case 0x10316:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER U");
				break;
			case 0x10317:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER EKS");
				break;
			case 0x10318:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER PHE");
				break;
			case 0x10319:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER KHE");
				break;
			case 0x1031A:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER EF");
				break;
			case 0x1031B:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER ERS");
				break;
			case 0x1031C:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER CHE");
				break;
			case 0x1031D:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER II");
				break;
			case 0x1031E:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER UU");
				break;
			case 0x1031F:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER ESS");
				break;
			case 0x10320:
				strcpy_s(buf, buf_size, "OLD ITALIC NUMERAL ONE");
				break;
			case 0x10321:
				strcpy_s(buf, buf_size, "OLD ITALIC NUMERAL FIVE");
				break;
			case 0x10322:
				strcpy_s(buf, buf_size, "OLD ITALIC NUMERAL TEN");
				break;
			case 0x10323:
				strcpy_s(buf, buf_size, "OLD ITALIC NUMERAL FIFTY");
				break;
			case 0x1032D:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER YE");
				break;
			case 0x1032E:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER NORTHERN TSE");
				break;
			case 0x1032F:
				strcpy_s(buf, buf_size, "OLD ITALIC LETTER SOUTHERN TSE");
				break;
			case 0x10330:
				strcpy_s(buf, buf_size, "GOTHIC LETTER AHSA");
				break;
			case 0x10331:
				strcpy_s(buf, buf_size, "GOTHIC LETTER BAIRKAN");
				break;
			case 0x10332:
				strcpy_s(buf, buf_size, "GOTHIC LETTER GIBA");
				break;
			case 0x10333:
				strcpy_s(buf, buf_size, "GOTHIC LETTER DAGS");
				break;
			case 0x10334:
				strcpy_s(buf, buf_size, "GOTHIC LETTER AIHVUS");
				break;
			case 0x10335:
				strcpy_s(buf, buf_size, "GOTHIC LETTER QAIRTHRA");
				break;
			case 0x10336:
				strcpy_s(buf, buf_size, "GOTHIC LETTER IUJA");
				break;
			case 0x10337:
				strcpy_s(buf, buf_size, "GOTHIC LETTER HAGL");
				break;
			case 0x10338:
				strcpy_s(buf, buf_size, "GOTHIC LETTER THIUTH");
				break;
			case 0x10339:
				strcpy_s(buf, buf_size, "GOTHIC LETTER EIS");
				break;
			case 0x1033A:
				strcpy_s(buf, buf_size, "GOTHIC LETTER KUSMA");
				break;
			case 0x1033B:
				strcpy_s(buf, buf_size, "GOTHIC LETTER LAGUS");
				break;
			case 0x1033C:
				strcpy_s(buf, buf_size, "GOTHIC LETTER MANNA");
				break;
			case 0x1033D:
				strcpy_s(buf, buf_size, "GOTHIC LETTER NAUTHS");
				break;
			case 0x1033E:
				strcpy_s(buf, buf_size, "GOTHIC LETTER JER");
				break;
			case 0x1033F:
				strcpy_s(buf, buf_size, "GOTHIC LETTER URUS");
				break;
			case 0x10340:
				strcpy_s(buf, buf_size, "GOTHIC LETTER PAIRTHRA");
				break;
			case 0x10341:
				strcpy_s(buf, buf_size, "GOTHIC LETTER NINETY");
				break;
			case 0x10342:
				strcpy_s(buf, buf_size, "GOTHIC LETTER RAIDA");
				break;
			case 0x10343:
				strcpy_s(buf, buf_size, "GOTHIC LETTER SAUIL");
				break;
			case 0x10344:
				strcpy_s(buf, buf_size, "GOTHIC LETTER TEIWS");
				break;
			case 0x10345:
				strcpy_s(buf, buf_size, "GOTHIC LETTER WINJA");
				break;
			case 0x10346:
				strcpy_s(buf, buf_size, "GOTHIC LETTER FAIHU");
				break;
			case 0x10347:
				strcpy_s(buf, buf_size, "GOTHIC LETTER IGGWS");
				break;
			case 0x10348:
				strcpy_s(buf, buf_size, "GOTHIC LETTER HWAIR");
				break;
			case 0x10349:
				strcpy_s(buf, buf_size, "GOTHIC LETTER OTHAL");
				break;
			case 0x1034A:
				strcpy_s(buf, buf_size, "GOTHIC LETTER NINE HUNDRED");
				break;
			case 0x10350:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER AN");
				break;
			case 0x10351:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER BUR");
				break;
			case 0x10352:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER GAI");
				break;
			case 0x10353:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER DOI");
				break;
			case 0x10354:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER E");
				break;
			case 0x10355:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER ZHOI");
				break;
			case 0x10356:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER DZHOI");
				break;
			case 0x10357:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER ZATA");
				break;
			case 0x10358:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER DZITA");
				break;
			case 0x10359:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER I");
				break;
			case 0x1035A:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER KOKE");
				break;
			case 0x1035B:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER LEI");
				break;
			case 0x1035C:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER MENOE");
				break;
			case 0x1035D:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER NENOE");
				break;
			case 0x1035E:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER VOOI");
				break;
			case 0x1035F:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER PEEI");
				break;
			case 0x10360:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER REI");
				break;
			case 0x10361:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER SII");
				break;
			case 0x10362:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER TAI");
				break;
			case 0x10363:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER U");
				break;
			case 0x10364:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER CHERY");
				break;
			case 0x10365:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER SHOOI");
				break;
			case 0x10366:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER SHCHOOI");
				break;
			case 0x10367:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER YRY");
				break;
			case 0x10368:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER YERU");
				break;
			case 0x10369:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER O");
				break;
			case 0x1036A:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER OO");
				break;
			case 0x1036B:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER EF");
				break;
			case 0x1036C:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER HA");
				break;
			case 0x1036D:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER TSIU");
				break;
			case 0x1036E:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER VER");
				break;
			case 0x1036F:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER YER");
				break;
			case 0x10370:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER YERI");
				break;
			case 0x10371:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER YAT");
				break;
			case 0x10372:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER IE");
				break;
			case 0x10373:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER YU");
				break;
			case 0x10374:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER YA");
				break;
			case 0x10375:
				strcpy_s(buf, buf_size, "OLD PERMIC LETTER IA");
				break;
			case 0x10376:
				strcpy_s(buf, buf_size, "COMBINING OLD PERMIC LETTER AN");
				break;
			case 0x10377:
				strcpy_s(buf, buf_size, "COMBINING OLD PERMIC LETTER DOI");
				break;
			case 0x10378:
				strcpy_s(buf, buf_size, "COMBINING OLD PERMIC LETTER ZATA");
				break;
			case 0x10379:
				strcpy_s(buf, buf_size, "COMBINING OLD PERMIC LETTER NENOE");
				break;
			case 0x1037A:
				strcpy_s(buf, buf_size, "COMBINING OLD PERMIC LETTER SII");
				break;
			case 0x10380:
				strcpy_s(buf, buf_size, "UGARITIC LETTER ALPA");
				break;
			case 0x10381:
				strcpy_s(buf, buf_size, "UGARITIC LETTER BETA");
				break;
			case 0x10382:
				strcpy_s(buf, buf_size, "UGARITIC LETTER GAMLA");
				break;
			case 0x10383:
				strcpy_s(buf, buf_size, "UGARITIC LETTER KHA");
				break;
			case 0x10384:
				strcpy_s(buf, buf_size, "UGARITIC LETTER DELTA");
				break;
			case 0x10385:
				strcpy_s(buf, buf_size, "UGARITIC LETTER HO");
				break;
			case 0x10386:
				strcpy_s(buf, buf_size, "UGARITIC LETTER WO");
				break;
			case 0x10387:
				strcpy_s(buf, buf_size, "UGARITIC LETTER ZETA");
				break;
			case 0x10388:
				strcpy_s(buf, buf_size, "UGARITIC LETTER HOTA");
				break;
			case 0x10389:
				strcpy_s(buf, buf_size, "UGARITIC LETTER TET");
				break;
			case 0x1038A:
				strcpy_s(buf, buf_size, "UGARITIC LETTER YOD");
				break;
			case 0x1038B:
				strcpy_s(buf, buf_size, "UGARITIC LETTER KAF");
				break;
			case 0x1038C:
				strcpy_s(buf, buf_size, "UGARITIC LETTER SHIN");
				break;
			case 0x1038D:
				strcpy_s(buf, buf_size, "UGARITIC LETTER LAMDA");
				break;
			case 0x1038E:
				strcpy_s(buf, buf_size, "UGARITIC LETTER MEM");
				break;
			case 0x1038F:
				strcpy_s(buf, buf_size, "UGARITIC LETTER DHAL");
				break;
			case 0x10390:
				strcpy_s(buf, buf_size, "UGARITIC LETTER NUN");
				break;
			case 0x10391:
				strcpy_s(buf, buf_size, "UGARITIC LETTER ZU");
				break;
			case 0x10392:
				strcpy_s(buf, buf_size, "UGARITIC LETTER SAMKA");
				break;
			case 0x10393:
				strcpy_s(buf, buf_size, "UGARITIC LETTER AIN");
				break;
			case 0x10394:
				strcpy_s(buf, buf_size, "UGARITIC LETTER PU");
				break;
			case 0x10395:
				strcpy_s(buf, buf_size, "UGARITIC LETTER SADE");
				break;
			case 0x10396:
				strcpy_s(buf, buf_size, "UGARITIC LETTER QOPA");
				break;
			case 0x10397:
				strcpy_s(buf, buf_size, "UGARITIC LETTER RASHA");
				break;
			case 0x10398:
				strcpy_s(buf, buf_size, "UGARITIC LETTER THANNA");
				break;
			case 0x10399:
				strcpy_s(buf, buf_size, "UGARITIC LETTER GHAIN");
				break;
			case 0x1039A:
				strcpy_s(buf, buf_size, "UGARITIC LETTER TO");
				break;
			case 0x1039B:
				strcpy_s(buf, buf_size, "UGARITIC LETTER I");
				break;
			case 0x1039C:
				strcpy_s(buf, buf_size, "UGARITIC LETTER U");
				break;
			case 0x1039D:
				strcpy_s(buf, buf_size, "UGARITIC LETTER SSU");
				break;
			case 0x1039F:
				strcpy_s(buf, buf_size, "UGARITIC WORD DIVIDER");
				break;
			case 0x103A0:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN A");
				break;
			case 0x103A1:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN I");
				break;
			case 0x103A2:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN U");
				break;
			case 0x103A3:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN KA");
				break;
			case 0x103A4:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN KU");
				break;
			case 0x103A5:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN GA");
				break;
			case 0x103A6:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN GU");
				break;
			case 0x103A7:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN XA");
				break;
			case 0x103A8:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN CA");
				break;
			case 0x103A9:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN JA");
				break;
			case 0x103AA:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN JI");
				break;
			case 0x103AB:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN TA");
				break;
			case 0x103AC:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN TU");
				break;
			case 0x103AD:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN DA");
				break;
			case 0x103AE:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN DI");
				break;
			case 0x103AF:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN DU");
				break;
			case 0x103B0:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN THA");
				break;
			case 0x103B1:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN PA");
				break;
			case 0x103B2:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN BA");
				break;
			case 0x103B3:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN FA");
				break;
			case 0x103B4:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN NA");
				break;
			case 0x103B5:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN NU");
				break;
			case 0x103B6:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN MA");
				break;
			case 0x103B7:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN MI");
				break;
			case 0x103B8:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN MU");
				break;
			case 0x103B9:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN YA");
				break;
			case 0x103BA:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN VA");
				break;
			case 0x103BB:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN VI");
				break;
			case 0x103BC:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN RA");
				break;
			case 0x103BD:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN RU");
				break;
			case 0x103BE:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN LA");
				break;
			case 0x103BF:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN SA");
				break;
			case 0x103C0:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN ZA");
				break;
			case 0x103C1:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN SHA");
				break;
			case 0x103C2:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN SSA");
				break;
			case 0x103C3:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN HA");
				break;
			case 0x103C8:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN AURAMAZDAA");
				break;
			case 0x103C9:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN AURAMAZDAA-2");
				break;
			case 0x103CA:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN AURAMAZDAAHA");
				break;
			case 0x103CB:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN XSHAAYATHIYA");
				break;
			case 0x103CC:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN DAHYAAUSH");
				break;
			case 0x103CD:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN DAHYAAUSH-2");
				break;
			case 0x103CE:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN BAGA");
				break;
			case 0x103CF:
				strcpy_s(buf, buf_size, "OLD PERSIAN SIGN BUUMISH");
				break;
			case 0x103D0:
				strcpy_s(buf, buf_size, "OLD PERSIAN WORD DIVIDER");
				break;
			case 0x103D1:
				strcpy_s(buf, buf_size, "OLD PERSIAN NUMBER ONE");
				break;
			case 0x103D2:
				strcpy_s(buf, buf_size, "OLD PERSIAN NUMBER TWO");
				break;
			case 0x103D3:
				strcpy_s(buf, buf_size, "OLD PERSIAN NUMBER TEN");
				break;
			case 0x103D4:
				strcpy_s(buf, buf_size, "OLD PERSIAN NUMBER TWENTY");
				break;
			case 0x103D5:
				strcpy_s(buf, buf_size, "OLD PERSIAN NUMBER HUNDRED");
				break;
			case 0x10400:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER LONG I");
				break;
			case 0x10401:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER LONG E");
				break;
			case 0x10402:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER LONG A");
				break;
			case 0x10403:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER LONG AH");
				break;
			case 0x10404:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER LONG O");
				break;
			case 0x10405:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER LONG OO");
				break;
			case 0x10406:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER SHORT I");
				break;
			case 0x10407:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER SHORT E");
				break;
			case 0x10408:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER SHORT A");
				break;
			case 0x10409:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER SHORT AH");
				break;
			case 0x1040A:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER SHORT O");
				break;
			case 0x1040B:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER SHORT OO");
				break;
			case 0x1040C:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER AY");
				break;
			case 0x1040D:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER OW");
				break;
			case 0x1040E:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER WU");
				break;
			case 0x1040F:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER YEE");
				break;
			case 0x10410:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER H");
				break;
			case 0x10411:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER PEE");
				break;
			case 0x10412:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER BEE");
				break;
			case 0x10413:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER TEE");
				break;
			case 0x10414:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER DEE");
				break;
			case 0x10415:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER CHEE");
				break;
			case 0x10416:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER JEE");
				break;
			case 0x10417:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER KAY");
				break;
			case 0x10418:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER GAY");
				break;
			case 0x10419:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER EF");
				break;
			case 0x1041A:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER VEE");
				break;
			case 0x1041B:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER ETH");
				break;
			case 0x1041C:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER THEE");
				break;
			case 0x1041D:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER ES");
				break;
			case 0x1041E:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER ZEE");
				break;
			case 0x1041F:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER ESH");
				break;
			case 0x10420:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER ZHEE");
				break;
			case 0x10421:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER ER");
				break;
			case 0x10422:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER EL");
				break;
			case 0x10423:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER EM");
				break;
			case 0x10424:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER EN");
				break;
			case 0x10425:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER ENG");
				break;
			case 0x10426:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER OI");
				break;
			case 0x10427:
				strcpy_s(buf, buf_size, "DESERET CAPITAL LETTER EW");
				break;
			case 0x10428:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER LONG I");
				break;
			case 0x10429:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER LONG E");
				break;
			case 0x1042A:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER LONG A");
				break;
			case 0x1042B:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER LONG AH");
				break;
			case 0x1042C:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER LONG O");
				break;
			case 0x1042D:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER LONG OO");
				break;
			case 0x1042E:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER SHORT I");
				break;
			case 0x1042F:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER SHORT E");
				break;
			case 0x10430:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER SHORT A");
				break;
			case 0x10431:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER SHORT AH");
				break;
			case 0x10432:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER SHORT O");
				break;
			case 0x10433:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER SHORT OO");
				break;
			case 0x10434:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER AY");
				break;
			case 0x10435:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER OW");
				break;
			case 0x10436:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER WU");
				break;
			case 0x10437:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER YEE");
				break;
			case 0x10438:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER H");
				break;
			case 0x10439:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER PEE");
				break;
			case 0x1043A:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER BEE");
				break;
			case 0x1043B:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER TEE");
				break;
			case 0x1043C:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER DEE");
				break;
			case 0x1043D:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER CHEE");
				break;
			case 0x1043E:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER JEE");
				break;
			case 0x1043F:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER KAY");
				break;
			case 0x10440:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER GAY");
				break;
			case 0x10441:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER EF");
				break;
			case 0x10442:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER VEE");
				break;
			case 0x10443:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER ETH");
				break;
			case 0x10444:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER THEE");
				break;
			case 0x10445:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER ES");
				break;
			case 0x10446:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER ZEE");
				break;
			case 0x10447:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER ESH");
				break;
			case 0x10448:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER ZHEE");
				break;
			case 0x10449:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER ER");
				break;
			case 0x1044A:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER EL");
				break;
			case 0x1044B:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER EM");
				break;
			case 0x1044C:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER EN");
				break;
			case 0x1044D:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER ENG");
				break;
			case 0x1044E:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER OI");
				break;
			case 0x1044F:
				strcpy_s(buf, buf_size, "DESERET SMALL LETTER EW");
				break;
			case 0x10450:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER PEEP");
				break;
			case 0x10451:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER TOT");
				break;
			case 0x10452:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER KICK");
				break;
			case 0x10453:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER FEE");
				break;
			case 0x10454:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER THIGH");
				break;
			case 0x10455:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER SO");
				break;
			case 0x10456:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER SURE");
				break;
			case 0x10457:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER CHURCH");
				break;
			case 0x10458:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER YEA");
				break;
			case 0x10459:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER HUNG");
				break;
			case 0x1045A:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER BIB");
				break;
			case 0x1045B:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER DEAD");
				break;
			case 0x1045C:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER GAG");
				break;
			case 0x1045D:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER VOW");
				break;
			case 0x1045E:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER THEY");
				break;
			case 0x1045F:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER ZOO");
				break;
			case 0x10460:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER MEASURE");
				break;
			case 0x10461:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER JUDGE");
				break;
			case 0x10462:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER WOE");
				break;
			case 0x10463:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER HA-HA");
				break;
			case 0x10464:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER LOLL");
				break;
			case 0x10465:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER MIME");
				break;
			case 0x10466:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER IF");
				break;
			case 0x10467:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER EGG");
				break;
			case 0x10468:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER ASH");
				break;
			case 0x10469:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER ADO");
				break;
			case 0x1046A:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER ON");
				break;
			case 0x1046B:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER WOOL");
				break;
			case 0x1046C:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER OUT");
				break;
			case 0x1046D:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER AH");
				break;
			case 0x1046E:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER ROAR");
				break;
			case 0x1046F:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER NUN");
				break;
			case 0x10470:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER EAT");
				break;
			case 0x10471:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER AGE");
				break;
			case 0x10472:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER ICE");
				break;
			case 0x10473:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER UP");
				break;
			case 0x10474:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER OAK");
				break;
			case 0x10475:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER OOZE");
				break;
			case 0x10476:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER OIL");
				break;
			case 0x10477:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER AWE");
				break;
			case 0x10478:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER ARE");
				break;
			case 0x10479:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER OR");
				break;
			case 0x1047A:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER AIR");
				break;
			case 0x1047B:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER ERR");
				break;
			case 0x1047C:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER ARRAY");
				break;
			case 0x1047D:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER EAR");
				break;
			case 0x1047E:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER IAN");
				break;
			case 0x1047F:
				strcpy_s(buf, buf_size, "SHAVIAN LETTER YEW");
				break;
			case 0x10480:
				strcpy_s(buf, buf_size, "OSMANYA LETTER ALEF");
				break;
			case 0x10481:
				strcpy_s(buf, buf_size, "OSMANYA LETTER BA");
				break;
			case 0x10482:
				strcpy_s(buf, buf_size, "OSMANYA LETTER TA");
				break;
			case 0x10483:
				strcpy_s(buf, buf_size, "OSMANYA LETTER JA");
				break;
			case 0x10484:
				strcpy_s(buf, buf_size, "OSMANYA LETTER XA");
				break;
			case 0x10485:
				strcpy_s(buf, buf_size, "OSMANYA LETTER KHA");
				break;
			case 0x10486:
				strcpy_s(buf, buf_size, "OSMANYA LETTER DEEL");
				break;
			case 0x10487:
				strcpy_s(buf, buf_size, "OSMANYA LETTER RA");
				break;
			case 0x10488:
				strcpy_s(buf, buf_size, "OSMANYA LETTER SA");
				break;
			case 0x10489:
				strcpy_s(buf, buf_size, "OSMANYA LETTER SHIIN");
				break;
			case 0x1048A:
				strcpy_s(buf, buf_size, "OSMANYA LETTER DHA");
				break;
			case 0x1048B:
				strcpy_s(buf, buf_size, "OSMANYA LETTER CAYN");
				break;
			case 0x1048C:
				strcpy_s(buf, buf_size, "OSMANYA LETTER GA");
				break;
			case 0x1048D:
				strcpy_s(buf, buf_size, "OSMANYA LETTER FA");
				break;
			case 0x1048E:
				strcpy_s(buf, buf_size, "OSMANYA LETTER QAAF");
				break;
			case 0x1048F:
				strcpy_s(buf, buf_size, "OSMANYA LETTER KAAF");
				break;
			case 0x10490:
				strcpy_s(buf, buf_size, "OSMANYA LETTER LAAN");
				break;
			case 0x10491:
				strcpy_s(buf, buf_size, "OSMANYA LETTER MIIN");
				break;
			case 0x10492:
				strcpy_s(buf, buf_size, "OSMANYA LETTER NUUN");
				break;
			case 0x10493:
				strcpy_s(buf, buf_size, "OSMANYA LETTER WAW");
				break;
			case 0x10494:
				strcpy_s(buf, buf_size, "OSMANYA LETTER HA");
				break;
			case 0x10495:
				strcpy_s(buf, buf_size, "OSMANYA LETTER YA");
				break;
			case 0x10496:
				strcpy_s(buf, buf_size, "OSMANYA LETTER A");
				break;
			case 0x10497:
				strcpy_s(buf, buf_size, "OSMANYA LETTER E");
				break;
			case 0x10498:
				strcpy_s(buf, buf_size, "OSMANYA LETTER I");
				break;
			case 0x10499:
				strcpy_s(buf, buf_size, "OSMANYA LETTER O");
				break;
			case 0x1049A:
				strcpy_s(buf, buf_size, "OSMANYA LETTER U");
				break;
			case 0x1049B:
				strcpy_s(buf, buf_size, "OSMANYA LETTER AA");
				break;
			case 0x1049C:
				strcpy_s(buf, buf_size, "OSMANYA LETTER EE");
				break;
			case 0x1049D:
				strcpy_s(buf, buf_size, "OSMANYA LETTER OO");
				break;
			case 0x104A0:
				strcpy_s(buf, buf_size, "OSMANYA DIGIT ZERO");
				break;
			case 0x104A1:
				strcpy_s(buf, buf_size, "OSMANYA DIGIT ONE");
				break;
			case 0x104A2:
				strcpy_s(buf, buf_size, "OSMANYA DIGIT TWO");
				break;
			case 0x104A3:
				strcpy_s(buf, buf_size, "OSMANYA DIGIT THREE");
				break;
			case 0x104A4:
				strcpy_s(buf, buf_size, "OSMANYA DIGIT FOUR");
				break;
			case 0x104A5:
				strcpy_s(buf, buf_size, "OSMANYA DIGIT FIVE");
				break;
			case 0x104A6:
				strcpy_s(buf, buf_size, "OSMANYA DIGIT SIX");
				break;
			case 0x104A7:
				strcpy_s(buf, buf_size, "OSMANYA DIGIT SEVEN");
				break;
			case 0x104A8:
				strcpy_s(buf, buf_size, "OSMANYA DIGIT EIGHT");
				break;
			case 0x104A9:
				strcpy_s(buf, buf_size, "OSMANYA DIGIT NINE");
				break;
			case 0x104B0:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER A");
				break;
			case 0x104B1:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER AI");
				break;
			case 0x104B2:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER AIN");
				break;
			case 0x104B3:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER AH");
				break;
			case 0x104B4:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER BRA");
				break;
			case 0x104B5:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER CHA");
				break;
			case 0x104B6:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER EHCHA");
				break;
			case 0x104B7:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER E");
				break;
			case 0x104B8:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER EIN");
				break;
			case 0x104B9:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER HA");
				break;
			case 0x104BA:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER HYA");
				break;
			case 0x104BB:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER I");
				break;
			case 0x104BC:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER KA");
				break;
			case 0x104BD:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER EHKA");
				break;
			case 0x104BE:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER KYA");
				break;
			case 0x104BF:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER LA");
				break;
			case 0x104C0:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER MA");
				break;
			case 0x104C1:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER NA");
				break;
			case 0x104C2:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER O");
				break;
			case 0x104C3:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER OIN");
				break;
			case 0x104C4:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER PA");
				break;
			case 0x104C5:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER EHPA");
				break;
			case 0x104C6:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER SA");
				break;
			case 0x104C7:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER SHA");
				break;
			case 0x104C8:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER TA");
				break;
			case 0x104C9:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER EHTA");
				break;
			case 0x104CA:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER TSA");
				break;
			case 0x104CB:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER EHTSA");
				break;
			case 0x104CC:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER TSHA");
				break;
			case 0x104CD:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER DHA");
				break;
			case 0x104CE:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER U");
				break;
			case 0x104CF:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER WA");
				break;
			case 0x104D0:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER KHA");
				break;
			case 0x104D1:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER GHA");
				break;
			case 0x104D2:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER ZA");
				break;
			case 0x104D3:
				strcpy_s(buf, buf_size, "OSAGE CAPITAL LETTER ZHA");
				break;
			case 0x104D8:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER A");
				break;
			case 0x104D9:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER AI");
				break;
			case 0x104DA:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER AIN");
				break;
			case 0x104DB:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER AH");
				break;
			case 0x104DC:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER BRA");
				break;
			case 0x104DD:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER CHA");
				break;
			case 0x104DE:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER EHCHA");
				break;
			case 0x104DF:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER E");
				break;
			case 0x104E0:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER EIN");
				break;
			case 0x104E1:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER HA");
				break;
			case 0x104E2:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER HYA");
				break;
			case 0x104E3:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER I");
				break;
			case 0x104E4:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER KA");
				break;
			case 0x104E5:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER EHKA");
				break;
			case 0x104E6:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER KYA");
				break;
			case 0x104E7:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER LA");
				break;
			case 0x104E8:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER MA");
				break;
			case 0x104E9:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER NA");
				break;
			case 0x104EA:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER O");
				break;
			case 0x104EB:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER OIN");
				break;
			case 0x104EC:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER PA");
				break;
			case 0x104ED:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER EHPA");
				break;
			case 0x104EE:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER SA");
				break;
			case 0x104EF:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER SHA");
				break;
			case 0x104F0:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER TA");
				break;
			case 0x104F1:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER EHTA");
				break;
			case 0x104F2:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER TSA");
				break;
			case 0x104F3:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER EHTSA");
				break;
			case 0x104F4:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER TSHA");
				break;
			case 0x104F5:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER DHA");
				break;
			case 0x104F6:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER U");
				break;
			case 0x104F7:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER WA");
				break;
			case 0x104F8:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER KHA");
				break;
			case 0x104F9:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER GHA");
				break;
			case 0x104FA:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER ZA");
				break;
			case 0x104FB:
				strcpy_s(buf, buf_size, "OSAGE SMALL LETTER ZHA");
				break;
			case 0x10500:
				strcpy_s(buf, buf_size, "ELBASAN LETTER A");
				break;
			case 0x10501:
				strcpy_s(buf, buf_size, "ELBASAN LETTER BE");
				break;
			case 0x10502:
				strcpy_s(buf, buf_size, "ELBASAN LETTER CE");
				break;
			case 0x10503:
				strcpy_s(buf, buf_size, "ELBASAN LETTER CHE");
				break;
			case 0x10504:
				strcpy_s(buf, buf_size, "ELBASAN LETTER DE");
				break;
			case 0x10505:
				strcpy_s(buf, buf_size, "ELBASAN LETTER NDE");
				break;
			case 0x10506:
				strcpy_s(buf, buf_size, "ELBASAN LETTER DHE");
				break;
			case 0x10507:
				strcpy_s(buf, buf_size, "ELBASAN LETTER EI");
				break;
			case 0x10508:
				strcpy_s(buf, buf_size, "ELBASAN LETTER E");
				break;
			case 0x10509:
				strcpy_s(buf, buf_size, "ELBASAN LETTER FE");
				break;
			case 0x1050A:
				strcpy_s(buf, buf_size, "ELBASAN LETTER GE");
				break;
			case 0x1050B:
				strcpy_s(buf, buf_size, "ELBASAN LETTER GJE");
				break;
			case 0x1050C:
				strcpy_s(buf, buf_size, "ELBASAN LETTER HE");
				break;
			case 0x1050D:
				strcpy_s(buf, buf_size, "ELBASAN LETTER I");
				break;
			case 0x1050E:
				strcpy_s(buf, buf_size, "ELBASAN LETTER JE");
				break;
			case 0x1050F:
				strcpy_s(buf, buf_size, "ELBASAN LETTER KE");
				break;
			case 0x10510:
				strcpy_s(buf, buf_size, "ELBASAN LETTER LE");
				break;
			case 0x10511:
				strcpy_s(buf, buf_size, "ELBASAN LETTER LLE");
				break;
			case 0x10512:
				strcpy_s(buf, buf_size, "ELBASAN LETTER ME");
				break;
			case 0x10513:
				strcpy_s(buf, buf_size, "ELBASAN LETTER NE");
				break;
			case 0x10514:
				strcpy_s(buf, buf_size, "ELBASAN LETTER NA");
				break;
			case 0x10515:
				strcpy_s(buf, buf_size, "ELBASAN LETTER NJE");
				break;
			case 0x10516:
				strcpy_s(buf, buf_size, "ELBASAN LETTER O");
				break;
			case 0x10517:
				strcpy_s(buf, buf_size, "ELBASAN LETTER PE");
				break;
			case 0x10518:
				strcpy_s(buf, buf_size, "ELBASAN LETTER QE");
				break;
			case 0x10519:
				strcpy_s(buf, buf_size, "ELBASAN LETTER RE");
				break;
			case 0x1051A:
				strcpy_s(buf, buf_size, "ELBASAN LETTER RRE");
				break;
			case 0x1051B:
				strcpy_s(buf, buf_size, "ELBASAN LETTER SE");
				break;
			case 0x1051C:
				strcpy_s(buf, buf_size, "ELBASAN LETTER SHE");
				break;
			case 0x1051D:
				strcpy_s(buf, buf_size, "ELBASAN LETTER TE");
				break;
			case 0x1051E:
				strcpy_s(buf, buf_size, "ELBASAN LETTER THE");
				break;
			case 0x1051F:
				strcpy_s(buf, buf_size, "ELBASAN LETTER U");
				break;
			case 0x10520:
				strcpy_s(buf, buf_size, "ELBASAN LETTER VE");
				break;
			case 0x10521:
				strcpy_s(buf, buf_size, "ELBASAN LETTER XE");
				break;
			case 0x10522:
				strcpy_s(buf, buf_size, "ELBASAN LETTER Y");
				break;
			case 0x10523:
				strcpy_s(buf, buf_size, "ELBASAN LETTER ZE");
				break;
			case 0x10524:
				strcpy_s(buf, buf_size, "ELBASAN LETTER ZHE");
				break;
			case 0x10525:
				strcpy_s(buf, buf_size, "ELBASAN LETTER GHE");
				break;
			case 0x10526:
				strcpy_s(buf, buf_size, "ELBASAN LETTER GHAMMA");
				break;
			case 0x10527:
				strcpy_s(buf, buf_size, "ELBASAN LETTER KHE");
				break;
			case 0x10530:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER ALT");
				break;
			case 0x10531:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER BET");
				break;
			case 0x10532:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER GIM");
				break;
			case 0x10533:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER DAT");
				break;
			case 0x10534:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER EB");
				break;
			case 0x10535:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER ZARL");
				break;
			case 0x10536:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER EYN");
				break;
			case 0x10537:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER ZHIL");
				break;
			case 0x10538:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER TAS");
				break;
			case 0x10539:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER CHA");
				break;
			case 0x1053A:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER YOWD");
				break;
			case 0x1053B:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER ZHA");
				break;
			case 0x1053C:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER IRB");
				break;
			case 0x1053D:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER SHA");
				break;
			case 0x1053E:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER LAN");
				break;
			case 0x1053F:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER INYA");
				break;
			case 0x10540:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER XEYN");
				break;
			case 0x10541:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER DYAN");
				break;
			case 0x10542:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER CAR");
				break;
			case 0x10543:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER JHOX");
				break;
			case 0x10544:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER KAR");
				break;
			case 0x10545:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER LYIT");
				break;
			case 0x10546:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER HEYT");
				break;
			case 0x10547:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER QAY");
				break;
			case 0x10548:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER AOR");
				break;
			case 0x10549:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER CHOY");
				break;
			case 0x1054A:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER CHI");
				break;
			case 0x1054B:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER CYAY");
				break;
			case 0x1054C:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER MAQ");
				break;
			case 0x1054D:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER QAR");
				break;
			case 0x1054E:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER NOWC");
				break;
			case 0x1054F:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER DZYAY");
				break;
			case 0x10550:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER SHAK");
				break;
			case 0x10551:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER JAYN");
				break;
			case 0x10552:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER ON");
				break;
			case 0x10553:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER TYAY");
				break;
			case 0x10554:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER FAM");
				break;
			case 0x10555:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER DZAY");
				break;
			case 0x10556:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER CHAT");
				break;
			case 0x10557:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER PEN");
				break;
			case 0x10558:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER GHEYS");
				break;
			case 0x10559:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER RAT");
				break;
			case 0x1055A:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER SEYK");
				break;
			case 0x1055B:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER VEYZ");
				break;
			case 0x1055C:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER TIWR");
				break;
			case 0x1055D:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER SHOY");
				break;
			case 0x1055E:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER IWN");
				break;
			case 0x1055F:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER CYAW");
				break;
			case 0x10560:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER CAYN");
				break;
			case 0x10561:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER YAYD");
				break;
			case 0x10562:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER PIWR");
				break;
			case 0x10563:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN LETTER KIW");
				break;
			case 0x1056F:
				strcpy_s(buf, buf_size, "CAUCASIAN ALBANIAN CITATION MARK");
				break;
			case 0x10600:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB001");
				break;
			case 0x10601:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB002");
				break;
			case 0x10602:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB003");
				break;
			case 0x10603:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB004");
				break;
			case 0x10604:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB005");
				break;
			case 0x10605:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB006");
				break;
			case 0x10606:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB007");
				break;
			case 0x10607:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB008");
				break;
			case 0x10608:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB009");
				break;
			case 0x10609:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB010");
				break;
			case 0x1060A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB011");
				break;
			case 0x1060B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB013");
				break;
			case 0x1060C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB016");
				break;
			case 0x1060D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB017");
				break;
			case 0x1060E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB020");
				break;
			case 0x1060F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB021");
				break;
			case 0x10610:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB021F");
				break;
			case 0x10611:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB021M");
				break;
			case 0x10612:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB022");
				break;
			case 0x10613:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB022F");
				break;
			case 0x10614:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB022M");
				break;
			case 0x10615:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB023");
				break;
			case 0x10616:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB023M");
				break;
			case 0x10617:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB024");
				break;
			case 0x10618:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB026");
				break;
			case 0x10619:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB027");
				break;
			case 0x1061A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB028");
				break;
			case 0x1061B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A028B");
				break;
			case 0x1061C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB029");
				break;
			case 0x1061D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB030");
				break;
			case 0x1061E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB031");
				break;
			case 0x1061F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB034");
				break;
			case 0x10620:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB037");
				break;
			case 0x10621:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB038");
				break;
			case 0x10622:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB039");
				break;
			case 0x10623:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB040");
				break;
			case 0x10624:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB041");
				break;
			case 0x10625:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB044");
				break;
			case 0x10626:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB045");
				break;
			case 0x10627:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB046");
				break;
			case 0x10628:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB047");
				break;
			case 0x10629:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB048");
				break;
			case 0x1062A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB049");
				break;
			case 0x1062B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB050");
				break;
			case 0x1062C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB051");
				break;
			case 0x1062D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB053");
				break;
			case 0x1062E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB054");
				break;
			case 0x1062F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB055");
				break;
			case 0x10630:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB056");
				break;
			case 0x10631:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB057");
				break;
			case 0x10632:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB058");
				break;
			case 0x10633:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB059");
				break;
			case 0x10634:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB060");
				break;
			case 0x10635:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB061");
				break;
			case 0x10636:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB065");
				break;
			case 0x10637:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB066");
				break;
			case 0x10638:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB067");
				break;
			case 0x10639:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB069");
				break;
			case 0x1063A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB070");
				break;
			case 0x1063B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB073");
				break;
			case 0x1063C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB074");
				break;
			case 0x1063D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB076");
				break;
			case 0x1063E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB077");
				break;
			case 0x1063F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB078");
				break;
			case 0x10640:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB079");
				break;
			case 0x10641:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB080");
				break;
			case 0x10642:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB081");
				break;
			case 0x10643:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB082");
				break;
			case 0x10644:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB085");
				break;
			case 0x10645:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB086");
				break;
			case 0x10646:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB087");
				break;
			case 0x10647:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A100-102");
				break;
			case 0x10648:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB118");
				break;
			case 0x10649:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB120");
				break;
			case 0x1064A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A120B");
				break;
			case 0x1064B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB122");
				break;
			case 0x1064C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB123");
				break;
			case 0x1064D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB131A");
				break;
			case 0x1064E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB131B");
				break;
			case 0x1064F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A131C");
				break;
			case 0x10650:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB164");
				break;
			case 0x10651:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB171");
				break;
			case 0x10652:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB180");
				break;
			case 0x10653:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB188");
				break;
			case 0x10654:
				strcpy_s(buf, buf_size, "LINEAR A SIGN AB191");
				break;
			case 0x10655:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A301");
				break;
			case 0x10656:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A302");
				break;
			case 0x10657:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A303");
				break;
			case 0x10658:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A304");
				break;
			case 0x10659:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A305");
				break;
			case 0x1065A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A306");
				break;
			case 0x1065B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A307");
				break;
			case 0x1065C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A308");
				break;
			case 0x1065D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A309A");
				break;
			case 0x1065E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A309B");
				break;
			case 0x1065F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A309C");
				break;
			case 0x10660:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A310");
				break;
			case 0x10661:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A311");
				break;
			case 0x10662:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A312");
				break;
			case 0x10663:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A313A");
				break;
			case 0x10664:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A313B");
				break;
			case 0x10665:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A313C");
				break;
			case 0x10666:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A314");
				break;
			case 0x10667:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A315");
				break;
			case 0x10668:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A316");
				break;
			case 0x10669:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A317");
				break;
			case 0x1066A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A318");
				break;
			case 0x1066B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A319");
				break;
			case 0x1066C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A320");
				break;
			case 0x1066D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A321");
				break;
			case 0x1066E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A322");
				break;
			case 0x1066F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A323");
				break;
			case 0x10670:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A324");
				break;
			case 0x10671:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A325");
				break;
			case 0x10672:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A326");
				break;
			case 0x10673:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A327");
				break;
			case 0x10674:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A328");
				break;
			case 0x10675:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A329");
				break;
			case 0x10676:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A330");
				break;
			case 0x10677:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A331");
				break;
			case 0x10678:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A332");
				break;
			case 0x10679:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A333");
				break;
			case 0x1067A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A334");
				break;
			case 0x1067B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A335");
				break;
			case 0x1067C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A336");
				break;
			case 0x1067D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A337");
				break;
			case 0x1067E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A338");
				break;
			case 0x1067F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A339");
				break;
			case 0x10680:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A340");
				break;
			case 0x10681:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A341");
				break;
			case 0x10682:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A342");
				break;
			case 0x10683:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A343");
				break;
			case 0x10684:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A344");
				break;
			case 0x10685:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A345");
				break;
			case 0x10686:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A346");
				break;
			case 0x10687:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A347");
				break;
			case 0x10688:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A348");
				break;
			case 0x10689:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A349");
				break;
			case 0x1068A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A350");
				break;
			case 0x1068B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A351");
				break;
			case 0x1068C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A352");
				break;
			case 0x1068D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A353");
				break;
			case 0x1068E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A354");
				break;
			case 0x1068F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A355");
				break;
			case 0x10690:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A356");
				break;
			case 0x10691:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A357");
				break;
			case 0x10692:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A358");
				break;
			case 0x10693:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A359");
				break;
			case 0x10694:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A360");
				break;
			case 0x10695:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A361");
				break;
			case 0x10696:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A362");
				break;
			case 0x10697:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A363");
				break;
			case 0x10698:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A364");
				break;
			case 0x10699:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A365");
				break;
			case 0x1069A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A366");
				break;
			case 0x1069B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A367");
				break;
			case 0x1069C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A368");
				break;
			case 0x1069D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A369");
				break;
			case 0x1069E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A370");
				break;
			case 0x1069F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A371");
				break;
			case 0x106A0:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A400-VAS");
				break;
			case 0x106A1:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A401-VAS");
				break;
			case 0x106A2:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A402-VAS");
				break;
			case 0x106A3:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A403-VAS");
				break;
			case 0x106A4:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A404-VAS");
				break;
			case 0x106A5:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A405-VAS");
				break;
			case 0x106A6:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A406-VAS");
				break;
			case 0x106A7:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A407-VAS");
				break;
			case 0x106A8:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A408-VAS");
				break;
			case 0x106A9:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A409-VAS");
				break;
			case 0x106AA:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A410-VAS");
				break;
			case 0x106AB:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A411-VAS");
				break;
			case 0x106AC:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A412-VAS");
				break;
			case 0x106AD:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A413-VAS");
				break;
			case 0x106AE:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A414-VAS");
				break;
			case 0x106AF:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A415-VAS");
				break;
			case 0x106B0:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A416-VAS");
				break;
			case 0x106B1:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A417-VAS");
				break;
			case 0x106B2:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A418-VAS");
				break;
			case 0x106B3:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A501");
				break;
			case 0x106B4:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A502");
				break;
			case 0x106B5:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A503");
				break;
			case 0x106B6:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A504");
				break;
			case 0x106B7:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A505");
				break;
			case 0x106B8:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A506");
				break;
			case 0x106B9:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A508");
				break;
			case 0x106BA:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A509");
				break;
			case 0x106BB:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A510");
				break;
			case 0x106BC:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A511");
				break;
			case 0x106BD:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A512");
				break;
			case 0x106BE:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A513");
				break;
			case 0x106BF:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A515");
				break;
			case 0x106C0:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A516");
				break;
			case 0x106C1:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A520");
				break;
			case 0x106C2:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A521");
				break;
			case 0x106C3:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A523");
				break;
			case 0x106C4:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A524");
				break;
			case 0x106C5:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A525");
				break;
			case 0x106C6:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A526");
				break;
			case 0x106C7:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A527");
				break;
			case 0x106C8:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A528");
				break;
			case 0x106C9:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A529");
				break;
			case 0x106CA:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A530");
				break;
			case 0x106CB:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A531");
				break;
			case 0x106CC:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A532");
				break;
			case 0x106CD:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A534");
				break;
			case 0x106CE:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A535");
				break;
			case 0x106CF:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A536");
				break;
			case 0x106D0:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A537");
				break;
			case 0x106D1:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A538");
				break;
			case 0x106D2:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A539");
				break;
			case 0x106D3:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A540");
				break;
			case 0x106D4:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A541");
				break;
			case 0x106D5:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A542");
				break;
			case 0x106D6:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A545");
				break;
			case 0x106D7:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A547");
				break;
			case 0x106D8:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A548");
				break;
			case 0x106D9:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A549");
				break;
			case 0x106DA:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A550");
				break;
			case 0x106DB:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A551");
				break;
			case 0x106DC:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A552");
				break;
			case 0x106DD:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A553");
				break;
			case 0x106DE:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A554");
				break;
			case 0x106DF:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A555");
				break;
			case 0x106E0:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A556");
				break;
			case 0x106E1:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A557");
				break;
			case 0x106E2:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A559");
				break;
			case 0x106E3:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A563");
				break;
			case 0x106E4:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A564");
				break;
			case 0x106E5:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A565");
				break;
			case 0x106E6:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A566");
				break;
			case 0x106E7:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A568");
				break;
			case 0x106E8:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A569");
				break;
			case 0x106E9:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A570");
				break;
			case 0x106EA:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A571");
				break;
			case 0x106EB:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A572");
				break;
			case 0x106EC:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A573");
				break;
			case 0x106ED:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A574");
				break;
			case 0x106EE:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A575");
				break;
			case 0x106EF:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A576");
				break;
			case 0x106F0:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A577");
				break;
			case 0x106F1:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A578");
				break;
			case 0x106F2:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A579");
				break;
			case 0x106F3:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A580");
				break;
			case 0x106F4:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A581");
				break;
			case 0x106F5:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A582");
				break;
			case 0x106F6:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A583");
				break;
			case 0x106F7:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A584");
				break;
			case 0x106F8:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A585");
				break;
			case 0x106F9:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A586");
				break;
			case 0x106FA:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A587");
				break;
			case 0x106FB:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A588");
				break;
			case 0x106FC:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A589");
				break;
			case 0x106FD:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A591");
				break;
			case 0x106FE:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A592");
				break;
			case 0x106FF:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A594");
				break;
			case 0x10700:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A595");
				break;
			case 0x10701:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A596");
				break;
			case 0x10702:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A598");
				break;
			case 0x10703:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A600");
				break;
			case 0x10704:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A601");
				break;
			case 0x10705:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A602");
				break;
			case 0x10706:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A603");
				break;
			case 0x10707:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A604");
				break;
			case 0x10708:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A606");
				break;
			case 0x10709:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A608");
				break;
			case 0x1070A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A609");
				break;
			case 0x1070B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A610");
				break;
			case 0x1070C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A611");
				break;
			case 0x1070D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A612");
				break;
			case 0x1070E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A613");
				break;
			case 0x1070F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A614");
				break;
			case 0x10710:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A615");
				break;
			case 0x10711:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A616");
				break;
			case 0x10712:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A617");
				break;
			case 0x10713:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A618");
				break;
			case 0x10714:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A619");
				break;
			case 0x10715:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A620");
				break;
			case 0x10716:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A621");
				break;
			case 0x10717:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A622");
				break;
			case 0x10718:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A623");
				break;
			case 0x10719:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A624");
				break;
			case 0x1071A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A626");
				break;
			case 0x1071B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A627");
				break;
			case 0x1071C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A628");
				break;
			case 0x1071D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A629");
				break;
			case 0x1071E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A634");
				break;
			case 0x1071F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A637");
				break;
			case 0x10720:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A638");
				break;
			case 0x10721:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A640");
				break;
			case 0x10722:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A642");
				break;
			case 0x10723:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A643");
				break;
			case 0x10724:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A644");
				break;
			case 0x10725:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A645");
				break;
			case 0x10726:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A646");
				break;
			case 0x10727:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A648");
				break;
			case 0x10728:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A649");
				break;
			case 0x10729:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A651");
				break;
			case 0x1072A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A652");
				break;
			case 0x1072B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A653");
				break;
			case 0x1072C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A654");
				break;
			case 0x1072D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A655");
				break;
			case 0x1072E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A656");
				break;
			case 0x1072F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A657");
				break;
			case 0x10730:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A658");
				break;
			case 0x10731:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A659");
				break;
			case 0x10732:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A660");
				break;
			case 0x10733:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A661");
				break;
			case 0x10734:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A662");
				break;
			case 0x10735:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A663");
				break;
			case 0x10736:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A664");
				break;
			case 0x10740:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A701 A");
				break;
			case 0x10741:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A702 B");
				break;
			case 0x10742:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A703 D");
				break;
			case 0x10743:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A704 E");
				break;
			case 0x10744:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A705 F");
				break;
			case 0x10745:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A706 H");
				break;
			case 0x10746:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A707 J");
				break;
			case 0x10747:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A708 K");
				break;
			case 0x10748:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A709 L");
				break;
			case 0x10749:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A709-2 L2");
				break;
			case 0x1074A:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A709-3 L3");
				break;
			case 0x1074B:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A709-4 L4");
				break;
			case 0x1074C:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A709-6 L6");
				break;
			case 0x1074D:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A710 W");
				break;
			case 0x1074E:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A711 X");
				break;
			case 0x1074F:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A712 Y");
				break;
			case 0x10750:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A713 OMEGA");
				break;
			case 0x10751:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A714 ABB");
				break;
			case 0x10752:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A715 BB");
				break;
			case 0x10753:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A717 DD");
				break;
			case 0x10754:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A726 EYYY");
				break;
			case 0x10755:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A732 JE");
				break;
			case 0x10760:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A800");
				break;
			case 0x10761:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A801");
				break;
			case 0x10762:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A802");
				break;
			case 0x10763:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A803");
				break;
			case 0x10764:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A804");
				break;
			case 0x10765:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A805");
				break;
			case 0x10766:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A806");
				break;
			case 0x10767:
				strcpy_s(buf, buf_size, "LINEAR A SIGN A807");
				break;
			case 0x10800:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE A");
				break;
			case 0x10801:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE E");
				break;
			case 0x10802:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE I");
				break;
			case 0x10803:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE O");
				break;
			case 0x10804:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE U");
				break;
			case 0x10805:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE JA");
				break;
			case 0x10808:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE JO");
				break;
			case 0x1080A:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE KA");
				break;
			case 0x1080B:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE KE");
				break;
			case 0x1080C:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE KI");
				break;
			case 0x1080D:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE KO");
				break;
			case 0x1080E:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE KU");
				break;
			case 0x1080F:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE LA");
				break;
			case 0x10810:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE LE");
				break;
			case 0x10811:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE LI");
				break;
			case 0x10812:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE LO");
				break;
			case 0x10813:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE LU");
				break;
			case 0x10814:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE MA");
				break;
			case 0x10815:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE ME");
				break;
			case 0x10816:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE MI");
				break;
			case 0x10817:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE MO");
				break;
			case 0x10818:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE MU");
				break;
			case 0x10819:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE NA");
				break;
			case 0x1081A:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE NE");
				break;
			case 0x1081B:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE NI");
				break;
			case 0x1081C:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE NO");
				break;
			case 0x1081D:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE NU");
				break;
			case 0x1081E:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE PA");
				break;
			case 0x1081F:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE PE");
				break;
			case 0x10820:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE PI");
				break;
			case 0x10821:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE PO");
				break;
			case 0x10822:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE PU");
				break;
			case 0x10823:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE RA");
				break;
			case 0x10824:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE RE");
				break;
			case 0x10825:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE RI");
				break;
			case 0x10826:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE RO");
				break;
			case 0x10827:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE RU");
				break;
			case 0x10828:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE SA");
				break;
			case 0x10829:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE SE");
				break;
			case 0x1082A:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE SI");
				break;
			case 0x1082B:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE SO");
				break;
			case 0x1082C:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE SU");
				break;
			case 0x1082D:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE TA");
				break;
			case 0x1082E:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE TE");
				break;
			case 0x1082F:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE TI");
				break;
			case 0x10830:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE TO");
				break;
			case 0x10831:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE TU");
				break;
			case 0x10832:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE WA");
				break;
			case 0x10833:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE WE");
				break;
			case 0x10834:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE WI");
				break;
			case 0x10835:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE WO");
				break;
			case 0x10837:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE XA");
				break;
			case 0x10838:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE XE");
				break;
			case 0x1083C:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE ZA");
				break;
			case 0x1083F:
				strcpy_s(buf, buf_size, "CYPRIOT SYLLABLE ZO");
				break;
			case 0x10840:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER ALEPH");
				break;
			case 0x10841:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER BETH");
				break;
			case 0x10842:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER GIMEL");
				break;
			case 0x10843:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER DALETH");
				break;
			case 0x10844:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER HE");
				break;
			case 0x10845:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER WAW");
				break;
			case 0x10846:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER ZAYIN");
				break;
			case 0x10847:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER HETH");
				break;
			case 0x10848:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER TETH");
				break;
			case 0x10849:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER YODH");
				break;
			case 0x1084A:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER KAPH");
				break;
			case 0x1084B:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER LAMEDH");
				break;
			case 0x1084C:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER MEM");
				break;
			case 0x1084D:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER NUN");
				break;
			case 0x1084E:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER SAMEKH");
				break;
			case 0x1084F:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER AYIN");
				break;
			case 0x10850:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER PE");
				break;
			case 0x10851:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER SADHE");
				break;
			case 0x10852:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER QOPH");
				break;
			case 0x10853:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER RESH");
				break;
			case 0x10854:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER SHIN");
				break;
			case 0x10855:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC LETTER TAW");
				break;
			case 0x10857:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC SECTION SIGN");
				break;
			case 0x10858:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC NUMBER ONE");
				break;
			case 0x10859:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC NUMBER TWO");
				break;
			case 0x1085A:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC NUMBER THREE");
				break;
			case 0x1085B:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC NUMBER TEN");
				break;
			case 0x1085C:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC NUMBER TWENTY");
				break;
			case 0x1085D:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC NUMBER ONE HUNDRED");
				break;
			case 0x1085E:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC NUMBER ONE THOUSAND");
				break;
			case 0x1085F:
				strcpy_s(buf, buf_size, "IMPERIAL ARAMAIC NUMBER TEN THOUSAND");
				break;
			case 0x10860:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER ALEPH");
				break;
			case 0x10861:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER BETH");
				break;
			case 0x10862:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER GIMEL");
				break;
			case 0x10863:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER DALETH");
				break;
			case 0x10864:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER HE");
				break;
			case 0x10865:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER WAW");
				break;
			case 0x10866:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER ZAYIN");
				break;
			case 0x10867:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER HETH");
				break;
			case 0x10868:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER TETH");
				break;
			case 0x10869:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER YODH");
				break;
			case 0x1086A:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER KAPH");
				break;
			case 0x1086B:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER LAMEDH");
				break;
			case 0x1086C:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER MEM");
				break;
			case 0x1086D:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER FINAL NUN");
				break;
			case 0x1086E:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER NUN");
				break;
			case 0x1086F:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER SAMEKH");
				break;
			case 0x10870:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER AYIN");
				break;
			case 0x10871:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER PE");
				break;
			case 0x10872:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER SADHE");
				break;
			case 0x10873:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER QOPH");
				break;
			case 0x10874:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER RESH");
				break;
			case 0x10875:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER SHIN");
				break;
			case 0x10876:
				strcpy_s(buf, buf_size, "PALMYRENE LETTER TAW");
				break;
			case 0x10877:
				strcpy_s(buf, buf_size, "PALMYRENE LEFT-POINTING FLEURON");
				break;
			case 0x10878:
				strcpy_s(buf, buf_size, "PALMYRENE RIGHT-POINTING FLEURON");
				break;
			case 0x10879:
				strcpy_s(buf, buf_size, "PALMYRENE NUMBER ONE");
				break;
			case 0x1087A:
				strcpy_s(buf, buf_size, "PALMYRENE NUMBER TWO");
				break;
			case 0x1087B:
				strcpy_s(buf, buf_size, "PALMYRENE NUMBER THREE");
				break;
			case 0x1087C:
				strcpy_s(buf, buf_size, "PALMYRENE NUMBER FOUR");
				break;
			case 0x1087D:
				strcpy_s(buf, buf_size, "PALMYRENE NUMBER FIVE");
				break;
			case 0x1087E:
				strcpy_s(buf, buf_size, "PALMYRENE NUMBER TEN");
				break;
			case 0x1087F:
				strcpy_s(buf, buf_size, "PALMYRENE NUMBER TWENTY");
				break;
			case 0x10880:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER FINAL ALEPH");
				break;
			case 0x10881:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER ALEPH");
				break;
			case 0x10882:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER FINAL BETH");
				break;
			case 0x10883:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER BETH");
				break;
			case 0x10884:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER GIMEL");
				break;
			case 0x10885:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER DALETH");
				break;
			case 0x10886:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER FINAL HE");
				break;
			case 0x10887:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER HE");
				break;
			case 0x10888:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER WAW");
				break;
			case 0x10889:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER ZAYIN");
				break;
			case 0x1088A:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER HETH");
				break;
			case 0x1088B:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER TETH");
				break;
			case 0x1088C:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER FINAL YODH");
				break;
			case 0x1088D:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER YODH");
				break;
			case 0x1088E:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER FINAL KAPH");
				break;
			case 0x1088F:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER KAPH");
				break;
			case 0x10890:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER FINAL LAMEDH");
				break;
			case 0x10891:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER LAMEDH");
				break;
			case 0x10892:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER FINAL MEM");
				break;
			case 0x10893:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER MEM");
				break;
			case 0x10894:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER FINAL NUN");
				break;
			case 0x10895:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER NUN");
				break;
			case 0x10896:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER SAMEKH");
				break;
			case 0x10897:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER AYIN");
				break;
			case 0x10898:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER PE");
				break;
			case 0x10899:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER SADHE");
				break;
			case 0x1089A:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER QOPH");
				break;
			case 0x1089B:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER RESH");
				break;
			case 0x1089C:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER FINAL SHIN");
				break;
			case 0x1089D:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER SHIN");
				break;
			case 0x1089E:
				strcpy_s(buf, buf_size, "NABATAEAN LETTER TAW");
				break;
			case 0x108A7:
				strcpy_s(buf, buf_size, "NABATAEAN NUMBER ONE");
				break;
			case 0x108A8:
				strcpy_s(buf, buf_size, "NABATAEAN NUMBER TWO");
				break;
			case 0x108A9:
				strcpy_s(buf, buf_size, "NABATAEAN NUMBER THREE");
				break;
			case 0x108AA:
				strcpy_s(buf, buf_size, "NABATAEAN NUMBER FOUR");
				break;
			case 0x108AB:
				strcpy_s(buf, buf_size, "NABATAEAN CRUCIFORM NUMBER FOUR");
				break;
			case 0x108AC:
				strcpy_s(buf, buf_size, "NABATAEAN NUMBER FIVE");
				break;
			case 0x108AD:
				strcpy_s(buf, buf_size, "NABATAEAN NUMBER TEN");
				break;
			case 0x108AE:
				strcpy_s(buf, buf_size, "NABATAEAN NUMBER TWENTY");
				break;
			case 0x108AF:
				strcpy_s(buf, buf_size, "NABATAEAN NUMBER ONE HUNDRED");
				break;
			case 0x108E0:
				strcpy_s(buf, buf_size, "HATRAN LETTER ALEPH");
				break;
			case 0x108E1:
				strcpy_s(buf, buf_size, "HATRAN LETTER BETH");
				break;
			case 0x108E2:
				strcpy_s(buf, buf_size, "HATRAN LETTER GIMEL");
				break;
			case 0x108E3:
				strcpy_s(buf, buf_size, "HATRAN LETTER DALETH-RESH");
				break;
			case 0x108E4:
				strcpy_s(buf, buf_size, "HATRAN LETTER HE");
				break;
			case 0x108E5:
				strcpy_s(buf, buf_size, "HATRAN LETTER WAW");
				break;
			case 0x108E6:
				strcpy_s(buf, buf_size, "HATRAN LETTER ZAYN");
				break;
			case 0x108E7:
				strcpy_s(buf, buf_size, "HATRAN LETTER HETH");
				break;
			case 0x108E8:
				strcpy_s(buf, buf_size, "HATRAN LETTER TETH");
				break;
			case 0x108E9:
				strcpy_s(buf, buf_size, "HATRAN LETTER YODH");
				break;
			case 0x108EA:
				strcpy_s(buf, buf_size, "HATRAN LETTER KAPH");
				break;
			case 0x108EB:
				strcpy_s(buf, buf_size, "HATRAN LETTER LAMEDH");
				break;
			case 0x108EC:
				strcpy_s(buf, buf_size, "HATRAN LETTER MEM");
				break;
			case 0x108ED:
				strcpy_s(buf, buf_size, "HATRAN LETTER NUN");
				break;
			case 0x108EE:
				strcpy_s(buf, buf_size, "HATRAN LETTER SAMEKH");
				break;
			case 0x108EF:
				strcpy_s(buf, buf_size, "HATRAN LETTER AYN");
				break;
			case 0x108F0:
				strcpy_s(buf, buf_size, "HATRAN LETTER PE");
				break;
			case 0x108F1:
				strcpy_s(buf, buf_size, "HATRAN LETTER SADHE");
				break;
			case 0x108F2:
				strcpy_s(buf, buf_size, "HATRAN LETTER QOPH");
				break;
			case 0x108F4:
				strcpy_s(buf, buf_size, "HATRAN LETTER SHIN");
				break;
			case 0x108F5:
				strcpy_s(buf, buf_size, "HATRAN LETTER TAW");
				break;
			case 0x108FB:
				strcpy_s(buf, buf_size, "HATRAN NUMBER ONE");
				break;
			case 0x108FC:
				strcpy_s(buf, buf_size, "HATRAN NUMBER FIVE");
				break;
			case 0x108FD:
				strcpy_s(buf, buf_size, "HATRAN NUMBER TEN");
				break;
			case 0x108FE:
				strcpy_s(buf, buf_size, "HATRAN NUMBER TWENTY");
				break;
			case 0x108FF:
				strcpy_s(buf, buf_size, "HATRAN NUMBER ONE HUNDRED");
				break;
			case 0x10900:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER ALF");
				break;
			case 0x10901:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER BET");
				break;
			case 0x10902:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER GAML");
				break;
			case 0x10903:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER DELT");
				break;
			case 0x10904:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER HE");
				break;
			case 0x10905:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER WAU");
				break;
			case 0x10906:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER ZAI");
				break;
			case 0x10907:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER HET");
				break;
			case 0x10908:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER TET");
				break;
			case 0x10909:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER YOD");
				break;
			case 0x1090A:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER KAF");
				break;
			case 0x1090B:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER LAMD");
				break;
			case 0x1090C:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER MEM");
				break;
			case 0x1090D:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER NUN");
				break;
			case 0x1090E:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER SEMK");
				break;
			case 0x1090F:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER AIN");
				break;
			case 0x10910:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER PE");
				break;
			case 0x10911:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER SADE");
				break;
			case 0x10912:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER QOF");
				break;
			case 0x10913:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER ROSH");
				break;
			case 0x10914:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER SHIN");
				break;
			case 0x10915:
				strcpy_s(buf, buf_size, "PHOENICIAN LETTER TAU");
				break;
			case 0x10916:
				strcpy_s(buf, buf_size, "PHOENICIAN NUMBER ONE");
				break;
			case 0x10917:
				strcpy_s(buf, buf_size, "PHOENICIAN NUMBER TEN");
				break;
			case 0x10918:
				strcpy_s(buf, buf_size, "PHOENICIAN NUMBER TWENTY");
				break;
			case 0x10919:
				strcpy_s(buf, buf_size, "PHOENICIAN NUMBER ONE HUNDRED");
				break;
			case 0x1091A:
				strcpy_s(buf, buf_size, "PHOENICIAN NUMBER TWO");
				break;
			case 0x1091B:
				strcpy_s(buf, buf_size, "PHOENICIAN NUMBER THREE");
				break;
			case 0x1091F:
				strcpy_s(buf, buf_size, "PHOENICIAN WORD SEPARATOR");
				break;
			case 0x10920:
				strcpy_s(buf, buf_size, "LYDIAN LETTER A");
				break;
			case 0x10921:
				strcpy_s(buf, buf_size, "LYDIAN LETTER B");
				break;
			case 0x10922:
				strcpy_s(buf, buf_size, "LYDIAN LETTER G");
				break;
			case 0x10923:
				strcpy_s(buf, buf_size, "LYDIAN LETTER D");
				break;
			case 0x10924:
				strcpy_s(buf, buf_size, "LYDIAN LETTER E");
				break;
			case 0x10925:
				strcpy_s(buf, buf_size, "LYDIAN LETTER V");
				break;
			case 0x10926:
				strcpy_s(buf, buf_size, "LYDIAN LETTER I");
				break;
			case 0x10927:
				strcpy_s(buf, buf_size, "LYDIAN LETTER Y");
				break;
			case 0x10928:
				strcpy_s(buf, buf_size, "LYDIAN LETTER K");
				break;
			case 0x10929:
				strcpy_s(buf, buf_size, "LYDIAN LETTER L");
				break;
			case 0x1092A:
				strcpy_s(buf, buf_size, "LYDIAN LETTER M");
				break;
			case 0x1092B:
				strcpy_s(buf, buf_size, "LYDIAN LETTER N");
				break;
			case 0x1092C:
				strcpy_s(buf, buf_size, "LYDIAN LETTER O");
				break;
			case 0x1092D:
				strcpy_s(buf, buf_size, "LYDIAN LETTER R");
				break;
			case 0x1092E:
				strcpy_s(buf, buf_size, "LYDIAN LETTER SS");
				break;
			case 0x1092F:
				strcpy_s(buf, buf_size, "LYDIAN LETTER T");
				break;
			case 0x10930:
				strcpy_s(buf, buf_size, "LYDIAN LETTER U");
				break;
			case 0x10931:
				strcpy_s(buf, buf_size, "LYDIAN LETTER F");
				break;
			case 0x10932:
				strcpy_s(buf, buf_size, "LYDIAN LETTER Q");
				break;
			case 0x10933:
				strcpy_s(buf, buf_size, "LYDIAN LETTER S");
				break;
			case 0x10934:
				strcpy_s(buf, buf_size, "LYDIAN LETTER TT");
				break;
			case 0x10935:
				strcpy_s(buf, buf_size, "LYDIAN LETTER AN");
				break;
			case 0x10936:
				strcpy_s(buf, buf_size, "LYDIAN LETTER EN");
				break;
			case 0x10937:
				strcpy_s(buf, buf_size, "LYDIAN LETTER LY");
				break;
			case 0x10938:
				strcpy_s(buf, buf_size, "LYDIAN LETTER NN");
				break;
			case 0x10939:
				strcpy_s(buf, buf_size, "LYDIAN LETTER C");
				break;
			case 0x1093F:
				strcpy_s(buf, buf_size, "LYDIAN TRIANGULAR MARK");
				break;
			case 0x10980:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER A");
				break;
			case 0x10981:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER E");
				break;
			case 0x10982:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER I");
				break;
			case 0x10983:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER O");
				break;
			case 0x10984:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER YA");
				break;
			case 0x10985:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER WA");
				break;
			case 0x10986:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER BA");
				break;
			case 0x10987:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER BA-2");
				break;
			case 0x10988:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER PA");
				break;
			case 0x10989:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER MA");
				break;
			case 0x1098A:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER NA");
				break;
			case 0x1098B:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER NA-2");
				break;
			case 0x1098C:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER NE");
				break;
			case 0x1098D:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER NE-2");
				break;
			case 0x1098E:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER RA");
				break;
			case 0x1098F:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER RA-2");
				break;
			case 0x10990:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER LA");
				break;
			case 0x10991:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER KHA");
				break;
			case 0x10992:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER HHA");
				break;
			case 0x10993:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER SA");
				break;
			case 0x10994:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER SA-2");
				break;
			case 0x10995:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER SE");
				break;
			case 0x10996:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER KA");
				break;
			case 0x10997:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER QA");
				break;
			case 0x10998:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER TA");
				break;
			case 0x10999:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER TA-2");
				break;
			case 0x1099A:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER TE");
				break;
			case 0x1099B:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER TE-2");
				break;
			case 0x1099C:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER TO");
				break;
			case 0x1099D:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC LETTER DA");
				break;
			case 0x1099E:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC SYMBOL VIDJ");
				break;
			case 0x1099F:
				strcpy_s(buf, buf_size, "MEROITIC HIEROGLYPHIC SYMBOL VIDJ-2");
				break;
			case 0x109A0:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER A");
				break;
			case 0x109A1:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER E");
				break;
			case 0x109A2:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER I");
				break;
			case 0x109A3:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER O");
				break;
			case 0x109A4:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER YA");
				break;
			case 0x109A5:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER WA");
				break;
			case 0x109A6:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER BA");
				break;
			case 0x109A7:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER PA");
				break;
			case 0x109A8:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER MA");
				break;
			case 0x109A9:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER NA");
				break;
			case 0x109AA:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER NE");
				break;
			case 0x109AB:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER RA");
				break;
			case 0x109AC:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER LA");
				break;
			case 0x109AD:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER KHA");
				break;
			case 0x109AE:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER HHA");
				break;
			case 0x109AF:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER SA");
				break;
			case 0x109B0:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER ARCHAIC SA");
				break;
			case 0x109B1:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER SE");
				break;
			case 0x109B2:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER KA");
				break;
			case 0x109B3:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER QA");
				break;
			case 0x109B4:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER TA");
				break;
			case 0x109B5:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER TE");
				break;
			case 0x109B6:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER TO");
				break;
			case 0x109B7:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LETTER DA");
				break;
			case 0x109BC:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION ELEVEN TWELFTHS");
				break;
			case 0x109BD:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION ONE HALF");
				break;
			case 0x109BE:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LOGOGRAM RMT");
				break;
			case 0x109BF:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE LOGOGRAM IMN");
				break;
			case 0x109C0:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER ONE");
				break;
			case 0x109C1:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER TWO");
				break;
			case 0x109C2:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER THREE");
				break;
			case 0x109C3:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FOUR");
				break;
			case 0x109C4:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FIVE");
				break;
			case 0x109C5:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SIX");
				break;
			case 0x109C6:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SEVEN");
				break;
			case 0x109C7:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER EIGHT");
				break;
			case 0x109C8:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER NINE");
				break;
			case 0x109C9:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER TEN");
				break;
			case 0x109CA:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER TWENTY");
				break;
			case 0x109CB:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER THIRTY");
				break;
			case 0x109CC:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FORTY");
				break;
			case 0x109CD:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FIFTY");
				break;
			case 0x109CE:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SIXTY");
				break;
			case 0x109CF:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SEVENTY");
				break;
			case 0x109D2:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER ONE HUNDRED");
				break;
			case 0x109D3:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER TWO HUNDRED");
				break;
			case 0x109D4:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER THREE HUNDRED");
				break;
			case 0x109D5:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FOUR HUNDRED");
				break;
			case 0x109D6:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FIVE HUNDRED");
				break;
			case 0x109D7:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SIX HUNDRED");
				break;
			case 0x109D8:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SEVEN HUNDRED");
				break;
			case 0x109D9:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER EIGHT HUNDRED");
				break;
			case 0x109DA:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER NINE HUNDRED");
				break;
			case 0x109DB:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER ONE THOUSAND");
				break;
			case 0x109DC:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER TWO THOUSAND");
				break;
			case 0x109DD:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER THREE THOUSAND");
				break;
			case 0x109DE:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FOUR THOUSAND");
				break;
			case 0x109DF:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FIVE THOUSAND");
				break;
			case 0x109E0:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SIX THOUSAND");
				break;
			case 0x109E1:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SEVEN THOUSAND");
				break;
			case 0x109E2:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER EIGHT THOUSAND");
				break;
			case 0x109E3:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER NINE THOUSAND");
				break;
			case 0x109E4:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER TEN THOUSAND");
				break;
			case 0x109E5:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER TWENTY THOUSAND");
				break;
			case 0x109E6:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER THIRTY THOUSAND");
				break;
			case 0x109E7:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FORTY THOUSAND");
				break;
			case 0x109E8:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FIFTY THOUSAND");
				break;
			case 0x109E9:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SIXTY THOUSAND");
				break;
			case 0x109EA:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SEVENTY THOUSAND");
				break;
			case 0x109EB:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER EIGHTY THOUSAND");
				break;
			case 0x109EC:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER NINETY THOUSAND");
				break;
			case 0x109ED:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER ONE HUNDRED THOUSAND");
				break;
			case 0x109EE:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER TWO HUNDRED THOUSAND");
				break;
			case 0x109EF:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER THREE HUNDRED THOUSAND");
				break;
			case 0x109F0:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FOUR HUNDRED THOUSAND");
				break;
			case 0x109F1:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER FIVE HUNDRED THOUSAND");
				break;
			case 0x109F2:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SIX HUNDRED THOUSAND");
				break;
			case 0x109F3:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER SEVEN HUNDRED THOUSAND");
				break;
			case 0x109F4:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER EIGHT HUNDRED THOUSAND");
				break;
			case 0x109F5:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE NUMBER NINE HUNDRED THOUSAND");
				break;
			case 0x109F6:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION ONE TWELFTH");
				break;
			case 0x109F7:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION TWO TWELFTHS");
				break;
			case 0x109F8:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION THREE TWELFTHS");
				break;
			case 0x109F9:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION FOUR TWELFTHS");
				break;
			case 0x109FA:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION FIVE TWELFTHS");
				break;
			case 0x109FB:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION SIX TWELFTHS");
				break;
			case 0x109FC:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION SEVEN TWELFTHS");
				break;
			case 0x109FD:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION EIGHT TWELFTHS");
				break;
			case 0x109FE:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION NINE TWELFTHS");
				break;
			case 0x109FF:
				strcpy_s(buf, buf_size, "MEROITIC CURSIVE FRACTION TEN TWELFTHS");
				break;
			case 0x10A00:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER A");
				break;
			case 0x10A01:
				strcpy_s(buf, buf_size, "KHAROSHTHI VOWEL SIGN I");
				break;
			case 0x10A02:
				strcpy_s(buf, buf_size, "KHAROSHTHI VOWEL SIGN U");
				break;
			case 0x10A03:
				strcpy_s(buf, buf_size, "KHAROSHTHI VOWEL SIGN VOCALIC R");
				break;
			case 0x10A05:
				strcpy_s(buf, buf_size, "KHAROSHTHI VOWEL SIGN E");
				break;
			case 0x10A06:
				strcpy_s(buf, buf_size, "KHAROSHTHI VOWEL SIGN O");
				break;
			case 0x10A0C:
				strcpy_s(buf, buf_size, "KHAROSHTHI VOWEL LENGTH MARK");
				break;
			case 0x10A0D:
				strcpy_s(buf, buf_size, "KHAROSHTHI SIGN DOUBLE RING BELOW");
				break;
			case 0x10A0E:
				strcpy_s(buf, buf_size, "KHAROSHTHI SIGN ANUSVARA");
				break;
			case 0x10A0F:
				strcpy_s(buf, buf_size, "KHAROSHTHI SIGN VISARGA");
				break;
			case 0x10A10:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER KA");
				break;
			case 0x10A11:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER KHA");
				break;
			case 0x10A12:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER GA");
				break;
			case 0x10A13:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER GHA");
				break;
			case 0x10A15:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER CA");
				break;
			case 0x10A16:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER CHA");
				break;
			case 0x10A17:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER JA");
				break;
			case 0x10A19:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER NYA");
				break;
			case 0x10A1A:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER TTA");
				break;
			case 0x10A1B:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER TTHA");
				break;
			case 0x10A1C:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER DDA");
				break;
			case 0x10A1D:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER DDHA");
				break;
			case 0x10A1E:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER NNA");
				break;
			case 0x10A1F:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER TA");
				break;
			case 0x10A20:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER THA");
				break;
			case 0x10A21:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER DA");
				break;
			case 0x10A22:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER DHA");
				break;
			case 0x10A23:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER NA");
				break;
			case 0x10A24:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER PA");
				break;
			case 0x10A25:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER PHA");
				break;
			case 0x10A26:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER BA");
				break;
			case 0x10A27:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER BHA");
				break;
			case 0x10A28:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER MA");
				break;
			case 0x10A29:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER YA");
				break;
			case 0x10A2A:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER RA");
				break;
			case 0x10A2B:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER LA");
				break;
			case 0x10A2C:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER VA");
				break;
			case 0x10A2D:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER SHA");
				break;
			case 0x10A2E:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER SSA");
				break;
			case 0x10A2F:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER SA");
				break;
			case 0x10A30:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER ZA");
				break;
			case 0x10A31:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER HA");
				break;
			case 0x10A32:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER KKA");
				break;
			case 0x10A33:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER TTTHA");
				break;
			case 0x10A34:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER TTTA");
				break;
			case 0x10A35:
				strcpy_s(buf, buf_size, "KHAROSHTHI LETTER VHA");
				break;
			case 0x10A38:
				strcpy_s(buf, buf_size, "KHAROSHTHI SIGN BAR ABOVE");
				break;
			case 0x10A39:
				strcpy_s(buf, buf_size, "KHAROSHTHI SIGN CAUDA");
				break;
			case 0x10A3A:
				strcpy_s(buf, buf_size, "KHAROSHTHI SIGN DOT BELOW");
				break;
			case 0x10A3F:
				strcpy_s(buf, buf_size, "KHAROSHTHI VIRAMA");
				break;
			case 0x10A40:
				strcpy_s(buf, buf_size, "KHAROSHTHI DIGIT ONE");
				break;
			case 0x10A41:
				strcpy_s(buf, buf_size, "KHAROSHTHI DIGIT TWO");
				break;
			case 0x10A42:
				strcpy_s(buf, buf_size, "KHAROSHTHI DIGIT THREE");
				break;
			case 0x10A43:
				strcpy_s(buf, buf_size, "KHAROSHTHI DIGIT FOUR");
				break;
			case 0x10A44:
				strcpy_s(buf, buf_size, "KHAROSHTHI NUMBER TEN");
				break;
			case 0x10A45:
				strcpy_s(buf, buf_size, "KHAROSHTHI NUMBER TWENTY");
				break;
			case 0x10A46:
				strcpy_s(buf, buf_size, "KHAROSHTHI NUMBER ONE HUNDRED");
				break;
			case 0x10A47:
				strcpy_s(buf, buf_size, "KHAROSHTHI NUMBER ONE THOUSAND");
				break;
			case 0x10A48:
				strcpy_s(buf, buf_size, "KHAROSHTHI FRACTION ONE HALF");
				break;
			case 0x10A50:
				strcpy_s(buf, buf_size, "KHAROSHTHI PUNCTUATION DOT");
				break;
			case 0x10A51:
				strcpy_s(buf, buf_size, "KHAROSHTHI PUNCTUATION SMALL CIRCLE");
				break;
			case 0x10A52:
				strcpy_s(buf, buf_size, "KHAROSHTHI PUNCTUATION CIRCLE");
				break;
			case 0x10A53:
				strcpy_s(buf, buf_size, "KHAROSHTHI PUNCTUATION CRESCENT BAR");
				break;
			case 0x10A54:
				strcpy_s(buf, buf_size, "KHAROSHTHI PUNCTUATION MANGALAM");
				break;
			case 0x10A55:
				strcpy_s(buf, buf_size, "KHAROSHTHI PUNCTUATION LOTUS");
				break;
			case 0x10A56:
				strcpy_s(buf, buf_size, "KHAROSHTHI PUNCTUATION DANDA");
				break;
			case 0x10A57:
				strcpy_s(buf, buf_size, "KHAROSHTHI PUNCTUATION DOUBLE DANDA");
				break;
			case 0x10A58:
				strcpy_s(buf, buf_size, "KHAROSHTHI PUNCTUATION LINES");
				break;
			case 0x10A60:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER HE");
				break;
			case 0x10A61:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER LAMEDH");
				break;
			case 0x10A62:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER HETH");
				break;
			case 0x10A63:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER MEM");
				break;
			case 0x10A64:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER QOPH");
				break;
			case 0x10A65:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER WAW");
				break;
			case 0x10A66:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER SHIN");
				break;
			case 0x10A67:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER RESH");
				break;
			case 0x10A68:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER BETH");
				break;
			case 0x10A69:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER TAW");
				break;
			case 0x10A6A:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER SAT");
				break;
			case 0x10A6B:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER KAPH");
				break;
			case 0x10A6C:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER NUN");
				break;
			case 0x10A6D:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER KHETH");
				break;
			case 0x10A6E:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER SADHE");
				break;
			case 0x10A6F:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER SAMEKH");
				break;
			case 0x10A70:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER FE");
				break;
			case 0x10A71:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER ALEF");
				break;
			case 0x10A72:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER AYN");
				break;
			case 0x10A73:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER DHADHE");
				break;
			case 0x10A74:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER GIMEL");
				break;
			case 0x10A75:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER DALETH");
				break;
			case 0x10A76:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER GHAYN");
				break;
			case 0x10A77:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER TETH");
				break;
			case 0x10A78:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER ZAYN");
				break;
			case 0x10A79:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER DHALETH");
				break;
			case 0x10A7A:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER YODH");
				break;
			case 0x10A7B:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER THAW");
				break;
			case 0x10A7C:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN LETTER THETH");
				break;
			case 0x10A7D:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN NUMBER ONE");
				break;
			case 0x10A7E:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN NUMBER FIFTY");
				break;
			case 0x10A7F:
				strcpy_s(buf, buf_size, "OLD SOUTH ARABIAN NUMERIC INDICATOR");
				break;
			case 0x10A80:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER HEH");
				break;
			case 0x10A81:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER LAM");
				break;
			case 0x10A82:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER HAH");
				break;
			case 0x10A83:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER MEEM");
				break;
			case 0x10A84:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER QAF");
				break;
			case 0x10A85:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER WAW");
				break;
			case 0x10A86:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER ES-2");
				break;
			case 0x10A87:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER REH");
				break;
			case 0x10A88:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER BEH");
				break;
			case 0x10A89:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER TEH");
				break;
			case 0x10A8A:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER ES-1");
				break;
			case 0x10A8B:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER KAF");
				break;
			case 0x10A8C:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER NOON");
				break;
			case 0x10A8D:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER KHAH");
				break;
			case 0x10A8E:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER SAD");
				break;
			case 0x10A8F:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER ES-3");
				break;
			case 0x10A90:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER FEH");
				break;
			case 0x10A91:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER ALEF");
				break;
			case 0x10A92:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER AIN");
				break;
			case 0x10A93:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER DAD");
				break;
			case 0x10A94:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER GEEM");
				break;
			case 0x10A95:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER DAL");
				break;
			case 0x10A96:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER GHAIN");
				break;
			case 0x10A97:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER TAH");
				break;
			case 0x10A98:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER ZAIN");
				break;
			case 0x10A99:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER THAL");
				break;
			case 0x10A9A:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER YEH");
				break;
			case 0x10A9B:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER THEH");
				break;
			case 0x10A9C:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN LETTER ZAH");
				break;
			case 0x10A9D:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN NUMBER ONE");
				break;
			case 0x10A9E:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN NUMBER TEN");
				break;
			case 0x10A9F:
				strcpy_s(buf, buf_size, "OLD NORTH ARABIAN NUMBER TWENTY");
				break;
			case 0x10AC0:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER ALEPH");
				break;
			case 0x10AC1:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER BETH");
				break;
			case 0x10AC2:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER BHETH");
				break;
			case 0x10AC3:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER GIMEL");
				break;
			case 0x10AC4:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER GHIMEL");
				break;
			case 0x10AC5:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER DALETH");
				break;
			case 0x10AC6:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER HE");
				break;
			case 0x10AC7:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER WAW");
				break;
			case 0x10AC8:
				strcpy_s(buf, buf_size, "MANICHAEAN SIGN UD");
				break;
			case 0x10AC9:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER ZAYIN");
				break;
			case 0x10ACA:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER ZHAYIN");
				break;
			case 0x10ACB:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER JAYIN");
				break;
			case 0x10ACC:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER JHAYIN");
				break;
			case 0x10ACD:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER HETH");
				break;
			case 0x10ACE:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER TETH");
				break;
			case 0x10ACF:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER YODH");
				break;
			case 0x10AD0:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER KAPH");
				break;
			case 0x10AD1:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER XAPH");
				break;
			case 0x10AD2:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER KHAPH");
				break;
			case 0x10AD3:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER LAMEDH");
				break;
			case 0x10AD4:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER DHAMEDH");
				break;
			case 0x10AD5:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER THAMEDH");
				break;
			case 0x10AD6:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER MEM");
				break;
			case 0x10AD7:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER NUN");
				break;
			case 0x10AD8:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER SAMEKH");
				break;
			case 0x10AD9:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER AYIN");
				break;
			case 0x10ADA:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER AAYIN");
				break;
			case 0x10ADB:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER PE");
				break;
			case 0x10ADC:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER FE");
				break;
			case 0x10ADD:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER SADHE");
				break;
			case 0x10ADE:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER QOPH");
				break;
			case 0x10ADF:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER XOPH");
				break;
			case 0x10AE0:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER QHOPH");
				break;
			case 0x10AE1:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER RESH");
				break;
			case 0x10AE2:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER SHIN");
				break;
			case 0x10AE3:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER SSHIN");
				break;
			case 0x10AE4:
				strcpy_s(buf, buf_size, "MANICHAEAN LETTER TAW");
				break;
			case 0x10AE5:
				strcpy_s(buf, buf_size, "MANICHAEAN ABBREVIATION MARK ABOVE");
				break;
			case 0x10AE6:
				strcpy_s(buf, buf_size, "MANICHAEAN ABBREVIATION MARK BELOW");
				break;
			case 0x10AEB:
				strcpy_s(buf, buf_size, "MANICHAEAN NUMBER ONE");
				break;
			case 0x10AEC:
				strcpy_s(buf, buf_size, "MANICHAEAN NUMBER FIVE");
				break;
			case 0x10AED:
				strcpy_s(buf, buf_size, "MANICHAEAN NUMBER TEN");
				break;
			case 0x10AEE:
				strcpy_s(buf, buf_size, "MANICHAEAN NUMBER TWENTY");
				break;
			case 0x10AEF:
				strcpy_s(buf, buf_size, "MANICHAEAN NUMBER ONE HUNDRED");
				break;
			case 0x10AF0:
				strcpy_s(buf, buf_size, "MANICHAEAN PUNCTUATION STAR");
				break;
			case 0x10AF1:
				strcpy_s(buf, buf_size, "MANICHAEAN PUNCTUATION FLEURON");
				break;
			case 0x10AF2:
				strcpy_s(buf, buf_size, "MANICHAEAN PUNCTUATION DOUBLE DOT WITHIN DOT");
				break;
			case 0x10AF3:
				strcpy_s(buf, buf_size, "MANICHAEAN PUNCTUATION DOT WITHIN DOT");
				break;
			case 0x10AF4:
				strcpy_s(buf, buf_size, "MANICHAEAN PUNCTUATION DOT");
				break;
			case 0x10AF5:
				strcpy_s(buf, buf_size, "MANICHAEAN PUNCTUATION TWO DOTS");
				break;
			case 0x10AF6:
				strcpy_s(buf, buf_size, "MANICHAEAN PUNCTUATION LINE FILLER");
				break;
			case 0x10B00:
				strcpy_s(buf, buf_size, "AVESTAN LETTER A");
				break;
			case 0x10B01:
				strcpy_s(buf, buf_size, "AVESTAN LETTER AA");
				break;
			case 0x10B02:
				strcpy_s(buf, buf_size, "AVESTAN LETTER AO");
				break;
			case 0x10B03:
				strcpy_s(buf, buf_size, "AVESTAN LETTER AAO");
				break;
			case 0x10B04:
				strcpy_s(buf, buf_size, "AVESTAN LETTER AN");
				break;
			case 0x10B05:
				strcpy_s(buf, buf_size, "AVESTAN LETTER AAN");
				break;
			case 0x10B06:
				strcpy_s(buf, buf_size, "AVESTAN LETTER AE");
				break;
			case 0x10B07:
				strcpy_s(buf, buf_size, "AVESTAN LETTER AEE");
				break;
			case 0x10B08:
				strcpy_s(buf, buf_size, "AVESTAN LETTER E");
				break;
			case 0x10B09:
				strcpy_s(buf, buf_size, "AVESTAN LETTER EE");
				break;
			case 0x10B0A:
				strcpy_s(buf, buf_size, "AVESTAN LETTER O");
				break;
			case 0x10B0B:
				strcpy_s(buf, buf_size, "AVESTAN LETTER OO");
				break;
			case 0x10B0C:
				strcpy_s(buf, buf_size, "AVESTAN LETTER I");
				break;
			case 0x10B0D:
				strcpy_s(buf, buf_size, "AVESTAN LETTER II");
				break;
			case 0x10B0E:
				strcpy_s(buf, buf_size, "AVESTAN LETTER U");
				break;
			case 0x10B0F:
				strcpy_s(buf, buf_size, "AVESTAN LETTER UU");
				break;
			case 0x10B10:
				strcpy_s(buf, buf_size, "AVESTAN LETTER KE");
				break;
			case 0x10B11:
				strcpy_s(buf, buf_size, "AVESTAN LETTER XE");
				break;
			case 0x10B12:
				strcpy_s(buf, buf_size, "AVESTAN LETTER XYE");
				break;
			case 0x10B13:
				strcpy_s(buf, buf_size, "AVESTAN LETTER XVE");
				break;
			case 0x10B14:
				strcpy_s(buf, buf_size, "AVESTAN LETTER GE");
				break;
			case 0x10B15:
				strcpy_s(buf, buf_size, "AVESTAN LETTER GGE");
				break;
			case 0x10B16:
				strcpy_s(buf, buf_size, "AVESTAN LETTER GHE");
				break;
			case 0x10B17:
				strcpy_s(buf, buf_size, "AVESTAN LETTER CE");
				break;
			case 0x10B18:
				strcpy_s(buf, buf_size, "AVESTAN LETTER JE");
				break;
			case 0x10B19:
				strcpy_s(buf, buf_size, "AVESTAN LETTER TE");
				break;
			case 0x10B1A:
				strcpy_s(buf, buf_size, "AVESTAN LETTER THE");
				break;
			case 0x10B1B:
				strcpy_s(buf, buf_size, "AVESTAN LETTER DE");
				break;
			case 0x10B1C:
				strcpy_s(buf, buf_size, "AVESTAN LETTER DHE");
				break;
			case 0x10B1D:
				strcpy_s(buf, buf_size, "AVESTAN LETTER TTE");
				break;
			case 0x10B1E:
				strcpy_s(buf, buf_size, "AVESTAN LETTER PE");
				break;
			case 0x10B1F:
				strcpy_s(buf, buf_size, "AVESTAN LETTER FE");
				break;
			case 0x10B20:
				strcpy_s(buf, buf_size, "AVESTAN LETTER BE");
				break;
			case 0x10B21:
				strcpy_s(buf, buf_size, "AVESTAN LETTER BHE");
				break;
			case 0x10B22:
				strcpy_s(buf, buf_size, "AVESTAN LETTER NGE");
				break;
			case 0x10B23:
				strcpy_s(buf, buf_size, "AVESTAN LETTER NGYE");
				break;
			case 0x10B24:
				strcpy_s(buf, buf_size, "AVESTAN LETTER NGVE");
				break;
			case 0x10B25:
				strcpy_s(buf, buf_size, "AVESTAN LETTER NE");
				break;
			case 0x10B26:
				strcpy_s(buf, buf_size, "AVESTAN LETTER NYE");
				break;
			case 0x10B27:
				strcpy_s(buf, buf_size, "AVESTAN LETTER NNE");
				break;
			case 0x10B28:
				strcpy_s(buf, buf_size, "AVESTAN LETTER ME");
				break;
			case 0x10B29:
				strcpy_s(buf, buf_size, "AVESTAN LETTER HME");
				break;
			case 0x10B2A:
				strcpy_s(buf, buf_size, "AVESTAN LETTER YYE");
				break;
			case 0x10B2B:
				strcpy_s(buf, buf_size, "AVESTAN LETTER YE");
				break;
			case 0x10B2C:
				strcpy_s(buf, buf_size, "AVESTAN LETTER VE");
				break;
			case 0x10B2D:
				strcpy_s(buf, buf_size, "AVESTAN LETTER RE");
				break;
			case 0x10B2E:
				strcpy_s(buf, buf_size, "AVESTAN LETTER LE");
				break;
			case 0x10B2F:
				strcpy_s(buf, buf_size, "AVESTAN LETTER SE");
				break;
			case 0x10B30:
				strcpy_s(buf, buf_size, "AVESTAN LETTER ZE");
				break;
			case 0x10B31:
				strcpy_s(buf, buf_size, "AVESTAN LETTER SHE");
				break;
			case 0x10B32:
				strcpy_s(buf, buf_size, "AVESTAN LETTER ZHE");
				break;
			case 0x10B33:
				strcpy_s(buf, buf_size, "AVESTAN LETTER SHYE");
				break;
			case 0x10B34:
				strcpy_s(buf, buf_size, "AVESTAN LETTER SSHE");
				break;
			case 0x10B35:
				strcpy_s(buf, buf_size, "AVESTAN LETTER HE");
				break;
			case 0x10B39:
				strcpy_s(buf, buf_size, "AVESTAN ABBREVIATION MARK");
				break;
			case 0x10B3A:
				strcpy_s(buf, buf_size, "TINY TWO DOTS OVER ONE DOT PUNCTUATION");
				break;
			case 0x10B3B:
				strcpy_s(buf, buf_size, "SMALL TWO DOTS OVER ONE DOT PUNCTUATION");
				break;
			case 0x10B3C:
				strcpy_s(buf, buf_size, "LARGE TWO DOTS OVER ONE DOT PUNCTUATION");
				break;
			case 0x10B3D:
				strcpy_s(buf, buf_size, "LARGE ONE DOT OVER TWO DOTS PUNCTUATION");
				break;
			case 0x10B3E:
				strcpy_s(buf, buf_size, "LARGE TWO RINGS OVER ONE RING PUNCTUATION");
				break;
			case 0x10B3F:
				strcpy_s(buf, buf_size, "LARGE ONE RING OVER TWO RINGS PUNCTUATION");
				break;
			case 0x10B40:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER ALEPH");
				break;
			case 0x10B41:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER BETH");
				break;
			case 0x10B42:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER GIMEL");
				break;
			case 0x10B43:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER DALETH");
				break;
			case 0x10B44:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER HE");
				break;
			case 0x10B45:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER WAW");
				break;
			case 0x10B46:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER ZAYIN");
				break;
			case 0x10B47:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER HETH");
				break;
			case 0x10B48:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER TETH");
				break;
			case 0x10B49:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER YODH");
				break;
			case 0x10B4A:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER KAPH");
				break;
			case 0x10B4B:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER LAMEDH");
				break;
			case 0x10B4C:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER MEM");
				break;
			case 0x10B4D:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER NUN");
				break;
			case 0x10B4E:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER SAMEKH");
				break;
			case 0x10B4F:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER AYIN");
				break;
			case 0x10B50:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER PE");
				break;
			case 0x10B51:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER SADHE");
				break;
			case 0x10B52:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER QOPH");
				break;
			case 0x10B53:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER RESH");
				break;
			case 0x10B54:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER SHIN");
				break;
			case 0x10B55:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN LETTER TAW");
				break;
			case 0x10B58:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN NUMBER ONE");
				break;
			case 0x10B59:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN NUMBER TWO");
				break;
			case 0x10B5A:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN NUMBER THREE");
				break;
			case 0x10B5B:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN NUMBER FOUR");
				break;
			case 0x10B5C:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN NUMBER TEN");
				break;
			case 0x10B5D:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN NUMBER TWENTY");
				break;
			case 0x10B5E:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN NUMBER ONE HUNDRED");
				break;
			case 0x10B5F:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PARTHIAN NUMBER ONE THOUSAND");
				break;
			case 0x10B60:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER ALEPH");
				break;
			case 0x10B61:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER BETH");
				break;
			case 0x10B62:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER GIMEL");
				break;
			case 0x10B63:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER DALETH");
				break;
			case 0x10B64:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER HE");
				break;
			case 0x10B65:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER WAW-AYIN-RESH");
				break;
			case 0x10B66:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER ZAYIN");
				break;
			case 0x10B67:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER HETH");
				break;
			case 0x10B68:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER TETH");
				break;
			case 0x10B69:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER YODH");
				break;
			case 0x10B6A:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER KAPH");
				break;
			case 0x10B6B:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER LAMEDH");
				break;
			case 0x10B6C:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER MEM-QOPH");
				break;
			case 0x10B6D:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER NUN");
				break;
			case 0x10B6E:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER SAMEKH");
				break;
			case 0x10B6F:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER PE");
				break;
			case 0x10B70:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER SADHE");
				break;
			case 0x10B71:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER SHIN");
				break;
			case 0x10B72:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI LETTER TAW");
				break;
			case 0x10B78:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI NUMBER ONE");
				break;
			case 0x10B79:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI NUMBER TWO");
				break;
			case 0x10B7A:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI NUMBER THREE");
				break;
			case 0x10B7B:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI NUMBER FOUR");
				break;
			case 0x10B7C:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI NUMBER TEN");
				break;
			case 0x10B7D:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI NUMBER TWENTY");
				break;
			case 0x10B7E:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI NUMBER ONE HUNDRED");
				break;
			case 0x10B7F:
				strcpy_s(buf, buf_size, "INSCRIPTIONAL PAHLAVI NUMBER ONE THOUSAND");
				break;
			case 0x10B80:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER ALEPH");
				break;
			case 0x10B81:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER BETH");
				break;
			case 0x10B82:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER GIMEL");
				break;
			case 0x10B83:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER DALETH");
				break;
			case 0x10B84:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER HE");
				break;
			case 0x10B85:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER WAW-AYIN-RESH");
				break;
			case 0x10B86:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER ZAYIN");
				break;
			case 0x10B87:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER HETH");
				break;
			case 0x10B88:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER YODH");
				break;
			case 0x10B89:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER KAPH");
				break;
			case 0x10B8A:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER LAMEDH");
				break;
			case 0x10B8B:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER MEM-QOPH");
				break;
			case 0x10B8C:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER NUN");
				break;
			case 0x10B8D:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER SAMEKH");
				break;
			case 0x10B8E:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER PE");
				break;
			case 0x10B8F:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER SADHE");
				break;
			case 0x10B90:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER SHIN");
				break;
			case 0x10B91:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI LETTER TAW");
				break;
			case 0x10B99:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI SECTION MARK");
				break;
			case 0x10B9A:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI TURNED SECTION MARK");
				break;
			case 0x10B9B:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI FOUR DOTS WITH CROSS");
				break;
			case 0x10B9C:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI FOUR DOTS WITH DOT");
				break;
			case 0x10BA9:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI NUMBER ONE");
				break;
			case 0x10BAA:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI NUMBER TWO");
				break;
			case 0x10BAB:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI NUMBER THREE");
				break;
			case 0x10BAC:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI NUMBER FOUR");
				break;
			case 0x10BAD:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI NUMBER TEN");
				break;
			case 0x10BAE:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI NUMBER TWENTY");
				break;
			case 0x10BAF:
				strcpy_s(buf, buf_size, "PSALTER PAHLAVI NUMBER ONE HUNDRED");
				break;
			case 0x10C00:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON A");
				break;
			case 0x10C01:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI A");
				break;
			case 0x10C02:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AE");
				break;
			case 0x10C03:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON I");
				break;
			case 0x10C04:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI I");
				break;
			case 0x10C05:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI E");
				break;
			case 0x10C06:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON O");
				break;
			case 0x10C07:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON OE");
				break;
			case 0x10C08:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI OE");
				break;
			case 0x10C09:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AB");
				break;
			case 0x10C0A:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AB");
				break;
			case 0x10C0B:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AEB");
				break;
			case 0x10C0C:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AEB");
				break;
			case 0x10C0D:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AG");
				break;
			case 0x10C0E:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AG");
				break;
			case 0x10C0F:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AEG");
				break;
			case 0x10C10:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AEG");
				break;
			case 0x10C11:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AD");
				break;
			case 0x10C12:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AD");
				break;
			case 0x10C13:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AED");
				break;
			case 0x10C14:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON EZ");
				break;
			case 0x10C15:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI EZ");
				break;
			case 0x10C16:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AY");
				break;
			case 0x10C17:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AY");
				break;
			case 0x10C18:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AEY");
				break;
			case 0x10C19:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AEY");
				break;
			case 0x10C1A:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AEK");
				break;
			case 0x10C1B:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AEK");
				break;
			case 0x10C1C:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON OEK");
				break;
			case 0x10C1D:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI OEK");
				break;
			case 0x10C1E:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AL");
				break;
			case 0x10C1F:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AL");
				break;
			case 0x10C20:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AEL");
				break;
			case 0x10C21:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON ELT");
				break;
			case 0x10C22:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON EM");
				break;
			case 0x10C23:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AN");
				break;
			case 0x10C24:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AEN");
				break;
			case 0x10C25:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AEN");
				break;
			case 0x10C26:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON ENT");
				break;
			case 0x10C27:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI ENT");
				break;
			case 0x10C28:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON ENC");
				break;
			case 0x10C29:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI ENC");
				break;
			case 0x10C2A:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON ENY");
				break;
			case 0x10C2B:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI ENY");
				break;
			case 0x10C2C:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI ANG");
				break;
			case 0x10C2D:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON ENG");
				break;
			case 0x10C2E:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AENG");
				break;
			case 0x10C2F:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON EP");
				break;
			case 0x10C30:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON OP");
				break;
			case 0x10C31:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON IC");
				break;
			case 0x10C32:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON EC");
				break;
			case 0x10C33:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI EC");
				break;
			case 0x10C34:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AQ");
				break;
			case 0x10C35:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AQ");
				break;
			case 0x10C36:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON IQ");
				break;
			case 0x10C37:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI IQ");
				break;
			case 0x10C38:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON OQ");
				break;
			case 0x10C39:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI OQ");
				break;
			case 0x10C3A:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AR");
				break;
			case 0x10C3B:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AR");
				break;
			case 0x10C3C:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AER");
				break;
			case 0x10C3D:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AS");
				break;
			case 0x10C3E:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AES");
				break;
			case 0x10C3F:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON ASH");
				break;
			case 0x10C40:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI ASH");
				break;
			case 0x10C41:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON ESH");
				break;
			case 0x10C42:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI ESH");
				break;
			case 0x10C43:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AT");
				break;
			case 0x10C44:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AT");
				break;
			case 0x10C45:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON AET");
				break;
			case 0x10C46:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER YENISEI AET");
				break;
			case 0x10C47:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON OT");
				break;
			case 0x10C48:
				strcpy_s(buf, buf_size, "OLD TURKIC LETTER ORKHON BASH");
				break;
			case 0x10C80:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER A");
				break;
			case 0x10C81:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER AA");
				break;
			case 0x10C82:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EB");
				break;
			case 0x10C83:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER AMB");
				break;
			case 0x10C84:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EC");
				break;
			case 0x10C85:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ENC");
				break;
			case 0x10C86:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ECS");
				break;
			case 0x10C87:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ED");
				break;
			case 0x10C88:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER AND");
				break;
			case 0x10C89:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER E");
				break;
			case 0x10C8A:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER CLOSE E");
				break;
			case 0x10C8B:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EE");
				break;
			case 0x10C8C:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EF");
				break;
			case 0x10C8D:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EG");
				break;
			case 0x10C8E:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EGY");
				break;
			case 0x10C8F:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EH");
				break;
			case 0x10C90:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER I");
				break;
			case 0x10C91:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER II");
				break;
			case 0x10C92:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EJ");
				break;
			case 0x10C93:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EK");
				break;
			case 0x10C94:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER AK");
				break;
			case 0x10C95:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER UNK");
				break;
			case 0x10C96:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EL");
				break;
			case 0x10C97:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ELY");
				break;
			case 0x10C98:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EM");
				break;
			case 0x10C99:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EN");
				break;
			case 0x10C9A:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ENY");
				break;
			case 0x10C9B:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER O");
				break;
			case 0x10C9C:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER OO");
				break;
			case 0x10C9D:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG OE");
				break;
			case 0x10C9E:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER RUDIMENTA OE");
				break;
			case 0x10C9F:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER OEE");
				break;
			case 0x10CA0:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EP");
				break;
			case 0x10CA1:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EMP");
				break;
			case 0x10CA2:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ER");
				break;
			case 0x10CA3:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER SHORT ER");
				break;
			case 0x10CA4:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ES");
				break;
			case 0x10CA5:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ESZ");
				break;
			case 0x10CA6:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ET");
				break;
			case 0x10CA7:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ENT");
				break;
			case 0x10CA8:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ETY");
				break;
			case 0x10CA9:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ECH");
				break;
			case 0x10CAA:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER U");
				break;
			case 0x10CAB:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER UU");
				break;
			case 0x10CAC:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER NIKOLSBURG UE");
				break;
			case 0x10CAD:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER RUDIMENTA UE");
				break;
			case 0x10CAE:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EV");
				break;
			case 0x10CAF:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EZ");
				break;
			case 0x10CB0:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER EZS");
				break;
			case 0x10CB1:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER ENT-SHAPED SIGN");
				break;
			case 0x10CB2:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN CAPITAL LETTER US");
				break;
			case 0x10CC0:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER A");
				break;
			case 0x10CC1:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER AA");
				break;
			case 0x10CC2:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EB");
				break;
			case 0x10CC3:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER AMB");
				break;
			case 0x10CC4:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EC");
				break;
			case 0x10CC5:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ENC");
				break;
			case 0x10CC6:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ECS");
				break;
			case 0x10CC7:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ED");
				break;
			case 0x10CC8:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER AND");
				break;
			case 0x10CC9:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER E");
				break;
			case 0x10CCA:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER CLOSE E");
				break;
			case 0x10CCB:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EE");
				break;
			case 0x10CCC:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EF");
				break;
			case 0x10CCD:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EG");
				break;
			case 0x10CCE:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EGY");
				break;
			case 0x10CCF:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EH");
				break;
			case 0x10CD0:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER I");
				break;
			case 0x10CD1:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER II");
				break;
			case 0x10CD2:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EJ");
				break;
			case 0x10CD3:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EK");
				break;
			case 0x10CD4:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER AK");
				break;
			case 0x10CD5:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER UNK");
				break;
			case 0x10CD6:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EL");
				break;
			case 0x10CD7:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ELY");
				break;
			case 0x10CD8:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EM");
				break;
			case 0x10CD9:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EN");
				break;
			case 0x10CDA:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ENY");
				break;
			case 0x10CDB:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER O");
				break;
			case 0x10CDC:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER OO");
				break;
			case 0x10CDD:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER NIKOLSBURG OE");
				break;
			case 0x10CDE:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER RUDIMENTA OE");
				break;
			case 0x10CDF:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER OEE");
				break;
			case 0x10CE0:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EP");
				break;
			case 0x10CE1:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EMP");
				break;
			case 0x10CE2:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ER");
				break;
			case 0x10CE3:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER SHORT ER");
				break;
			case 0x10CE4:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ES");
				break;
			case 0x10CE5:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ESZ");
				break;
			case 0x10CE6:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ET");
				break;
			case 0x10CE7:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ENT");
				break;
			case 0x10CE8:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ETY");
				break;
			case 0x10CE9:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ECH");
				break;
			case 0x10CEA:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER U");
				break;
			case 0x10CEB:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER UU");
				break;
			case 0x10CEC:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER NIKOLSBURG UE");
				break;
			case 0x10CED:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER RUDIMENTA UE");
				break;
			case 0x10CEE:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EV");
				break;
			case 0x10CEF:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EZ");
				break;
			case 0x10CF0:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER EZS");
				break;
			case 0x10CF1:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER ENT-SHAPED SIGN");
				break;
			case 0x10CF2:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN SMALL LETTER US");
				break;
			case 0x10CFA:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN NUMBER ONE");
				break;
			case 0x10CFB:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN NUMBER FIVE");
				break;
			case 0x10CFC:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN NUMBER TEN");
				break;
			case 0x10CFD:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN NUMBER FIFTY");
				break;
			case 0x10CFE:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN NUMBER ONE HUNDRED");
				break;
			case 0x10CFF:
				strcpy_s(buf, buf_size, "OLD HUNGARIAN NUMBER ONE THOUSAND");
				break;
			case 0x10D00:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER A");
				break;
			case 0x10D01:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER BA");
				break;
			case 0x10D02:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER PA");
				break;
			case 0x10D03:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER TA");
				break;
			case 0x10D04:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER TTA");
				break;
			case 0x10D05:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER JA");
				break;
			case 0x10D06:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER CA");
				break;
			case 0x10D07:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER HA");
				break;
			case 0x10D08:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER KHA");
				break;
			case 0x10D09:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER FA");
				break;
			case 0x10D0A:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER DA");
				break;
			case 0x10D0B:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER DDA");
				break;
			case 0x10D0C:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER RA");
				break;
			case 0x10D0D:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER RRA");
				break;
			case 0x10D0E:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER ZA");
				break;
			case 0x10D0F:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER SA");
				break;
			case 0x10D10:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER SHA");
				break;
			case 0x10D11:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER KA");
				break;
			case 0x10D12:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER GA");
				break;
			case 0x10D13:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER LA");
				break;
			case 0x10D14:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER MA");
				break;
			case 0x10D15:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER NA");
				break;
			case 0x10D16:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER WA");
				break;
			case 0x10D17:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER KINNA WA");
				break;
			case 0x10D18:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER YA");
				break;
			case 0x10D19:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER KINNA YA");
				break;
			case 0x10D1A:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER NGA");
				break;
			case 0x10D1B:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER NYA");
				break;
			case 0x10D1C:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA LETTER VA");
				break;
			case 0x10D1D:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA VOWEL A");
				break;
			case 0x10D1E:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA VOWEL I");
				break;
			case 0x10D1F:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA VOWEL U");
				break;
			case 0x10D20:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA VOWEL E");
				break;
			case 0x10D21:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA VOWEL O");
				break;
			case 0x10D22:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA MARK SAKIN");
				break;
			case 0x10D23:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA MARK NA KHONNA");
				break;
			case 0x10D24:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA SIGN HARBAHAY");
				break;
			case 0x10D25:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA SIGN TAHALA");
				break;
			case 0x10D26:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA SIGN TANA");
				break;
			case 0x10D27:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA SIGN TASSI");
				break;
			case 0x10D30:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA DIGIT ZERO");
				break;
			case 0x10D31:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA DIGIT ONE");
				break;
			case 0x10D32:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA DIGIT TWO");
				break;
			case 0x10D33:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA DIGIT THREE");
				break;
			case 0x10D34:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA DIGIT FOUR");
				break;
			case 0x10D35:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA DIGIT FIVE");
				break;
			case 0x10D36:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA DIGIT SIX");
				break;
			case 0x10D37:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA DIGIT SEVEN");
				break;
			case 0x10D38:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA DIGIT EIGHT");
				break;
			case 0x10D39:
				strcpy_s(buf, buf_size, "HANIFI ROHINGYA DIGIT NINE");
				break;
			case 0x10E60:
				strcpy_s(buf, buf_size, "RUMI DIGIT ONE");
				break;
			case 0x10E61:
				strcpy_s(buf, buf_size, "RUMI DIGIT TWO");
				break;
			case 0x10E62:
				strcpy_s(buf, buf_size, "RUMI DIGIT THREE");
				break;
			case 0x10E63:
				strcpy_s(buf, buf_size, "RUMI DIGIT FOUR");
				break;
			case 0x10E64:
				strcpy_s(buf, buf_size, "RUMI DIGIT FIVE");
				break;
			case 0x10E65:
				strcpy_s(buf, buf_size, "RUMI DIGIT SIX");
				break;
			case 0x10E66:
				strcpy_s(buf, buf_size, "RUMI DIGIT SEVEN");
				break;
			case 0x10E67:
				strcpy_s(buf, buf_size, "RUMI DIGIT EIGHT");
				break;
			case 0x10E68:
				strcpy_s(buf, buf_size, "RUMI DIGIT NINE");
				break;
			case 0x10E69:
				strcpy_s(buf, buf_size, "RUMI NUMBER TEN");
				break;
			case 0x10E6A:
				strcpy_s(buf, buf_size, "RUMI NUMBER TWENTY");
				break;
			case 0x10E6B:
				strcpy_s(buf, buf_size, "RUMI NUMBER THIRTY");
				break;
			case 0x10E6C:
				strcpy_s(buf, buf_size, "RUMI NUMBER FORTY");
				break;
			case 0x10E6D:
				strcpy_s(buf, buf_size, "RUMI NUMBER FIFTY");
				break;
			case 0x10E6E:
				strcpy_s(buf, buf_size, "RUMI NUMBER SIXTY");
				break;
			case 0x10E6F:
				strcpy_s(buf, buf_size, "RUMI NUMBER SEVENTY");
				break;
			case 0x10E70:
				strcpy_s(buf, buf_size, "RUMI NUMBER EIGHTY");
				break;
			case 0x10E71:
				strcpy_s(buf, buf_size, "RUMI NUMBER NINETY");
				break;
			case 0x10E72:
				strcpy_s(buf, buf_size, "RUMI NUMBER ONE HUNDRED");
				break;
			case 0x10E73:
				strcpy_s(buf, buf_size, "RUMI NUMBER TWO HUNDRED");
				break;
			case 0x10E74:
				strcpy_s(buf, buf_size, "RUMI NUMBER THREE HUNDRED");
				break;
			case 0x10E75:
				strcpy_s(buf, buf_size, "RUMI NUMBER FOUR HUNDRED");
				break;
			case 0x10E76:
				strcpy_s(buf, buf_size, "RUMI NUMBER FIVE HUNDRED");
				break;
			case 0x10E77:
				strcpy_s(buf, buf_size, "RUMI NUMBER SIX HUNDRED");
				break;
			case 0x10E78:
				strcpy_s(buf, buf_size, "RUMI NUMBER SEVEN HUNDRED");
				break;
			case 0x10E79:
				strcpy_s(buf, buf_size, "RUMI NUMBER EIGHT HUNDRED");
				break;
			case 0x10E7A:
				strcpy_s(buf, buf_size, "RUMI NUMBER NINE HUNDRED");
				break;
			case 0x10E7B:
				strcpy_s(buf, buf_size, "RUMI FRACTION ONE HALF");
				break;
			case 0x10E7C:
				strcpy_s(buf, buf_size, "RUMI FRACTION ONE QUARTER");
				break;
			case 0x10E7D:
				strcpy_s(buf, buf_size, "RUMI FRACTION ONE THIRD");
				break;
			case 0x10E7E:
				strcpy_s(buf, buf_size, "RUMI FRACTION TWO THIRDS");
				break;
			case 0x10E80:
				strcpy_s(buf, buf_size, "YEZIDI LETTER ELIF");
				break;
			case 0x10E81:
				strcpy_s(buf, buf_size, "YEZIDI LETTER BE");
				break;
			case 0x10E82:
				strcpy_s(buf, buf_size, "YEZIDI LETTER PE");
				break;
			case 0x10E83:
				strcpy_s(buf, buf_size, "YEZIDI LETTER PHE");
				break;
			case 0x10E84:
				strcpy_s(buf, buf_size, "YEZIDI LETTER THE");
				break;
			case 0x10E85:
				strcpy_s(buf, buf_size, "YEZIDI LETTER SE");
				break;
			case 0x10E86:
				strcpy_s(buf, buf_size, "YEZIDI LETTER CIM");
				break;
			case 0x10E87:
				strcpy_s(buf, buf_size, "YEZIDI LETTER CHIM");
				break;
			case 0x10E88:
				strcpy_s(buf, buf_size, "YEZIDI LETTER CHHIM");
				break;
			case 0x10E89:
				strcpy_s(buf, buf_size, "YEZIDI LETTER HHA");
				break;
			case 0x10E8A:
				strcpy_s(buf, buf_size, "YEZIDI LETTER XA");
				break;
			case 0x10E8B:
				strcpy_s(buf, buf_size, "YEZIDI LETTER DAL");
				break;
			case 0x10E8C:
				strcpy_s(buf, buf_size, "YEZIDI LETTER ZAL");
				break;
			case 0x10E8D:
				strcpy_s(buf, buf_size, "YEZIDI LETTER RA");
				break;
			case 0x10E8E:
				strcpy_s(buf, buf_size, "YEZIDI LETTER RHA");
				break;
			case 0x10E8F:
				strcpy_s(buf, buf_size, "YEZIDI LETTER ZA");
				break;
			case 0x10E90:
				strcpy_s(buf, buf_size, "YEZIDI LETTER JA");
				break;
			case 0x10E91:
				strcpy_s(buf, buf_size, "YEZIDI LETTER SIN");
				break;
			case 0x10E92:
				strcpy_s(buf, buf_size, "YEZIDI LETTER SHIN");
				break;
			case 0x10E93:
				strcpy_s(buf, buf_size, "YEZIDI LETTER SAD");
				break;
			case 0x10E94:
				strcpy_s(buf, buf_size, "YEZIDI LETTER DAD");
				break;
			case 0x10E95:
				strcpy_s(buf, buf_size, "YEZIDI LETTER TA");
				break;
			case 0x10E96:
				strcpy_s(buf, buf_size, "YEZIDI LETTER ZE");
				break;
			case 0x10E97:
				strcpy_s(buf, buf_size, "YEZIDI LETTER EYN");
				break;
			case 0x10E98:
				strcpy_s(buf, buf_size, "YEZIDI LETTER XHEYN");
				break;
			case 0x10E99:
				strcpy_s(buf, buf_size, "YEZIDI LETTER FA");
				break;
			case 0x10E9A:
				strcpy_s(buf, buf_size, "YEZIDI LETTER VA");
				break;
			case 0x10E9B:
				strcpy_s(buf, buf_size, "YEZIDI LETTER VA ALTERNATE FORM");
				break;
			case 0x10E9C:
				strcpy_s(buf, buf_size, "YEZIDI LETTER QAF");
				break;
			case 0x10E9D:
				strcpy_s(buf, buf_size, "YEZIDI LETTER KAF");
				break;
			case 0x10E9E:
				strcpy_s(buf, buf_size, "YEZIDI LETTER KHAF");
				break;
			case 0x10E9F:
				strcpy_s(buf, buf_size, "YEZIDI LETTER GAF");
				break;
			case 0x10EA0:
				strcpy_s(buf, buf_size, "YEZIDI LETTER LAM");
				break;
			case 0x10EA1:
				strcpy_s(buf, buf_size, "YEZIDI LETTER MIM");
				break;
			case 0x10EA2:
				strcpy_s(buf, buf_size, "YEZIDI LETTER NUN");
				break;
			case 0x10EA3:
				strcpy_s(buf, buf_size, "YEZIDI LETTER UM");
				break;
			case 0x10EA4:
				strcpy_s(buf, buf_size, "YEZIDI LETTER WAW");
				break;
			case 0x10EA5:
				strcpy_s(buf, buf_size, "YEZIDI LETTER OW");
				break;
			case 0x10EA6:
				strcpy_s(buf, buf_size, "YEZIDI LETTER EW");
				break;
			case 0x10EA7:
				strcpy_s(buf, buf_size, "YEZIDI LETTER HAY");
				break;
			case 0x10EA8:
				strcpy_s(buf, buf_size, "YEZIDI LETTER YOT");
				break;
			case 0x10EA9:
				strcpy_s(buf, buf_size, "YEZIDI LETTER ET");
				break;
			case 0x10EAB:
				strcpy_s(buf, buf_size, "YEZIDI COMBINING HAMZA MARK");
				break;
			case 0x10EAC:
				strcpy_s(buf, buf_size, "YEZIDI COMBINING MADDA MARK");
				break;
			case 0x10EAD:
				strcpy_s(buf, buf_size, "YEZIDI HYPHENATION MARK");
				break;
			case 0x10EB0:
				strcpy_s(buf, buf_size, "YEZIDI LETTER LAM WITH DOT ABOVE");
				break;
			case 0x10EB1:
				strcpy_s(buf, buf_size, "YEZIDI LETTER YOT WITH CIRCUMFLEX ABOVE");
				break;
			case 0x10F00:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER ALEPH");
				break;
			case 0x10F01:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER FINAL ALEPH");
				break;
			case 0x10F02:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER BETH");
				break;
			case 0x10F03:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER FINAL BETH");
				break;
			case 0x10F04:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER GIMEL");
				break;
			case 0x10F05:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER HE");
				break;
			case 0x10F06:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER FINAL HE");
				break;
			case 0x10F07:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER WAW");
				break;
			case 0x10F08:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER ZAYIN");
				break;
			case 0x10F09:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER HETH");
				break;
			case 0x10F0A:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER YODH");
				break;
			case 0x10F0B:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER KAPH");
				break;
			case 0x10F0C:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER LAMEDH");
				break;
			case 0x10F0D:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER MEM");
				break;
			case 0x10F0E:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER NUN");
				break;
			case 0x10F0F:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER FINAL NUN");
				break;
			case 0x10F10:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER FINAL NUN WITH VERTICAL TAIL");
				break;
			case 0x10F11:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER SAMEKH");
				break;
			case 0x10F12:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER AYIN");
				break;
			case 0x10F13:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER ALTERNATE AYIN");
				break;
			case 0x10F14:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER PE");
				break;
			case 0x10F15:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER SADHE");
				break;
			case 0x10F16:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER FINAL SADHE");
				break;
			case 0x10F17:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER FINAL SADHE WITH VERTICAL TAIL");
				break;
			case 0x10F18:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER RESH-AYIN-DALETH");
				break;
			case 0x10F19:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER SHIN");
				break;
			case 0x10F1A:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER TAW");
				break;
			case 0x10F1B:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER FINAL TAW");
				break;
			case 0x10F1C:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LETTER FINAL TAW WITH VERTICAL TAIL");
				break;
			case 0x10F1D:
				strcpy_s(buf, buf_size, "OLD SOGDIAN NUMBER ONE");
				break;
			case 0x10F1E:
				strcpy_s(buf, buf_size, "OLD SOGDIAN NUMBER TWO");
				break;
			case 0x10F1F:
				strcpy_s(buf, buf_size, "OLD SOGDIAN NUMBER THREE");
				break;
			case 0x10F20:
				strcpy_s(buf, buf_size, "OLD SOGDIAN NUMBER FOUR");
				break;
			case 0x10F21:
				strcpy_s(buf, buf_size, "OLD SOGDIAN NUMBER FIVE");
				break;
			case 0x10F22:
				strcpy_s(buf, buf_size, "OLD SOGDIAN NUMBER TEN");
				break;
			case 0x10F23:
				strcpy_s(buf, buf_size, "OLD SOGDIAN NUMBER TWENTY");
				break;
			case 0x10F24:
				strcpy_s(buf, buf_size, "OLD SOGDIAN NUMBER THIRTY");
				break;
			case 0x10F25:
				strcpy_s(buf, buf_size, "OLD SOGDIAN NUMBER ONE HUNDRED");
				break;
			case 0x10F26:
				strcpy_s(buf, buf_size, "OLD SOGDIAN FRACTION ONE HALF");
				break;
			case 0x10F27:
				strcpy_s(buf, buf_size, "OLD SOGDIAN LIGATURE AYIN-DALETH");
				break;
			case 0x10F30:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER ALEPH");
				break;
			case 0x10F31:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER BETH");
				break;
			case 0x10F32:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER GIMEL");
				break;
			case 0x10F33:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER HE");
				break;
			case 0x10F34:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER WAW");
				break;
			case 0x10F35:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER ZAYIN");
				break;
			case 0x10F36:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER HETH");
				break;
			case 0x10F37:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER YODH");
				break;
			case 0x10F38:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER KAPH");
				break;
			case 0x10F39:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER LAMEDH");
				break;
			case 0x10F3A:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER MEM");
				break;
			case 0x10F3B:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER NUN");
				break;
			case 0x10F3C:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER SAMEKH");
				break;
			case 0x10F3D:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER AYIN");
				break;
			case 0x10F3E:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER PE");
				break;
			case 0x10F3F:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER SADHE");
				break;
			case 0x10F40:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER RESH-AYIN");
				break;
			case 0x10F41:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER SHIN");
				break;
			case 0x10F42:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER TAW");
				break;
			case 0x10F43:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER FETH");
				break;
			case 0x10F44:
				strcpy_s(buf, buf_size, "SOGDIAN LETTER LESH");
				break;
			case 0x10F45:
				strcpy_s(buf, buf_size, "SOGDIAN INDEPENDENT SHIN");
				break;
			case 0x10F46:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING DOT BELOW");
				break;
			case 0x10F47:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING TWO DOTS BELOW");
				break;
			case 0x10F48:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING DOT ABOVE");
				break;
			case 0x10F49:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING TWO DOTS ABOVE");
				break;
			case 0x10F4A:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING CURVE ABOVE");
				break;
			case 0x10F4B:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING CURVE BELOW");
				break;
			case 0x10F4C:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING HOOK ABOVE");
				break;
			case 0x10F4D:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING HOOK BELOW");
				break;
			case 0x10F4E:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING LONG HOOK BELOW");
				break;
			case 0x10F4F:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING RESH BELOW");
				break;
			case 0x10F50:
				strcpy_s(buf, buf_size, "SOGDIAN COMBINING STROKE BELOW");
				break;
			case 0x10F51:
				strcpy_s(buf, buf_size, "SOGDIAN NUMBER ONE");
				break;
			case 0x10F52:
				strcpy_s(buf, buf_size, "SOGDIAN NUMBER TEN");
				break;
			case 0x10F53:
				strcpy_s(buf, buf_size, "SOGDIAN NUMBER TWENTY");
				break;
			case 0x10F54:
				strcpy_s(buf, buf_size, "SOGDIAN NUMBER ONE HUNDRED");
				break;
			case 0x10F55:
				strcpy_s(buf, buf_size, "SOGDIAN PUNCTUATION TWO VERTICAL BARS");
				break;
			case 0x10F56:
				strcpy_s(buf, buf_size, "SOGDIAN PUNCTUATION TWO VERTICAL BARS WITH DOTS");
				break;
			case 0x10F57:
				strcpy_s(buf, buf_size, "SOGDIAN PUNCTUATION CIRCLE WITH DOT");
				break;
			case 0x10F58:
				strcpy_s(buf, buf_size, "SOGDIAN PUNCTUATION TWO CIRCLES WITH DOTS");
				break;
			case 0x10F59:
				strcpy_s(buf, buf_size, "SOGDIAN PUNCTUATION HALF CIRCLE WITH DOT");
				break;
			case 0x10FB0:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER ALEPH");
				break;
			case 0x10FB1:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER SMALL ALEPH");
				break;
			case 0x10FB2:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER BETH");
				break;
			case 0x10FB3:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER GIMEL");
				break;
			case 0x10FB4:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER DALETH");
				break;
			case 0x10FB5:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER HE");
				break;
			case 0x10FB6:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER WAW");
				break;
			case 0x10FB7:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER CURLED WAW");
				break;
			case 0x10FB8:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER ZAYIN");
				break;
			case 0x10FB9:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER HETH");
				break;
			case 0x10FBA:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER YODH");
				break;
			case 0x10FBB:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER KAPH");
				break;
			case 0x10FBC:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER LAMEDH");
				break;
			case 0x10FBD:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER MEM");
				break;
			case 0x10FBE:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER NUN");
				break;
			case 0x10FBF:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER SAMEKH");
				break;
			case 0x10FC0:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER AYIN");
				break;
			case 0x10FC1:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER PE");
				break;
			case 0x10FC2:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER RESH");
				break;
			case 0x10FC3:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER SHIN");
				break;
			case 0x10FC4:
				strcpy_s(buf, buf_size, "CHORASMIAN LETTER TAW");
				break;
			case 0x10FC5:
				strcpy_s(buf, buf_size, "CHORASMIAN NUMBER ONE");
				break;
			case 0x10FC6:
				strcpy_s(buf, buf_size, "CHORASMIAN NUMBER TWO");
				break;
			case 0x10FC7:
				strcpy_s(buf, buf_size, "CHORASMIAN NUMBER THREE");
				break;
			case 0x10FC8:
				strcpy_s(buf, buf_size, "CHORASMIAN NUMBER FOUR");
				break;
			case 0x10FC9:
				strcpy_s(buf, buf_size, "CHORASMIAN NUMBER TEN");
				break;
			case 0x10FCA:
				strcpy_s(buf, buf_size, "CHORASMIAN NUMBER TWENTY");
				break;
			case 0x10FCB:
				strcpy_s(buf, buf_size, "CHORASMIAN NUMBER ONE HUNDRED");
				break;
			case 0x10FE0:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER ALEPH");
				break;
			case 0x10FE1:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER BETH");
				break;
			case 0x10FE2:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER GIMEL");
				break;
			case 0x10FE3:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER DALETH");
				break;
			case 0x10FE4:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER HE");
				break;
			case 0x10FE5:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER WAW");
				break;
			case 0x10FE6:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER ZAYIN");
				break;
			case 0x10FE7:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER HETH");
				break;
			case 0x10FE8:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER TETH");
				break;
			case 0x10FE9:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER YODH");
				break;
			case 0x10FEA:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER KAPH");
				break;
			case 0x10FEB:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER LAMEDH");
				break;
			case 0x10FEC:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER MEM");
				break;
			case 0x10FED:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER NUN");
				break;
			case 0x10FEE:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER SAMEKH");
				break;
			case 0x10FEF:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER AYIN");
				break;
			case 0x10FF0:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER PE");
				break;
			case 0x10FF1:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER SADHE");
				break;
			case 0x10FF2:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER QOPH");
				break;
			case 0x10FF3:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER RESH");
				break;
			case 0x10FF4:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER SHIN");
				break;
			case 0x10FF5:
				strcpy_s(buf, buf_size, "ELYMAIC LETTER TAW");
				break;
			case 0x10FF6:
				strcpy_s(buf, buf_size, "ELYMAIC LIGATURE ZAYIN-YODH");
				break;
			case 0x11000:
				strcpy_s(buf, buf_size, "BRAHMI SIGN CANDRABINDU");
				break;
			case 0x11001:
				strcpy_s(buf, buf_size, "BRAHMI SIGN ANUSVARA");
				break;
			case 0x11002:
				strcpy_s(buf, buf_size, "BRAHMI SIGN VISARGA");
				break;
			case 0x11003:
				strcpy_s(buf, buf_size, "BRAHMI SIGN JIHVAMULIYA");
				break;
			case 0x11004:
				strcpy_s(buf, buf_size, "BRAHMI SIGN UPADHMANIYA");
				break;
			case 0x11005:
				strcpy_s(buf, buf_size, "BRAHMI LETTER A");
				break;
			case 0x11006:
				strcpy_s(buf, buf_size, "BRAHMI LETTER AA");
				break;
			case 0x11007:
				strcpy_s(buf, buf_size, "BRAHMI LETTER I");
				break;
			case 0x11008:
				strcpy_s(buf, buf_size, "BRAHMI LETTER II");
				break;
			case 0x11009:
				strcpy_s(buf, buf_size, "BRAHMI LETTER U");
				break;
			case 0x1100A:
				strcpy_s(buf, buf_size, "BRAHMI LETTER UU");
				break;
			case 0x1100B:
				strcpy_s(buf, buf_size, "BRAHMI LETTER VOCALIC R");
				break;
			case 0x1100C:
				strcpy_s(buf, buf_size, "BRAHMI LETTER VOCALIC RR");
				break;
			case 0x1100D:
				strcpy_s(buf, buf_size, "BRAHMI LETTER VOCALIC L");
				break;
			case 0x1100E:
				strcpy_s(buf, buf_size, "BRAHMI LETTER VOCALIC LL");
				break;
			case 0x1100F:
				strcpy_s(buf, buf_size, "BRAHMI LETTER E");
				break;
			case 0x11010:
				strcpy_s(buf, buf_size, "BRAHMI LETTER AI");
				break;
			case 0x11011:
				strcpy_s(buf, buf_size, "BRAHMI LETTER O");
				break;
			case 0x11012:
				strcpy_s(buf, buf_size, "BRAHMI LETTER AU");
				break;
			case 0x11013:
				strcpy_s(buf, buf_size, "BRAHMI LETTER KA");
				break;
			case 0x11014:
				strcpy_s(buf, buf_size, "BRAHMI LETTER KHA");
				break;
			case 0x11015:
				strcpy_s(buf, buf_size, "BRAHMI LETTER GA");
				break;
			case 0x11016:
				strcpy_s(buf, buf_size, "BRAHMI LETTER GHA");
				break;
			case 0x11017:
				strcpy_s(buf, buf_size, "BRAHMI LETTER NGA");
				break;
			case 0x11018:
				strcpy_s(buf, buf_size, "BRAHMI LETTER CA");
				break;
			case 0x11019:
				strcpy_s(buf, buf_size, "BRAHMI LETTER CHA");
				break;
			case 0x1101A:
				strcpy_s(buf, buf_size, "BRAHMI LETTER JA");
				break;
			case 0x1101B:
				strcpy_s(buf, buf_size, "BRAHMI LETTER JHA");
				break;
			case 0x1101C:
				strcpy_s(buf, buf_size, "BRAHMI LETTER NYA");
				break;
			case 0x1101D:
				strcpy_s(buf, buf_size, "BRAHMI LETTER TTA");
				break;
			case 0x1101E:
				strcpy_s(buf, buf_size, "BRAHMI LETTER TTHA");
				break;
			case 0x1101F:
				strcpy_s(buf, buf_size, "BRAHMI LETTER DDA");
				break;
			case 0x11020:
				strcpy_s(buf, buf_size, "BRAHMI LETTER DDHA");
				break;
			case 0x11021:
				strcpy_s(buf, buf_size, "BRAHMI LETTER NNA");
				break;
			case 0x11022:
				strcpy_s(buf, buf_size, "BRAHMI LETTER TA");
				break;
			case 0x11023:
				strcpy_s(buf, buf_size, "BRAHMI LETTER THA");
				break;
			case 0x11024:
				strcpy_s(buf, buf_size, "BRAHMI LETTER DA");
				break;
			case 0x11025:
				strcpy_s(buf, buf_size, "BRAHMI LETTER DHA");
				break;
			case 0x11026:
				strcpy_s(buf, buf_size, "BRAHMI LETTER NA");
				break;
			case 0x11027:
				strcpy_s(buf, buf_size, "BRAHMI LETTER PA");
				break;
			case 0x11028:
				strcpy_s(buf, buf_size, "BRAHMI LETTER PHA");
				break;
			case 0x11029:
				strcpy_s(buf, buf_size, "BRAHMI LETTER BA");
				break;
			case 0x1102A:
				strcpy_s(buf, buf_size, "BRAHMI LETTER BHA");
				break;
			case 0x1102B:
				strcpy_s(buf, buf_size, "BRAHMI LETTER MA");
				break;
			case 0x1102C:
				strcpy_s(buf, buf_size, "BRAHMI LETTER YA");
				break;
			case 0x1102D:
				strcpy_s(buf, buf_size, "BRAHMI LETTER RA");
				break;
			case 0x1102E:
				strcpy_s(buf, buf_size, "BRAHMI LETTER LA");
				break;
			case 0x1102F:
				strcpy_s(buf, buf_size, "BRAHMI LETTER VA");
				break;
			case 0x11030:
				strcpy_s(buf, buf_size, "BRAHMI LETTER SHA");
				break;
			case 0x11031:
				strcpy_s(buf, buf_size, "BRAHMI LETTER SSA");
				break;
			case 0x11032:
				strcpy_s(buf, buf_size, "BRAHMI LETTER SA");
				break;
			case 0x11033:
				strcpy_s(buf, buf_size, "BRAHMI LETTER HA");
				break;
			case 0x11034:
				strcpy_s(buf, buf_size, "BRAHMI LETTER LLA");
				break;
			case 0x11035:
				strcpy_s(buf, buf_size, "BRAHMI LETTER OLD TAMIL LLLA");
				break;
			case 0x11036:
				strcpy_s(buf, buf_size, "BRAHMI LETTER OLD TAMIL RRA");
				break;
			case 0x11037:
				strcpy_s(buf, buf_size, "BRAHMI LETTER OLD TAMIL NNNA");
				break;
			case 0x11038:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN AA");
				break;
			case 0x11039:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN BHATTIPROLU AA");
				break;
			case 0x1103A:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN I");
				break;
			case 0x1103B:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN II");
				break;
			case 0x1103C:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN U");
				break;
			case 0x1103D:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN UU");
				break;
			case 0x1103E:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN VOCALIC R");
				break;
			case 0x1103F:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN VOCALIC RR");
				break;
			case 0x11040:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN VOCALIC L");
				break;
			case 0x11041:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN VOCALIC LL");
				break;
			case 0x11042:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN E");
				break;
			case 0x11043:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN AI");
				break;
			case 0x11044:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN O");
				break;
			case 0x11045:
				strcpy_s(buf, buf_size, "BRAHMI VOWEL SIGN AU");
				break;
			case 0x11046:
				strcpy_s(buf, buf_size, "BRAHMI VIRAMA");
				break;
			case 0x11047:
				strcpy_s(buf, buf_size, "BRAHMI DANDA");
				break;
			case 0x11048:
				strcpy_s(buf, buf_size, "BRAHMI DOUBLE DANDA");
				break;
			case 0x11049:
				strcpy_s(buf, buf_size, "BRAHMI PUNCTUATION DOT");
				break;
			case 0x1104A:
				strcpy_s(buf, buf_size, "BRAHMI PUNCTUATION DOUBLE DOT");
				break;
			case 0x1104B:
				strcpy_s(buf, buf_size, "BRAHMI PUNCTUATION LINE");
				break;
			case 0x1104C:
				strcpy_s(buf, buf_size, "BRAHMI PUNCTUATION CRESCENT BAR");
				break;
			case 0x1104D:
				strcpy_s(buf, buf_size, "BRAHMI PUNCTUATION LOTUS");
				break;
			case 0x11052:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER ONE");
				break;
			case 0x11053:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER TWO");
				break;
			case 0x11054:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER THREE");
				break;
			case 0x11055:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER FOUR");
				break;
			case 0x11056:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER FIVE");
				break;
			case 0x11057:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER SIX");
				break;
			case 0x11058:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER SEVEN");
				break;
			case 0x11059:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER EIGHT");
				break;
			case 0x1105A:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER NINE");
				break;
			case 0x1105B:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER TEN");
				break;
			case 0x1105C:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER TWENTY");
				break;
			case 0x1105D:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER THIRTY");
				break;
			case 0x1105E:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER FORTY");
				break;
			case 0x1105F:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER FIFTY");
				break;
			case 0x11060:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER SIXTY");
				break;
			case 0x11061:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER SEVENTY");
				break;
			case 0x11062:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER EIGHTY");
				break;
			case 0x11063:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER NINETY");
				break;
			case 0x11064:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER ONE HUNDRED");
				break;
			case 0x11065:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER ONE THOUSAND");
				break;
			case 0x11066:
				strcpy_s(buf, buf_size, "BRAHMI DIGIT ZERO");
				break;
			case 0x11067:
				strcpy_s(buf, buf_size, "BRAHMI DIGIT ONE");
				break;
			case 0x11068:
				strcpy_s(buf, buf_size, "BRAHMI DIGIT TWO");
				break;
			case 0x11069:
				strcpy_s(buf, buf_size, "BRAHMI DIGIT THREE");
				break;
			case 0x1106A:
				strcpy_s(buf, buf_size, "BRAHMI DIGIT FOUR");
				break;
			case 0x1106B:
				strcpy_s(buf, buf_size, "BRAHMI DIGIT FIVE");
				break;
			case 0x1106C:
				strcpy_s(buf, buf_size, "BRAHMI DIGIT SIX");
				break;
			case 0x1106D:
				strcpy_s(buf, buf_size, "BRAHMI DIGIT SEVEN");
				break;
			case 0x1106E:
				strcpy_s(buf, buf_size, "BRAHMI DIGIT EIGHT");
				break;
			case 0x1106F:
				strcpy_s(buf, buf_size, "BRAHMI DIGIT NINE");
				break;
			case 0x1107F:
				strcpy_s(buf, buf_size, "BRAHMI NUMBER JOINER");
				break;
			case 0x11080:
				strcpy_s(buf, buf_size, "KAITHI SIGN CANDRABINDU");
				break;
			case 0x11081:
				strcpy_s(buf, buf_size, "KAITHI SIGN ANUSVARA");
				break;
			case 0x11082:
				strcpy_s(buf, buf_size, "KAITHI SIGN VISARGA");
				break;
			case 0x11083:
				strcpy_s(buf, buf_size, "KAITHI LETTER A");
				break;
			case 0x11084:
				strcpy_s(buf, buf_size, "KAITHI LETTER AA");
				break;
			case 0x11085:
				strcpy_s(buf, buf_size, "KAITHI LETTER I");
				break;
			case 0x11086:
				strcpy_s(buf, buf_size, "KAITHI LETTER II");
				break;
			case 0x11087:
				strcpy_s(buf, buf_size, "KAITHI LETTER U");
				break;
			case 0x11088:
				strcpy_s(buf, buf_size, "KAITHI LETTER UU");
				break;
			case 0x11089:
				strcpy_s(buf, buf_size, "KAITHI LETTER E");
				break;
			case 0x1108A:
				strcpy_s(buf, buf_size, "KAITHI LETTER AI");
				break;
			case 0x1108B:
				strcpy_s(buf, buf_size, "KAITHI LETTER O");
				break;
			case 0x1108C:
				strcpy_s(buf, buf_size, "KAITHI LETTER AU");
				break;
			case 0x1108D:
				strcpy_s(buf, buf_size, "KAITHI LETTER KA");
				break;
			case 0x1108E:
				strcpy_s(buf, buf_size, "KAITHI LETTER KHA");
				break;
			case 0x1108F:
				strcpy_s(buf, buf_size, "KAITHI LETTER GA");
				break;
			case 0x11090:
				strcpy_s(buf, buf_size, "KAITHI LETTER GHA");
				break;
			case 0x11091:
				strcpy_s(buf, buf_size, "KAITHI LETTER NGA");
				break;
			case 0x11092:
				strcpy_s(buf, buf_size, "KAITHI LETTER CA");
				break;
			case 0x11093:
				strcpy_s(buf, buf_size, "KAITHI LETTER CHA");
				break;
			case 0x11094:
				strcpy_s(buf, buf_size, "KAITHI LETTER JA");
				break;
			case 0x11095:
				strcpy_s(buf, buf_size, "KAITHI LETTER JHA");
				break;
			case 0x11096:
				strcpy_s(buf, buf_size, "KAITHI LETTER NYA");
				break;
			case 0x11097:
				strcpy_s(buf, buf_size, "KAITHI LETTER TTA");
				break;
			case 0x11098:
				strcpy_s(buf, buf_size, "KAITHI LETTER TTHA");
				break;
			case 0x11099:
				strcpy_s(buf, buf_size, "KAITHI LETTER DDA");
				break;
			case 0x1109A:
				strcpy_s(buf, buf_size, "KAITHI LETTER DDDHA");
				break;
			case 0x1109B:
				strcpy_s(buf, buf_size, "KAITHI LETTER DDHA");
				break;
			case 0x1109C:
				strcpy_s(buf, buf_size, "KAITHI LETTER RHA");
				break;
			case 0x1109D:
				strcpy_s(buf, buf_size, "KAITHI LETTER NNA");
				break;
			case 0x1109E:
				strcpy_s(buf, buf_size, "KAITHI LETTER TA");
				break;
			case 0x1109F:
				strcpy_s(buf, buf_size, "KAITHI LETTER THA");
				break;
			case 0x110A0:
				strcpy_s(buf, buf_size, "KAITHI LETTER DA");
				break;
			case 0x110A1:
				strcpy_s(buf, buf_size, "KAITHI LETTER DHA");
				break;
			case 0x110A2:
				strcpy_s(buf, buf_size, "KAITHI LETTER NA");
				break;
			case 0x110A3:
				strcpy_s(buf, buf_size, "KAITHI LETTER PA");
				break;
			case 0x110A4:
				strcpy_s(buf, buf_size, "KAITHI LETTER PHA");
				break;
			case 0x110A5:
				strcpy_s(buf, buf_size, "KAITHI LETTER BA");
				break;
			case 0x110A6:
				strcpy_s(buf, buf_size, "KAITHI LETTER BHA");
				break;
			case 0x110A7:
				strcpy_s(buf, buf_size, "KAITHI LETTER MA");
				break;
			case 0x110A8:
				strcpy_s(buf, buf_size, "KAITHI LETTER YA");
				break;
			case 0x110A9:
				strcpy_s(buf, buf_size, "KAITHI LETTER RA");
				break;
			case 0x110AA:
				strcpy_s(buf, buf_size, "KAITHI LETTER LA");
				break;
			case 0x110AB:
				strcpy_s(buf, buf_size, "KAITHI LETTER VA");
				break;
			case 0x110AC:
				strcpy_s(buf, buf_size, "KAITHI LETTER SHA");
				break;
			case 0x110AD:
				strcpy_s(buf, buf_size, "KAITHI LETTER SSA");
				break;
			case 0x110AE:
				strcpy_s(buf, buf_size, "KAITHI LETTER SA");
				break;
			case 0x110AF:
				strcpy_s(buf, buf_size, "KAITHI LETTER HA");
				break;
			case 0x110B0:
				strcpy_s(buf, buf_size, "KAITHI VOWEL SIGN AA");
				break;
			case 0x110B1:
				strcpy_s(buf, buf_size, "KAITHI VOWEL SIGN I");
				break;
			case 0x110B2:
				strcpy_s(buf, buf_size, "KAITHI VOWEL SIGN II");
				break;
			case 0x110B3:
				strcpy_s(buf, buf_size, "KAITHI VOWEL SIGN U");
				break;
			case 0x110B4:
				strcpy_s(buf, buf_size, "KAITHI VOWEL SIGN UU");
				break;
			case 0x110B5:
				strcpy_s(buf, buf_size, "KAITHI VOWEL SIGN E");
				break;
			case 0x110B6:
				strcpy_s(buf, buf_size, "KAITHI VOWEL SIGN AI");
				break;
			case 0x110B7:
				strcpy_s(buf, buf_size, "KAITHI VOWEL SIGN O");
				break;
			case 0x110B8:
				strcpy_s(buf, buf_size, "KAITHI VOWEL SIGN AU");
				break;
			case 0x110B9:
				strcpy_s(buf, buf_size, "KAITHI SIGN VIRAMA");
				break;
			case 0x110BA:
				strcpy_s(buf, buf_size, "KAITHI SIGN NUKTA");
				break;
			case 0x110BB:
				strcpy_s(buf, buf_size, "KAITHI ABBREVIATION SIGN");
				break;
			case 0x110BC:
				strcpy_s(buf, buf_size, "KAITHI ENUMERATION SIGN");
				break;
			case 0x110BD:
				strcpy_s(buf, buf_size, "KAITHI NUMBER SIGN");
				break;
			case 0x110BE:
				strcpy_s(buf, buf_size, "KAITHI SECTION MARK");
				break;
			case 0x110BF:
				strcpy_s(buf, buf_size, "KAITHI DOUBLE SECTION MARK");
				break;
			case 0x110C0:
				strcpy_s(buf, buf_size, "KAITHI DANDA");
				break;
			case 0x110C1:
				strcpy_s(buf, buf_size, "KAITHI DOUBLE DANDA");
				break;
			case 0x110CD:
				strcpy_s(buf, buf_size, "KAITHI NUMBER SIGN ABOVE");
				break;
			case 0x110D0:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER SAH");
				break;
			case 0x110D1:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER TAH");
				break;
			case 0x110D2:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER BAH");
				break;
			case 0x110D3:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER CAH");
				break;
			case 0x110D4:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER DAH");
				break;
			case 0x110D5:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER GAH");
				break;
			case 0x110D6:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER MAH");
				break;
			case 0x110D7:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER NGAH");
				break;
			case 0x110D8:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER LAH");
				break;
			case 0x110D9:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER NAH");
				break;
			case 0x110DA:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER VAH");
				break;
			case 0x110DB:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER PAH");
				break;
			case 0x110DC:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER YAH");
				break;
			case 0x110DD:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER RAH");
				break;
			case 0x110DE:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER HAH");
				break;
			case 0x110DF:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER KAH");
				break;
			case 0x110E0:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER JAH");
				break;
			case 0x110E1:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER NYAH");
				break;
			case 0x110E2:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER AH");
				break;
			case 0x110E3:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER EEH");
				break;
			case 0x110E4:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER IH");
				break;
			case 0x110E5:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER UH");
				break;
			case 0x110E6:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER OH");
				break;
			case 0x110E7:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER EH");
				break;
			case 0x110E8:
				strcpy_s(buf, buf_size, "SORA SOMPENG LETTER MAE");
				break;
			case 0x110F0:
				strcpy_s(buf, buf_size, "SORA SOMPENG DIGIT ZERO");
				break;
			case 0x110F1:
				strcpy_s(buf, buf_size, "SORA SOMPENG DIGIT ONE");
				break;
			case 0x110F2:
				strcpy_s(buf, buf_size, "SORA SOMPENG DIGIT TWO");
				break;
			case 0x110F3:
				strcpy_s(buf, buf_size, "SORA SOMPENG DIGIT THREE");
				break;
			case 0x110F4:
				strcpy_s(buf, buf_size, "SORA SOMPENG DIGIT FOUR");
				break;
			case 0x110F5:
				strcpy_s(buf, buf_size, "SORA SOMPENG DIGIT FIVE");
				break;
			case 0x110F6:
				strcpy_s(buf, buf_size, "SORA SOMPENG DIGIT SIX");
				break;
			case 0x110F7:
				strcpy_s(buf, buf_size, "SORA SOMPENG DIGIT SEVEN");
				break;
			case 0x110F8:
				strcpy_s(buf, buf_size, "SORA SOMPENG DIGIT EIGHT");
				break;
			case 0x110F9:
				strcpy_s(buf, buf_size, "SORA SOMPENG DIGIT NINE");
				break;
			case 0x11100:
				strcpy_s(buf, buf_size, "CHAKMA SIGN CANDRABINDU");
				break;
			case 0x11101:
				strcpy_s(buf, buf_size, "CHAKMA SIGN ANUSVARA");
				break;
			case 0x11102:
				strcpy_s(buf, buf_size, "CHAKMA SIGN VISARGA");
				break;
			case 0x11103:
				strcpy_s(buf, buf_size, "CHAKMA LETTER AA");
				break;
			case 0x11104:
				strcpy_s(buf, buf_size, "CHAKMA LETTER I");
				break;
			case 0x11105:
				strcpy_s(buf, buf_size, "CHAKMA LETTER U");
				break;
			case 0x11106:
				strcpy_s(buf, buf_size, "CHAKMA LETTER E");
				break;
			case 0x11107:
				strcpy_s(buf, buf_size, "CHAKMA LETTER KAA");
				break;
			case 0x11108:
				strcpy_s(buf, buf_size, "CHAKMA LETTER KHAA");
				break;
			case 0x11109:
				strcpy_s(buf, buf_size, "CHAKMA LETTER GAA");
				break;
			case 0x1110A:
				strcpy_s(buf, buf_size, "CHAKMA LETTER GHAA");
				break;
			case 0x1110B:
				strcpy_s(buf, buf_size, "CHAKMA LETTER NGAA");
				break;
			case 0x1110C:
				strcpy_s(buf, buf_size, "CHAKMA LETTER CAA");
				break;
			case 0x1110D:
				strcpy_s(buf, buf_size, "CHAKMA LETTER CHAA");
				break;
			case 0x1110E:
				strcpy_s(buf, buf_size, "CHAKMA LETTER JAA");
				break;
			case 0x1110F:
				strcpy_s(buf, buf_size, "CHAKMA LETTER JHAA");
				break;
			case 0x11110:
				strcpy_s(buf, buf_size, "CHAKMA LETTER NYAA");
				break;
			case 0x11111:
				strcpy_s(buf, buf_size, "CHAKMA LETTER TTAA");
				break;
			case 0x11112:
				strcpy_s(buf, buf_size, "CHAKMA LETTER TTHAA");
				break;
			case 0x11113:
				strcpy_s(buf, buf_size, "CHAKMA LETTER DDAA");
				break;
			case 0x11114:
				strcpy_s(buf, buf_size, "CHAKMA LETTER DDHAA");
				break;
			case 0x11115:
				strcpy_s(buf, buf_size, "CHAKMA LETTER NNAA");
				break;
			case 0x11116:
				strcpy_s(buf, buf_size, "CHAKMA LETTER TAA");
				break;
			case 0x11117:
				strcpy_s(buf, buf_size, "CHAKMA LETTER THAA");
				break;
			case 0x11118:
				strcpy_s(buf, buf_size, "CHAKMA LETTER DAA");
				break;
			case 0x11119:
				strcpy_s(buf, buf_size, "CHAKMA LETTER DHAA");
				break;
			case 0x1111A:
				strcpy_s(buf, buf_size, "CHAKMA LETTER NAA");
				break;
			case 0x1111B:
				strcpy_s(buf, buf_size, "CHAKMA LETTER PAA");
				break;
			case 0x1111C:
				strcpy_s(buf, buf_size, "CHAKMA LETTER PHAA");
				break;
			case 0x1111D:
				strcpy_s(buf, buf_size, "CHAKMA LETTER BAA");
				break;
			case 0x1111E:
				strcpy_s(buf, buf_size, "CHAKMA LETTER BHAA");
				break;
			case 0x1111F:
				strcpy_s(buf, buf_size, "CHAKMA LETTER MAA");
				break;
			case 0x11120:
				strcpy_s(buf, buf_size, "CHAKMA LETTER YYAA");
				break;
			case 0x11121:
				strcpy_s(buf, buf_size, "CHAKMA LETTER YAA");
				break;
			case 0x11122:
				strcpy_s(buf, buf_size, "CHAKMA LETTER RAA");
				break;
			case 0x11123:
				strcpy_s(buf, buf_size, "CHAKMA LETTER LAA");
				break;
			case 0x11124:
				strcpy_s(buf, buf_size, "CHAKMA LETTER WAA");
				break;
			case 0x11125:
				strcpy_s(buf, buf_size, "CHAKMA LETTER SAA");
				break;
			case 0x11126:
				strcpy_s(buf, buf_size, "CHAKMA LETTER HAA");
				break;
			case 0x11127:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN A");
				break;
			case 0x11128:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN I");
				break;
			case 0x11129:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN II");
				break;
			case 0x1112A:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN U");
				break;
			case 0x1112B:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN UU");
				break;
			case 0x1112C:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN E");
				break;
			case 0x1112D:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN AI");
				break;
			case 0x1112E:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN O");
				break;
			case 0x1112F:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN AU");
				break;
			case 0x11130:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN OI");
				break;
			case 0x11131:
				strcpy_s(buf, buf_size, "CHAKMA O MARK");
				break;
			case 0x11132:
				strcpy_s(buf, buf_size, "CHAKMA AU MARK");
				break;
			case 0x11133:
				strcpy_s(buf, buf_size, "CHAKMA VIRAMA");
				break;
			case 0x11134:
				strcpy_s(buf, buf_size, "CHAKMA MAAYYAA");
				break;
			case 0x11136:
				strcpy_s(buf, buf_size, "CHAKMA DIGIT ZERO");
				break;
			case 0x11137:
				strcpy_s(buf, buf_size, "CHAKMA DIGIT ONE");
				break;
			case 0x11138:
				strcpy_s(buf, buf_size, "CHAKMA DIGIT TWO");
				break;
			case 0x11139:
				strcpy_s(buf, buf_size, "CHAKMA DIGIT THREE");
				break;
			case 0x1113A:
				strcpy_s(buf, buf_size, "CHAKMA DIGIT FOUR");
				break;
			case 0x1113B:
				strcpy_s(buf, buf_size, "CHAKMA DIGIT FIVE");
				break;
			case 0x1113C:
				strcpy_s(buf, buf_size, "CHAKMA DIGIT SIX");
				break;
			case 0x1113D:
				strcpy_s(buf, buf_size, "CHAKMA DIGIT SEVEN");
				break;
			case 0x1113E:
				strcpy_s(buf, buf_size, "CHAKMA DIGIT EIGHT");
				break;
			case 0x1113F:
				strcpy_s(buf, buf_size, "CHAKMA DIGIT NINE");
				break;
			case 0x11140:
				strcpy_s(buf, buf_size, "CHAKMA SECTION MARK");
				break;
			case 0x11141:
				strcpy_s(buf, buf_size, "CHAKMA DANDA");
				break;
			case 0x11142:
				strcpy_s(buf, buf_size, "CHAKMA DOUBLE DANDA");
				break;
			case 0x11143:
				strcpy_s(buf, buf_size, "CHAKMA QUESTION MARK");
				break;
			case 0x11144:
				strcpy_s(buf, buf_size, "CHAKMA LETTER LHAA");
				break;
			case 0x11145:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN AA");
				break;
			case 0x11146:
				strcpy_s(buf, buf_size, "CHAKMA VOWEL SIGN EI");
				break;
			case 0x11147:
				strcpy_s(buf, buf_size, "CHAKMA LETTER VAA");
				break;
			case 0x11150:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER A");
				break;
			case 0x11151:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER I");
				break;
			case 0x11152:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER U");
				break;
			case 0x11153:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER E");
				break;
			case 0x11154:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER O");
				break;
			case 0x11155:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER KA");
				break;
			case 0x11156:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER KHA");
				break;
			case 0x11157:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER GA");
				break;
			case 0x11158:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER GHA");
				break;
			case 0x11159:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER CA");
				break;
			case 0x1115A:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER CHA");
				break;
			case 0x1115B:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER JA");
				break;
			case 0x1115C:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER JHA");
				break;
			case 0x1115D:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER NYA");
				break;
			case 0x1115E:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER TTA");
				break;
			case 0x1115F:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER TTHA");
				break;
			case 0x11160:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER DDA");
				break;
			case 0x11161:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER DDHA");
				break;
			case 0x11162:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER NNA");
				break;
			case 0x11163:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER TA");
				break;
			case 0x11164:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER THA");
				break;
			case 0x11165:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER DA");
				break;
			case 0x11166:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER DHA");
				break;
			case 0x11167:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER NA");
				break;
			case 0x11168:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER PA");
				break;
			case 0x11169:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER PHA");
				break;
			case 0x1116A:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER BA");
				break;
			case 0x1116B:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER BHA");
				break;
			case 0x1116C:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER MA");
				break;
			case 0x1116D:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER RA");
				break;
			case 0x1116E:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER LA");
				break;
			case 0x1116F:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER VA");
				break;
			case 0x11170:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER SA");
				break;
			case 0x11171:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER HA");
				break;
			case 0x11172:
				strcpy_s(buf, buf_size, "MAHAJANI LETTER RRA");
				break;
			case 0x11173:
				strcpy_s(buf, buf_size, "MAHAJANI SIGN NUKTA");
				break;
			case 0x11174:
				strcpy_s(buf, buf_size, "MAHAJANI ABBREVIATION SIGN");
				break;
			case 0x11175:
				strcpy_s(buf, buf_size, "MAHAJANI SECTION MARK");
				break;
			case 0x11176:
				strcpy_s(buf, buf_size, "MAHAJANI LIGATURE SHRI");
				break;
			case 0x11180:
				strcpy_s(buf, buf_size, "SHARADA SIGN CANDRABINDU");
				break;
			case 0x11181:
				strcpy_s(buf, buf_size, "SHARADA SIGN ANUSVARA");
				break;
			case 0x11182:
				strcpy_s(buf, buf_size, "SHARADA SIGN VISARGA");
				break;
			case 0x11183:
				strcpy_s(buf, buf_size, "SHARADA LETTER A");
				break;
			case 0x11184:
				strcpy_s(buf, buf_size, "SHARADA LETTER AA");
				break;
			case 0x11185:
				strcpy_s(buf, buf_size, "SHARADA LETTER I");
				break;
			case 0x11186:
				strcpy_s(buf, buf_size, "SHARADA LETTER II");
				break;
			case 0x11187:
				strcpy_s(buf, buf_size, "SHARADA LETTER U");
				break;
			case 0x11188:
				strcpy_s(buf, buf_size, "SHARADA LETTER UU");
				break;
			case 0x11189:
				strcpy_s(buf, buf_size, "SHARADA LETTER VOCALIC R");
				break;
			case 0x1118A:
				strcpy_s(buf, buf_size, "SHARADA LETTER VOCALIC RR");
				break;
			case 0x1118B:
				strcpy_s(buf, buf_size, "SHARADA LETTER VOCALIC L");
				break;
			case 0x1118C:
				strcpy_s(buf, buf_size, "SHARADA LETTER VOCALIC LL");
				break;
			case 0x1118D:
				strcpy_s(buf, buf_size, "SHARADA LETTER E");
				break;
			case 0x1118E:
				strcpy_s(buf, buf_size, "SHARADA LETTER AI");
				break;
			case 0x1118F:
				strcpy_s(buf, buf_size, "SHARADA LETTER O");
				break;
			case 0x11190:
				strcpy_s(buf, buf_size, "SHARADA LETTER AU");
				break;
			case 0x11191:
				strcpy_s(buf, buf_size, "SHARADA LETTER KA");
				break;
			case 0x11192:
				strcpy_s(buf, buf_size, "SHARADA LETTER KHA");
				break;
			case 0x11193:
				strcpy_s(buf, buf_size, "SHARADA LETTER GA");
				break;
			case 0x11194:
				strcpy_s(buf, buf_size, "SHARADA LETTER GHA");
				break;
			case 0x11195:
				strcpy_s(buf, buf_size, "SHARADA LETTER NGA");
				break;
			case 0x11196:
				strcpy_s(buf, buf_size, "SHARADA LETTER CA");
				break;
			case 0x11197:
				strcpy_s(buf, buf_size, "SHARADA LETTER CHA");
				break;
			case 0x11198:
				strcpy_s(buf, buf_size, "SHARADA LETTER JA");
				break;
			case 0x11199:
				strcpy_s(buf, buf_size, "SHARADA LETTER JHA");
				break;
			case 0x1119A:
				strcpy_s(buf, buf_size, "SHARADA LETTER NYA");
				break;
			case 0x1119B:
				strcpy_s(buf, buf_size, "SHARADA LETTER TTA");
				break;
			case 0x1119C:
				strcpy_s(buf, buf_size, "SHARADA LETTER TTHA");
				break;
			case 0x1119D:
				strcpy_s(buf, buf_size, "SHARADA LETTER DDA");
				break;
			case 0x1119E:
				strcpy_s(buf, buf_size, "SHARADA LETTER DDHA");
				break;
			case 0x1119F:
				strcpy_s(buf, buf_size, "SHARADA LETTER NNA");
				break;
			case 0x111A0:
				strcpy_s(buf, buf_size, "SHARADA LETTER TA");
				break;
			case 0x111A1:
				strcpy_s(buf, buf_size, "SHARADA LETTER THA");
				break;
			case 0x111A2:
				strcpy_s(buf, buf_size, "SHARADA LETTER DA");
				break;
			case 0x111A3:
				strcpy_s(buf, buf_size, "SHARADA LETTER DHA");
				break;
			case 0x111A4:
				strcpy_s(buf, buf_size, "SHARADA LETTER NA");
				break;
			case 0x111A5:
				strcpy_s(buf, buf_size, "SHARADA LETTER PA");
				break;
			case 0x111A6:
				strcpy_s(buf, buf_size, "SHARADA LETTER PHA");
				break;
			case 0x111A7:
				strcpy_s(buf, buf_size, "SHARADA LETTER BA");
				break;
			case 0x111A8:
				strcpy_s(buf, buf_size, "SHARADA LETTER BHA");
				break;
			case 0x111A9:
				strcpy_s(buf, buf_size, "SHARADA LETTER MA");
				break;
			case 0x111AA:
				strcpy_s(buf, buf_size, "SHARADA LETTER YA");
				break;
			case 0x111AB:
				strcpy_s(buf, buf_size, "SHARADA LETTER RA");
				break;
			case 0x111AC:
				strcpy_s(buf, buf_size, "SHARADA LETTER LA");
				break;
			case 0x111AD:
				strcpy_s(buf, buf_size, "SHARADA LETTER LLA");
				break;
			case 0x111AE:
				strcpy_s(buf, buf_size, "SHARADA LETTER VA");
				break;
			case 0x111AF:
				strcpy_s(buf, buf_size, "SHARADA LETTER SHA");
				break;
			case 0x111B0:
				strcpy_s(buf, buf_size, "SHARADA LETTER SSA");
				break;
			case 0x111B1:
				strcpy_s(buf, buf_size, "SHARADA LETTER SA");
				break;
			case 0x111B2:
				strcpy_s(buf, buf_size, "SHARADA LETTER HA");
				break;
			case 0x111B3:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN AA");
				break;
			case 0x111B4:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN I");
				break;
			case 0x111B5:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN II");
				break;
			case 0x111B6:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN U");
				break;
			case 0x111B7:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN UU");
				break;
			case 0x111B8:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN VOCALIC R");
				break;
			case 0x111B9:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN VOCALIC RR");
				break;
			case 0x111BA:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN VOCALIC L");
				break;
			case 0x111BB:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN VOCALIC LL");
				break;
			case 0x111BC:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN E");
				break;
			case 0x111BD:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN AI");
				break;
			case 0x111BE:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN O");
				break;
			case 0x111BF:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN AU");
				break;
			case 0x111C0:
				strcpy_s(buf, buf_size, "SHARADA SIGN VIRAMA");
				break;
			case 0x111C1:
				strcpy_s(buf, buf_size, "SHARADA SIGN AVAGRAHA");
				break;
			case 0x111C2:
				strcpy_s(buf, buf_size, "SHARADA SIGN JIHVAMULIYA");
				break;
			case 0x111C3:
				strcpy_s(buf, buf_size, "SHARADA SIGN UPADHMANIYA");
				break;
			case 0x111C4:
				strcpy_s(buf, buf_size, "SHARADA OM");
				break;
			case 0x111C5:
				strcpy_s(buf, buf_size, "SHARADA DANDA");
				break;
			case 0x111C6:
				strcpy_s(buf, buf_size, "SHARADA DOUBLE DANDA");
				break;
			case 0x111C7:
				strcpy_s(buf, buf_size, "SHARADA ABBREVIATION SIGN");
				break;
			case 0x111C8:
				strcpy_s(buf, buf_size, "SHARADA SEPARATOR");
				break;
			case 0x111C9:
				strcpy_s(buf, buf_size, "SHARADA SANDHI MARK");
				break;
			case 0x111CA:
				strcpy_s(buf, buf_size, "SHARADA SIGN NUKTA");
				break;
			case 0x111CB:
				strcpy_s(buf, buf_size, "SHARADA VOWEL MODIFIER MARK");
				break;
			case 0x111CC:
				strcpy_s(buf, buf_size, "SHARADA EXTRA SHORT VOWEL MARK");
				break;
			case 0x111CD:
				strcpy_s(buf, buf_size, "SHARADA SUTRA MARK");
				break;
			case 0x111CE:
				strcpy_s(buf, buf_size, "SHARADA VOWEL SIGN PRISHTHAMATRA E");
				break;
			case 0x111CF:
				strcpy_s(buf, buf_size, "SHARADA SIGN INVERTED CANDRABINDU");
				break;
			case 0x111D0:
				strcpy_s(buf, buf_size, "SHARADA DIGIT ZERO");
				break;
			case 0x111D1:
				strcpy_s(buf, buf_size, "SHARADA DIGIT ONE");
				break;
			case 0x111D2:
				strcpy_s(buf, buf_size, "SHARADA DIGIT TWO");
				break;
			case 0x111D3:
				strcpy_s(buf, buf_size, "SHARADA DIGIT THREE");
				break;
			case 0x111D4:
				strcpy_s(buf, buf_size, "SHARADA DIGIT FOUR");
				break;
			case 0x111D5:
				strcpy_s(buf, buf_size, "SHARADA DIGIT FIVE");
				break;
			case 0x111D6:
				strcpy_s(buf, buf_size, "SHARADA DIGIT SIX");
				break;
			case 0x111D7:
				strcpy_s(buf, buf_size, "SHARADA DIGIT SEVEN");
				break;
			case 0x111D8:
				strcpy_s(buf, buf_size, "SHARADA DIGIT EIGHT");
				break;
			case 0x111D9:
				strcpy_s(buf, buf_size, "SHARADA DIGIT NINE");
				break;
			case 0x111DA:
				strcpy_s(buf, buf_size, "SHARADA EKAM");
				break;
			case 0x111DB:
				strcpy_s(buf, buf_size, "SHARADA SIGN SIDDHAM");
				break;
			case 0x111DC:
				strcpy_s(buf, buf_size, "SHARADA HEADSTROKE");
				break;
			case 0x111DD:
				strcpy_s(buf, buf_size, "SHARADA CONTINUATION SIGN");
				break;
			case 0x111DE:
				strcpy_s(buf, buf_size, "SHARADA SECTION MARK-1");
				break;
			case 0x111DF:
				strcpy_s(buf, buf_size, "SHARADA SECTION MARK-2");
				break;
			case 0x111E1:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC DIGIT ONE");
				break;
			case 0x111E2:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC DIGIT TWO");
				break;
			case 0x111E3:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC DIGIT THREE");
				break;
			case 0x111E4:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC DIGIT FOUR");
				break;
			case 0x111E5:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC DIGIT FIVE");
				break;
			case 0x111E6:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC DIGIT SIX");
				break;
			case 0x111E7:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC DIGIT SEVEN");
				break;
			case 0x111E8:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC DIGIT EIGHT");
				break;
			case 0x111E9:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC DIGIT NINE");
				break;
			case 0x111EA:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER TEN");
				break;
			case 0x111EB:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER TWENTY");
				break;
			case 0x111EC:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER THIRTY");
				break;
			case 0x111ED:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER FORTY");
				break;
			case 0x111EE:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER FIFTY");
				break;
			case 0x111EF:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER SIXTY");
				break;
			case 0x111F0:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER SEVENTY");
				break;
			case 0x111F1:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER EIGHTY");
				break;
			case 0x111F2:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER NINETY");
				break;
			case 0x111F3:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER ONE HUNDRED");
				break;
			case 0x111F4:
				strcpy_s(buf, buf_size, "SINHALA ARCHAIC NUMBER ONE THOUSAND");
				break;
			case 0x11200:
				strcpy_s(buf, buf_size, "KHOJKI LETTER A");
				break;
			case 0x11201:
				strcpy_s(buf, buf_size, "KHOJKI LETTER AA");
				break;
			case 0x11202:
				strcpy_s(buf, buf_size, "KHOJKI LETTER I");
				break;
			case 0x11203:
				strcpy_s(buf, buf_size, "KHOJKI LETTER U");
				break;
			case 0x11204:
				strcpy_s(buf, buf_size, "KHOJKI LETTER E");
				break;
			case 0x11205:
				strcpy_s(buf, buf_size, "KHOJKI LETTER AI");
				break;
			case 0x11206:
				strcpy_s(buf, buf_size, "KHOJKI LETTER O");
				break;
			case 0x11207:
				strcpy_s(buf, buf_size, "KHOJKI LETTER AU");
				break;
			case 0x11208:
				strcpy_s(buf, buf_size, "KHOJKI LETTER KA");
				break;
			case 0x11209:
				strcpy_s(buf, buf_size, "KHOJKI LETTER KHA");
				break;
			case 0x1120A:
				strcpy_s(buf, buf_size, "KHOJKI LETTER GA");
				break;
			case 0x1120B:
				strcpy_s(buf, buf_size, "KHOJKI LETTER GGA");
				break;
			case 0x1120C:
				strcpy_s(buf, buf_size, "KHOJKI LETTER GHA");
				break;
			case 0x1120D:
				strcpy_s(buf, buf_size, "KHOJKI LETTER NGA");
				break;
			case 0x1120E:
				strcpy_s(buf, buf_size, "KHOJKI LETTER CA");
				break;
			case 0x1120F:
				strcpy_s(buf, buf_size, "KHOJKI LETTER CHA");
				break;
			case 0x11210:
				strcpy_s(buf, buf_size, "KHOJKI LETTER JA");
				break;
			case 0x11211:
				strcpy_s(buf, buf_size, "KHOJKI LETTER JJA");
				break;
			case 0x11213:
				strcpy_s(buf, buf_size, "KHOJKI LETTER NYA");
				break;
			case 0x11214:
				strcpy_s(buf, buf_size, "KHOJKI LETTER TTA");
				break;
			case 0x11215:
				strcpy_s(buf, buf_size, "KHOJKI LETTER TTHA");
				break;
			case 0x11216:
				strcpy_s(buf, buf_size, "KHOJKI LETTER DDA");
				break;
			case 0x11217:
				strcpy_s(buf, buf_size, "KHOJKI LETTER DDHA");
				break;
			case 0x11218:
				strcpy_s(buf, buf_size, "KHOJKI LETTER NNA");
				break;
			case 0x11219:
				strcpy_s(buf, buf_size, "KHOJKI LETTER TA");
				break;
			case 0x1121A:
				strcpy_s(buf, buf_size, "KHOJKI LETTER THA");
				break;
			case 0x1121B:
				strcpy_s(buf, buf_size, "KHOJKI LETTER DA");
				break;
			case 0x1121C:
				strcpy_s(buf, buf_size, "KHOJKI LETTER DDDA");
				break;
			case 0x1121D:
				strcpy_s(buf, buf_size, "KHOJKI LETTER DHA");
				break;
			case 0x1121E:
				strcpy_s(buf, buf_size, "KHOJKI LETTER NA");
				break;
			case 0x1121F:
				strcpy_s(buf, buf_size, "KHOJKI LETTER PA");
				break;
			case 0x11220:
				strcpy_s(buf, buf_size, "KHOJKI LETTER PHA");
				break;
			case 0x11221:
				strcpy_s(buf, buf_size, "KHOJKI LETTER BA");
				break;
			case 0x11222:
				strcpy_s(buf, buf_size, "KHOJKI LETTER BBA");
				break;
			case 0x11223:
				strcpy_s(buf, buf_size, "KHOJKI LETTER BHA");
				break;
			case 0x11224:
				strcpy_s(buf, buf_size, "KHOJKI LETTER MA");
				break;
			case 0x11225:
				strcpy_s(buf, buf_size, "KHOJKI LETTER YA");
				break;
			case 0x11226:
				strcpy_s(buf, buf_size, "KHOJKI LETTER RA");
				break;
			case 0x11227:
				strcpy_s(buf, buf_size, "KHOJKI LETTER LA");
				break;
			case 0x11228:
				strcpy_s(buf, buf_size, "KHOJKI LETTER VA");
				break;
			case 0x11229:
				strcpy_s(buf, buf_size, "KHOJKI LETTER SA");
				break;
			case 0x1122A:
				strcpy_s(buf, buf_size, "KHOJKI LETTER HA");
				break;
			case 0x1122B:
				strcpy_s(buf, buf_size, "KHOJKI LETTER LLA");
				break;
			case 0x1122C:
				strcpy_s(buf, buf_size, "KHOJKI VOWEL SIGN AA");
				break;
			case 0x1122D:
				strcpy_s(buf, buf_size, "KHOJKI VOWEL SIGN I");
				break;
			case 0x1122E:
				strcpy_s(buf, buf_size, "KHOJKI VOWEL SIGN II");
				break;
			case 0x1122F:
				strcpy_s(buf, buf_size, "KHOJKI VOWEL SIGN U");
				break;
			case 0x11230:
				strcpy_s(buf, buf_size, "KHOJKI VOWEL SIGN E");
				break;
			case 0x11231:
				strcpy_s(buf, buf_size, "KHOJKI VOWEL SIGN AI");
				break;
			case 0x11232:
				strcpy_s(buf, buf_size, "KHOJKI VOWEL SIGN O");
				break;
			case 0x11233:
				strcpy_s(buf, buf_size, "KHOJKI VOWEL SIGN AU");
				break;
			case 0x11234:
				strcpy_s(buf, buf_size, "KHOJKI SIGN ANUSVARA");
				break;
			case 0x11235:
				strcpy_s(buf, buf_size, "KHOJKI SIGN VIRAMA");
				break;
			case 0x11236:
				strcpy_s(buf, buf_size, "KHOJKI SIGN NUKTA");
				break;
			case 0x11237:
				strcpy_s(buf, buf_size, "KHOJKI SIGN SHADDA");
				break;
			case 0x11238:
				strcpy_s(buf, buf_size, "KHOJKI DANDA");
				break;
			case 0x11239:
				strcpy_s(buf, buf_size, "KHOJKI DOUBLE DANDA");
				break;
			case 0x1123A:
				strcpy_s(buf, buf_size, "KHOJKI WORD SEPARATOR");
				break;
			case 0x1123B:
				strcpy_s(buf, buf_size, "KHOJKI SECTION MARK");
				break;
			case 0x1123C:
				strcpy_s(buf, buf_size, "KHOJKI DOUBLE SECTION MARK");
				break;
			case 0x1123D:
				strcpy_s(buf, buf_size, "KHOJKI ABBREVIATION SIGN");
				break;
			case 0x1123E:
				strcpy_s(buf, buf_size, "KHOJKI SIGN SUKUN");
				break;
			case 0x11280:
				strcpy_s(buf, buf_size, "MULTANI LETTER A");
				break;
			case 0x11281:
				strcpy_s(buf, buf_size, "MULTANI LETTER I");
				break;
			case 0x11282:
				strcpy_s(buf, buf_size, "MULTANI LETTER U");
				break;
			case 0x11283:
				strcpy_s(buf, buf_size, "MULTANI LETTER E");
				break;
			case 0x11284:
				strcpy_s(buf, buf_size, "MULTANI LETTER KA");
				break;
			case 0x11285:
				strcpy_s(buf, buf_size, "MULTANI LETTER KHA");
				break;
			case 0x11286:
				strcpy_s(buf, buf_size, "MULTANI LETTER GA");
				break;
			case 0x11288:
				strcpy_s(buf, buf_size, "MULTANI LETTER GHA");
				break;
			case 0x1128A:
				strcpy_s(buf, buf_size, "MULTANI LETTER CA");
				break;
			case 0x1128B:
				strcpy_s(buf, buf_size, "MULTANI LETTER CHA");
				break;
			case 0x1128C:
				strcpy_s(buf, buf_size, "MULTANI LETTER JA");
				break;
			case 0x1128D:
				strcpy_s(buf, buf_size, "MULTANI LETTER JJA");
				break;
			case 0x1128F:
				strcpy_s(buf, buf_size, "MULTANI LETTER NYA");
				break;
			case 0x11290:
				strcpy_s(buf, buf_size, "MULTANI LETTER TTA");
				break;
			case 0x11291:
				strcpy_s(buf, buf_size, "MULTANI LETTER TTHA");
				break;
			case 0x11292:
				strcpy_s(buf, buf_size, "MULTANI LETTER DDA");
				break;
			case 0x11293:
				strcpy_s(buf, buf_size, "MULTANI LETTER DDDA");
				break;
			case 0x11294:
				strcpy_s(buf, buf_size, "MULTANI LETTER DDHA");
				break;
			case 0x11295:
				strcpy_s(buf, buf_size, "MULTANI LETTER NNA");
				break;
			case 0x11296:
				strcpy_s(buf, buf_size, "MULTANI LETTER TA");
				break;
			case 0x11297:
				strcpy_s(buf, buf_size, "MULTANI LETTER THA");
				break;
			case 0x11298:
				strcpy_s(buf, buf_size, "MULTANI LETTER DA");
				break;
			case 0x11299:
				strcpy_s(buf, buf_size, "MULTANI LETTER DHA");
				break;
			case 0x1129A:
				strcpy_s(buf, buf_size, "MULTANI LETTER NA");
				break;
			case 0x1129B:
				strcpy_s(buf, buf_size, "MULTANI LETTER PA");
				break;
			case 0x1129C:
				strcpy_s(buf, buf_size, "MULTANI LETTER PHA");
				break;
			case 0x1129D:
				strcpy_s(buf, buf_size, "MULTANI LETTER BA");
				break;
			case 0x1129F:
				strcpy_s(buf, buf_size, "MULTANI LETTER BHA");
				break;
			case 0x112A0:
				strcpy_s(buf, buf_size, "MULTANI LETTER MA");
				break;
			case 0x112A1:
				strcpy_s(buf, buf_size, "MULTANI LETTER YA");
				break;
			case 0x112A2:
				strcpy_s(buf, buf_size, "MULTANI LETTER RA");
				break;
			case 0x112A3:
				strcpy_s(buf, buf_size, "MULTANI LETTER LA");
				break;
			case 0x112A4:
				strcpy_s(buf, buf_size, "MULTANI LETTER VA");
				break;
			case 0x112A5:
				strcpy_s(buf, buf_size, "MULTANI LETTER SA");
				break;
			case 0x112A6:
				strcpy_s(buf, buf_size, "MULTANI LETTER HA");
				break;
			case 0x112A7:
				strcpy_s(buf, buf_size, "MULTANI LETTER RRA");
				break;
			case 0x112A8:
				strcpy_s(buf, buf_size, "MULTANI LETTER RHA");
				break;
			case 0x112A9:
				strcpy_s(buf, buf_size, "MULTANI SECTION MARK");
				break;
			case 0x112B0:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER A");
				break;
			case 0x112B1:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER AA");
				break;
			case 0x112B2:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER I");
				break;
			case 0x112B3:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER II");
				break;
			case 0x112B4:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER U");
				break;
			case 0x112B5:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER UU");
				break;
			case 0x112B6:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER E");
				break;
			case 0x112B7:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER AI");
				break;
			case 0x112B8:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER O");
				break;
			case 0x112B9:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER AU");
				break;
			case 0x112BA:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER KA");
				break;
			case 0x112BB:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER KHA");
				break;
			case 0x112BC:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER GA");
				break;
			case 0x112BD:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER GGA");
				break;
			case 0x112BE:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER GHA");
				break;
			case 0x112BF:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER NGA");
				break;
			case 0x112C0:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER CA");
				break;
			case 0x112C1:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER CHA");
				break;
			case 0x112C2:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER JA");
				break;
			case 0x112C3:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER JJA");
				break;
			case 0x112C4:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER JHA");
				break;
			case 0x112C5:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER NYA");
				break;
			case 0x112C6:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER TTA");
				break;
			case 0x112C7:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER TTHA");
				break;
			case 0x112C8:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER DDA");
				break;
			case 0x112C9:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER DDDA");
				break;
			case 0x112CA:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER RRA");
				break;
			case 0x112CB:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER DDHA");
				break;
			case 0x112CC:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER NNA");
				break;
			case 0x112CD:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER TA");
				break;
			case 0x112CE:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER THA");
				break;
			case 0x112CF:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER DA");
				break;
			case 0x112D0:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER DHA");
				break;
			case 0x112D1:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER NA");
				break;
			case 0x112D2:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER PA");
				break;
			case 0x112D3:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER PHA");
				break;
			case 0x112D4:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER BA");
				break;
			case 0x112D5:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER BBA");
				break;
			case 0x112D6:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER BHA");
				break;
			case 0x112D7:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER MA");
				break;
			case 0x112D8:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER YA");
				break;
			case 0x112D9:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER RA");
				break;
			case 0x112DA:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER LA");
				break;
			case 0x112DB:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER VA");
				break;
			case 0x112DC:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER SHA");
				break;
			case 0x112DD:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER SA");
				break;
			case 0x112DE:
				strcpy_s(buf, buf_size, "KHUDAWADI LETTER HA");
				break;
			case 0x112DF:
				strcpy_s(buf, buf_size, "KHUDAWADI SIGN ANUSVARA");
				break;
			case 0x112E0:
				strcpy_s(buf, buf_size, "KHUDAWADI VOWEL SIGN AA");
				break;
			case 0x112E1:
				strcpy_s(buf, buf_size, "KHUDAWADI VOWEL SIGN I");
				break;
			case 0x112E2:
				strcpy_s(buf, buf_size, "KHUDAWADI VOWEL SIGN II");
				break;
			case 0x112E3:
				strcpy_s(buf, buf_size, "KHUDAWADI VOWEL SIGN U");
				break;
			case 0x112E4:
				strcpy_s(buf, buf_size, "KHUDAWADI VOWEL SIGN UU");
				break;
			case 0x112E5:
				strcpy_s(buf, buf_size, "KHUDAWADI VOWEL SIGN E");
				break;
			case 0x112E6:
				strcpy_s(buf, buf_size, "KHUDAWADI VOWEL SIGN AI");
				break;
			case 0x112E7:
				strcpy_s(buf, buf_size, "KHUDAWADI VOWEL SIGN O");
				break;
			case 0x112E8:
				strcpy_s(buf, buf_size, "KHUDAWADI VOWEL SIGN AU");
				break;
			case 0x112E9:
				strcpy_s(buf, buf_size, "KHUDAWADI SIGN NUKTA");
				break;
			case 0x112EA:
				strcpy_s(buf, buf_size, "KHUDAWADI SIGN VIRAMA");
				break;
			case 0x112F0:
				strcpy_s(buf, buf_size, "KHUDAWADI DIGIT ZERO");
				break;
			case 0x112F1:
				strcpy_s(buf, buf_size, "KHUDAWADI DIGIT ONE");
				break;
			case 0x112F2:
				strcpy_s(buf, buf_size, "KHUDAWADI DIGIT TWO");
				break;
			case 0x112F3:
				strcpy_s(buf, buf_size, "KHUDAWADI DIGIT THREE");
				break;
			case 0x112F4:
				strcpy_s(buf, buf_size, "KHUDAWADI DIGIT FOUR");
				break;
			case 0x112F5:
				strcpy_s(buf, buf_size, "KHUDAWADI DIGIT FIVE");
				break;
			case 0x112F6:
				strcpy_s(buf, buf_size, "KHUDAWADI DIGIT SIX");
				break;
			case 0x112F7:
				strcpy_s(buf, buf_size, "KHUDAWADI DIGIT SEVEN");
				break;
			case 0x112F8:
				strcpy_s(buf, buf_size, "KHUDAWADI DIGIT EIGHT");
				break;
			case 0x112F9:
				strcpy_s(buf, buf_size, "KHUDAWADI DIGIT NINE");
				break;
			case 0x11300:
				strcpy_s(buf, buf_size, "GRANTHA SIGN COMBINING ANUSVARA ABOVE");
				break;
			case 0x11301:
				strcpy_s(buf, buf_size, "GRANTHA SIGN CANDRABINDU");
				break;
			case 0x11302:
				strcpy_s(buf, buf_size, "GRANTHA SIGN ANUSVARA");
				break;
			case 0x11303:
				strcpy_s(buf, buf_size, "GRANTHA SIGN VISARGA");
				break;
			case 0x11305:
				strcpy_s(buf, buf_size, "GRANTHA LETTER A");
				break;
			case 0x11306:
				strcpy_s(buf, buf_size, "GRANTHA LETTER AA");
				break;
			case 0x11307:
				strcpy_s(buf, buf_size, "GRANTHA LETTER I");
				break;
			case 0x11308:
				strcpy_s(buf, buf_size, "GRANTHA LETTER II");
				break;
			case 0x11309:
				strcpy_s(buf, buf_size, "GRANTHA LETTER U");
				break;
			case 0x1130A:
				strcpy_s(buf, buf_size, "GRANTHA LETTER UU");
				break;
			case 0x1130B:
				strcpy_s(buf, buf_size, "GRANTHA LETTER VOCALIC R");
				break;
			case 0x1130C:
				strcpy_s(buf, buf_size, "GRANTHA LETTER VOCALIC L");
				break;
			case 0x1130F:
				strcpy_s(buf, buf_size, "GRANTHA LETTER EE");
				break;
			case 0x11310:
				strcpy_s(buf, buf_size, "GRANTHA LETTER AI");
				break;
			case 0x11313:
				strcpy_s(buf, buf_size, "GRANTHA LETTER OO");
				break;
			case 0x11314:
				strcpy_s(buf, buf_size, "GRANTHA LETTER AU");
				break;
			case 0x11315:
				strcpy_s(buf, buf_size, "GRANTHA LETTER KA");
				break;
			case 0x11316:
				strcpy_s(buf, buf_size, "GRANTHA LETTER KHA");
				break;
			case 0x11317:
				strcpy_s(buf, buf_size, "GRANTHA LETTER GA");
				break;
			case 0x11318:
				strcpy_s(buf, buf_size, "GRANTHA LETTER GHA");
				break;
			case 0x11319:
				strcpy_s(buf, buf_size, "GRANTHA LETTER NGA");
				break;
			case 0x1131A:
				strcpy_s(buf, buf_size, "GRANTHA LETTER CA");
				break;
			case 0x1131B:
				strcpy_s(buf, buf_size, "GRANTHA LETTER CHA");
				break;
			case 0x1131C:
				strcpy_s(buf, buf_size, "GRANTHA LETTER JA");
				break;
			case 0x1131D:
				strcpy_s(buf, buf_size, "GRANTHA LETTER JHA");
				break;
			case 0x1131E:
				strcpy_s(buf, buf_size, "GRANTHA LETTER NYA");
				break;
			case 0x1131F:
				strcpy_s(buf, buf_size, "GRANTHA LETTER TTA");
				break;
			case 0x11320:
				strcpy_s(buf, buf_size, "GRANTHA LETTER TTHA");
				break;
			case 0x11321:
				strcpy_s(buf, buf_size, "GRANTHA LETTER DDA");
				break;
			case 0x11322:
				strcpy_s(buf, buf_size, "GRANTHA LETTER DDHA");
				break;
			case 0x11323:
				strcpy_s(buf, buf_size, "GRANTHA LETTER NNA");
				break;
			case 0x11324:
				strcpy_s(buf, buf_size, "GRANTHA LETTER TA");
				break;
			case 0x11325:
				strcpy_s(buf, buf_size, "GRANTHA LETTER THA");
				break;
			case 0x11326:
				strcpy_s(buf, buf_size, "GRANTHA LETTER DA");
				break;
			case 0x11327:
				strcpy_s(buf, buf_size, "GRANTHA LETTER DHA");
				break;
			case 0x11328:
				strcpy_s(buf, buf_size, "GRANTHA LETTER NA");
				break;
			case 0x1132A:
				strcpy_s(buf, buf_size, "GRANTHA LETTER PA");
				break;
			case 0x1132B:
				strcpy_s(buf, buf_size, "GRANTHA LETTER PHA");
				break;
			case 0x1132C:
				strcpy_s(buf, buf_size, "GRANTHA LETTER BA");
				break;
			case 0x1132D:
				strcpy_s(buf, buf_size, "GRANTHA LETTER BHA");
				break;
			case 0x1132E:
				strcpy_s(buf, buf_size, "GRANTHA LETTER MA");
				break;
			case 0x1132F:
				strcpy_s(buf, buf_size, "GRANTHA LETTER YA");
				break;
			case 0x11330:
				strcpy_s(buf, buf_size, "GRANTHA LETTER RA");
				break;
			case 0x11332:
				strcpy_s(buf, buf_size, "GRANTHA LETTER LA");
				break;
			case 0x11333:
				strcpy_s(buf, buf_size, "GRANTHA LETTER LLA");
				break;
			case 0x11335:
				strcpy_s(buf, buf_size, "GRANTHA LETTER VA");
				break;
			case 0x11336:
				strcpy_s(buf, buf_size, "GRANTHA LETTER SHA");
				break;
			case 0x11337:
				strcpy_s(buf, buf_size, "GRANTHA LETTER SSA");
				break;
			case 0x11338:
				strcpy_s(buf, buf_size, "GRANTHA LETTER SA");
				break;
			case 0x11339:
				strcpy_s(buf, buf_size, "GRANTHA LETTER HA");
				break;
			case 0x1133B:
				strcpy_s(buf, buf_size, "COMBINING BINDU BELOW");
				break;
			case 0x1133C:
				strcpy_s(buf, buf_size, "GRANTHA SIGN NUKTA");
				break;
			case 0x1133D:
				strcpy_s(buf, buf_size, "GRANTHA SIGN AVAGRAHA");
				break;
			case 0x1133E:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN AA");
				break;
			case 0x1133F:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN I");
				break;
			case 0x11340:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN II");
				break;
			case 0x11341:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN U");
				break;
			case 0x11342:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN UU");
				break;
			case 0x11343:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN VOCALIC R");
				break;
			case 0x11344:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN VOCALIC RR");
				break;
			case 0x11347:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN EE");
				break;
			case 0x11348:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN AI");
				break;
			case 0x1134B:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN OO");
				break;
			case 0x1134C:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN AU");
				break;
			case 0x1134D:
				strcpy_s(buf, buf_size, "GRANTHA SIGN VIRAMA");
				break;
			case 0x11350:
				strcpy_s(buf, buf_size, "GRANTHA OM");
				break;
			case 0x11357:
				strcpy_s(buf, buf_size, "GRANTHA AU LENGTH MARK");
				break;
			case 0x1135D:
				strcpy_s(buf, buf_size, "GRANTHA SIGN PLUTA");
				break;
			case 0x1135E:
				strcpy_s(buf, buf_size, "GRANTHA LETTER VEDIC ANUSVARA");
				break;
			case 0x1135F:
				strcpy_s(buf, buf_size, "GRANTHA LETTER VEDIC DOUBLE ANUSVARA");
				break;
			case 0x11360:
				strcpy_s(buf, buf_size, "GRANTHA LETTER VOCALIC RR");
				break;
			case 0x11361:
				strcpy_s(buf, buf_size, "GRANTHA LETTER VOCALIC LL");
				break;
			case 0x11362:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN VOCALIC L");
				break;
			case 0x11363:
				strcpy_s(buf, buf_size, "GRANTHA VOWEL SIGN VOCALIC LL");
				break;
			case 0x11366:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA DIGIT ZERO");
				break;
			case 0x11367:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA DIGIT ONE");
				break;
			case 0x11368:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA DIGIT TWO");
				break;
			case 0x11369:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA DIGIT THREE");
				break;
			case 0x1136A:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA DIGIT FOUR");
				break;
			case 0x1136B:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA DIGIT FIVE");
				break;
			case 0x1136C:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA DIGIT SIX");
				break;
			case 0x11370:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA LETTER A");
				break;
			case 0x11371:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA LETTER KA");
				break;
			case 0x11372:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA LETTER NA");
				break;
			case 0x11373:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA LETTER VI");
				break;
			case 0x11374:
				strcpy_s(buf, buf_size, "COMBINING GRANTHA LETTER PA");
				break;
			case 0x11400:
				strcpy_s(buf, buf_size, "NEWA LETTER A");
				break;
			case 0x11401:
				strcpy_s(buf, buf_size, "NEWA LETTER AA");
				break;
			case 0x11402:
				strcpy_s(buf, buf_size, "NEWA LETTER I");
				break;
			case 0x11403:
				strcpy_s(buf, buf_size, "NEWA LETTER II");
				break;
			case 0x11404:
				strcpy_s(buf, buf_size, "NEWA LETTER U");
				break;
			case 0x11405:
				strcpy_s(buf, buf_size, "NEWA LETTER UU");
				break;
			case 0x11406:
				strcpy_s(buf, buf_size, "NEWA LETTER VOCALIC R");
				break;
			case 0x11407:
				strcpy_s(buf, buf_size, "NEWA LETTER VOCALIC RR");
				break;
			case 0x11408:
				strcpy_s(buf, buf_size, "NEWA LETTER VOCALIC L");
				break;
			case 0x11409:
				strcpy_s(buf, buf_size, "NEWA LETTER VOCALIC LL");
				break;
			case 0x1140A:
				strcpy_s(buf, buf_size, "NEWA LETTER E");
				break;
			case 0x1140B:
				strcpy_s(buf, buf_size, "NEWA LETTER AI");
				break;
			case 0x1140C:
				strcpy_s(buf, buf_size, "NEWA LETTER O");
				break;
			case 0x1140D:
				strcpy_s(buf, buf_size, "NEWA LETTER AU");
				break;
			case 0x1140E:
				strcpy_s(buf, buf_size, "NEWA LETTER KA");
				break;
			case 0x1140F:
				strcpy_s(buf, buf_size, "NEWA LETTER KHA");
				break;
			case 0x11410:
				strcpy_s(buf, buf_size, "NEWA LETTER GA");
				break;
			case 0x11411:
				strcpy_s(buf, buf_size, "NEWA LETTER GHA");
				break;
			case 0x11412:
				strcpy_s(buf, buf_size, "NEWA LETTER NGA");
				break;
			case 0x11413:
				strcpy_s(buf, buf_size, "NEWA LETTER NGHA");
				break;
			case 0x11414:
				strcpy_s(buf, buf_size, "NEWA LETTER CA");
				break;
			case 0x11415:
				strcpy_s(buf, buf_size, "NEWA LETTER CHA");
				break;
			case 0x11416:
				strcpy_s(buf, buf_size, "NEWA LETTER JA");
				break;
			case 0x11417:
				strcpy_s(buf, buf_size, "NEWA LETTER JHA");
				break;
			case 0x11418:
				strcpy_s(buf, buf_size, "NEWA LETTER NYA");
				break;
			case 0x11419:
				strcpy_s(buf, buf_size, "NEWA LETTER NYHA");
				break;
			case 0x1141A:
				strcpy_s(buf, buf_size, "NEWA LETTER TTA");
				break;
			case 0x1141B:
				strcpy_s(buf, buf_size, "NEWA LETTER TTHA");
				break;
			case 0x1141C:
				strcpy_s(buf, buf_size, "NEWA LETTER DDA");
				break;
			case 0x1141D:
				strcpy_s(buf, buf_size, "NEWA LETTER DDHA");
				break;
			case 0x1141E:
				strcpy_s(buf, buf_size, "NEWA LETTER NNA");
				break;
			case 0x1141F:
				strcpy_s(buf, buf_size, "NEWA LETTER TA");
				break;
			case 0x11420:
				strcpy_s(buf, buf_size, "NEWA LETTER THA");
				break;
			case 0x11421:
				strcpy_s(buf, buf_size, "NEWA LETTER DA");
				break;
			case 0x11422:
				strcpy_s(buf, buf_size, "NEWA LETTER DHA");
				break;
			case 0x11423:
				strcpy_s(buf, buf_size, "NEWA LETTER NA");
				break;
			case 0x11424:
				strcpy_s(buf, buf_size, "NEWA LETTER NHA");
				break;
			case 0x11425:
				strcpy_s(buf, buf_size, "NEWA LETTER PA");
				break;
			case 0x11426:
				strcpy_s(buf, buf_size, "NEWA LETTER PHA");
				break;
			case 0x11427:
				strcpy_s(buf, buf_size, "NEWA LETTER BA");
				break;
			case 0x11428:
				strcpy_s(buf, buf_size, "NEWA LETTER BHA");
				break;
			case 0x11429:
				strcpy_s(buf, buf_size, "NEWA LETTER MA");
				break;
			case 0x1142A:
				strcpy_s(buf, buf_size, "NEWA LETTER MHA");
				break;
			case 0x1142B:
				strcpy_s(buf, buf_size, "NEWA LETTER YA");
				break;
			case 0x1142C:
				strcpy_s(buf, buf_size, "NEWA LETTER RA");
				break;
			case 0x1142D:
				strcpy_s(buf, buf_size, "NEWA LETTER RHA");
				break;
			case 0x1142E:
				strcpy_s(buf, buf_size, "NEWA LETTER LA");
				break;
			case 0x1142F:
				strcpy_s(buf, buf_size, "NEWA LETTER LHA");
				break;
			case 0x11430:
				strcpy_s(buf, buf_size, "NEWA LETTER WA");
				break;
			case 0x11431:
				strcpy_s(buf, buf_size, "NEWA LETTER SHA");
				break;
			case 0x11432:
				strcpy_s(buf, buf_size, "NEWA LETTER SSA");
				break;
			case 0x11433:
				strcpy_s(buf, buf_size, "NEWA LETTER SA");
				break;
			case 0x11434:
				strcpy_s(buf, buf_size, "NEWA LETTER HA");
				break;
			case 0x11435:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN AA");
				break;
			case 0x11436:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN I");
				break;
			case 0x11437:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN II");
				break;
			case 0x11438:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN U");
				break;
			case 0x11439:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN UU");
				break;
			case 0x1143A:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN VOCALIC R");
				break;
			case 0x1143B:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN VOCALIC RR");
				break;
			case 0x1143C:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN VOCALIC L");
				break;
			case 0x1143D:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN VOCALIC LL");
				break;
			case 0x1143E:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN E");
				break;
			case 0x1143F:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN AI");
				break;
			case 0x11440:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN O");
				break;
			case 0x11441:
				strcpy_s(buf, buf_size, "NEWA VOWEL SIGN AU");
				break;
			case 0x11442:
				strcpy_s(buf, buf_size, "NEWA SIGN VIRAMA");
				break;
			case 0x11443:
				strcpy_s(buf, buf_size, "NEWA SIGN CANDRABINDU");
				break;
			case 0x11444:
				strcpy_s(buf, buf_size, "NEWA SIGN ANUSVARA");
				break;
			case 0x11445:
				strcpy_s(buf, buf_size, "NEWA SIGN VISARGA");
				break;
			case 0x11446:
				strcpy_s(buf, buf_size, "NEWA SIGN NUKTA");
				break;
			case 0x11447:
				strcpy_s(buf, buf_size, "NEWA SIGN AVAGRAHA");
				break;
			case 0x11448:
				strcpy_s(buf, buf_size, "NEWA SIGN FINAL ANUSVARA");
				break;
			case 0x11449:
				strcpy_s(buf, buf_size, "NEWA OM");
				break;
			case 0x1144A:
				strcpy_s(buf, buf_size, "NEWA SIDDHI");
				break;
			case 0x1144B:
				strcpy_s(buf, buf_size, "NEWA DANDA");
				break;
			case 0x1144C:
				strcpy_s(buf, buf_size, "NEWA DOUBLE DANDA");
				break;
			case 0x1144D:
				strcpy_s(buf, buf_size, "NEWA COMMA");
				break;
			case 0x1144E:
				strcpy_s(buf, buf_size, "NEWA GAP FILLER");
				break;
			case 0x1144F:
				strcpy_s(buf, buf_size, "NEWA ABBREVIATION SIGN");
				break;
			case 0x11450:
				strcpy_s(buf, buf_size, "NEWA DIGIT ZERO");
				break;
			case 0x11451:
				strcpy_s(buf, buf_size, "NEWA DIGIT ONE");
				break;
			case 0x11452:
				strcpy_s(buf, buf_size, "NEWA DIGIT TWO");
				break;
			case 0x11453:
				strcpy_s(buf, buf_size, "NEWA DIGIT THREE");
				break;
			case 0x11454:
				strcpy_s(buf, buf_size, "NEWA DIGIT FOUR");
				break;
			case 0x11455:
				strcpy_s(buf, buf_size, "NEWA DIGIT FIVE");
				break;
			case 0x11456:
				strcpy_s(buf, buf_size, "NEWA DIGIT SIX");
				break;
			case 0x11457:
				strcpy_s(buf, buf_size, "NEWA DIGIT SEVEN");
				break;
			case 0x11458:
				strcpy_s(buf, buf_size, "NEWA DIGIT EIGHT");
				break;
			case 0x11459:
				strcpy_s(buf, buf_size, "NEWA DIGIT NINE");
				break;
			case 0x1145A:
				strcpy_s(buf, buf_size, "NEWA DOUBLE COMMA");
				break;
			case 0x1145B:
				strcpy_s(buf, buf_size, "NEWA PLACEHOLDER MARK");
				break;
			case 0x1145D:
				strcpy_s(buf, buf_size, "NEWA INSERTION SIGN");
				break;
			case 0x1145E:
				strcpy_s(buf, buf_size, "NEWA SANDHI MARK");
				break;
			case 0x1145F:
				strcpy_s(buf, buf_size, "NEWA LETTER VEDIC ANUSVARA");
				break;
			case 0x11460:
				strcpy_s(buf, buf_size, "NEWA SIGN JIHVAMULIYA");
				break;
			case 0x11461:
				strcpy_s(buf, buf_size, "NEWA SIGN UPADHMANIYA");
				break;
			case 0x11480:
				strcpy_s(buf, buf_size, "TIRHUTA ANJI");
				break;
			case 0x11481:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER A");
				break;
			case 0x11482:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER AA");
				break;
			case 0x11483:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER I");
				break;
			case 0x11484:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER II");
				break;
			case 0x11485:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER U");
				break;
			case 0x11486:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER UU");
				break;
			case 0x11487:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER VOCALIC R");
				break;
			case 0x11488:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER VOCALIC RR");
				break;
			case 0x11489:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER VOCALIC L");
				break;
			case 0x1148A:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER VOCALIC LL");
				break;
			case 0x1148B:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER E");
				break;
			case 0x1148C:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER AI");
				break;
			case 0x1148D:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER O");
				break;
			case 0x1148E:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER AU");
				break;
			case 0x1148F:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER KA");
				break;
			case 0x11490:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER KHA");
				break;
			case 0x11491:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER GA");
				break;
			case 0x11492:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER GHA");
				break;
			case 0x11493:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER NGA");
				break;
			case 0x11494:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER CA");
				break;
			case 0x11495:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER CHA");
				break;
			case 0x11496:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER JA");
				break;
			case 0x11497:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER JHA");
				break;
			case 0x11498:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER NYA");
				break;
			case 0x11499:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER TTA");
				break;
			case 0x1149A:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER TTHA");
				break;
			case 0x1149B:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER DDA");
				break;
			case 0x1149C:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER DDHA");
				break;
			case 0x1149D:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER NNA");
				break;
			case 0x1149E:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER TA");
				break;
			case 0x1149F:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER THA");
				break;
			case 0x114A0:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER DA");
				break;
			case 0x114A1:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER DHA");
				break;
			case 0x114A2:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER NA");
				break;
			case 0x114A3:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER PA");
				break;
			case 0x114A4:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER PHA");
				break;
			case 0x114A5:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER BA");
				break;
			case 0x114A6:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER BHA");
				break;
			case 0x114A7:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER MA");
				break;
			case 0x114A8:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER YA");
				break;
			case 0x114A9:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER RA");
				break;
			case 0x114AA:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER LA");
				break;
			case 0x114AB:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER VA");
				break;
			case 0x114AC:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER SHA");
				break;
			case 0x114AD:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER SSA");
				break;
			case 0x114AE:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER SA");
				break;
			case 0x114AF:
				strcpy_s(buf, buf_size, "TIRHUTA LETTER HA");
				break;
			case 0x114B0:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN AA");
				break;
			case 0x114B1:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN I");
				break;
			case 0x114B2:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN II");
				break;
			case 0x114B3:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN U");
				break;
			case 0x114B4:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN UU");
				break;
			case 0x114B5:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN VOCALIC R");
				break;
			case 0x114B6:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN VOCALIC RR");
				break;
			case 0x114B7:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN VOCALIC L");
				break;
			case 0x114B8:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN VOCALIC LL");
				break;
			case 0x114B9:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN E");
				break;
			case 0x114BA:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN SHORT E");
				break;
			case 0x114BB:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN AI");
				break;
			case 0x114BC:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN O");
				break;
			case 0x114BD:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN SHORT O");
				break;
			case 0x114BE:
				strcpy_s(buf, buf_size, "TIRHUTA VOWEL SIGN AU");
				break;
			case 0x114BF:
				strcpy_s(buf, buf_size, "TIRHUTA SIGN CANDRABINDU");
				break;
			case 0x114C0:
				strcpy_s(buf, buf_size, "TIRHUTA SIGN ANUSVARA");
				break;
			case 0x114C1:
				strcpy_s(buf, buf_size, "TIRHUTA SIGN VISARGA");
				break;
			case 0x114C2:
				strcpy_s(buf, buf_size, "TIRHUTA SIGN VIRAMA");
				break;
			case 0x114C3:
				strcpy_s(buf, buf_size, "TIRHUTA SIGN NUKTA");
				break;
			case 0x114C4:
				strcpy_s(buf, buf_size, "TIRHUTA SIGN AVAGRAHA");
				break;
			case 0x114C5:
				strcpy_s(buf, buf_size, "TIRHUTA GVANG");
				break;
			case 0x114C6:
				strcpy_s(buf, buf_size, "TIRHUTA ABBREVIATION SIGN");
				break;
			case 0x114C7:
				strcpy_s(buf, buf_size, "TIRHUTA OM");
				break;
			case 0x114D0:
				strcpy_s(buf, buf_size, "TIRHUTA DIGIT ZERO");
				break;
			case 0x114D1:
				strcpy_s(buf, buf_size, "TIRHUTA DIGIT ONE");
				break;
			case 0x114D2:
				strcpy_s(buf, buf_size, "TIRHUTA DIGIT TWO");
				break;
			case 0x114D3:
				strcpy_s(buf, buf_size, "TIRHUTA DIGIT THREE");
				break;
			case 0x114D4:
				strcpy_s(buf, buf_size, "TIRHUTA DIGIT FOUR");
				break;
			case 0x114D5:
				strcpy_s(buf, buf_size, "TIRHUTA DIGIT FIVE");
				break;
			case 0x114D6:
				strcpy_s(buf, buf_size, "TIRHUTA DIGIT SIX");
				break;
			case 0x114D7:
				strcpy_s(buf, buf_size, "TIRHUTA DIGIT SEVEN");
				break;
			case 0x114D8:
				strcpy_s(buf, buf_size, "TIRHUTA DIGIT EIGHT");
				break;
			case 0x114D9:
				strcpy_s(buf, buf_size, "TIRHUTA DIGIT NINE");
				break;
			case 0x11580:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER A");
				break;
			case 0x11581:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER AA");
				break;
			case 0x11582:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER I");
				break;
			case 0x11583:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER II");
				break;
			case 0x11584:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER U");
				break;
			case 0x11585:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER UU");
				break;
			case 0x11586:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER VOCALIC R");
				break;
			case 0x11587:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER VOCALIC RR");
				break;
			case 0x11588:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER VOCALIC L");
				break;
			case 0x11589:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER VOCALIC LL");
				break;
			case 0x1158A:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER E");
				break;
			case 0x1158B:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER AI");
				break;
			case 0x1158C:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER O");
				break;
			case 0x1158D:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER AU");
				break;
			case 0x1158E:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER KA");
				break;
			case 0x1158F:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER KHA");
				break;
			case 0x11590:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER GA");
				break;
			case 0x11591:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER GHA");
				break;
			case 0x11592:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER NGA");
				break;
			case 0x11593:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER CA");
				break;
			case 0x11594:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER CHA");
				break;
			case 0x11595:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER JA");
				break;
			case 0x11596:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER JHA");
				break;
			case 0x11597:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER NYA");
				break;
			case 0x11598:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER TTA");
				break;
			case 0x11599:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER TTHA");
				break;
			case 0x1159A:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER DDA");
				break;
			case 0x1159B:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER DDHA");
				break;
			case 0x1159C:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER NNA");
				break;
			case 0x1159D:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER TA");
				break;
			case 0x1159E:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER THA");
				break;
			case 0x1159F:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER DA");
				break;
			case 0x115A0:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER DHA");
				break;
			case 0x115A1:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER NA");
				break;
			case 0x115A2:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER PA");
				break;
			case 0x115A3:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER PHA");
				break;
			case 0x115A4:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER BA");
				break;
			case 0x115A5:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER BHA");
				break;
			case 0x115A6:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER MA");
				break;
			case 0x115A7:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER YA");
				break;
			case 0x115A8:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER RA");
				break;
			case 0x115A9:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER LA");
				break;
			case 0x115AA:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER VA");
				break;
			case 0x115AB:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER SHA");
				break;
			case 0x115AC:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER SSA");
				break;
			case 0x115AD:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER SA");
				break;
			case 0x115AE:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER HA");
				break;
			case 0x115AF:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN AA");
				break;
			case 0x115B0:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN I");
				break;
			case 0x115B1:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN II");
				break;
			case 0x115B2:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN U");
				break;
			case 0x115B3:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN UU");
				break;
			case 0x115B4:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN VOCALIC R");
				break;
			case 0x115B5:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN VOCALIC RR");
				break;
			case 0x115B8:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN E");
				break;
			case 0x115B9:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN AI");
				break;
			case 0x115BA:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN O");
				break;
			case 0x115BB:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN AU");
				break;
			case 0x115BC:
				strcpy_s(buf, buf_size, "SIDDHAM SIGN CANDRABINDU");
				break;
			case 0x115BD:
				strcpy_s(buf, buf_size, "SIDDHAM SIGN ANUSVARA");
				break;
			case 0x115BE:
				strcpy_s(buf, buf_size, "SIDDHAM SIGN VISARGA");
				break;
			case 0x115BF:
				strcpy_s(buf, buf_size, "SIDDHAM SIGN VIRAMA");
				break;
			case 0x115C0:
				strcpy_s(buf, buf_size, "SIDDHAM SIGN NUKTA");
				break;
			case 0x115C1:
				strcpy_s(buf, buf_size, "SIDDHAM SIGN SIDDHAM");
				break;
			case 0x115C2:
				strcpy_s(buf, buf_size, "SIDDHAM DANDA");
				break;
			case 0x115C3:
				strcpy_s(buf, buf_size, "SIDDHAM DOUBLE DANDA");
				break;
			case 0x115C4:
				strcpy_s(buf, buf_size, "SIDDHAM SEPARATOR DOT");
				break;
			case 0x115C5:
				strcpy_s(buf, buf_size, "SIDDHAM SEPARATOR BAR");
				break;
			case 0x115C6:
				strcpy_s(buf, buf_size, "SIDDHAM REPETITION MARK-1");
				break;
			case 0x115C7:
				strcpy_s(buf, buf_size, "SIDDHAM REPETITION MARK-2");
				break;
			case 0x115C8:
				strcpy_s(buf, buf_size, "SIDDHAM REPETITION MARK-3");
				break;
			case 0x115C9:
				strcpy_s(buf, buf_size, "SIDDHAM END OF TEXT MARK");
				break;
			case 0x115CA:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH TRIDENT AND U-SHAPED ORNAMENTS");
				break;
			case 0x115CB:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH TRIDENT AND DOTTED CRESCENTS");
				break;
			case 0x115CC:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH RAYS AND DOTTED CRESCENTS");
				break;
			case 0x115CD:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH RAYS AND DOTTED DOUBLE CRESCENTS");
				break;
			case 0x115CE:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH RAYS AND DOTTED TRIPLE CRESCENTS");
				break;
			case 0x115CF:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK DOUBLE RING");
				break;
			case 0x115D0:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK DOUBLE RING WITH RAYS");
				break;
			case 0x115D1:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH DOUBLE CRESCENTS");
				break;
			case 0x115D2:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH TRIPLE CRESCENTS");
				break;
			case 0x115D3:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH QUADRUPLE CRESCENTS");
				break;
			case 0x115D4:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH SEPTUPLE CRESCENTS");
				break;
			case 0x115D5:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH CIRCLES AND RAYS");
				break;
			case 0x115D6:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH CIRCLES AND TWO ENCLOSURES");
				break;
			case 0x115D7:
				strcpy_s(buf, buf_size, "SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES");
				break;
			case 0x115D8:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER THREE-CIRCLE ALTERNATE I");
				break;
			case 0x115D9:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER TWO-CIRCLE ALTERNATE I");
				break;
			case 0x115DA:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER TWO-CIRCLE ALTERNATE II");
				break;
			case 0x115DB:
				strcpy_s(buf, buf_size, "SIDDHAM LETTER ALTERNATE U");
				break;
			case 0x115DC:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN ALTERNATE U");
				break;
			case 0x115DD:
				strcpy_s(buf, buf_size, "SIDDHAM VOWEL SIGN ALTERNATE UU");
				break;
			case 0x11600:
				strcpy_s(buf, buf_size, "MODI LETTER A");
				break;
			case 0x11601:
				strcpy_s(buf, buf_size, "MODI LETTER AA");
				break;
			case 0x11602:
				strcpy_s(buf, buf_size, "MODI LETTER I");
				break;
			case 0x11603:
				strcpy_s(buf, buf_size, "MODI LETTER II");
				break;
			case 0x11604:
				strcpy_s(buf, buf_size, "MODI LETTER U");
				break;
			case 0x11605:
				strcpy_s(buf, buf_size, "MODI LETTER UU");
				break;
			case 0x11606:
				strcpy_s(buf, buf_size, "MODI LETTER VOCALIC R");
				break;
			case 0x11607:
				strcpy_s(buf, buf_size, "MODI LETTER VOCALIC RR");
				break;
			case 0x11608:
				strcpy_s(buf, buf_size, "MODI LETTER VOCALIC L");
				break;
			case 0x11609:
				strcpy_s(buf, buf_size, "MODI LETTER VOCALIC LL");
				break;
			case 0x1160A:
				strcpy_s(buf, buf_size, "MODI LETTER E");
				break;
			case 0x1160B:
				strcpy_s(buf, buf_size, "MODI LETTER AI");
				break;
			case 0x1160C:
				strcpy_s(buf, buf_size, "MODI LETTER O");
				break;
			case 0x1160D:
				strcpy_s(buf, buf_size, "MODI LETTER AU");
				break;
			case 0x1160E:
				strcpy_s(buf, buf_size, "MODI LETTER KA");
				break;
			case 0x1160F:
				strcpy_s(buf, buf_size, "MODI LETTER KHA");
				break;
			case 0x11610:
				strcpy_s(buf, buf_size, "MODI LETTER GA");
				break;
			case 0x11611:
				strcpy_s(buf, buf_size, "MODI LETTER GHA");
				break;
			case 0x11612:
				strcpy_s(buf, buf_size, "MODI LETTER NGA");
				break;
			case 0x11613:
				strcpy_s(buf, buf_size, "MODI LETTER CA");
				break;
			case 0x11614:
				strcpy_s(buf, buf_size, "MODI LETTER CHA");
				break;
			case 0x11615:
				strcpy_s(buf, buf_size, "MODI LETTER JA");
				break;
			case 0x11616:
				strcpy_s(buf, buf_size, "MODI LETTER JHA");
				break;
			case 0x11617:
				strcpy_s(buf, buf_size, "MODI LETTER NYA");
				break;
			case 0x11618:
				strcpy_s(buf, buf_size, "MODI LETTER TTA");
				break;
			case 0x11619:
				strcpy_s(buf, buf_size, "MODI LETTER TTHA");
				break;
			case 0x1161A:
				strcpy_s(buf, buf_size, "MODI LETTER DDA");
				break;
			case 0x1161B:
				strcpy_s(buf, buf_size, "MODI LETTER DDHA");
				break;
			case 0x1161C:
				strcpy_s(buf, buf_size, "MODI LETTER NNA");
				break;
			case 0x1161D:
				strcpy_s(buf, buf_size, "MODI LETTER TA");
				break;
			case 0x1161E:
				strcpy_s(buf, buf_size, "MODI LETTER THA");
				break;
			case 0x1161F:
				strcpy_s(buf, buf_size, "MODI LETTER DA");
				break;
			case 0x11620:
				strcpy_s(buf, buf_size, "MODI LETTER DHA");
				break;
			case 0x11621:
				strcpy_s(buf, buf_size, "MODI LETTER NA");
				break;
			case 0x11622:
				strcpy_s(buf, buf_size, "MODI LETTER PA");
				break;
			case 0x11623:
				strcpy_s(buf, buf_size, "MODI LETTER PHA");
				break;
			case 0x11624:
				strcpy_s(buf, buf_size, "MODI LETTER BA");
				break;
			case 0x11625:
				strcpy_s(buf, buf_size, "MODI LETTER BHA");
				break;
			case 0x11626:
				strcpy_s(buf, buf_size, "MODI LETTER MA");
				break;
			case 0x11627:
				strcpy_s(buf, buf_size, "MODI LETTER YA");
				break;
			case 0x11628:
				strcpy_s(buf, buf_size, "MODI LETTER RA");
				break;
			case 0x11629:
				strcpy_s(buf, buf_size, "MODI LETTER LA");
				break;
			case 0x1162A:
				strcpy_s(buf, buf_size, "MODI LETTER VA");
				break;
			case 0x1162B:
				strcpy_s(buf, buf_size, "MODI LETTER SHA");
				break;
			case 0x1162C:
				strcpy_s(buf, buf_size, "MODI LETTER SSA");
				break;
			case 0x1162D:
				strcpy_s(buf, buf_size, "MODI LETTER SA");
				break;
			case 0x1162E:
				strcpy_s(buf, buf_size, "MODI LETTER HA");
				break;
			case 0x1162F:
				strcpy_s(buf, buf_size, "MODI LETTER LLA");
				break;
			case 0x11630:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN AA");
				break;
			case 0x11631:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN I");
				break;
			case 0x11632:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN II");
				break;
			case 0x11633:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN U");
				break;
			case 0x11634:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN UU");
				break;
			case 0x11635:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN VOCALIC R");
				break;
			case 0x11636:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN VOCALIC RR");
				break;
			case 0x11637:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN VOCALIC L");
				break;
			case 0x11638:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN VOCALIC LL");
				break;
			case 0x11639:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN E");
				break;
			case 0x1163A:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN AI");
				break;
			case 0x1163B:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN O");
				break;
			case 0x1163C:
				strcpy_s(buf, buf_size, "MODI VOWEL SIGN AU");
				break;
			case 0x1163D:
				strcpy_s(buf, buf_size, "MODI SIGN ANUSVARA");
				break;
			case 0x1163E:
				strcpy_s(buf, buf_size, "MODI SIGN VISARGA");
				break;
			case 0x1163F:
				strcpy_s(buf, buf_size, "MODI SIGN VIRAMA");
				break;
			case 0x11640:
				strcpy_s(buf, buf_size, "MODI SIGN ARDHACANDRA");
				break;
			case 0x11641:
				strcpy_s(buf, buf_size, "MODI DANDA");
				break;
			case 0x11642:
				strcpy_s(buf, buf_size, "MODI DOUBLE DANDA");
				break;
			case 0x11643:
				strcpy_s(buf, buf_size, "MODI ABBREVIATION SIGN");
				break;
			case 0x11644:
				strcpy_s(buf, buf_size, "MODI SIGN HUVA");
				break;
			case 0x11650:
				strcpy_s(buf, buf_size, "MODI DIGIT ZERO");
				break;
			case 0x11651:
				strcpy_s(buf, buf_size, "MODI DIGIT ONE");
				break;
			case 0x11652:
				strcpy_s(buf, buf_size, "MODI DIGIT TWO");
				break;
			case 0x11653:
				strcpy_s(buf, buf_size, "MODI DIGIT THREE");
				break;
			case 0x11654:
				strcpy_s(buf, buf_size, "MODI DIGIT FOUR");
				break;
			case 0x11655:
				strcpy_s(buf, buf_size, "MODI DIGIT FIVE");
				break;
			case 0x11656:
				strcpy_s(buf, buf_size, "MODI DIGIT SIX");
				break;
			case 0x11657:
				strcpy_s(buf, buf_size, "MODI DIGIT SEVEN");
				break;
			case 0x11658:
				strcpy_s(buf, buf_size, "MODI DIGIT EIGHT");
				break;
			case 0x11659:
				strcpy_s(buf, buf_size, "MODI DIGIT NINE");
				break;
			case 0x11660:
				strcpy_s(buf, buf_size, "MONGOLIAN BIRGA WITH ORNAMENT");
				break;
			case 0x11661:
				strcpy_s(buf, buf_size, "MONGOLIAN ROTATED BIRGA");
				break;
			case 0x11662:
				strcpy_s(buf, buf_size, "MONGOLIAN DOUBLE BIRGA WITH ORNAMENT");
				break;
			case 0x11663:
				strcpy_s(buf, buf_size, "MONGOLIAN TRIPLE BIRGA WITH ORNAMENT");
				break;
			case 0x11664:
				strcpy_s(buf, buf_size, "MONGOLIAN BIRGA WITH DOUBLE ORNAMENT");
				break;
			case 0x11665:
				strcpy_s(buf, buf_size, "MONGOLIAN ROTATED BIRGA WITH ORNAMENT");
				break;
			case 0x11666:
				strcpy_s(buf, buf_size, "MONGOLIAN ROTATED BIRGA WITH DOUBLE ORNAMENT");
				break;
			case 0x11667:
				strcpy_s(buf, buf_size, "MONGOLIAN INVERTED BIRGA");
				break;
			case 0x11668:
				strcpy_s(buf, buf_size, "MONGOLIAN INVERTED BIRGA WITH DOUBLE ORNAMENT");
				break;
			case 0x11669:
				strcpy_s(buf, buf_size, "MONGOLIAN SWIRL BIRGA");
				break;
			case 0x1166A:
				strcpy_s(buf, buf_size, "MONGOLIAN SWIRL BIRGA WITH ORNAMENT");
				break;
			case 0x1166B:
				strcpy_s(buf, buf_size, "MONGOLIAN SWIRL BIRGA WITH DOUBLE ORNAMENT");
				break;
			case 0x1166C:
				strcpy_s(buf, buf_size, "MONGOLIAN TURNED SWIRL BIRGA WITH DOUBLE ORNAMENT");
				break;
			case 0x11680:
				strcpy_s(buf, buf_size, "TAKRI LETTER A");
				break;
			case 0x11681:
				strcpy_s(buf, buf_size, "TAKRI LETTER AA");
				break;
			case 0x11682:
				strcpy_s(buf, buf_size, "TAKRI LETTER I");
				break;
			case 0x11683:
				strcpy_s(buf, buf_size, "TAKRI LETTER II");
				break;
			case 0x11684:
				strcpy_s(buf, buf_size, "TAKRI LETTER U");
				break;
			case 0x11685:
				strcpy_s(buf, buf_size, "TAKRI LETTER UU");
				break;
			case 0x11686:
				strcpy_s(buf, buf_size, "TAKRI LETTER E");
				break;
			case 0x11687:
				strcpy_s(buf, buf_size, "TAKRI LETTER AI");
				break;
			case 0x11688:
				strcpy_s(buf, buf_size, "TAKRI LETTER O");
				break;
			case 0x11689:
				strcpy_s(buf, buf_size, "TAKRI LETTER AU");
				break;
			case 0x1168A:
				strcpy_s(buf, buf_size, "TAKRI LETTER KA");
				break;
			case 0x1168B:
				strcpy_s(buf, buf_size, "TAKRI LETTER KHA");
				break;
			case 0x1168C:
				strcpy_s(buf, buf_size, "TAKRI LETTER GA");
				break;
			case 0x1168D:
				strcpy_s(buf, buf_size, "TAKRI LETTER GHA");
				break;
			case 0x1168E:
				strcpy_s(buf, buf_size, "TAKRI LETTER NGA");
				break;
			case 0x1168F:
				strcpy_s(buf, buf_size, "TAKRI LETTER CA");
				break;
			case 0x11690:
				strcpy_s(buf, buf_size, "TAKRI LETTER CHA");
				break;
			case 0x11691:
				strcpy_s(buf, buf_size, "TAKRI LETTER JA");
				break;
			case 0x11692:
				strcpy_s(buf, buf_size, "TAKRI LETTER JHA");
				break;
			case 0x11693:
				strcpy_s(buf, buf_size, "TAKRI LETTER NYA");
				break;
			case 0x11694:
				strcpy_s(buf, buf_size, "TAKRI LETTER TTA");
				break;
			case 0x11695:
				strcpy_s(buf, buf_size, "TAKRI LETTER TTHA");
				break;
			case 0x11696:
				strcpy_s(buf, buf_size, "TAKRI LETTER DDA");
				break;
			case 0x11697:
				strcpy_s(buf, buf_size, "TAKRI LETTER DDHA");
				break;
			case 0x11698:
				strcpy_s(buf, buf_size, "TAKRI LETTER NNA");
				break;
			case 0x11699:
				strcpy_s(buf, buf_size, "TAKRI LETTER TA");
				break;
			case 0x1169A:
				strcpy_s(buf, buf_size, "TAKRI LETTER THA");
				break;
			case 0x1169B:
				strcpy_s(buf, buf_size, "TAKRI LETTER DA");
				break;
			case 0x1169C:
				strcpy_s(buf, buf_size, "TAKRI LETTER DHA");
				break;
			case 0x1169D:
				strcpy_s(buf, buf_size, "TAKRI LETTER NA");
				break;
			case 0x1169E:
				strcpy_s(buf, buf_size, "TAKRI LETTER PA");
				break;
			case 0x1169F:
				strcpy_s(buf, buf_size, "TAKRI LETTER PHA");
				break;
			case 0x116A0:
				strcpy_s(buf, buf_size, "TAKRI LETTER BA");
				break;
			case 0x116A1:
				strcpy_s(buf, buf_size, "TAKRI LETTER BHA");
				break;
			case 0x116A2:
				strcpy_s(buf, buf_size, "TAKRI LETTER MA");
				break;
			case 0x116A3:
				strcpy_s(buf, buf_size, "TAKRI LETTER YA");
				break;
			case 0x116A4:
				strcpy_s(buf, buf_size, "TAKRI LETTER RA");
				break;
			case 0x116A5:
				strcpy_s(buf, buf_size, "TAKRI LETTER LA");
				break;
			case 0x116A6:
				strcpy_s(buf, buf_size, "TAKRI LETTER VA");
				break;
			case 0x116A7:
				strcpy_s(buf, buf_size, "TAKRI LETTER SHA");
				break;
			case 0x116A8:
				strcpy_s(buf, buf_size, "TAKRI LETTER SA");
				break;
			case 0x116A9:
				strcpy_s(buf, buf_size, "TAKRI LETTER HA");
				break;
			case 0x116AA:
				strcpy_s(buf, buf_size, "TAKRI LETTER RRA");
				break;
			case 0x116AB:
				strcpy_s(buf, buf_size, "TAKRI SIGN ANUSVARA");
				break;
			case 0x116AC:
				strcpy_s(buf, buf_size, "TAKRI SIGN VISARGA");
				break;
			case 0x116AD:
				strcpy_s(buf, buf_size, "TAKRI VOWEL SIGN AA");
				break;
			case 0x116AE:
				strcpy_s(buf, buf_size, "TAKRI VOWEL SIGN I");
				break;
			case 0x116AF:
				strcpy_s(buf, buf_size, "TAKRI VOWEL SIGN II");
				break;
			case 0x116B0:
				strcpy_s(buf, buf_size, "TAKRI VOWEL SIGN U");
				break;
			case 0x116B1:
				strcpy_s(buf, buf_size, "TAKRI VOWEL SIGN UU");
				break;
			case 0x116B2:
				strcpy_s(buf, buf_size, "TAKRI VOWEL SIGN E");
				break;
			case 0x116B3:
				strcpy_s(buf, buf_size, "TAKRI VOWEL SIGN AI");
				break;
			case 0x116B4:
				strcpy_s(buf, buf_size, "TAKRI VOWEL SIGN O");
				break;
			case 0x116B5:
				strcpy_s(buf, buf_size, "TAKRI VOWEL SIGN AU");
				break;
			case 0x116B6:
				strcpy_s(buf, buf_size, "TAKRI SIGN VIRAMA");
				break;
			case 0x116B7:
				strcpy_s(buf, buf_size, "TAKRI SIGN NUKTA");
				break;
			case 0x116B8:
				strcpy_s(buf, buf_size, "TAKRI LETTER ARCHAIC KHA");
				break;
			case 0x116C0:
				strcpy_s(buf, buf_size, "TAKRI DIGIT ZERO");
				break;
			case 0x116C1:
				strcpy_s(buf, buf_size, "TAKRI DIGIT ONE");
				break;
			case 0x116C2:
				strcpy_s(buf, buf_size, "TAKRI DIGIT TWO");
				break;
			case 0x116C3:
				strcpy_s(buf, buf_size, "TAKRI DIGIT THREE");
				break;
			case 0x116C4:
				strcpy_s(buf, buf_size, "TAKRI DIGIT FOUR");
				break;
			case 0x116C5:
				strcpy_s(buf, buf_size, "TAKRI DIGIT FIVE");
				break;
			case 0x116C6:
				strcpy_s(buf, buf_size, "TAKRI DIGIT SIX");
				break;
			case 0x116C7:
				strcpy_s(buf, buf_size, "TAKRI DIGIT SEVEN");
				break;
			case 0x116C8:
				strcpy_s(buf, buf_size, "TAKRI DIGIT EIGHT");
				break;
			case 0x116C9:
				strcpy_s(buf, buf_size, "TAKRI DIGIT NINE");
				break;
			case 0x11700:
				strcpy_s(buf, buf_size, "AHOM LETTER KA");
				break;
			case 0x11701:
				strcpy_s(buf, buf_size, "AHOM LETTER KHA");
				break;
			case 0x11702:
				strcpy_s(buf, buf_size, "AHOM LETTER NGA");
				break;
			case 0x11703:
				strcpy_s(buf, buf_size, "AHOM LETTER NA");
				break;
			case 0x11704:
				strcpy_s(buf, buf_size, "AHOM LETTER TA");
				break;
			case 0x11705:
				strcpy_s(buf, buf_size, "AHOM LETTER ALTERNATE TA");
				break;
			case 0x11706:
				strcpy_s(buf, buf_size, "AHOM LETTER PA");
				break;
			case 0x11707:
				strcpy_s(buf, buf_size, "AHOM LETTER PHA");
				break;
			case 0x11708:
				strcpy_s(buf, buf_size, "AHOM LETTER BA");
				break;
			case 0x11709:
				strcpy_s(buf, buf_size, "AHOM LETTER MA");
				break;
			case 0x1170A:
				strcpy_s(buf, buf_size, "AHOM LETTER JA");
				break;
			case 0x1170B:
				strcpy_s(buf, buf_size, "AHOM LETTER CHA");
				break;
			case 0x1170C:
				strcpy_s(buf, buf_size, "AHOM LETTER THA");
				break;
			case 0x1170D:
				strcpy_s(buf, buf_size, "AHOM LETTER RA");
				break;
			case 0x1170E:
				strcpy_s(buf, buf_size, "AHOM LETTER LA");
				break;
			case 0x1170F:
				strcpy_s(buf, buf_size, "AHOM LETTER SA");
				break;
			case 0x11710:
				strcpy_s(buf, buf_size, "AHOM LETTER NYA");
				break;
			case 0x11711:
				strcpy_s(buf, buf_size, "AHOM LETTER HA");
				break;
			case 0x11712:
				strcpy_s(buf, buf_size, "AHOM LETTER A");
				break;
			case 0x11713:
				strcpy_s(buf, buf_size, "AHOM LETTER DA");
				break;
			case 0x11714:
				strcpy_s(buf, buf_size, "AHOM LETTER DHA");
				break;
			case 0x11715:
				strcpy_s(buf, buf_size, "AHOM LETTER GA");
				break;
			case 0x11716:
				strcpy_s(buf, buf_size, "AHOM LETTER ALTERNATE GA");
				break;
			case 0x11717:
				strcpy_s(buf, buf_size, "AHOM LETTER GHA");
				break;
			case 0x11718:
				strcpy_s(buf, buf_size, "AHOM LETTER BHA");
				break;
			case 0x11719:
				strcpy_s(buf, buf_size, "AHOM LETTER JHA");
				break;
			case 0x1171A:
				strcpy_s(buf, buf_size, "AHOM LETTER ALTERNATE BA");
				break;
			case 0x1171D:
				strcpy_s(buf, buf_size, "AHOM CONSONANT SIGN MEDIAL LA");
				break;
			case 0x1171E:
				strcpy_s(buf, buf_size, "AHOM CONSONANT SIGN MEDIAL RA");
				break;
			case 0x1171F:
				strcpy_s(buf, buf_size, "AHOM CONSONANT SIGN MEDIAL LIGATING RA");
				break;
			case 0x11720:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN A");
				break;
			case 0x11721:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN AA");
				break;
			case 0x11722:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN I");
				break;
			case 0x11723:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN II");
				break;
			case 0x11724:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN U");
				break;
			case 0x11725:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN UU");
				break;
			case 0x11726:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN E");
				break;
			case 0x11727:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN AW");
				break;
			case 0x11728:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN O");
				break;
			case 0x11729:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN AI");
				break;
			case 0x1172A:
				strcpy_s(buf, buf_size, "AHOM VOWEL SIGN AM");
				break;
			case 0x1172B:
				strcpy_s(buf, buf_size, "AHOM SIGN KILLER");
				break;
			case 0x11730:
				strcpy_s(buf, buf_size, "AHOM DIGIT ZERO");
				break;
			case 0x11731:
				strcpy_s(buf, buf_size, "AHOM DIGIT ONE");
				break;
			case 0x11732:
				strcpy_s(buf, buf_size, "AHOM DIGIT TWO");
				break;
			case 0x11733:
				strcpy_s(buf, buf_size, "AHOM DIGIT THREE");
				break;
			case 0x11734:
				strcpy_s(buf, buf_size, "AHOM DIGIT FOUR");
				break;
			case 0x11735:
				strcpy_s(buf, buf_size, "AHOM DIGIT FIVE");
				break;
			case 0x11736:
				strcpy_s(buf, buf_size, "AHOM DIGIT SIX");
				break;
			case 0x11737:
				strcpy_s(buf, buf_size, "AHOM DIGIT SEVEN");
				break;
			case 0x11738:
				strcpy_s(buf, buf_size, "AHOM DIGIT EIGHT");
				break;
			case 0x11739:
				strcpy_s(buf, buf_size, "AHOM DIGIT NINE");
				break;
			case 0x1173A:
				strcpy_s(buf, buf_size, "AHOM NUMBER TEN");
				break;
			case 0x1173B:
				strcpy_s(buf, buf_size, "AHOM NUMBER TWENTY");
				break;
			case 0x1173C:
				strcpy_s(buf, buf_size, "AHOM SIGN SMALL SECTION");
				break;
			case 0x1173D:
				strcpy_s(buf, buf_size, "AHOM SIGN SECTION");
				break;
			case 0x1173E:
				strcpy_s(buf, buf_size, "AHOM SIGN RULAI");
				break;
			case 0x1173F:
				strcpy_s(buf, buf_size, "AHOM SYMBOL VI");
				break;
			case 0x11800:
				strcpy_s(buf, buf_size, "DOGRA LETTER A");
				break;
			case 0x11801:
				strcpy_s(buf, buf_size, "DOGRA LETTER AA");
				break;
			case 0x11802:
				strcpy_s(buf, buf_size, "DOGRA LETTER I");
				break;
			case 0x11803:
				strcpy_s(buf, buf_size, "DOGRA LETTER II");
				break;
			case 0x11804:
				strcpy_s(buf, buf_size, "DOGRA LETTER U");
				break;
			case 0x11805:
				strcpy_s(buf, buf_size, "DOGRA LETTER UU");
				break;
			case 0x11806:
				strcpy_s(buf, buf_size, "DOGRA LETTER E");
				break;
			case 0x11807:
				strcpy_s(buf, buf_size, "DOGRA LETTER AI");
				break;
			case 0x11808:
				strcpy_s(buf, buf_size, "DOGRA LETTER O");
				break;
			case 0x11809:
				strcpy_s(buf, buf_size, "DOGRA LETTER AU");
				break;
			case 0x1180A:
				strcpy_s(buf, buf_size, "DOGRA LETTER KA");
				break;
			case 0x1180B:
				strcpy_s(buf, buf_size, "DOGRA LETTER KHA");
				break;
			case 0x1180C:
				strcpy_s(buf, buf_size, "DOGRA LETTER GA");
				break;
			case 0x1180D:
				strcpy_s(buf, buf_size, "DOGRA LETTER GHA");
				break;
			case 0x1180E:
				strcpy_s(buf, buf_size, "DOGRA LETTER NGA");
				break;
			case 0x1180F:
				strcpy_s(buf, buf_size, "DOGRA LETTER CA");
				break;
			case 0x11810:
				strcpy_s(buf, buf_size, "DOGRA LETTER CHA");
				break;
			case 0x11811:
				strcpy_s(buf, buf_size, "DOGRA LETTER JA");
				break;
			case 0x11812:
				strcpy_s(buf, buf_size, "DOGRA LETTER JHA");
				break;
			case 0x11813:
				strcpy_s(buf, buf_size, "DOGRA LETTER NYA");
				break;
			case 0x11814:
				strcpy_s(buf, buf_size, "DOGRA LETTER TTA");
				break;
			case 0x11815:
				strcpy_s(buf, buf_size, "DOGRA LETTER TTHA");
				break;
			case 0x11816:
				strcpy_s(buf, buf_size, "DOGRA LETTER DDA");
				break;
			case 0x11817:
				strcpy_s(buf, buf_size, "DOGRA LETTER DDHA");
				break;
			case 0x11818:
				strcpy_s(buf, buf_size, "DOGRA LETTER NNA");
				break;
			case 0x11819:
				strcpy_s(buf, buf_size, "DOGRA LETTER TA");
				break;
			case 0x1181A:
				strcpy_s(buf, buf_size, "DOGRA LETTER THA");
				break;
			case 0x1181B:
				strcpy_s(buf, buf_size, "DOGRA LETTER DA");
				break;
			case 0x1181C:
				strcpy_s(buf, buf_size, "DOGRA LETTER DHA");
				break;
			case 0x1181D:
				strcpy_s(buf, buf_size, "DOGRA LETTER NA");
				break;
			case 0x1181E:
				strcpy_s(buf, buf_size, "DOGRA LETTER PA");
				break;
			case 0x1181F:
				strcpy_s(buf, buf_size, "DOGRA LETTER PHA");
				break;
			case 0x11820:
				strcpy_s(buf, buf_size, "DOGRA LETTER BA");
				break;
			case 0x11821:
				strcpy_s(buf, buf_size, "DOGRA LETTER BHA");
				break;
			case 0x11822:
				strcpy_s(buf, buf_size, "DOGRA LETTER MA");
				break;
			case 0x11823:
				strcpy_s(buf, buf_size, "DOGRA LETTER YA");
				break;
			case 0x11824:
				strcpy_s(buf, buf_size, "DOGRA LETTER RA");
				break;
			case 0x11825:
				strcpy_s(buf, buf_size, "DOGRA LETTER LA");
				break;
			case 0x11826:
				strcpy_s(buf, buf_size, "DOGRA LETTER VA");
				break;
			case 0x11827:
				strcpy_s(buf, buf_size, "DOGRA LETTER SHA");
				break;
			case 0x11828:
				strcpy_s(buf, buf_size, "DOGRA LETTER SSA");
				break;
			case 0x11829:
				strcpy_s(buf, buf_size, "DOGRA LETTER SA");
				break;
			case 0x1182A:
				strcpy_s(buf, buf_size, "DOGRA LETTER HA");
				break;
			case 0x1182B:
				strcpy_s(buf, buf_size, "DOGRA LETTER RRA");
				break;
			case 0x1182C:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN AA");
				break;
			case 0x1182D:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN I");
				break;
			case 0x1182E:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN II");
				break;
			case 0x1182F:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN U");
				break;
			case 0x11830:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN UU");
				break;
			case 0x11831:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN VOCALIC R");
				break;
			case 0x11832:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN VOCALIC RR");
				break;
			case 0x11833:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN E");
				break;
			case 0x11834:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN AI");
				break;
			case 0x11835:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN O");
				break;
			case 0x11836:
				strcpy_s(buf, buf_size, "DOGRA VOWEL SIGN AU");
				break;
			case 0x11837:
				strcpy_s(buf, buf_size, "DOGRA SIGN ANUSVARA");
				break;
			case 0x11838:
				strcpy_s(buf, buf_size, "DOGRA SIGN VISARGA");
				break;
			case 0x11839:
				strcpy_s(buf, buf_size, "DOGRA SIGN VIRAMA");
				break;
			case 0x1183A:
				strcpy_s(buf, buf_size, "DOGRA SIGN NUKTA");
				break;
			case 0x1183B:
				strcpy_s(buf, buf_size, "DOGRA ABBREVIATION SIGN");
				break;
			case 0x118A0:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER NGAA");
				break;
			case 0x118A1:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER A");
				break;
			case 0x118A2:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER WI");
				break;
			case 0x118A3:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER YU");
				break;
			case 0x118A4:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER YA");
				break;
			case 0x118A5:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER YO");
				break;
			case 0x118A6:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER II");
				break;
			case 0x118A7:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER UU");
				break;
			case 0x118A8:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER E");
				break;
			case 0x118A9:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER O");
				break;
			case 0x118AA:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER ANG");
				break;
			case 0x118AB:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER GA");
				break;
			case 0x118AC:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER KO");
				break;
			case 0x118AD:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER ENY");
				break;
			case 0x118AE:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER YUJ");
				break;
			case 0x118AF:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER UC");
				break;
			case 0x118B0:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER ENN");
				break;
			case 0x118B1:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER ODD");
				break;
			case 0x118B2:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER TTE");
				break;
			case 0x118B3:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER NUNG");
				break;
			case 0x118B4:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER DA");
				break;
			case 0x118B5:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER AT");
				break;
			case 0x118B6:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER AM");
				break;
			case 0x118B7:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER BU");
				break;
			case 0x118B8:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER PU");
				break;
			case 0x118B9:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER HIYO");
				break;
			case 0x118BA:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER HOLO");
				break;
			case 0x118BB:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER HORR");
				break;
			case 0x118BC:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER HAR");
				break;
			case 0x118BD:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER SSUU");
				break;
			case 0x118BE:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER SII");
				break;
			case 0x118BF:
				strcpy_s(buf, buf_size, "WARANG CITI CAPITAL LETTER VIYO");
				break;
			case 0x118C0:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER NGAA");
				break;
			case 0x118C1:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER A");
				break;
			case 0x118C2:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER WI");
				break;
			case 0x118C3:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER YU");
				break;
			case 0x118C4:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER YA");
				break;
			case 0x118C5:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER YO");
				break;
			case 0x118C6:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER II");
				break;
			case 0x118C7:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER UU");
				break;
			case 0x118C8:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER E");
				break;
			case 0x118C9:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER O");
				break;
			case 0x118CA:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER ANG");
				break;
			case 0x118CB:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER GA");
				break;
			case 0x118CC:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER KO");
				break;
			case 0x118CD:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER ENY");
				break;
			case 0x118CE:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER YUJ");
				break;
			case 0x118CF:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER UC");
				break;
			case 0x118D0:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER ENN");
				break;
			case 0x118D1:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER ODD");
				break;
			case 0x118D2:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER TTE");
				break;
			case 0x118D3:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER NUNG");
				break;
			case 0x118D4:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER DA");
				break;
			case 0x118D5:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER AT");
				break;
			case 0x118D6:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER AM");
				break;
			case 0x118D7:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER BU");
				break;
			case 0x118D8:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER PU");
				break;
			case 0x118D9:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER HIYO");
				break;
			case 0x118DA:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER HOLO");
				break;
			case 0x118DB:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER HORR");
				break;
			case 0x118DC:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER HAR");
				break;
			case 0x118DD:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER SSUU");
				break;
			case 0x118DE:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER SII");
				break;
			case 0x118DF:
				strcpy_s(buf, buf_size, "WARANG CITI SMALL LETTER VIYO");
				break;
			case 0x118E0:
				strcpy_s(buf, buf_size, "WARANG CITI DIGIT ZERO");
				break;
			case 0x118E1:
				strcpy_s(buf, buf_size, "WARANG CITI DIGIT ONE");
				break;
			case 0x118E2:
				strcpy_s(buf, buf_size, "WARANG CITI DIGIT TWO");
				break;
			case 0x118E3:
				strcpy_s(buf, buf_size, "WARANG CITI DIGIT THREE");
				break;
			case 0x118E4:
				strcpy_s(buf, buf_size, "WARANG CITI DIGIT FOUR");
				break;
			case 0x118E5:
				strcpy_s(buf, buf_size, "WARANG CITI DIGIT FIVE");
				break;
			case 0x118E6:
				strcpy_s(buf, buf_size, "WARANG CITI DIGIT SIX");
				break;
			case 0x118E7:
				strcpy_s(buf, buf_size, "WARANG CITI DIGIT SEVEN");
				break;
			case 0x118E8:
				strcpy_s(buf, buf_size, "WARANG CITI DIGIT EIGHT");
				break;
			case 0x118E9:
				strcpy_s(buf, buf_size, "WARANG CITI DIGIT NINE");
				break;
			case 0x118EA:
				strcpy_s(buf, buf_size, "WARANG CITI NUMBER TEN");
				break;
			case 0x118EB:
				strcpy_s(buf, buf_size, "WARANG CITI NUMBER TWENTY");
				break;
			case 0x118EC:
				strcpy_s(buf, buf_size, "WARANG CITI NUMBER THIRTY");
				break;
			case 0x118ED:
				strcpy_s(buf, buf_size, "WARANG CITI NUMBER FORTY");
				break;
			case 0x118EE:
				strcpy_s(buf, buf_size, "WARANG CITI NUMBER FIFTY");
				break;
			case 0x118EF:
				strcpy_s(buf, buf_size, "WARANG CITI NUMBER SIXTY");
				break;
			case 0x118F0:
				strcpy_s(buf, buf_size, "WARANG CITI NUMBER SEVENTY");
				break;
			case 0x118F1:
				strcpy_s(buf, buf_size, "WARANG CITI NUMBER EIGHTY");
				break;
			case 0x118F2:
				strcpy_s(buf, buf_size, "WARANG CITI NUMBER NINETY");
				break;
			case 0x118FF:
				strcpy_s(buf, buf_size, "WARANG CITI OM");
				break;
			case 0x11900:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER A");
				break;
			case 0x11901:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER AA");
				break;
			case 0x11902:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER I");
				break;
			case 0x11903:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER II");
				break;
			case 0x11904:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER U");
				break;
			case 0x11905:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER UU");
				break;
			case 0x11906:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER E");
				break;
			case 0x11909:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER O");
				break;
			case 0x1190C:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER KA");
				break;
			case 0x1190D:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER KHA");
				break;
			case 0x1190E:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER GA");
				break;
			case 0x1190F:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER GHA");
				break;
			case 0x11910:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER NGA");
				break;
			case 0x11911:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER CA");
				break;
			case 0x11912:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER CHA");
				break;
			case 0x11913:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER JA");
				break;
			case 0x11915:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER NYA");
				break;
			case 0x11916:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER TTA");
				break;
			case 0x11918:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER DDA");
				break;
			case 0x11919:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER DDHA");
				break;
			case 0x1191A:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER NNA");
				break;
			case 0x1191B:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER TA");
				break;
			case 0x1191C:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER THA");
				break;
			case 0x1191D:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER DA");
				break;
			case 0x1191E:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER DHA");
				break;
			case 0x1191F:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER NA");
				break;
			case 0x11920:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER PA");
				break;
			case 0x11921:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER PHA");
				break;
			case 0x11922:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER BA");
				break;
			case 0x11923:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER BHA");
				break;
			case 0x11924:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER MA");
				break;
			case 0x11925:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER YA");
				break;
			case 0x11926:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER YYA");
				break;
			case 0x11927:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER RA");
				break;
			case 0x11928:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER LA");
				break;
			case 0x11929:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER VA");
				break;
			case 0x1192A:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER SHA");
				break;
			case 0x1192B:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER SSA");
				break;
			case 0x1192C:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER SA");
				break;
			case 0x1192D:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER HA");
				break;
			case 0x1192E:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER LLA");
				break;
			case 0x1192F:
				strcpy_s(buf, buf_size, "DIVES AKURU LETTER ZA");
				break;
			case 0x11930:
				strcpy_s(buf, buf_size, "DIVES AKURU VOWEL SIGN AA");
				break;
			case 0x11931:
				strcpy_s(buf, buf_size, "DIVES AKURU VOWEL SIGN I");
				break;
			case 0x11932:
				strcpy_s(buf, buf_size, "DIVES AKURU VOWEL SIGN II");
				break;
			case 0x11933:
				strcpy_s(buf, buf_size, "DIVES AKURU VOWEL SIGN U");
				break;
			case 0x11934:
				strcpy_s(buf, buf_size, "DIVES AKURU VOWEL SIGN UU");
				break;
			case 0x11935:
				strcpy_s(buf, buf_size, "DIVES AKURU VOWEL SIGN E");
				break;
			case 0x11937:
				strcpy_s(buf, buf_size, "DIVES AKURU VOWEL SIGN AI");
				break;
			case 0x11938:
				strcpy_s(buf, buf_size, "DIVES AKURU VOWEL SIGN O");
				break;
			case 0x1193B:
				strcpy_s(buf, buf_size, "DIVES AKURU SIGN ANUSVARA");
				break;
			case 0x1193C:
				strcpy_s(buf, buf_size, "DIVES AKURU SIGN CANDRABINDU");
				break;
			case 0x1193D:
				strcpy_s(buf, buf_size, "DIVES AKURU SIGN HALANTA");
				break;
			case 0x1193E:
				strcpy_s(buf, buf_size, "DIVES AKURU VIRAMA");
				break;
			case 0x1193F:
				strcpy_s(buf, buf_size, "DIVES AKURU PREFIXED NASAL SIGN");
				break;
			case 0x11940:
				strcpy_s(buf, buf_size, "DIVES AKURU MEDIAL YA");
				break;
			case 0x11941:
				strcpy_s(buf, buf_size, "DIVES AKURU INITIAL RA");
				break;
			case 0x11942:
				strcpy_s(buf, buf_size, "DIVES AKURU MEDIAL RA");
				break;
			case 0x11943:
				strcpy_s(buf, buf_size, "DIVES AKURU SIGN NUKTA");
				break;
			case 0x11944:
				strcpy_s(buf, buf_size, "DIVES AKURU DOUBLE DANDA");
				break;
			case 0x11945:
				strcpy_s(buf, buf_size, "DIVES AKURU GAP FILLER");
				break;
			case 0x11946:
				strcpy_s(buf, buf_size, "DIVES AKURU END OF TEXT MARK");
				break;
			case 0x11950:
				strcpy_s(buf, buf_size, "DIVES AKURU DIGIT ZERO");
				break;
			case 0x11951:
				strcpy_s(buf, buf_size, "DIVES AKURU DIGIT ONE");
				break;
			case 0x11952:
				strcpy_s(buf, buf_size, "DIVES AKURU DIGIT TWO");
				break;
			case 0x11953:
				strcpy_s(buf, buf_size, "DIVES AKURU DIGIT THREE");
				break;
			case 0x11954:
				strcpy_s(buf, buf_size, "DIVES AKURU DIGIT FOUR");
				break;
			case 0x11955:
				strcpy_s(buf, buf_size, "DIVES AKURU DIGIT FIVE");
				break;
			case 0x11956:
				strcpy_s(buf, buf_size, "DIVES AKURU DIGIT SIX");
				break;
			case 0x11957:
				strcpy_s(buf, buf_size, "DIVES AKURU DIGIT SEVEN");
				break;
			case 0x11958:
				strcpy_s(buf, buf_size, "DIVES AKURU DIGIT EIGHT");
				break;
			case 0x11959:
				strcpy_s(buf, buf_size, "DIVES AKURU DIGIT NINE");
				break;
			case 0x119A0:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER A");
				break;
			case 0x119A1:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER AA");
				break;
			case 0x119A2:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER I");
				break;
			case 0x119A3:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER II");
				break;
			case 0x119A4:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER U");
				break;
			case 0x119A5:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER UU");
				break;
			case 0x119A6:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER VOCALIC R");
				break;
			case 0x119A7:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER VOCALIC RR");
				break;
			case 0x119AA:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER E");
				break;
			case 0x119AB:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER AI");
				break;
			case 0x119AC:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER O");
				break;
			case 0x119AD:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER AU");
				break;
			case 0x119AE:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER KA");
				break;
			case 0x119AF:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER KHA");
				break;
			case 0x119B0:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER GA");
				break;
			case 0x119B1:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER GHA");
				break;
			case 0x119B2:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER NGA");
				break;
			case 0x119B3:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER CA");
				break;
			case 0x119B4:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER CHA");
				break;
			case 0x119B5:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER JA");
				break;
			case 0x119B6:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER JHA");
				break;
			case 0x119B7:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER NYA");
				break;
			case 0x119B8:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER TTA");
				break;
			case 0x119B9:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER TTHA");
				break;
			case 0x119BA:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER DDA");
				break;
			case 0x119BB:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER DDHA");
				break;
			case 0x119BC:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER NNA");
				break;
			case 0x119BD:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER TA");
				break;
			case 0x119BE:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER THA");
				break;
			case 0x119BF:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER DA");
				break;
			case 0x119C0:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER DHA");
				break;
			case 0x119C1:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER NA");
				break;
			case 0x119C2:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER PA");
				break;
			case 0x119C3:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER PHA");
				break;
			case 0x119C4:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER BA");
				break;
			case 0x119C5:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER BHA");
				break;
			case 0x119C6:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER MA");
				break;
			case 0x119C7:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER YA");
				break;
			case 0x119C8:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER RA");
				break;
			case 0x119C9:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER LA");
				break;
			case 0x119CA:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER VA");
				break;
			case 0x119CB:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER SHA");
				break;
			case 0x119CC:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER SSA");
				break;
			case 0x119CD:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER SA");
				break;
			case 0x119CE:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER HA");
				break;
			case 0x119CF:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER LLA");
				break;
			case 0x119D0:
				strcpy_s(buf, buf_size, "NANDINAGARI LETTER RRA");
				break;
			case 0x119D1:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN AA");
				break;
			case 0x119D2:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN I");
				break;
			case 0x119D3:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN II");
				break;
			case 0x119D4:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN U");
				break;
			case 0x119D5:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN UU");
				break;
			case 0x119D6:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN VOCALIC R");
				break;
			case 0x119D7:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN VOCALIC RR");
				break;
			case 0x119DA:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN E");
				break;
			case 0x119DB:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN AI");
				break;
			case 0x119DC:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN O");
				break;
			case 0x119DD:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN AU");
				break;
			case 0x119DE:
				strcpy_s(buf, buf_size, "NANDINAGARI SIGN ANUSVARA");
				break;
			case 0x119DF:
				strcpy_s(buf, buf_size, "NANDINAGARI SIGN VISARGA");
				break;
			case 0x119E0:
				strcpy_s(buf, buf_size, "NANDINAGARI SIGN VIRAMA");
				break;
			case 0x119E1:
				strcpy_s(buf, buf_size, "NANDINAGARI SIGN AVAGRAHA");
				break;
			case 0x119E2:
				strcpy_s(buf, buf_size, "NANDINAGARI SIGN SIDDHAM");
				break;
			case 0x119E3:
				strcpy_s(buf, buf_size, "NANDINAGARI HEADSTROKE");
				break;
			case 0x119E4:
				strcpy_s(buf, buf_size, "NANDINAGARI VOWEL SIGN PRISHTHAMATRA E");
				break;
			case 0x11A00:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER A");
				break;
			case 0x11A01:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE VOWEL SIGN I");
				break;
			case 0x11A02:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE VOWEL SIGN UE");
				break;
			case 0x11A03:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE VOWEL SIGN U");
				break;
			case 0x11A04:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE VOWEL SIGN E");
				break;
			case 0x11A05:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE VOWEL SIGN OE");
				break;
			case 0x11A06:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE VOWEL SIGN O");
				break;
			case 0x11A07:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE VOWEL SIGN AI");
				break;
			case 0x11A08:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE VOWEL SIGN AU");
				break;
			case 0x11A09:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE VOWEL SIGN REVERSED I");
				break;
			case 0x11A0A:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE VOWEL LENGTH MARK");
				break;
			case 0x11A0B:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER KA");
				break;
			case 0x11A0C:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER KHA");
				break;
			case 0x11A0D:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER GA");
				break;
			case 0x11A0E:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER GHA");
				break;
			case 0x11A0F:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER NGA");
				break;
			case 0x11A10:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER CA");
				break;
			case 0x11A11:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER CHA");
				break;
			case 0x11A12:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER JA");
				break;
			case 0x11A13:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER NYA");
				break;
			case 0x11A14:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER TTA");
				break;
			case 0x11A15:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER TTHA");
				break;
			case 0x11A16:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER DDA");
				break;
			case 0x11A17:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER DDHA");
				break;
			case 0x11A18:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER NNA");
				break;
			case 0x11A19:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER TA");
				break;
			case 0x11A1A:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER THA");
				break;
			case 0x11A1B:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER DA");
				break;
			case 0x11A1C:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER DHA");
				break;
			case 0x11A1D:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER NA");
				break;
			case 0x11A1E:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER PA");
				break;
			case 0x11A1F:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER PHA");
				break;
			case 0x11A20:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER BA");
				break;
			case 0x11A21:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER BHA");
				break;
			case 0x11A22:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER MA");
				break;
			case 0x11A23:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER TSA");
				break;
			case 0x11A24:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER TSHA");
				break;
			case 0x11A25:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER DZA");
				break;
			case 0x11A26:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER DZHA");
				break;
			case 0x11A27:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER ZHA");
				break;
			case 0x11A28:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER ZA");
				break;
			case 0x11A29:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER -A");
				break;
			case 0x11A2A:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER YA");
				break;
			case 0x11A2B:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER RA");
				break;
			case 0x11A2C:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER LA");
				break;
			case 0x11A2D:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER VA");
				break;
			case 0x11A2E:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER SHA");
				break;
			case 0x11A2F:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER SSA");
				break;
			case 0x11A30:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER SA");
				break;
			case 0x11A31:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER HA");
				break;
			case 0x11A32:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE LETTER KSSA");
				break;
			case 0x11A33:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE FINAL CONSONANT MARK");
				break;
			case 0x11A34:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE SIGN VIRAMA");
				break;
			case 0x11A35:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE SIGN CANDRABINDU");
				break;
			case 0x11A36:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE SIGN CANDRABINDU WITH ORNAMENT");
				break;
			case 0x11A37:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE SIGN CANDRA WITH ORNAMENT");
				break;
			case 0x11A38:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE SIGN ANUSVARA");
				break;
			case 0x11A39:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE SIGN VISARGA");
				break;
			case 0x11A3A:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA");
				break;
			case 0x11A3B:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA");
				break;
			case 0x11A3C:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE CLUSTER-FINAL LETTER RA");
				break;
			case 0x11A3D:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE CLUSTER-FINAL LETTER LA");
				break;
			case 0x11A3E:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA");
				break;
			case 0x11A3F:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE INITIAL HEAD MARK");
				break;
			case 0x11A40:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE CLOSING HEAD MARK");
				break;
			case 0x11A41:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE MARK TSHEG");
				break;
			case 0x11A42:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE MARK SHAD");
				break;
			case 0x11A43:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE MARK DOUBLE SHAD");
				break;
			case 0x11A44:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE MARK LONG TSHEG");
				break;
			case 0x11A45:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE INITIAL DOUBLE-LINED HEAD MARK");
				break;
			case 0x11A46:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE CLOSING DOUBLE-LINED HEAD MARK");
				break;
			case 0x11A47:
				strcpy_s(buf, buf_size, "ZANABAZAR SQUARE SUBJOINER");
				break;
			case 0x11A50:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER A");
				break;
			case 0x11A51:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL SIGN I");
				break;
			case 0x11A52:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL SIGN UE");
				break;
			case 0x11A53:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL SIGN U");
				break;
			case 0x11A54:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL SIGN E");
				break;
			case 0x11A55:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL SIGN O");
				break;
			case 0x11A56:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL SIGN OE");
				break;
			case 0x11A57:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL SIGN AI");
				break;
			case 0x11A58:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL SIGN AU");
				break;
			case 0x11A59:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL SIGN VOCALIC R");
				break;
			case 0x11A5A:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL SIGN VOCALIC L");
				break;
			case 0x11A5B:
				strcpy_s(buf, buf_size, "SOYOMBO VOWEL LENGTH MARK");
				break;
			case 0x11A5C:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER KA");
				break;
			case 0x11A5D:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER KHA");
				break;
			case 0x11A5E:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER GA");
				break;
			case 0x11A5F:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER GHA");
				break;
			case 0x11A60:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER NGA");
				break;
			case 0x11A61:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER CA");
				break;
			case 0x11A62:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER CHA");
				break;
			case 0x11A63:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER JA");
				break;
			case 0x11A64:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER JHA");
				break;
			case 0x11A65:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER NYA");
				break;
			case 0x11A66:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER TTA");
				break;
			case 0x11A67:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER TTHA");
				break;
			case 0x11A68:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER DDA");
				break;
			case 0x11A69:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER DDHA");
				break;
			case 0x11A6A:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER NNA");
				break;
			case 0x11A6B:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER TA");
				break;
			case 0x11A6C:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER THA");
				break;
			case 0x11A6D:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER DA");
				break;
			case 0x11A6E:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER DHA");
				break;
			case 0x11A6F:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER NA");
				break;
			case 0x11A70:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER PA");
				break;
			case 0x11A71:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER PHA");
				break;
			case 0x11A72:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER BA");
				break;
			case 0x11A73:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER BHA");
				break;
			case 0x11A74:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER MA");
				break;
			case 0x11A75:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER TSA");
				break;
			case 0x11A76:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER TSHA");
				break;
			case 0x11A77:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER DZA");
				break;
			case 0x11A78:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER ZHA");
				break;
			case 0x11A79:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER ZA");
				break;
			case 0x11A7A:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER -A");
				break;
			case 0x11A7B:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER YA");
				break;
			case 0x11A7C:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER RA");
				break;
			case 0x11A7D:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER LA");
				break;
			case 0x11A7E:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER VA");
				break;
			case 0x11A7F:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER SHA");
				break;
			case 0x11A80:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER SSA");
				break;
			case 0x11A81:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER SA");
				break;
			case 0x11A82:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER HA");
				break;
			case 0x11A83:
				strcpy_s(buf, buf_size, "SOYOMBO LETTER KSSA");
				break;
			case 0x11A84:
				strcpy_s(buf, buf_size, "SOYOMBO SIGN JIHVAMULIYA");
				break;
			case 0x11A85:
				strcpy_s(buf, buf_size, "SOYOMBO SIGN UPADHMANIYA");
				break;
			case 0x11A86:
				strcpy_s(buf, buf_size, "SOYOMBO CLUSTER-INITIAL LETTER RA");
				break;
			case 0x11A87:
				strcpy_s(buf, buf_size, "SOYOMBO CLUSTER-INITIAL LETTER LA");
				break;
			case 0x11A88:
				strcpy_s(buf, buf_size, "SOYOMBO CLUSTER-INITIAL LETTER SHA");
				break;
			case 0x11A89:
				strcpy_s(buf, buf_size, "SOYOMBO CLUSTER-INITIAL LETTER SA");
				break;
			case 0x11A8A:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN G");
				break;
			case 0x11A8B:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN K");
				break;
			case 0x11A8C:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN NG");
				break;
			case 0x11A8D:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN D");
				break;
			case 0x11A8E:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN N");
				break;
			case 0x11A8F:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN B");
				break;
			case 0x11A90:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN M");
				break;
			case 0x11A91:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN R");
				break;
			case 0x11A92:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN L");
				break;
			case 0x11A93:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN SH");
				break;
			case 0x11A94:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN S");
				break;
			case 0x11A95:
				strcpy_s(buf, buf_size, "SOYOMBO FINAL CONSONANT SIGN -A");
				break;
			case 0x11A96:
				strcpy_s(buf, buf_size, "SOYOMBO SIGN ANUSVARA");
				break;
			case 0x11A97:
				strcpy_s(buf, buf_size, "SOYOMBO SIGN VISARGA");
				break;
			case 0x11A98:
				strcpy_s(buf, buf_size, "SOYOMBO GEMINATION MARK");
				break;
			case 0x11A99:
				strcpy_s(buf, buf_size, "SOYOMBO SUBJOINER");
				break;
			case 0x11A9A:
				strcpy_s(buf, buf_size, "SOYOMBO MARK TSHEG");
				break;
			case 0x11A9B:
				strcpy_s(buf, buf_size, "SOYOMBO MARK SHAD");
				break;
			case 0x11A9C:
				strcpy_s(buf, buf_size, "SOYOMBO MARK DOUBLE SHAD");
				break;
			case 0x11A9D:
				strcpy_s(buf, buf_size, "SOYOMBO MARK PLUTA");
				break;
			case 0x11A9E:
				strcpy_s(buf, buf_size, "SOYOMBO HEAD MARK WITH MOON AND SUN AND TRIPLE FLAME");
				break;
			case 0x11A9F:
				strcpy_s(buf, buf_size, "SOYOMBO HEAD MARK WITH MOON AND SUN AND FLAME");
				break;
			case 0x11AA0:
				strcpy_s(buf, buf_size, "SOYOMBO HEAD MARK WITH MOON AND SUN");
				break;
			case 0x11AA1:
				strcpy_s(buf, buf_size, "SOYOMBO TERMINAL MARK-1");
				break;
			case 0x11AA2:
				strcpy_s(buf, buf_size, "SOYOMBO TERMINAL MARK-2");
				break;
			case 0x11AC0:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER PA");
				break;
			case 0x11AC1:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER KA");
				break;
			case 0x11AC2:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER LA");
				break;
			case 0x11AC3:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER MA");
				break;
			case 0x11AC4:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER DA");
				break;
			case 0x11AC5:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER ZA");
				break;
			case 0x11AC6:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER VA");
				break;
			case 0x11AC7:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER NGA");
				break;
			case 0x11AC8:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER HA");
				break;
			case 0x11AC9:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER GA");
				break;
			case 0x11ACA:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER KHA");
				break;
			case 0x11ACB:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER SA");
				break;
			case 0x11ACC:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER BA");
				break;
			case 0x11ACD:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER CA");
				break;
			case 0x11ACE:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER TA");
				break;
			case 0x11ACF:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER THA");
				break;
			case 0x11AD0:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER NA");
				break;
			case 0x11AD1:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER PHA");
				break;
			case 0x11AD2:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER RA");
				break;
			case 0x11AD3:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER FA");
				break;
			case 0x11AD4:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER CHA");
				break;
			case 0x11AD5:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER A");
				break;
			case 0x11AD6:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER E");
				break;
			case 0x11AD7:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER I");
				break;
			case 0x11AD8:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER O");
				break;
			case 0x11AD9:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER U");
				break;
			case 0x11ADA:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER UA");
				break;
			case 0x11ADB:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER IA");
				break;
			case 0x11ADC:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER FINAL P");
				break;
			case 0x11ADD:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER FINAL K");
				break;
			case 0x11ADE:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER FINAL T");
				break;
			case 0x11ADF:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER FINAL M");
				break;
			case 0x11AE0:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER FINAL N");
				break;
			case 0x11AE1:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER FINAL L");
				break;
			case 0x11AE2:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER FINAL W");
				break;
			case 0x11AE3:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER FINAL NG");
				break;
			case 0x11AE4:
				strcpy_s(buf, buf_size, "PAU CIN HAU LETTER FINAL Y");
				break;
			case 0x11AE5:
				strcpy_s(buf, buf_size, "PAU CIN HAU RISING TONE LONG");
				break;
			case 0x11AE6:
				strcpy_s(buf, buf_size, "PAU CIN HAU RISING TONE");
				break;
			case 0x11AE7:
				strcpy_s(buf, buf_size, "PAU CIN HAU SANDHI GLOTTAL STOP");
				break;
			case 0x11AE8:
				strcpy_s(buf, buf_size, "PAU CIN HAU RISING TONE LONG FINAL");
				break;
			case 0x11AE9:
				strcpy_s(buf, buf_size, "PAU CIN HAU RISING TONE FINAL");
				break;
			case 0x11AEA:
				strcpy_s(buf, buf_size, "PAU CIN HAU SANDHI GLOTTAL STOP FINAL");
				break;
			case 0x11AEB:
				strcpy_s(buf, buf_size, "PAU CIN HAU SANDHI TONE LONG");
				break;
			case 0x11AEC:
				strcpy_s(buf, buf_size, "PAU CIN HAU SANDHI TONE");
				break;
			case 0x11AED:
				strcpy_s(buf, buf_size, "PAU CIN HAU SANDHI TONE LONG FINAL");
				break;
			case 0x11AEE:
				strcpy_s(buf, buf_size, "PAU CIN HAU SANDHI TONE FINAL");
				break;
			case 0x11AEF:
				strcpy_s(buf, buf_size, "PAU CIN HAU MID-LEVEL TONE");
				break;
			case 0x11AF0:
				strcpy_s(buf, buf_size, "PAU CIN HAU GLOTTAL STOP VARIANT");
				break;
			case 0x11AF1:
				strcpy_s(buf, buf_size, "PAU CIN HAU MID-LEVEL TONE LONG FINAL");
				break;
			case 0x11AF2:
				strcpy_s(buf, buf_size, "PAU CIN HAU MID-LEVEL TONE FINAL");
				break;
			case 0x11AF3:
				strcpy_s(buf, buf_size, "PAU CIN HAU LOW-FALLING TONE LONG");
				break;
			case 0x11AF4:
				strcpy_s(buf, buf_size, "PAU CIN HAU LOW-FALLING TONE");
				break;
			case 0x11AF5:
				strcpy_s(buf, buf_size, "PAU CIN HAU GLOTTAL STOP");
				break;
			case 0x11AF6:
				strcpy_s(buf, buf_size, "PAU CIN HAU LOW-FALLING TONE LONG FINAL");
				break;
			case 0x11AF7:
				strcpy_s(buf, buf_size, "PAU CIN HAU LOW-FALLING TONE FINAL");
				break;
			case 0x11AF8:
				strcpy_s(buf, buf_size, "PAU CIN HAU GLOTTAL STOP FINAL");
				break;
			case 0x11C00:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER A");
				break;
			case 0x11C01:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER AA");
				break;
			case 0x11C02:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER I");
				break;
			case 0x11C03:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER II");
				break;
			case 0x11C04:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER U");
				break;
			case 0x11C05:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER UU");
				break;
			case 0x11C06:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER VOCALIC R");
				break;
			case 0x11C07:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER VOCALIC RR");
				break;
			case 0x11C08:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER VOCALIC L");
				break;
			case 0x11C0A:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER E");
				break;
			case 0x11C0B:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER AI");
				break;
			case 0x11C0C:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER O");
				break;
			case 0x11C0D:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER AU");
				break;
			case 0x11C0E:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER KA");
				break;
			case 0x11C0F:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER KHA");
				break;
			case 0x11C10:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER GA");
				break;
			case 0x11C11:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER GHA");
				break;
			case 0x11C12:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER NGA");
				break;
			case 0x11C13:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER CA");
				break;
			case 0x11C14:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER CHA");
				break;
			case 0x11C15:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER JA");
				break;
			case 0x11C16:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER JHA");
				break;
			case 0x11C17:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER NYA");
				break;
			case 0x11C18:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER TTA");
				break;
			case 0x11C19:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER TTHA");
				break;
			case 0x11C1A:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER DDA");
				break;
			case 0x11C1B:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER DDHA");
				break;
			case 0x11C1C:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER NNA");
				break;
			case 0x11C1D:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER TA");
				break;
			case 0x11C1E:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER THA");
				break;
			case 0x11C1F:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER DA");
				break;
			case 0x11C20:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER DHA");
				break;
			case 0x11C21:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER NA");
				break;
			case 0x11C22:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER PA");
				break;
			case 0x11C23:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER PHA");
				break;
			case 0x11C24:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER BA");
				break;
			case 0x11C25:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER BHA");
				break;
			case 0x11C26:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER MA");
				break;
			case 0x11C27:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER YA");
				break;
			case 0x11C28:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER RA");
				break;
			case 0x11C29:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER LA");
				break;
			case 0x11C2A:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER VA");
				break;
			case 0x11C2B:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER SHA");
				break;
			case 0x11C2C:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER SSA");
				break;
			case 0x11C2D:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER SA");
				break;
			case 0x11C2E:
				strcpy_s(buf, buf_size, "BHAIKSUKI LETTER HA");
				break;
			case 0x11C2F:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN AA");
				break;
			case 0x11C30:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN I");
				break;
			case 0x11C31:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN II");
				break;
			case 0x11C32:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN U");
				break;
			case 0x11C33:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN UU");
				break;
			case 0x11C34:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN VOCALIC R");
				break;
			case 0x11C35:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN VOCALIC RR");
				break;
			case 0x11C36:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN VOCALIC L");
				break;
			case 0x11C38:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN E");
				break;
			case 0x11C39:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN AI");
				break;
			case 0x11C3A:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN O");
				break;
			case 0x11C3B:
				strcpy_s(buf, buf_size, "BHAIKSUKI VOWEL SIGN AU");
				break;
			case 0x11C3C:
				strcpy_s(buf, buf_size, "BHAIKSUKI SIGN CANDRABINDU");
				break;
			case 0x11C3D:
				strcpy_s(buf, buf_size, "BHAIKSUKI SIGN ANUSVARA");
				break;
			case 0x11C3E:
				strcpy_s(buf, buf_size, "BHAIKSUKI SIGN VISARGA");
				break;
			case 0x11C3F:
				strcpy_s(buf, buf_size, "BHAIKSUKI SIGN VIRAMA");
				break;
			case 0x11C40:
				strcpy_s(buf, buf_size, "BHAIKSUKI SIGN AVAGRAHA");
				break;
			case 0x11C41:
				strcpy_s(buf, buf_size, "BHAIKSUKI DANDA");
				break;
			case 0x11C42:
				strcpy_s(buf, buf_size, "BHAIKSUKI DOUBLE DANDA");
				break;
			case 0x11C43:
				strcpy_s(buf, buf_size, "BHAIKSUKI WORD SEPARATOR");
				break;
			case 0x11C44:
				strcpy_s(buf, buf_size, "BHAIKSUKI GAP FILLER-1");
				break;
			case 0x11C45:
				strcpy_s(buf, buf_size, "BHAIKSUKI GAP FILLER-2");
				break;
			case 0x11C50:
				strcpy_s(buf, buf_size, "BHAIKSUKI DIGIT ZERO");
				break;
			case 0x11C51:
				strcpy_s(buf, buf_size, "BHAIKSUKI DIGIT ONE");
				break;
			case 0x11C52:
				strcpy_s(buf, buf_size, "BHAIKSUKI DIGIT TWO");
				break;
			case 0x11C53:
				strcpy_s(buf, buf_size, "BHAIKSUKI DIGIT THREE");
				break;
			case 0x11C54:
				strcpy_s(buf, buf_size, "BHAIKSUKI DIGIT FOUR");
				break;
			case 0x11C55:
				strcpy_s(buf, buf_size, "BHAIKSUKI DIGIT FIVE");
				break;
			case 0x11C56:
				strcpy_s(buf, buf_size, "BHAIKSUKI DIGIT SIX");
				break;
			case 0x11C57:
				strcpy_s(buf, buf_size, "BHAIKSUKI DIGIT SEVEN");
				break;
			case 0x11C58:
				strcpy_s(buf, buf_size, "BHAIKSUKI DIGIT EIGHT");
				break;
			case 0x11C59:
				strcpy_s(buf, buf_size, "BHAIKSUKI DIGIT NINE");
				break;
			case 0x11C5A:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER ONE");
				break;
			case 0x11C5B:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER TWO");
				break;
			case 0x11C5C:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER THREE");
				break;
			case 0x11C5D:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER FOUR");
				break;
			case 0x11C5E:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER FIVE");
				break;
			case 0x11C5F:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER SIX");
				break;
			case 0x11C60:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER SEVEN");
				break;
			case 0x11C61:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER EIGHT");
				break;
			case 0x11C62:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER NINE");
				break;
			case 0x11C63:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER TEN");
				break;
			case 0x11C64:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER TWENTY");
				break;
			case 0x11C65:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER THIRTY");
				break;
			case 0x11C66:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER FORTY");
				break;
			case 0x11C67:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER FIFTY");
				break;
			case 0x11C68:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER SIXTY");
				break;
			case 0x11C69:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER SEVENTY");
				break;
			case 0x11C6A:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER EIGHTY");
				break;
			case 0x11C6B:
				strcpy_s(buf, buf_size, "BHAIKSUKI NUMBER NINETY");
				break;
			case 0x11C6C:
				strcpy_s(buf, buf_size, "BHAIKSUKI HUNDREDS UNIT MARK");
				break;
			case 0x11C70:
				strcpy_s(buf, buf_size, "MARCHEN HEAD MARK");
				break;
			case 0x11C71:
				strcpy_s(buf, buf_size, "MARCHEN MARK SHAD");
				break;
			case 0x11C72:
				strcpy_s(buf, buf_size, "MARCHEN LETTER KA");
				break;
			case 0x11C73:
				strcpy_s(buf, buf_size, "MARCHEN LETTER KHA");
				break;
			case 0x11C74:
				strcpy_s(buf, buf_size, "MARCHEN LETTER GA");
				break;
			case 0x11C75:
				strcpy_s(buf, buf_size, "MARCHEN LETTER NGA");
				break;
			case 0x11C76:
				strcpy_s(buf, buf_size, "MARCHEN LETTER CA");
				break;
			case 0x11C77:
				strcpy_s(buf, buf_size, "MARCHEN LETTER CHA");
				break;
			case 0x11C78:
				strcpy_s(buf, buf_size, "MARCHEN LETTER JA");
				break;
			case 0x11C79:
				strcpy_s(buf, buf_size, "MARCHEN LETTER NYA");
				break;
			case 0x11C7A:
				strcpy_s(buf, buf_size, "MARCHEN LETTER TA");
				break;
			case 0x11C7B:
				strcpy_s(buf, buf_size, "MARCHEN LETTER THA");
				break;
			case 0x11C7C:
				strcpy_s(buf, buf_size, "MARCHEN LETTER DA");
				break;
			case 0x11C7D:
				strcpy_s(buf, buf_size, "MARCHEN LETTER NA");
				break;
			case 0x11C7E:
				strcpy_s(buf, buf_size, "MARCHEN LETTER PA");
				break;
			case 0x11C7F:
				strcpy_s(buf, buf_size, "MARCHEN LETTER PHA");
				break;
			case 0x11C80:
				strcpy_s(buf, buf_size, "MARCHEN LETTER BA");
				break;
			case 0x11C81:
				strcpy_s(buf, buf_size, "MARCHEN LETTER MA");
				break;
			case 0x11C82:
				strcpy_s(buf, buf_size, "MARCHEN LETTER TSA");
				break;
			case 0x11C83:
				strcpy_s(buf, buf_size, "MARCHEN LETTER TSHA");
				break;
			case 0x11C84:
				strcpy_s(buf, buf_size, "MARCHEN LETTER DZA");
				break;
			case 0x11C85:
				strcpy_s(buf, buf_size, "MARCHEN LETTER WA");
				break;
			case 0x11C86:
				strcpy_s(buf, buf_size, "MARCHEN LETTER ZHA");
				break;
			case 0x11C87:
				strcpy_s(buf, buf_size, "MARCHEN LETTER ZA");
				break;
			case 0x11C88:
				strcpy_s(buf, buf_size, "MARCHEN LETTER -A");
				break;
			case 0x11C89:
				strcpy_s(buf, buf_size, "MARCHEN LETTER YA");
				break;
			case 0x11C8A:
				strcpy_s(buf, buf_size, "MARCHEN LETTER RA");
				break;
			case 0x11C8B:
				strcpy_s(buf, buf_size, "MARCHEN LETTER LA");
				break;
			case 0x11C8C:
				strcpy_s(buf, buf_size, "MARCHEN LETTER SHA");
				break;
			case 0x11C8D:
				strcpy_s(buf, buf_size, "MARCHEN LETTER SA");
				break;
			case 0x11C8E:
				strcpy_s(buf, buf_size, "MARCHEN LETTER HA");
				break;
			case 0x11C8F:
				strcpy_s(buf, buf_size, "MARCHEN LETTER A");
				break;
			case 0x11C92:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER KA");
				break;
			case 0x11C93:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER KHA");
				break;
			case 0x11C94:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER GA");
				break;
			case 0x11C95:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER NGA");
				break;
			case 0x11C96:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER CA");
				break;
			case 0x11C97:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER CHA");
				break;
			case 0x11C98:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER JA");
				break;
			case 0x11C99:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER NYA");
				break;
			case 0x11C9A:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER TA");
				break;
			case 0x11C9B:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER THA");
				break;
			case 0x11C9C:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER DA");
				break;
			case 0x11C9D:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER NA");
				break;
			case 0x11C9E:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER PA");
				break;
			case 0x11C9F:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER PHA");
				break;
			case 0x11CA0:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER BA");
				break;
			case 0x11CA1:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER MA");
				break;
			case 0x11CA2:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER TSA");
				break;
			case 0x11CA3:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER TSHA");
				break;
			case 0x11CA4:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER DZA");
				break;
			case 0x11CA5:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER WA");
				break;
			case 0x11CA6:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER ZHA");
				break;
			case 0x11CA7:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER ZA");
				break;
			case 0x11CA9:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER YA");
				break;
			case 0x11CAA:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER RA");
				break;
			case 0x11CAB:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER LA");
				break;
			case 0x11CAC:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER SHA");
				break;
			case 0x11CAD:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER SA");
				break;
			case 0x11CAE:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER HA");
				break;
			case 0x11CAF:
				strcpy_s(buf, buf_size, "MARCHEN SUBJOINED LETTER A");
				break;
			case 0x11CB0:
				strcpy_s(buf, buf_size, "MARCHEN VOWEL SIGN AA");
				break;
			case 0x11CB1:
				strcpy_s(buf, buf_size, "MARCHEN VOWEL SIGN I");
				break;
			case 0x11CB2:
				strcpy_s(buf, buf_size, "MARCHEN VOWEL SIGN U");
				break;
			case 0x11CB3:
				strcpy_s(buf, buf_size, "MARCHEN VOWEL SIGN E");
				break;
			case 0x11CB4:
				strcpy_s(buf, buf_size, "MARCHEN VOWEL SIGN O");
				break;
			case 0x11CB5:
				strcpy_s(buf, buf_size, "MARCHEN SIGN ANUSVARA");
				break;
			case 0x11CB6:
				strcpy_s(buf, buf_size, "MARCHEN SIGN CANDRABINDU");
				break;
			case 0x11D00:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER A");
				break;
			case 0x11D01:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER AA");
				break;
			case 0x11D02:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER I");
				break;
			case 0x11D03:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER II");
				break;
			case 0x11D04:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER U");
				break;
			case 0x11D05:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER UU");
				break;
			case 0x11D06:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER E");
				break;
			case 0x11D08:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER AI");
				break;
			case 0x11D09:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER O");
				break;
			case 0x11D0B:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER AU");
				break;
			case 0x11D0C:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER KA");
				break;
			case 0x11D0D:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER KHA");
				break;
			case 0x11D0E:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER GA");
				break;
			case 0x11D0F:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER GHA");
				break;
			case 0x11D10:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER NGA");
				break;
			case 0x11D11:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER CA");
				break;
			case 0x11D12:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER CHA");
				break;
			case 0x11D13:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER JA");
				break;
			case 0x11D14:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER JHA");
				break;
			case 0x11D15:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER NYA");
				break;
			case 0x11D16:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER TTA");
				break;
			case 0x11D17:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER TTHA");
				break;
			case 0x11D18:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER DDA");
				break;
			case 0x11D19:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER DDHA");
				break;
			case 0x11D1A:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER NNA");
				break;
			case 0x11D1B:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER TA");
				break;
			case 0x11D1C:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER THA");
				break;
			case 0x11D1D:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER DA");
				break;
			case 0x11D1E:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER DHA");
				break;
			case 0x11D1F:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER NA");
				break;
			case 0x11D20:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER PA");
				break;
			case 0x11D21:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER PHA");
				break;
			case 0x11D22:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER BA");
				break;
			case 0x11D23:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER BHA");
				break;
			case 0x11D24:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER MA");
				break;
			case 0x11D25:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER YA");
				break;
			case 0x11D26:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER RA");
				break;
			case 0x11D27:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER LA");
				break;
			case 0x11D28:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER VA");
				break;
			case 0x11D29:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER SHA");
				break;
			case 0x11D2A:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER SSA");
				break;
			case 0x11D2B:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER SA");
				break;
			case 0x11D2C:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER HA");
				break;
			case 0x11D2D:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER LLA");
				break;
			case 0x11D2E:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER KSSA");
				break;
			case 0x11D2F:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER JNYA");
				break;
			case 0x11D30:
				strcpy_s(buf, buf_size, "MASARAM GONDI LETTER TRA");
				break;
			case 0x11D31:
				strcpy_s(buf, buf_size, "MASARAM GONDI VOWEL SIGN AA");
				break;
			case 0x11D32:
				strcpy_s(buf, buf_size, "MASARAM GONDI VOWEL SIGN I");
				break;
			case 0x11D33:
				strcpy_s(buf, buf_size, "MASARAM GONDI VOWEL SIGN II");
				break;
			case 0x11D34:
				strcpy_s(buf, buf_size, "MASARAM GONDI VOWEL SIGN U");
				break;
			case 0x11D35:
				strcpy_s(buf, buf_size, "MASARAM GONDI VOWEL SIGN UU");
				break;
			case 0x11D36:
				strcpy_s(buf, buf_size, "MASARAM GONDI VOWEL SIGN VOCALIC R");
				break;
			case 0x11D3A:
				strcpy_s(buf, buf_size, "MASARAM GONDI VOWEL SIGN E");
				break;
			case 0x11D3C:
				strcpy_s(buf, buf_size, "MASARAM GONDI VOWEL SIGN AI");
				break;
			case 0x11D3D:
				strcpy_s(buf, buf_size, "MASARAM GONDI VOWEL SIGN O");
				break;
			case 0x11D3F:
				strcpy_s(buf, buf_size, "MASARAM GONDI VOWEL SIGN AU");
				break;
			case 0x11D40:
				strcpy_s(buf, buf_size, "MASARAM GONDI SIGN ANUSVARA");
				break;
			case 0x11D41:
				strcpy_s(buf, buf_size, "MASARAM GONDI SIGN VISARGA");
				break;
			case 0x11D42:
				strcpy_s(buf, buf_size, "MASARAM GONDI SIGN NUKTA");
				break;
			case 0x11D43:
				strcpy_s(buf, buf_size, "MASARAM GONDI SIGN CANDRA");
				break;
			case 0x11D44:
				strcpy_s(buf, buf_size, "MASARAM GONDI SIGN HALANTA");
				break;
			case 0x11D45:
				strcpy_s(buf, buf_size, "MASARAM GONDI VIRAMA");
				break;
			case 0x11D46:
				strcpy_s(buf, buf_size, "MASARAM GONDI REPHA");
				break;
			case 0x11D47:
				strcpy_s(buf, buf_size, "MASARAM GONDI RA-KARA");
				break;
			case 0x11D50:
				strcpy_s(buf, buf_size, "MASARAM GONDI DIGIT ZERO");
				break;
			case 0x11D51:
				strcpy_s(buf, buf_size, "MASARAM GONDI DIGIT ONE");
				break;
			case 0x11D52:
				strcpy_s(buf, buf_size, "MASARAM GONDI DIGIT TWO");
				break;
			case 0x11D53:
				strcpy_s(buf, buf_size, "MASARAM GONDI DIGIT THREE");
				break;
			case 0x11D54:
				strcpy_s(buf, buf_size, "MASARAM GONDI DIGIT FOUR");
				break;
			case 0x11D55:
				strcpy_s(buf, buf_size, "MASARAM GONDI DIGIT FIVE");
				break;
			case 0x11D56:
				strcpy_s(buf, buf_size, "MASARAM GONDI DIGIT SIX");
				break;
			case 0x11D57:
				strcpy_s(buf, buf_size, "MASARAM GONDI DIGIT SEVEN");
				break;
			case 0x11D58:
				strcpy_s(buf, buf_size, "MASARAM GONDI DIGIT EIGHT");
				break;
			case 0x11D59:
				strcpy_s(buf, buf_size, "MASARAM GONDI DIGIT NINE");
				break;
			case 0x11D60:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER A");
				break;
			case 0x11D61:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER AA");
				break;
			case 0x11D62:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER I");
				break;
			case 0x11D63:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER II");
				break;
			case 0x11D64:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER U");
				break;
			case 0x11D65:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER UU");
				break;
			case 0x11D67:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER EE");
				break;
			case 0x11D68:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER AI");
				break;
			case 0x11D6A:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER OO");
				break;
			case 0x11D6B:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER AU");
				break;
			case 0x11D6C:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER YA");
				break;
			case 0x11D6D:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER VA");
				break;
			case 0x11D6E:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER BA");
				break;
			case 0x11D6F:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER BHA");
				break;
			case 0x11D70:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER MA");
				break;
			case 0x11D71:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER KA");
				break;
			case 0x11D72:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER KHA");
				break;
			case 0x11D73:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER TA");
				break;
			case 0x11D74:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER THA");
				break;
			case 0x11D75:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER LA");
				break;
			case 0x11D76:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER GA");
				break;
			case 0x11D77:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER GHA");
				break;
			case 0x11D78:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER DA");
				break;
			case 0x11D79:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER DHA");
				break;
			case 0x11D7A:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER NA");
				break;
			case 0x11D7B:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER CA");
				break;
			case 0x11D7C:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER CHA");
				break;
			case 0x11D7D:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER TTA");
				break;
			case 0x11D7E:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER TTHA");
				break;
			case 0x11D7F:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER LLA");
				break;
			case 0x11D80:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER JA");
				break;
			case 0x11D81:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER JHA");
				break;
			case 0x11D82:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER DDA");
				break;
			case 0x11D83:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER DDHA");
				break;
			case 0x11D84:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER NGA");
				break;
			case 0x11D85:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER PA");
				break;
			case 0x11D86:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER PHA");
				break;
			case 0x11D87:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER HA");
				break;
			case 0x11D88:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER RA");
				break;
			case 0x11D89:
				strcpy_s(buf, buf_size, "GUNJALA GONDI LETTER SA");
				break;
			case 0x11D8A:
				strcpy_s(buf, buf_size, "GUNJALA GONDI VOWEL SIGN AA");
				break;
			case 0x11D8B:
				strcpy_s(buf, buf_size, "GUNJALA GONDI VOWEL SIGN I");
				break;
			case 0x11D8C:
				strcpy_s(buf, buf_size, "GUNJALA GONDI VOWEL SIGN II");
				break;
			case 0x11D8D:
				strcpy_s(buf, buf_size, "GUNJALA GONDI VOWEL SIGN U");
				break;
			case 0x11D8E:
				strcpy_s(buf, buf_size, "GUNJALA GONDI VOWEL SIGN UU");
				break;
			case 0x11D90:
				strcpy_s(buf, buf_size, "GUNJALA GONDI VOWEL SIGN EE");
				break;
			case 0x11D91:
				strcpy_s(buf, buf_size, "GUNJALA GONDI VOWEL SIGN AI");
				break;
			case 0x11D93:
				strcpy_s(buf, buf_size, "GUNJALA GONDI VOWEL SIGN OO");
				break;
			case 0x11D94:
				strcpy_s(buf, buf_size, "GUNJALA GONDI VOWEL SIGN AU");
				break;
			case 0x11D95:
				strcpy_s(buf, buf_size, "GUNJALA GONDI SIGN ANUSVARA");
				break;
			case 0x11D96:
				strcpy_s(buf, buf_size, "GUNJALA GONDI SIGN VISARGA");
				break;
			case 0x11D97:
				strcpy_s(buf, buf_size, "GUNJALA GONDI VIRAMA");
				break;
			case 0x11D98:
				strcpy_s(buf, buf_size, "GUNJALA GONDI OM");
				break;
			case 0x11DA0:
				strcpy_s(buf, buf_size, "GUNJALA GONDI DIGIT ZERO");
				break;
			case 0x11DA1:
				strcpy_s(buf, buf_size, "GUNJALA GONDI DIGIT ONE");
				break;
			case 0x11DA2:
				strcpy_s(buf, buf_size, "GUNJALA GONDI DIGIT TWO");
				break;
			case 0x11DA3:
				strcpy_s(buf, buf_size, "GUNJALA GONDI DIGIT THREE");
				break;
			case 0x11DA4:
				strcpy_s(buf, buf_size, "GUNJALA GONDI DIGIT FOUR");
				break;
			case 0x11DA5:
				strcpy_s(buf, buf_size, "GUNJALA GONDI DIGIT FIVE");
				break;
			case 0x11DA6:
				strcpy_s(buf, buf_size, "GUNJALA GONDI DIGIT SIX");
				break;
			case 0x11DA7:
				strcpy_s(buf, buf_size, "GUNJALA GONDI DIGIT SEVEN");
				break;
			case 0x11DA8:
				strcpy_s(buf, buf_size, "GUNJALA GONDI DIGIT EIGHT");
				break;
			case 0x11DA9:
				strcpy_s(buf, buf_size, "GUNJALA GONDI DIGIT NINE");
				break;
			case 0x11EE0:
				strcpy_s(buf, buf_size, "MAKASAR LETTER KA");
				break;
			case 0x11EE1:
				strcpy_s(buf, buf_size, "MAKASAR LETTER GA");
				break;
			case 0x11EE2:
				strcpy_s(buf, buf_size, "MAKASAR LETTER NGA");
				break;
			case 0x11EE3:
				strcpy_s(buf, buf_size, "MAKASAR LETTER PA");
				break;
			case 0x11EE4:
				strcpy_s(buf, buf_size, "MAKASAR LETTER BA");
				break;
			case 0x11EE5:
				strcpy_s(buf, buf_size, "MAKASAR LETTER MA");
				break;
			case 0x11EE6:
				strcpy_s(buf, buf_size, "MAKASAR LETTER TA");
				break;
			case 0x11EE7:
				strcpy_s(buf, buf_size, "MAKASAR LETTER DA");
				break;
			case 0x11EE8:
				strcpy_s(buf, buf_size, "MAKASAR LETTER NA");
				break;
			case 0x11EE9:
				strcpy_s(buf, buf_size, "MAKASAR LETTER CA");
				break;
			case 0x11EEA:
				strcpy_s(buf, buf_size, "MAKASAR LETTER JA");
				break;
			case 0x11EEB:
				strcpy_s(buf, buf_size, "MAKASAR LETTER NYA");
				break;
			case 0x11EEC:
				strcpy_s(buf, buf_size, "MAKASAR LETTER YA");
				break;
			case 0x11EED:
				strcpy_s(buf, buf_size, "MAKASAR LETTER RA");
				break;
			case 0x11EEE:
				strcpy_s(buf, buf_size, "MAKASAR LETTER LA");
				break;
			case 0x11EEF:
				strcpy_s(buf, buf_size, "MAKASAR LETTER VA");
				break;
			case 0x11EF0:
				strcpy_s(buf, buf_size, "MAKASAR LETTER SA");
				break;
			case 0x11EF1:
				strcpy_s(buf, buf_size, "MAKASAR LETTER A");
				break;
			case 0x11EF2:
				strcpy_s(buf, buf_size, "MAKASAR ANGKA");
				break;
			case 0x11EF3:
				strcpy_s(buf, buf_size, "MAKASAR VOWEL SIGN I");
				break;
			case 0x11EF4:
				strcpy_s(buf, buf_size, "MAKASAR VOWEL SIGN U");
				break;
			case 0x11EF5:
				strcpy_s(buf, buf_size, "MAKASAR VOWEL SIGN E");
				break;
			case 0x11EF6:
				strcpy_s(buf, buf_size, "MAKASAR VOWEL SIGN O");
				break;
			case 0x11EF7:
				strcpy_s(buf, buf_size, "MAKASAR PASSIMBANG");
				break;
			case 0x11EF8:
				strcpy_s(buf, buf_size, "MAKASAR END OF SECTION");
				break;
			case 0x11FB0:
				strcpy_s(buf, buf_size, "LISU LETTER YHA");
				break;
			case 0x11FC0:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE THREE-HUNDRED-AND-TWENTIETH");
				break;
			case 0x11FC1:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE ONE-HUNDRED-AND-SIXTIETH");
				break;
			case 0x11FC2:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE EIGHTIETH");
				break;
			case 0x11FC3:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE SIXTY-FOURTH");
				break;
			case 0x11FC4:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE FORTIETH");
				break;
			case 0x11FC5:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE THIRTY-SECOND");
				break;
			case 0x11FC6:
				strcpy_s(buf, buf_size, "TAMIL FRACTION THREE EIGHTIETHS");
				break;
			case 0x11FC7:
				strcpy_s(buf, buf_size, "TAMIL FRACTION THREE SIXTY-FOURTHS");
				break;
			case 0x11FC8:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE TWENTIETH");
				break;
			case 0x11FC9:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE SIXTEENTH-1");
				break;
			case 0x11FCA:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE SIXTEENTH-2");
				break;
			case 0x11FCB:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE TENTH");
				break;
			case 0x11FCC:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE EIGHTH");
				break;
			case 0x11FCD:
				strcpy_s(buf, buf_size, "TAMIL FRACTION THREE TWENTIETHS");
				break;
			case 0x11FCE:
				strcpy_s(buf, buf_size, "TAMIL FRACTION THREE SIXTEENTHS");
				break;
			case 0x11FCF:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE FIFTH");
				break;
			case 0x11FD0:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE QUARTER");
				break;
			case 0x11FD1:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE HALF-1");
				break;
			case 0x11FD2:
				strcpy_s(buf, buf_size, "TAMIL FRACTION ONE HALF-2");
				break;
			case 0x11FD3:
				strcpy_s(buf, buf_size, "TAMIL FRACTION THREE QUARTERS");
				break;
			case 0x11FD4:
				strcpy_s(buf, buf_size, "TAMIL FRACTION DOWNSCALING FACTOR KIIZH");
				break;
			case 0x11FD5:
				strcpy_s(buf, buf_size, "TAMIL SIGN NEL");
				break;
			case 0x11FD6:
				strcpy_s(buf, buf_size, "TAMIL SIGN CEVITU");
				break;
			case 0x11FD7:
				strcpy_s(buf, buf_size, "TAMIL SIGN AAZHAAKKU");
				break;
			case 0x11FD8:
				strcpy_s(buf, buf_size, "TAMIL SIGN UZHAKKU");
				break;
			case 0x11FD9:
				strcpy_s(buf, buf_size, "TAMIL SIGN MUUVUZHAKKU");
				break;
			case 0x11FDA:
				strcpy_s(buf, buf_size, "TAMIL SIGN KURUNI");
				break;
			case 0x11FDB:
				strcpy_s(buf, buf_size, "TAMIL SIGN PATHAKKU");
				break;
			case 0x11FDC:
				strcpy_s(buf, buf_size, "TAMIL SIGN MUKKURUNI");
				break;
			case 0x11FDD:
				strcpy_s(buf, buf_size, "TAMIL SIGN KAACU");
				break;
			case 0x11FDE:
				strcpy_s(buf, buf_size, "TAMIL SIGN PANAM");
				break;
			case 0x11FDF:
				strcpy_s(buf, buf_size, "TAMIL SIGN PON");
				break;
			case 0x11FE0:
				strcpy_s(buf, buf_size, "TAMIL SIGN VARAAKAN");
				break;
			case 0x11FE1:
				strcpy_s(buf, buf_size, "TAMIL SIGN PAARAM");
				break;
			case 0x11FE2:
				strcpy_s(buf, buf_size, "TAMIL SIGN KUZHI");
				break;
			case 0x11FE3:
				strcpy_s(buf, buf_size, "TAMIL SIGN VELI");
				break;
			case 0x11FE4:
				strcpy_s(buf, buf_size, "TAMIL WET CULTIVATION SIGN");
				break;
			case 0x11FE5:
				strcpy_s(buf, buf_size, "TAMIL DRY CULTIVATION SIGN");
				break;
			case 0x11FE6:
				strcpy_s(buf, buf_size, "TAMIL LAND SIGN");
				break;
			case 0x11FE7:
				strcpy_s(buf, buf_size, "TAMIL SALT PAN SIGN");
				break;
			case 0x11FE8:
				strcpy_s(buf, buf_size, "TAMIL TRADITIONAL CREDIT SIGN");
				break;
			case 0x11FE9:
				strcpy_s(buf, buf_size, "TAMIL TRADITIONAL NUMBER SIGN");
				break;
			case 0x11FEA:
				strcpy_s(buf, buf_size, "TAMIL CURRENT SIGN");
				break;
			case 0x11FEB:
				strcpy_s(buf, buf_size, "TAMIL AND ODD SIGN");
				break;
			case 0x11FEC:
				strcpy_s(buf, buf_size, "TAMIL SPENT SIGN");
				break;
			case 0x11FED:
				strcpy_s(buf, buf_size, "TAMIL TOTAL SIGN");
				break;
			case 0x11FEE:
				strcpy_s(buf, buf_size, "TAMIL IN POSSESSION SIGN");
				break;
			case 0x11FEF:
				strcpy_s(buf, buf_size, "TAMIL STARTING FROM SIGN");
				break;
			case 0x11FF0:
				strcpy_s(buf, buf_size, "TAMIL SIGN MUTHALIYA");
				break;
			case 0x11FF1:
				strcpy_s(buf, buf_size, "TAMIL SIGN VAKAIYARAA");
				break;
			case 0x11FFF:
				strcpy_s(buf, buf_size, "TAMIL PUNCTUATION END OF TEXT");
				break;
			case 0x12000:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN A");
				break;
			case 0x12001:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN A TIMES A");
				break;
			case 0x12002:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN A TIMES BAD");
				break;
			case 0x12003:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN A TIMES GAN2 TENU");
				break;
			case 0x12004:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN A TIMES HA");
				break;
			case 0x12005:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN A TIMES IGI");
				break;
			case 0x12006:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN A TIMES LAGAR GUNU");
				break;
			case 0x12007:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN A TIMES MUSH");
				break;
			case 0x12008:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN A TIMES SAG");
				break;
			case 0x12009:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN A2");
				break;
			case 0x1200A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB");
				break;
			case 0x1200B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES ASH2");
				break;
			case 0x1200C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES DUN3 GUNU");
				break;
			case 0x1200D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES GAL");
				break;
			case 0x1200E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES GAN2 TENU");
				break;
			case 0x1200F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES HA");
				break;
			case 0x12010:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES IGI GUNU");
				break;
			case 0x12011:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES IMIN");
				break;
			case 0x12012:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES LAGAB");
				break;
			case 0x12013:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES SHESH");
				break;
			case 0x12014:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES U PLUS U PLUS U");
				break;
			case 0x12015:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB GUNU");
				break;
			case 0x12016:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB2");
				break;
			case 0x12017:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB2 TIMES BALAG");
				break;
			case 0x12018:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB2 TIMES GAN2 TENU");
				break;
			case 0x12019:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB2 TIMES ME PLUS EN");
				break;
			case 0x1201A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB2 TIMES SHA3");
				break;
			case 0x1201B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB2 TIMES TAK4");
				break;
			case 0x1201C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AD");
				break;
			case 0x1201D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AK");
				break;
			case 0x1201E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AK TIMES ERIN2");
				break;
			case 0x1201F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AK TIMES SHITA PLUS GISH");
				break;
			case 0x12020:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AL");
				break;
			case 0x12021:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AL TIMES AL");
				break;
			case 0x12022:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AL TIMES DIM2");
				break;
			case 0x12023:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AL TIMES GISH");
				break;
			case 0x12024:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AL TIMES HA");
				break;
			case 0x12025:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AL TIMES KAD3");
				break;
			case 0x12026:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AL TIMES KI");
				break;
			case 0x12027:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AL TIMES SHE");
				break;
			case 0x12028:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AL TIMES USH");
				break;
			case 0x12029:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ALAN");
				break;
			case 0x1202A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ALEPH");
				break;
			case 0x1202B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AMAR");
				break;
			case 0x1202C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AMAR TIMES SHE");
				break;
			case 0x1202D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AN");
				break;
			case 0x1202E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AN OVER AN");
				break;
			case 0x1202F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AN THREE TIMES");
				break;
			case 0x12030:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AN PLUS NAGA OPPOSING AN PLUS NAGA");
				break;
			case 0x12031:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AN PLUS NAGA SQUARED");
				break;
			case 0x12032:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ANSHE");
				break;
			case 0x12033:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN APIN");
				break;
			case 0x12034:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ARAD");
				break;
			case 0x12035:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ARAD TIMES KUR");
				break;
			case 0x12036:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ARKAB");
				break;
			case 0x12037:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ASAL2");
				break;
			case 0x12038:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ASH");
				break;
			case 0x12039:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ASH ZIDA TENU");
				break;
			case 0x1203A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ASH KABA TENU");
				break;
			case 0x1203B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ASH OVER ASH TUG2 OVER TUG2 TUG2 OVER TUG2 PAP");
				break;
			case 0x1203C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ASH OVER ASH OVER ASH");
				break;
			case 0x1203D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ASH OVER ASH OVER ASH CROSSING ASH OVER ASH OVER ASH");
				break;
			case 0x1203E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ASH2");
				break;
			case 0x1203F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ASHGAB");
				break;
			case 0x12040:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BA");
				break;
			case 0x12041:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BAD");
				break;
			case 0x12042:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BAG3");
				break;
			case 0x12043:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BAHAR2");
				break;
			case 0x12044:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BAL");
				break;
			case 0x12045:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BAL OVER BAL");
				break;
			case 0x12046:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BALAG");
				break;
			case 0x12047:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BAR");
				break;
			case 0x12048:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BARA2");
				break;
			case 0x12049:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BI");
				break;
			case 0x1204A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BI TIMES A");
				break;
			case 0x1204B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BI TIMES GAR");
				break;
			case 0x1204C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BI TIMES IGI GUNU");
				break;
			case 0x1204D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BU");
				break;
			case 0x1204E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BU OVER BU AB");
				break;
			case 0x1204F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BU OVER BU UN");
				break;
			case 0x12050:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BU CROSSING BU");
				break;
			case 0x12051:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BULUG");
				break;
			case 0x12052:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BULUG OVER BULUG");
				break;
			case 0x12053:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BUR");
				break;
			case 0x12054:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BUR2");
				break;
			case 0x12055:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DA");
				break;
			case 0x12056:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG");
				break;
			case 0x12057:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES A PLUS MASH");
				break;
			case 0x12058:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES AMAR");
				break;
			case 0x12059:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES BALAG");
				break;
			case 0x1205A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES BI");
				break;
			case 0x1205B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES GA");
				break;
			case 0x1205C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES GA PLUS MASH");
				break;
			case 0x1205D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES GI");
				break;
			case 0x1205E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES GIR2");
				break;
			case 0x1205F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES GUD");
				break;
			case 0x12060:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES HA");
				break;
			case 0x12061:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES IR");
				break;
			case 0x12062:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES IR PLUS LU");
				break;
			case 0x12063:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES KAK");
				break;
			case 0x12064:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES LA");
				break;
			case 0x12065:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES LU");
				break;
			case 0x12066:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES LU PLUS MASH2");
				break;
			case 0x12067:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES LUM");
				break;
			case 0x12068:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES NE");
				break;
			case 0x12069:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES PAP PLUS PAP");
				break;
			case 0x1206A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES SI");
				break;
			case 0x1206B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES TAK4");
				break;
			case 0x1206C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES U2 PLUS GIR2");
				break;
			case 0x1206D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES USH");
				break;
			case 0x1206E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAM");
				break;
			case 0x1206F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAR");
				break;
			case 0x12070:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DARA3");
				break;
			case 0x12071:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DARA4");
				break;
			case 0x12072:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DI");
				break;
			case 0x12073:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DIB");
				break;
			case 0x12074:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DIM");
				break;
			case 0x12075:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DIM TIMES SHE");
				break;
			case 0x12076:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DIM2");
				break;
			case 0x12077:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DIN");
				break;
			case 0x12078:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DIN KASKAL U GUNU DISH");
				break;
			case 0x12079:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DISH");
				break;
			case 0x1207A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DU");
				break;
			case 0x1207B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DU OVER DU");
				break;
			case 0x1207C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DU GUNU");
				break;
			case 0x1207D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DU SHESHIG");
				break;
			case 0x1207E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUB");
				break;
			case 0x1207F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUB TIMES ESH2");
				break;
			case 0x12080:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUB2");
				break;
			case 0x12081:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG");
				break;
			case 0x12082:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUGUD");
				break;
			case 0x12083:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUH");
				break;
			case 0x12084:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUN");
				break;
			case 0x12085:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUN3");
				break;
			case 0x12086:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUN3 GUNU");
				break;
			case 0x12087:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUN3 GUNU GUNU");
				break;
			case 0x12088:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUN4");
				break;
			case 0x12089:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUR2");
				break;
			case 0x1208A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E");
				break;
			case 0x1208B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E TIMES PAP");
				break;
			case 0x1208C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E OVER E NUN OVER NUN");
				break;
			case 0x1208D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E2");
				break;
			case 0x1208E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E2 TIMES A PLUS HA PLUS DA");
				break;
			case 0x1208F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E2 TIMES GAR");
				break;
			case 0x12090:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E2 TIMES MI");
				break;
			case 0x12091:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E2 TIMES SAL");
				break;
			case 0x12092:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E2 TIMES SHE");
				break;
			case 0x12093:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E2 TIMES U");
				break;
			case 0x12094:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EDIN");
				break;
			case 0x12095:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EGIR");
				break;
			case 0x12096:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EL");
				break;
			case 0x12097:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EN");
				break;
			case 0x12098:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EN TIMES GAN2");
				break;
			case 0x12099:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EN TIMES GAN2 TENU");
				break;
			case 0x1209A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EN TIMES ME");
				break;
			case 0x1209B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EN CROSSING EN");
				break;
			case 0x1209C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EN OPPOSING EN");
				break;
			case 0x1209D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EN SQUARED");
				break;
			case 0x1209E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EREN");
				break;
			case 0x1209F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ERIN2");
				break;
			case 0x120A0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ESH2");
				break;
			case 0x120A1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN");
				break;
			case 0x120A2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES A");
				break;
			case 0x120A3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES A PLUS LAL");
				break;
			case 0x120A4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES A PLUS LAL TIMES LAL");
				break;
			case 0x120A5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES AN");
				break;
			case 0x120A6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES BAD");
				break;
			case 0x120A7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES DUN3 GUNU");
				break;
			case 0x120A8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES DUN3 GUNU GUNU");
				break;
			case 0x120A9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES HA");
				break;
			case 0x120AA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES HA GUNU");
				break;
			case 0x120AB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES IGI GUNU");
				break;
			case 0x120AC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES KASKAL");
				break;
			case 0x120AD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED");
				break;
			case 0x120AE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES KU3");
				break;
			case 0x120AF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES LA");
				break;
			case 0x120B0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES LAL TIMES LAL");
				break;
			case 0x120B1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES LI");
				break;
			case 0x120B2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES LU");
				break;
			case 0x120B3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES U2");
				break;
			case 0x120B4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES UD");
				break;
			case 0x120B5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA");
				break;
			case 0x120B6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA GUNU");
				break;
			case 0x120B7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2");
				break;
			case 0x120B8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES A PLUS DA PLUS HA");
				break;
			case 0x120B9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES A PLUS HA");
				break;
			case 0x120BA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES A PLUS IGI");
				break;
			case 0x120BB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES AB2 TENU PLUS TAB");
				break;
			case 0x120BC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES AN");
				break;
			case 0x120BD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES ASH");
				break;
			case 0x120BE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES ASH2 PLUS GAL");
				break;
			case 0x120BF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES BAD");
				break;
			case 0x120C0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES BAR PLUS RA");
				break;
			case 0x120C1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES BUR");
				break;
			case 0x120C2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES BUR PLUS RA");
				break;
			case 0x120C3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES DA");
				break;
			case 0x120C4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES DI");
				break;
			case 0x120C5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES DIM TIMES SHE");
				break;
			case 0x120C6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES DUB");
				break;
			case 0x120C7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES EL");
				break;
			case 0x120C8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES EL PLUS LA");
				break;
			case 0x120C9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES EN");
				break;
			case 0x120CA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES EN TIMES GAN2 TENU");
				break;
			case 0x120CB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES GAN2 TENU");
				break;
			case 0x120CC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES GAR");
				break;
			case 0x120CD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES GI");
				break;
			case 0x120CE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES GI4");
				break;
			case 0x120CF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES GI4 PLUS A");
				break;
			case 0x120D0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES GIR2 PLUS SU");
				break;
			case 0x120D1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES HA PLUS LU PLUS ESH2");
				break;
			case 0x120D2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES HAL");
				break;
			case 0x120D3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES HAL PLUS LA");
				break;
			case 0x120D4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES HI PLUS LI");
				break;
			case 0x120D5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES HUB2");
				break;
			case 0x120D6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES IGI GUNU");
				break;
			case 0x120D7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES ISH PLUS HU PLUS ASH");
				break;
			case 0x120D8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES KAK");
				break;
			case 0x120D9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES KASKAL");
				break;
			case 0x120DA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES KID");
				break;
			case 0x120DB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES KID PLUS LAL");
				break;
			case 0x120DC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES KU3 PLUS AN");
				break;
			case 0x120DD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES LA");
				break;
			case 0x120DE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES ME PLUS EN");
				break;
			case 0x120DF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES MI");
				break;
			case 0x120E0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES NUN");
				break;
			case 0x120E1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES NUN OVER NUN");
				break;
			case 0x120E2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES PA");
				break;
			case 0x120E3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES SAL");
				break;
			case 0x120E4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES SAR");
				break;
			case 0x120E5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES SHE");
				break;
			case 0x120E6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES SHE PLUS TUR");
				break;
			case 0x120E7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES SHID");
				break;
			case 0x120E8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES SUM");
				break;
			case 0x120E9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES TAK4");
				break;
			case 0x120EA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES U");
				break;
			case 0x120EB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES UD");
				break;
			case 0x120EC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES UD PLUS DU");
				break;
			case 0x120ED:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 OVER GA2");
				break;
			case 0x120EE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GABA");
				break;
			case 0x120EF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GABA CROSSING GABA");
				break;
			case 0x120F0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAD");
				break;
			case 0x120F1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAD OVER GAD GAR OVER GAR");
				break;
			case 0x120F2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAL");
				break;
			case 0x120F3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAL GAD OVER GAD GAR OVER GAR");
				break;
			case 0x120F4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GALAM");
				break;
			case 0x120F5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAM");
				break;
			case 0x120F6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAN");
				break;
			case 0x120F7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAN2");
				break;
			case 0x120F8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAN2 TENU");
				break;
			case 0x120F9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAN2 OVER GAN2");
				break;
			case 0x120FA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAN2 CROSSING GAN2");
				break;
			case 0x120FB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAR");
				break;
			case 0x120FC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GAR3");
				break;
			case 0x120FD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GASHAN");
				break;
			case 0x120FE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GESHTIN");
				break;
			case 0x120FF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GESHTIN TIMES KUR");
				break;
			case 0x12100:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GI");
				break;
			case 0x12101:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GI TIMES E");
				break;
			case 0x12102:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GI TIMES U");
				break;
			case 0x12103:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GI CROSSING GI");
				break;
			case 0x12104:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GI4");
				break;
			case 0x12105:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GI4 OVER GI4");
				break;
			case 0x12106:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GI4 CROSSING GI4");
				break;
			case 0x12107:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GIDIM");
				break;
			case 0x12108:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GIR2");
				break;
			case 0x12109:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GIR2 GUNU");
				break;
			case 0x1210A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GIR3");
				break;
			case 0x1210B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GIR3 TIMES A PLUS IGI");
				break;
			case 0x1210C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GIR3 TIMES GAN2 TENU");
				break;
			case 0x1210D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GIR3 TIMES IGI");
				break;
			case 0x1210E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GIR3 TIMES LU PLUS IGI");
				break;
			case 0x1210F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GIR3 TIMES PA");
				break;
			case 0x12110:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GISAL");
				break;
			case 0x12111:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GISH");
				break;
			case 0x12112:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GISH CROSSING GISH");
				break;
			case 0x12113:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GISH TIMES BAD");
				break;
			case 0x12114:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GISH TIMES TAK4");
				break;
			case 0x12115:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GISH TENU");
				break;
			case 0x12116:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GU");
				break;
			case 0x12117:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GU CROSSING GU");
				break;
			case 0x12118:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GU2");
				break;
			case 0x12119:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GU2 TIMES KAK");
				break;
			case 0x1211A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GU2 TIMES KAK TIMES IGI GUNU");
				break;
			case 0x1211B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GU2 TIMES NUN");
				break;
			case 0x1211C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GU2 TIMES SAL PLUS TUG2");
				break;
			case 0x1211D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GU2 GUNU");
				break;
			case 0x1211E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GUD");
				break;
			case 0x1211F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GUD TIMES A PLUS KUR");
				break;
			case 0x12120:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GUD TIMES KUR");
				break;
			case 0x12121:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GUD OVER GUD LUGAL");
				break;
			case 0x12122:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GUL");
				break;
			case 0x12123:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GUM");
				break;
			case 0x12124:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GUM TIMES SHE");
				break;
			case 0x12125:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GUR");
				break;
			case 0x12126:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GUR7");
				break;
			case 0x12127:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GURUN");
				break;
			case 0x12128:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GURUSH");
				break;
			case 0x12129:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HA");
				break;
			case 0x1212A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HA TENU");
				break;
			case 0x1212B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HA GUNU");
				break;
			case 0x1212C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HAL");
				break;
			case 0x1212D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI");
				break;
			case 0x1212E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI TIMES ASH");
				break;
			case 0x1212F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI TIMES ASH2");
				break;
			case 0x12130:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI TIMES BAD");
				break;
			case 0x12131:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI TIMES DISH");
				break;
			case 0x12132:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI TIMES GAD");
				break;
			case 0x12133:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI TIMES KIN");
				break;
			case 0x12134:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI TIMES NUN");
				break;
			case 0x12135:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI TIMES SHE");
				break;
			case 0x12136:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI TIMES U");
				break;
			case 0x12137:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HU");
				break;
			case 0x12138:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HUB2");
				break;
			case 0x12139:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HUB2 TIMES AN");
				break;
			case 0x1213A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HUB2 TIMES HAL");
				break;
			case 0x1213B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HUB2 TIMES KASKAL");
				break;
			case 0x1213C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HUB2 TIMES LISH");
				break;
			case 0x1213D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HUB2 TIMES UD");
				break;
			case 0x1213E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HUL2");
				break;
			case 0x1213F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN I");
				break;
			case 0x12140:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN I A");
				break;
			case 0x12141:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IB");
				break;
			case 0x12142:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IDIM");
				break;
			case 0x12143:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IDIM OVER IDIM BUR");
				break;
			case 0x12144:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IDIM OVER IDIM SQUARED");
				break;
			case 0x12145:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IG");
				break;
			case 0x12146:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IGI");
				break;
			case 0x12147:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IGI DIB");
				break;
			case 0x12148:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IGI RI");
				break;
			case 0x12149:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IGI OVER IGI SHIR OVER SHIR UD OVER UD");
				break;
			case 0x1214A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IGI GUNU");
				break;
			case 0x1214B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IL");
				break;
			case 0x1214C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IL TIMES GAN2 TENU");
				break;
			case 0x1214D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IL2");
				break;
			case 0x1214E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IM");
				break;
			case 0x1214F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IM TIMES TAK4");
				break;
			case 0x12150:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IM CROSSING IM");
				break;
			case 0x12151:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IM OPPOSING IM");
				break;
			case 0x12152:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IM SQUARED");
				break;
			case 0x12153:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IMIN");
				break;
			case 0x12154:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IN");
				break;
			case 0x12155:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN IR");
				break;
			case 0x12156:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ISH");
				break;
			case 0x12157:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA");
				break;
			case 0x12158:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES A");
				break;
			case 0x12159:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES AD");
				break;
			case 0x1215A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES AD PLUS KU3");
				break;
			case 0x1215B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES ASH2");
				break;
			case 0x1215C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES BAD");
				break;
			case 0x1215D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES BALAG");
				break;
			case 0x1215E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES BAR");
				break;
			case 0x1215F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES BI");
				break;
			case 0x12160:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES ERIN2");
				break;
			case 0x12161:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES ESH2");
				break;
			case 0x12162:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GA");
				break;
			case 0x12163:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GAL");
				break;
			case 0x12164:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GAN2 TENU");
				break;
			case 0x12165:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GAR");
				break;
			case 0x12166:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GAR PLUS SHA3 PLUS A");
				break;
			case 0x12167:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GI");
				break;
			case 0x12168:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GIR2");
				break;
			case 0x12169:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GISH PLUS SAR");
				break;
			case 0x1216A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GISH CROSSING GISH");
				break;
			case 0x1216B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GU");
				break;
			case 0x1216C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GUR7");
				break;
			case 0x1216D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES IGI");
				break;
			case 0x1216E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES IM");
				break;
			case 0x1216F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES KAK");
				break;
			case 0x12170:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES KI");
				break;
			case 0x12171:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES KID");
				break;
			case 0x12172:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES LI");
				break;
			case 0x12173:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES LU");
				break;
			case 0x12174:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES ME");
				break;
			case 0x12175:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES ME PLUS DU");
				break;
			case 0x12176:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES ME PLUS GI");
				break;
			case 0x12177:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES ME PLUS TE");
				break;
			case 0x12178:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES MI");
				break;
			case 0x12179:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES MI PLUS NUNUZ");
				break;
			case 0x1217A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES NE");
				break;
			case 0x1217B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES NUN");
				break;
			case 0x1217C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES PI");
				break;
			case 0x1217D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES RU");
				break;
			case 0x1217E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES SA");
				break;
			case 0x1217F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES SAR");
				break;
			case 0x12180:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES SHA");
				break;
			case 0x12181:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES SHE");
				break;
			case 0x12182:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES SHID");
				break;
			case 0x12183:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES SHU");
				break;
			case 0x12184:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES SIG");
				break;
			case 0x12185:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES SUHUR");
				break;
			case 0x12186:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES TAR");
				break;
			case 0x12187:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES U");
				break;
			case 0x12188:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES U2");
				break;
			case 0x12189:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES UD");
				break;
			case 0x1218A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES UMUM TIMES PA");
				break;
			case 0x1218B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES USH");
				break;
			case 0x1218C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES ZI");
				break;
			case 0x1218D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA2");
				break;
			case 0x1218E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA2 CROSSING KA2");
				break;
			case 0x1218F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAB");
				break;
			case 0x12190:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAD2");
				break;
			case 0x12191:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAD3");
				break;
			case 0x12192:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAD4");
				break;
			case 0x12193:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAD5");
				break;
			case 0x12194:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAD5 OVER KAD5");
				break;
			case 0x12195:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAK");
				break;
			case 0x12196:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAK TIMES IGI GUNU");
				break;
			case 0x12197:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAL");
				break;
			case 0x12198:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAL TIMES BAD");
				break;
			case 0x12199:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAL CROSSING KAL");
				break;
			case 0x1219A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAM2");
				break;
			case 0x1219B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAM4");
				break;
			case 0x1219C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KASKAL");
				break;
			case 0x1219D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U");
				break;
			case 0x1219E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KASKAL OVER KASKAL LAGAB TIMES U OVER LAGAB TIMES U");
				break;
			case 0x1219F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KESH2");
				break;
			case 0x121A0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KI");
				break;
			case 0x121A1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KI TIMES BAD");
				break;
			case 0x121A2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KI TIMES U");
				break;
			case 0x121A3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KI TIMES UD");
				break;
			case 0x121A4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KID");
				break;
			case 0x121A5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KIN");
				break;
			case 0x121A6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KISAL");
				break;
			case 0x121A7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KISH");
				break;
			case 0x121A8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KISIM5");
				break;
			case 0x121A9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KISIM5 OVER KISIM5");
				break;
			case 0x121AA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KU");
				break;
			case 0x121AB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KU OVER HI TIMES ASH2 KU OVER HI TIMES ASH2");
				break;
			case 0x121AC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KU3");
				break;
			case 0x121AD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KU4");
				break;
			case 0x121AE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KU4 VARIANT FORM");
				break;
			case 0x121AF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KU7");
				break;
			case 0x121B0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KUL");
				break;
			case 0x121B1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KUL GUNU");
				break;
			case 0x121B2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KUN");
				break;
			case 0x121B3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KUR");
				break;
			case 0x121B4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KUR OPPOSING KUR");
				break;
			case 0x121B5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KUSHU2");
				break;
			case 0x121B6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KWU318");
				break;
			case 0x121B7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LA");
				break;
			case 0x121B8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB");
				break;
			case 0x121B9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES A");
				break;
			case 0x121BA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES A PLUS DA PLUS HA");
				break;
			case 0x121BB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES A PLUS GAR");
				break;
			case 0x121BC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES A PLUS LAL");
				break;
			case 0x121BD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES AL");
				break;
			case 0x121BE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES AN");
				break;
			case 0x121BF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES ASH ZIDA TENU");
				break;
			case 0x121C0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES BAD");
				break;
			case 0x121C1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES BI");
				break;
			case 0x121C2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES DAR");
				break;
			case 0x121C3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES EN");
				break;
			case 0x121C4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES GA");
				break;
			case 0x121C5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES GAR");
				break;
			case 0x121C6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES GUD");
				break;
			case 0x121C7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES GUD PLUS GUD");
				break;
			case 0x121C8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES HA");
				break;
			case 0x121C9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES HAL");
				break;
			case 0x121CA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES HI TIMES NUN");
				break;
			case 0x121CB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES IGI GUNU");
				break;
			case 0x121CC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES IM");
				break;
			case 0x121CD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES IM PLUS HA");
				break;
			case 0x121CE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES IM PLUS LU");
				break;
			case 0x121CF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES KI");
				break;
			case 0x121D0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES KIN");
				break;
			case 0x121D1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES KU3");
				break;
			case 0x121D2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES KUL");
				break;
			case 0x121D3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES KUL PLUS HI PLUS A");
				break;
			case 0x121D4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES LAGAB");
				break;
			case 0x121D5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES LISH");
				break;
			case 0x121D6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES LU");
				break;
			case 0x121D7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES LUL");
				break;
			case 0x121D8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES ME");
				break;
			case 0x121D9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES ME PLUS EN");
				break;
			case 0x121DA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES MUSH");
				break;
			case 0x121DB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES NE");
				break;
			case 0x121DC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES SHE PLUS SUM");
				break;
			case 0x121DD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH PLUS ERIN2");
				break;
			case 0x121DE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH TENU");
				break;
			case 0x121DF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES SHU2");
				break;
			case 0x121E0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES SHU2 PLUS SHU2");
				break;
			case 0x121E1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES SUM");
				break;
			case 0x121E2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES TAG");
				break;
			case 0x121E3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES TAK4");
				break;
			case 0x121E4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES TE PLUS A PLUS SU PLUS NA");
				break;
			case 0x121E5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES U");
				break;
			case 0x121E6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES U PLUS A");
				break;
			case 0x121E7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES U PLUS U PLUS U");
				break;
			case 0x121E8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES U2 PLUS ASH");
				break;
			case 0x121E9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES UD");
				break;
			case 0x121EA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES USH");
				break;
			case 0x121EB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB SQUARED");
				break;
			case 0x121EC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAR");
				break;
			case 0x121ED:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAR TIMES SHE");
				break;
			case 0x121EE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAR TIMES SHE PLUS SUM");
				break;
			case 0x121EF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAR GUNU");
				break;
			case 0x121F0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAR GUNU OVER LAGAR GUNU SHE");
				break;
			case 0x121F1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAHSHU");
				break;
			case 0x121F2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAL");
				break;
			case 0x121F3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAL TIMES LAL");
				break;
			case 0x121F4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAM");
				break;
			case 0x121F5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAM TIMES KUR");
				break;
			case 0x121F6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAM TIMES KUR PLUS RU");
				break;
			case 0x121F7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LI");
				break;
			case 0x121F8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LIL");
				break;
			case 0x121F9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LIMMU2");
				break;
			case 0x121FA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LISH");
				break;
			case 0x121FB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU");
				break;
			case 0x121FC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU TIMES BAD");
				break;
			case 0x121FD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2");
				break;
			case 0x121FE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES AL");
				break;
			case 0x121FF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES BAD");
				break;
			case 0x12200:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES ESH2");
				break;
			case 0x12201:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES ESH2 TENU");
				break;
			case 0x12202:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES GAN2 TENU");
				break;
			case 0x12203:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES HI TIMES BAD");
				break;
			case 0x12204:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES IM");
				break;
			case 0x12205:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES KAD2");
				break;
			case 0x12206:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES KAD3");
				break;
			case 0x12207:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES KAD3 PLUS ASH");
				break;
			case 0x12208:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES KI");
				break;
			case 0x12209:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES LA PLUS ASH");
				break;
			case 0x1220A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES LAGAB");
				break;
			case 0x1220B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES ME PLUS EN");
				break;
			case 0x1220C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES NE");
				break;
			case 0x1220D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES NU");
				break;
			case 0x1220E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES SI PLUS ASH");
				break;
			case 0x1220F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES SIK2 PLUS BU");
				break;
			case 0x12210:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES TUG2");
				break;
			case 0x12211:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TENU");
				break;
			case 0x12212:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 CROSSING LU2");
				break;
			case 0x12213:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 OPPOSING LU2");
				break;
			case 0x12214:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 SQUARED");
				break;
			case 0x12215:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 SHESHIG");
				break;
			case 0x12216:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU3");
				break;
			case 0x12217:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LUGAL");
				break;
			case 0x12218:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LUGAL OVER LUGAL");
				break;
			case 0x12219:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LUGAL OPPOSING LUGAL");
				break;
			case 0x1221A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LUGAL SHESHIG");
				break;
			case 0x1221B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LUH");
				break;
			case 0x1221C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LUL");
				break;
			case 0x1221D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LUM");
				break;
			case 0x1221E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LUM OVER LUM");
				break;
			case 0x1221F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LUM OVER LUM GAR OVER GAR");
				break;
			case 0x12220:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MA");
				break;
			case 0x12221:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MA TIMES TAK4");
				break;
			case 0x12222:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MA GUNU");
				break;
			case 0x12223:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MA2");
				break;
			case 0x12224:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MAH");
				break;
			case 0x12225:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MAR");
				break;
			case 0x12226:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MASH");
				break;
			case 0x12227:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MASH2");
				break;
			case 0x12228:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ME");
				break;
			case 0x12229:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MES");
				break;
			case 0x1222A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MI");
				break;
			case 0x1222B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MIN");
				break;
			case 0x1222C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MU");
				break;
			case 0x1222D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MU OVER MU");
				break;
			case 0x1222E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUG");
				break;
			case 0x1222F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUG GUNU");
				break;
			case 0x12230:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUNSUB");
				break;
			case 0x12231:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MURGU2");
				break;
			case 0x12232:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH");
				break;
			case 0x12233:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH TIMES A");
				break;
			case 0x12234:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH TIMES KUR");
				break;
			case 0x12235:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH TIMES ZA");
				break;
			case 0x12236:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH OVER MUSH");
				break;
			case 0x12237:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH OVER MUSH TIMES A PLUS NA");
				break;
			case 0x12238:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH CROSSING MUSH");
				break;
			case 0x12239:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH3");
				break;
			case 0x1223A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH3 TIMES A");
				break;
			case 0x1223B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH3 TIMES A PLUS DI");
				break;
			case 0x1223C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH3 TIMES DI");
				break;
			case 0x1223D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH3 GUNU");
				break;
			case 0x1223E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NA");
				break;
			case 0x1223F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NA2");
				break;
			case 0x12240:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NAGA");
				break;
			case 0x12241:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NAGA INVERTED");
				break;
			case 0x12242:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NAGA TIMES SHU TENU");
				break;
			case 0x12243:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NAGA OPPOSING NAGA");
				break;
			case 0x12244:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NAGAR");
				break;
			case 0x12245:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NAM NUTILLU");
				break;
			case 0x12246:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NAM");
				break;
			case 0x12247:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NAM2");
				break;
			case 0x12248:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NE");
				break;
			case 0x12249:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NE TIMES A");
				break;
			case 0x1224A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NE TIMES UD");
				break;
			case 0x1224B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NE SHESHIG");
				break;
			case 0x1224C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NI");
				break;
			case 0x1224D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NI TIMES E");
				break;
			case 0x1224E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NI2");
				break;
			case 0x1224F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NIM");
				break;
			case 0x12250:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NIM TIMES GAN2 TENU");
				break;
			case 0x12251:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NIM TIMES GAR PLUS GAN2 TENU");
				break;
			case 0x12252:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2");
				break;
			case 0x12253:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES AN");
				break;
			case 0x12254:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES ASH");
				break;
			case 0x12255:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES ASH PLUS ASH");
				break;
			case 0x12256:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES GUD");
				break;
			case 0x12257:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES ME PLUS GAN2 TENU");
				break;
			case 0x12258:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES NE");
				break;
			case 0x12259:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES NUN");
				break;
			case 0x1225A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES SHE");
				break;
			case 0x1225B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES SHE PLUS A AN");
				break;
			case 0x1225C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES SHE PLUS ASH");
				break;
			case 0x1225D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES SHE PLUS ASH PLUS ASH");
				break;
			case 0x1225E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES U2 PLUS ASH");
				break;
			case 0x1225F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES USH");
				break;
			case 0x12260:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NISAG");
				break;
			case 0x12261:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NU");
				break;
			case 0x12262:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NU11");
				break;
			case 0x12263:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUN");
				break;
			case 0x12264:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUN LAGAR TIMES GAR");
				break;
			case 0x12265:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUN LAGAR TIMES MASH");
				break;
			case 0x12266:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUN LAGAR TIMES SAL");
				break;
			case 0x12267:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUN LAGAR TIMES SAL OVER NUN LAGAR TIMES SAL");
				break;
			case 0x12268:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUN LAGAR TIMES USH");
				break;
			case 0x12269:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUN TENU");
				break;
			case 0x1226A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUN OVER NUN");
				break;
			case 0x1226B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUN CROSSING NUN");
				break;
			case 0x1226C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUN CROSSING NUN LAGAR OVER LAGAR");
				break;
			case 0x1226D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ");
				break;
			case 0x1226E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ AB2 TIMES ASHGAB");
				break;
			case 0x1226F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ AB2 TIMES BI");
				break;
			case 0x12270:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ AB2 TIMES DUG");
				break;
			case 0x12271:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ AB2 TIMES GUD");
				break;
			case 0x12272:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ AB2 TIMES IGI GUNU");
				break;
			case 0x12273:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ AB2 TIMES KAD3");
				break;
			case 0x12274:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ AB2 TIMES LA");
				break;
			case 0x12275:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ AB2 TIMES NE");
				break;
			case 0x12276:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ AB2 TIMES SILA3");
				break;
			case 0x12277:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ AB2 TIMES U2");
				break;
			case 0x12278:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ KISIM5 TIMES BI");
				break;
			case 0x12279:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NUNUZ KISIM5 TIMES BI U");
				break;
			case 0x1227A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PA");
				break;
			case 0x1227B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PAD");
				break;
			case 0x1227C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PAN");
				break;
			case 0x1227D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PAP");
				break;
			case 0x1227E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PESH2");
				break;
			case 0x1227F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI");
				break;
			case 0x12280:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI TIMES A");
				break;
			case 0x12281:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI TIMES AB");
				break;
			case 0x12282:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI TIMES BI");
				break;
			case 0x12283:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI TIMES BU");
				break;
			case 0x12284:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI TIMES E");
				break;
			case 0x12285:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI TIMES I");
				break;
			case 0x12286:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI TIMES IB");
				break;
			case 0x12287:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI TIMES U");
				break;
			case 0x12288:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI TIMES U2");
				break;
			case 0x12289:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PI CROSSING PI");
				break;
			case 0x1228A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PIRIG");
				break;
			case 0x1228B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PIRIG TIMES KAL");
				break;
			case 0x1228C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PIRIG TIMES UD");
				break;
			case 0x1228D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PIRIG TIMES ZA");
				break;
			case 0x1228E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PIRIG OPPOSING PIRIG");
				break;
			case 0x1228F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN RA");
				break;
			case 0x12290:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN RAB");
				break;
			case 0x12291:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN RI");
				break;
			case 0x12292:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN RU");
				break;
			case 0x12293:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SA");
				break;
			case 0x12294:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG NUTILLU");
				break;
			case 0x12295:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG");
				break;
			case 0x12296:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES A");
				break;
			case 0x12297:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES DU");
				break;
			case 0x12298:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES DUB");
				break;
			case 0x12299:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES HA");
				break;
			case 0x1229A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES KAK");
				break;
			case 0x1229B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES KUR");
				break;
			case 0x1229C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES LUM");
				break;
			case 0x1229D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES MI");
				break;
			case 0x1229E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES NUN");
				break;
			case 0x1229F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES SAL");
				break;
			case 0x122A0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES SHID");
				break;
			case 0x122A1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES TAB");
				break;
			case 0x122A2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES U2");
				break;
			case 0x122A3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES UB");
				break;
			case 0x122A4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES UM");
				break;
			case 0x122A5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES UR");
				break;
			case 0x122A6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES USH");
				break;
			case 0x122A7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG OVER SAG");
				break;
			case 0x122A8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG GUNU");
				break;
			case 0x122A9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAL");
				break;
			case 0x122AA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAL LAGAB TIMES ASH2");
				break;
			case 0x122AB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SANGA2");
				break;
			case 0x122AC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAR");
				break;
			case 0x122AD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA");
				break;
			case 0x122AE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA3");
				break;
			case 0x122AF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA3 TIMES A");
				break;
			case 0x122B0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA3 TIMES BAD");
				break;
			case 0x122B1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA3 TIMES GISH");
				break;
			case 0x122B2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA3 TIMES NE");
				break;
			case 0x122B3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA3 TIMES SHU2");
				break;
			case 0x122B4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA3 TIMES TUR");
				break;
			case 0x122B5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA3 TIMES U");
				break;
			case 0x122B6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA3 TIMES U PLUS A");
				break;
			case 0x122B7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA6");
				break;
			case 0x122B8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHAB6");
				break;
			case 0x122B9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHAR2");
				break;
			case 0x122BA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHE");
				break;
			case 0x122BB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHE HU");
				break;
			case 0x122BC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHE OVER SHE GAD OVER GAD GAR OVER GAR");
				break;
			case 0x122BD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHE OVER SHE TAB OVER TAB GAR OVER GAR");
				break;
			case 0x122BE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHEG9");
				break;
			case 0x122BF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHEN");
				break;
			case 0x122C0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHESH");
				break;
			case 0x122C1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHESH2");
				break;
			case 0x122C2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHESHLAM");
				break;
			case 0x122C3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHID");
				break;
			case 0x122C4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHID TIMES A");
				break;
			case 0x122C5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHID TIMES IM");
				break;
			case 0x122C6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM");
				break;
			case 0x122C7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES A");
				break;
			case 0x122C8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES BAL");
				break;
			case 0x122C9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES BULUG");
				break;
			case 0x122CA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES DIN");
				break;
			case 0x122CB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES GAR");
				break;
			case 0x122CC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES IGI");
				break;
			case 0x122CD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES IGI GUNU");
				break;
			case 0x122CE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES KUSHU2");
				break;
			case 0x122CF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES LUL");
				break;
			case 0x122D0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES MUG");
				break;
			case 0x122D1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIM TIMES SAL");
				break;
			case 0x122D2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHINIG");
				break;
			case 0x122D3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIR");
				break;
			case 0x122D4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIR TENU");
				break;
			case 0x122D5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHIR OVER SHIR BUR OVER BUR");
				break;
			case 0x122D6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHITA");
				break;
			case 0x122D7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHU");
				break;
			case 0x122D8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHU OVER INVERTED SHU");
				break;
			case 0x122D9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHU2");
				break;
			case 0x122DA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHUBUR");
				break;
			case 0x122DB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SI");
				break;
			case 0x122DC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SI GUNU");
				break;
			case 0x122DD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SIG");
				break;
			case 0x122DE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SIG4");
				break;
			case 0x122DF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SIG4 OVER SIG4 SHU2");
				break;
			case 0x122E0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SIK2");
				break;
			case 0x122E1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SILA3");
				break;
			case 0x122E2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SU");
				break;
			case 0x122E3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SU OVER SU");
				break;
			case 0x122E4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SUD");
				break;
			case 0x122E5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SUD2");
				break;
			case 0x122E6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SUHUR");
				break;
			case 0x122E7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SUM");
				break;
			case 0x122E8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SUMASH");
				break;
			case 0x122E9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SUR");
				break;
			case 0x122EA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SUR9");
				break;
			case 0x122EB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TA");
				break;
			case 0x122EC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TA ASTERISK");
				break;
			case 0x122ED:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TA TIMES HI");
				break;
			case 0x122EE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TA TIMES MI");
				break;
			case 0x122EF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TA GUNU");
				break;
			case 0x122F0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAB");
				break;
			case 0x122F1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAB OVER TAB NI OVER NI DISH OVER DISH");
				break;
			case 0x122F2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAB SQUARED");
				break;
			case 0x122F3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAG");
				break;
			case 0x122F4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAG TIMES BI");
				break;
			case 0x122F5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAG TIMES GUD");
				break;
			case 0x122F6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAG TIMES SHE");
				break;
			case 0x122F7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAG TIMES SHU");
				break;
			case 0x122F8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAG TIMES TUG2");
				break;
			case 0x122F9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAG TIMES UD");
				break;
			case 0x122FA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAK4");
				break;
			case 0x122FB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAR");
				break;
			case 0x122FC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TE");
				break;
			case 0x122FD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TE GUNU");
				break;
			case 0x122FE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TI");
				break;
			case 0x122FF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TI TENU");
				break;
			case 0x12300:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TIL");
				break;
			case 0x12301:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TIR");
				break;
			case 0x12302:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TIR TIMES TAK4");
				break;
			case 0x12303:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TIR OVER TIR");
				break;
			case 0x12304:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TIR OVER TIR GAD OVER GAD GAR OVER GAR");
				break;
			case 0x12305:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TU");
				break;
			case 0x12306:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TUG2");
				break;
			case 0x12307:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TUK");
				break;
			case 0x12308:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TUM");
				break;
			case 0x12309:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TUR");
				break;
			case 0x1230A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TUR OVER TUR ZA OVER ZA");
				break;
			case 0x1230B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN U");
				break;
			case 0x1230C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN U GUD");
				break;
			case 0x1230D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN U U U");
				break;
			case 0x1230E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN U OVER U PA OVER PA GAR OVER GAR");
				break;
			case 0x1230F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN U OVER U SUR OVER SUR");
				break;
			case 0x12310:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN U OVER U U REVERSED OVER U REVERSED");
				break;
			case 0x12311:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN U2");
				break;
			case 0x12312:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UB");
				break;
			case 0x12313:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UD");
				break;
			case 0x12314:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UD KUSHU2");
				break;
			case 0x12315:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UD TIMES BAD");
				break;
			case 0x12316:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UD TIMES MI");
				break;
			case 0x12317:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UD TIMES U PLUS U PLUS U");
				break;
			case 0x12318:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UD TIMES U PLUS U PLUS U GUNU");
				break;
			case 0x12319:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UD GUNU");
				break;
			case 0x1231A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UD SHESHIG");
				break;
			case 0x1231B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UD SHESHIG TIMES BAD");
				break;
			case 0x1231C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UDUG");
				break;
			case 0x1231D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UM");
				break;
			case 0x1231E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UM TIMES LAGAB");
				break;
			case 0x1231F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UM TIMES ME PLUS DA");
				break;
			case 0x12320:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UM TIMES SHA3");
				break;
			case 0x12321:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UM TIMES U");
				break;
			case 0x12322:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UMBIN");
				break;
			case 0x12323:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UMUM");
				break;
			case 0x12324:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UMUM TIMES KASKAL");
				break;
			case 0x12325:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UMUM TIMES PA");
				break;
			case 0x12326:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UN");
				break;
			case 0x12327:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UN GUNU");
				break;
			case 0x12328:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR");
				break;
			case 0x12329:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR CROSSING UR");
				break;
			case 0x1232A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR SHESHIG");
				break;
			case 0x1232B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2");
				break;
			case 0x1232C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2 TIMES A PLUS HA");
				break;
			case 0x1232D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2 TIMES A PLUS NA");
				break;
			case 0x1232E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2 TIMES AL");
				break;
			case 0x1232F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2 TIMES HA");
				break;
			case 0x12330:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2 TIMES NUN");
				break;
			case 0x12331:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2 TIMES U2");
				break;
			case 0x12332:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2 TIMES U2 PLUS ASH");
				break;
			case 0x12333:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2 TIMES U2 PLUS BI");
				break;
			case 0x12334:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR4");
				break;
			case 0x12335:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URI");
				break;
			case 0x12336:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URI3");
				break;
			case 0x12337:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU");
				break;
			case 0x12338:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES A");
				break;
			case 0x12339:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES ASHGAB");
				break;
			case 0x1233A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES BAR");
				break;
			case 0x1233B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES DUN");
				break;
			case 0x1233C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES GA");
				break;
			case 0x1233D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES GAL");
				break;
			case 0x1233E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES GAN2 TENU");
				break;
			case 0x1233F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES GAR");
				break;
			case 0x12340:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES GU");
				break;
			case 0x12341:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES HA");
				break;
			case 0x12342:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES IGI");
				break;
			case 0x12343:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES IM");
				break;
			case 0x12344:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES ISH");
				break;
			case 0x12345:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES KI");
				break;
			case 0x12346:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES LUM");
				break;
			case 0x12347:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES MIN");
				break;
			case 0x12348:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES PA");
				break;
			case 0x12349:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES SHE");
				break;
			case 0x1234A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES SIG4");
				break;
			case 0x1234B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES TU");
				break;
			case 0x1234C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES U PLUS GUD");
				break;
			case 0x1234D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES UD");
				break;
			case 0x1234E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES URUDA");
				break;
			case 0x1234F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URUDA");
				break;
			case 0x12350:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URUDA TIMES U");
				break;
			case 0x12351:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN USH");
				break;
			case 0x12352:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN USH TIMES A");
				break;
			case 0x12353:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN USH TIMES KU");
				break;
			case 0x12354:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN USH TIMES KUR");
				break;
			case 0x12355:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN USH TIMES TAK4");
				break;
			case 0x12356:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN USHX");
				break;
			case 0x12357:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN USH2");
				break;
			case 0x12358:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN USHUMX");
				break;
			case 0x12359:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UTUKI");
				break;
			case 0x1235A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UZ3");
				break;
			case 0x1235B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UZ3 TIMES KASKAL");
				break;
			case 0x1235C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UZU");
				break;
			case 0x1235D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZA");
				break;
			case 0x1235E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZA TENU");
				break;
			case 0x1235F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZA SQUARED TIMES KUR");
				break;
			case 0x12360:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZAG");
				break;
			case 0x12361:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZAMX");
				break;
			case 0x12362:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZE2");
				break;
			case 0x12363:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZI");
				break;
			case 0x12364:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZI OVER ZI");
				break;
			case 0x12365:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZI3");
				break;
			case 0x12366:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZIB");
				break;
			case 0x12367:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZIB KABA TENU");
				break;
			case 0x12368:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZIG");
				break;
			case 0x12369:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZIZ2");
				break;
			case 0x1236A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZU");
				break;
			case 0x1236B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZU5");
				break;
			case 0x1236C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZU5 TIMES A");
				break;
			case 0x1236D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZUBUR");
				break;
			case 0x1236E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZUM");
				break;
			case 0x1236F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KAP ELAMITE");
				break;
			case 0x12370:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES NUN");
				break;
			case 0x12371:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB2 TIMES A");
				break;
			case 0x12372:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AMAR TIMES KUG");
				break;
			case 0x12373:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG KISIM5 TIMES U2 PLUS MASH");
				break;
			case 0x12374:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG3");
				break;
			case 0x12375:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DISH PLUS SHU");
				break;
			case 0x12376:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUB TIMES SHE");
				break;
			case 0x12377:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES GUD");
				break;
			case 0x12378:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES SHE");
				break;
			case 0x12379:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES AN PLUS KAK PLUS A");
				break;
			case 0x1237A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES ASH2");
				break;
			case 0x1237B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GE22");
				break;
			case 0x1237C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GIG");
				break;
			case 0x1237D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HUSH");
				break;
			case 0x1237E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES ANSHE");
				break;
			case 0x1237F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES ASH3");
				break;
			case 0x12380:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GISH");
				break;
			case 0x12381:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES GUD");
				break;
			case 0x12382:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES HI TIMES ASH2");
				break;
			case 0x12383:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES LUM");
				break;
			case 0x12384:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES PA");
				break;
			case 0x12385:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES SHUL");
				break;
			case 0x12386:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES TU");
				break;
			case 0x12387:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES UR2");
				break;
			case 0x12388:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES GI");
				break;
			case 0x12389:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 SHESHIG TIMES BAD");
				break;
			case 0x1238A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES ESH2 PLUS LAL");
				break;
			case 0x1238B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES SHU");
				break;
			case 0x1238C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MESH");
				break;
			case 0x1238D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH3 TIMES ZA");
				break;
			case 0x1238E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NA4");
				break;
			case 0x1238F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NIN");
				break;
			case 0x12390:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NIN9");
				break;
			case 0x12391:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES BAL");
				break;
			case 0x12392:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES GI");
				break;
			case 0x12393:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NU11 ROTATED NINETY DEGREES");
				break;
			case 0x12394:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PESH2 ASTERISK");
				break;
			case 0x12395:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN PIR2");
				break;
			case 0x12396:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES IGI GUNU");
				break;
			case 0x12397:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TI2");
				break;
			case 0x12398:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UM TIMES ME");
				break;
			case 0x12399:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN U U");
				break;
			case 0x12400:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO ASH");
				break;
			case 0x12401:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE ASH");
				break;
			case 0x12402:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR ASH");
				break;
			case 0x12403:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE ASH");
				break;
			case 0x12404:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SIX ASH");
				break;
			case 0x12405:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SEVEN ASH");
				break;
			case 0x12406:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN EIGHT ASH");
				break;
			case 0x12407:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NINE ASH");
				break;
			case 0x12408:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE DISH");
				break;
			case 0x12409:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR DISH");
				break;
			case 0x1240A:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE DISH");
				break;
			case 0x1240B:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SIX DISH");
				break;
			case 0x1240C:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SEVEN DISH");
				break;
			case 0x1240D:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN EIGHT DISH");
				break;
			case 0x1240E:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NINE DISH");
				break;
			case 0x1240F:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR U");
				break;
			case 0x12410:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE U");
				break;
			case 0x12411:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SIX U");
				break;
			case 0x12412:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SEVEN U");
				break;
			case 0x12413:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN EIGHT U");
				break;
			case 0x12414:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NINE U");
				break;
			case 0x12415:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE GESH2");
				break;
			case 0x12416:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO GESH2");
				break;
			case 0x12417:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE GESH2");
				break;
			case 0x12418:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR GESH2");
				break;
			case 0x12419:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE GESH2");
				break;
			case 0x1241A:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SIX GESH2");
				break;
			case 0x1241B:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SEVEN GESH2");
				break;
			case 0x1241C:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN EIGHT GESH2");
				break;
			case 0x1241D:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NINE GESH2");
				break;
			case 0x1241E:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE GESHU");
				break;
			case 0x1241F:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO GESHU");
				break;
			case 0x12420:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE GESHU");
				break;
			case 0x12421:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR GESHU");
				break;
			case 0x12422:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE GESHU");
				break;
			case 0x12423:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO SHAR2");
				break;
			case 0x12424:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE SHAR2");
				break;
			case 0x12425:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE SHAR2 VARIANT FORM");
				break;
			case 0x12426:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR SHAR2");
				break;
			case 0x12427:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE SHAR2");
				break;
			case 0x12428:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SIX SHAR2");
				break;
			case 0x12429:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SEVEN SHAR2");
				break;
			case 0x1242A:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN EIGHT SHAR2");
				break;
			case 0x1242B:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NINE SHAR2");
				break;
			case 0x1242C:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE SHARU");
				break;
			case 0x1242D:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO SHARU");
				break;
			case 0x1242E:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE SHARU");
				break;
			case 0x1242F:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE SHARU VARIANT FORM");
				break;
			case 0x12430:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR SHARU");
				break;
			case 0x12431:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE SHARU");
				break;
			case 0x12432:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS DISH");
				break;
			case 0x12433:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SHAR2 TIMES GAL PLUS MIN");
				break;
			case 0x12434:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE BURU");
				break;
			case 0x12435:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO BURU");
				break;
			case 0x12436:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE BURU");
				break;
			case 0x12437:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE BURU VARIANT FORM");
				break;
			case 0x12438:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR BURU");
				break;
			case 0x12439:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE BURU");
				break;
			case 0x1243A:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH16");
				break;
			case 0x1243B:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE VARIANT FORM ESH21");
				break;
			case 0x1243C:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU");
				break;
			case 0x1243D:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU4");
				break;
			case 0x1243E:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU A");
				break;
			case 0x1243F:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR VARIANT FORM LIMMU B");
				break;
			case 0x12440:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SIX VARIANT FORM ASH9");
				break;
			case 0x12441:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN3");
				break;
			case 0x12442:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN A");
				break;
			case 0x12443:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SEVEN VARIANT FORM IMIN B");
				break;
			case 0x12444:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU");
				break;
			case 0x12445:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN EIGHT VARIANT FORM USSU3");
				break;
			case 0x12446:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU");
				break;
			case 0x12447:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU3");
				break;
			case 0x12448:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU4");
				break;
			case 0x12449:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NINE VARIANT FORM ILIMMU A");
				break;
			case 0x1244A:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO ASH TENU");
				break;
			case 0x1244B:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE ASH TENU");
				break;
			case 0x1244C:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR ASH TENU");
				break;
			case 0x1244D:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE ASH TENU");
				break;
			case 0x1244E:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SIX ASH TENU");
				break;
			case 0x1244F:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE BAN2");
				break;
			case 0x12450:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO BAN2");
				break;
			case 0x12451:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN THREE BAN2");
				break;
			case 0x12452:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR BAN2");
				break;
			case 0x12453:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR BAN2 VARIANT FORM");
				break;
			case 0x12454:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE BAN2");
				break;
			case 0x12455:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE BAN2 VARIANT FORM");
				break;
			case 0x12456:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NIGIDAMIN");
				break;
			case 0x12457:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NIGIDAESH");
				break;
			case 0x12458:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE ESHE3");
				break;
			case 0x12459:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO ESHE3");
				break;
			case 0x1245A:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE THIRD DISH");
				break;
			case 0x1245B:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO THIRDS DISH");
				break;
			case 0x1245C:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE SIXTHS DISH");
				break;
			case 0x1245D:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE THIRD VARIANT FORM A");
				break;
			case 0x1245E:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN TWO THIRDS VARIANT FORM A");
				break;
			case 0x1245F:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE EIGHTH ASH");
				break;
			case 0x12460:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE QUARTER ASH");
				break;
			case 0x12461:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE SIXTH");
				break;
			case 0x12462:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN OLD ASSYRIAN ONE QUARTER");
				break;
			case 0x12463:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE QUARTER GUR");
				break;
			case 0x12464:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ONE HALF GUR");
				break;
			case 0x12465:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ELAMITE ONE THIRD");
				break;
			case 0x12466:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ELAMITE TWO THIRDS");
				break;
			case 0x12467:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ELAMITE FORTY");
				break;
			case 0x12468:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN ELAMITE FIFTY");
				break;
			case 0x12469:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FOUR U VARIANT FORM");
				break;
			case 0x1246A:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN FIVE U VARIANT FORM");
				break;
			case 0x1246B:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SIX U VARIANT FORM");
				break;
			case 0x1246C:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN SEVEN U VARIANT FORM");
				break;
			case 0x1246D:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN EIGHT U VARIANT FORM");
				break;
			case 0x1246E:
				strcpy_s(buf, buf_size, "CUNEIFORM NUMERIC SIGN NINE U VARIANT FORM");
				break;
			case 0x12470:
				strcpy_s(buf, buf_size, "CUNEIFORM PUNCTUATION SIGN OLD ASSYRIAN WORD DIVIDER");
				break;
			case 0x12471:
				strcpy_s(buf, buf_size, "CUNEIFORM PUNCTUATION SIGN VERTICAL COLON");
				break;
			case 0x12472:
				strcpy_s(buf, buf_size, "CUNEIFORM PUNCTUATION SIGN DIAGONAL COLON");
				break;
			case 0x12473:
				strcpy_s(buf, buf_size, "CUNEIFORM PUNCTUATION SIGN DIAGONAL TRICOLON");
				break;
			case 0x12474:
				strcpy_s(buf, buf_size, "CUNEIFORM PUNCTUATION SIGN DIAGONAL QUADCOLON");
				break;
			case 0x12480:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES NUN TENU");
				break;
			case 0x12481:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AB TIMES SHU2");
				break;
			case 0x12482:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN AD TIMES ESH2");
				break;
			case 0x12483:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BAD TIMES DISH TENU");
				break;
			case 0x12484:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BAHAR2 TIMES AB2");
				break;
			case 0x12485:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BAHAR2 TIMES NI");
				break;
			case 0x12486:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BAHAR2 TIMES ZA");
				break;
			case 0x12487:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN BU OVER BU TIMES NA2");
				break;
			case 0x12488:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DA TIMES TAK4");
				break;
			case 0x12489:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DAG TIMES KUR");
				break;
			case 0x1248A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DIM TIMES IGI");
				break;
			case 0x1248B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DIM TIMES U U U");
				break;
			case 0x1248C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DIM2 TIMES UD");
				break;
			case 0x1248D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES ANSHE");
				break;
			case 0x1248E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES ASH");
				break;
			case 0x1248F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES ASH AT LEFT");
				break;
			case 0x12490:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES DIN");
				break;
			case 0x12491:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES DUN");
				break;
			case 0x12492:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES ERIN2");
				break;
			case 0x12493:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES GA");
				break;
			case 0x12494:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES GI");
				break;
			case 0x12495:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES GIR2 GUNU");
				break;
			case 0x12496:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES GISH");
				break;
			case 0x12497:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES HA");
				break;
			case 0x12498:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES HI");
				break;
			case 0x12499:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES IGI GUNU");
				break;
			case 0x1249A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES KASKAL");
				break;
			case 0x1249B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES KUR");
				break;
			case 0x1249C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES KUSHU2");
				break;
			case 0x1249D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES KUSHU2 PLUS KASKAL");
				break;
			case 0x1249E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES LAK-020");
				break;
			case 0x1249F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES LAM");
				break;
			case 0x124A0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES LAM TIMES KUR");
				break;
			case 0x124A1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES LUH PLUS GISH");
				break;
			case 0x124A2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES MASH");
				break;
			case 0x124A3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES MES");
				break;
			case 0x124A4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES MI");
				break;
			case 0x124A5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES NI");
				break;
			case 0x124A6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES PI");
				break;
			case 0x124A7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES SHE");
				break;
			case 0x124A8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN DUG TIMES SI GUNU");
				break;
			case 0x124A9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E2 TIMES KUR");
				break;
			case 0x124AA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN E2 TIMES PAP");
				break;
			case 0x124AB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ERIN2 X");
				break;
			case 0x124AC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ESH2 CROSSING ESH2");
				break;
			case 0x124AD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN SHESHIG TIMES ASH");
				break;
			case 0x124AE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN SHESHIG TIMES HI");
				break;
			case 0x124AF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN SHESHIG TIMES IGI GUNU");
				break;
			case 0x124B0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN SHESHIG TIMES LA");
				break;
			case 0x124B1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN SHESHIG TIMES LAL");
				break;
			case 0x124B2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN SHESHIG TIMES ME");
				break;
			case 0x124B3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN SHESHIG TIMES MES");
				break;
			case 0x124B4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN SHESHIG TIMES SU");
				break;
			case 0x124B5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN EZEN TIMES SU");
				break;
			case 0x124B6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES BAHAR2");
				break;
			case 0x124B7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES DIM GUNU");
				break;
			case 0x124B8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES DUG TIMES IGI GUNU");
				break;
			case 0x124B9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES DUG TIMES KASKAL");
				break;
			case 0x124BA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES EREN");
				break;
			case 0x124BB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES GA");
				break;
			case 0x124BC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES GAR PLUS DI");
				break;
			case 0x124BD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES GAR PLUS NE");
				break;
			case 0x124BE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES HA PLUS A");
				break;
			case 0x124BF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES KUSHU2 PLUS KASKAL");
				break;
			case 0x124C0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES LAM");
				break;
			case 0x124C1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES LAM TIMES KUR");
				break;
			case 0x124C2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES LUH");
				break;
			case 0x124C3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES MUSH");
				break;
			case 0x124C4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES NE");
				break;
			case 0x124C5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES NE PLUS E2");
				break;
			case 0x124C6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES NE PLUS GI");
				break;
			case 0x124C7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES SHIM");
				break;
			case 0x124C8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GA2 TIMES ZIZ2");
				break;
			case 0x124C9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GABA ROTATED NINETY DEGREES");
				break;
			case 0x124CA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GESHTIN TIMES U");
				break;
			case 0x124CB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GISH TIMES GISH CROSSING GISH");
				break;
			case 0x124CC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GU2 TIMES IGI GUNU");
				break;
			case 0x124CD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN GUD PLUS GISH TIMES TAK4");
				break;
			case 0x124CE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HA TENU GUNU");
				break;
			case 0x124CF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN HI TIMES ASH OVER HI TIMES ASH");
				break;
			case 0x124D0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES BU");
				break;
			case 0x124D1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES KA");
				break;
			case 0x124D2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES U U U");
				break;
			case 0x124D3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN KA TIMES UR");
				break;
			case 0x124D4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAGAB TIMES ZU OVER ZU");
				break;
			case 0x124D5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-003");
				break;
			case 0x124D6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-021");
				break;
			case 0x124D7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-025");
				break;
			case 0x124D8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-030");
				break;
			case 0x124D9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-050");
				break;
			case 0x124DA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-051");
				break;
			case 0x124DB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-062");
				break;
			case 0x124DC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-079 OVER LAK-079 GUNU");
				break;
			case 0x124DD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-080");
				break;
			case 0x124DE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-081 OVER LAK-081");
				break;
			case 0x124DF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-092");
				break;
			case 0x124E0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-130");
				break;
			case 0x124E1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-142");
				break;
			case 0x124E2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-210");
				break;
			case 0x124E3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-219");
				break;
			case 0x124E4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-220");
				break;
			case 0x124E5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-225");
				break;
			case 0x124E6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-228");
				break;
			case 0x124E7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-238");
				break;
			case 0x124E8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-265");
				break;
			case 0x124E9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-266");
				break;
			case 0x124EA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-343");
				break;
			case 0x124EB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-347");
				break;
			case 0x124EC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-348");
				break;
			case 0x124ED:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-383");
				break;
			case 0x124EE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-384");
				break;
			case 0x124EF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-390");
				break;
			case 0x124F0:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-441");
				break;
			case 0x124F1:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-449");
				break;
			case 0x124F2:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-449 TIMES GU");
				break;
			case 0x124F3:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-449 TIMES IGI");
				break;
			case 0x124F4:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-449 TIMES PAP PLUS LU3");
				break;
			case 0x124F5:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-449 TIMES PAP PLUS PAP PLUS LU3");
				break;
			case 0x124F6:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-449 TIMES U2 PLUS BA");
				break;
			case 0x124F7:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-450");
				break;
			case 0x124F8:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-457");
				break;
			case 0x124F9:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-470");
				break;
			case 0x124FA:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-483");
				break;
			case 0x124FB:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-490");
				break;
			case 0x124FC:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-492");
				break;
			case 0x124FD:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-493");
				break;
			case 0x124FE:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-495");
				break;
			case 0x124FF:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-550");
				break;
			case 0x12500:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-608");
				break;
			case 0x12501:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617");
				break;
			case 0x12502:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617 TIMES ASH");
				break;
			case 0x12503:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617 TIMES BAD");
				break;
			case 0x12504:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617 TIMES DUN3 GUNU GUNU");
				break;
			case 0x12505:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617 TIMES KU3");
				break;
			case 0x12506:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617 TIMES LA");
				break;
			case 0x12507:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617 TIMES TAR");
				break;
			case 0x12508:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617 TIMES TE");
				break;
			case 0x12509:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617 TIMES U2");
				break;
			case 0x1250A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617 TIMES UD");
				break;
			case 0x1250B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-617 TIMES URUDA");
				break;
			case 0x1250C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-636");
				break;
			case 0x1250D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-648");
				break;
			case 0x1250E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-648 TIMES DUB");
				break;
			case 0x1250F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-648 TIMES GA");
				break;
			case 0x12510:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-648 TIMES IGI");
				break;
			case 0x12511:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-648 TIMES IGI GUNU");
				break;
			case 0x12512:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-648 TIMES NI");
				break;
			case 0x12513:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-648 TIMES PAP PLUS PAP PLUS LU3");
				break;
			case 0x12514:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-648 TIMES SHESH PLUS KI");
				break;
			case 0x12515:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-648 TIMES UD");
				break;
			case 0x12516:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-648 TIMES URUDA");
				break;
			case 0x12517:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-724");
				break;
			case 0x12518:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LAK-749");
				break;
			case 0x12519:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 GUNU TIMES ASH");
				break;
			case 0x1251A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES DISH");
				break;
			case 0x1251B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES HAL");
				break;
			case 0x1251C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES PAP");
				break;
			case 0x1251D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES PAP PLUS PAP PLUS LU3");
				break;
			case 0x1251E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN LU2 TIMES TAK4");
				break;
			case 0x1251F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MI PLUS ZA7");
				break;
			case 0x12520:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH OVER MUSH TIMES GA");
				break;
			case 0x12521:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN MUSH OVER MUSH TIMES KAK");
				break;
			case 0x12522:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES DIM GUNU");
				break;
			case 0x12523:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES GISH");
				break;
			case 0x12524:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES GUL");
				break;
			case 0x12525:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES HI");
				break;
			case 0x12526:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES KESH2");
				break;
			case 0x12527:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES LAK-050");
				break;
			case 0x12528:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES MASH");
				break;
			case 0x12529:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES PAP PLUS PAP");
				break;
			case 0x1252A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES U");
				break;
			case 0x1252B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES U PLUS U");
				break;
			case 0x1252C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN NINDA2 TIMES URUDA");
				break;
			case 0x1252D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG GUNU TIMES HA");
				break;
			case 0x1252E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES EN");
				break;
			case 0x1252F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES SHE AT LEFT");
				break;
			case 0x12530:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SAG TIMES TAK4");
				break;
			case 0x12531:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHA6 TENU");
				break;
			case 0x12532:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHE OVER SHE");
				break;
			case 0x12533:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHE PLUS HUB2");
				break;
			case 0x12534:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHE PLUS NAM2");
				break;
			case 0x12535:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHE PLUS SAR");
				break;
			case 0x12536:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHU2 PLUS DUG TIMES NI");
				break;
			case 0x12537:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SHU2 PLUS E2 TIMES AN");
				break;
			case 0x12538:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN SI TIMES TAK4");
				break;
			case 0x12539:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TAK4 PLUS SAG");
				break;
			case 0x1253A:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TUM TIMES GAN2 TENU");
				break;
			case 0x1253B:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN TUM TIMES THREE DISH");
				break;
			case 0x1253C:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2 INVERTED");
				break;
			case 0x1253D:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN UR2 TIMES UD");
				break;
			case 0x1253E:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES DARA3");
				break;
			case 0x1253F:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES LAK-668");
				break;
			case 0x12540:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN URU TIMES LU3");
				break;
			case 0x12541:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZA7");
				break;
			case 0x12542:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZU OVER ZU PLUS SAR");
				break;
			case 0x12543:
				strcpy_s(buf, buf_size, "CUNEIFORM SIGN ZU5 TIMES THREE DISH TENU");
				break;
			case 0x13000:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A001");
				break;
			case 0x13001:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A002");
				break;
			case 0x13002:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A003");
				break;
			case 0x13003:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A004");
				break;
			case 0x13004:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A005");
				break;
			case 0x13005:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A005A");
				break;
			case 0x13006:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A006");
				break;
			case 0x13007:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A006A");
				break;
			case 0x13008:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A006B");
				break;
			case 0x13009:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A007");
				break;
			case 0x1300A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A008");
				break;
			case 0x1300B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A009");
				break;
			case 0x1300C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A010");
				break;
			case 0x1300D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A011");
				break;
			case 0x1300E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A012");
				break;
			case 0x1300F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A013");
				break;
			case 0x13010:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A014");
				break;
			case 0x13011:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A014A");
				break;
			case 0x13012:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A015");
				break;
			case 0x13013:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A016");
				break;
			case 0x13014:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A017");
				break;
			case 0x13015:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A017A");
				break;
			case 0x13016:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A018");
				break;
			case 0x13017:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A019");
				break;
			case 0x13018:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A020");
				break;
			case 0x13019:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A021");
				break;
			case 0x1301A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A022");
				break;
			case 0x1301B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A023");
				break;
			case 0x1301C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A024");
				break;
			case 0x1301D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A025");
				break;
			case 0x1301E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A026");
				break;
			case 0x1301F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A027");
				break;
			case 0x13020:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A028");
				break;
			case 0x13021:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A029");
				break;
			case 0x13022:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A030");
				break;
			case 0x13023:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A031");
				break;
			case 0x13024:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A032");
				break;
			case 0x13025:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A032A");
				break;
			case 0x13026:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A033");
				break;
			case 0x13027:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A034");
				break;
			case 0x13028:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A035");
				break;
			case 0x13029:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A036");
				break;
			case 0x1302A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A037");
				break;
			case 0x1302B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A038");
				break;
			case 0x1302C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A039");
				break;
			case 0x1302D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A040");
				break;
			case 0x1302E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A040A");
				break;
			case 0x1302F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A041");
				break;
			case 0x13030:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A042");
				break;
			case 0x13031:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A042A");
				break;
			case 0x13032:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A043");
				break;
			case 0x13033:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A043A");
				break;
			case 0x13034:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A044");
				break;
			case 0x13035:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A045");
				break;
			case 0x13036:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A045A");
				break;
			case 0x13037:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A046");
				break;
			case 0x13038:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A047");
				break;
			case 0x13039:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A048");
				break;
			case 0x1303A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A049");
				break;
			case 0x1303B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A050");
				break;
			case 0x1303C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A051");
				break;
			case 0x1303D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A052");
				break;
			case 0x1303E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A053");
				break;
			case 0x1303F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A054");
				break;
			case 0x13040:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A055");
				break;
			case 0x13041:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A056");
				break;
			case 0x13042:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A057");
				break;
			case 0x13043:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A058");
				break;
			case 0x13044:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A059");
				break;
			case 0x13045:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A060");
				break;
			case 0x13046:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A061");
				break;
			case 0x13047:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A062");
				break;
			case 0x13048:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A063");
				break;
			case 0x13049:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A064");
				break;
			case 0x1304A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A065");
				break;
			case 0x1304B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A066");
				break;
			case 0x1304C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A067");
				break;
			case 0x1304D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A068");
				break;
			case 0x1304E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A069");
				break;
			case 0x1304F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH A070");
				break;
			case 0x13050:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH B001");
				break;
			case 0x13051:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH B002");
				break;
			case 0x13052:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH B003");
				break;
			case 0x13053:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH B004");
				break;
			case 0x13054:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH B005");
				break;
			case 0x13055:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH B005A");
				break;
			case 0x13056:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH B006");
				break;
			case 0x13057:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH B007");
				break;
			case 0x13058:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH B008");
				break;
			case 0x13059:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH B009");
				break;
			case 0x1305A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C001");
				break;
			case 0x1305B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C002");
				break;
			case 0x1305C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C002A");
				break;
			case 0x1305D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C002B");
				break;
			case 0x1305E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C002C");
				break;
			case 0x1305F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C003");
				break;
			case 0x13060:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C004");
				break;
			case 0x13061:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C005");
				break;
			case 0x13062:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C006");
				break;
			case 0x13063:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C007");
				break;
			case 0x13064:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C008");
				break;
			case 0x13065:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C009");
				break;
			case 0x13066:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C010");
				break;
			case 0x13067:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C010A");
				break;
			case 0x13068:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C011");
				break;
			case 0x13069:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C012");
				break;
			case 0x1306A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C013");
				break;
			case 0x1306B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C014");
				break;
			case 0x1306C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C015");
				break;
			case 0x1306D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C016");
				break;
			case 0x1306E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C017");
				break;
			case 0x1306F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C018");
				break;
			case 0x13070:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C019");
				break;
			case 0x13071:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C020");
				break;
			case 0x13072:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C021");
				break;
			case 0x13073:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C022");
				break;
			case 0x13074:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C023");
				break;
			case 0x13075:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH C024");
				break;
			case 0x13076:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D001");
				break;
			case 0x13077:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D002");
				break;
			case 0x13078:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D003");
				break;
			case 0x13079:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D004");
				break;
			case 0x1307A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D005");
				break;
			case 0x1307B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D006");
				break;
			case 0x1307C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D007");
				break;
			case 0x1307D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D008");
				break;
			case 0x1307E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D008A");
				break;
			case 0x1307F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D009");
				break;
			case 0x13080:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D010");
				break;
			case 0x13081:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D011");
				break;
			case 0x13082:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D012");
				break;
			case 0x13083:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D013");
				break;
			case 0x13084:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D014");
				break;
			case 0x13085:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D015");
				break;
			case 0x13086:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D016");
				break;
			case 0x13087:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D017");
				break;
			case 0x13088:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D018");
				break;
			case 0x13089:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D019");
				break;
			case 0x1308A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D020");
				break;
			case 0x1308B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D021");
				break;
			case 0x1308C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D022");
				break;
			case 0x1308D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D023");
				break;
			case 0x1308E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D024");
				break;
			case 0x1308F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D025");
				break;
			case 0x13090:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D026");
				break;
			case 0x13091:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D027");
				break;
			case 0x13092:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D027A");
				break;
			case 0x13093:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D028");
				break;
			case 0x13094:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D029");
				break;
			case 0x13095:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D030");
				break;
			case 0x13096:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D031");
				break;
			case 0x13097:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D031A");
				break;
			case 0x13098:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D032");
				break;
			case 0x13099:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D033");
				break;
			case 0x1309A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D034");
				break;
			case 0x1309B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D034A");
				break;
			case 0x1309C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D035");
				break;
			case 0x1309D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D036");
				break;
			case 0x1309E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D037");
				break;
			case 0x1309F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D038");
				break;
			case 0x130A0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D039");
				break;
			case 0x130A1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D040");
				break;
			case 0x130A2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D041");
				break;
			case 0x130A3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D042");
				break;
			case 0x130A4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D043");
				break;
			case 0x130A5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D044");
				break;
			case 0x130A6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D045");
				break;
			case 0x130A7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D046");
				break;
			case 0x130A8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D046A");
				break;
			case 0x130A9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D047");
				break;
			case 0x130AA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D048");
				break;
			case 0x130AB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D048A");
				break;
			case 0x130AC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D049");
				break;
			case 0x130AD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D050");
				break;
			case 0x130AE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D050A");
				break;
			case 0x130AF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D050B");
				break;
			case 0x130B0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D050C");
				break;
			case 0x130B1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D050D");
				break;
			case 0x130B2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D050E");
				break;
			case 0x130B3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D050F");
				break;
			case 0x130B4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D050G");
				break;
			case 0x130B5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D050H");
				break;
			case 0x130B6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D050I");
				break;
			case 0x130B7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D051");
				break;
			case 0x130B8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D052");
				break;
			case 0x130B9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D052A");
				break;
			case 0x130BA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D053");
				break;
			case 0x130BB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D054");
				break;
			case 0x130BC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D054A");
				break;
			case 0x130BD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D055");
				break;
			case 0x130BE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D056");
				break;
			case 0x130BF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D057");
				break;
			case 0x130C0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D058");
				break;
			case 0x130C1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D059");
				break;
			case 0x130C2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D060");
				break;
			case 0x130C3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D061");
				break;
			case 0x130C4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D062");
				break;
			case 0x130C5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D063");
				break;
			case 0x130C6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D064");
				break;
			case 0x130C7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D065");
				break;
			case 0x130C8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D066");
				break;
			case 0x130C9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D067");
				break;
			case 0x130CA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D067A");
				break;
			case 0x130CB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D067B");
				break;
			case 0x130CC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D067C");
				break;
			case 0x130CD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D067D");
				break;
			case 0x130CE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D067E");
				break;
			case 0x130CF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D067F");
				break;
			case 0x130D0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D067G");
				break;
			case 0x130D1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH D067H");
				break;
			case 0x130D2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E001");
				break;
			case 0x130D3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E002");
				break;
			case 0x130D4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E003");
				break;
			case 0x130D5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E004");
				break;
			case 0x130D6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E005");
				break;
			case 0x130D7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E006");
				break;
			case 0x130D8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E007");
				break;
			case 0x130D9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E008");
				break;
			case 0x130DA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E008A");
				break;
			case 0x130DB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E009");
				break;
			case 0x130DC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E009A");
				break;
			case 0x130DD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E010");
				break;
			case 0x130DE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E011");
				break;
			case 0x130DF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E012");
				break;
			case 0x130E0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E013");
				break;
			case 0x130E1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E014");
				break;
			case 0x130E2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E015");
				break;
			case 0x130E3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E016");
				break;
			case 0x130E4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E016A");
				break;
			case 0x130E5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E017");
				break;
			case 0x130E6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E017A");
				break;
			case 0x130E7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E018");
				break;
			case 0x130E8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E019");
				break;
			case 0x130E9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E020");
				break;
			case 0x130EA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E020A");
				break;
			case 0x130EB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E021");
				break;
			case 0x130EC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E022");
				break;
			case 0x130ED:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E023");
				break;
			case 0x130EE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E024");
				break;
			case 0x130EF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E025");
				break;
			case 0x130F0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E026");
				break;
			case 0x130F1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E027");
				break;
			case 0x130F2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E028");
				break;
			case 0x130F3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E028A");
				break;
			case 0x130F4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E029");
				break;
			case 0x130F5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E030");
				break;
			case 0x130F6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E031");
				break;
			case 0x130F7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E032");
				break;
			case 0x130F8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E033");
				break;
			case 0x130F9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E034");
				break;
			case 0x130FA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E034A");
				break;
			case 0x130FB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E036");
				break;
			case 0x130FC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E037");
				break;
			case 0x130FD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH E038");
				break;
			case 0x130FE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F001");
				break;
			case 0x130FF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F001A");
				break;
			case 0x13100:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F002");
				break;
			case 0x13101:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F003");
				break;
			case 0x13102:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F004");
				break;
			case 0x13103:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F005");
				break;
			case 0x13104:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F006");
				break;
			case 0x13105:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F007");
				break;
			case 0x13106:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F008");
				break;
			case 0x13107:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F009");
				break;
			case 0x13108:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F010");
				break;
			case 0x13109:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F011");
				break;
			case 0x1310A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F012");
				break;
			case 0x1310B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F013");
				break;
			case 0x1310C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F013A");
				break;
			case 0x1310D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F014");
				break;
			case 0x1310E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F015");
				break;
			case 0x1310F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F016");
				break;
			case 0x13110:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F017");
				break;
			case 0x13111:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F018");
				break;
			case 0x13112:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F019");
				break;
			case 0x13113:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F020");
				break;
			case 0x13114:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F021");
				break;
			case 0x13115:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F021A");
				break;
			case 0x13116:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F022");
				break;
			case 0x13117:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F023");
				break;
			case 0x13118:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F024");
				break;
			case 0x13119:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F025");
				break;
			case 0x1311A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F026");
				break;
			case 0x1311B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F027");
				break;
			case 0x1311C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F028");
				break;
			case 0x1311D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F029");
				break;
			case 0x1311E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F030");
				break;
			case 0x1311F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F031");
				break;
			case 0x13120:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F031A");
				break;
			case 0x13121:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F032");
				break;
			case 0x13122:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F033");
				break;
			case 0x13123:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F034");
				break;
			case 0x13124:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F035");
				break;
			case 0x13125:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F036");
				break;
			case 0x13126:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F037");
				break;
			case 0x13127:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F037A");
				break;
			case 0x13128:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F038");
				break;
			case 0x13129:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F038A");
				break;
			case 0x1312A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F039");
				break;
			case 0x1312B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F040");
				break;
			case 0x1312C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F041");
				break;
			case 0x1312D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F042");
				break;
			case 0x1312E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F043");
				break;
			case 0x1312F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F044");
				break;
			case 0x13130:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F045");
				break;
			case 0x13131:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F045A");
				break;
			case 0x13132:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F046");
				break;
			case 0x13133:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F046A");
				break;
			case 0x13134:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F047");
				break;
			case 0x13135:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F047A");
				break;
			case 0x13136:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F048");
				break;
			case 0x13137:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F049");
				break;
			case 0x13138:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F050");
				break;
			case 0x13139:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F051");
				break;
			case 0x1313A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F051A");
				break;
			case 0x1313B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F051B");
				break;
			case 0x1313C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F051C");
				break;
			case 0x1313D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F052");
				break;
			case 0x1313E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH F053");
				break;
			case 0x1313F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G001");
				break;
			case 0x13140:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G002");
				break;
			case 0x13141:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G003");
				break;
			case 0x13142:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G004");
				break;
			case 0x13143:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G005");
				break;
			case 0x13144:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G006");
				break;
			case 0x13145:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G006A");
				break;
			case 0x13146:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G007");
				break;
			case 0x13147:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G007A");
				break;
			case 0x13148:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G007B");
				break;
			case 0x13149:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G008");
				break;
			case 0x1314A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G009");
				break;
			case 0x1314B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G010");
				break;
			case 0x1314C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G011");
				break;
			case 0x1314D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G011A");
				break;
			case 0x1314E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G012");
				break;
			case 0x1314F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G013");
				break;
			case 0x13150:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G014");
				break;
			case 0x13151:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G015");
				break;
			case 0x13152:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G016");
				break;
			case 0x13153:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G017");
				break;
			case 0x13154:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G018");
				break;
			case 0x13155:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G019");
				break;
			case 0x13156:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G020");
				break;
			case 0x13157:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G020A");
				break;
			case 0x13158:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G021");
				break;
			case 0x13159:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G022");
				break;
			case 0x1315A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G023");
				break;
			case 0x1315B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G024");
				break;
			case 0x1315C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G025");
				break;
			case 0x1315D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G026");
				break;
			case 0x1315E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G026A");
				break;
			case 0x1315F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G027");
				break;
			case 0x13160:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G028");
				break;
			case 0x13161:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G029");
				break;
			case 0x13162:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G030");
				break;
			case 0x13163:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G031");
				break;
			case 0x13164:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G032");
				break;
			case 0x13165:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G033");
				break;
			case 0x13166:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G034");
				break;
			case 0x13167:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G035");
				break;
			case 0x13168:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G036");
				break;
			case 0x13169:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G036A");
				break;
			case 0x1316A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G037");
				break;
			case 0x1316B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G037A");
				break;
			case 0x1316C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G038");
				break;
			case 0x1316D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G039");
				break;
			case 0x1316E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G040");
				break;
			case 0x1316F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G041");
				break;
			case 0x13170:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G042");
				break;
			case 0x13171:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G043");
				break;
			case 0x13172:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G043A");
				break;
			case 0x13173:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G044");
				break;
			case 0x13174:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G045");
				break;
			case 0x13175:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G045A");
				break;
			case 0x13176:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G046");
				break;
			case 0x13177:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G047");
				break;
			case 0x13178:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G048");
				break;
			case 0x13179:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G049");
				break;
			case 0x1317A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G050");
				break;
			case 0x1317B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G051");
				break;
			case 0x1317C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G052");
				break;
			case 0x1317D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G053");
				break;
			case 0x1317E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH G054");
				break;
			case 0x1317F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH H001");
				break;
			case 0x13180:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH H002");
				break;
			case 0x13181:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH H003");
				break;
			case 0x13182:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH H004");
				break;
			case 0x13183:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH H005");
				break;
			case 0x13184:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH H006");
				break;
			case 0x13185:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH H006A");
				break;
			case 0x13186:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH H007");
				break;
			case 0x13187:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH H008");
				break;
			case 0x13188:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I001");
				break;
			case 0x13189:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I002");
				break;
			case 0x1318A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I003");
				break;
			case 0x1318B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I004");
				break;
			case 0x1318C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I005");
				break;
			case 0x1318D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I005A");
				break;
			case 0x1318E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I006");
				break;
			case 0x1318F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I007");
				break;
			case 0x13190:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I008");
				break;
			case 0x13191:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I009");
				break;
			case 0x13192:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I009A");
				break;
			case 0x13193:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I010");
				break;
			case 0x13194:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I010A");
				break;
			case 0x13195:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I011");
				break;
			case 0x13196:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I011A");
				break;
			case 0x13197:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I012");
				break;
			case 0x13198:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I013");
				break;
			case 0x13199:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I014");
				break;
			case 0x1319A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH I015");
				break;
			case 0x1319B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH K001");
				break;
			case 0x1319C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH K002");
				break;
			case 0x1319D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH K003");
				break;
			case 0x1319E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH K004");
				break;
			case 0x1319F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH K005");
				break;
			case 0x131A0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH K006");
				break;
			case 0x131A1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH K007");
				break;
			case 0x131A2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH K008");
				break;
			case 0x131A3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH L001");
				break;
			case 0x131A4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH L002");
				break;
			case 0x131A5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH L002A");
				break;
			case 0x131A6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH L003");
				break;
			case 0x131A7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH L004");
				break;
			case 0x131A8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH L005");
				break;
			case 0x131A9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH L006");
				break;
			case 0x131AA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH L006A");
				break;
			case 0x131AB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH L007");
				break;
			case 0x131AC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH L008");
				break;
			case 0x131AD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M001");
				break;
			case 0x131AE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M001A");
				break;
			case 0x131AF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M001B");
				break;
			case 0x131B0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M002");
				break;
			case 0x131B1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M003");
				break;
			case 0x131B2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M003A");
				break;
			case 0x131B3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M004");
				break;
			case 0x131B4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M005");
				break;
			case 0x131B5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M006");
				break;
			case 0x131B6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M007");
				break;
			case 0x131B7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M008");
				break;
			case 0x131B8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M009");
				break;
			case 0x131B9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M010");
				break;
			case 0x131BA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M010A");
				break;
			case 0x131BB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M011");
				break;
			case 0x131BC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M012");
				break;
			case 0x131BD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M012A");
				break;
			case 0x131BE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M012B");
				break;
			case 0x131BF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M012C");
				break;
			case 0x131C0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M012D");
				break;
			case 0x131C1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M012E");
				break;
			case 0x131C2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M012F");
				break;
			case 0x131C3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M012G");
				break;
			case 0x131C4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M012H");
				break;
			case 0x131C5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M013");
				break;
			case 0x131C6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M014");
				break;
			case 0x131C7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M015");
				break;
			case 0x131C8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M015A");
				break;
			case 0x131C9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M016");
				break;
			case 0x131CA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M016A");
				break;
			case 0x131CB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M017");
				break;
			case 0x131CC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M017A");
				break;
			case 0x131CD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M018");
				break;
			case 0x131CE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M019");
				break;
			case 0x131CF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M020");
				break;
			case 0x131D0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M021");
				break;
			case 0x131D1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M022");
				break;
			case 0x131D2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M022A");
				break;
			case 0x131D3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M023");
				break;
			case 0x131D4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M024");
				break;
			case 0x131D5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M024A");
				break;
			case 0x131D6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M025");
				break;
			case 0x131D7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M026");
				break;
			case 0x131D8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M027");
				break;
			case 0x131D9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M028");
				break;
			case 0x131DA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M028A");
				break;
			case 0x131DB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M029");
				break;
			case 0x131DC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M030");
				break;
			case 0x131DD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M031");
				break;
			case 0x131DE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M031A");
				break;
			case 0x131DF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M032");
				break;
			case 0x131E0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M033");
				break;
			case 0x131E1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M033A");
				break;
			case 0x131E2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M033B");
				break;
			case 0x131E3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M034");
				break;
			case 0x131E4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M035");
				break;
			case 0x131E5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M036");
				break;
			case 0x131E6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M037");
				break;
			case 0x131E7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M038");
				break;
			case 0x131E8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M039");
				break;
			case 0x131E9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M040");
				break;
			case 0x131EA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M040A");
				break;
			case 0x131EB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M041");
				break;
			case 0x131EC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M042");
				break;
			case 0x131ED:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M043");
				break;
			case 0x131EE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH M044");
				break;
			case 0x131EF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N001");
				break;
			case 0x131F0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N002");
				break;
			case 0x131F1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N003");
				break;
			case 0x131F2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N004");
				break;
			case 0x131F3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N005");
				break;
			case 0x131F4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N006");
				break;
			case 0x131F5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N007");
				break;
			case 0x131F6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N008");
				break;
			case 0x131F7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N009");
				break;
			case 0x131F8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N010");
				break;
			case 0x131F9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N011");
				break;
			case 0x131FA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N012");
				break;
			case 0x131FB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N013");
				break;
			case 0x131FC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N014");
				break;
			case 0x131FD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N015");
				break;
			case 0x131FE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N016");
				break;
			case 0x131FF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N017");
				break;
			case 0x13200:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N018");
				break;
			case 0x13201:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N018A");
				break;
			case 0x13202:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N018B");
				break;
			case 0x13203:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N019");
				break;
			case 0x13204:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N020");
				break;
			case 0x13205:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N021");
				break;
			case 0x13206:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N022");
				break;
			case 0x13207:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N023");
				break;
			case 0x13208:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N024");
				break;
			case 0x13209:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N025");
				break;
			case 0x1320A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N025A");
				break;
			case 0x1320B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N026");
				break;
			case 0x1320C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N027");
				break;
			case 0x1320D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N028");
				break;
			case 0x1320E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N029");
				break;
			case 0x1320F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N030");
				break;
			case 0x13210:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N031");
				break;
			case 0x13211:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N032");
				break;
			case 0x13212:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N033");
				break;
			case 0x13213:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N033A");
				break;
			case 0x13214:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N034");
				break;
			case 0x13215:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N034A");
				break;
			case 0x13216:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N035");
				break;
			case 0x13217:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N035A");
				break;
			case 0x13218:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N036");
				break;
			case 0x13219:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N037");
				break;
			case 0x1321A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N037A");
				break;
			case 0x1321B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N038");
				break;
			case 0x1321C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N039");
				break;
			case 0x1321D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N040");
				break;
			case 0x1321E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N041");
				break;
			case 0x1321F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH N042");
				break;
			case 0x13220:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL001");
				break;
			case 0x13221:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL002");
				break;
			case 0x13222:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL003");
				break;
			case 0x13223:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL004");
				break;
			case 0x13224:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL005");
				break;
			case 0x13225:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL005A");
				break;
			case 0x13226:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL006");
				break;
			case 0x13227:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL007");
				break;
			case 0x13228:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL008");
				break;
			case 0x13229:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL009");
				break;
			case 0x1322A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL010");
				break;
			case 0x1322B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL011");
				break;
			case 0x1322C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL012");
				break;
			case 0x1322D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL013");
				break;
			case 0x1322E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL014");
				break;
			case 0x1322F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL015");
				break;
			case 0x13230:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL016");
				break;
			case 0x13231:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL017");
				break;
			case 0x13232:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL017A");
				break;
			case 0x13233:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL018");
				break;
			case 0x13234:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL019");
				break;
			case 0x13235:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NL020");
				break;
			case 0x13236:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU001");
				break;
			case 0x13237:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU002");
				break;
			case 0x13238:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU003");
				break;
			case 0x13239:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU004");
				break;
			case 0x1323A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU005");
				break;
			case 0x1323B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU006");
				break;
			case 0x1323C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU007");
				break;
			case 0x1323D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU008");
				break;
			case 0x1323E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU009");
				break;
			case 0x1323F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU010");
				break;
			case 0x13240:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU010A");
				break;
			case 0x13241:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU011");
				break;
			case 0x13242:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU011A");
				break;
			case 0x13243:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU012");
				break;
			case 0x13244:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU013");
				break;
			case 0x13245:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU014");
				break;
			case 0x13246:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU015");
				break;
			case 0x13247:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU016");
				break;
			case 0x13248:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU017");
				break;
			case 0x13249:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU018");
				break;
			case 0x1324A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU018A");
				break;
			case 0x1324B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU019");
				break;
			case 0x1324C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU020");
				break;
			case 0x1324D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU021");
				break;
			case 0x1324E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU022");
				break;
			case 0x1324F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH NU022A");
				break;
			case 0x13250:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O001");
				break;
			case 0x13251:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O001A");
				break;
			case 0x13252:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O002");
				break;
			case 0x13253:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O003");
				break;
			case 0x13254:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O004");
				break;
			case 0x13255:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O005");
				break;
			case 0x13256:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O005A");
				break;
			case 0x13257:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O006");
				break;
			case 0x13258:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O006A");
				break;
			case 0x13259:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O006B");
				break;
			case 0x1325A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O006C");
				break;
			case 0x1325B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O006D");
				break;
			case 0x1325C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O006E");
				break;
			case 0x1325D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O006F");
				break;
			case 0x1325E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O007");
				break;
			case 0x1325F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O008");
				break;
			case 0x13260:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O009");
				break;
			case 0x13261:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O010");
				break;
			case 0x13262:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O010A");
				break;
			case 0x13263:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O010B");
				break;
			case 0x13264:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O010C");
				break;
			case 0x13265:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O011");
				break;
			case 0x13266:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O012");
				break;
			case 0x13267:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O013");
				break;
			case 0x13268:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O014");
				break;
			case 0x13269:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O015");
				break;
			case 0x1326A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O016");
				break;
			case 0x1326B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O017");
				break;
			case 0x1326C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O018");
				break;
			case 0x1326D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O019");
				break;
			case 0x1326E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O019A");
				break;
			case 0x1326F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O020");
				break;
			case 0x13270:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O020A");
				break;
			case 0x13271:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O021");
				break;
			case 0x13272:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O022");
				break;
			case 0x13273:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O023");
				break;
			case 0x13274:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O024");
				break;
			case 0x13275:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O024A");
				break;
			case 0x13276:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O025");
				break;
			case 0x13277:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O025A");
				break;
			case 0x13278:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O026");
				break;
			case 0x13279:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O027");
				break;
			case 0x1327A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O028");
				break;
			case 0x1327B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O029");
				break;
			case 0x1327C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O029A");
				break;
			case 0x1327D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O030");
				break;
			case 0x1327E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O030A");
				break;
			case 0x1327F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O031");
				break;
			case 0x13280:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O032");
				break;
			case 0x13281:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O033");
				break;
			case 0x13282:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O033A");
				break;
			case 0x13283:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O034");
				break;
			case 0x13284:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O035");
				break;
			case 0x13285:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O036");
				break;
			case 0x13286:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O036A");
				break;
			case 0x13287:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O036B");
				break;
			case 0x13288:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O036C");
				break;
			case 0x13289:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O036D");
				break;
			case 0x1328A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O037");
				break;
			case 0x1328B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O038");
				break;
			case 0x1328C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O039");
				break;
			case 0x1328D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O040");
				break;
			case 0x1328E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O041");
				break;
			case 0x1328F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O042");
				break;
			case 0x13290:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O043");
				break;
			case 0x13291:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O044");
				break;
			case 0x13292:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O045");
				break;
			case 0x13293:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O046");
				break;
			case 0x13294:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O047");
				break;
			case 0x13295:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O048");
				break;
			case 0x13296:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O049");
				break;
			case 0x13297:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O050");
				break;
			case 0x13298:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O050A");
				break;
			case 0x13299:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O050B");
				break;
			case 0x1329A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH O051");
				break;
			case 0x1329B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P001");
				break;
			case 0x1329C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P001A");
				break;
			case 0x1329D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P002");
				break;
			case 0x1329E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P003");
				break;
			case 0x1329F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P003A");
				break;
			case 0x132A0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P004");
				break;
			case 0x132A1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P005");
				break;
			case 0x132A2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P006");
				break;
			case 0x132A3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P007");
				break;
			case 0x132A4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P008");
				break;
			case 0x132A5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P009");
				break;
			case 0x132A6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P010");
				break;
			case 0x132A7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH P011");
				break;
			case 0x132A8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Q001");
				break;
			case 0x132A9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Q002");
				break;
			case 0x132AA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Q003");
				break;
			case 0x132AB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Q004");
				break;
			case 0x132AC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Q005");
				break;
			case 0x132AD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Q006");
				break;
			case 0x132AE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Q007");
				break;
			case 0x132AF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R001");
				break;
			case 0x132B0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R002");
				break;
			case 0x132B1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R002A");
				break;
			case 0x132B2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R003");
				break;
			case 0x132B3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R003A");
				break;
			case 0x132B4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R003B");
				break;
			case 0x132B5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R004");
				break;
			case 0x132B6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R005");
				break;
			case 0x132B7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R006");
				break;
			case 0x132B8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R007");
				break;
			case 0x132B9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R008");
				break;
			case 0x132BA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R009");
				break;
			case 0x132BB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R010");
				break;
			case 0x132BC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R010A");
				break;
			case 0x132BD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R011");
				break;
			case 0x132BE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R012");
				break;
			case 0x132BF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R013");
				break;
			case 0x132C0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R014");
				break;
			case 0x132C1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R015");
				break;
			case 0x132C2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R016");
				break;
			case 0x132C3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R016A");
				break;
			case 0x132C4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R017");
				break;
			case 0x132C5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R018");
				break;
			case 0x132C6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R019");
				break;
			case 0x132C7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R020");
				break;
			case 0x132C8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R021");
				break;
			case 0x132C9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R022");
				break;
			case 0x132CA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R023");
				break;
			case 0x132CB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R024");
				break;
			case 0x132CC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R025");
				break;
			case 0x132CD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R026");
				break;
			case 0x132CE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R027");
				break;
			case 0x132CF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R028");
				break;
			case 0x132D0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH R029");
				break;
			case 0x132D1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S001");
				break;
			case 0x132D2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S002");
				break;
			case 0x132D3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S002A");
				break;
			case 0x132D4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S003");
				break;
			case 0x132D5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S004");
				break;
			case 0x132D6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S005");
				break;
			case 0x132D7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S006");
				break;
			case 0x132D8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S006A");
				break;
			case 0x132D9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S007");
				break;
			case 0x132DA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S008");
				break;
			case 0x132DB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S009");
				break;
			case 0x132DC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S010");
				break;
			case 0x132DD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S011");
				break;
			case 0x132DE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S012");
				break;
			case 0x132DF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S013");
				break;
			case 0x132E0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S014");
				break;
			case 0x132E1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S014A");
				break;
			case 0x132E2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S014B");
				break;
			case 0x132E3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S015");
				break;
			case 0x132E4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S016");
				break;
			case 0x132E5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S017");
				break;
			case 0x132E6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S017A");
				break;
			case 0x132E7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S018");
				break;
			case 0x132E8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S019");
				break;
			case 0x132E9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S020");
				break;
			case 0x132EA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S021");
				break;
			case 0x132EB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S022");
				break;
			case 0x132EC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S023");
				break;
			case 0x132ED:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S024");
				break;
			case 0x132EE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S025");
				break;
			case 0x132EF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S026");
				break;
			case 0x132F0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S026A");
				break;
			case 0x132F1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S026B");
				break;
			case 0x132F2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S027");
				break;
			case 0x132F3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S028");
				break;
			case 0x132F4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S029");
				break;
			case 0x132F5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S030");
				break;
			case 0x132F6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S031");
				break;
			case 0x132F7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S032");
				break;
			case 0x132F8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S033");
				break;
			case 0x132F9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S034");
				break;
			case 0x132FA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S035");
				break;
			case 0x132FB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S035A");
				break;
			case 0x132FC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S036");
				break;
			case 0x132FD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S037");
				break;
			case 0x132FE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S038");
				break;
			case 0x132FF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S039");
				break;
			case 0x13300:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S040");
				break;
			case 0x13301:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S041");
				break;
			case 0x13302:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S042");
				break;
			case 0x13303:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S043");
				break;
			case 0x13304:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S044");
				break;
			case 0x13305:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S045");
				break;
			case 0x13306:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH S046");
				break;
			case 0x13307:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T001");
				break;
			case 0x13308:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T002");
				break;
			case 0x13309:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T003");
				break;
			case 0x1330A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T003A");
				break;
			case 0x1330B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T004");
				break;
			case 0x1330C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T005");
				break;
			case 0x1330D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T006");
				break;
			case 0x1330E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T007");
				break;
			case 0x1330F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T007A");
				break;
			case 0x13310:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T008");
				break;
			case 0x13311:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T008A");
				break;
			case 0x13312:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T009");
				break;
			case 0x13313:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T009A");
				break;
			case 0x13314:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T010");
				break;
			case 0x13315:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T011");
				break;
			case 0x13316:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T011A");
				break;
			case 0x13317:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T012");
				break;
			case 0x13318:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T013");
				break;
			case 0x13319:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T014");
				break;
			case 0x1331A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T015");
				break;
			case 0x1331B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T016");
				break;
			case 0x1331C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T016A");
				break;
			case 0x1331D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T017");
				break;
			case 0x1331E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T018");
				break;
			case 0x1331F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T019");
				break;
			case 0x13320:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T020");
				break;
			case 0x13321:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T021");
				break;
			case 0x13322:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T022");
				break;
			case 0x13323:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T023");
				break;
			case 0x13324:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T024");
				break;
			case 0x13325:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T025");
				break;
			case 0x13326:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T026");
				break;
			case 0x13327:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T027");
				break;
			case 0x13328:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T028");
				break;
			case 0x13329:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T029");
				break;
			case 0x1332A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T030");
				break;
			case 0x1332B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T031");
				break;
			case 0x1332C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T032");
				break;
			case 0x1332D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T032A");
				break;
			case 0x1332E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T033");
				break;
			case 0x1332F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T033A");
				break;
			case 0x13330:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T034");
				break;
			case 0x13331:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T035");
				break;
			case 0x13332:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH T036");
				break;
			case 0x13333:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U001");
				break;
			case 0x13334:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U002");
				break;
			case 0x13335:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U003");
				break;
			case 0x13336:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U004");
				break;
			case 0x13337:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U005");
				break;
			case 0x13338:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U006");
				break;
			case 0x13339:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U006A");
				break;
			case 0x1333A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U006B");
				break;
			case 0x1333B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U007");
				break;
			case 0x1333C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U008");
				break;
			case 0x1333D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U009");
				break;
			case 0x1333E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U010");
				break;
			case 0x1333F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U011");
				break;
			case 0x13340:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U012");
				break;
			case 0x13341:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U013");
				break;
			case 0x13342:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U014");
				break;
			case 0x13343:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U015");
				break;
			case 0x13344:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U016");
				break;
			case 0x13345:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U017");
				break;
			case 0x13346:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U018");
				break;
			case 0x13347:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U019");
				break;
			case 0x13348:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U020");
				break;
			case 0x13349:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U021");
				break;
			case 0x1334A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U022");
				break;
			case 0x1334B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U023");
				break;
			case 0x1334C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U023A");
				break;
			case 0x1334D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U024");
				break;
			case 0x1334E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U025");
				break;
			case 0x1334F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U026");
				break;
			case 0x13350:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U027");
				break;
			case 0x13351:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U028");
				break;
			case 0x13352:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U029");
				break;
			case 0x13353:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U029A");
				break;
			case 0x13354:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U030");
				break;
			case 0x13355:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U031");
				break;
			case 0x13356:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U032");
				break;
			case 0x13357:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U032A");
				break;
			case 0x13358:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U033");
				break;
			case 0x13359:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U034");
				break;
			case 0x1335A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U035");
				break;
			case 0x1335B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U036");
				break;
			case 0x1335C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U037");
				break;
			case 0x1335D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U038");
				break;
			case 0x1335E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U039");
				break;
			case 0x1335F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U040");
				break;
			case 0x13360:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U041");
				break;
			case 0x13361:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH U042");
				break;
			case 0x13362:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V001");
				break;
			case 0x13363:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V001A");
				break;
			case 0x13364:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V001B");
				break;
			case 0x13365:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V001C");
				break;
			case 0x13366:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V001D");
				break;
			case 0x13367:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V001E");
				break;
			case 0x13368:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V001F");
				break;
			case 0x13369:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V001G");
				break;
			case 0x1336A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V001H");
				break;
			case 0x1336B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V001I");
				break;
			case 0x1336C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V002");
				break;
			case 0x1336D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V002A");
				break;
			case 0x1336E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V003");
				break;
			case 0x1336F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V004");
				break;
			case 0x13370:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V005");
				break;
			case 0x13371:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V006");
				break;
			case 0x13372:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V007");
				break;
			case 0x13373:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V007A");
				break;
			case 0x13374:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V007B");
				break;
			case 0x13375:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V008");
				break;
			case 0x13376:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V009");
				break;
			case 0x13377:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V010");
				break;
			case 0x13378:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V011");
				break;
			case 0x13379:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V011A");
				break;
			case 0x1337A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V011B");
				break;
			case 0x1337B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V011C");
				break;
			case 0x1337C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V012");
				break;
			case 0x1337D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V012A");
				break;
			case 0x1337E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V012B");
				break;
			case 0x1337F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V013");
				break;
			case 0x13380:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V014");
				break;
			case 0x13381:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V015");
				break;
			case 0x13382:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V016");
				break;
			case 0x13383:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V017");
				break;
			case 0x13384:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V018");
				break;
			case 0x13385:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V019");
				break;
			case 0x13386:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020");
				break;
			case 0x13387:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020A");
				break;
			case 0x13388:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020B");
				break;
			case 0x13389:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020C");
				break;
			case 0x1338A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020D");
				break;
			case 0x1338B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020E");
				break;
			case 0x1338C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020F");
				break;
			case 0x1338D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020G");
				break;
			case 0x1338E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020H");
				break;
			case 0x1338F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020I");
				break;
			case 0x13390:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020J");
				break;
			case 0x13391:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020K");
				break;
			case 0x13392:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V020L");
				break;
			case 0x13393:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V021");
				break;
			case 0x13394:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V022");
				break;
			case 0x13395:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V023");
				break;
			case 0x13396:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V023A");
				break;
			case 0x13397:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V024");
				break;
			case 0x13398:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V025");
				break;
			case 0x13399:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V026");
				break;
			case 0x1339A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V027");
				break;
			case 0x1339B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V028");
				break;
			case 0x1339C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V028A");
				break;
			case 0x1339D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V029");
				break;
			case 0x1339E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V029A");
				break;
			case 0x1339F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V030");
				break;
			case 0x133A0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V030A");
				break;
			case 0x133A1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V031");
				break;
			case 0x133A2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V031A");
				break;
			case 0x133A3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V032");
				break;
			case 0x133A4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V033");
				break;
			case 0x133A5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V033A");
				break;
			case 0x133A6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V034");
				break;
			case 0x133A7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V035");
				break;
			case 0x133A8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V036");
				break;
			case 0x133A9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V037");
				break;
			case 0x133AA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V037A");
				break;
			case 0x133AB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V038");
				break;
			case 0x133AC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V039");
				break;
			case 0x133AD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V040");
				break;
			case 0x133AE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH V040A");
				break;
			case 0x133AF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W001");
				break;
			case 0x133B0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W002");
				break;
			case 0x133B1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W003");
				break;
			case 0x133B2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W003A");
				break;
			case 0x133B3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W004");
				break;
			case 0x133B4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W005");
				break;
			case 0x133B5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W006");
				break;
			case 0x133B6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W007");
				break;
			case 0x133B7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W008");
				break;
			case 0x133B8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W009");
				break;
			case 0x133B9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W009A");
				break;
			case 0x133BA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W010");
				break;
			case 0x133BB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W010A");
				break;
			case 0x133BC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W011");
				break;
			case 0x133BD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W012");
				break;
			case 0x133BE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W013");
				break;
			case 0x133BF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W014");
				break;
			case 0x133C0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W014A");
				break;
			case 0x133C1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W015");
				break;
			case 0x133C2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W016");
				break;
			case 0x133C3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W017");
				break;
			case 0x133C4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W017A");
				break;
			case 0x133C5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W018");
				break;
			case 0x133C6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W018A");
				break;
			case 0x133C7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W019");
				break;
			case 0x133C8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W020");
				break;
			case 0x133C9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W021");
				break;
			case 0x133CA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W022");
				break;
			case 0x133CB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W023");
				break;
			case 0x133CC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W024");
				break;
			case 0x133CD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W024A");
				break;
			case 0x133CE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH W025");
				break;
			case 0x133CF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X001");
				break;
			case 0x133D0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X002");
				break;
			case 0x133D1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X003");
				break;
			case 0x133D2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X004");
				break;
			case 0x133D3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X004A");
				break;
			case 0x133D4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X004B");
				break;
			case 0x133D5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X005");
				break;
			case 0x133D6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X006");
				break;
			case 0x133D7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X006A");
				break;
			case 0x133D8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X007");
				break;
			case 0x133D9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X008");
				break;
			case 0x133DA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH X008A");
				break;
			case 0x133DB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Y001");
				break;
			case 0x133DC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Y001A");
				break;
			case 0x133DD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Y002");
				break;
			case 0x133DE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Y003");
				break;
			case 0x133DF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Y004");
				break;
			case 0x133E0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Y005");
				break;
			case 0x133E1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Y006");
				break;
			case 0x133E2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Y007");
				break;
			case 0x133E3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Y008");
				break;
			case 0x133E4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z001");
				break;
			case 0x133E5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z002");
				break;
			case 0x133E6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z002A");
				break;
			case 0x133E7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z002B");
				break;
			case 0x133E8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z002C");
				break;
			case 0x133E9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z002D");
				break;
			case 0x133EA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z003");
				break;
			case 0x133EB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z003A");
				break;
			case 0x133EC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z003B");
				break;
			case 0x133ED:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z004");
				break;
			case 0x133EE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z004A");
				break;
			case 0x133EF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z005");
				break;
			case 0x133F0:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z005A");
				break;
			case 0x133F1:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z006");
				break;
			case 0x133F2:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z007");
				break;
			case 0x133F3:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z008");
				break;
			case 0x133F4:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z009");
				break;
			case 0x133F5:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z010");
				break;
			case 0x133F6:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z011");
				break;
			case 0x133F7:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z012");
				break;
			case 0x133F8:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z013");
				break;
			case 0x133F9:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z014");
				break;
			case 0x133FA:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z015");
				break;
			case 0x133FB:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z015A");
				break;
			case 0x133FC:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z015B");
				break;
			case 0x133FD:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z015C");
				break;
			case 0x133FE:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z015D");
				break;
			case 0x133FF:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z015E");
				break;
			case 0x13400:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z015F");
				break;
			case 0x13401:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z015G");
				break;
			case 0x13402:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z015H");
				break;
			case 0x13403:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z015I");
				break;
			case 0x13404:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z016");
				break;
			case 0x13405:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z016A");
				break;
			case 0x13406:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z016B");
				break;
			case 0x13407:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z016C");
				break;
			case 0x13408:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z016D");
				break;
			case 0x13409:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z016E");
				break;
			case 0x1340A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z016F");
				break;
			case 0x1340B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z016G");
				break;
			case 0x1340C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH Z016H");
				break;
			case 0x1340D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA001");
				break;
			case 0x1340E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA002");
				break;
			case 0x1340F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA003");
				break;
			case 0x13410:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA004");
				break;
			case 0x13411:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA005");
				break;
			case 0x13412:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA006");
				break;
			case 0x13413:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA007");
				break;
			case 0x13414:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA007A");
				break;
			case 0x13415:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA007B");
				break;
			case 0x13416:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA008");
				break;
			case 0x13417:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA009");
				break;
			case 0x13418:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA010");
				break;
			case 0x13419:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA011");
				break;
			case 0x1341A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA012");
				break;
			case 0x1341B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA013");
				break;
			case 0x1341C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA014");
				break;
			case 0x1341D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA015");
				break;
			case 0x1341E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA016");
				break;
			case 0x1341F:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA017");
				break;
			case 0x13420:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA018");
				break;
			case 0x13421:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA019");
				break;
			case 0x13422:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA020");
				break;
			case 0x13423:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA021");
				break;
			case 0x13424:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA022");
				break;
			case 0x13425:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA023");
				break;
			case 0x13426:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA024");
				break;
			case 0x13427:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA025");
				break;
			case 0x13428:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA026");
				break;
			case 0x13429:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA027");
				break;
			case 0x1342A:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA028");
				break;
			case 0x1342B:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA029");
				break;
			case 0x1342C:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA030");
				break;
			case 0x1342D:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA031");
				break;
			case 0x1342E:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH AA032");
				break;
			case 0x13430:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH VERTICAL JOINER");
				break;
			case 0x13431:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH HORIZONTAL JOINER");
				break;
			case 0x13432:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH INSERT AT TOP START");
				break;
			case 0x13433:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH INSERT AT BOTTOM START");
				break;
			case 0x13434:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH INSERT AT TOP END");
				break;
			case 0x13435:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH INSERT AT BOTTOM END");
				break;
			case 0x13436:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH OVERLAY MIDDLE");
				break;
			case 0x13437:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH BEGIN SEGMENT");
				break;
			case 0x13438:
				strcpy_s(buf, buf_size, "EGYPTIAN HIEROGLYPH END SEGMENT");
				break;
			case 0x14400:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A001");
				break;
			case 0x14401:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A002");
				break;
			case 0x14402:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A003");
				break;
			case 0x14403:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A004");
				break;
			case 0x14404:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A005");
				break;
			case 0x14405:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A006");
				break;
			case 0x14406:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A007");
				break;
			case 0x14407:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A008");
				break;
			case 0x14408:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A009");
				break;
			case 0x14409:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A010");
				break;
			case 0x1440A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A010A");
				break;
			case 0x1440B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A011");
				break;
			case 0x1440C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A012");
				break;
			case 0x1440D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A013");
				break;
			case 0x1440E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A014");
				break;
			case 0x1440F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A015");
				break;
			case 0x14410:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A016");
				break;
			case 0x14411:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A017");
				break;
			case 0x14412:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A018");
				break;
			case 0x14413:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A019");
				break;
			case 0x14414:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A020");
				break;
			case 0x14415:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A021");
				break;
			case 0x14416:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A022");
				break;
			case 0x14417:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A023");
				break;
			case 0x14418:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A024");
				break;
			case 0x14419:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A025");
				break;
			case 0x1441A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A026");
				break;
			case 0x1441B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A026A");
				break;
			case 0x1441C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A027");
				break;
			case 0x1441D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A028");
				break;
			case 0x1441E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A029");
				break;
			case 0x1441F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A030");
				break;
			case 0x14420:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A031");
				break;
			case 0x14421:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A032");
				break;
			case 0x14422:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A033");
				break;
			case 0x14423:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A034");
				break;
			case 0x14424:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A035");
				break;
			case 0x14425:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A036");
				break;
			case 0x14426:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A037");
				break;
			case 0x14427:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A038");
				break;
			case 0x14428:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A039");
				break;
			case 0x14429:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A039A");
				break;
			case 0x1442A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A040");
				break;
			case 0x1442B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A041");
				break;
			case 0x1442C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A041A");
				break;
			case 0x1442D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A042");
				break;
			case 0x1442E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A043");
				break;
			case 0x1442F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A044");
				break;
			case 0x14430:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A045");
				break;
			case 0x14431:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A045A");
				break;
			case 0x14432:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A046");
				break;
			case 0x14433:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A046A");
				break;
			case 0x14434:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A046B");
				break;
			case 0x14435:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A047");
				break;
			case 0x14436:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A048");
				break;
			case 0x14437:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A049");
				break;
			case 0x14438:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A050");
				break;
			case 0x14439:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A051");
				break;
			case 0x1443A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A052");
				break;
			case 0x1443B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A053");
				break;
			case 0x1443C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A054");
				break;
			case 0x1443D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A055");
				break;
			case 0x1443E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A056");
				break;
			case 0x1443F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A057");
				break;
			case 0x14440:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A058");
				break;
			case 0x14441:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A059");
				break;
			case 0x14442:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A060");
				break;
			case 0x14443:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A061");
				break;
			case 0x14444:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A062");
				break;
			case 0x14445:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A063");
				break;
			case 0x14446:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A064");
				break;
			case 0x14447:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A065");
				break;
			case 0x14448:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A066");
				break;
			case 0x14449:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A066A");
				break;
			case 0x1444A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A066B");
				break;
			case 0x1444B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A066C");
				break;
			case 0x1444C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A067");
				break;
			case 0x1444D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A068");
				break;
			case 0x1444E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A069");
				break;
			case 0x1444F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A070");
				break;
			case 0x14450:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A071");
				break;
			case 0x14451:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A072");
				break;
			case 0x14452:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A073");
				break;
			case 0x14453:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A074");
				break;
			case 0x14454:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A075");
				break;
			case 0x14455:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A076");
				break;
			case 0x14456:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A077");
				break;
			case 0x14457:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A078");
				break;
			case 0x14458:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A079");
				break;
			case 0x14459:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A080");
				break;
			case 0x1445A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A081");
				break;
			case 0x1445B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A082");
				break;
			case 0x1445C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A083");
				break;
			case 0x1445D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A084");
				break;
			case 0x1445E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A085");
				break;
			case 0x1445F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A086");
				break;
			case 0x14460:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A087");
				break;
			case 0x14461:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A088");
				break;
			case 0x14462:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A089");
				break;
			case 0x14463:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A090");
				break;
			case 0x14464:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A091");
				break;
			case 0x14465:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A092");
				break;
			case 0x14466:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A093");
				break;
			case 0x14467:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A094");
				break;
			case 0x14468:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A095");
				break;
			case 0x14469:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A096");
				break;
			case 0x1446A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A097");
				break;
			case 0x1446B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A097A");
				break;
			case 0x1446C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A098");
				break;
			case 0x1446D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A098A");
				break;
			case 0x1446E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A099");
				break;
			case 0x1446F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A100");
				break;
			case 0x14470:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A100A");
				break;
			case 0x14471:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A101");
				break;
			case 0x14472:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A101A");
				break;
			case 0x14473:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A102");
				break;
			case 0x14474:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A102A");
				break;
			case 0x14475:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A103");
				break;
			case 0x14476:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A104");
				break;
			case 0x14477:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A104A");
				break;
			case 0x14478:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A104B");
				break;
			case 0x14479:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A104C");
				break;
			case 0x1447A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A105");
				break;
			case 0x1447B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A105A");
				break;
			case 0x1447C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A105B");
				break;
			case 0x1447D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A106");
				break;
			case 0x1447E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A107");
				break;
			case 0x1447F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A107A");
				break;
			case 0x14480:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A107B");
				break;
			case 0x14481:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A107C");
				break;
			case 0x14482:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A108");
				break;
			case 0x14483:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A109");
				break;
			case 0x14484:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A110");
				break;
			case 0x14485:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A110A");
				break;
			case 0x14486:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A110B");
				break;
			case 0x14487:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A111");
				break;
			case 0x14488:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A112");
				break;
			case 0x14489:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A113");
				break;
			case 0x1448A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A114");
				break;
			case 0x1448B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A115");
				break;
			case 0x1448C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A115A");
				break;
			case 0x1448D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A116");
				break;
			case 0x1448E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A117");
				break;
			case 0x1448F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A118");
				break;
			case 0x14490:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A119");
				break;
			case 0x14491:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A120");
				break;
			case 0x14492:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A121");
				break;
			case 0x14493:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A122");
				break;
			case 0x14494:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A123");
				break;
			case 0x14495:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A124");
				break;
			case 0x14496:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A125");
				break;
			case 0x14497:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A125A");
				break;
			case 0x14498:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A126");
				break;
			case 0x14499:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A127");
				break;
			case 0x1449A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A128");
				break;
			case 0x1449B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A129");
				break;
			case 0x1449C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A130");
				break;
			case 0x1449D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A131");
				break;
			case 0x1449E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A132");
				break;
			case 0x1449F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A133");
				break;
			case 0x144A0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A134");
				break;
			case 0x144A1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A135");
				break;
			case 0x144A2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A135A");
				break;
			case 0x144A3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A136");
				break;
			case 0x144A4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A137");
				break;
			case 0x144A5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A138");
				break;
			case 0x144A6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A139");
				break;
			case 0x144A7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A140");
				break;
			case 0x144A8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A141");
				break;
			case 0x144A9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A142");
				break;
			case 0x144AA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A143");
				break;
			case 0x144AB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A144");
				break;
			case 0x144AC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A145");
				break;
			case 0x144AD:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A146");
				break;
			case 0x144AE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A147");
				break;
			case 0x144AF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A148");
				break;
			case 0x144B0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A149");
				break;
			case 0x144B1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A150");
				break;
			case 0x144B2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A151");
				break;
			case 0x144B3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A152");
				break;
			case 0x144B4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A153");
				break;
			case 0x144B5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A154");
				break;
			case 0x144B6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A155");
				break;
			case 0x144B7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A156");
				break;
			case 0x144B8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A157");
				break;
			case 0x144B9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A158");
				break;
			case 0x144BA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A159");
				break;
			case 0x144BB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A160");
				break;
			case 0x144BC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A161");
				break;
			case 0x144BD:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A162");
				break;
			case 0x144BE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A163");
				break;
			case 0x144BF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A164");
				break;
			case 0x144C0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A165");
				break;
			case 0x144C1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A166");
				break;
			case 0x144C2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A167");
				break;
			case 0x144C3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A168");
				break;
			case 0x144C4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A169");
				break;
			case 0x144C5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A170");
				break;
			case 0x144C6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A171");
				break;
			case 0x144C7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A172");
				break;
			case 0x144C8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A173");
				break;
			case 0x144C9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A174");
				break;
			case 0x144CA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A175");
				break;
			case 0x144CB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A176");
				break;
			case 0x144CC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A177");
				break;
			case 0x144CD:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A178");
				break;
			case 0x144CE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A179");
				break;
			case 0x144CF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A180");
				break;
			case 0x144D0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A181");
				break;
			case 0x144D1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A182");
				break;
			case 0x144D2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A183");
				break;
			case 0x144D3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A184");
				break;
			case 0x144D4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A185");
				break;
			case 0x144D5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A186");
				break;
			case 0x144D6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A187");
				break;
			case 0x144D7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A188");
				break;
			case 0x144D8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A189");
				break;
			case 0x144D9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A190");
				break;
			case 0x144DA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A191");
				break;
			case 0x144DB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A192");
				break;
			case 0x144DC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A193");
				break;
			case 0x144DD:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A194");
				break;
			case 0x144DE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A195");
				break;
			case 0x144DF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A196");
				break;
			case 0x144E0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A197");
				break;
			case 0x144E1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A198");
				break;
			case 0x144E2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A199");
				break;
			case 0x144E3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A200");
				break;
			case 0x144E4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A201");
				break;
			case 0x144E5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A202");
				break;
			case 0x144E6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A202A");
				break;
			case 0x144E7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A202B");
				break;
			case 0x144E8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A203");
				break;
			case 0x144E9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A204");
				break;
			case 0x144EA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A205");
				break;
			case 0x144EB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A206");
				break;
			case 0x144EC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A207");
				break;
			case 0x144ED:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A207A");
				break;
			case 0x144EE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A208");
				break;
			case 0x144EF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A209");
				break;
			case 0x144F0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A209A");
				break;
			case 0x144F1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A210");
				break;
			case 0x144F2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A211");
				break;
			case 0x144F3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A212");
				break;
			case 0x144F4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A213");
				break;
			case 0x144F5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A214");
				break;
			case 0x144F6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A215");
				break;
			case 0x144F7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A215A");
				break;
			case 0x144F8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A216");
				break;
			case 0x144F9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A216A");
				break;
			case 0x144FA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A217");
				break;
			case 0x144FB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A218");
				break;
			case 0x144FC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A219");
				break;
			case 0x144FD:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A220");
				break;
			case 0x144FE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A221");
				break;
			case 0x144FF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A222");
				break;
			case 0x14500:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A223");
				break;
			case 0x14501:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A224");
				break;
			case 0x14502:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A225");
				break;
			case 0x14503:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A226");
				break;
			case 0x14504:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A227");
				break;
			case 0x14505:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A227A");
				break;
			case 0x14506:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A228");
				break;
			case 0x14507:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A229");
				break;
			case 0x14508:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A230");
				break;
			case 0x14509:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A231");
				break;
			case 0x1450A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A232");
				break;
			case 0x1450B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A233");
				break;
			case 0x1450C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A234");
				break;
			case 0x1450D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A235");
				break;
			case 0x1450E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A236");
				break;
			case 0x1450F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A237");
				break;
			case 0x14510:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A238");
				break;
			case 0x14511:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A239");
				break;
			case 0x14512:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A240");
				break;
			case 0x14513:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A241");
				break;
			case 0x14514:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A242");
				break;
			case 0x14515:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A243");
				break;
			case 0x14516:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A244");
				break;
			case 0x14517:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A245");
				break;
			case 0x14518:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A246");
				break;
			case 0x14519:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A247");
				break;
			case 0x1451A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A248");
				break;
			case 0x1451B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A249");
				break;
			case 0x1451C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A250");
				break;
			case 0x1451D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A251");
				break;
			case 0x1451E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A252");
				break;
			case 0x1451F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A253");
				break;
			case 0x14520:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A254");
				break;
			case 0x14521:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A255");
				break;
			case 0x14522:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A256");
				break;
			case 0x14523:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A257");
				break;
			case 0x14524:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A258");
				break;
			case 0x14525:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A259");
				break;
			case 0x14526:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A260");
				break;
			case 0x14527:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A261");
				break;
			case 0x14528:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A262");
				break;
			case 0x14529:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A263");
				break;
			case 0x1452A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A264");
				break;
			case 0x1452B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A265");
				break;
			case 0x1452C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A266");
				break;
			case 0x1452D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A267");
				break;
			case 0x1452E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A267A");
				break;
			case 0x1452F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A268");
				break;
			case 0x14530:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A269");
				break;
			case 0x14531:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A270");
				break;
			case 0x14532:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A271");
				break;
			case 0x14533:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A272");
				break;
			case 0x14534:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A273");
				break;
			case 0x14535:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A274");
				break;
			case 0x14536:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A275");
				break;
			case 0x14537:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A276");
				break;
			case 0x14538:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A277");
				break;
			case 0x14539:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A278");
				break;
			case 0x1453A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A279");
				break;
			case 0x1453B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A280");
				break;
			case 0x1453C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A281");
				break;
			case 0x1453D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A282");
				break;
			case 0x1453E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A283");
				break;
			case 0x1453F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A284");
				break;
			case 0x14540:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A285");
				break;
			case 0x14541:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A286");
				break;
			case 0x14542:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A287");
				break;
			case 0x14543:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A288");
				break;
			case 0x14544:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A289");
				break;
			case 0x14545:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A289A");
				break;
			case 0x14546:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A290");
				break;
			case 0x14547:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A291");
				break;
			case 0x14548:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A292");
				break;
			case 0x14549:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A293");
				break;
			case 0x1454A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A294");
				break;
			case 0x1454B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A294A");
				break;
			case 0x1454C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A295");
				break;
			case 0x1454D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A296");
				break;
			case 0x1454E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A297");
				break;
			case 0x1454F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A298");
				break;
			case 0x14550:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A299");
				break;
			case 0x14551:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A299A");
				break;
			case 0x14552:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A300");
				break;
			case 0x14553:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A301");
				break;
			case 0x14554:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A302");
				break;
			case 0x14555:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A303");
				break;
			case 0x14556:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A304");
				break;
			case 0x14557:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A305");
				break;
			case 0x14558:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A306");
				break;
			case 0x14559:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A307");
				break;
			case 0x1455A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A308");
				break;
			case 0x1455B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A309");
				break;
			case 0x1455C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A309A");
				break;
			case 0x1455D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A310");
				break;
			case 0x1455E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A311");
				break;
			case 0x1455F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A312");
				break;
			case 0x14560:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A313");
				break;
			case 0x14561:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A314");
				break;
			case 0x14562:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A315");
				break;
			case 0x14563:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A316");
				break;
			case 0x14564:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A317");
				break;
			case 0x14565:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A318");
				break;
			case 0x14566:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A319");
				break;
			case 0x14567:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A320");
				break;
			case 0x14568:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A321");
				break;
			case 0x14569:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A322");
				break;
			case 0x1456A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A323");
				break;
			case 0x1456B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A324");
				break;
			case 0x1456C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A325");
				break;
			case 0x1456D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A326");
				break;
			case 0x1456E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A327");
				break;
			case 0x1456F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A328");
				break;
			case 0x14570:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A329");
				break;
			case 0x14571:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A329A");
				break;
			case 0x14572:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A330");
				break;
			case 0x14573:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A331");
				break;
			case 0x14574:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A332A");
				break;
			case 0x14575:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A332B");
				break;
			case 0x14576:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A332C");
				break;
			case 0x14577:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A333");
				break;
			case 0x14578:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A334");
				break;
			case 0x14579:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A335");
				break;
			case 0x1457A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A336");
				break;
			case 0x1457B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A336A");
				break;
			case 0x1457C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A336B");
				break;
			case 0x1457D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A336C");
				break;
			case 0x1457E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A337");
				break;
			case 0x1457F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A338");
				break;
			case 0x14580:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A339");
				break;
			case 0x14581:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A340");
				break;
			case 0x14582:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A341");
				break;
			case 0x14583:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A342");
				break;
			case 0x14584:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A343");
				break;
			case 0x14585:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A344");
				break;
			case 0x14586:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A345");
				break;
			case 0x14587:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A346");
				break;
			case 0x14588:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A347");
				break;
			case 0x14589:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A348");
				break;
			case 0x1458A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A349");
				break;
			case 0x1458B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A350");
				break;
			case 0x1458C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A351");
				break;
			case 0x1458D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A352");
				break;
			case 0x1458E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A353");
				break;
			case 0x1458F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A354");
				break;
			case 0x14590:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A355");
				break;
			case 0x14591:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A356");
				break;
			case 0x14592:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A357");
				break;
			case 0x14593:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A358");
				break;
			case 0x14594:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A359");
				break;
			case 0x14595:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A359A");
				break;
			case 0x14596:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A360");
				break;
			case 0x14597:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A361");
				break;
			case 0x14598:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A362");
				break;
			case 0x14599:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A363");
				break;
			case 0x1459A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A364");
				break;
			case 0x1459B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A364A");
				break;
			case 0x1459C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A365");
				break;
			case 0x1459D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A366");
				break;
			case 0x1459E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A367");
				break;
			case 0x1459F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A368");
				break;
			case 0x145A0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A368A");
				break;
			case 0x145A1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A369");
				break;
			case 0x145A2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A370");
				break;
			case 0x145A3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A371");
				break;
			case 0x145A4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A371A");
				break;
			case 0x145A5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A372");
				break;
			case 0x145A6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A373");
				break;
			case 0x145A7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A374");
				break;
			case 0x145A8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A375");
				break;
			case 0x145A9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A376");
				break;
			case 0x145AA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A377");
				break;
			case 0x145AB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A378");
				break;
			case 0x145AC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A379");
				break;
			case 0x145AD:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A380");
				break;
			case 0x145AE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A381");
				break;
			case 0x145AF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A381A");
				break;
			case 0x145B0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A382");
				break;
			case 0x145B1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A383 RA OR RI");
				break;
			case 0x145B2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A383A");
				break;
			case 0x145B3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A384");
				break;
			case 0x145B4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A385");
				break;
			case 0x145B5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A386");
				break;
			case 0x145B6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A386A");
				break;
			case 0x145B7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A387");
				break;
			case 0x145B8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A388");
				break;
			case 0x145B9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A389");
				break;
			case 0x145BA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A390");
				break;
			case 0x145BB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A391");
				break;
			case 0x145BC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A392");
				break;
			case 0x145BD:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A393 EIGHT");
				break;
			case 0x145BE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A394");
				break;
			case 0x145BF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A395");
				break;
			case 0x145C0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A396");
				break;
			case 0x145C1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A397");
				break;
			case 0x145C2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A398");
				break;
			case 0x145C3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A399");
				break;
			case 0x145C4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A400");
				break;
			case 0x145C5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A401");
				break;
			case 0x145C6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A402");
				break;
			case 0x145C7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A403");
				break;
			case 0x145C8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A404");
				break;
			case 0x145C9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A405");
				break;
			case 0x145CA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A406");
				break;
			case 0x145CB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A407");
				break;
			case 0x145CC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A408");
				break;
			case 0x145CD:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A409");
				break;
			case 0x145CE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A410 BEGIN LOGOGRAM MARK");
				break;
			case 0x145CF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A410A END LOGOGRAM MARK");
				break;
			case 0x145D0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A411");
				break;
			case 0x145D1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A412");
				break;
			case 0x145D2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A413");
				break;
			case 0x145D3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A414");
				break;
			case 0x145D4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A415");
				break;
			case 0x145D5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A416");
				break;
			case 0x145D6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A417");
				break;
			case 0x145D7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A418");
				break;
			case 0x145D8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A419");
				break;
			case 0x145D9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A420");
				break;
			case 0x145DA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A421");
				break;
			case 0x145DB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A422");
				break;
			case 0x145DC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A423");
				break;
			case 0x145DD:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A424");
				break;
			case 0x145DE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A425");
				break;
			case 0x145DF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A426");
				break;
			case 0x145E0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A427");
				break;
			case 0x145E1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A428");
				break;
			case 0x145E2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A429");
				break;
			case 0x145E3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A430");
				break;
			case 0x145E4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A431");
				break;
			case 0x145E5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A432");
				break;
			case 0x145E6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A433");
				break;
			case 0x145E7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A434");
				break;
			case 0x145E8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A435");
				break;
			case 0x145E9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A436");
				break;
			case 0x145EA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A437");
				break;
			case 0x145EB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A438");
				break;
			case 0x145EC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A439");
				break;
			case 0x145ED:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A440");
				break;
			case 0x145EE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A441");
				break;
			case 0x145EF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A442");
				break;
			case 0x145F0:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A443");
				break;
			case 0x145F1:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A444");
				break;
			case 0x145F2:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A445");
				break;
			case 0x145F3:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A446");
				break;
			case 0x145F4:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A447");
				break;
			case 0x145F5:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A448");
				break;
			case 0x145F6:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A449");
				break;
			case 0x145F7:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A450");
				break;
			case 0x145F8:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A450A");
				break;
			case 0x145F9:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A451");
				break;
			case 0x145FA:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A452");
				break;
			case 0x145FB:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A453");
				break;
			case 0x145FC:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A454");
				break;
			case 0x145FD:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A455");
				break;
			case 0x145FE:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A456");
				break;
			case 0x145FF:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A457");
				break;
			case 0x14600:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A457A");
				break;
			case 0x14601:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A458");
				break;
			case 0x14602:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A459");
				break;
			case 0x14603:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A460");
				break;
			case 0x14604:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A461");
				break;
			case 0x14605:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A462");
				break;
			case 0x14606:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A463");
				break;
			case 0x14607:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A464");
				break;
			case 0x14608:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A465");
				break;
			case 0x14609:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A466");
				break;
			case 0x1460A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A467");
				break;
			case 0x1460B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A468");
				break;
			case 0x1460C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A469");
				break;
			case 0x1460D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A470");
				break;
			case 0x1460E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A471");
				break;
			case 0x1460F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A472");
				break;
			case 0x14610:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A473");
				break;
			case 0x14611:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A474");
				break;
			case 0x14612:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A475");
				break;
			case 0x14613:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A476");
				break;
			case 0x14614:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A477");
				break;
			case 0x14615:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A478");
				break;
			case 0x14616:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A479");
				break;
			case 0x14617:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A480");
				break;
			case 0x14618:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A481");
				break;
			case 0x14619:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A482");
				break;
			case 0x1461A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A483");
				break;
			case 0x1461B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A484");
				break;
			case 0x1461C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A485");
				break;
			case 0x1461D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A486");
				break;
			case 0x1461E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A487");
				break;
			case 0x1461F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A488");
				break;
			case 0x14620:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A489");
				break;
			case 0x14621:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A490");
				break;
			case 0x14622:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A491");
				break;
			case 0x14623:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A492");
				break;
			case 0x14624:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A493");
				break;
			case 0x14625:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A494");
				break;
			case 0x14626:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A495");
				break;
			case 0x14627:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A496");
				break;
			case 0x14628:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A497");
				break;
			case 0x14629:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A501");
				break;
			case 0x1462A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A502");
				break;
			case 0x1462B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A503");
				break;
			case 0x1462C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A504");
				break;
			case 0x1462D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A505");
				break;
			case 0x1462E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A506");
				break;
			case 0x1462F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A507");
				break;
			case 0x14630:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A508");
				break;
			case 0x14631:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A509");
				break;
			case 0x14632:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A510");
				break;
			case 0x14633:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A511");
				break;
			case 0x14634:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A512");
				break;
			case 0x14635:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A513");
				break;
			case 0x14636:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A514");
				break;
			case 0x14637:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A515");
				break;
			case 0x14638:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A516");
				break;
			case 0x14639:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A517");
				break;
			case 0x1463A:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A518");
				break;
			case 0x1463B:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A519");
				break;
			case 0x1463C:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A520");
				break;
			case 0x1463D:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A521");
				break;
			case 0x1463E:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A522");
				break;
			case 0x1463F:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A523");
				break;
			case 0x14640:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A524");
				break;
			case 0x14641:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A525");
				break;
			case 0x14642:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A526");
				break;
			case 0x14643:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A527");
				break;
			case 0x14644:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A528");
				break;
			case 0x14645:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A529");
				break;
			case 0x14646:
				strcpy_s(buf, buf_size, "ANATOLIAN HIEROGLYPH A530");
				break;
			case 0x16800:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NGKUE MFON");
				break;
			case 0x16801:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A GBIEE FON");
				break;
			case 0x16802:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PON MFON PIPAEMGBIEE");
				break;
			case 0x16803:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PON MFON PIPAEMBA");
				break;
			case 0x16804:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NAA MFON");
				break;
			case 0x16805:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SHUENSHUET");
				break;
			case 0x16806:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A TITA MFON");
				break;
			case 0x16807:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NZA MFON");
				break;
			case 0x16808:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SHINDA PA NJI");
				break;
			case 0x16809:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PON PA NJI PIPAEMGBIEE");
				break;
			case 0x1680A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PON PA NJI PIPAEMBA");
				break;
			case 0x1680B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MAEMBGBIEE");
				break;
			case 0x1680C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A TU MAEMBA");
				break;
			case 0x1680D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NGANGU");
				break;
			case 0x1680E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MAEMVEUX");
				break;
			case 0x1680F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MANSUAE");
				break;
			case 0x16810:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MVEUAENGAM");
				break;
			case 0x16811:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SEUNYAM");
				break;
			case 0x16812:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NTOQPEN");
				break;
			case 0x16813:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A KEUKEUTNDA");
				break;
			case 0x16814:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NKINDI");
				break;
			case 0x16815:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SUU");
				break;
			case 0x16816:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NGKUENZEUM");
				break;
			case 0x16817:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A LAPAQ");
				break;
			case 0x16818:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A LET KUT");
				break;
			case 0x16819:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NTAP MFAA");
				break;
			case 0x1681A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MAEKEUP");
				break;
			case 0x1681B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PASHAE");
				break;
			case 0x1681C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A GHEUAERAE");
				break;
			case 0x1681D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PAMSHAE");
				break;
			case 0x1681E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MON NGGEUAET");
				break;
			case 0x1681F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NZUN MEUT");
				break;
			case 0x16820:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A U YUQ NAE");
				break;
			case 0x16821:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A GHEUAEGHEUAE");
				break;
			case 0x16822:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NTAP NTAA");
				break;
			case 0x16823:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SISA");
				break;
			case 0x16824:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MGBASA");
				break;
			case 0x16825:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MEUNJOMNDEUQ");
				break;
			case 0x16826:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MOOMPUQ");
				break;
			case 0x16827:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A KAFA");
				break;
			case 0x16828:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PA LEERAEWA");
				break;
			case 0x16829:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NDA LEERAEWA");
				break;
			case 0x1682A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PET");
				break;
			case 0x1682B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MAEMKPEN");
				break;
			case 0x1682C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NIKA");
				break;
			case 0x1682D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PUP");
				break;
			case 0x1682E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A TUAEP");
				break;
			case 0x1682F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A LUAEP");
				break;
			case 0x16830:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SONJAM");
				break;
			case 0x16831:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A TEUTEUWEN");
				break;
			case 0x16832:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MAENYI");
				break;
			case 0x16833:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A KET");
				break;
			case 0x16834:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NDAANGGEUAET");
				break;
			case 0x16835:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A KUOQ");
				break;
			case 0x16836:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MOOMEUT");
				break;
			case 0x16837:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SHUM");
				break;
			case 0x16838:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A LOMMAE");
				break;
			case 0x16839:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A FIRI");
				break;
			case 0x1683A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A ROM");
				break;
			case 0x1683B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A KPOQ");
				break;
			case 0x1683C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SOQ");
				break;
			case 0x1683D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MAP PIEET");
				break;
			case 0x1683E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SHIRAE");
				break;
			case 0x1683F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NTAP");
				break;
			case 0x16840:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SHOQ NSHUT YUM");
				break;
			case 0x16841:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NYIT MONGKEUAEQ");
				break;
			case 0x16842:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PAARAE");
				break;
			case 0x16843:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NKAARAE");
				break;
			case 0x16844:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A UNKNOWN");
				break;
			case 0x16845:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NGGEN");
				break;
			case 0x16846:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MAESI");
				break;
			case 0x16847:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NJAM");
				break;
			case 0x16848:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MBANYI");
				break;
			case 0x16849:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NYET");
				break;
			case 0x1684A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A TEUAEN");
				break;
			case 0x1684B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A SOT");
				break;
			case 0x1684C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A PAAM");
				break;
			case 0x1684D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NSHIEE");
				break;
			case 0x1684E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MAEM");
				break;
			case 0x1684F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NYI");
				break;
			case 0x16850:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A KAQ");
				break;
			case 0x16851:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NSHA");
				break;
			case 0x16852:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A VEE");
				break;
			case 0x16853:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A LU");
				break;
			case 0x16854:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NEN");
				break;
			case 0x16855:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A NAQ");
				break;
			case 0x16856:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-A MBAQ");
				break;
			case 0x16857:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NSHUET");
				break;
			case 0x16858:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B TU MAEMGBIEE");
				break;
			case 0x16859:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B SIEE");
				break;
			case 0x1685A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B SET TU");
				break;
			case 0x1685B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B LOM NTEUM");
				break;
			case 0x1685C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MBA MAELEE");
				break;
			case 0x1685D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B KIEEM");
				break;
			case 0x1685E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B YEURAE");
				break;
			case 0x1685F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MBAARAE");
				break;
			case 0x16860:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B KAM");
				break;
			case 0x16861:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B PEESHI");
				break;
			case 0x16862:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B YAFU LEERAEWA");
				break;
			case 0x16863:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B LAM NSHUT NYAM");
				break;
			case 0x16864:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NTIEE SHEUOQ");
				break;
			case 0x16865:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NDU NJAA");
				break;
			case 0x16866:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B GHEUGHEUAEM");
				break;
			case 0x16867:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B PIT");
				break;
			case 0x16868:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B TU NSIEE");
				break;
			case 0x16869:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B SHET NJAQ");
				break;
			case 0x1686A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B SHEUAEQTU");
				break;
			case 0x1686B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MFON TEUAEQ");
				break;
			case 0x1686C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MBIT MBAAKET");
				break;
			case 0x1686D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NYI NTEUM");
				break;
			case 0x1686E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B KEUPUQ");
				break;
			case 0x1686F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B GHEUGHEN");
				break;
			case 0x16870:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B KEUYEUX");
				break;
			case 0x16871:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B LAANAE");
				break;
			case 0x16872:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B PARUM");
				break;
			case 0x16873:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B VEUM");
				break;
			case 0x16874:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NGKINDI MVOP");
				break;
			case 0x16875:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NGGEU MBU");
				break;
			case 0x16876:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B WUAET");
				break;
			case 0x16877:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B SAKEUAE");
				break;
			case 0x16878:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B TAAM");
				break;
			case 0x16879:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MEUQ");
				break;
			case 0x1687A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NGGUOQ");
				break;
			case 0x1687B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NGGUOQ LARGE");
				break;
			case 0x1687C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MFIYAQ");
				break;
			case 0x1687D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B SUE");
				break;
			case 0x1687E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MBEURI");
				break;
			case 0x1687F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MONTIEEN");
				break;
			case 0x16880:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NYAEMAE");
				break;
			case 0x16881:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B PUNGAAM");
				break;
			case 0x16882:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MEUT NGGEET");
				break;
			case 0x16883:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B FEUX");
				break;
			case 0x16884:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MBUOQ");
				break;
			case 0x16885:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B FEE");
				break;
			case 0x16886:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B KEUAEM");
				break;
			case 0x16887:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MA NJEUAENA");
				break;
			case 0x16888:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MA NJUQA");
				break;
			case 0x16889:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B LET");
				break;
			case 0x1688A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NGGAAM");
				break;
			case 0x1688B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NSEN");
				break;
			case 0x1688C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B MA");
				break;
			case 0x1688D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B KIQ");
				break;
			case 0x1688E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-B NGOM");
				break;
			case 0x1688F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NGKUE MAEMBA");
				break;
			case 0x16890:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NZA");
				break;
			case 0x16891:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C YUM");
				break;
			case 0x16892:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C WANGKUOQ");
				break;
			case 0x16893:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NGGEN");
				break;
			case 0x16894:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NDEUAEREE");
				break;
			case 0x16895:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NGKAQ");
				break;
			case 0x16896:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C GHARAE");
				break;
			case 0x16897:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBEEKEET");
				break;
			case 0x16898:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C GBAYI");
				break;
			case 0x16899:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NYIR MKPARAQ MEUN");
				break;
			case 0x1689A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NTU MBIT");
				break;
			case 0x1689B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBEUM");
				break;
			case 0x1689C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C PIRIEEN");
				break;
			case 0x1689D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NDOMBU");
				break;
			case 0x1689E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBAA CABBAGE-TREE");
				break;
			case 0x1689F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KEUSHEUAEP");
				break;
			case 0x168A0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C GHAP");
				break;
			case 0x168A1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KEUKAQ");
				break;
			case 0x168A2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C YU MUOMAE");
				break;
			case 0x168A3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NZEUM");
				break;
			case 0x168A4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBUE");
				break;
			case 0x168A5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NSEUAEN");
				break;
			case 0x168A6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBIT");
				break;
			case 0x168A7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C YEUQ");
				break;
			case 0x168A8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KPARAQ");
				break;
			case 0x168A9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KAA");
				break;
			case 0x168AA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C SEUX");
				break;
			case 0x168AB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NDIDA");
				break;
			case 0x168AC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C TAASHAE");
				break;
			case 0x168AD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NJUEQ");
				break;
			case 0x168AE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C TITA YUE");
				break;
			case 0x168AF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C SUAET");
				break;
			case 0x168B0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NGGUAEN NYAM");
				break;
			case 0x168B1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C VEUX");
				break;
			case 0x168B2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NANSANAQ");
				break;
			case 0x168B3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MA KEUAERI");
				break;
			case 0x168B4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NTAA");
				break;
			case 0x168B5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NGGUON");
				break;
			case 0x168B6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C LAP");
				break;
			case 0x168B7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBIRIEEN");
				break;
			case 0x168B8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MGBASAQ");
				break;
			case 0x168B9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NTEUNGBA");
				break;
			case 0x168BA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C TEUTEUX");
				break;
			case 0x168BB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NGGUM");
				break;
			case 0x168BC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C FUE");
				break;
			case 0x168BD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NDEUT");
				break;
			case 0x168BE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NSA");
				break;
			case 0x168BF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NSHAQ");
				break;
			case 0x168C0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C BUNG");
				break;
			case 0x168C1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C VEUAEPEN");
				break;
			case 0x168C2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBERAE");
				break;
			case 0x168C3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C RU");
				break;
			case 0x168C4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NJAEM");
				break;
			case 0x168C5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C LAM");
				break;
			case 0x168C6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C TITUAEP");
				break;
			case 0x168C7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NSUOT NGOM");
				break;
			case 0x168C8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NJEEEE");
				break;
			case 0x168C9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KET");
				break;
			case 0x168CA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NGGU");
				break;
			case 0x168CB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MAESI");
				break;
			case 0x168CC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBUAEM");
				break;
			case 0x168CD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C LU");
				break;
			case 0x168CE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KUT");
				break;
			case 0x168CF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NJAM");
				break;
			case 0x168D0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NGOM");
				break;
			case 0x168D1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C WUP");
				break;
			case 0x168D2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NGGUEET");
				break;
			case 0x168D3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NSOM");
				break;
			case 0x168D4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NTEN");
				break;
			case 0x168D5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KUOP NKAARAE");
				break;
			case 0x168D6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NSUN");
				break;
			case 0x168D7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NDAM");
				break;
			case 0x168D8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MA NSIEE");
				break;
			case 0x168D9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C YAA");
				break;
			case 0x168DA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NDAP");
				break;
			case 0x168DB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C SHUEQ");
				break;
			case 0x168DC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C SETFON");
				break;
			case 0x168DD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBI");
				break;
			case 0x168DE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MAEMBA");
				break;
			case 0x168DF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBANYI");
				break;
			case 0x168E0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KEUSEUX");
				break;
			case 0x168E1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBEUX");
				break;
			case 0x168E2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KEUM");
				break;
			case 0x168E3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MBAA PICKET");
				break;
			case 0x168E4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C YUWOQ");
				break;
			case 0x168E5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NJEUX");
				break;
			case 0x168E6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MIEE");
				break;
			case 0x168E7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C MUAE");
				break;
			case 0x168E8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C SHIQ");
				break;
			case 0x168E9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KEN LAW");
				break;
			case 0x168EA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C KEN FATIGUE");
				break;
			case 0x168EB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NGAQ");
				break;
			case 0x168EC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C NAQ");
				break;
			case 0x168ED:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C LIQ");
				break;
			case 0x168EE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C PIN");
				break;
			case 0x168EF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C PEN");
				break;
			case 0x168F0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-C TET");
				break;
			case 0x168F1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MBUO");
				break;
			case 0x168F2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D WAP");
				break;
			case 0x168F3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NJI");
				break;
			case 0x168F4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MFON");
				break;
			case 0x168F5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NJIEE");
				break;
			case 0x168F6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D LIEE");
				break;
			case 0x168F7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NJEUT");
				break;
			case 0x168F8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NSHEE");
				break;
			case 0x168F9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGGAAMAE");
				break;
			case 0x168FA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NYAM");
				break;
			case 0x168FB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D WUAEN");
				break;
			case 0x168FC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGKUN");
				break;
			case 0x168FD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SHEE");
				break;
			case 0x168FE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGKAP");
				break;
			case 0x168FF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KEUAETMEUN");
				break;
			case 0x16900:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D TEUT");
				break;
			case 0x16901:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SHEUAE");
				break;
			case 0x16902:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NJAP");
				break;
			case 0x16903:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SUE");
				break;
			case 0x16904:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KET");
				break;
			case 0x16905:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D YAEMMAE");
				break;
			case 0x16906:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KUOM");
				break;
			case 0x16907:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SAP");
				break;
			case 0x16908:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MFEUT");
				break;
			case 0x16909:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NDEUX");
				break;
			case 0x1690A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MALEERI");
				break;
			case 0x1690B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MEUT");
				break;
			case 0x1690C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SEUAEQ");
				break;
			case 0x1690D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D YEN");
				break;
			case 0x1690E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NJEUAEM");
				break;
			case 0x1690F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KEUOT MBUAE");
				break;
			case 0x16910:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGKEURI");
				break;
			case 0x16911:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D TU");
				break;
			case 0x16912:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D GHAA");
				break;
			case 0x16913:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGKYEE");
				break;
			case 0x16914:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D FEUFEUAET");
				break;
			case 0x16915:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NDEE");
				break;
			case 0x16916:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MGBOFUM");
				break;
			case 0x16917:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D LEUAEP");
				break;
			case 0x16918:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NDON");
				break;
			case 0x16919:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MONI");
				break;
			case 0x1691A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MGBEUN");
				break;
			case 0x1691B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D PUUT");
				break;
			case 0x1691C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MGBIEE");
				break;
			case 0x1691D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MFO");
				break;
			case 0x1691E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D LUM");
				break;
			case 0x1691F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NSIEEP");
				break;
			case 0x16920:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MBAA");
				break;
			case 0x16921:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KWAET");
				break;
			case 0x16922:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NYET");
				break;
			case 0x16923:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D TEUAEN");
				break;
			case 0x16924:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SOT");
				break;
			case 0x16925:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D YUWOQ");
				break;
			case 0x16926:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KEUM");
				break;
			case 0x16927:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D RAEM");
				break;
			case 0x16928:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D TEEEE");
				break;
			case 0x16929:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGKEUAEQ");
				break;
			case 0x1692A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MFEUAE");
				break;
			case 0x1692B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NSIEET");
				break;
			case 0x1692C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KEUP");
				break;
			case 0x1692D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D PIP");
				break;
			case 0x1692E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D PEUTAE");
				break;
			case 0x1692F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NYUE");
				break;
			case 0x16930:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D LET");
				break;
			case 0x16931:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGGAAM");
				break;
			case 0x16932:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MFIEE");
				break;
			case 0x16933:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGGWAEN");
				break;
			case 0x16934:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D YUOM");
				break;
			case 0x16935:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D PAP");
				break;
			case 0x16936:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D YUOP");
				break;
			case 0x16937:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NDAM");
				break;
			case 0x16938:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NTEUM");
				break;
			case 0x16939:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SUAE");
				break;
			case 0x1693A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KUN");
				break;
			case 0x1693B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGGEUX");
				break;
			case 0x1693C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGKIEE");
				break;
			case 0x1693D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D TUOT");
				break;
			case 0x1693E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MEUN");
				break;
			case 0x1693F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KUQ");
				break;
			case 0x16940:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NSUM");
				break;
			case 0x16941:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D TEUN");
				break;
			case 0x16942:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MAENJET");
				break;
			case 0x16943:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGGAP");
				break;
			case 0x16944:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D LEUM");
				break;
			case 0x16945:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NGGUOM");
				break;
			case 0x16946:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NSHUT");
				break;
			case 0x16947:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NJUEQ");
				break;
			case 0x16948:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D GHEUAE");
				break;
			case 0x16949:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KU");
				break;
			case 0x1694A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D REN OLD");
				break;
			case 0x1694B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D TAE");
				break;
			case 0x1694C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D TOQ");
				break;
			case 0x1694D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NYI");
				break;
			case 0x1694E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D RII");
				break;
			case 0x1694F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D LEEEE");
				break;
			case 0x16950:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MEEEE");
				break;
			case 0x16951:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D M");
				break;
			case 0x16952:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SUU");
				break;
			case 0x16953:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MU");
				break;
			case 0x16954:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SHII");
				break;
			case 0x16955:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SHEUX");
				break;
			case 0x16956:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D KYEE");
				break;
			case 0x16957:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NU");
				break;
			case 0x16958:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SHU");
				break;
			case 0x16959:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NTEE");
				break;
			case 0x1695A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D PEE");
				break;
			case 0x1695B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NI");
				break;
			case 0x1695C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SHOQ");
				break;
			case 0x1695D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D PUQ");
				break;
			case 0x1695E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MVOP");
				break;
			case 0x1695F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D LOQ");
				break;
			case 0x16960:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D REN MUCH");
				break;
			case 0x16961:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D TI");
				break;
			case 0x16962:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D NTUU");
				break;
			case 0x16963:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D MBAA SEVEN");
				break;
			case 0x16964:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D SAQ");
				break;
			case 0x16965:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-D FAA");
				break;
			case 0x16966:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NDAP");
				break;
			case 0x16967:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TOON");
				break;
			case 0x16968:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MBEUM");
				break;
			case 0x16969:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E LAP");
				break;
			case 0x1696A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E VOM");
				break;
			case 0x1696B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E LOON");
				break;
			case 0x1696C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PAA");
				break;
			case 0x1696D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E SOM");
				break;
			case 0x1696E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E RAQ");
				break;
			case 0x1696F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NSHUOP");
				break;
			case 0x16970:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NDUN");
				break;
			case 0x16971:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PUAE");
				break;
			case 0x16972:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TAM");
				break;
			case 0x16973:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGKA");
				break;
			case 0x16974:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E KPEUX");
				break;
			case 0x16975:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E WUO");
				break;
			case 0x16976:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E SEE");
				break;
			case 0x16977:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGGEUAET");
				break;
			case 0x16978:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PAAM");
				break;
			case 0x16979:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TOO");
				break;
			case 0x1697A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E KUOP");
				break;
			case 0x1697B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E LOM");
				break;
			case 0x1697C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NSHIEE");
				break;
			case 0x1697D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGOP");
				break;
			case 0x1697E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MAEM");
				break;
			case 0x1697F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGKEUX");
				break;
			case 0x16980:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGOQ");
				break;
			case 0x16981:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NSHUE");
				break;
			case 0x16982:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E RIMGBA");
				break;
			case 0x16983:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NJEUX");
				break;
			case 0x16984:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PEEM");
				break;
			case 0x16985:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E SAA");
				break;
			case 0x16986:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGGURAE");
				break;
			case 0x16987:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MGBA");
				break;
			case 0x16988:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E GHEUX");
				break;
			case 0x16989:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGKEUAEM");
				break;
			case 0x1698A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NJAEMLI");
				break;
			case 0x1698B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MAP");
				break;
			case 0x1698C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E LOOT");
				break;
			case 0x1698D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGGEEEE");
				break;
			case 0x1698E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NDIQ");
				break;
			case 0x1698F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TAEN NTEUM");
				break;
			case 0x16990:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E SET");
				break;
			case 0x16991:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PUM");
				break;
			case 0x16992:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NDAA SOFTNESS");
				break;
			case 0x16993:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGGUAESHAE NYAM");
				break;
			case 0x16994:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YIEE");
				break;
			case 0x16995:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E GHEUN");
				break;
			case 0x16996:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TUAE");
				break;
			case 0x16997:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YEUAE");
				break;
			case 0x16998:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PO");
				break;
			case 0x16999:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TUMAE");
				break;
			case 0x1699A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E KEUAE");
				break;
			case 0x1699B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E SUAEN");
				break;
			case 0x1699C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TEUAEQ");
				break;
			case 0x1699D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E VEUAE");
				break;
			case 0x1699E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E WEUX");
				break;
			case 0x1699F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E LAAM");
				break;
			case 0x169A0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PU");
				break;
			case 0x169A1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TAAQ");
				break;
			case 0x169A2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E GHAAMAE");
				break;
			case 0x169A3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGEUREUT");
				break;
			case 0x169A4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E SHEUAEQ");
				break;
			case 0x169A5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MGBEN");
				break;
			case 0x169A6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MBEE");
				break;
			case 0x169A7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NZAQ");
				break;
			case 0x169A8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NKOM");
				break;
			case 0x169A9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E GBET");
				break;
			case 0x169AA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TUM");
				break;
			case 0x169AB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E KUET");
				break;
			case 0x169AC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YAP");
				break;
			case 0x169AD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NYI CLEAVER");
				break;
			case 0x169AE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YIT");
				break;
			case 0x169AF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MFEUQ");
				break;
			case 0x169B0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NDIAQ");
				break;
			case 0x169B1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PIEEQ");
				break;
			case 0x169B2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YUEQ");
				break;
			case 0x169B3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E LEUAEM");
				break;
			case 0x169B4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E FUE");
				break;
			case 0x169B5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E GBEUX");
				break;
			case 0x169B6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGKUP");
				break;
			case 0x169B7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E KET");
				break;
			case 0x169B8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MAE");
				break;
			case 0x169B9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGKAAMI");
				break;
			case 0x169BA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E GHET");
				break;
			case 0x169BB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E FA");
				break;
			case 0x169BC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NTUM");
				break;
			case 0x169BD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PEUT");
				break;
			case 0x169BE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YEUM");
				break;
			case 0x169BF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGGEUAE");
				break;
			case 0x169C0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NYI BETWEEN");
				break;
			case 0x169C1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NZUQ");
				break;
			case 0x169C2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E POON");
				break;
			case 0x169C3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MIEE");
				break;
			case 0x169C4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E FUET");
				break;
			case 0x169C5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NAE");
				break;
			case 0x169C6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MUAE");
				break;
			case 0x169C7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E GHEUAE");
				break;
			case 0x169C8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E FU I");
				break;
			case 0x169C9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MVI");
				break;
			case 0x169CA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PUAQ");
				break;
			case 0x169CB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGKUM");
				break;
			case 0x169CC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E KUT");
				break;
			case 0x169CD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PIET");
				break;
			case 0x169CE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NTAP");
				break;
			case 0x169CF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YEUAET");
				break;
			case 0x169D0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGGUP");
				break;
			case 0x169D1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PA PEOPLE");
				break;
			case 0x169D2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E FU CALL");
				break;
			case 0x169D3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E FOM");
				break;
			case 0x169D4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NJEE");
				break;
			case 0x169D5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E A");
				break;
			case 0x169D6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TOQ");
				break;
			case 0x169D7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E O");
				break;
			case 0x169D8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E I");
				break;
			case 0x169D9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E LAQ");
				break;
			case 0x169DA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PA PLURAL");
				break;
			case 0x169DB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TAA");
				break;
			case 0x169DC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TAQ");
				break;
			case 0x169DD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NDAA MY HOUSE");
				break;
			case 0x169DE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E SHIQ");
				break;
			case 0x169DF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YEUX");
				break;
			case 0x169E0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGUAE");
				break;
			case 0x169E1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YUAEN");
				break;
			case 0x169E2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YOQ SWIMMING");
				break;
			case 0x169E3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YOQ COVER");
				break;
			case 0x169E4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YUQ");
				break;
			case 0x169E5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E YUN");
				break;
			case 0x169E6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E KEUX");
				break;
			case 0x169E7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PEUX");
				break;
			case 0x169E8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NJEE EPOCH");
				break;
			case 0x169E9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PUE");
				break;
			case 0x169EA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E WUE");
				break;
			case 0x169EB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E FEE");
				break;
			case 0x169EC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E VEE");
				break;
			case 0x169ED:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E LU");
				break;
			case 0x169EE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MI");
				break;
			case 0x169EF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E REUX");
				break;
			case 0x169F0:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E RAE");
				break;
			case 0x169F1:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGUAET");
				break;
			case 0x169F2:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NGA");
				break;
			case 0x169F3:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E SHO");
				break;
			case 0x169F4:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E SHOQ");
				break;
			case 0x169F5:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E FU REMEDY");
				break;
			case 0x169F6:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E NA");
				break;
			case 0x169F7:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E PI");
				break;
			case 0x169F8:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E LOQ");
				break;
			case 0x169F9:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E KO");
				break;
			case 0x169FA:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MEN");
				break;
			case 0x169FB:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MA");
				break;
			case 0x169FC:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MAQ");
				break;
			case 0x169FD:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TEU");
				break;
			case 0x169FE:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E KI");
				break;
			case 0x169FF:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E MON");
				break;
			case 0x16A00:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E TEN");
				break;
			case 0x16A01:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E FAQ");
				break;
			case 0x16A02:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-E GHOM");
				break;
			case 0x16A03:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F KA");
				break;
			case 0x16A04:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F U");
				break;
			case 0x16A05:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F KU");
				break;
			case 0x16A06:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F EE");
				break;
			case 0x16A07:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F REE");
				break;
			case 0x16A08:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F TAE");
				break;
			case 0x16A09:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NYI");
				break;
			case 0x16A0A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F LA");
				break;
			case 0x16A0B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F RII");
				break;
			case 0x16A0C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F RIEE");
				break;
			case 0x16A0D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F MEEEE");
				break;
			case 0x16A0E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F TAA");
				break;
			case 0x16A0F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NDAA");
				break;
			case 0x16A10:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NJAEM");
				break;
			case 0x16A11:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F M");
				break;
			case 0x16A12:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F SUU");
				break;
			case 0x16A13:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F SHII");
				break;
			case 0x16A14:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F SI");
				break;
			case 0x16A15:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F SEUX");
				break;
			case 0x16A16:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F KYEE");
				break;
			case 0x16A17:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F KET");
				break;
			case 0x16A18:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NUAE");
				break;
			case 0x16A19:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NU");
				break;
			case 0x16A1A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NJUAE");
				break;
			case 0x16A1B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F YOQ");
				break;
			case 0x16A1C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F SHU");
				break;
			case 0x16A1D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F YA");
				break;
			case 0x16A1E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NSHA");
				break;
			case 0x16A1F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F PEUX");
				break;
			case 0x16A20:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NTEE");
				break;
			case 0x16A21:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F WUE");
				break;
			case 0x16A22:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F PEE");
				break;
			case 0x16A23:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F RU");
				break;
			case 0x16A24:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NI");
				break;
			case 0x16A25:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F REUX");
				break;
			case 0x16A26:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F KEN");
				break;
			case 0x16A27:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NGKWAEN");
				break;
			case 0x16A28:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F NGGA");
				break;
			case 0x16A29:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F SHO");
				break;
			case 0x16A2A:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F PUAE");
				break;
			case 0x16A2B:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F FOM");
				break;
			case 0x16A2C:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F WA");
				break;
			case 0x16A2D:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F LI");
				break;
			case 0x16A2E:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F LOQ");
				break;
			case 0x16A2F:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F KO");
				break;
			case 0x16A30:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F MBEN");
				break;
			case 0x16A31:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F REN");
				break;
			case 0x16A32:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F MA");
				break;
			case 0x16A33:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F MO");
				break;
			case 0x16A34:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F MBAA");
				break;
			case 0x16A35:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F TET");
				break;
			case 0x16A36:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F KPA");
				break;
			case 0x16A37:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F SAMBA");
				break;
			case 0x16A38:
				strcpy_s(buf, buf_size, "BAMUM LETTER PHASE-F VUEQ");
				break;
			case 0x16A40:
				strcpy_s(buf, buf_size, "MRO LETTER TA");
				break;
			case 0x16A41:
				strcpy_s(buf, buf_size, "MRO LETTER NGI");
				break;
			case 0x16A42:
				strcpy_s(buf, buf_size, "MRO LETTER YO");
				break;
			case 0x16A43:
				strcpy_s(buf, buf_size, "MRO LETTER MIM");
				break;
			case 0x16A44:
				strcpy_s(buf, buf_size, "MRO LETTER BA");
				break;
			case 0x16A45:
				strcpy_s(buf, buf_size, "MRO LETTER DA");
				break;
			case 0x16A46:
				strcpy_s(buf, buf_size, "MRO LETTER A");
				break;
			case 0x16A47:
				strcpy_s(buf, buf_size, "MRO LETTER PHI");
				break;
			case 0x16A48:
				strcpy_s(buf, buf_size, "MRO LETTER KHAI");
				break;
			case 0x16A49:
				strcpy_s(buf, buf_size, "MRO LETTER HAO");
				break;
			case 0x16A4A:
				strcpy_s(buf, buf_size, "MRO LETTER DAI");
				break;
			case 0x16A4B:
				strcpy_s(buf, buf_size, "MRO LETTER CHU");
				break;
			case 0x16A4C:
				strcpy_s(buf, buf_size, "MRO LETTER KEAAE");
				break;
			case 0x16A4D:
				strcpy_s(buf, buf_size, "MRO LETTER OL");
				break;
			case 0x16A4E:
				strcpy_s(buf, buf_size, "MRO LETTER MAEM");
				break;
			case 0x16A4F:
				strcpy_s(buf, buf_size, "MRO LETTER NIN");
				break;
			case 0x16A50:
				strcpy_s(buf, buf_size, "MRO LETTER PA");
				break;
			case 0x16A51:
				strcpy_s(buf, buf_size, "MRO LETTER OO");
				break;
			case 0x16A52:
				strcpy_s(buf, buf_size, "MRO LETTER O");
				break;
			case 0x16A53:
				strcpy_s(buf, buf_size, "MRO LETTER RO");
				break;
			case 0x16A54:
				strcpy_s(buf, buf_size, "MRO LETTER SHI");
				break;
			case 0x16A55:
				strcpy_s(buf, buf_size, "MRO LETTER THEA");
				break;
			case 0x16A56:
				strcpy_s(buf, buf_size, "MRO LETTER EA");
				break;
			case 0x16A57:
				strcpy_s(buf, buf_size, "MRO LETTER WA");
				break;
			case 0x16A58:
				strcpy_s(buf, buf_size, "MRO LETTER E");
				break;
			case 0x16A59:
				strcpy_s(buf, buf_size, "MRO LETTER KO");
				break;
			case 0x16A5A:
				strcpy_s(buf, buf_size, "MRO LETTER LAN");
				break;
			case 0x16A5B:
				strcpy_s(buf, buf_size, "MRO LETTER LA");
				break;
			case 0x16A5C:
				strcpy_s(buf, buf_size, "MRO LETTER HAI");
				break;
			case 0x16A5D:
				strcpy_s(buf, buf_size, "MRO LETTER RI");
				break;
			case 0x16A5E:
				strcpy_s(buf, buf_size, "MRO LETTER TEK");
				break;
			case 0x16A60:
				strcpy_s(buf, buf_size, "MRO DIGIT ZERO");
				break;
			case 0x16A61:
				strcpy_s(buf, buf_size, "MRO DIGIT ONE");
				break;
			case 0x16A62:
				strcpy_s(buf, buf_size, "MRO DIGIT TWO");
				break;
			case 0x16A63:
				strcpy_s(buf, buf_size, "MRO DIGIT THREE");
				break;
			case 0x16A64:
				strcpy_s(buf, buf_size, "MRO DIGIT FOUR");
				break;
			case 0x16A65:
				strcpy_s(buf, buf_size, "MRO DIGIT FIVE");
				break;
			case 0x16A66:
				strcpy_s(buf, buf_size, "MRO DIGIT SIX");
				break;
			case 0x16A67:
				strcpy_s(buf, buf_size, "MRO DIGIT SEVEN");
				break;
			case 0x16A68:
				strcpy_s(buf, buf_size, "MRO DIGIT EIGHT");
				break;
			case 0x16A69:
				strcpy_s(buf, buf_size, "MRO DIGIT NINE");
				break;
			case 0x16A6E:
				strcpy_s(buf, buf_size, "MRO DANDA");
				break;
			case 0x16A6F:
				strcpy_s(buf, buf_size, "MRO DOUBLE DANDA");
				break;
			case 0x16AD0:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER ENNI");
				break;
			case 0x16AD1:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER KA");
				break;
			case 0x16AD2:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER SE");
				break;
			case 0x16AD3:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER FA");
				break;
			case 0x16AD4:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER MBE");
				break;
			case 0x16AD5:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER YIE");
				break;
			case 0x16AD6:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER GAH");
				break;
			case 0x16AD7:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER DHII");
				break;
			case 0x16AD8:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER KPAH");
				break;
			case 0x16AD9:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER JO");
				break;
			case 0x16ADA:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER HWAH");
				break;
			case 0x16ADB:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER WA");
				break;
			case 0x16ADC:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER ZO");
				break;
			case 0x16ADD:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER GBU");
				break;
			case 0x16ADE:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER DO");
				break;
			case 0x16ADF:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER CE");
				break;
			case 0x16AE0:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER UWU");
				break;
			case 0x16AE1:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER TO");
				break;
			case 0x16AE2:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER BA");
				break;
			case 0x16AE3:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER VU");
				break;
			case 0x16AE4:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER YEIN");
				break;
			case 0x16AE5:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER PA");
				break;
			case 0x16AE6:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER WADDA");
				break;
			case 0x16AE7:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER A");
				break;
			case 0x16AE8:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER O");
				break;
			case 0x16AE9:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER OO");
				break;
			case 0x16AEA:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER U");
				break;
			case 0x16AEB:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER EE");
				break;
			case 0x16AEC:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER E");
				break;
			case 0x16AED:
				strcpy_s(buf, buf_size, "BASSA VAH LETTER I");
				break;
			case 0x16AF0:
				strcpy_s(buf, buf_size, "BASSA VAH COMBINING HIGH TONE");
				break;
			case 0x16AF1:
				strcpy_s(buf, buf_size, "BASSA VAH COMBINING LOW TONE");
				break;
			case 0x16AF2:
				strcpy_s(buf, buf_size, "BASSA VAH COMBINING MID TONE");
				break;
			case 0x16AF3:
				strcpy_s(buf, buf_size, "BASSA VAH COMBINING LOW-MID TONE");
				break;
			case 0x16AF4:
				strcpy_s(buf, buf_size, "BASSA VAH COMBINING HIGH-LOW TONE");
				break;
			case 0x16AF5:
				strcpy_s(buf, buf_size, "BASSA VAH FULL STOP");
				break;
			case 0x16B00:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KEEB");
				break;
			case 0x16B01:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KEEV");
				break;
			case 0x16B02:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KIB");
				break;
			case 0x16B03:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KIV");
				break;
			case 0x16B04:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KAUB");
				break;
			case 0x16B05:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KAUV");
				break;
			case 0x16B06:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KUB");
				break;
			case 0x16B07:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KUV");
				break;
			case 0x16B08:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KEB");
				break;
			case 0x16B09:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KEV");
				break;
			case 0x16B0A:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KAIB");
				break;
			case 0x16B0B:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KAIV");
				break;
			case 0x16B0C:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KOOB");
				break;
			case 0x16B0D:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KOOV");
				break;
			case 0x16B0E:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KAWB");
				break;
			case 0x16B0F:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KAWV");
				break;
			case 0x16B10:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KUAB");
				break;
			case 0x16B11:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KUAV");
				break;
			case 0x16B12:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KOB");
				break;
			case 0x16B13:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KOV");
				break;
			case 0x16B14:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KIAB");
				break;
			case 0x16B15:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KIAV");
				break;
			case 0x16B16:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KAB");
				break;
			case 0x16B17:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KAV");
				break;
			case 0x16B18:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KWB");
				break;
			case 0x16B19:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KWV");
				break;
			case 0x16B1A:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KAAB");
				break;
			case 0x16B1B:
				strcpy_s(buf, buf_size, "PAHAWH HMONG VOWEL KAAV");
				break;
			case 0x16B1C:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT VAU");
				break;
			case 0x16B1D:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT NTSAU");
				break;
			case 0x16B1E:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT LAU");
				break;
			case 0x16B1F:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT HAU");
				break;
			case 0x16B20:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT NLAU");
				break;
			case 0x16B21:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT RAU");
				break;
			case 0x16B22:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT NKAU");
				break;
			case 0x16B23:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT QHAU");
				break;
			case 0x16B24:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT YAU");
				break;
			case 0x16B25:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT HLAU");
				break;
			case 0x16B26:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT MAU");
				break;
			case 0x16B27:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT CHAU");
				break;
			case 0x16B28:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT NCHAU");
				break;
			case 0x16B29:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT HNAU");
				break;
			case 0x16B2A:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT PLHAU");
				break;
			case 0x16B2B:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT NTHAU");
				break;
			case 0x16B2C:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT NAU");
				break;
			case 0x16B2D:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT AU");
				break;
			case 0x16B2E:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT XAU");
				break;
			case 0x16B2F:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CONSONANT CAU");
				break;
			case 0x16B30:
				strcpy_s(buf, buf_size, "PAHAWH HMONG MARK CIM TUB");
				break;
			case 0x16B31:
				strcpy_s(buf, buf_size, "PAHAWH HMONG MARK CIM SO");
				break;
			case 0x16B32:
				strcpy_s(buf, buf_size, "PAHAWH HMONG MARK CIM KES");
				break;
			case 0x16B33:
				strcpy_s(buf, buf_size, "PAHAWH HMONG MARK CIM KHAV");
				break;
			case 0x16B34:
				strcpy_s(buf, buf_size, "PAHAWH HMONG MARK CIM SUAM");
				break;
			case 0x16B35:
				strcpy_s(buf, buf_size, "PAHAWH HMONG MARK CIM HOM");
				break;
			case 0x16B36:
				strcpy_s(buf, buf_size, "PAHAWH HMONG MARK CIM TAUM");
				break;
			case 0x16B37:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN VOS THOM");
				break;
			case 0x16B38:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN VOS TSHAB CEEB");
				break;
			case 0x16B39:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN CIM CHEEM");
				break;
			case 0x16B3A:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN VOS THIAB");
				break;
			case 0x16B3B:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN VOS FEEM");
				break;
			case 0x16B3C:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN XYEEM NTXIV");
				break;
			case 0x16B3D:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN XYEEM RHO");
				break;
			case 0x16B3E:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN XYEEM TOV");
				break;
			case 0x16B3F:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN XYEEM FAIB");
				break;
			case 0x16B40:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN VOS SEEV");
				break;
			case 0x16B41:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN MEEJ SUAB");
				break;
			case 0x16B42:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN VOS NRUA");
				break;
			case 0x16B43:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN IB YAM");
				break;
			case 0x16B44:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN XAUS");
				break;
			case 0x16B45:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN CIM TSOV ROG");
				break;
			case 0x16B50:
				strcpy_s(buf, buf_size, "PAHAWH HMONG DIGIT ZERO");
				break;
			case 0x16B51:
				strcpy_s(buf, buf_size, "PAHAWH HMONG DIGIT ONE");
				break;
			case 0x16B52:
				strcpy_s(buf, buf_size, "PAHAWH HMONG DIGIT TWO");
				break;
			case 0x16B53:
				strcpy_s(buf, buf_size, "PAHAWH HMONG DIGIT THREE");
				break;
			case 0x16B54:
				strcpy_s(buf, buf_size, "PAHAWH HMONG DIGIT FOUR");
				break;
			case 0x16B55:
				strcpy_s(buf, buf_size, "PAHAWH HMONG DIGIT FIVE");
				break;
			case 0x16B56:
				strcpy_s(buf, buf_size, "PAHAWH HMONG DIGIT SIX");
				break;
			case 0x16B57:
				strcpy_s(buf, buf_size, "PAHAWH HMONG DIGIT SEVEN");
				break;
			case 0x16B58:
				strcpy_s(buf, buf_size, "PAHAWH HMONG DIGIT EIGHT");
				break;
			case 0x16B59:
				strcpy_s(buf, buf_size, "PAHAWH HMONG DIGIT NINE");
				break;
			case 0x16B5B:
				strcpy_s(buf, buf_size, "PAHAWH HMONG NUMBER TENS");
				break;
			case 0x16B5C:
				strcpy_s(buf, buf_size, "PAHAWH HMONG NUMBER HUNDREDS");
				break;
			case 0x16B5D:
				strcpy_s(buf, buf_size, "PAHAWH HMONG NUMBER TEN THOUSANDS");
				break;
			case 0x16B5E:
				strcpy_s(buf, buf_size, "PAHAWH HMONG NUMBER MILLIONS");
				break;
			case 0x16B5F:
				strcpy_s(buf, buf_size, "PAHAWH HMONG NUMBER HUNDRED MILLIONS");
				break;
			case 0x16B60:
				strcpy_s(buf, buf_size, "PAHAWH HMONG NUMBER TEN BILLIONS");
				break;
			case 0x16B61:
				strcpy_s(buf, buf_size, "PAHAWH HMONG NUMBER TRILLIONS");
				break;
			case 0x16B63:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN VOS LUB");
				break;
			case 0x16B64:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN XYOO");
				break;
			case 0x16B65:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN HLI");
				break;
			case 0x16B66:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN THIRD-STAGE HLI");
				break;
			case 0x16B67:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN ZWJ THAJ");
				break;
			case 0x16B68:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN HNUB");
				break;
			case 0x16B69:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN NQIG");
				break;
			case 0x16B6A:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN XIAB");
				break;
			case 0x16B6B:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN NTUJ");
				break;
			case 0x16B6C:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN AV");
				break;
			case 0x16B6D:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN TXHEEJ CEEV");
				break;
			case 0x16B6E:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN MEEJ TSEEB");
				break;
			case 0x16B6F:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN TAU");
				break;
			case 0x16B70:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN LOS");
				break;
			case 0x16B71:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN MUS");
				break;
			case 0x16B72:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN CIM HAIS LUS NTOG NTOG");
				break;
			case 0x16B73:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN CIM CUAM TSHOOJ");
				break;
			case 0x16B74:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN CIM TXWV");
				break;
			case 0x16B75:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN CIM TXWV CHWV");
				break;
			case 0x16B76:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN CIM PUB DAWB");
				break;
			case 0x16B77:
				strcpy_s(buf, buf_size, "PAHAWH HMONG SIGN CIM NRES TOS");
				break;
			case 0x16B7D:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN TSHEEJ");
				break;
			case 0x16B7E:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN YEEG");
				break;
			case 0x16B7F:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN LIS");
				break;
			case 0x16B80:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN LAUJ");
				break;
			case 0x16B81:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN XYOOJ");
				break;
			case 0x16B82:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN KOO");
				break;
			case 0x16B83:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN HAWJ");
				break;
			case 0x16B84:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN MUAS");
				break;
			case 0x16B85:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN THOJ");
				break;
			case 0x16B86:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN TSAB");
				break;
			case 0x16B87:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN PHAB");
				break;
			case 0x16B88:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN KHAB");
				break;
			case 0x16B89:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN HAM");
				break;
			case 0x16B8A:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN VAJ");
				break;
			case 0x16B8B:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN FAJ");
				break;
			case 0x16B8C:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN YAJ");
				break;
			case 0x16B8D:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN TSWB");
				break;
			case 0x16B8E:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN KWM");
				break;
			case 0x16B8F:
				strcpy_s(buf, buf_size, "PAHAWH HMONG CLAN SIGN VWJ");
				break;
			case 0x16E40:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER M");
				break;
			case 0x16E41:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER S");
				break;
			case 0x16E42:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER V");
				break;
			case 0x16E43:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER W");
				break;
			case 0x16E44:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER ATIU");
				break;
			case 0x16E45:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER Z");
				break;
			case 0x16E46:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER KP");
				break;
			case 0x16E47:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER P");
				break;
			case 0x16E48:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER T");
				break;
			case 0x16E49:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER G");
				break;
			case 0x16E4A:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER F");
				break;
			case 0x16E4B:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER I");
				break;
			case 0x16E4C:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER K");
				break;
			case 0x16E4D:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER A");
				break;
			case 0x16E4E:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER J");
				break;
			case 0x16E4F:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER E");
				break;
			case 0x16E50:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER B");
				break;
			case 0x16E51:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER C");
				break;
			case 0x16E52:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER U");
				break;
			case 0x16E53:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER YU");
				break;
			case 0x16E54:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER L");
				break;
			case 0x16E55:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER Q");
				break;
			case 0x16E56:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER HP");
				break;
			case 0x16E57:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER NY");
				break;
			case 0x16E58:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER X");
				break;
			case 0x16E59:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER D");
				break;
			case 0x16E5A:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER OE");
				break;
			case 0x16E5B:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER N");
				break;
			case 0x16E5C:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER R");
				break;
			case 0x16E5D:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER O");
				break;
			case 0x16E5E:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER AI");
				break;
			case 0x16E5F:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN CAPITAL LETTER Y");
				break;
			case 0x16E60:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER M");
				break;
			case 0x16E61:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER S");
				break;
			case 0x16E62:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER V");
				break;
			case 0x16E63:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER W");
				break;
			case 0x16E64:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER ATIU");
				break;
			case 0x16E65:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER Z");
				break;
			case 0x16E66:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER KP");
				break;
			case 0x16E67:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER P");
				break;
			case 0x16E68:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER T");
				break;
			case 0x16E69:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER G");
				break;
			case 0x16E6A:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER F");
				break;
			case 0x16E6B:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER I");
				break;
			case 0x16E6C:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER K");
				break;
			case 0x16E6D:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER A");
				break;
			case 0x16E6E:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER J");
				break;
			case 0x16E6F:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER E");
				break;
			case 0x16E70:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER B");
				break;
			case 0x16E71:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER C");
				break;
			case 0x16E72:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER U");
				break;
			case 0x16E73:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER YU");
				break;
			case 0x16E74:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER L");
				break;
			case 0x16E75:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER Q");
				break;
			case 0x16E76:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER HP");
				break;
			case 0x16E77:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER NY");
				break;
			case 0x16E78:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER X");
				break;
			case 0x16E79:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER D");
				break;
			case 0x16E7A:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER OE");
				break;
			case 0x16E7B:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER N");
				break;
			case 0x16E7C:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER R");
				break;
			case 0x16E7D:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER O");
				break;
			case 0x16E7E:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER AI");
				break;
			case 0x16E7F:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SMALL LETTER Y");
				break;
			case 0x16E80:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT ZERO");
				break;
			case 0x16E81:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT ONE");
				break;
			case 0x16E82:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT TWO");
				break;
			case 0x16E83:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT THREE");
				break;
			case 0x16E84:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT FOUR");
				break;
			case 0x16E85:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT FIVE");
				break;
			case 0x16E86:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT SIX");
				break;
			case 0x16E87:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT SEVEN");
				break;
			case 0x16E88:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT EIGHT");
				break;
			case 0x16E89:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT NINE");
				break;
			case 0x16E8A:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN NUMBER TEN");
				break;
			case 0x16E8B:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN NUMBER ELEVEN");
				break;
			case 0x16E8C:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN NUMBER TWELVE");
				break;
			case 0x16E8D:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN NUMBER THIRTEEN");
				break;
			case 0x16E8E:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN NUMBER FOURTEEN");
				break;
			case 0x16E8F:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN NUMBER FIFTEEN");
				break;
			case 0x16E90:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN NUMBER SIXTEEN");
				break;
			case 0x16E91:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN NUMBER SEVENTEEN");
				break;
			case 0x16E92:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN NUMBER EIGHTEEN");
				break;
			case 0x16E93:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN NUMBER NINETEEN");
				break;
			case 0x16E94:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT ONE ALTERNATE FORM");
				break;
			case 0x16E95:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT TWO ALTERNATE FORM");
				break;
			case 0x16E96:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN DIGIT THREE ALTERNATE FORM");
				break;
			case 0x16E97:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN COMMA");
				break;
			case 0x16E98:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN FULL STOP");
				break;
			case 0x16E99:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN SYMBOL AIVA");
				break;
			case 0x16E9A:
				strcpy_s(buf, buf_size, "MEDEFAIDRIN EXCLAMATION OH");
				break;
			case 0x16F00:
				strcpy_s(buf, buf_size, "MIAO LETTER PA");
				break;
			case 0x16F01:
				strcpy_s(buf, buf_size, "MIAO LETTER BA");
				break;
			case 0x16F02:
				strcpy_s(buf, buf_size, "MIAO LETTER YI PA");
				break;
			case 0x16F03:
				strcpy_s(buf, buf_size, "MIAO LETTER PLA");
				break;
			case 0x16F04:
				strcpy_s(buf, buf_size, "MIAO LETTER MA");
				break;
			case 0x16F05:
				strcpy_s(buf, buf_size, "MIAO LETTER MHA");
				break;
			case 0x16F06:
				strcpy_s(buf, buf_size, "MIAO LETTER ARCHAIC MA");
				break;
			case 0x16F07:
				strcpy_s(buf, buf_size, "MIAO LETTER FA");
				break;
			case 0x16F08:
				strcpy_s(buf, buf_size, "MIAO LETTER VA");
				break;
			case 0x16F09:
				strcpy_s(buf, buf_size, "MIAO LETTER VFA");
				break;
			case 0x16F0A:
				strcpy_s(buf, buf_size, "MIAO LETTER TA");
				break;
			case 0x16F0B:
				strcpy_s(buf, buf_size, "MIAO LETTER DA");
				break;
			case 0x16F0C:
				strcpy_s(buf, buf_size, "MIAO LETTER YI TTA");
				break;
			case 0x16F0D:
				strcpy_s(buf, buf_size, "MIAO LETTER YI TA");
				break;
			case 0x16F0E:
				strcpy_s(buf, buf_size, "MIAO LETTER TTA");
				break;
			case 0x16F0F:
				strcpy_s(buf, buf_size, "MIAO LETTER DDA");
				break;
			case 0x16F10:
				strcpy_s(buf, buf_size, "MIAO LETTER NA");
				break;
			case 0x16F11:
				strcpy_s(buf, buf_size, "MIAO LETTER NHA");
				break;
			case 0x16F12:
				strcpy_s(buf, buf_size, "MIAO LETTER YI NNA");
				break;
			case 0x16F13:
				strcpy_s(buf, buf_size, "MIAO LETTER ARCHAIC NA");
				break;
			case 0x16F14:
				strcpy_s(buf, buf_size, "MIAO LETTER NNA");
				break;
			case 0x16F15:
				strcpy_s(buf, buf_size, "MIAO LETTER NNHA");
				break;
			case 0x16F16:
				strcpy_s(buf, buf_size, "MIAO LETTER LA");
				break;
			case 0x16F17:
				strcpy_s(buf, buf_size, "MIAO LETTER LYA");
				break;
			case 0x16F18:
				strcpy_s(buf, buf_size, "MIAO LETTER LHA");
				break;
			case 0x16F19:
				strcpy_s(buf, buf_size, "MIAO LETTER LHYA");
				break;
			case 0x16F1A:
				strcpy_s(buf, buf_size, "MIAO LETTER TLHA");
				break;
			case 0x16F1B:
				strcpy_s(buf, buf_size, "MIAO LETTER DLHA");
				break;
			case 0x16F1C:
				strcpy_s(buf, buf_size, "MIAO LETTER TLHYA");
				break;
			case 0x16F1D:
				strcpy_s(buf, buf_size, "MIAO LETTER DLHYA");
				break;
			case 0x16F1E:
				strcpy_s(buf, buf_size, "MIAO LETTER KA");
				break;
			case 0x16F1F:
				strcpy_s(buf, buf_size, "MIAO LETTER GA");
				break;
			case 0x16F20:
				strcpy_s(buf, buf_size, "MIAO LETTER YI KA");
				break;
			case 0x16F21:
				strcpy_s(buf, buf_size, "MIAO LETTER QA");
				break;
			case 0x16F22:
				strcpy_s(buf, buf_size, "MIAO LETTER QGA");
				break;
			case 0x16F23:
				strcpy_s(buf, buf_size, "MIAO LETTER NGA");
				break;
			case 0x16F24:
				strcpy_s(buf, buf_size, "MIAO LETTER NGHA");
				break;
			case 0x16F25:
				strcpy_s(buf, buf_size, "MIAO LETTER ARCHAIC NGA");
				break;
			case 0x16F26:
				strcpy_s(buf, buf_size, "MIAO LETTER HA");
				break;
			case 0x16F27:
				strcpy_s(buf, buf_size, "MIAO LETTER XA");
				break;
			case 0x16F28:
				strcpy_s(buf, buf_size, "MIAO LETTER GHA");
				break;
			case 0x16F29:
				strcpy_s(buf, buf_size, "MIAO LETTER GHHA");
				break;
			case 0x16F2A:
				strcpy_s(buf, buf_size, "MIAO LETTER TSSA");
				break;
			case 0x16F2B:
				strcpy_s(buf, buf_size, "MIAO LETTER DZZA");
				break;
			case 0x16F2C:
				strcpy_s(buf, buf_size, "MIAO LETTER NYA");
				break;
			case 0x16F2D:
				strcpy_s(buf, buf_size, "MIAO LETTER NYHA");
				break;
			case 0x16F2E:
				strcpy_s(buf, buf_size, "MIAO LETTER TSHA");
				break;
			case 0x16F2F:
				strcpy_s(buf, buf_size, "MIAO LETTER DZHA");
				break;
			case 0x16F30:
				strcpy_s(buf, buf_size, "MIAO LETTER YI TSHA");
				break;
			case 0x16F31:
				strcpy_s(buf, buf_size, "MIAO LETTER YI DZHA");
				break;
			case 0x16F32:
				strcpy_s(buf, buf_size, "MIAO LETTER REFORMED TSHA");
				break;
			case 0x16F33:
				strcpy_s(buf, buf_size, "MIAO LETTER SHA");
				break;
			case 0x16F34:
				strcpy_s(buf, buf_size, "MIAO LETTER SSA");
				break;
			case 0x16F35:
				strcpy_s(buf, buf_size, "MIAO LETTER ZHA");
				break;
			case 0x16F36:
				strcpy_s(buf, buf_size, "MIAO LETTER ZSHA");
				break;
			case 0x16F37:
				strcpy_s(buf, buf_size, "MIAO LETTER TSA");
				break;
			case 0x16F38:
				strcpy_s(buf, buf_size, "MIAO LETTER DZA");
				break;
			case 0x16F39:
				strcpy_s(buf, buf_size, "MIAO LETTER YI TSA");
				break;
			case 0x16F3A:
				strcpy_s(buf, buf_size, "MIAO LETTER SA");
				break;
			case 0x16F3B:
				strcpy_s(buf, buf_size, "MIAO LETTER ZA");
				break;
			case 0x16F3C:
				strcpy_s(buf, buf_size, "MIAO LETTER ZSA");
				break;
			case 0x16F3D:
				strcpy_s(buf, buf_size, "MIAO LETTER ZZA");
				break;
			case 0x16F3E:
				strcpy_s(buf, buf_size, "MIAO LETTER ZZSA");
				break;
			case 0x16F3F:
				strcpy_s(buf, buf_size, "MIAO LETTER ARCHAIC ZZA");
				break;
			case 0x16F40:
				strcpy_s(buf, buf_size, "MIAO LETTER ZZYA");
				break;
			case 0x16F41:
				strcpy_s(buf, buf_size, "MIAO LETTER ZZSYA");
				break;
			case 0x16F42:
				strcpy_s(buf, buf_size, "MIAO LETTER WA");
				break;
			case 0x16F43:
				strcpy_s(buf, buf_size, "MIAO LETTER AH");
				break;
			case 0x16F44:
				strcpy_s(buf, buf_size, "MIAO LETTER HHA");
				break;
			case 0x16F45:
				strcpy_s(buf, buf_size, "MIAO LETTER BRI");
				break;
			case 0x16F46:
				strcpy_s(buf, buf_size, "MIAO LETTER SYI");
				break;
			case 0x16F47:
				strcpy_s(buf, buf_size, "MIAO LETTER DZYI");
				break;
			case 0x16F48:
				strcpy_s(buf, buf_size, "MIAO LETTER TE");
				break;
			case 0x16F49:
				strcpy_s(buf, buf_size, "MIAO LETTER TSE");
				break;
			case 0x16F4A:
				strcpy_s(buf, buf_size, "MIAO LETTER RTE");
				break;
			case 0x16F4F:
				strcpy_s(buf, buf_size, "MIAO SIGN CONSONANT MODIFIER BAR");
				break;
			case 0x16F50:
				strcpy_s(buf, buf_size, "MIAO LETTER NASALIZATION");
				break;
			case 0x16F51:
				strcpy_s(buf, buf_size, "MIAO SIGN ASPIRATION");
				break;
			case 0x16F52:
				strcpy_s(buf, buf_size, "MIAO SIGN REFORMED VOICING");
				break;
			case 0x16F53:
				strcpy_s(buf, buf_size, "MIAO SIGN REFORMED ASPIRATION");
				break;
			case 0x16F54:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN A");
				break;
			case 0x16F55:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN AA");
				break;
			case 0x16F56:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN AHH");
				break;
			case 0x16F57:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN AN");
				break;
			case 0x16F58:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN ANG");
				break;
			case 0x16F59:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN O");
				break;
			case 0x16F5A:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN OO");
				break;
			case 0x16F5B:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN WO");
				break;
			case 0x16F5C:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN W");
				break;
			case 0x16F5D:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN E");
				break;
			case 0x16F5E:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN EN");
				break;
			case 0x16F5F:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN ENG");
				break;
			case 0x16F60:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN OEY");
				break;
			case 0x16F61:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN I");
				break;
			case 0x16F62:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN IA");
				break;
			case 0x16F63:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN IAN");
				break;
			case 0x16F64:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN IANG");
				break;
			case 0x16F65:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN IO");
				break;
			case 0x16F66:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN IE");
				break;
			case 0x16F67:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN II");
				break;
			case 0x16F68:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN IU");
				break;
			case 0x16F69:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN ING");
				break;
			case 0x16F6A:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN U");
				break;
			case 0x16F6B:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN UA");
				break;
			case 0x16F6C:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN UAN");
				break;
			case 0x16F6D:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN UANG");
				break;
			case 0x16F6E:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN UU");
				break;
			case 0x16F6F:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN UEI");
				break;
			case 0x16F70:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN UNG");
				break;
			case 0x16F71:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN Y");
				break;
			case 0x16F72:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN YI");
				break;
			case 0x16F73:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN AE");
				break;
			case 0x16F74:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN AEE");
				break;
			case 0x16F75:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN ERR");
				break;
			case 0x16F76:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN ROUNDED ERR");
				break;
			case 0x16F77:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN ER");
				break;
			case 0x16F78:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN ROUNDED ER");
				break;
			case 0x16F79:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN AI");
				break;
			case 0x16F7A:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN EI");
				break;
			case 0x16F7B:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN AU");
				break;
			case 0x16F7C:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN OU");
				break;
			case 0x16F7D:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN N");
				break;
			case 0x16F7E:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN NG");
				break;
			case 0x16F7F:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN UOG");
				break;
			case 0x16F80:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN YUI");
				break;
			case 0x16F81:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN OG");
				break;
			case 0x16F82:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN OER");
				break;
			case 0x16F83:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN VW");
				break;
			case 0x16F84:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN IG");
				break;
			case 0x16F85:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN EA");
				break;
			case 0x16F86:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN IONG");
				break;
			case 0x16F87:
				strcpy_s(buf, buf_size, "MIAO VOWEL SIGN UI");
				break;
			case 0x16F8F:
				strcpy_s(buf, buf_size, "MIAO TONE RIGHT");
				break;
			case 0x16F90:
				strcpy_s(buf, buf_size, "MIAO TONE TOP RIGHT");
				break;
			case 0x16F91:
				strcpy_s(buf, buf_size, "MIAO TONE ABOVE");
				break;
			case 0x16F92:
				strcpy_s(buf, buf_size, "MIAO TONE BELOW");
				break;
			case 0x16F93:
				strcpy_s(buf, buf_size, "MIAO LETTER TONE-2");
				break;
			case 0x16F94:
				strcpy_s(buf, buf_size, "MIAO LETTER TONE-3");
				break;
			case 0x16F95:
				strcpy_s(buf, buf_size, "MIAO LETTER TONE-4");
				break;
			case 0x16F96:
				strcpy_s(buf, buf_size, "MIAO LETTER TONE-5");
				break;
			case 0x16F97:
				strcpy_s(buf, buf_size, "MIAO LETTER TONE-6");
				break;
			case 0x16F98:
				strcpy_s(buf, buf_size, "MIAO LETTER TONE-7");
				break;
			case 0x16F99:
				strcpy_s(buf, buf_size, "MIAO LETTER TONE-8");
				break;
			case 0x16F9A:
				strcpy_s(buf, buf_size, "MIAO LETTER REFORMED TONE-1");
				break;
			case 0x16F9B:
				strcpy_s(buf, buf_size, "MIAO LETTER REFORMED TONE-2");
				break;
			case 0x16F9C:
				strcpy_s(buf, buf_size, "MIAO LETTER REFORMED TONE-4");
				break;
			case 0x16F9D:
				strcpy_s(buf, buf_size, "MIAO LETTER REFORMED TONE-5");
				break;
			case 0x16F9E:
				strcpy_s(buf, buf_size, "MIAO LETTER REFORMED TONE-6");
				break;
			case 0x16F9F:
				strcpy_s(buf, buf_size, "MIAO LETTER REFORMED TONE-8");
				break;
			case 0x16FE0:
				strcpy_s(buf, buf_size, "TANGUT ITERATION MARK");
				break;
			case 0x16FE1:
				strcpy_s(buf, buf_size, "NUSHU ITERATION MARK");
				break;
			case 0x16FE2:
				strcpy_s(buf, buf_size, "OLD CHINESE HOOK MARK");
				break;
			case 0x16FE3:
				strcpy_s(buf, buf_size, "OLD CHINESE ITERATION MARK");
				break;
			case 0x16FE4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT FILLER");
				break;
			case 0x16FF0:
				strcpy_s(buf, buf_size, "VIETNAMESE ALTERNATE READING MARK CA");
				break;
			case 0x16FF1:
				strcpy_s(buf, buf_size, "VIETNAMESE ALTERNATE READING MARK NHAY");
				break;
			case 0x17000:
				strcpy_s(buf, buf_size, "<Tangut Ideograph, First>");
				break;
			case 0x187F7:
				strcpy_s(buf, buf_size, "<Tangut Ideograph, Last>");
				break;
			case 0x18800:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-001");
				break;
			case 0x18801:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-002");
				break;
			case 0x18802:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-003");
				break;
			case 0x18803:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-004");
				break;
			case 0x18804:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-005");
				break;
			case 0x18805:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-006");
				break;
			case 0x18806:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-007");
				break;
			case 0x18807:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-008");
				break;
			case 0x18808:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-009");
				break;
			case 0x18809:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-010");
				break;
			case 0x1880A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-011");
				break;
			case 0x1880B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-012");
				break;
			case 0x1880C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-013");
				break;
			case 0x1880D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-014");
				break;
			case 0x1880E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-015");
				break;
			case 0x1880F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-016");
				break;
			case 0x18810:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-017");
				break;
			case 0x18811:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-018");
				break;
			case 0x18812:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-019");
				break;
			case 0x18813:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-020");
				break;
			case 0x18814:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-021");
				break;
			case 0x18815:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-022");
				break;
			case 0x18816:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-023");
				break;
			case 0x18817:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-024");
				break;
			case 0x18818:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-025");
				break;
			case 0x18819:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-026");
				break;
			case 0x1881A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-027");
				break;
			case 0x1881B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-028");
				break;
			case 0x1881C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-029");
				break;
			case 0x1881D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-030");
				break;
			case 0x1881E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-031");
				break;
			case 0x1881F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-032");
				break;
			case 0x18820:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-033");
				break;
			case 0x18821:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-034");
				break;
			case 0x18822:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-035");
				break;
			case 0x18823:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-036");
				break;
			case 0x18824:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-037");
				break;
			case 0x18825:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-038");
				break;
			case 0x18826:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-039");
				break;
			case 0x18827:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-040");
				break;
			case 0x18828:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-041");
				break;
			case 0x18829:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-042");
				break;
			case 0x1882A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-043");
				break;
			case 0x1882B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-044");
				break;
			case 0x1882C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-045");
				break;
			case 0x1882D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-046");
				break;
			case 0x1882E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-047");
				break;
			case 0x1882F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-048");
				break;
			case 0x18830:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-049");
				break;
			case 0x18831:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-050");
				break;
			case 0x18832:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-051");
				break;
			case 0x18833:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-052");
				break;
			case 0x18834:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-053");
				break;
			case 0x18835:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-054");
				break;
			case 0x18836:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-055");
				break;
			case 0x18837:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-056");
				break;
			case 0x18838:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-057");
				break;
			case 0x18839:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-058");
				break;
			case 0x1883A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-059");
				break;
			case 0x1883B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-060");
				break;
			case 0x1883C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-061");
				break;
			case 0x1883D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-062");
				break;
			case 0x1883E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-063");
				break;
			case 0x1883F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-064");
				break;
			case 0x18840:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-065");
				break;
			case 0x18841:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-066");
				break;
			case 0x18842:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-067");
				break;
			case 0x18843:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-068");
				break;
			case 0x18844:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-069");
				break;
			case 0x18845:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-070");
				break;
			case 0x18846:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-071");
				break;
			case 0x18847:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-072");
				break;
			case 0x18848:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-073");
				break;
			case 0x18849:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-074");
				break;
			case 0x1884A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-075");
				break;
			case 0x1884B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-076");
				break;
			case 0x1884C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-077");
				break;
			case 0x1884D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-078");
				break;
			case 0x1884E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-079");
				break;
			case 0x1884F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-080");
				break;
			case 0x18850:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-081");
				break;
			case 0x18851:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-082");
				break;
			case 0x18852:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-083");
				break;
			case 0x18853:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-084");
				break;
			case 0x18854:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-085");
				break;
			case 0x18855:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-086");
				break;
			case 0x18856:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-087");
				break;
			case 0x18857:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-088");
				break;
			case 0x18858:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-089");
				break;
			case 0x18859:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-090");
				break;
			case 0x1885A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-091");
				break;
			case 0x1885B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-092");
				break;
			case 0x1885C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-093");
				break;
			case 0x1885D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-094");
				break;
			case 0x1885E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-095");
				break;
			case 0x1885F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-096");
				break;
			case 0x18860:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-097");
				break;
			case 0x18861:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-098");
				break;
			case 0x18862:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-099");
				break;
			case 0x18863:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-100");
				break;
			case 0x18864:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-101");
				break;
			case 0x18865:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-102");
				break;
			case 0x18866:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-103");
				break;
			case 0x18867:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-104");
				break;
			case 0x18868:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-105");
				break;
			case 0x18869:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-106");
				break;
			case 0x1886A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-107");
				break;
			case 0x1886B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-108");
				break;
			case 0x1886C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-109");
				break;
			case 0x1886D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-110");
				break;
			case 0x1886E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-111");
				break;
			case 0x1886F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-112");
				break;
			case 0x18870:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-113");
				break;
			case 0x18871:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-114");
				break;
			case 0x18872:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-115");
				break;
			case 0x18873:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-116");
				break;
			case 0x18874:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-117");
				break;
			case 0x18875:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-118");
				break;
			case 0x18876:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-119");
				break;
			case 0x18877:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-120");
				break;
			case 0x18878:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-121");
				break;
			case 0x18879:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-122");
				break;
			case 0x1887A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-123");
				break;
			case 0x1887B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-124");
				break;
			case 0x1887C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-125");
				break;
			case 0x1887D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-126");
				break;
			case 0x1887E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-127");
				break;
			case 0x1887F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-128");
				break;
			case 0x18880:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-129");
				break;
			case 0x18881:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-130");
				break;
			case 0x18882:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-131");
				break;
			case 0x18883:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-132");
				break;
			case 0x18884:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-133");
				break;
			case 0x18885:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-134");
				break;
			case 0x18886:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-135");
				break;
			case 0x18887:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-136");
				break;
			case 0x18888:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-137");
				break;
			case 0x18889:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-138");
				break;
			case 0x1888A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-139");
				break;
			case 0x1888B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-140");
				break;
			case 0x1888C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-141");
				break;
			case 0x1888D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-142");
				break;
			case 0x1888E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-143");
				break;
			case 0x1888F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-144");
				break;
			case 0x18890:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-145");
				break;
			case 0x18891:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-146");
				break;
			case 0x18892:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-147");
				break;
			case 0x18893:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-148");
				break;
			case 0x18894:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-149");
				break;
			case 0x18895:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-150");
				break;
			case 0x18896:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-151");
				break;
			case 0x18897:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-152");
				break;
			case 0x18898:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-153");
				break;
			case 0x18899:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-154");
				break;
			case 0x1889A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-155");
				break;
			case 0x1889B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-156");
				break;
			case 0x1889C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-157");
				break;
			case 0x1889D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-158");
				break;
			case 0x1889E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-159");
				break;
			case 0x1889F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-160");
				break;
			case 0x188A0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-161");
				break;
			case 0x188A1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-162");
				break;
			case 0x188A2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-163");
				break;
			case 0x188A3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-164");
				break;
			case 0x188A4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-165");
				break;
			case 0x188A5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-166");
				break;
			case 0x188A6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-167");
				break;
			case 0x188A7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-168");
				break;
			case 0x188A8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-169");
				break;
			case 0x188A9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-170");
				break;
			case 0x188AA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-171");
				break;
			case 0x188AB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-172");
				break;
			case 0x188AC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-173");
				break;
			case 0x188AD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-174");
				break;
			case 0x188AE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-175");
				break;
			case 0x188AF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-176");
				break;
			case 0x188B0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-177");
				break;
			case 0x188B1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-178");
				break;
			case 0x188B2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-179");
				break;
			case 0x188B3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-180");
				break;
			case 0x188B4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-181");
				break;
			case 0x188B5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-182");
				break;
			case 0x188B6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-183");
				break;
			case 0x188B7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-184");
				break;
			case 0x188B8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-185");
				break;
			case 0x188B9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-186");
				break;
			case 0x188BA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-187");
				break;
			case 0x188BB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-188");
				break;
			case 0x188BC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-189");
				break;
			case 0x188BD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-190");
				break;
			case 0x188BE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-191");
				break;
			case 0x188BF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-192");
				break;
			case 0x188C0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-193");
				break;
			case 0x188C1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-194");
				break;
			case 0x188C2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-195");
				break;
			case 0x188C3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-196");
				break;
			case 0x188C4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-197");
				break;
			case 0x188C5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-198");
				break;
			case 0x188C6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-199");
				break;
			case 0x188C7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-200");
				break;
			case 0x188C8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-201");
				break;
			case 0x188C9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-202");
				break;
			case 0x188CA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-203");
				break;
			case 0x188CB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-204");
				break;
			case 0x188CC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-205");
				break;
			case 0x188CD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-206");
				break;
			case 0x188CE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-207");
				break;
			case 0x188CF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-208");
				break;
			case 0x188D0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-209");
				break;
			case 0x188D1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-210");
				break;
			case 0x188D2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-211");
				break;
			case 0x188D3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-212");
				break;
			case 0x188D4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-213");
				break;
			case 0x188D5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-214");
				break;
			case 0x188D6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-215");
				break;
			case 0x188D7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-216");
				break;
			case 0x188D8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-217");
				break;
			case 0x188D9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-218");
				break;
			case 0x188DA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-219");
				break;
			case 0x188DB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-220");
				break;
			case 0x188DC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-221");
				break;
			case 0x188DD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-222");
				break;
			case 0x188DE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-223");
				break;
			case 0x188DF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-224");
				break;
			case 0x188E0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-225");
				break;
			case 0x188E1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-226");
				break;
			case 0x188E2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-227");
				break;
			case 0x188E3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-228");
				break;
			case 0x188E4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-229");
				break;
			case 0x188E5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-230");
				break;
			case 0x188E6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-231");
				break;
			case 0x188E7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-232");
				break;
			case 0x188E8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-233");
				break;
			case 0x188E9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-234");
				break;
			case 0x188EA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-235");
				break;
			case 0x188EB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-236");
				break;
			case 0x188EC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-237");
				break;
			case 0x188ED:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-238");
				break;
			case 0x188EE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-239");
				break;
			case 0x188EF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-240");
				break;
			case 0x188F0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-241");
				break;
			case 0x188F1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-242");
				break;
			case 0x188F2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-243");
				break;
			case 0x188F3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-244");
				break;
			case 0x188F4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-245");
				break;
			case 0x188F5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-246");
				break;
			case 0x188F6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-247");
				break;
			case 0x188F7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-248");
				break;
			case 0x188F8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-249");
				break;
			case 0x188F9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-250");
				break;
			case 0x188FA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-251");
				break;
			case 0x188FB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-252");
				break;
			case 0x188FC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-253");
				break;
			case 0x188FD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-254");
				break;
			case 0x188FE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-255");
				break;
			case 0x188FF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-256");
				break;
			case 0x18900:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-257");
				break;
			case 0x18901:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-258");
				break;
			case 0x18902:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-259");
				break;
			case 0x18903:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-260");
				break;
			case 0x18904:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-261");
				break;
			case 0x18905:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-262");
				break;
			case 0x18906:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-263");
				break;
			case 0x18907:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-264");
				break;
			case 0x18908:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-265");
				break;
			case 0x18909:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-266");
				break;
			case 0x1890A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-267");
				break;
			case 0x1890B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-268");
				break;
			case 0x1890C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-269");
				break;
			case 0x1890D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-270");
				break;
			case 0x1890E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-271");
				break;
			case 0x1890F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-272");
				break;
			case 0x18910:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-273");
				break;
			case 0x18911:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-274");
				break;
			case 0x18912:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-275");
				break;
			case 0x18913:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-276");
				break;
			case 0x18914:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-277");
				break;
			case 0x18915:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-278");
				break;
			case 0x18916:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-279");
				break;
			case 0x18917:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-280");
				break;
			case 0x18918:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-281");
				break;
			case 0x18919:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-282");
				break;
			case 0x1891A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-283");
				break;
			case 0x1891B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-284");
				break;
			case 0x1891C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-285");
				break;
			case 0x1891D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-286");
				break;
			case 0x1891E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-287");
				break;
			case 0x1891F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-288");
				break;
			case 0x18920:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-289");
				break;
			case 0x18921:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-290");
				break;
			case 0x18922:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-291");
				break;
			case 0x18923:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-292");
				break;
			case 0x18924:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-293");
				break;
			case 0x18925:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-294");
				break;
			case 0x18926:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-295");
				break;
			case 0x18927:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-296");
				break;
			case 0x18928:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-297");
				break;
			case 0x18929:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-298");
				break;
			case 0x1892A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-299");
				break;
			case 0x1892B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-300");
				break;
			case 0x1892C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-301");
				break;
			case 0x1892D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-302");
				break;
			case 0x1892E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-303");
				break;
			case 0x1892F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-304");
				break;
			case 0x18930:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-305");
				break;
			case 0x18931:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-306");
				break;
			case 0x18932:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-307");
				break;
			case 0x18933:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-308");
				break;
			case 0x18934:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-309");
				break;
			case 0x18935:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-310");
				break;
			case 0x18936:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-311");
				break;
			case 0x18937:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-312");
				break;
			case 0x18938:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-313");
				break;
			case 0x18939:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-314");
				break;
			case 0x1893A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-315");
				break;
			case 0x1893B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-316");
				break;
			case 0x1893C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-317");
				break;
			case 0x1893D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-318");
				break;
			case 0x1893E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-319");
				break;
			case 0x1893F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-320");
				break;
			case 0x18940:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-321");
				break;
			case 0x18941:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-322");
				break;
			case 0x18942:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-323");
				break;
			case 0x18943:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-324");
				break;
			case 0x18944:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-325");
				break;
			case 0x18945:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-326");
				break;
			case 0x18946:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-327");
				break;
			case 0x18947:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-328");
				break;
			case 0x18948:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-329");
				break;
			case 0x18949:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-330");
				break;
			case 0x1894A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-331");
				break;
			case 0x1894B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-332");
				break;
			case 0x1894C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-333");
				break;
			case 0x1894D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-334");
				break;
			case 0x1894E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-335");
				break;
			case 0x1894F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-336");
				break;
			case 0x18950:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-337");
				break;
			case 0x18951:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-338");
				break;
			case 0x18952:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-339");
				break;
			case 0x18953:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-340");
				break;
			case 0x18954:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-341");
				break;
			case 0x18955:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-342");
				break;
			case 0x18956:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-343");
				break;
			case 0x18957:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-344");
				break;
			case 0x18958:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-345");
				break;
			case 0x18959:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-346");
				break;
			case 0x1895A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-347");
				break;
			case 0x1895B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-348");
				break;
			case 0x1895C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-349");
				break;
			case 0x1895D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-350");
				break;
			case 0x1895E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-351");
				break;
			case 0x1895F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-352");
				break;
			case 0x18960:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-353");
				break;
			case 0x18961:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-354");
				break;
			case 0x18962:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-355");
				break;
			case 0x18963:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-356");
				break;
			case 0x18964:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-357");
				break;
			case 0x18965:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-358");
				break;
			case 0x18966:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-359");
				break;
			case 0x18967:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-360");
				break;
			case 0x18968:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-361");
				break;
			case 0x18969:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-362");
				break;
			case 0x1896A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-363");
				break;
			case 0x1896B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-364");
				break;
			case 0x1896C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-365");
				break;
			case 0x1896D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-366");
				break;
			case 0x1896E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-367");
				break;
			case 0x1896F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-368");
				break;
			case 0x18970:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-369");
				break;
			case 0x18971:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-370");
				break;
			case 0x18972:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-371");
				break;
			case 0x18973:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-372");
				break;
			case 0x18974:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-373");
				break;
			case 0x18975:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-374");
				break;
			case 0x18976:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-375");
				break;
			case 0x18977:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-376");
				break;
			case 0x18978:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-377");
				break;
			case 0x18979:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-378");
				break;
			case 0x1897A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-379");
				break;
			case 0x1897B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-380");
				break;
			case 0x1897C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-381");
				break;
			case 0x1897D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-382");
				break;
			case 0x1897E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-383");
				break;
			case 0x1897F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-384");
				break;
			case 0x18980:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-385");
				break;
			case 0x18981:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-386");
				break;
			case 0x18982:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-387");
				break;
			case 0x18983:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-388");
				break;
			case 0x18984:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-389");
				break;
			case 0x18985:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-390");
				break;
			case 0x18986:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-391");
				break;
			case 0x18987:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-392");
				break;
			case 0x18988:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-393");
				break;
			case 0x18989:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-394");
				break;
			case 0x1898A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-395");
				break;
			case 0x1898B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-396");
				break;
			case 0x1898C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-397");
				break;
			case 0x1898D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-398");
				break;
			case 0x1898E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-399");
				break;
			case 0x1898F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-400");
				break;
			case 0x18990:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-401");
				break;
			case 0x18991:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-402");
				break;
			case 0x18992:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-403");
				break;
			case 0x18993:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-404");
				break;
			case 0x18994:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-405");
				break;
			case 0x18995:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-406");
				break;
			case 0x18996:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-407");
				break;
			case 0x18997:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-408");
				break;
			case 0x18998:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-409");
				break;
			case 0x18999:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-410");
				break;
			case 0x1899A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-411");
				break;
			case 0x1899B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-412");
				break;
			case 0x1899C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-413");
				break;
			case 0x1899D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-414");
				break;
			case 0x1899E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-415");
				break;
			case 0x1899F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-416");
				break;
			case 0x189A0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-417");
				break;
			case 0x189A1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-418");
				break;
			case 0x189A2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-419");
				break;
			case 0x189A3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-420");
				break;
			case 0x189A4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-421");
				break;
			case 0x189A5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-422");
				break;
			case 0x189A6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-423");
				break;
			case 0x189A7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-424");
				break;
			case 0x189A8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-425");
				break;
			case 0x189A9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-426");
				break;
			case 0x189AA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-427");
				break;
			case 0x189AB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-428");
				break;
			case 0x189AC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-429");
				break;
			case 0x189AD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-430");
				break;
			case 0x189AE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-431");
				break;
			case 0x189AF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-432");
				break;
			case 0x189B0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-433");
				break;
			case 0x189B1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-434");
				break;
			case 0x189B2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-435");
				break;
			case 0x189B3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-436");
				break;
			case 0x189B4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-437");
				break;
			case 0x189B5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-438");
				break;
			case 0x189B6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-439");
				break;
			case 0x189B7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-440");
				break;
			case 0x189B8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-441");
				break;
			case 0x189B9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-442");
				break;
			case 0x189BA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-443");
				break;
			case 0x189BB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-444");
				break;
			case 0x189BC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-445");
				break;
			case 0x189BD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-446");
				break;
			case 0x189BE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-447");
				break;
			case 0x189BF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-448");
				break;
			case 0x189C0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-449");
				break;
			case 0x189C1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-450");
				break;
			case 0x189C2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-451");
				break;
			case 0x189C3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-452");
				break;
			case 0x189C4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-453");
				break;
			case 0x189C5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-454");
				break;
			case 0x189C6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-455");
				break;
			case 0x189C7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-456");
				break;
			case 0x189C8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-457");
				break;
			case 0x189C9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-458");
				break;
			case 0x189CA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-459");
				break;
			case 0x189CB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-460");
				break;
			case 0x189CC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-461");
				break;
			case 0x189CD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-462");
				break;
			case 0x189CE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-463");
				break;
			case 0x189CF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-464");
				break;
			case 0x189D0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-465");
				break;
			case 0x189D1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-466");
				break;
			case 0x189D2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-467");
				break;
			case 0x189D3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-468");
				break;
			case 0x189D4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-469");
				break;
			case 0x189D5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-470");
				break;
			case 0x189D6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-471");
				break;
			case 0x189D7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-472");
				break;
			case 0x189D8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-473");
				break;
			case 0x189D9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-474");
				break;
			case 0x189DA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-475");
				break;
			case 0x189DB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-476");
				break;
			case 0x189DC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-477");
				break;
			case 0x189DD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-478");
				break;
			case 0x189DE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-479");
				break;
			case 0x189DF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-480");
				break;
			case 0x189E0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-481");
				break;
			case 0x189E1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-482");
				break;
			case 0x189E2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-483");
				break;
			case 0x189E3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-484");
				break;
			case 0x189E4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-485");
				break;
			case 0x189E5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-486");
				break;
			case 0x189E6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-487");
				break;
			case 0x189E7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-488");
				break;
			case 0x189E8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-489");
				break;
			case 0x189E9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-490");
				break;
			case 0x189EA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-491");
				break;
			case 0x189EB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-492");
				break;
			case 0x189EC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-493");
				break;
			case 0x189ED:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-494");
				break;
			case 0x189EE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-495");
				break;
			case 0x189EF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-496");
				break;
			case 0x189F0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-497");
				break;
			case 0x189F1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-498");
				break;
			case 0x189F2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-499");
				break;
			case 0x189F3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-500");
				break;
			case 0x189F4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-501");
				break;
			case 0x189F5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-502");
				break;
			case 0x189F6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-503");
				break;
			case 0x189F7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-504");
				break;
			case 0x189F8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-505");
				break;
			case 0x189F9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-506");
				break;
			case 0x189FA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-507");
				break;
			case 0x189FB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-508");
				break;
			case 0x189FC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-509");
				break;
			case 0x189FD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-510");
				break;
			case 0x189FE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-511");
				break;
			case 0x189FF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-512");
				break;
			case 0x18A00:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-513");
				break;
			case 0x18A01:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-514");
				break;
			case 0x18A02:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-515");
				break;
			case 0x18A03:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-516");
				break;
			case 0x18A04:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-517");
				break;
			case 0x18A05:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-518");
				break;
			case 0x18A06:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-519");
				break;
			case 0x18A07:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-520");
				break;
			case 0x18A08:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-521");
				break;
			case 0x18A09:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-522");
				break;
			case 0x18A0A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-523");
				break;
			case 0x18A0B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-524");
				break;
			case 0x18A0C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-525");
				break;
			case 0x18A0D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-526");
				break;
			case 0x18A0E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-527");
				break;
			case 0x18A0F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-528");
				break;
			case 0x18A10:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-529");
				break;
			case 0x18A11:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-530");
				break;
			case 0x18A12:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-531");
				break;
			case 0x18A13:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-532");
				break;
			case 0x18A14:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-533");
				break;
			case 0x18A15:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-534");
				break;
			case 0x18A16:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-535");
				break;
			case 0x18A17:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-536");
				break;
			case 0x18A18:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-537");
				break;
			case 0x18A19:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-538");
				break;
			case 0x18A1A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-539");
				break;
			case 0x18A1B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-540");
				break;
			case 0x18A1C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-541");
				break;
			case 0x18A1D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-542");
				break;
			case 0x18A1E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-543");
				break;
			case 0x18A1F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-544");
				break;
			case 0x18A20:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-545");
				break;
			case 0x18A21:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-546");
				break;
			case 0x18A22:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-547");
				break;
			case 0x18A23:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-548");
				break;
			case 0x18A24:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-549");
				break;
			case 0x18A25:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-550");
				break;
			case 0x18A26:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-551");
				break;
			case 0x18A27:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-552");
				break;
			case 0x18A28:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-553");
				break;
			case 0x18A29:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-554");
				break;
			case 0x18A2A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-555");
				break;
			case 0x18A2B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-556");
				break;
			case 0x18A2C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-557");
				break;
			case 0x18A2D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-558");
				break;
			case 0x18A2E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-559");
				break;
			case 0x18A2F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-560");
				break;
			case 0x18A30:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-561");
				break;
			case 0x18A31:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-562");
				break;
			case 0x18A32:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-563");
				break;
			case 0x18A33:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-564");
				break;
			case 0x18A34:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-565");
				break;
			case 0x18A35:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-566");
				break;
			case 0x18A36:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-567");
				break;
			case 0x18A37:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-568");
				break;
			case 0x18A38:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-569");
				break;
			case 0x18A39:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-570");
				break;
			case 0x18A3A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-571");
				break;
			case 0x18A3B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-572");
				break;
			case 0x18A3C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-573");
				break;
			case 0x18A3D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-574");
				break;
			case 0x18A3E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-575");
				break;
			case 0x18A3F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-576");
				break;
			case 0x18A40:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-577");
				break;
			case 0x18A41:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-578");
				break;
			case 0x18A42:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-579");
				break;
			case 0x18A43:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-580");
				break;
			case 0x18A44:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-581");
				break;
			case 0x18A45:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-582");
				break;
			case 0x18A46:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-583");
				break;
			case 0x18A47:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-584");
				break;
			case 0x18A48:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-585");
				break;
			case 0x18A49:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-586");
				break;
			case 0x18A4A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-587");
				break;
			case 0x18A4B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-588");
				break;
			case 0x18A4C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-589");
				break;
			case 0x18A4D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-590");
				break;
			case 0x18A4E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-591");
				break;
			case 0x18A4F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-592");
				break;
			case 0x18A50:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-593");
				break;
			case 0x18A51:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-594");
				break;
			case 0x18A52:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-595");
				break;
			case 0x18A53:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-596");
				break;
			case 0x18A54:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-597");
				break;
			case 0x18A55:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-598");
				break;
			case 0x18A56:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-599");
				break;
			case 0x18A57:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-600");
				break;
			case 0x18A58:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-601");
				break;
			case 0x18A59:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-602");
				break;
			case 0x18A5A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-603");
				break;
			case 0x18A5B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-604");
				break;
			case 0x18A5C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-605");
				break;
			case 0x18A5D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-606");
				break;
			case 0x18A5E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-607");
				break;
			case 0x18A5F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-608");
				break;
			case 0x18A60:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-609");
				break;
			case 0x18A61:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-610");
				break;
			case 0x18A62:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-611");
				break;
			case 0x18A63:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-612");
				break;
			case 0x18A64:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-613");
				break;
			case 0x18A65:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-614");
				break;
			case 0x18A66:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-615");
				break;
			case 0x18A67:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-616");
				break;
			case 0x18A68:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-617");
				break;
			case 0x18A69:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-618");
				break;
			case 0x18A6A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-619");
				break;
			case 0x18A6B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-620");
				break;
			case 0x18A6C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-621");
				break;
			case 0x18A6D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-622");
				break;
			case 0x18A6E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-623");
				break;
			case 0x18A6F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-624");
				break;
			case 0x18A70:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-625");
				break;
			case 0x18A71:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-626");
				break;
			case 0x18A72:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-627");
				break;
			case 0x18A73:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-628");
				break;
			case 0x18A74:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-629");
				break;
			case 0x18A75:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-630");
				break;
			case 0x18A76:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-631");
				break;
			case 0x18A77:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-632");
				break;
			case 0x18A78:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-633");
				break;
			case 0x18A79:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-634");
				break;
			case 0x18A7A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-635");
				break;
			case 0x18A7B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-636");
				break;
			case 0x18A7C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-637");
				break;
			case 0x18A7D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-638");
				break;
			case 0x18A7E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-639");
				break;
			case 0x18A7F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-640");
				break;
			case 0x18A80:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-641");
				break;
			case 0x18A81:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-642");
				break;
			case 0x18A82:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-643");
				break;
			case 0x18A83:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-644");
				break;
			case 0x18A84:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-645");
				break;
			case 0x18A85:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-646");
				break;
			case 0x18A86:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-647");
				break;
			case 0x18A87:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-648");
				break;
			case 0x18A88:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-649");
				break;
			case 0x18A89:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-650");
				break;
			case 0x18A8A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-651");
				break;
			case 0x18A8B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-652");
				break;
			case 0x18A8C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-653");
				break;
			case 0x18A8D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-654");
				break;
			case 0x18A8E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-655");
				break;
			case 0x18A8F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-656");
				break;
			case 0x18A90:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-657");
				break;
			case 0x18A91:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-658");
				break;
			case 0x18A92:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-659");
				break;
			case 0x18A93:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-660");
				break;
			case 0x18A94:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-661");
				break;
			case 0x18A95:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-662");
				break;
			case 0x18A96:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-663");
				break;
			case 0x18A97:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-664");
				break;
			case 0x18A98:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-665");
				break;
			case 0x18A99:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-666");
				break;
			case 0x18A9A:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-667");
				break;
			case 0x18A9B:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-668");
				break;
			case 0x18A9C:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-669");
				break;
			case 0x18A9D:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-670");
				break;
			case 0x18A9E:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-671");
				break;
			case 0x18A9F:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-672");
				break;
			case 0x18AA0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-673");
				break;
			case 0x18AA1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-674");
				break;
			case 0x18AA2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-675");
				break;
			case 0x18AA3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-676");
				break;
			case 0x18AA4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-677");
				break;
			case 0x18AA5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-678");
				break;
			case 0x18AA6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-679");
				break;
			case 0x18AA7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-680");
				break;
			case 0x18AA8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-681");
				break;
			case 0x18AA9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-682");
				break;
			case 0x18AAA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-683");
				break;
			case 0x18AAB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-684");
				break;
			case 0x18AAC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-685");
				break;
			case 0x18AAD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-686");
				break;
			case 0x18AAE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-687");
				break;
			case 0x18AAF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-688");
				break;
			case 0x18AB0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-689");
				break;
			case 0x18AB1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-690");
				break;
			case 0x18AB2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-691");
				break;
			case 0x18AB3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-692");
				break;
			case 0x18AB4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-693");
				break;
			case 0x18AB5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-694");
				break;
			case 0x18AB6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-695");
				break;
			case 0x18AB7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-696");
				break;
			case 0x18AB8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-697");
				break;
			case 0x18AB9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-698");
				break;
			case 0x18ABA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-699");
				break;
			case 0x18ABB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-700");
				break;
			case 0x18ABC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-701");
				break;
			case 0x18ABD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-702");
				break;
			case 0x18ABE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-703");
				break;
			case 0x18ABF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-704");
				break;
			case 0x18AC0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-705");
				break;
			case 0x18AC1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-706");
				break;
			case 0x18AC2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-707");
				break;
			case 0x18AC3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-708");
				break;
			case 0x18AC4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-709");
				break;
			case 0x18AC5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-710");
				break;
			case 0x18AC6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-711");
				break;
			case 0x18AC7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-712");
				break;
			case 0x18AC8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-713");
				break;
			case 0x18AC9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-714");
				break;
			case 0x18ACA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-715");
				break;
			case 0x18ACB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-716");
				break;
			case 0x18ACC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-717");
				break;
			case 0x18ACD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-718");
				break;
			case 0x18ACE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-719");
				break;
			case 0x18ACF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-720");
				break;
			case 0x18AD0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-721");
				break;
			case 0x18AD1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-722");
				break;
			case 0x18AD2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-723");
				break;
			case 0x18AD3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-724");
				break;
			case 0x18AD4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-725");
				break;
			case 0x18AD5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-726");
				break;
			case 0x18AD6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-727");
				break;
			case 0x18AD7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-728");
				break;
			case 0x18AD8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-729");
				break;
			case 0x18AD9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-730");
				break;
			case 0x18ADA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-731");
				break;
			case 0x18ADB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-732");
				break;
			case 0x18ADC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-733");
				break;
			case 0x18ADD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-734");
				break;
			case 0x18ADE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-735");
				break;
			case 0x18ADF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-736");
				break;
			case 0x18AE0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-737");
				break;
			case 0x18AE1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-738");
				break;
			case 0x18AE2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-739");
				break;
			case 0x18AE3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-740");
				break;
			case 0x18AE4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-741");
				break;
			case 0x18AE5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-742");
				break;
			case 0x18AE6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-743");
				break;
			case 0x18AE7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-744");
				break;
			case 0x18AE8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-745");
				break;
			case 0x18AE9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-746");
				break;
			case 0x18AEA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-747");
				break;
			case 0x18AEB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-748");
				break;
			case 0x18AEC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-749");
				break;
			case 0x18AED:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-750");
				break;
			case 0x18AEE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-751");
				break;
			case 0x18AEF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-752");
				break;
			case 0x18AF0:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-753");
				break;
			case 0x18AF1:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-754");
				break;
			case 0x18AF2:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-755");
				break;
			case 0x18AF3:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-756");
				break;
			case 0x18AF4:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-757");
				break;
			case 0x18AF5:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-758");
				break;
			case 0x18AF6:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-759");
				break;
			case 0x18AF7:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-760");
				break;
			case 0x18AF8:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-761");
				break;
			case 0x18AF9:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-762");
				break;
			case 0x18AFA:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-763");
				break;
			case 0x18AFB:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-764");
				break;
			case 0x18AFC:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-765");
				break;
			case 0x18AFD:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-766");
				break;
			case 0x18AFE:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-767");
				break;
			case 0x18AFF:
				strcpy_s(buf, buf_size, "TANGUT COMPONENT-768");
				break;
			case 0x18B00:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B00");
				break;
			case 0x18B01:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B01");
				break;
			case 0x18B02:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B02");
				break;
			case 0x18B03:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B03");
				break;
			case 0x18B04:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B04");
				break;
			case 0x18B05:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B05");
				break;
			case 0x18B06:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B06");
				break;
			case 0x18B07:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B07");
				break;
			case 0x18B08:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B08");
				break;
			case 0x18B09:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B09");
				break;
			case 0x18B0A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B0A");
				break;
			case 0x18B0B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B0B");
				break;
			case 0x18B0C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B0C");
				break;
			case 0x18B0D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B0D");
				break;
			case 0x18B0E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B0E");
				break;
			case 0x18B0F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B0F");
				break;
			case 0x18B10:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B10");
				break;
			case 0x18B11:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B11");
				break;
			case 0x18B12:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B12");
				break;
			case 0x18B13:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B13");
				break;
			case 0x18B14:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B14");
				break;
			case 0x18B15:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B15");
				break;
			case 0x18B16:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B16");
				break;
			case 0x18B17:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B17");
				break;
			case 0x18B18:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B18");
				break;
			case 0x18B19:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B19");
				break;
			case 0x18B1A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B1A");
				break;
			case 0x18B1B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B1B");
				break;
			case 0x18B1C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B1C");
				break;
			case 0x18B1D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B1D");
				break;
			case 0x18B1E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B1E");
				break;
			case 0x18B1F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B1F");
				break;
			case 0x18B20:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B20");
				break;
			case 0x18B21:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B21");
				break;
			case 0x18B22:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B22");
				break;
			case 0x18B23:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B23");
				break;
			case 0x18B24:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B24");
				break;
			case 0x18B25:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B25");
				break;
			case 0x18B26:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B26");
				break;
			case 0x18B27:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B27");
				break;
			case 0x18B28:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B28");
				break;
			case 0x18B29:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B29");
				break;
			case 0x18B2A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B2A");
				break;
			case 0x18B2B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B2B");
				break;
			case 0x18B2C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B2C");
				break;
			case 0x18B2D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B2D");
				break;
			case 0x18B2E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B2E");
				break;
			case 0x18B2F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B2F");
				break;
			case 0x18B30:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B30");
				break;
			case 0x18B31:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B31");
				break;
			case 0x18B32:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B32");
				break;
			case 0x18B33:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B33");
				break;
			case 0x18B34:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B34");
				break;
			case 0x18B35:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B35");
				break;
			case 0x18B36:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B36");
				break;
			case 0x18B37:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B37");
				break;
			case 0x18B38:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B38");
				break;
			case 0x18B39:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B39");
				break;
			case 0x18B3A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B3A");
				break;
			case 0x18B3B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B3B");
				break;
			case 0x18B3C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B3C");
				break;
			case 0x18B3D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B3D");
				break;
			case 0x18B3E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B3E");
				break;
			case 0x18B3F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B3F");
				break;
			case 0x18B40:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B40");
				break;
			case 0x18B41:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B41");
				break;
			case 0x18B42:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B42");
				break;
			case 0x18B43:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B43");
				break;
			case 0x18B44:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B44");
				break;
			case 0x18B45:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B45");
				break;
			case 0x18B46:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B46");
				break;
			case 0x18B47:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B47");
				break;
			case 0x18B48:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B48");
				break;
			case 0x18B49:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B49");
				break;
			case 0x18B4A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B4A");
				break;
			case 0x18B4B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B4B");
				break;
			case 0x18B4C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B4C");
				break;
			case 0x18B4D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B4D");
				break;
			case 0x18B4E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B4E");
				break;
			case 0x18B4F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B4F");
				break;
			case 0x18B50:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B50");
				break;
			case 0x18B51:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B51");
				break;
			case 0x18B52:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B52");
				break;
			case 0x18B53:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B53");
				break;
			case 0x18B54:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B54");
				break;
			case 0x18B55:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B55");
				break;
			case 0x18B56:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B56");
				break;
			case 0x18B57:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B57");
				break;
			case 0x18B58:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B58");
				break;
			case 0x18B59:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B59");
				break;
			case 0x18B5A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B5A");
				break;
			case 0x18B5B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B5B");
				break;
			case 0x18B5C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B5C");
				break;
			case 0x18B5D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B5D");
				break;
			case 0x18B5E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B5E");
				break;
			case 0x18B5F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B5F");
				break;
			case 0x18B60:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B60");
				break;
			case 0x18B61:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B61");
				break;
			case 0x18B62:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B62");
				break;
			case 0x18B63:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B63");
				break;
			case 0x18B64:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B64");
				break;
			case 0x18B65:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B65");
				break;
			case 0x18B66:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B66");
				break;
			case 0x18B67:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B67");
				break;
			case 0x18B68:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B68");
				break;
			case 0x18B69:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B69");
				break;
			case 0x18B6A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B6A");
				break;
			case 0x18B6B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B6B");
				break;
			case 0x18B6C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B6C");
				break;
			case 0x18B6D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B6D");
				break;
			case 0x18B6E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B6E");
				break;
			case 0x18B6F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B6F");
				break;
			case 0x18B70:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B70");
				break;
			case 0x18B71:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B71");
				break;
			case 0x18B72:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B72");
				break;
			case 0x18B73:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B73");
				break;
			case 0x18B74:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B74");
				break;
			case 0x18B75:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B75");
				break;
			case 0x18B76:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B76");
				break;
			case 0x18B77:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B77");
				break;
			case 0x18B78:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B78");
				break;
			case 0x18B79:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B79");
				break;
			case 0x18B7A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B7A");
				break;
			case 0x18B7B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B7B");
				break;
			case 0x18B7C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B7C");
				break;
			case 0x18B7D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B7D");
				break;
			case 0x18B7E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B7E");
				break;
			case 0x18B7F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B7F");
				break;
			case 0x18B80:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B80");
				break;
			case 0x18B81:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B81");
				break;
			case 0x18B82:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B82");
				break;
			case 0x18B83:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B83");
				break;
			case 0x18B84:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B84");
				break;
			case 0x18B85:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B85");
				break;
			case 0x18B86:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B86");
				break;
			case 0x18B87:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B87");
				break;
			case 0x18B88:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B88");
				break;
			case 0x18B89:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B89");
				break;
			case 0x18B8A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B8A");
				break;
			case 0x18B8B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B8B");
				break;
			case 0x18B8C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B8C");
				break;
			case 0x18B8D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B8D");
				break;
			case 0x18B8E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B8E");
				break;
			case 0x18B8F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B8F");
				break;
			case 0x18B90:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B90");
				break;
			case 0x18B91:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B91");
				break;
			case 0x18B92:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B92");
				break;
			case 0x18B93:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B93");
				break;
			case 0x18B94:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B94");
				break;
			case 0x18B95:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B95");
				break;
			case 0x18B96:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B96");
				break;
			case 0x18B97:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B97");
				break;
			case 0x18B98:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B98");
				break;
			case 0x18B99:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B99");
				break;
			case 0x18B9A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B9A");
				break;
			case 0x18B9B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B9B");
				break;
			case 0x18B9C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B9C");
				break;
			case 0x18B9D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B9D");
				break;
			case 0x18B9E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B9E");
				break;
			case 0x18B9F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18B9F");
				break;
			case 0x18BA0:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BA0");
				break;
			case 0x18BA1:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BA1");
				break;
			case 0x18BA2:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BA2");
				break;
			case 0x18BA3:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BA3");
				break;
			case 0x18BA4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BA4");
				break;
			case 0x18BA5:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BA5");
				break;
			case 0x18BA6:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BA6");
				break;
			case 0x18BA7:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BA7");
				break;
			case 0x18BA8:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BA8");
				break;
			case 0x18BA9:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BA9");
				break;
			case 0x18BAA:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BAA");
				break;
			case 0x18BAB:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BAB");
				break;
			case 0x18BAC:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BAC");
				break;
			case 0x18BAD:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BAD");
				break;
			case 0x18BAE:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BAE");
				break;
			case 0x18BAF:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BAF");
				break;
			case 0x18BB0:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BB0");
				break;
			case 0x18BB1:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BB1");
				break;
			case 0x18BB2:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BB2");
				break;
			case 0x18BB3:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BB3");
				break;
			case 0x18BB4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BB4");
				break;
			case 0x18BB5:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BB5");
				break;
			case 0x18BB6:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BB6");
				break;
			case 0x18BB7:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BB7");
				break;
			case 0x18BB8:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BB8");
				break;
			case 0x18BB9:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BB9");
				break;
			case 0x18BBA:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BBA");
				break;
			case 0x18BBB:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BBB");
				break;
			case 0x18BBC:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BBC");
				break;
			case 0x18BBD:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BBD");
				break;
			case 0x18BBE:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BBE");
				break;
			case 0x18BBF:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BBF");
				break;
			case 0x18BC0:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BC0");
				break;
			case 0x18BC1:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BC1");
				break;
			case 0x18BC2:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BC2");
				break;
			case 0x18BC3:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BC3");
				break;
			case 0x18BC4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BC4");
				break;
			case 0x18BC5:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BC5");
				break;
			case 0x18BC6:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BC6");
				break;
			case 0x18BC7:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BC7");
				break;
			case 0x18BC8:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BC8");
				break;
			case 0x18BC9:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BC9");
				break;
			case 0x18BCA:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BCA");
				break;
			case 0x18BCB:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BCB");
				break;
			case 0x18BCC:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BCC");
				break;
			case 0x18BCD:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BCD");
				break;
			case 0x18BCE:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BCE");
				break;
			case 0x18BCF:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BCF");
				break;
			case 0x18BD0:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BD0");
				break;
			case 0x18BD1:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BD1");
				break;
			case 0x18BD2:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BD2");
				break;
			case 0x18BD3:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BD3");
				break;
			case 0x18BD4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BD4");
				break;
			case 0x18BD5:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BD5");
				break;
			case 0x18BD6:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BD6");
				break;
			case 0x18BD7:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BD7");
				break;
			case 0x18BD8:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BD8");
				break;
			case 0x18BD9:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BD9");
				break;
			case 0x18BDA:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BDA");
				break;
			case 0x18BDB:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BDB");
				break;
			case 0x18BDC:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BDC");
				break;
			case 0x18BDD:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BDD");
				break;
			case 0x18BDE:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BDE");
				break;
			case 0x18BDF:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BDF");
				break;
			case 0x18BE0:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BE0");
				break;
			case 0x18BE1:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BE1");
				break;
			case 0x18BE2:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BE2");
				break;
			case 0x18BE3:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BE3");
				break;
			case 0x18BE4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BE4");
				break;
			case 0x18BE5:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BE5");
				break;
			case 0x18BE6:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BE6");
				break;
			case 0x18BE7:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BE7");
				break;
			case 0x18BE8:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BE8");
				break;
			case 0x18BE9:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BE9");
				break;
			case 0x18BEA:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BEA");
				break;
			case 0x18BEB:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BEB");
				break;
			case 0x18BEC:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BEC");
				break;
			case 0x18BED:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BED");
				break;
			case 0x18BEE:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BEE");
				break;
			case 0x18BEF:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BEF");
				break;
			case 0x18BF0:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BF0");
				break;
			case 0x18BF1:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BF1");
				break;
			case 0x18BF2:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BF2");
				break;
			case 0x18BF3:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BF3");
				break;
			case 0x18BF4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BF4");
				break;
			case 0x18BF5:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BF5");
				break;
			case 0x18BF6:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BF6");
				break;
			case 0x18BF7:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BF7");
				break;
			case 0x18BF8:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BF8");
				break;
			case 0x18BF9:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BF9");
				break;
			case 0x18BFA:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BFA");
				break;
			case 0x18BFB:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BFB");
				break;
			case 0x18BFC:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BFC");
				break;
			case 0x18BFD:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BFD");
				break;
			case 0x18BFE:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BFE");
				break;
			case 0x18BFF:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18BFF");
				break;
			case 0x18C00:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C00");
				break;
			case 0x18C01:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C01");
				break;
			case 0x18C02:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C02");
				break;
			case 0x18C03:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C03");
				break;
			case 0x18C04:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C04");
				break;
			case 0x18C05:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C05");
				break;
			case 0x18C06:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C06");
				break;
			case 0x18C07:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C07");
				break;
			case 0x18C08:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C08");
				break;
			case 0x18C09:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C09");
				break;
			case 0x18C0A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C0A");
				break;
			case 0x18C0B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C0B");
				break;
			case 0x18C0C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C0C");
				break;
			case 0x18C0D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C0D");
				break;
			case 0x18C0E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C0E");
				break;
			case 0x18C0F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C0F");
				break;
			case 0x18C10:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C10");
				break;
			case 0x18C11:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C11");
				break;
			case 0x18C12:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C12");
				break;
			case 0x18C13:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C13");
				break;
			case 0x18C14:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C14");
				break;
			case 0x18C15:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C15");
				break;
			case 0x18C16:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C16");
				break;
			case 0x18C17:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C17");
				break;
			case 0x18C18:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C18");
				break;
			case 0x18C19:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C19");
				break;
			case 0x18C1A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C1A");
				break;
			case 0x18C1B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C1B");
				break;
			case 0x18C1C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C1C");
				break;
			case 0x18C1D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C1D");
				break;
			case 0x18C1E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C1E");
				break;
			case 0x18C1F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C1F");
				break;
			case 0x18C20:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C20");
				break;
			case 0x18C21:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C21");
				break;
			case 0x18C22:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C22");
				break;
			case 0x18C23:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C23");
				break;
			case 0x18C24:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C24");
				break;
			case 0x18C25:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C25");
				break;
			case 0x18C26:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C26");
				break;
			case 0x18C27:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C27");
				break;
			case 0x18C28:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C28");
				break;
			case 0x18C29:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C29");
				break;
			case 0x18C2A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C2A");
				break;
			case 0x18C2B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C2B");
				break;
			case 0x18C2C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C2C");
				break;
			case 0x18C2D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C2D");
				break;
			case 0x18C2E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C2E");
				break;
			case 0x18C2F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C2F");
				break;
			case 0x18C30:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C30");
				break;
			case 0x18C31:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C31");
				break;
			case 0x18C32:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C32");
				break;
			case 0x18C33:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C33");
				break;
			case 0x18C34:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C34");
				break;
			case 0x18C35:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C35");
				break;
			case 0x18C36:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C36");
				break;
			case 0x18C37:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C37");
				break;
			case 0x18C38:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C38");
				break;
			case 0x18C39:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C39");
				break;
			case 0x18C3A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C3A");
				break;
			case 0x18C3B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C3B");
				break;
			case 0x18C3C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C3C");
				break;
			case 0x18C3D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C3D");
				break;
			case 0x18C3E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C3E");
				break;
			case 0x18C3F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C3F");
				break;
			case 0x18C40:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C40");
				break;
			case 0x18C41:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C41");
				break;
			case 0x18C42:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C42");
				break;
			case 0x18C43:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C43");
				break;
			case 0x18C44:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C44");
				break;
			case 0x18C45:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C45");
				break;
			case 0x18C46:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C46");
				break;
			case 0x18C47:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C47");
				break;
			case 0x18C48:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C48");
				break;
			case 0x18C49:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C49");
				break;
			case 0x18C4A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C4A");
				break;
			case 0x18C4B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C4B");
				break;
			case 0x18C4C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C4C");
				break;
			case 0x18C4D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C4D");
				break;
			case 0x18C4E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C4E");
				break;
			case 0x18C4F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C4F");
				break;
			case 0x18C50:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C50");
				break;
			case 0x18C51:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C51");
				break;
			case 0x18C52:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C52");
				break;
			case 0x18C53:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C53");
				break;
			case 0x18C54:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C54");
				break;
			case 0x18C55:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C55");
				break;
			case 0x18C56:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C56");
				break;
			case 0x18C57:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C57");
				break;
			case 0x18C58:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C58");
				break;
			case 0x18C59:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C59");
				break;
			case 0x18C5A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C5A");
				break;
			case 0x18C5B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C5B");
				break;
			case 0x18C5C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C5C");
				break;
			case 0x18C5D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C5D");
				break;
			case 0x18C5E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C5E");
				break;
			case 0x18C5F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C5F");
				break;
			case 0x18C60:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C60");
				break;
			case 0x18C61:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C61");
				break;
			case 0x18C62:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C62");
				break;
			case 0x18C63:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C63");
				break;
			case 0x18C64:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C64");
				break;
			case 0x18C65:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C65");
				break;
			case 0x18C66:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C66");
				break;
			case 0x18C67:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C67");
				break;
			case 0x18C68:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C68");
				break;
			case 0x18C69:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C69");
				break;
			case 0x18C6A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C6A");
				break;
			case 0x18C6B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C6B");
				break;
			case 0x18C6C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C6C");
				break;
			case 0x18C6D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C6D");
				break;
			case 0x18C6E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C6E");
				break;
			case 0x18C6F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C6F");
				break;
			case 0x18C70:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C70");
				break;
			case 0x18C71:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C71");
				break;
			case 0x18C72:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C72");
				break;
			case 0x18C73:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C73");
				break;
			case 0x18C74:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C74");
				break;
			case 0x18C75:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C75");
				break;
			case 0x18C76:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C76");
				break;
			case 0x18C77:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C77");
				break;
			case 0x18C78:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C78");
				break;
			case 0x18C79:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C79");
				break;
			case 0x18C7A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C7A");
				break;
			case 0x18C7B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C7B");
				break;
			case 0x18C7C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C7C");
				break;
			case 0x18C7D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C7D");
				break;
			case 0x18C7E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C7E");
				break;
			case 0x18C7F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C7F");
				break;
			case 0x18C80:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C80");
				break;
			case 0x18C81:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C81");
				break;
			case 0x18C82:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C82");
				break;
			case 0x18C83:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C83");
				break;
			case 0x18C84:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C84");
				break;
			case 0x18C85:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C85");
				break;
			case 0x18C86:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C86");
				break;
			case 0x18C87:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C87");
				break;
			case 0x18C88:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C88");
				break;
			case 0x18C89:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C89");
				break;
			case 0x18C8A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C8A");
				break;
			case 0x18C8B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C8B");
				break;
			case 0x18C8C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C8C");
				break;
			case 0x18C8D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C8D");
				break;
			case 0x18C8E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C8E");
				break;
			case 0x18C8F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C8F");
				break;
			case 0x18C90:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C90");
				break;
			case 0x18C91:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C91");
				break;
			case 0x18C92:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C92");
				break;
			case 0x18C93:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C93");
				break;
			case 0x18C94:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C94");
				break;
			case 0x18C95:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C95");
				break;
			case 0x18C96:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C96");
				break;
			case 0x18C97:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C97");
				break;
			case 0x18C98:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C98");
				break;
			case 0x18C99:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C99");
				break;
			case 0x18C9A:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C9A");
				break;
			case 0x18C9B:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C9B");
				break;
			case 0x18C9C:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C9C");
				break;
			case 0x18C9D:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C9D");
				break;
			case 0x18C9E:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C9E");
				break;
			case 0x18C9F:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18C9F");
				break;
			case 0x18CA0:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CA0");
				break;
			case 0x18CA1:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CA1");
				break;
			case 0x18CA2:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CA2");
				break;
			case 0x18CA3:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CA3");
				break;
			case 0x18CA4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CA4");
				break;
			case 0x18CA5:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CA5");
				break;
			case 0x18CA6:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CA6");
				break;
			case 0x18CA7:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CA7");
				break;
			case 0x18CA8:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CA8");
				break;
			case 0x18CA9:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CA9");
				break;
			case 0x18CAA:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CAA");
				break;
			case 0x18CAB:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CAB");
				break;
			case 0x18CAC:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CAC");
				break;
			case 0x18CAD:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CAD");
				break;
			case 0x18CAE:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CAE");
				break;
			case 0x18CAF:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CAF");
				break;
			case 0x18CB0:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CB0");
				break;
			case 0x18CB1:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CB1");
				break;
			case 0x18CB2:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CB2");
				break;
			case 0x18CB3:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CB3");
				break;
			case 0x18CB4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CB4");
				break;
			case 0x18CB5:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CB5");
				break;
			case 0x18CB6:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CB6");
				break;
			case 0x18CB7:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CB7");
				break;
			case 0x18CB8:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CB8");
				break;
			case 0x18CB9:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CB9");
				break;
			case 0x18CBA:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CBA");
				break;
			case 0x18CBB:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CBB");
				break;
			case 0x18CBC:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CBC");
				break;
			case 0x18CBD:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CBD");
				break;
			case 0x18CBE:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CBE");
				break;
			case 0x18CBF:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CBF");
				break;
			case 0x18CC0:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CC0");
				break;
			case 0x18CC1:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CC1");
				break;
			case 0x18CC2:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CC2");
				break;
			case 0x18CC3:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CC3");
				break;
			case 0x18CC4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CC4");
				break;
			case 0x18CC5:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CC5");
				break;
			case 0x18CC6:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CC6");
				break;
			case 0x18CC7:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CC7");
				break;
			case 0x18CC8:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CC8");
				break;
			case 0x18CC9:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CC9");
				break;
			case 0x18CCA:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CCA");
				break;
			case 0x18CCB:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CCB");
				break;
			case 0x18CCC:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CCC");
				break;
			case 0x18CCD:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CCD");
				break;
			case 0x18CCE:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CCE");
				break;
			case 0x18CCF:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CCF");
				break;
			case 0x18CD0:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CD0");
				break;
			case 0x18CD1:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CD1");
				break;
			case 0x18CD2:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CD2");
				break;
			case 0x18CD3:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CD3");
				break;
			case 0x18CD4:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CD4");
				break;
			case 0x18CD5:
				strcpy_s(buf, buf_size, "KHITAN SMALL SCRIPT CHARACTER-18CD5");
				break;
			case 0x18D00:
				strcpy_s(buf, buf_size, "<Tangut Ideograph Supplement, First>");
				break;
			case 0x18D08:
				strcpy_s(buf, buf_size, "<Tangut Ideograph Supplement, Last>");
				break;
			case 0x1B000:
				strcpy_s(buf, buf_size, "KATAKANA LETTER ARCHAIC E");
				break;
			case 0x1B001:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER ARCHAIC YE");
				break;
			case 0x1B002:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER A-1");
				break;
			case 0x1B003:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER A-2");
				break;
			case 0x1B004:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER A-3");
				break;
			case 0x1B005:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER A-WO");
				break;
			case 0x1B006:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER I-1");
				break;
			case 0x1B007:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER I-2");
				break;
			case 0x1B008:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER I-3");
				break;
			case 0x1B009:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER I-4");
				break;
			case 0x1B00A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER U-1");
				break;
			case 0x1B00B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER U-2");
				break;
			case 0x1B00C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER U-3");
				break;
			case 0x1B00D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER U-4");
				break;
			case 0x1B00E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER U-5");
				break;
			case 0x1B00F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER E-2");
				break;
			case 0x1B010:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER E-3");
				break;
			case 0x1B011:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER E-4");
				break;
			case 0x1B012:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER E-5");
				break;
			case 0x1B013:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER E-6");
				break;
			case 0x1B014:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER O-1");
				break;
			case 0x1B015:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER O-2");
				break;
			case 0x1B016:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER O-3");
				break;
			case 0x1B017:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-1");
				break;
			case 0x1B018:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-2");
				break;
			case 0x1B019:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-3");
				break;
			case 0x1B01A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-4");
				break;
			case 0x1B01B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-5");
				break;
			case 0x1B01C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-6");
				break;
			case 0x1B01D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-7");
				break;
			case 0x1B01E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-8");
				break;
			case 0x1B01F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-9");
				break;
			case 0x1B020:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-10");
				break;
			case 0x1B021:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-11");
				break;
			case 0x1B022:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KA-KE");
				break;
			case 0x1B023:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KI-1");
				break;
			case 0x1B024:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KI-2");
				break;
			case 0x1B025:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KI-3");
				break;
			case 0x1B026:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KI-4");
				break;
			case 0x1B027:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KI-5");
				break;
			case 0x1B028:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KI-6");
				break;
			case 0x1B029:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KI-7");
				break;
			case 0x1B02A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KI-8");
				break;
			case 0x1B02B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KU-1");
				break;
			case 0x1B02C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KU-2");
				break;
			case 0x1B02D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KU-3");
				break;
			case 0x1B02E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KU-4");
				break;
			case 0x1B02F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KU-5");
				break;
			case 0x1B030:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KU-6");
				break;
			case 0x1B031:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KU-7");
				break;
			case 0x1B032:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KE-1");
				break;
			case 0x1B033:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KE-2");
				break;
			case 0x1B034:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KE-3");
				break;
			case 0x1B035:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KE-4");
				break;
			case 0x1B036:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KE-5");
				break;
			case 0x1B037:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KE-6");
				break;
			case 0x1B038:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KO-1");
				break;
			case 0x1B039:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KO-2");
				break;
			case 0x1B03A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KO-3");
				break;
			case 0x1B03B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER KO-KI");
				break;
			case 0x1B03C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SA-1");
				break;
			case 0x1B03D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SA-2");
				break;
			case 0x1B03E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SA-3");
				break;
			case 0x1B03F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SA-4");
				break;
			case 0x1B040:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SA-5");
				break;
			case 0x1B041:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SA-6");
				break;
			case 0x1B042:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SA-7");
				break;
			case 0x1B043:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SA-8");
				break;
			case 0x1B044:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SI-1");
				break;
			case 0x1B045:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SI-2");
				break;
			case 0x1B046:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SI-3");
				break;
			case 0x1B047:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SI-4");
				break;
			case 0x1B048:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SI-5");
				break;
			case 0x1B049:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SI-6");
				break;
			case 0x1B04A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SU-1");
				break;
			case 0x1B04B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SU-2");
				break;
			case 0x1B04C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SU-3");
				break;
			case 0x1B04D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SU-4");
				break;
			case 0x1B04E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SU-5");
				break;
			case 0x1B04F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SU-6");
				break;
			case 0x1B050:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SU-7");
				break;
			case 0x1B051:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SU-8");
				break;
			case 0x1B052:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SE-1");
				break;
			case 0x1B053:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SE-2");
				break;
			case 0x1B054:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SE-3");
				break;
			case 0x1B055:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SE-4");
				break;
			case 0x1B056:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SE-5");
				break;
			case 0x1B057:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SO-1");
				break;
			case 0x1B058:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SO-2");
				break;
			case 0x1B059:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SO-3");
				break;
			case 0x1B05A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SO-4");
				break;
			case 0x1B05B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SO-5");
				break;
			case 0x1B05C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SO-6");
				break;
			case 0x1B05D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER SO-7");
				break;
			case 0x1B05E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TA-1");
				break;
			case 0x1B05F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TA-2");
				break;
			case 0x1B060:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TA-3");
				break;
			case 0x1B061:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TA-4");
				break;
			case 0x1B062:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TI-1");
				break;
			case 0x1B063:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TI-2");
				break;
			case 0x1B064:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TI-3");
				break;
			case 0x1B065:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TI-4");
				break;
			case 0x1B066:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TI-5");
				break;
			case 0x1B067:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TI-6");
				break;
			case 0x1B068:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TI-7");
				break;
			case 0x1B069:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TU-1");
				break;
			case 0x1B06A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TU-2");
				break;
			case 0x1B06B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TU-3");
				break;
			case 0x1B06C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TU-4");
				break;
			case 0x1B06D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TU-TO");
				break;
			case 0x1B06E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TE-1");
				break;
			case 0x1B06F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TE-2");
				break;
			case 0x1B070:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TE-3");
				break;
			case 0x1B071:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TE-4");
				break;
			case 0x1B072:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TE-5");
				break;
			case 0x1B073:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TE-6");
				break;
			case 0x1B074:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TE-7");
				break;
			case 0x1B075:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TE-8");
				break;
			case 0x1B076:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TE-9");
				break;
			case 0x1B077:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TO-1");
				break;
			case 0x1B078:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TO-2");
				break;
			case 0x1B079:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TO-3");
				break;
			case 0x1B07A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TO-4");
				break;
			case 0x1B07B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TO-5");
				break;
			case 0x1B07C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TO-6");
				break;
			case 0x1B07D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER TO-RA");
				break;
			case 0x1B07E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NA-1");
				break;
			case 0x1B07F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NA-2");
				break;
			case 0x1B080:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NA-3");
				break;
			case 0x1B081:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NA-4");
				break;
			case 0x1B082:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NA-5");
				break;
			case 0x1B083:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NA-6");
				break;
			case 0x1B084:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NA-7");
				break;
			case 0x1B085:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NA-8");
				break;
			case 0x1B086:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NA-9");
				break;
			case 0x1B087:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NI-1");
				break;
			case 0x1B088:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NI-2");
				break;
			case 0x1B089:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NI-3");
				break;
			case 0x1B08A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NI-4");
				break;
			case 0x1B08B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NI-5");
				break;
			case 0x1B08C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NI-6");
				break;
			case 0x1B08D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NI-7");
				break;
			case 0x1B08E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NI-TE");
				break;
			case 0x1B08F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NU-1");
				break;
			case 0x1B090:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NU-2");
				break;
			case 0x1B091:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NU-3");
				break;
			case 0x1B092:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NE-1");
				break;
			case 0x1B093:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NE-2");
				break;
			case 0x1B094:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NE-3");
				break;
			case 0x1B095:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NE-4");
				break;
			case 0x1B096:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NE-5");
				break;
			case 0x1B097:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NE-6");
				break;
			case 0x1B098:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NE-KO");
				break;
			case 0x1B099:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NO-1");
				break;
			case 0x1B09A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NO-2");
				break;
			case 0x1B09B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NO-3");
				break;
			case 0x1B09C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NO-4");
				break;
			case 0x1B09D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER NO-5");
				break;
			case 0x1B09E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-1");
				break;
			case 0x1B09F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-2");
				break;
			case 0x1B0A0:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-3");
				break;
			case 0x1B0A1:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-4");
				break;
			case 0x1B0A2:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-5");
				break;
			case 0x1B0A3:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-6");
				break;
			case 0x1B0A4:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-7");
				break;
			case 0x1B0A5:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-8");
				break;
			case 0x1B0A6:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-9");
				break;
			case 0x1B0A7:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-10");
				break;
			case 0x1B0A8:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HA-11");
				break;
			case 0x1B0A9:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HI-1");
				break;
			case 0x1B0AA:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HI-2");
				break;
			case 0x1B0AB:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HI-3");
				break;
			case 0x1B0AC:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HI-4");
				break;
			case 0x1B0AD:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HI-5");
				break;
			case 0x1B0AE:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HI-6");
				break;
			case 0x1B0AF:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HI-7");
				break;
			case 0x1B0B0:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HU-1");
				break;
			case 0x1B0B1:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HU-2");
				break;
			case 0x1B0B2:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HU-3");
				break;
			case 0x1B0B3:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HE-1");
				break;
			case 0x1B0B4:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HE-2");
				break;
			case 0x1B0B5:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HE-3");
				break;
			case 0x1B0B6:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HE-4");
				break;
			case 0x1B0B7:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HE-5");
				break;
			case 0x1B0B8:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HE-6");
				break;
			case 0x1B0B9:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HE-7");
				break;
			case 0x1B0BA:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HO-1");
				break;
			case 0x1B0BB:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HO-2");
				break;
			case 0x1B0BC:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HO-3");
				break;
			case 0x1B0BD:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HO-4");
				break;
			case 0x1B0BE:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HO-5");
				break;
			case 0x1B0BF:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HO-6");
				break;
			case 0x1B0C0:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HO-7");
				break;
			case 0x1B0C1:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER HO-8");
				break;
			case 0x1B0C2:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MA-1");
				break;
			case 0x1B0C3:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MA-2");
				break;
			case 0x1B0C4:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MA-3");
				break;
			case 0x1B0C5:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MA-4");
				break;
			case 0x1B0C6:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MA-5");
				break;
			case 0x1B0C7:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MA-6");
				break;
			case 0x1B0C8:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MA-7");
				break;
			case 0x1B0C9:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MI-1");
				break;
			case 0x1B0CA:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MI-2");
				break;
			case 0x1B0CB:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MI-3");
				break;
			case 0x1B0CC:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MI-4");
				break;
			case 0x1B0CD:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MI-5");
				break;
			case 0x1B0CE:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MI-6");
				break;
			case 0x1B0CF:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MI-7");
				break;
			case 0x1B0D0:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MU-1");
				break;
			case 0x1B0D1:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MU-2");
				break;
			case 0x1B0D2:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MU-3");
				break;
			case 0x1B0D3:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MU-4");
				break;
			case 0x1B0D4:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER ME-1");
				break;
			case 0x1B0D5:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER ME-2");
				break;
			case 0x1B0D6:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER ME-MA");
				break;
			case 0x1B0D7:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MO-1");
				break;
			case 0x1B0D8:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MO-2");
				break;
			case 0x1B0D9:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MO-3");
				break;
			case 0x1B0DA:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MO-4");
				break;
			case 0x1B0DB:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MO-5");
				break;
			case 0x1B0DC:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER MO-6");
				break;
			case 0x1B0DD:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YA-1");
				break;
			case 0x1B0DE:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YA-2");
				break;
			case 0x1B0DF:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YA-3");
				break;
			case 0x1B0E0:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YA-4");
				break;
			case 0x1B0E1:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YA-5");
				break;
			case 0x1B0E2:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YA-YO");
				break;
			case 0x1B0E3:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YU-1");
				break;
			case 0x1B0E4:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YU-2");
				break;
			case 0x1B0E5:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YU-3");
				break;
			case 0x1B0E6:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YU-4");
				break;
			case 0x1B0E7:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YO-1");
				break;
			case 0x1B0E8:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YO-2");
				break;
			case 0x1B0E9:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YO-3");
				break;
			case 0x1B0EA:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YO-4");
				break;
			case 0x1B0EB:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YO-5");
				break;
			case 0x1B0EC:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER YO-6");
				break;
			case 0x1B0ED:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RA-1");
				break;
			case 0x1B0EE:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RA-2");
				break;
			case 0x1B0EF:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RA-3");
				break;
			case 0x1B0F0:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RA-4");
				break;
			case 0x1B0F1:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RI-1");
				break;
			case 0x1B0F2:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RI-2");
				break;
			case 0x1B0F3:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RI-3");
				break;
			case 0x1B0F4:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RI-4");
				break;
			case 0x1B0F5:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RI-5");
				break;
			case 0x1B0F6:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RI-6");
				break;
			case 0x1B0F7:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RI-7");
				break;
			case 0x1B0F8:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RU-1");
				break;
			case 0x1B0F9:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RU-2");
				break;
			case 0x1B0FA:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RU-3");
				break;
			case 0x1B0FB:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RU-4");
				break;
			case 0x1B0FC:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RU-5");
				break;
			case 0x1B0FD:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RU-6");
				break;
			case 0x1B0FE:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RE-1");
				break;
			case 0x1B0FF:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RE-2");
				break;
			case 0x1B100:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RE-3");
				break;
			case 0x1B101:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RE-4");
				break;
			case 0x1B102:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RO-1");
				break;
			case 0x1B103:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RO-2");
				break;
			case 0x1B104:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RO-3");
				break;
			case 0x1B105:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RO-4");
				break;
			case 0x1B106:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RO-5");
				break;
			case 0x1B107:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER RO-6");
				break;
			case 0x1B108:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WA-1");
				break;
			case 0x1B109:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WA-2");
				break;
			case 0x1B10A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WA-3");
				break;
			case 0x1B10B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WA-4");
				break;
			case 0x1B10C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WA-5");
				break;
			case 0x1B10D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WI-1");
				break;
			case 0x1B10E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WI-2");
				break;
			case 0x1B10F:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WI-3");
				break;
			case 0x1B110:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WI-4");
				break;
			case 0x1B111:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WI-5");
				break;
			case 0x1B112:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WE-1");
				break;
			case 0x1B113:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WE-2");
				break;
			case 0x1B114:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WE-3");
				break;
			case 0x1B115:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WE-4");
				break;
			case 0x1B116:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WO-1");
				break;
			case 0x1B117:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WO-2");
				break;
			case 0x1B118:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WO-3");
				break;
			case 0x1B119:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WO-4");
				break;
			case 0x1B11A:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WO-5");
				break;
			case 0x1B11B:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WO-6");
				break;
			case 0x1B11C:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER WO-7");
				break;
			case 0x1B11D:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER N-MU-MO-1");
				break;
			case 0x1B11E:
				strcpy_s(buf, buf_size, "HENTAIGANA LETTER N-MU-MO-2");
				break;
			case 0x1B150:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL WI");
				break;
			case 0x1B151:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL WE");
				break;
			case 0x1B152:
				strcpy_s(buf, buf_size, "HIRAGANA LETTER SMALL WO");
				break;
			case 0x1B164:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL WI");
				break;
			case 0x1B165:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL WE");
				break;
			case 0x1B166:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL WO");
				break;
			case 0x1B167:
				strcpy_s(buf, buf_size, "KATAKANA LETTER SMALL N");
				break;
			case 0x1B170:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B170");
				break;
			case 0x1B171:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B171");
				break;
			case 0x1B172:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B172");
				break;
			case 0x1B173:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B173");
				break;
			case 0x1B174:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B174");
				break;
			case 0x1B175:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B175");
				break;
			case 0x1B176:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B176");
				break;
			case 0x1B177:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B177");
				break;
			case 0x1B178:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B178");
				break;
			case 0x1B179:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B179");
				break;
			case 0x1B17A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B17A");
				break;
			case 0x1B17B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B17B");
				break;
			case 0x1B17C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B17C");
				break;
			case 0x1B17D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B17D");
				break;
			case 0x1B17E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B17E");
				break;
			case 0x1B17F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B17F");
				break;
			case 0x1B180:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B180");
				break;
			case 0x1B181:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B181");
				break;
			case 0x1B182:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B182");
				break;
			case 0x1B183:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B183");
				break;
			case 0x1B184:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B184");
				break;
			case 0x1B185:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B185");
				break;
			case 0x1B186:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B186");
				break;
			case 0x1B187:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B187");
				break;
			case 0x1B188:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B188");
				break;
			case 0x1B189:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B189");
				break;
			case 0x1B18A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B18A");
				break;
			case 0x1B18B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B18B");
				break;
			case 0x1B18C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B18C");
				break;
			case 0x1B18D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B18D");
				break;
			case 0x1B18E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B18E");
				break;
			case 0x1B18F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B18F");
				break;
			case 0x1B190:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B190");
				break;
			case 0x1B191:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B191");
				break;
			case 0x1B192:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B192");
				break;
			case 0x1B193:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B193");
				break;
			case 0x1B194:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B194");
				break;
			case 0x1B195:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B195");
				break;
			case 0x1B196:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B196");
				break;
			case 0x1B197:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B197");
				break;
			case 0x1B198:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B198");
				break;
			case 0x1B199:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B199");
				break;
			case 0x1B19A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B19A");
				break;
			case 0x1B19B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B19B");
				break;
			case 0x1B19C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B19C");
				break;
			case 0x1B19D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B19D");
				break;
			case 0x1B19E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B19E");
				break;
			case 0x1B19F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B19F");
				break;
			case 0x1B1A0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1A0");
				break;
			case 0x1B1A1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1A1");
				break;
			case 0x1B1A2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1A2");
				break;
			case 0x1B1A3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1A3");
				break;
			case 0x1B1A4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1A4");
				break;
			case 0x1B1A5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1A5");
				break;
			case 0x1B1A6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1A6");
				break;
			case 0x1B1A7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1A7");
				break;
			case 0x1B1A8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1A8");
				break;
			case 0x1B1A9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1A9");
				break;
			case 0x1B1AA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1AA");
				break;
			case 0x1B1AB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1AB");
				break;
			case 0x1B1AC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1AC");
				break;
			case 0x1B1AD:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1AD");
				break;
			case 0x1B1AE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1AE");
				break;
			case 0x1B1AF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1AF");
				break;
			case 0x1B1B0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1B0");
				break;
			case 0x1B1B1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1B1");
				break;
			case 0x1B1B2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1B2");
				break;
			case 0x1B1B3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1B3");
				break;
			case 0x1B1B4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1B4");
				break;
			case 0x1B1B5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1B5");
				break;
			case 0x1B1B6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1B6");
				break;
			case 0x1B1B7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1B7");
				break;
			case 0x1B1B8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1B8");
				break;
			case 0x1B1B9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1B9");
				break;
			case 0x1B1BA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1BA");
				break;
			case 0x1B1BB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1BB");
				break;
			case 0x1B1BC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1BC");
				break;
			case 0x1B1BD:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1BD");
				break;
			case 0x1B1BE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1BE");
				break;
			case 0x1B1BF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1BF");
				break;
			case 0x1B1C0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1C0");
				break;
			case 0x1B1C1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1C1");
				break;
			case 0x1B1C2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1C2");
				break;
			case 0x1B1C3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1C3");
				break;
			case 0x1B1C4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1C4");
				break;
			case 0x1B1C5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1C5");
				break;
			case 0x1B1C6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1C6");
				break;
			case 0x1B1C7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1C7");
				break;
			case 0x1B1C8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1C8");
				break;
			case 0x1B1C9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1C9");
				break;
			case 0x1B1CA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1CA");
				break;
			case 0x1B1CB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1CB");
				break;
			case 0x1B1CC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1CC");
				break;
			case 0x1B1CD:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1CD");
				break;
			case 0x1B1CE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1CE");
				break;
			case 0x1B1CF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1CF");
				break;
			case 0x1B1D0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1D0");
				break;
			case 0x1B1D1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1D1");
				break;
			case 0x1B1D2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1D2");
				break;
			case 0x1B1D3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1D3");
				break;
			case 0x1B1D4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1D4");
				break;
			case 0x1B1D5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1D5");
				break;
			case 0x1B1D6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1D6");
				break;
			case 0x1B1D7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1D7");
				break;
			case 0x1B1D8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1D8");
				break;
			case 0x1B1D9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1D9");
				break;
			case 0x1B1DA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1DA");
				break;
			case 0x1B1DB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1DB");
				break;
			case 0x1B1DC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1DC");
				break;
			case 0x1B1DD:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1DD");
				break;
			case 0x1B1DE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1DE");
				break;
			case 0x1B1DF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1DF");
				break;
			case 0x1B1E0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1E0");
				break;
			case 0x1B1E1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1E1");
				break;
			case 0x1B1E2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1E2");
				break;
			case 0x1B1E3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1E3");
				break;
			case 0x1B1E4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1E4");
				break;
			case 0x1B1E5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1E5");
				break;
			case 0x1B1E6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1E6");
				break;
			case 0x1B1E7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1E7");
				break;
			case 0x1B1E8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1E8");
				break;
			case 0x1B1E9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1E9");
				break;
			case 0x1B1EA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1EA");
				break;
			case 0x1B1EB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1EB");
				break;
			case 0x1B1EC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1EC");
				break;
			case 0x1B1ED:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1ED");
				break;
			case 0x1B1EE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1EE");
				break;
			case 0x1B1EF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1EF");
				break;
			case 0x1B1F0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1F0");
				break;
			case 0x1B1F1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1F1");
				break;
			case 0x1B1F2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1F2");
				break;
			case 0x1B1F3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1F3");
				break;
			case 0x1B1F4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1F4");
				break;
			case 0x1B1F5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1F5");
				break;
			case 0x1B1F6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1F6");
				break;
			case 0x1B1F7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1F7");
				break;
			case 0x1B1F8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1F8");
				break;
			case 0x1B1F9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1F9");
				break;
			case 0x1B1FA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1FA");
				break;
			case 0x1B1FB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1FB");
				break;
			case 0x1B1FC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1FC");
				break;
			case 0x1B1FD:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1FD");
				break;
			case 0x1B1FE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1FE");
				break;
			case 0x1B1FF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B1FF");
				break;
			case 0x1B200:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B200");
				break;
			case 0x1B201:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B201");
				break;
			case 0x1B202:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B202");
				break;
			case 0x1B203:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B203");
				break;
			case 0x1B204:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B204");
				break;
			case 0x1B205:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B205");
				break;
			case 0x1B206:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B206");
				break;
			case 0x1B207:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B207");
				break;
			case 0x1B208:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B208");
				break;
			case 0x1B209:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B209");
				break;
			case 0x1B20A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B20A");
				break;
			case 0x1B20B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B20B");
				break;
			case 0x1B20C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B20C");
				break;
			case 0x1B20D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B20D");
				break;
			case 0x1B20E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B20E");
				break;
			case 0x1B20F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B20F");
				break;
			case 0x1B210:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B210");
				break;
			case 0x1B211:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B211");
				break;
			case 0x1B212:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B212");
				break;
			case 0x1B213:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B213");
				break;
			case 0x1B214:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B214");
				break;
			case 0x1B215:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B215");
				break;
			case 0x1B216:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B216");
				break;
			case 0x1B217:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B217");
				break;
			case 0x1B218:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B218");
				break;
			case 0x1B219:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B219");
				break;
			case 0x1B21A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B21A");
				break;
			case 0x1B21B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B21B");
				break;
			case 0x1B21C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B21C");
				break;
			case 0x1B21D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B21D");
				break;
			case 0x1B21E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B21E");
				break;
			case 0x1B21F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B21F");
				break;
			case 0x1B220:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B220");
				break;
			case 0x1B221:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B221");
				break;
			case 0x1B222:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B222");
				break;
			case 0x1B223:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B223");
				break;
			case 0x1B224:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B224");
				break;
			case 0x1B225:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B225");
				break;
			case 0x1B226:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B226");
				break;
			case 0x1B227:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B227");
				break;
			case 0x1B228:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B228");
				break;
			case 0x1B229:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B229");
				break;
			case 0x1B22A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B22A");
				break;
			case 0x1B22B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B22B");
				break;
			case 0x1B22C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B22C");
				break;
			case 0x1B22D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B22D");
				break;
			case 0x1B22E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B22E");
				break;
			case 0x1B22F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B22F");
				break;
			case 0x1B230:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B230");
				break;
			case 0x1B231:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B231");
				break;
			case 0x1B232:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B232");
				break;
			case 0x1B233:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B233");
				break;
			case 0x1B234:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B234");
				break;
			case 0x1B235:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B235");
				break;
			case 0x1B236:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B236");
				break;
			case 0x1B237:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B237");
				break;
			case 0x1B238:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B238");
				break;
			case 0x1B239:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B239");
				break;
			case 0x1B23A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B23A");
				break;
			case 0x1B23B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B23B");
				break;
			case 0x1B23C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B23C");
				break;
			case 0x1B23D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B23D");
				break;
			case 0x1B23E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B23E");
				break;
			case 0x1B23F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B23F");
				break;
			case 0x1B240:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B240");
				break;
			case 0x1B241:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B241");
				break;
			case 0x1B242:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B242");
				break;
			case 0x1B243:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B243");
				break;
			case 0x1B244:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B244");
				break;
			case 0x1B245:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B245");
				break;
			case 0x1B246:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B246");
				break;
			case 0x1B247:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B247");
				break;
			case 0x1B248:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B248");
				break;
			case 0x1B249:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B249");
				break;
			case 0x1B24A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B24A");
				break;
			case 0x1B24B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B24B");
				break;
			case 0x1B24C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B24C");
				break;
			case 0x1B24D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B24D");
				break;
			case 0x1B24E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B24E");
				break;
			case 0x1B24F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B24F");
				break;
			case 0x1B250:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B250");
				break;
			case 0x1B251:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B251");
				break;
			case 0x1B252:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B252");
				break;
			case 0x1B253:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B253");
				break;
			case 0x1B254:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B254");
				break;
			case 0x1B255:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B255");
				break;
			case 0x1B256:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B256");
				break;
			case 0x1B257:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B257");
				break;
			case 0x1B258:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B258");
				break;
			case 0x1B259:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B259");
				break;
			case 0x1B25A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B25A");
				break;
			case 0x1B25B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B25B");
				break;
			case 0x1B25C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B25C");
				break;
			case 0x1B25D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B25D");
				break;
			case 0x1B25E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B25E");
				break;
			case 0x1B25F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B25F");
				break;
			case 0x1B260:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B260");
				break;
			case 0x1B261:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B261");
				break;
			case 0x1B262:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B262");
				break;
			case 0x1B263:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B263");
				break;
			case 0x1B264:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B264");
				break;
			case 0x1B265:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B265");
				break;
			case 0x1B266:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B266");
				break;
			case 0x1B267:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B267");
				break;
			case 0x1B268:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B268");
				break;
			case 0x1B269:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B269");
				break;
			case 0x1B26A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B26A");
				break;
			case 0x1B26B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B26B");
				break;
			case 0x1B26C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B26C");
				break;
			case 0x1B26D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B26D");
				break;
			case 0x1B26E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B26E");
				break;
			case 0x1B26F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B26F");
				break;
			case 0x1B270:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B270");
				break;
			case 0x1B271:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B271");
				break;
			case 0x1B272:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B272");
				break;
			case 0x1B273:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B273");
				break;
			case 0x1B274:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B274");
				break;
			case 0x1B275:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B275");
				break;
			case 0x1B276:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B276");
				break;
			case 0x1B277:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B277");
				break;
			case 0x1B278:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B278");
				break;
			case 0x1B279:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B279");
				break;
			case 0x1B27A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B27A");
				break;
			case 0x1B27B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B27B");
				break;
			case 0x1B27C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B27C");
				break;
			case 0x1B27D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B27D");
				break;
			case 0x1B27E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B27E");
				break;
			case 0x1B27F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B27F");
				break;
			case 0x1B280:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B280");
				break;
			case 0x1B281:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B281");
				break;
			case 0x1B282:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B282");
				break;
			case 0x1B283:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B283");
				break;
			case 0x1B284:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B284");
				break;
			case 0x1B285:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B285");
				break;
			case 0x1B286:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B286");
				break;
			case 0x1B287:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B287");
				break;
			case 0x1B288:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B288");
				break;
			case 0x1B289:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B289");
				break;
			case 0x1B28A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B28A");
				break;
			case 0x1B28B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B28B");
				break;
			case 0x1B28C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B28C");
				break;
			case 0x1B28D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B28D");
				break;
			case 0x1B28E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B28E");
				break;
			case 0x1B28F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B28F");
				break;
			case 0x1B290:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B290");
				break;
			case 0x1B291:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B291");
				break;
			case 0x1B292:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B292");
				break;
			case 0x1B293:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B293");
				break;
			case 0x1B294:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B294");
				break;
			case 0x1B295:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B295");
				break;
			case 0x1B296:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B296");
				break;
			case 0x1B297:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B297");
				break;
			case 0x1B298:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B298");
				break;
			case 0x1B299:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B299");
				break;
			case 0x1B29A:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B29A");
				break;
			case 0x1B29B:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B29B");
				break;
			case 0x1B29C:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B29C");
				break;
			case 0x1B29D:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B29D");
				break;
			case 0x1B29E:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B29E");
				break;
			case 0x1B29F:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B29F");
				break;
			case 0x1B2A0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2A0");
				break;
			case 0x1B2A1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2A1");
				break;
			case 0x1B2A2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2A2");
				break;
			case 0x1B2A3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2A3");
				break;
			case 0x1B2A4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2A4");
				break;
			case 0x1B2A5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2A5");
				break;
			case 0x1B2A6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2A6");
				break;
			case 0x1B2A7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2A7");
				break;
			case 0x1B2A8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2A8");
				break;
			case 0x1B2A9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2A9");
				break;
			case 0x1B2AA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2AA");
				break;
			case 0x1B2AB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2AB");
				break;
			case 0x1B2AC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2AC");
				break;
			case 0x1B2AD:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2AD");
				break;
			case 0x1B2AE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2AE");
				break;
			case 0x1B2AF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2AF");
				break;
			case 0x1B2B0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2B0");
				break;
			case 0x1B2B1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2B1");
				break;
			case 0x1B2B2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2B2");
				break;
			case 0x1B2B3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2B3");
				break;
			case 0x1B2B4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2B4");
				break;
			case 0x1B2B5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2B5");
				break;
			case 0x1B2B6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2B6");
				break;
			case 0x1B2B7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2B7");
				break;
			case 0x1B2B8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2B8");
				break;
			case 0x1B2B9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2B9");
				break;
			case 0x1B2BA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2BA");
				break;
			case 0x1B2BB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2BB");
				break;
			case 0x1B2BC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2BC");
				break;
			case 0x1B2BD:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2BD");
				break;
			case 0x1B2BE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2BE");
				break;
			case 0x1B2BF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2BF");
				break;
			case 0x1B2C0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2C0");
				break;
			case 0x1B2C1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2C1");
				break;
			case 0x1B2C2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2C2");
				break;
			case 0x1B2C3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2C3");
				break;
			case 0x1B2C4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2C4");
				break;
			case 0x1B2C5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2C5");
				break;
			case 0x1B2C6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2C6");
				break;
			case 0x1B2C7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2C7");
				break;
			case 0x1B2C8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2C8");
				break;
			case 0x1B2C9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2C9");
				break;
			case 0x1B2CA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2CA");
				break;
			case 0x1B2CB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2CB");
				break;
			case 0x1B2CC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2CC");
				break;
			case 0x1B2CD:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2CD");
				break;
			case 0x1B2CE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2CE");
				break;
			case 0x1B2CF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2CF");
				break;
			case 0x1B2D0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2D0");
				break;
			case 0x1B2D1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2D1");
				break;
			case 0x1B2D2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2D2");
				break;
			case 0x1B2D3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2D3");
				break;
			case 0x1B2D4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2D4");
				break;
			case 0x1B2D5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2D5");
				break;
			case 0x1B2D6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2D6");
				break;
			case 0x1B2D7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2D7");
				break;
			case 0x1B2D8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2D8");
				break;
			case 0x1B2D9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2D9");
				break;
			case 0x1B2DA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2DA");
				break;
			case 0x1B2DB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2DB");
				break;
			case 0x1B2DC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2DC");
				break;
			case 0x1B2DD:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2DD");
				break;
			case 0x1B2DE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2DE");
				break;
			case 0x1B2DF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2DF");
				break;
			case 0x1B2E0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2E0");
				break;
			case 0x1B2E1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2E1");
				break;
			case 0x1B2E2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2E2");
				break;
			case 0x1B2E3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2E3");
				break;
			case 0x1B2E4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2E4");
				break;
			case 0x1B2E5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2E5");
				break;
			case 0x1B2E6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2E6");
				break;
			case 0x1B2E7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2E7");
				break;
			case 0x1B2E8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2E8");
				break;
			case 0x1B2E9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2E9");
				break;
			case 0x1B2EA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2EA");
				break;
			case 0x1B2EB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2EB");
				break;
			case 0x1B2EC:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2EC");
				break;
			case 0x1B2ED:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2ED");
				break;
			case 0x1B2EE:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2EE");
				break;
			case 0x1B2EF:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2EF");
				break;
			case 0x1B2F0:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2F0");
				break;
			case 0x1B2F1:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2F1");
				break;
			case 0x1B2F2:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2F2");
				break;
			case 0x1B2F3:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2F3");
				break;
			case 0x1B2F4:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2F4");
				break;
			case 0x1B2F5:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2F5");
				break;
			case 0x1B2F6:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2F6");
				break;
			case 0x1B2F7:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2F7");
				break;
			case 0x1B2F8:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2F8");
				break;
			case 0x1B2F9:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2F9");
				break;
			case 0x1B2FA:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2FA");
				break;
			case 0x1B2FB:
				strcpy_s(buf, buf_size, "NUSHU CHARACTER-1B2FB");
				break;
			case 0x1BC00:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER H");
				break;
			case 0x1BC01:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER X");
				break;
			case 0x1BC02:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER P");
				break;
			case 0x1BC03:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER T");
				break;
			case 0x1BC04:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER F");
				break;
			case 0x1BC05:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER K");
				break;
			case 0x1BC06:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER L");
				break;
			case 0x1BC07:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER B");
				break;
			case 0x1BC08:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER D");
				break;
			case 0x1BC09:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER V");
				break;
			case 0x1BC0A:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER G");
				break;
			case 0x1BC0B:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER R");
				break;
			case 0x1BC0C:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER P N");
				break;
			case 0x1BC0D:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER D S");
				break;
			case 0x1BC0E:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER F N");
				break;
			case 0x1BC0F:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER K M");
				break;
			case 0x1BC10:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER R S");
				break;
			case 0x1BC11:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER TH");
				break;
			case 0x1BC12:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER SLOAN DH");
				break;
			case 0x1BC13:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER DH");
				break;
			case 0x1BC14:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER KK");
				break;
			case 0x1BC15:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER SLOAN J");
				break;
			case 0x1BC16:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER HL");
				break;
			case 0x1BC17:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER LH");
				break;
			case 0x1BC18:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER RH");
				break;
			case 0x1BC19:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER M");
				break;
			case 0x1BC1A:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER N");
				break;
			case 0x1BC1B:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER J");
				break;
			case 0x1BC1C:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S");
				break;
			case 0x1BC1D:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER M N");
				break;
			case 0x1BC1E:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER N M");
				break;
			case 0x1BC1F:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER J M");
				break;
			case 0x1BC20:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S J");
				break;
			case 0x1BC21:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER M WITH DOT");
				break;
			case 0x1BC22:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER N WITH DOT");
				break;
			case 0x1BC23:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER J WITH DOT");
				break;
			case 0x1BC24:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER J WITH DOTS INSIDE AND ABOVE");
				break;
			case 0x1BC25:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S WITH DOT");
				break;
			case 0x1BC26:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S WITH DOT BELOW");
				break;
			case 0x1BC27:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER M S");
				break;
			case 0x1BC28:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER N S");
				break;
			case 0x1BC29:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER J S");
				break;
			case 0x1BC2A:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S S");
				break;
			case 0x1BC2B:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER M N S");
				break;
			case 0x1BC2C:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER N M S");
				break;
			case 0x1BC2D:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER J M S");
				break;
			case 0x1BC2E:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S J S");
				break;
			case 0x1BC2F:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER J S WITH DOT");
				break;
			case 0x1BC30:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER J N");
				break;
			case 0x1BC31:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER J N S");
				break;
			case 0x1BC32:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S T");
				break;
			case 0x1BC33:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S T R");
				break;
			case 0x1BC34:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S P");
				break;
			case 0x1BC35:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S P R");
				break;
			case 0x1BC36:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER T S");
				break;
			case 0x1BC37:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER T R S");
				break;
			case 0x1BC38:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER W");
				break;
			case 0x1BC39:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER WH");
				break;
			case 0x1BC3A:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER W R");
				break;
			case 0x1BC3B:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S N");
				break;
			case 0x1BC3C:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S M");
				break;
			case 0x1BC3D:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER K R S");
				break;
			case 0x1BC3E:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER G R S");
				break;
			case 0x1BC3F:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S K");
				break;
			case 0x1BC40:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER S K R");
				break;
			case 0x1BC41:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER A");
				break;
			case 0x1BC42:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER SLOAN OW");
				break;
			case 0x1BC43:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER OA");
				break;
			case 0x1BC44:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER O");
				break;
			case 0x1BC45:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER AOU");
				break;
			case 0x1BC46:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER I");
				break;
			case 0x1BC47:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER E");
				break;
			case 0x1BC48:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER IE");
				break;
			case 0x1BC49:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER SHORT I");
				break;
			case 0x1BC4A:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER UI");
				break;
			case 0x1BC4B:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER EE");
				break;
			case 0x1BC4C:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER SLOAN EH");
				break;
			case 0x1BC4D:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER ROMANIAN I");
				break;
			case 0x1BC4E:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER SLOAN EE");
				break;
			case 0x1BC4F:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER LONG I");
				break;
			case 0x1BC50:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER YE");
				break;
			case 0x1BC51:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER U");
				break;
			case 0x1BC52:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER EU");
				break;
			case 0x1BC53:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER XW");
				break;
			case 0x1BC54:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER U N");
				break;
			case 0x1BC55:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER LONG U");
				break;
			case 0x1BC56:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER ROMANIAN U");
				break;
			case 0x1BC57:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER UH");
				break;
			case 0x1BC58:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER SLOAN U");
				break;
			case 0x1BC59:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER OOH");
				break;
			case 0x1BC5A:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER OW");
				break;
			case 0x1BC5B:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER OU");
				break;
			case 0x1BC5C:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER WA");
				break;
			case 0x1BC5D:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER WO");
				break;
			case 0x1BC5E:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER WI");
				break;
			case 0x1BC5F:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER WEI");
				break;
			case 0x1BC60:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER WOW");
				break;
			case 0x1BC61:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER NASAL U");
				break;
			case 0x1BC62:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER NASAL O");
				break;
			case 0x1BC63:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER NASAL I");
				break;
			case 0x1BC64:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER NASAL A");
				break;
			case 0x1BC65:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER PERNIN AN");
				break;
			case 0x1BC66:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER PERNIN AM");
				break;
			case 0x1BC67:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER SLOAN EN");
				break;
			case 0x1BC68:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER SLOAN AN");
				break;
			case 0x1BC69:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER SLOAN ON");
				break;
			case 0x1BC6A:
				strcpy_s(buf, buf_size, "DUPLOYAN LETTER VOCALIC M");
				break;
			case 0x1BC70:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LEFT HORIZONTAL SECANT");
				break;
			case 0x1BC71:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX MID HORIZONTAL SECANT");
				break;
			case 0x1BC72:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX RIGHT HORIZONTAL SECANT");
				break;
			case 0x1BC73:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW VERTICAL SECANT");
				break;
			case 0x1BC74:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX MID VERTICAL SECANT");
				break;
			case 0x1BC75:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX HIGH VERTICAL SECANT");
				break;
			case 0x1BC76:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX ATTACHED SECANT");
				break;
			case 0x1BC77:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX ATTACHED LEFT-TO-RIGHT SECANT");
				break;
			case 0x1BC78:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX ATTACHED TANGENT");
				break;
			case 0x1BC79:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX ATTACHED TAIL");
				break;
			case 0x1BC7A:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX ATTACHED E HOOK");
				break;
			case 0x1BC7B:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX ATTACHED I HOOK");
				break;
			case 0x1BC7C:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX ATTACHED TANGENT HOOK");
				break;
			case 0x1BC80:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX HIGH ACUTE");
				break;
			case 0x1BC81:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX HIGH TIGHT ACUTE");
				break;
			case 0x1BC82:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX HIGH GRAVE");
				break;
			case 0x1BC83:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX HIGH LONG GRAVE");
				break;
			case 0x1BC84:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX HIGH DOT");
				break;
			case 0x1BC85:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX HIGH CIRCLE");
				break;
			case 0x1BC86:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX HIGH LINE");
				break;
			case 0x1BC87:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX HIGH WAVE");
				break;
			case 0x1BC88:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX HIGH VERTICAL");
				break;
			case 0x1BC90:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW ACUTE");
				break;
			case 0x1BC91:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW TIGHT ACUTE");
				break;
			case 0x1BC92:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW GRAVE");
				break;
			case 0x1BC93:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW LONG GRAVE");
				break;
			case 0x1BC94:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW DOT");
				break;
			case 0x1BC95:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW CIRCLE");
				break;
			case 0x1BC96:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW LINE");
				break;
			case 0x1BC97:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW WAVE");
				break;
			case 0x1BC98:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW VERTICAL");
				break;
			case 0x1BC99:
				strcpy_s(buf, buf_size, "DUPLOYAN AFFIX LOW ARROW");
				break;
			case 0x1BC9C:
				strcpy_s(buf, buf_size, "DUPLOYAN SIGN O WITH CROSS");
				break;
			case 0x1BC9D:
				strcpy_s(buf, buf_size, "DUPLOYAN THICK LETTER SELECTOR");
				break;
			case 0x1BC9E:
				strcpy_s(buf, buf_size, "DUPLOYAN DOUBLE MARK");
				break;
			case 0x1BC9F:
				strcpy_s(buf, buf_size, "DUPLOYAN PUNCTUATION CHINOOK FULL STOP");
				break;
			case 0x1BCA0:
				strcpy_s(buf, buf_size, "SHORTHAND FORMAT LETTER OVERLAP");
				break;
			case 0x1BCA1:
				strcpy_s(buf, buf_size, "SHORTHAND FORMAT CONTINUING OVERLAP");
				break;
			case 0x1BCA2:
				strcpy_s(buf, buf_size, "SHORTHAND FORMAT DOWN STEP");
				break;
			case 0x1BCA3:
				strcpy_s(buf, buf_size, "SHORTHAND FORMAT UP STEP");
				break;
			case 0x1D000:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PSILI");
				break;
			case 0x1D001:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DASEIA");
				break;
			case 0x1D002:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PERISPOMENI");
				break;
			case 0x1D003:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL OXEIA EKFONITIKON");
				break;
			case 0x1D004:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL OXEIA DIPLI");
				break;
			case 0x1D005:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL VAREIA EKFONITIKON");
				break;
			case 0x1D006:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL VAREIA DIPLI");
				break;
			case 0x1D007:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KATHISTI");
				break;
			case 0x1D008:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SYRMATIKI");
				break;
			case 0x1D009:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PARAKLITIKI");
				break;
			case 0x1D00A:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YPOKRISIS");
				break;
			case 0x1D00B:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YPOKRISIS DIPLI");
				break;
			case 0x1D00C:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KREMASTI");
				break;
			case 0x1D00D:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APESO EKFONITIKON");
				break;
			case 0x1D00E:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL EXO EKFONITIKON");
				break;
			case 0x1D00F:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TELEIA");
				break;
			case 0x1D010:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KENTIMATA");
				break;
			case 0x1D011:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APOSTROFOS");
				break;
			case 0x1D012:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APOSTROFOS DIPLI");
				break;
			case 0x1D013:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SYNEVMA");
				break;
			case 0x1D014:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL THITA");
				break;
			case 0x1D015:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL OLIGON ARCHAION");
				break;
			case 0x1D016:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GORGON ARCHAION");
				break;
			case 0x1D017:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PSILON");
				break;
			case 0x1D018:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL CHAMILON");
				break;
			case 0x1D019:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL VATHY");
				break;
			case 0x1D01A:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ISON ARCHAION");
				break;
			case 0x1D01B:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KENTIMA ARCHAION");
				break;
			case 0x1D01C:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KENTIMATA ARCHAION");
				break;
			case 0x1D01D:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SAXIMATA");
				break;
			case 0x1D01E:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PARICHON");
				break;
			case 0x1D01F:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL STAVROS APODEXIA");
				break;
			case 0x1D020:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL OXEIAI ARCHAION");
				break;
			case 0x1D021:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL VAREIAI ARCHAION");
				break;
			case 0x1D022:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APODERMA ARCHAION");
				break;
			case 0x1D023:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APOTHEMA");
				break;
			case 0x1D024:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KLASMA");
				break;
			case 0x1D025:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL REVMA");
				break;
			case 0x1D026:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PIASMA ARCHAION");
				break;
			case 0x1D027:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TINAGMA");
				break;
			case 0x1D028:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ANATRICHISMA");
				break;
			case 0x1D029:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SEISMA");
				break;
			case 0x1D02A:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SYNAGMA ARCHAION");
				break;
			case 0x1D02B:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SYNAGMA META STAVROU");
				break;
			case 0x1D02C:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL OYRANISMA ARCHAION");
				break;
			case 0x1D02D:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL THEMA");
				break;
			case 0x1D02E:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL LEMOI");
				break;
			case 0x1D02F:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DYO");
				break;
			case 0x1D030:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TRIA");
				break;
			case 0x1D031:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TESSERA");
				break;
			case 0x1D032:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KRATIMATA");
				break;
			case 0x1D033:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APESO EXO NEO");
				break;
			case 0x1D034:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION");
				break;
			case 0x1D035:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL IMIFTHORA");
				break;
			case 0x1D036:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TROMIKON ARCHAION");
				break;
			case 0x1D037:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KATAVA TROMIKON");
				break;
			case 0x1D038:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PELASTON");
				break;
			case 0x1D039:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PSIFISTON");
				break;
			case 0x1D03A:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KONTEVMA");
				break;
			case 0x1D03B:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL CHOREVMA ARCHAION");
				break;
			case 0x1D03C:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL RAPISMA");
				break;
			case 0x1D03D:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PARAKALESMA ARCHAION");
				break;
			case 0x1D03E:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PARAKLITIKI ARCHAION");
				break;
			case 0x1D03F:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ICHADIN");
				break;
			case 0x1D040:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL NANA");
				break;
			case 0x1D041:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PETASMA");
				break;
			case 0x1D042:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KONTEVMA ALLO");
				break;
			case 0x1D043:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TROMIKON ALLO");
				break;
			case 0x1D044:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL STRAGGISMATA");
				break;
			case 0x1D045:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GRONTHISMATA");
				break;
			case 0x1D046:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ISON NEO");
				break;
			case 0x1D047:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL OLIGON NEO");
				break;
			case 0x1D048:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL OXEIA NEO");
				break;
			case 0x1D049:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PETASTI");
				break;
			case 0x1D04A:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KOUFISMA");
				break;
			case 0x1D04B:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PETASTOKOUFISMA");
				break;
			case 0x1D04C:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KRATIMOKOUFISMA");
				break;
			case 0x1D04D:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PELASTON NEO");
				break;
			case 0x1D04E:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KENTIMATA NEO ANO");
				break;
			case 0x1D04F:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KENTIMA NEO ANO");
				break;
			case 0x1D050:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YPSILI");
				break;
			case 0x1D051:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APOSTROFOS NEO");
				break;
			case 0x1D052:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APOSTROFOI SYNDESMOS NEO");
				break;
			case 0x1D053:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YPORROI");
				break;
			case 0x1D054:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KRATIMOYPORROON");
				break;
			case 0x1D055:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ELAFRON");
				break;
			case 0x1D056:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL CHAMILI");
				break;
			case 0x1D057:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MIKRON ISON");
				break;
			case 0x1D058:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL VAREIA NEO");
				break;
			case 0x1D059:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PIASMA NEO");
				break;
			case 0x1D05A:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PSIFISTON NEO");
				break;
			case 0x1D05B:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL OMALON");
				break;
			case 0x1D05C:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ANTIKENOMA");
				break;
			case 0x1D05D:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL LYGISMA");
				break;
			case 0x1D05E:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PARAKLITIKI NEO");
				break;
			case 0x1D05F:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PARAKALESMA NEO");
				break;
			case 0x1D060:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ETERON PARAKALESMA");
				break;
			case 0x1D061:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KYLISMA");
				break;
			case 0x1D062:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ANTIKENOKYLISMA");
				break;
			case 0x1D063:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TROMIKON NEO");
				break;
			case 0x1D064:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL EKSTREPTON");
				break;
			case 0x1D065:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SYNAGMA NEO");
				break;
			case 0x1D066:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SYRMA");
				break;
			case 0x1D067:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL CHOREVMA NEO");
				break;
			case 0x1D068:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL EPEGERMA");
				break;
			case 0x1D069:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SEISMA NEO");
				break;
			case 0x1D06A:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL XIRON KLASMA");
				break;
			case 0x1D06B:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TROMIKOPSIFISTON");
				break;
			case 0x1D06C:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PSIFISTOLYGISMA");
				break;
			case 0x1D06D:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TROMIKOLYGISMA");
				break;
			case 0x1D06E:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TROMIKOPARAKALESMA");
				break;
			case 0x1D06F:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PSIFISTOPARAKALESMA");
				break;
			case 0x1D070:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TROMIKOSYNAGMA");
				break;
			case 0x1D071:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL PSIFISTOSYNAGMA");
				break;
			case 0x1D072:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GORGOSYNTHETON");
				break;
			case 0x1D073:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ARGOSYNTHETON");
				break;
			case 0x1D074:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ETERON ARGOSYNTHETON");
				break;
			case 0x1D075:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL OYRANISMA NEO");
				break;
			case 0x1D076:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL THEMATISMOS ESO");
				break;
			case 0x1D077:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL THEMATISMOS EXO");
				break;
			case 0x1D078:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL THEMA APLOUN");
				break;
			case 0x1D079:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL THES KAI APOTHES");
				break;
			case 0x1D07A:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KATAVASMA");
				break;
			case 0x1D07B:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ENDOFONON");
				break;
			case 0x1D07C:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YFEN KATO");
				break;
			case 0x1D07D:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YFEN ANO");
				break;
			case 0x1D07E:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL STAVROS");
				break;
			case 0x1D07F:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KLASMA ANO");
				break;
			case 0x1D080:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIPLI ARCHAION");
				break;
			case 0x1D081:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KRATIMA ARCHAION");
				break;
			case 0x1D082:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KRATIMA ALLO");
				break;
			case 0x1D083:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KRATIMA NEO");
				break;
			case 0x1D084:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APODERMA NEO");
				break;
			case 0x1D085:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APLI");
				break;
			case 0x1D086:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIPLI");
				break;
			case 0x1D087:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TRIPLI");
				break;
			case 0x1D088:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TETRAPLI");
				break;
			case 0x1D089:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KORONIS");
				break;
			case 0x1D08A:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL LEIMMA ENOS CHRONOU");
				break;
			case 0x1D08B:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL LEIMMA DYO CHRONON");
				break;
			case 0x1D08C:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL LEIMMA TRION CHRONON");
				break;
			case 0x1D08D:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL LEIMMA TESSARON CHRONON");
				break;
			case 0x1D08E:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL LEIMMA IMISEOS CHRONOU");
				break;
			case 0x1D08F:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GORGON NEO ANO");
				break;
			case 0x1D090:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON ARISTERA");
				break;
			case 0x1D091:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON DEXIA");
				break;
			case 0x1D092:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIGORGON");
				break;
			case 0x1D093:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA KATO");
				break;
			case 0x1D094:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA ANO");
				break;
			case 0x1D095:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON DEXIA");
				break;
			case 0x1D096:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL TRIGORGON");
				break;
			case 0x1D097:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ARGON");
				break;
			case 0x1D098:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL IMIDIARGON");
				break;
			case 0x1D099:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIARGON");
				break;
			case 0x1D09A:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL AGOGI POLI ARGI");
				break;
			case 0x1D09B:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL AGOGI ARGOTERI");
				break;
			case 0x1D09C:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL AGOGI ARGI");
				break;
			case 0x1D09D:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL AGOGI METRIA");
				break;
			case 0x1D09E:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL AGOGI MESI");
				break;
			case 0x1D09F:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL AGOGI GORGI");
				break;
			case 0x1D0A0:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL AGOGI GORGOTERI");
				break;
			case 0x1D0A1:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL AGOGI POLI GORGI");
				break;
			case 0x1D0A2:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOS ICHOS");
				break;
			case 0x1D0A3:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI PROTOS ICHOS");
				break;
			case 0x1D0A4:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA DEYTEROS ICHOS");
				break;
			case 0x1D0A5:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI DEYTEROS ICHOS");
				break;
			case 0x1D0A6:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA TRITOS ICHOS");
				break;
			case 0x1D0A7:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA TRIFONIAS");
				break;
			case 0x1D0A8:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS ICHOS");
				break;
			case 0x1D0A9:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS LEGETOS ICHOS");
				break;
			case 0x1D0AA:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA LEGETOS ICHOS");
				break;
			case 0x1D0AB:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS ICHOS");
				break;
			case 0x1D0AC:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ISAKIA TELOUS ICHIMATOS");
				break;
			case 0x1D0AD:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL APOSTROFOI TELOUS ICHIMATOS");
				break;
			case 0x1D0AE:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FANEROSIS TETRAFONIAS");
				break;
			case 0x1D0AF:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FANEROSIS MONOFONIAS");
				break;
			case 0x1D0B0:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FANEROSIS DIFONIAS");
				break;
			case 0x1D0B1:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA VARYS ICHOS");
				break;
			case 0x1D0B2:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOVARYS ICHOS");
				break;
			case 0x1D0B3:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS TETARTOS ICHOS");
				break;
			case 0x1D0B4:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GORTHMIKON N APLOUN");
				break;
			case 0x1D0B5:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GORTHMIKON N DIPLOUN");
				break;
			case 0x1D0B6:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ENARXIS KAI FTHORA VOU");
				break;
			case 0x1D0B7:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL IMIFONON");
				break;
			case 0x1D0B8:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL IMIFTHORON");
				break;
			case 0x1D0B9:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION DEYTEROU ICHOU");
				break;
			case 0x1D0BA:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI PA");
				break;
			case 0x1D0BB:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NANA");
				break;
			case 0x1D0BC:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA NAOS ICHOS");
				break;
			case 0x1D0BD:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI DI");
				break;
			case 0x1D0BE:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON DIATONON DI");
				break;
			case 0x1D0BF:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI KE");
				break;
			case 0x1D0C0:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI ZO");
				break;
			case 0x1D0C1:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI KATO");
				break;
			case 0x1D0C2:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI ANO");
				break;
			case 0x1D0C3:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA DIFONIAS");
				break;
			case 0x1D0C4:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA MONOFONIAS");
				break;
			case 0x1D0C5:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FHTORA SKLIRON CHROMA VASIS");
				break;
			case 0x1D0C6:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON CHROMA SYNAFI");
				break;
			case 0x1D0C7:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA NENANO");
				break;
			case 0x1D0C8:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL CHROA ZYGOS");
				break;
			case 0x1D0C9:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL CHROA KLITON");
				break;
			case 0x1D0CA:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL CHROA SPATHI");
				break;
			case 0x1D0CB:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA I YFESIS TETARTIMORION");
				break;
			case 0x1D0CC:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL FTHORA ENARMONIOS ANTIFONIA");
				break;
			case 0x1D0CD:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YFESIS TRITIMORION");
				break;
			case 0x1D0CE:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIESIS TRITIMORION");
				break;
			case 0x1D0CF:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIESIS TETARTIMORION");
				break;
			case 0x1D0D0:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIESIS APLI DYO DODEKATA");
				break;
			case 0x1D0D1:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIESIS MONOGRAMMOS TESSERA DODEKATA");
				break;
			case 0x1D0D2:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIESIS DIGRAMMOS EX DODEKATA");
				break;
			case 0x1D0D3:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIESIS TRIGRAMMOS OKTO DODEKATA");
				break;
			case 0x1D0D4:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YFESIS APLI DYO DODEKATA");
				break;
			case 0x1D0D5:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YFESIS MONOGRAMMOS TESSERA DODEKATA");
				break;
			case 0x1D0D6:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YFESIS DIGRAMMOS EX DODEKATA");
				break;
			case 0x1D0D7:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL YFESIS TRIGRAMMOS OKTO DODEKATA");
				break;
			case 0x1D0D8:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GENIKI DIESIS");
				break;
			case 0x1D0D9:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GENIKI YFESIS");
				break;
			case 0x1D0DA:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MIKRI");
				break;
			case 0x1D0DB:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MEGALI");
				break;
			case 0x1D0DC:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIASTOLI DIPLI");
				break;
			case 0x1D0DD:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIASTOLI THESEOS");
				break;
			case 0x1D0DE:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS");
				break;
			case 0x1D0DF:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS DISIMOU");
				break;
			case 0x1D0E0:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TRISIMOU");
				break;
			case 0x1D0E1:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TETRASIMOU");
				break;
			case 0x1D0E2:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS");
				break;
			case 0x1D0E3:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS DISIMOU");
				break;
			case 0x1D0E4:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TRISIMOU");
				break;
			case 0x1D0E5:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS TETRASIMOU");
				break;
			case 0x1D0E6:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIGRAMMA GG");
				break;
			case 0x1D0E7:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL DIFTOGGOS OU");
				break;
			case 0x1D0E8:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL STIGMA");
				break;
			case 0x1D0E9:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ARKTIKO PA");
				break;
			case 0x1D0EA:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ARKTIKO VOU");
				break;
			case 0x1D0EB:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ARKTIKO GA");
				break;
			case 0x1D0EC:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ARKTIKO DI");
				break;
			case 0x1D0ED:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ARKTIKO KE");
				break;
			case 0x1D0EE:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ARKTIKO ZO");
				break;
			case 0x1D0EF:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL ARKTIKO NI");
				break;
			case 0x1D0F0:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KENTIMATA NEO MESO");
				break;
			case 0x1D0F1:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KENTIMA NEO MESO");
				break;
			case 0x1D0F2:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KENTIMATA NEO KATO");
				break;
			case 0x1D0F3:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KENTIMA NEO KATO");
				break;
			case 0x1D0F4:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL KLASMA KATO");
				break;
			case 0x1D0F5:
				strcpy_s(buf, buf_size, "BYZANTINE MUSICAL SYMBOL GORGON NEO KATO");
				break;
			case 0x1D100:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SINGLE BARLINE");
				break;
			case 0x1D101:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DOUBLE BARLINE");
				break;
			case 0x1D102:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FINAL BARLINE");
				break;
			case 0x1D103:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL REVERSE FINAL BARLINE");
				break;
			case 0x1D104:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DASHED BARLINE");
				break;
			case 0x1D105:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SHORT BARLINE");
				break;
			case 0x1D106:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL LEFT REPEAT SIGN");
				break;
			case 0x1D107:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL RIGHT REPEAT SIGN");
				break;
			case 0x1D108:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL REPEAT DOTS");
				break;
			case 0x1D109:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DAL SEGNO");
				break;
			case 0x1D10A:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DA CAPO");
				break;
			case 0x1D10B:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SEGNO");
				break;
			case 0x1D10C:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL CODA");
				break;
			case 0x1D10D:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL REPEATED FIGURE-1");
				break;
			case 0x1D10E:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL REPEATED FIGURE-2");
				break;
			case 0x1D10F:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL REPEATED FIGURE-3");
				break;
			case 0x1D110:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FERMATA");
				break;
			case 0x1D111:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FERMATA BELOW");
				break;
			case 0x1D112:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL BREATH MARK");
				break;
			case 0x1D113:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL CAESURA");
				break;
			case 0x1D114:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL BRACE");
				break;
			case 0x1D115:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL BRACKET");
				break;
			case 0x1D116:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ONE-LINE STAFF");
				break;
			case 0x1D117:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TWO-LINE STAFF");
				break;
			case 0x1D118:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL THREE-LINE STAFF");
				break;
			case 0x1D119:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FOUR-LINE STAFF");
				break;
			case 0x1D11A:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FIVE-LINE STAFF");
				break;
			case 0x1D11B:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SIX-LINE STAFF");
				break;
			case 0x1D11C:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SIX-STRING FRETBOARD");
				break;
			case 0x1D11D:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FOUR-STRING FRETBOARD");
				break;
			case 0x1D11E:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL G CLEF");
				break;
			case 0x1D11F:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL G CLEF OTTAVA ALTA");
				break;
			case 0x1D120:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL G CLEF OTTAVA BASSA");
				break;
			case 0x1D121:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL C CLEF");
				break;
			case 0x1D122:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL F CLEF");
				break;
			case 0x1D123:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL F CLEF OTTAVA ALTA");
				break;
			case 0x1D124:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL F CLEF OTTAVA BASSA");
				break;
			case 0x1D125:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DRUM CLEF-1");
				break;
			case 0x1D126:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DRUM CLEF-2");
				break;
			case 0x1D129:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL MULTIPLE MEASURE REST");
				break;
			case 0x1D12A:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DOUBLE SHARP");
				break;
			case 0x1D12B:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DOUBLE FLAT");
				break;
			case 0x1D12C:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FLAT UP");
				break;
			case 0x1D12D:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FLAT DOWN");
				break;
			case 0x1D12E:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL NATURAL UP");
				break;
			case 0x1D12F:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL NATURAL DOWN");
				break;
			case 0x1D130:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SHARP UP");
				break;
			case 0x1D131:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SHARP DOWN");
				break;
			case 0x1D132:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL QUARTER TONE SHARP");
				break;
			case 0x1D133:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL QUARTER TONE FLAT");
				break;
			case 0x1D134:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMMON TIME");
				break;
			case 0x1D135:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL CUT TIME");
				break;
			case 0x1D136:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL OTTAVA ALTA");
				break;
			case 0x1D137:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL OTTAVA BASSA");
				break;
			case 0x1D138:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL QUINDICESIMA ALTA");
				break;
			case 0x1D139:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL QUINDICESIMA BASSA");
				break;
			case 0x1D13A:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL MULTI REST");
				break;
			case 0x1D13B:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL WHOLE REST");
				break;
			case 0x1D13C:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL HALF REST");
				break;
			case 0x1D13D:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL QUARTER REST");
				break;
			case 0x1D13E:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL EIGHTH REST");
				break;
			case 0x1D13F:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SIXTEENTH REST");
				break;
			case 0x1D140:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL THIRTY-SECOND REST");
				break;
			case 0x1D141:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SIXTY-FOURTH REST");
				break;
			case 0x1D142:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH REST");
				break;
			case 0x1D143:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL X NOTEHEAD");
				break;
			case 0x1D144:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL PLUS NOTEHEAD");
				break;
			case 0x1D145:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL CIRCLE X NOTEHEAD");
				break;
			case 0x1D146:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SQUARE NOTEHEAD WHITE");
				break;
			case 0x1D147:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SQUARE NOTEHEAD BLACK");
				break;
			case 0x1D148:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE NOTEHEAD UP WHITE");
				break;
			case 0x1D149:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE NOTEHEAD UP BLACK");
				break;
			case 0x1D14A:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT WHITE");
				break;
			case 0x1D14B:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE NOTEHEAD LEFT BLACK");
				break;
			case 0x1D14C:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT WHITE");
				break;
			case 0x1D14D:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE NOTEHEAD RIGHT BLACK");
				break;
			case 0x1D14E:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN WHITE");
				break;
			case 0x1D14F:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE NOTEHEAD DOWN BLACK");
				break;
			case 0x1D150:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT WHITE");
				break;
			case 0x1D151:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE NOTEHEAD UP RIGHT BLACK");
				break;
			case 0x1D152:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL MOON NOTEHEAD WHITE");
				break;
			case 0x1D153:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL MOON NOTEHEAD BLACK");
				break;
			case 0x1D154:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN WHITE");
				break;
			case 0x1D155:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TRIANGLE-ROUND NOTEHEAD DOWN BLACK");
				break;
			case 0x1D156:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL PARENTHESIS NOTEHEAD");
				break;
			case 0x1D157:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL VOID NOTEHEAD");
				break;
			case 0x1D158:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL NOTEHEAD BLACK");
				break;
			case 0x1D159:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL NULL NOTEHEAD");
				break;
			case 0x1D15A:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL CLUSTER NOTEHEAD WHITE");
				break;
			case 0x1D15B:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL CLUSTER NOTEHEAD BLACK");
				break;
			case 0x1D15C:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL BREVE");
				break;
			case 0x1D15D:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL WHOLE NOTE");
				break;
			case 0x1D15E:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL HALF NOTE");
				break;
			case 0x1D15F:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL QUARTER NOTE");
				break;
			case 0x1D160:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL EIGHTH NOTE");
				break;
			case 0x1D161:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SIXTEENTH NOTE");
				break;
			case 0x1D162:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL THIRTY-SECOND NOTE");
				break;
			case 0x1D163:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SIXTY-FOURTH NOTE");
				break;
			case 0x1D164:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ONE HUNDRED TWENTY-EIGHTH NOTE");
				break;
			case 0x1D165:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING STEM");
				break;
			case 0x1D166:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING SPRECHGESANG STEM");
				break;
			case 0x1D167:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING TREMOLO-1");
				break;
			case 0x1D168:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING TREMOLO-2");
				break;
			case 0x1D169:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING TREMOLO-3");
				break;
			case 0x1D16A:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FINGERED TREMOLO-1");
				break;
			case 0x1D16B:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FINGERED TREMOLO-2");
				break;
			case 0x1D16C:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FINGERED TREMOLO-3");
				break;
			case 0x1D16D:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING AUGMENTATION DOT");
				break;
			case 0x1D16E:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING FLAG-1");
				break;
			case 0x1D16F:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING FLAG-2");
				break;
			case 0x1D170:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING FLAG-3");
				break;
			case 0x1D171:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING FLAG-4");
				break;
			case 0x1D172:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING FLAG-5");
				break;
			case 0x1D173:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL BEGIN BEAM");
				break;
			case 0x1D174:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL END BEAM");
				break;
			case 0x1D175:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL BEGIN TIE");
				break;
			case 0x1D176:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL END TIE");
				break;
			case 0x1D177:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL BEGIN SLUR");
				break;
			case 0x1D178:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL END SLUR");
				break;
			case 0x1D179:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL BEGIN PHRASE");
				break;
			case 0x1D17A:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL END PHRASE");
				break;
			case 0x1D17B:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING ACCENT");
				break;
			case 0x1D17C:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING STACCATO");
				break;
			case 0x1D17D:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING TENUTO");
				break;
			case 0x1D17E:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING STACCATISSIMO");
				break;
			case 0x1D17F:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING MARCATO");
				break;
			case 0x1D180:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING MARCATO-STACCATO");
				break;
			case 0x1D181:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING ACCENT-STACCATO");
				break;
			case 0x1D182:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING LOURE");
				break;
			case 0x1D183:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ARPEGGIATO UP");
				break;
			case 0x1D184:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ARPEGGIATO DOWN");
				break;
			case 0x1D185:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING DOIT");
				break;
			case 0x1D186:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING RIP");
				break;
			case 0x1D187:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING FLIP");
				break;
			case 0x1D188:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING SMEAR");
				break;
			case 0x1D189:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING BEND");
				break;
			case 0x1D18A:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING DOUBLE TONGUE");
				break;
			case 0x1D18B:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING TRIPLE TONGUE");
				break;
			case 0x1D18C:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL RINFORZANDO");
				break;
			case 0x1D18D:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SUBITO");
				break;
			case 0x1D18E:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL Z");
				break;
			case 0x1D18F:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL PIANO");
				break;
			case 0x1D190:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL MEZZO");
				break;
			case 0x1D191:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FORTE");
				break;
			case 0x1D192:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL CRESCENDO");
				break;
			case 0x1D193:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DECRESCENDO");
				break;
			case 0x1D194:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL GRACE NOTE SLASH");
				break;
			case 0x1D195:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL GRACE NOTE NO SLASH");
				break;
			case 0x1D196:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TR");
				break;
			case 0x1D197:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TURN");
				break;
			case 0x1D198:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL INVERTED TURN");
				break;
			case 0x1D199:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TURN SLASH");
				break;
			case 0x1D19A:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TURN UP");
				break;
			case 0x1D19B:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-1");
				break;
			case 0x1D19C:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-2");
				break;
			case 0x1D19D:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-3");
				break;
			case 0x1D19E:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-4");
				break;
			case 0x1D19F:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-5");
				break;
			case 0x1D1A0:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-6");
				break;
			case 0x1D1A1:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-7");
				break;
			case 0x1D1A2:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-8");
				break;
			case 0x1D1A3:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-9");
				break;
			case 0x1D1A4:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-10");
				break;
			case 0x1D1A5:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL ORNAMENT STROKE-11");
				break;
			case 0x1D1A6:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL HAUPTSTIMME");
				break;
			case 0x1D1A7:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL NEBENSTIMME");
				break;
			case 0x1D1A8:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL END OF STIMME");
				break;
			case 0x1D1A9:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DEGREE SLASH");
				break;
			case 0x1D1AA:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING DOWN BOW");
				break;
			case 0x1D1AB:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING UP BOW");
				break;
			case 0x1D1AC:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING HARMONIC");
				break;
			case 0x1D1AD:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL COMBINING SNAP PIZZICATO");
				break;
			case 0x1D1AE:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL PEDAL MARK");
				break;
			case 0x1D1AF:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL PEDAL UP MARK");
				break;
			case 0x1D1B0:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL HALF PEDAL MARK");
				break;
			case 0x1D1B1:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL GLISSANDO UP");
				break;
			case 0x1D1B2:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL GLISSANDO DOWN");
				break;
			case 0x1D1B3:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL WITH FINGERNAILS");
				break;
			case 0x1D1B4:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DAMP");
				break;
			case 0x1D1B5:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL DAMP ALL");
				break;
			case 0x1D1B6:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL MAXIMA");
				break;
			case 0x1D1B7:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL LONGA");
				break;
			case 0x1D1B8:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL BREVIS");
				break;
			case 0x1D1B9:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SEMIBREVIS WHITE");
				break;
			case 0x1D1BA:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SEMIBREVIS BLACK");
				break;
			case 0x1D1BB:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL MINIMA");
				break;
			case 0x1D1BC:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL MINIMA BLACK");
				break;
			case 0x1D1BD:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SEMIMINIMA WHITE");
				break;
			case 0x1D1BE:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SEMIMINIMA BLACK");
				break;
			case 0x1D1BF:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FUSA WHITE");
				break;
			case 0x1D1C0:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL FUSA BLACK");
				break;
			case 0x1D1C1:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL LONGA PERFECTA REST");
				break;
			case 0x1D1C2:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL LONGA IMPERFECTA REST");
				break;
			case 0x1D1C3:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL BREVIS REST");
				break;
			case 0x1D1C4:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SEMIBREVIS REST");
				break;
			case 0x1D1C5:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL MINIMA REST");
				break;
			case 0x1D1C6:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SEMIMINIMA REST");
				break;
			case 0x1D1C7:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA");
				break;
			case 0x1D1C8:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE IMPERFECTA");
				break;
			case 0x1D1C9:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TEMPUS PERFECTUM CUM PROLATIONE PERFECTA DIMINUTION-1");
				break;
			case 0x1D1CA:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE PERFECTA");
				break;
			case 0x1D1CB:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA");
				break;
			case 0x1D1CC:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-1");
				break;
			case 0x1D1CD:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-2");
				break;
			case 0x1D1CE:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TEMPUS IMPERFECTUM CUM PROLATIONE IMPERFECTA DIMINUTION-3");
				break;
			case 0x1D1CF:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL CROIX");
				break;
			case 0x1D1D0:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL GREGORIAN C CLEF");
				break;
			case 0x1D1D1:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL GREGORIAN F CLEF");
				break;
			case 0x1D1D2:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SQUARE B");
				break;
			case 0x1D1D3:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL VIRGA");
				break;
			case 0x1D1D4:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL PODATUS");
				break;
			case 0x1D1D5:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL CLIVIS");
				break;
			case 0x1D1D6:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SCANDICUS");
				break;
			case 0x1D1D7:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL CLIMACUS");
				break;
			case 0x1D1D8:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TORCULUS");
				break;
			case 0x1D1D9:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL PORRECTUS");
				break;
			case 0x1D1DA:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL PORRECTUS FLEXUS");
				break;
			case 0x1D1DB:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL SCANDICUS FLEXUS");
				break;
			case 0x1D1DC:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL TORCULUS RESUPINUS");
				break;
			case 0x1D1DD:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL PES SUBPUNCTIS");
				break;
			case 0x1D1DE:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN C CLEF");
				break;
			case 0x1D1DF:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN END OF PIECE");
				break;
			case 0x1D1E0:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN FINAL NOTE");
				break;
			case 0x1D1E1:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN RECITATIVE MARK");
				break;
			case 0x1D1E2:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN WHOLE NOTE");
				break;
			case 0x1D1E3:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN HALF NOTE");
				break;
			case 0x1D1E4:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM DOWN");
				break;
			case 0x1D1E5:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN QUARTER NOTE STEM UP");
				break;
			case 0x1D1E6:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM DOWN");
				break;
			case 0x1D1E7:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN EIGHTH NOTE STEM UP");
				break;
			case 0x1D1E8:
				strcpy_s(buf, buf_size, "MUSICAL SYMBOL KIEVAN FLAT SIGN");
				break;
			case 0x1D200:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-1");
				break;
			case 0x1D201:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-2");
				break;
			case 0x1D202:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-3");
				break;
			case 0x1D203:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-4");
				break;
			case 0x1D204:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-5");
				break;
			case 0x1D205:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-6");
				break;
			case 0x1D206:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-7");
				break;
			case 0x1D207:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-8");
				break;
			case 0x1D208:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-9");
				break;
			case 0x1D209:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-10");
				break;
			case 0x1D20A:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-11");
				break;
			case 0x1D20B:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-12");
				break;
			case 0x1D20C:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-13");
				break;
			case 0x1D20D:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-14");
				break;
			case 0x1D20E:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-15");
				break;
			case 0x1D20F:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-16");
				break;
			case 0x1D210:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-17");
				break;
			case 0x1D211:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-18");
				break;
			case 0x1D212:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-19");
				break;
			case 0x1D213:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-20");
				break;
			case 0x1D214:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-21");
				break;
			case 0x1D215:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-22");
				break;
			case 0x1D216:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-23");
				break;
			case 0x1D217:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-24");
				break;
			case 0x1D218:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-50");
				break;
			case 0x1D219:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-51");
				break;
			case 0x1D21A:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-52");
				break;
			case 0x1D21B:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-53");
				break;
			case 0x1D21C:
				strcpy_s(buf, buf_size, "GREEK VOCAL NOTATION SYMBOL-54");
				break;
			case 0x1D21D:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-1");
				break;
			case 0x1D21E:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-2");
				break;
			case 0x1D21F:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-4");
				break;
			case 0x1D220:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-5");
				break;
			case 0x1D221:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-7");
				break;
			case 0x1D222:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-8");
				break;
			case 0x1D223:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-11");
				break;
			case 0x1D224:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-12");
				break;
			case 0x1D225:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-13");
				break;
			case 0x1D226:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-14");
				break;
			case 0x1D227:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-17");
				break;
			case 0x1D228:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-18");
				break;
			case 0x1D229:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-19");
				break;
			case 0x1D22A:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-23");
				break;
			case 0x1D22B:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-24");
				break;
			case 0x1D22C:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-25");
				break;
			case 0x1D22D:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-26");
				break;
			case 0x1D22E:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-27");
				break;
			case 0x1D22F:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-29");
				break;
			case 0x1D230:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-30");
				break;
			case 0x1D231:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-32");
				break;
			case 0x1D232:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-36");
				break;
			case 0x1D233:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-37");
				break;
			case 0x1D234:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-38");
				break;
			case 0x1D235:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-39");
				break;
			case 0x1D236:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-40");
				break;
			case 0x1D237:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-42");
				break;
			case 0x1D238:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-43");
				break;
			case 0x1D239:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-45");
				break;
			case 0x1D23A:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-47");
				break;
			case 0x1D23B:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-48");
				break;
			case 0x1D23C:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-49");
				break;
			case 0x1D23D:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-50");
				break;
			case 0x1D23E:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-51");
				break;
			case 0x1D23F:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-52");
				break;
			case 0x1D240:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-53");
				break;
			case 0x1D241:
				strcpy_s(buf, buf_size, "GREEK INSTRUMENTAL NOTATION SYMBOL-54");
				break;
			case 0x1D242:
				strcpy_s(buf, buf_size, "COMBINING GREEK MUSICAL TRISEME");
				break;
			case 0x1D243:
				strcpy_s(buf, buf_size, "COMBINING GREEK MUSICAL TETRASEME");
				break;
			case 0x1D244:
				strcpy_s(buf, buf_size, "COMBINING GREEK MUSICAL PENTASEME");
				break;
			case 0x1D245:
				strcpy_s(buf, buf_size, "GREEK MUSICAL LEIMMA");
				break;
			case 0x1D2E0:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL ZERO");
				break;
			case 0x1D2E1:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL ONE");
				break;
			case 0x1D2E2:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL TWO");
				break;
			case 0x1D2E3:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL THREE");
				break;
			case 0x1D2E4:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL FOUR");
				break;
			case 0x1D2E5:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL FIVE");
				break;
			case 0x1D2E6:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL SIX");
				break;
			case 0x1D2E7:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL SEVEN");
				break;
			case 0x1D2E8:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL EIGHT");
				break;
			case 0x1D2E9:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL NINE");
				break;
			case 0x1D2EA:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL TEN");
				break;
			case 0x1D2EB:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL ELEVEN");
				break;
			case 0x1D2EC:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL TWELVE");
				break;
			case 0x1D2ED:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL THIRTEEN");
				break;
			case 0x1D2EE:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL FOURTEEN");
				break;
			case 0x1D2EF:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL FIFTEEN");
				break;
			case 0x1D2F0:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL SIXTEEN");
				break;
			case 0x1D2F1:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL SEVENTEEN");
				break;
			case 0x1D2F2:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL EIGHTEEN");
				break;
			case 0x1D2F3:
				strcpy_s(buf, buf_size, "MAYAN NUMERAL NINETEEN");
				break;
			case 0x1D300:
				strcpy_s(buf, buf_size, "MONOGRAM FOR EARTH");
				break;
			case 0x1D301:
				strcpy_s(buf, buf_size, "DIGRAM FOR HEAVENLY EARTH");
				break;
			case 0x1D302:
				strcpy_s(buf, buf_size, "DIGRAM FOR HUMAN EARTH");
				break;
			case 0x1D303:
				strcpy_s(buf, buf_size, "DIGRAM FOR EARTHLY HEAVEN");
				break;
			case 0x1D304:
				strcpy_s(buf, buf_size, "DIGRAM FOR EARTHLY HUMAN");
				break;
			case 0x1D305:
				strcpy_s(buf, buf_size, "DIGRAM FOR EARTH");
				break;
			case 0x1D306:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR CENTRE");
				break;
			case 0x1D307:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR FULL CIRCLE");
				break;
			case 0x1D308:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR MIRED");
				break;
			case 0x1D309:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR BARRIER");
				break;
			case 0x1D30A:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR KEEPING SMALL");
				break;
			case 0x1D30B:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR CONTRARIETY");
				break;
			case 0x1D30C:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR ASCENT");
				break;
			case 0x1D30D:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR OPPOSITION");
				break;
			case 0x1D30E:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR BRANCHING OUT");
				break;
			case 0x1D30F:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR DEFECTIVENESS OR DISTORTION");
				break;
			case 0x1D310:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR DIVERGENCE");
				break;
			case 0x1D311:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR YOUTHFULNESS");
				break;
			case 0x1D312:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR INCREASE");
				break;
			case 0x1D313:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR PENETRATION");
				break;
			case 0x1D314:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR REACH");
				break;
			case 0x1D315:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR CONTACT");
				break;
			case 0x1D316:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR HOLDING BACK");
				break;
			case 0x1D317:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR WAITING");
				break;
			case 0x1D318:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR FOLLOWING");
				break;
			case 0x1D319:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR ADVANCE");
				break;
			case 0x1D31A:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR RELEASE");
				break;
			case 0x1D31B:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR RESISTANCE");
				break;
			case 0x1D31C:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR EASE");
				break;
			case 0x1D31D:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR JOY");
				break;
			case 0x1D31E:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR CONTENTION");
				break;
			case 0x1D31F:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR ENDEAVOUR");
				break;
			case 0x1D320:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR DUTIES");
				break;
			case 0x1D321:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR CHANGE");
				break;
			case 0x1D322:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR DECISIVENESS");
				break;
			case 0x1D323:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR BOLD RESOLUTION");
				break;
			case 0x1D324:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR PACKING");
				break;
			case 0x1D325:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR LEGION");
				break;
			case 0x1D326:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR CLOSENESS");
				break;
			case 0x1D327:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR KINSHIP");
				break;
			case 0x1D328:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR GATHERING");
				break;
			case 0x1D329:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR STRENGTH");
				break;
			case 0x1D32A:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR PURITY");
				break;
			case 0x1D32B:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR FULLNESS");
				break;
			case 0x1D32C:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR RESIDENCE");
				break;
			case 0x1D32D:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR LAW OR MODEL");
				break;
			case 0x1D32E:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR RESPONSE");
				break;
			case 0x1D32F:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR GOING TO MEET");
				break;
			case 0x1D330:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR ENCOUNTERS");
				break;
			case 0x1D331:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR STOVE");
				break;
			case 0x1D332:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR GREATNESS");
				break;
			case 0x1D333:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR ENLARGEMENT");
				break;
			case 0x1D334:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR PATTERN");
				break;
			case 0x1D335:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR RITUAL");
				break;
			case 0x1D336:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR FLIGHT");
				break;
			case 0x1D337:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR VASTNESS OR WASTING");
				break;
			case 0x1D338:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR CONSTANCY");
				break;
			case 0x1D339:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR MEASURE");
				break;
			case 0x1D33A:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR ETERNITY");
				break;
			case 0x1D33B:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR UNITY");
				break;
			case 0x1D33C:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR DIMINISHMENT");
				break;
			case 0x1D33D:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR CLOSED MOUTH");
				break;
			case 0x1D33E:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR GUARDEDNESS");
				break;
			case 0x1D33F:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR GATHERING IN");
				break;
			case 0x1D340:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR MASSING");
				break;
			case 0x1D341:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR ACCUMULATION");
				break;
			case 0x1D342:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR EMBELLISHMENT");
				break;
			case 0x1D343:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR DOUBT");
				break;
			case 0x1D344:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR WATCH");
				break;
			case 0x1D345:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR SINKING");
				break;
			case 0x1D346:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR INNER");
				break;
			case 0x1D347:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR DEPARTURE");
				break;
			case 0x1D348:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR DARKENING");
				break;
			case 0x1D349:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR DIMMING");
				break;
			case 0x1D34A:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR EXHAUSTION");
				break;
			case 0x1D34B:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR SEVERANCE");
				break;
			case 0x1D34C:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR STOPPAGE");
				break;
			case 0x1D34D:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR HARDNESS");
				break;
			case 0x1D34E:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR COMPLETION");
				break;
			case 0x1D34F:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR CLOSURE");
				break;
			case 0x1D350:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR FAILURE");
				break;
			case 0x1D351:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR AGGRAVATION");
				break;
			case 0x1D352:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR COMPLIANCE");
				break;
			case 0x1D353:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR ON THE VERGE");
				break;
			case 0x1D354:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR DIFFICULTIES");
				break;
			case 0x1D355:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR LABOURING");
				break;
			case 0x1D356:
				strcpy_s(buf, buf_size, "TETRAGRAM FOR FOSTERING");
				break;
			case 0x1D360:
				strcpy_s(buf, buf_size, "COUNTING ROD UNIT DIGIT ONE");
				break;
			case 0x1D361:
				strcpy_s(buf, buf_size, "COUNTING ROD UNIT DIGIT TWO");
				break;
			case 0x1D362:
				strcpy_s(buf, buf_size, "COUNTING ROD UNIT DIGIT THREE");
				break;
			case 0x1D363:
				strcpy_s(buf, buf_size, "COUNTING ROD UNIT DIGIT FOUR");
				break;
			case 0x1D364:
				strcpy_s(buf, buf_size, "COUNTING ROD UNIT DIGIT FIVE");
				break;
			case 0x1D365:
				strcpy_s(buf, buf_size, "COUNTING ROD UNIT DIGIT SIX");
				break;
			case 0x1D366:
				strcpy_s(buf, buf_size, "COUNTING ROD UNIT DIGIT SEVEN");
				break;
			case 0x1D367:
				strcpy_s(buf, buf_size, "COUNTING ROD UNIT DIGIT EIGHT");
				break;
			case 0x1D368:
				strcpy_s(buf, buf_size, "COUNTING ROD UNIT DIGIT NINE");
				break;
			case 0x1D369:
				strcpy_s(buf, buf_size, "COUNTING ROD TENS DIGIT ONE");
				break;
			case 0x1D36A:
				strcpy_s(buf, buf_size, "COUNTING ROD TENS DIGIT TWO");
				break;
			case 0x1D36B:
				strcpy_s(buf, buf_size, "COUNTING ROD TENS DIGIT THREE");
				break;
			case 0x1D36C:
				strcpy_s(buf, buf_size, "COUNTING ROD TENS DIGIT FOUR");
				break;
			case 0x1D36D:
				strcpy_s(buf, buf_size, "COUNTING ROD TENS DIGIT FIVE");
				break;
			case 0x1D36E:
				strcpy_s(buf, buf_size, "COUNTING ROD TENS DIGIT SIX");
				break;
			case 0x1D36F:
				strcpy_s(buf, buf_size, "COUNTING ROD TENS DIGIT SEVEN");
				break;
			case 0x1D370:
				strcpy_s(buf, buf_size, "COUNTING ROD TENS DIGIT EIGHT");
				break;
			case 0x1D371:
				strcpy_s(buf, buf_size, "COUNTING ROD TENS DIGIT NINE");
				break;
			case 0x1D372:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TALLY MARK ONE");
				break;
			case 0x1D373:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TALLY MARK TWO");
				break;
			case 0x1D374:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TALLY MARK THREE");
				break;
			case 0x1D375:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TALLY MARK FOUR");
				break;
			case 0x1D376:
				strcpy_s(buf, buf_size, "IDEOGRAPHIC TALLY MARK FIVE");
				break;
			case 0x1D377:
				strcpy_s(buf, buf_size, "TALLY MARK ONE");
				break;
			case 0x1D378:
				strcpy_s(buf, buf_size, "TALLY MARK FIVE");
				break;
			case 0x1D400:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL A");
				break;
			case 0x1D401:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL B");
				break;
			case 0x1D402:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL C");
				break;
			case 0x1D403:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL D");
				break;
			case 0x1D404:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL E");
				break;
			case 0x1D405:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL F");
				break;
			case 0x1D406:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL G");
				break;
			case 0x1D407:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL H");
				break;
			case 0x1D408:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL I");
				break;
			case 0x1D409:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL J");
				break;
			case 0x1D40A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL K");
				break;
			case 0x1D40B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL L");
				break;
			case 0x1D40C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL M");
				break;
			case 0x1D40D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL N");
				break;
			case 0x1D40E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL O");
				break;
			case 0x1D40F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL P");
				break;
			case 0x1D410:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL Q");
				break;
			case 0x1D411:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL R");
				break;
			case 0x1D412:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL S");
				break;
			case 0x1D413:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL T");
				break;
			case 0x1D414:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL U");
				break;
			case 0x1D415:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL V");
				break;
			case 0x1D416:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL W");
				break;
			case 0x1D417:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL X");
				break;
			case 0x1D418:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL Y");
				break;
			case 0x1D419:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL Z");
				break;
			case 0x1D41A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL A");
				break;
			case 0x1D41B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL B");
				break;
			case 0x1D41C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL C");
				break;
			case 0x1D41D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL D");
				break;
			case 0x1D41E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL E");
				break;
			case 0x1D41F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL F");
				break;
			case 0x1D420:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL G");
				break;
			case 0x1D421:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL H");
				break;
			case 0x1D422:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL I");
				break;
			case 0x1D423:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL J");
				break;
			case 0x1D424:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL K");
				break;
			case 0x1D425:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL L");
				break;
			case 0x1D426:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL M");
				break;
			case 0x1D427:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL N");
				break;
			case 0x1D428:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL O");
				break;
			case 0x1D429:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL P");
				break;
			case 0x1D42A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL Q");
				break;
			case 0x1D42B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL R");
				break;
			case 0x1D42C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL S");
				break;
			case 0x1D42D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL T");
				break;
			case 0x1D42E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL U");
				break;
			case 0x1D42F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL V");
				break;
			case 0x1D430:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL W");
				break;
			case 0x1D431:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL X");
				break;
			case 0x1D432:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL Y");
				break;
			case 0x1D433:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL Z");
				break;
			case 0x1D434:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL A");
				break;
			case 0x1D435:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL B");
				break;
			case 0x1D436:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL C");
				break;
			case 0x1D437:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL D");
				break;
			case 0x1D438:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL E");
				break;
			case 0x1D439:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL F");
				break;
			case 0x1D43A:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL G");
				break;
			case 0x1D43B:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL H");
				break;
			case 0x1D43C:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL I");
				break;
			case 0x1D43D:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL J");
				break;
			case 0x1D43E:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL K");
				break;
			case 0x1D43F:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL L");
				break;
			case 0x1D440:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL M");
				break;
			case 0x1D441:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL N");
				break;
			case 0x1D442:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL O");
				break;
			case 0x1D443:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL P");
				break;
			case 0x1D444:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL Q");
				break;
			case 0x1D445:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL R");
				break;
			case 0x1D446:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL S");
				break;
			case 0x1D447:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL T");
				break;
			case 0x1D448:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL U");
				break;
			case 0x1D449:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL V");
				break;
			case 0x1D44A:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL W");
				break;
			case 0x1D44B:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL X");
				break;
			case 0x1D44C:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL Y");
				break;
			case 0x1D44D:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL Z");
				break;
			case 0x1D44E:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL A");
				break;
			case 0x1D44F:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL B");
				break;
			case 0x1D450:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL C");
				break;
			case 0x1D451:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL D");
				break;
			case 0x1D452:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL E");
				break;
			case 0x1D453:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL F");
				break;
			case 0x1D454:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL G");
				break;
			case 0x1D456:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL I");
				break;
			case 0x1D457:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL J");
				break;
			case 0x1D458:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL K");
				break;
			case 0x1D459:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL L");
				break;
			case 0x1D45A:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL M");
				break;
			case 0x1D45B:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL N");
				break;
			case 0x1D45C:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL O");
				break;
			case 0x1D45D:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL P");
				break;
			case 0x1D45E:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL Q");
				break;
			case 0x1D45F:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL R");
				break;
			case 0x1D460:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL S");
				break;
			case 0x1D461:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL T");
				break;
			case 0x1D462:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL U");
				break;
			case 0x1D463:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL V");
				break;
			case 0x1D464:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL W");
				break;
			case 0x1D465:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL X");
				break;
			case 0x1D466:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL Y");
				break;
			case 0x1D467:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL Z");
				break;
			case 0x1D468:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL A");
				break;
			case 0x1D469:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL B");
				break;
			case 0x1D46A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL C");
				break;
			case 0x1D46B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL D");
				break;
			case 0x1D46C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL E");
				break;
			case 0x1D46D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL F");
				break;
			case 0x1D46E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL G");
				break;
			case 0x1D46F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL H");
				break;
			case 0x1D470:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL I");
				break;
			case 0x1D471:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL J");
				break;
			case 0x1D472:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL K");
				break;
			case 0x1D473:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL L");
				break;
			case 0x1D474:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL M");
				break;
			case 0x1D475:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL N");
				break;
			case 0x1D476:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL O");
				break;
			case 0x1D477:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL P");
				break;
			case 0x1D478:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL Q");
				break;
			case 0x1D479:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL R");
				break;
			case 0x1D47A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL S");
				break;
			case 0x1D47B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL T");
				break;
			case 0x1D47C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL U");
				break;
			case 0x1D47D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL V");
				break;
			case 0x1D47E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL W");
				break;
			case 0x1D47F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL X");
				break;
			case 0x1D480:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL Y");
				break;
			case 0x1D481:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL Z");
				break;
			case 0x1D482:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL A");
				break;
			case 0x1D483:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL B");
				break;
			case 0x1D484:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL C");
				break;
			case 0x1D485:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL D");
				break;
			case 0x1D486:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL E");
				break;
			case 0x1D487:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL F");
				break;
			case 0x1D488:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL G");
				break;
			case 0x1D489:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL H");
				break;
			case 0x1D48A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL I");
				break;
			case 0x1D48B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL J");
				break;
			case 0x1D48C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL K");
				break;
			case 0x1D48D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL L");
				break;
			case 0x1D48E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL M");
				break;
			case 0x1D48F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL N");
				break;
			case 0x1D490:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL O");
				break;
			case 0x1D491:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL P");
				break;
			case 0x1D492:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL Q");
				break;
			case 0x1D493:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL R");
				break;
			case 0x1D494:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL S");
				break;
			case 0x1D495:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL T");
				break;
			case 0x1D496:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL U");
				break;
			case 0x1D497:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL V");
				break;
			case 0x1D498:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL W");
				break;
			case 0x1D499:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL X");
				break;
			case 0x1D49A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL Y");
				break;
			case 0x1D49B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL Z");
				break;
			case 0x1D49C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL A");
				break;
			case 0x1D49E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL C");
				break;
			case 0x1D49F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL D");
				break;
			case 0x1D4A2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL G");
				break;
			case 0x1D4A5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL J");
				break;
			case 0x1D4A6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL K");
				break;
			case 0x1D4A9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL N");
				break;
			case 0x1D4AA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL O");
				break;
			case 0x1D4AB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL P");
				break;
			case 0x1D4AC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL Q");
				break;
			case 0x1D4AE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL S");
				break;
			case 0x1D4AF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL T");
				break;
			case 0x1D4B0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL U");
				break;
			case 0x1D4B1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL V");
				break;
			case 0x1D4B2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL W");
				break;
			case 0x1D4B3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL X");
				break;
			case 0x1D4B4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL Y");
				break;
			case 0x1D4B5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT CAPITAL Z");
				break;
			case 0x1D4B6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL A");
				break;
			case 0x1D4B7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL B");
				break;
			case 0x1D4B8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL C");
				break;
			case 0x1D4B9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL D");
				break;
			case 0x1D4BB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL F");
				break;
			case 0x1D4BD:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL H");
				break;
			case 0x1D4BE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL I");
				break;
			case 0x1D4BF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL J");
				break;
			case 0x1D4C0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL K");
				break;
			case 0x1D4C1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL L");
				break;
			case 0x1D4C2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL M");
				break;
			case 0x1D4C3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL N");
				break;
			case 0x1D4C5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL P");
				break;
			case 0x1D4C6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL Q");
				break;
			case 0x1D4C7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL R");
				break;
			case 0x1D4C8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL S");
				break;
			case 0x1D4C9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL T");
				break;
			case 0x1D4CA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL U");
				break;
			case 0x1D4CB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL V");
				break;
			case 0x1D4CC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL W");
				break;
			case 0x1D4CD:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL X");
				break;
			case 0x1D4CE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL Y");
				break;
			case 0x1D4CF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SCRIPT SMALL Z");
				break;
			case 0x1D4D0:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL A");
				break;
			case 0x1D4D1:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL B");
				break;
			case 0x1D4D2:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL C");
				break;
			case 0x1D4D3:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL D");
				break;
			case 0x1D4D4:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL E");
				break;
			case 0x1D4D5:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL F");
				break;
			case 0x1D4D6:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL G");
				break;
			case 0x1D4D7:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL H");
				break;
			case 0x1D4D8:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL I");
				break;
			case 0x1D4D9:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL J");
				break;
			case 0x1D4DA:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL K");
				break;
			case 0x1D4DB:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL L");
				break;
			case 0x1D4DC:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL M");
				break;
			case 0x1D4DD:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL N");
				break;
			case 0x1D4DE:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL O");
				break;
			case 0x1D4DF:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL P");
				break;
			case 0x1D4E0:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL Q");
				break;
			case 0x1D4E1:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL R");
				break;
			case 0x1D4E2:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL S");
				break;
			case 0x1D4E3:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL T");
				break;
			case 0x1D4E4:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL U");
				break;
			case 0x1D4E5:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL V");
				break;
			case 0x1D4E6:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL W");
				break;
			case 0x1D4E7:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL X");
				break;
			case 0x1D4E8:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL Y");
				break;
			case 0x1D4E9:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT CAPITAL Z");
				break;
			case 0x1D4EA:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL A");
				break;
			case 0x1D4EB:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL B");
				break;
			case 0x1D4EC:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL C");
				break;
			case 0x1D4ED:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL D");
				break;
			case 0x1D4EE:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL E");
				break;
			case 0x1D4EF:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL F");
				break;
			case 0x1D4F0:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL G");
				break;
			case 0x1D4F1:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL H");
				break;
			case 0x1D4F2:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL I");
				break;
			case 0x1D4F3:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL J");
				break;
			case 0x1D4F4:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL K");
				break;
			case 0x1D4F5:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL L");
				break;
			case 0x1D4F6:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL M");
				break;
			case 0x1D4F7:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL N");
				break;
			case 0x1D4F8:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL O");
				break;
			case 0x1D4F9:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL P");
				break;
			case 0x1D4FA:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL Q");
				break;
			case 0x1D4FB:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL R");
				break;
			case 0x1D4FC:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL S");
				break;
			case 0x1D4FD:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL T");
				break;
			case 0x1D4FE:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL U");
				break;
			case 0x1D4FF:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL V");
				break;
			case 0x1D500:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL W");
				break;
			case 0x1D501:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL X");
				break;
			case 0x1D502:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL Y");
				break;
			case 0x1D503:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SCRIPT SMALL Z");
				break;
			case 0x1D504:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL A");
				break;
			case 0x1D505:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL B");
				break;
			case 0x1D507:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL D");
				break;
			case 0x1D508:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL E");
				break;
			case 0x1D509:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL F");
				break;
			case 0x1D50A:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL G");
				break;
			case 0x1D50D:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL J");
				break;
			case 0x1D50E:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL K");
				break;
			case 0x1D50F:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL L");
				break;
			case 0x1D510:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL M");
				break;
			case 0x1D511:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL N");
				break;
			case 0x1D512:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL O");
				break;
			case 0x1D513:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL P");
				break;
			case 0x1D514:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL Q");
				break;
			case 0x1D516:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL S");
				break;
			case 0x1D517:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL T");
				break;
			case 0x1D518:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL U");
				break;
			case 0x1D519:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL V");
				break;
			case 0x1D51A:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL W");
				break;
			case 0x1D51B:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL X");
				break;
			case 0x1D51C:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR CAPITAL Y");
				break;
			case 0x1D51E:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL A");
				break;
			case 0x1D51F:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL B");
				break;
			case 0x1D520:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL C");
				break;
			case 0x1D521:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL D");
				break;
			case 0x1D522:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL E");
				break;
			case 0x1D523:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL F");
				break;
			case 0x1D524:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL G");
				break;
			case 0x1D525:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL H");
				break;
			case 0x1D526:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL I");
				break;
			case 0x1D527:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL J");
				break;
			case 0x1D528:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL K");
				break;
			case 0x1D529:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL L");
				break;
			case 0x1D52A:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL M");
				break;
			case 0x1D52B:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL N");
				break;
			case 0x1D52C:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL O");
				break;
			case 0x1D52D:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL P");
				break;
			case 0x1D52E:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL Q");
				break;
			case 0x1D52F:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL R");
				break;
			case 0x1D530:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL S");
				break;
			case 0x1D531:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL T");
				break;
			case 0x1D532:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL U");
				break;
			case 0x1D533:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL V");
				break;
			case 0x1D534:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL W");
				break;
			case 0x1D535:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL X");
				break;
			case 0x1D536:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL Y");
				break;
			case 0x1D537:
				strcpy_s(buf, buf_size, "MATHEMATICAL FRAKTUR SMALL Z");
				break;
			case 0x1D538:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL A");
				break;
			case 0x1D539:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL B");
				break;
			case 0x1D53B:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL D");
				break;
			case 0x1D53C:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL E");
				break;
			case 0x1D53D:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL F");
				break;
			case 0x1D53E:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL G");
				break;
			case 0x1D540:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL I");
				break;
			case 0x1D541:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL J");
				break;
			case 0x1D542:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL K");
				break;
			case 0x1D543:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL L");
				break;
			case 0x1D544:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL M");
				break;
			case 0x1D546:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL O");
				break;
			case 0x1D54A:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL S");
				break;
			case 0x1D54B:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL T");
				break;
			case 0x1D54C:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL U");
				break;
			case 0x1D54D:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL V");
				break;
			case 0x1D54E:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL W");
				break;
			case 0x1D54F:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL X");
				break;
			case 0x1D550:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK CAPITAL Y");
				break;
			case 0x1D552:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL A");
				break;
			case 0x1D553:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL B");
				break;
			case 0x1D554:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL C");
				break;
			case 0x1D555:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL D");
				break;
			case 0x1D556:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL E");
				break;
			case 0x1D557:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL F");
				break;
			case 0x1D558:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL G");
				break;
			case 0x1D559:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL H");
				break;
			case 0x1D55A:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL I");
				break;
			case 0x1D55B:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL J");
				break;
			case 0x1D55C:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL K");
				break;
			case 0x1D55D:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL L");
				break;
			case 0x1D55E:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL M");
				break;
			case 0x1D55F:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL N");
				break;
			case 0x1D560:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL O");
				break;
			case 0x1D561:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL P");
				break;
			case 0x1D562:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL Q");
				break;
			case 0x1D563:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL R");
				break;
			case 0x1D564:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL S");
				break;
			case 0x1D565:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL T");
				break;
			case 0x1D566:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL U");
				break;
			case 0x1D567:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL V");
				break;
			case 0x1D568:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL W");
				break;
			case 0x1D569:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL X");
				break;
			case 0x1D56A:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL Y");
				break;
			case 0x1D56B:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK SMALL Z");
				break;
			case 0x1D56C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL A");
				break;
			case 0x1D56D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL B");
				break;
			case 0x1D56E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL C");
				break;
			case 0x1D56F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL D");
				break;
			case 0x1D570:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL E");
				break;
			case 0x1D571:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL F");
				break;
			case 0x1D572:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL G");
				break;
			case 0x1D573:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL H");
				break;
			case 0x1D574:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL I");
				break;
			case 0x1D575:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL J");
				break;
			case 0x1D576:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL K");
				break;
			case 0x1D577:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL L");
				break;
			case 0x1D578:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL M");
				break;
			case 0x1D579:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL N");
				break;
			case 0x1D57A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL O");
				break;
			case 0x1D57B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL P");
				break;
			case 0x1D57C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL Q");
				break;
			case 0x1D57D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL R");
				break;
			case 0x1D57E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL S");
				break;
			case 0x1D57F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL T");
				break;
			case 0x1D580:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL U");
				break;
			case 0x1D581:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL V");
				break;
			case 0x1D582:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL W");
				break;
			case 0x1D583:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL X");
				break;
			case 0x1D584:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL Y");
				break;
			case 0x1D585:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR CAPITAL Z");
				break;
			case 0x1D586:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL A");
				break;
			case 0x1D587:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL B");
				break;
			case 0x1D588:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL C");
				break;
			case 0x1D589:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL D");
				break;
			case 0x1D58A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL E");
				break;
			case 0x1D58B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL F");
				break;
			case 0x1D58C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL G");
				break;
			case 0x1D58D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL H");
				break;
			case 0x1D58E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL I");
				break;
			case 0x1D58F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL J");
				break;
			case 0x1D590:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL K");
				break;
			case 0x1D591:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL L");
				break;
			case 0x1D592:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL M");
				break;
			case 0x1D593:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL N");
				break;
			case 0x1D594:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL O");
				break;
			case 0x1D595:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL P");
				break;
			case 0x1D596:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL Q");
				break;
			case 0x1D597:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL R");
				break;
			case 0x1D598:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL S");
				break;
			case 0x1D599:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL T");
				break;
			case 0x1D59A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL U");
				break;
			case 0x1D59B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL V");
				break;
			case 0x1D59C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL W");
				break;
			case 0x1D59D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL X");
				break;
			case 0x1D59E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL Y");
				break;
			case 0x1D59F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD FRAKTUR SMALL Z");
				break;
			case 0x1D5A0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL A");
				break;
			case 0x1D5A1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL B");
				break;
			case 0x1D5A2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL C");
				break;
			case 0x1D5A3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL D");
				break;
			case 0x1D5A4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL E");
				break;
			case 0x1D5A5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL F");
				break;
			case 0x1D5A6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL G");
				break;
			case 0x1D5A7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL H");
				break;
			case 0x1D5A8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL I");
				break;
			case 0x1D5A9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL J");
				break;
			case 0x1D5AA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL K");
				break;
			case 0x1D5AB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL L");
				break;
			case 0x1D5AC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL M");
				break;
			case 0x1D5AD:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL N");
				break;
			case 0x1D5AE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL O");
				break;
			case 0x1D5AF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL P");
				break;
			case 0x1D5B0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL Q");
				break;
			case 0x1D5B1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL R");
				break;
			case 0x1D5B2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL S");
				break;
			case 0x1D5B3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL T");
				break;
			case 0x1D5B4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL U");
				break;
			case 0x1D5B5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL V");
				break;
			case 0x1D5B6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL W");
				break;
			case 0x1D5B7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL X");
				break;
			case 0x1D5B8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL Y");
				break;
			case 0x1D5B9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF CAPITAL Z");
				break;
			case 0x1D5BA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL A");
				break;
			case 0x1D5BB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL B");
				break;
			case 0x1D5BC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL C");
				break;
			case 0x1D5BD:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL D");
				break;
			case 0x1D5BE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL E");
				break;
			case 0x1D5BF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL F");
				break;
			case 0x1D5C0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL G");
				break;
			case 0x1D5C1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL H");
				break;
			case 0x1D5C2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL I");
				break;
			case 0x1D5C3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL J");
				break;
			case 0x1D5C4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL K");
				break;
			case 0x1D5C5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL L");
				break;
			case 0x1D5C6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL M");
				break;
			case 0x1D5C7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL N");
				break;
			case 0x1D5C8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL O");
				break;
			case 0x1D5C9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL P");
				break;
			case 0x1D5CA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL Q");
				break;
			case 0x1D5CB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL R");
				break;
			case 0x1D5CC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL S");
				break;
			case 0x1D5CD:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL T");
				break;
			case 0x1D5CE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL U");
				break;
			case 0x1D5CF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL V");
				break;
			case 0x1D5D0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL W");
				break;
			case 0x1D5D1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL X");
				break;
			case 0x1D5D2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL Y");
				break;
			case 0x1D5D3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF SMALL Z");
				break;
			case 0x1D5D4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL A");
				break;
			case 0x1D5D5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL B");
				break;
			case 0x1D5D6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL C");
				break;
			case 0x1D5D7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL D");
				break;
			case 0x1D5D8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL E");
				break;
			case 0x1D5D9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL F");
				break;
			case 0x1D5DA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL G");
				break;
			case 0x1D5DB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL H");
				break;
			case 0x1D5DC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL I");
				break;
			case 0x1D5DD:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL J");
				break;
			case 0x1D5DE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL K");
				break;
			case 0x1D5DF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL L");
				break;
			case 0x1D5E0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL M");
				break;
			case 0x1D5E1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL N");
				break;
			case 0x1D5E2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL O");
				break;
			case 0x1D5E3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL P");
				break;
			case 0x1D5E4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL Q");
				break;
			case 0x1D5E5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL R");
				break;
			case 0x1D5E6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL S");
				break;
			case 0x1D5E7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL T");
				break;
			case 0x1D5E8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL U");
				break;
			case 0x1D5E9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL V");
				break;
			case 0x1D5EA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL W");
				break;
			case 0x1D5EB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL X");
				break;
			case 0x1D5EC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL Y");
				break;
			case 0x1D5ED:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL Z");
				break;
			case 0x1D5EE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL A");
				break;
			case 0x1D5EF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL B");
				break;
			case 0x1D5F0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL C");
				break;
			case 0x1D5F1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL D");
				break;
			case 0x1D5F2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL E");
				break;
			case 0x1D5F3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL F");
				break;
			case 0x1D5F4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL G");
				break;
			case 0x1D5F5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL H");
				break;
			case 0x1D5F6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL I");
				break;
			case 0x1D5F7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL J");
				break;
			case 0x1D5F8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL K");
				break;
			case 0x1D5F9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL L");
				break;
			case 0x1D5FA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL M");
				break;
			case 0x1D5FB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL N");
				break;
			case 0x1D5FC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL O");
				break;
			case 0x1D5FD:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL P");
				break;
			case 0x1D5FE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL Q");
				break;
			case 0x1D5FF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL R");
				break;
			case 0x1D600:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL S");
				break;
			case 0x1D601:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL T");
				break;
			case 0x1D602:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL U");
				break;
			case 0x1D603:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL V");
				break;
			case 0x1D604:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL W");
				break;
			case 0x1D605:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL X");
				break;
			case 0x1D606:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL Y");
				break;
			case 0x1D607:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL Z");
				break;
			case 0x1D608:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL A");
				break;
			case 0x1D609:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL B");
				break;
			case 0x1D60A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL C");
				break;
			case 0x1D60B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL D");
				break;
			case 0x1D60C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL E");
				break;
			case 0x1D60D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL F");
				break;
			case 0x1D60E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL G");
				break;
			case 0x1D60F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL H");
				break;
			case 0x1D610:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL I");
				break;
			case 0x1D611:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL J");
				break;
			case 0x1D612:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL K");
				break;
			case 0x1D613:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL L");
				break;
			case 0x1D614:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL M");
				break;
			case 0x1D615:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL N");
				break;
			case 0x1D616:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL O");
				break;
			case 0x1D617:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL P");
				break;
			case 0x1D618:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL Q");
				break;
			case 0x1D619:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL R");
				break;
			case 0x1D61A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL S");
				break;
			case 0x1D61B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL T");
				break;
			case 0x1D61C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL U");
				break;
			case 0x1D61D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL V");
				break;
			case 0x1D61E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL W");
				break;
			case 0x1D61F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL X");
				break;
			case 0x1D620:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y");
				break;
			case 0x1D621:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC CAPITAL Z");
				break;
			case 0x1D622:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL A");
				break;
			case 0x1D623:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL B");
				break;
			case 0x1D624:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL C");
				break;
			case 0x1D625:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL D");
				break;
			case 0x1D626:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL E");
				break;
			case 0x1D627:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL F");
				break;
			case 0x1D628:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL G");
				break;
			case 0x1D629:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL H");
				break;
			case 0x1D62A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL I");
				break;
			case 0x1D62B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL J");
				break;
			case 0x1D62C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL K");
				break;
			case 0x1D62D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL L");
				break;
			case 0x1D62E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL M");
				break;
			case 0x1D62F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL N");
				break;
			case 0x1D630:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL O");
				break;
			case 0x1D631:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL P");
				break;
			case 0x1D632:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL Q");
				break;
			case 0x1D633:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL R");
				break;
			case 0x1D634:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL S");
				break;
			case 0x1D635:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL T");
				break;
			case 0x1D636:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL U");
				break;
			case 0x1D637:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL V");
				break;
			case 0x1D638:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL W");
				break;
			case 0x1D639:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL X");
				break;
			case 0x1D63A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL Y");
				break;
			case 0x1D63B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF ITALIC SMALL Z");
				break;
			case 0x1D63C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL A");
				break;
			case 0x1D63D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL B");
				break;
			case 0x1D63E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL C");
				break;
			case 0x1D63F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D");
				break;
			case 0x1D640:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL E");
				break;
			case 0x1D641:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL F");
				break;
			case 0x1D642:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL G");
				break;
			case 0x1D643:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL H");
				break;
			case 0x1D644:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL I");
				break;
			case 0x1D645:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL J");
				break;
			case 0x1D646:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL K");
				break;
			case 0x1D647:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL L");
				break;
			case 0x1D648:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL M");
				break;
			case 0x1D649:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL N");
				break;
			case 0x1D64A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL O");
				break;
			case 0x1D64B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL P");
				break;
			case 0x1D64C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Q");
				break;
			case 0x1D64D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL R");
				break;
			case 0x1D64E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL S");
				break;
			case 0x1D64F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL T");
				break;
			case 0x1D650:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL U");
				break;
			case 0x1D651:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL V");
				break;
			case 0x1D652:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL W");
				break;
			case 0x1D653:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL X");
				break;
			case 0x1D654:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y");
				break;
			case 0x1D655:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Z");
				break;
			case 0x1D656:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL A");
				break;
			case 0x1D657:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL B");
				break;
			case 0x1D658:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL C");
				break;
			case 0x1D659:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D");
				break;
			case 0x1D65A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL E");
				break;
			case 0x1D65B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL F");
				break;
			case 0x1D65C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL G");
				break;
			case 0x1D65D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL H");
				break;
			case 0x1D65E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL I");
				break;
			case 0x1D65F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL J");
				break;
			case 0x1D660:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL K");
				break;
			case 0x1D661:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL L");
				break;
			case 0x1D662:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL M");
				break;
			case 0x1D663:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL N");
				break;
			case 0x1D664:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL O");
				break;
			case 0x1D665:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL P");
				break;
			case 0x1D666:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Q");
				break;
			case 0x1D667:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL R");
				break;
			case 0x1D668:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL S");
				break;
			case 0x1D669:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL T");
				break;
			case 0x1D66A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL U");
				break;
			case 0x1D66B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL V");
				break;
			case 0x1D66C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL W");
				break;
			case 0x1D66D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL X");
				break;
			case 0x1D66E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y");
				break;
			case 0x1D66F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Z");
				break;
			case 0x1D670:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL A");
				break;
			case 0x1D671:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL B");
				break;
			case 0x1D672:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL C");
				break;
			case 0x1D673:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL D");
				break;
			case 0x1D674:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL E");
				break;
			case 0x1D675:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL F");
				break;
			case 0x1D676:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL G");
				break;
			case 0x1D677:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL H");
				break;
			case 0x1D678:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL I");
				break;
			case 0x1D679:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL J");
				break;
			case 0x1D67A:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL K");
				break;
			case 0x1D67B:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL L");
				break;
			case 0x1D67C:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL M");
				break;
			case 0x1D67D:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL N");
				break;
			case 0x1D67E:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL O");
				break;
			case 0x1D67F:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL P");
				break;
			case 0x1D680:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL Q");
				break;
			case 0x1D681:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL R");
				break;
			case 0x1D682:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL S");
				break;
			case 0x1D683:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL T");
				break;
			case 0x1D684:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL U");
				break;
			case 0x1D685:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL V");
				break;
			case 0x1D686:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL W");
				break;
			case 0x1D687:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL X");
				break;
			case 0x1D688:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL Y");
				break;
			case 0x1D689:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE CAPITAL Z");
				break;
			case 0x1D68A:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL A");
				break;
			case 0x1D68B:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL B");
				break;
			case 0x1D68C:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL C");
				break;
			case 0x1D68D:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL D");
				break;
			case 0x1D68E:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL E");
				break;
			case 0x1D68F:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL F");
				break;
			case 0x1D690:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL G");
				break;
			case 0x1D691:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL H");
				break;
			case 0x1D692:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL I");
				break;
			case 0x1D693:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL J");
				break;
			case 0x1D694:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL K");
				break;
			case 0x1D695:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL L");
				break;
			case 0x1D696:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL M");
				break;
			case 0x1D697:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL N");
				break;
			case 0x1D698:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL O");
				break;
			case 0x1D699:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL P");
				break;
			case 0x1D69A:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL Q");
				break;
			case 0x1D69B:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL R");
				break;
			case 0x1D69C:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL S");
				break;
			case 0x1D69D:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL T");
				break;
			case 0x1D69E:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL U");
				break;
			case 0x1D69F:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL V");
				break;
			case 0x1D6A0:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL W");
				break;
			case 0x1D6A1:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL X");
				break;
			case 0x1D6A2:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL Y");
				break;
			case 0x1D6A3:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE SMALL Z");
				break;
			case 0x1D6A4:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL DOTLESS I");
				break;
			case 0x1D6A5:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL DOTLESS J");
				break;
			case 0x1D6A8:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL ALPHA");
				break;
			case 0x1D6A9:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL BETA");
				break;
			case 0x1D6AA:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL GAMMA");
				break;
			case 0x1D6AB:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL DELTA");
				break;
			case 0x1D6AC:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL EPSILON");
				break;
			case 0x1D6AD:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL ZETA");
				break;
			case 0x1D6AE:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL ETA");
				break;
			case 0x1D6AF:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL THETA");
				break;
			case 0x1D6B0:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL IOTA");
				break;
			case 0x1D6B1:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL KAPPA");
				break;
			case 0x1D6B2:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL LAMDA");
				break;
			case 0x1D6B3:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL MU");
				break;
			case 0x1D6B4:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL NU");
				break;
			case 0x1D6B5:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL XI");
				break;
			case 0x1D6B6:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL OMICRON");
				break;
			case 0x1D6B7:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL PI");
				break;
			case 0x1D6B8:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL RHO");
				break;
			case 0x1D6B9:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL THETA SYMBOL");
				break;
			case 0x1D6BA:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL SIGMA");
				break;
			case 0x1D6BB:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL TAU");
				break;
			case 0x1D6BC:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL UPSILON");
				break;
			case 0x1D6BD:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL PHI");
				break;
			case 0x1D6BE:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL CHI");
				break;
			case 0x1D6BF:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL PSI");
				break;
			case 0x1D6C0:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL OMEGA");
				break;
			case 0x1D6C1:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD NABLA");
				break;
			case 0x1D6C2:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL ALPHA");
				break;
			case 0x1D6C3:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL BETA");
				break;
			case 0x1D6C4:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL GAMMA");
				break;
			case 0x1D6C5:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL DELTA");
				break;
			case 0x1D6C6:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL EPSILON");
				break;
			case 0x1D6C7:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL ZETA");
				break;
			case 0x1D6C8:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL ETA");
				break;
			case 0x1D6C9:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL THETA");
				break;
			case 0x1D6CA:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL IOTA");
				break;
			case 0x1D6CB:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL KAPPA");
				break;
			case 0x1D6CC:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL LAMDA");
				break;
			case 0x1D6CD:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL MU");
				break;
			case 0x1D6CE:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL NU");
				break;
			case 0x1D6CF:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL XI");
				break;
			case 0x1D6D0:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL OMICRON");
				break;
			case 0x1D6D1:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL PI");
				break;
			case 0x1D6D2:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL RHO");
				break;
			case 0x1D6D3:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL FINAL SIGMA");
				break;
			case 0x1D6D4:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL SIGMA");
				break;
			case 0x1D6D5:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL TAU");
				break;
			case 0x1D6D6:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL UPSILON");
				break;
			case 0x1D6D7:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL PHI");
				break;
			case 0x1D6D8:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL CHI");
				break;
			case 0x1D6D9:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL PSI");
				break;
			case 0x1D6DA:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL OMEGA");
				break;
			case 0x1D6DB:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD PARTIAL DIFFERENTIAL");
				break;
			case 0x1D6DC:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD EPSILON SYMBOL");
				break;
			case 0x1D6DD:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD THETA SYMBOL");
				break;
			case 0x1D6DE:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD KAPPA SYMBOL");
				break;
			case 0x1D6DF:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD PHI SYMBOL");
				break;
			case 0x1D6E0:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD RHO SYMBOL");
				break;
			case 0x1D6E1:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD PI SYMBOL");
				break;
			case 0x1D6E2:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL ALPHA");
				break;
			case 0x1D6E3:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL BETA");
				break;
			case 0x1D6E4:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL GAMMA");
				break;
			case 0x1D6E5:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL DELTA");
				break;
			case 0x1D6E6:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL EPSILON");
				break;
			case 0x1D6E7:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL ZETA");
				break;
			case 0x1D6E8:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL ETA");
				break;
			case 0x1D6E9:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL THETA");
				break;
			case 0x1D6EA:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL IOTA");
				break;
			case 0x1D6EB:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL KAPPA");
				break;
			case 0x1D6EC:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL LAMDA");
				break;
			case 0x1D6ED:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL MU");
				break;
			case 0x1D6EE:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL NU");
				break;
			case 0x1D6EF:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL XI");
				break;
			case 0x1D6F0:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL OMICRON");
				break;
			case 0x1D6F1:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL PI");
				break;
			case 0x1D6F2:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL RHO");
				break;
			case 0x1D6F3:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL THETA SYMBOL");
				break;
			case 0x1D6F4:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL SIGMA");
				break;
			case 0x1D6F5:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL TAU");
				break;
			case 0x1D6F6:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL UPSILON");
				break;
			case 0x1D6F7:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL PHI");
				break;
			case 0x1D6F8:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL CHI");
				break;
			case 0x1D6F9:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL PSI");
				break;
			case 0x1D6FA:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC CAPITAL OMEGA");
				break;
			case 0x1D6FB:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC NABLA");
				break;
			case 0x1D6FC:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL ALPHA");
				break;
			case 0x1D6FD:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL BETA");
				break;
			case 0x1D6FE:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL GAMMA");
				break;
			case 0x1D6FF:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL DELTA");
				break;
			case 0x1D700:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL EPSILON");
				break;
			case 0x1D701:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL ZETA");
				break;
			case 0x1D702:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL ETA");
				break;
			case 0x1D703:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL THETA");
				break;
			case 0x1D704:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL IOTA");
				break;
			case 0x1D705:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL KAPPA");
				break;
			case 0x1D706:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL LAMDA");
				break;
			case 0x1D707:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL MU");
				break;
			case 0x1D708:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL NU");
				break;
			case 0x1D709:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL XI");
				break;
			case 0x1D70A:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL OMICRON");
				break;
			case 0x1D70B:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL PI");
				break;
			case 0x1D70C:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL RHO");
				break;
			case 0x1D70D:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL FINAL SIGMA");
				break;
			case 0x1D70E:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL SIGMA");
				break;
			case 0x1D70F:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL TAU");
				break;
			case 0x1D710:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL UPSILON");
				break;
			case 0x1D711:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL PHI");
				break;
			case 0x1D712:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL CHI");
				break;
			case 0x1D713:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL PSI");
				break;
			case 0x1D714:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC SMALL OMEGA");
				break;
			case 0x1D715:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC PARTIAL DIFFERENTIAL");
				break;
			case 0x1D716:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC EPSILON SYMBOL");
				break;
			case 0x1D717:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC THETA SYMBOL");
				break;
			case 0x1D718:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC KAPPA SYMBOL");
				break;
			case 0x1D719:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC PHI SYMBOL");
				break;
			case 0x1D71A:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC RHO SYMBOL");
				break;
			case 0x1D71B:
				strcpy_s(buf, buf_size, "MATHEMATICAL ITALIC PI SYMBOL");
				break;
			case 0x1D71C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL ALPHA");
				break;
			case 0x1D71D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL BETA");
				break;
			case 0x1D71E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL GAMMA");
				break;
			case 0x1D71F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL DELTA");
				break;
			case 0x1D720:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL EPSILON");
				break;
			case 0x1D721:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL ZETA");
				break;
			case 0x1D722:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL ETA");
				break;
			case 0x1D723:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL THETA");
				break;
			case 0x1D724:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL IOTA");
				break;
			case 0x1D725:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL KAPPA");
				break;
			case 0x1D726:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL LAMDA");
				break;
			case 0x1D727:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL MU");
				break;
			case 0x1D728:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL NU");
				break;
			case 0x1D729:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL XI");
				break;
			case 0x1D72A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL OMICRON");
				break;
			case 0x1D72B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL PI");
				break;
			case 0x1D72C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL RHO");
				break;
			case 0x1D72D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL THETA SYMBOL");
				break;
			case 0x1D72E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL SIGMA");
				break;
			case 0x1D72F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL TAU");
				break;
			case 0x1D730:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL UPSILON");
				break;
			case 0x1D731:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL PHI");
				break;
			case 0x1D732:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL CHI");
				break;
			case 0x1D733:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL PSI");
				break;
			case 0x1D734:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC CAPITAL OMEGA");
				break;
			case 0x1D735:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC NABLA");
				break;
			case 0x1D736:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL ALPHA");
				break;
			case 0x1D737:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL BETA");
				break;
			case 0x1D738:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL GAMMA");
				break;
			case 0x1D739:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL DELTA");
				break;
			case 0x1D73A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL EPSILON");
				break;
			case 0x1D73B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL ZETA");
				break;
			case 0x1D73C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL ETA");
				break;
			case 0x1D73D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL THETA");
				break;
			case 0x1D73E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL IOTA");
				break;
			case 0x1D73F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL KAPPA");
				break;
			case 0x1D740:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL LAMDA");
				break;
			case 0x1D741:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL MU");
				break;
			case 0x1D742:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL NU");
				break;
			case 0x1D743:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL XI");
				break;
			case 0x1D744:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL OMICRON");
				break;
			case 0x1D745:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL PI");
				break;
			case 0x1D746:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL RHO");
				break;
			case 0x1D747:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL FINAL SIGMA");
				break;
			case 0x1D748:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL SIGMA");
				break;
			case 0x1D749:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL TAU");
				break;
			case 0x1D74A:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL UPSILON");
				break;
			case 0x1D74B:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL PHI");
				break;
			case 0x1D74C:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL CHI");
				break;
			case 0x1D74D:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL PSI");
				break;
			case 0x1D74E:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC SMALL OMEGA");
				break;
			case 0x1D74F:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC PARTIAL DIFFERENTIAL");
				break;
			case 0x1D750:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC EPSILON SYMBOL");
				break;
			case 0x1D751:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC THETA SYMBOL");
				break;
			case 0x1D752:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC KAPPA SYMBOL");
				break;
			case 0x1D753:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC PHI SYMBOL");
				break;
			case 0x1D754:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC RHO SYMBOL");
				break;
			case 0x1D755:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD ITALIC PI SYMBOL");
				break;
			case 0x1D756:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL ALPHA");
				break;
			case 0x1D757:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL BETA");
				break;
			case 0x1D758:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL GAMMA");
				break;
			case 0x1D759:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL DELTA");
				break;
			case 0x1D75A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL EPSILON");
				break;
			case 0x1D75B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL ZETA");
				break;
			case 0x1D75C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL ETA");
				break;
			case 0x1D75D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL THETA");
				break;
			case 0x1D75E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL IOTA");
				break;
			case 0x1D75F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL KAPPA");
				break;
			case 0x1D760:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL LAMDA");
				break;
			case 0x1D761:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL MU");
				break;
			case 0x1D762:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL NU");
				break;
			case 0x1D763:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL XI");
				break;
			case 0x1D764:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL OMICRON");
				break;
			case 0x1D765:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL PI");
				break;
			case 0x1D766:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL RHO");
				break;
			case 0x1D767:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL THETA SYMBOL");
				break;
			case 0x1D768:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL SIGMA");
				break;
			case 0x1D769:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL TAU");
				break;
			case 0x1D76A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL UPSILON");
				break;
			case 0x1D76B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL PHI");
				break;
			case 0x1D76C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL CHI");
				break;
			case 0x1D76D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL PSI");
				break;
			case 0x1D76E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA");
				break;
			case 0x1D76F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD NABLA");
				break;
			case 0x1D770:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL ALPHA");
				break;
			case 0x1D771:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL BETA");
				break;
			case 0x1D772:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL GAMMA");
				break;
			case 0x1D773:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL DELTA");
				break;
			case 0x1D774:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL EPSILON");
				break;
			case 0x1D775:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL ZETA");
				break;
			case 0x1D776:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL ETA");
				break;
			case 0x1D777:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL THETA");
				break;
			case 0x1D778:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL IOTA");
				break;
			case 0x1D779:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL KAPPA");
				break;
			case 0x1D77A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL LAMDA");
				break;
			case 0x1D77B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL MU");
				break;
			case 0x1D77C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL NU");
				break;
			case 0x1D77D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL XI");
				break;
			case 0x1D77E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL OMICRON");
				break;
			case 0x1D77F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL PI");
				break;
			case 0x1D780:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL RHO");
				break;
			case 0x1D781:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL FINAL SIGMA");
				break;
			case 0x1D782:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL SIGMA");
				break;
			case 0x1D783:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL TAU");
				break;
			case 0x1D784:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL UPSILON");
				break;
			case 0x1D785:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL PHI");
				break;
			case 0x1D786:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL CHI");
				break;
			case 0x1D787:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL PSI");
				break;
			case 0x1D788:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA");
				break;
			case 0x1D789:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD PARTIAL DIFFERENTIAL");
				break;
			case 0x1D78A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD EPSILON SYMBOL");
				break;
			case 0x1D78B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD THETA SYMBOL");
				break;
			case 0x1D78C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD KAPPA SYMBOL");
				break;
			case 0x1D78D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD PHI SYMBOL");
				break;
			case 0x1D78E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD RHO SYMBOL");
				break;
			case 0x1D78F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD PI SYMBOL");
				break;
			case 0x1D790:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ALPHA");
				break;
			case 0x1D791:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL BETA");
				break;
			case 0x1D792:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL GAMMA");
				break;
			case 0x1D793:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL DELTA");
				break;
			case 0x1D794:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL EPSILON");
				break;
			case 0x1D795:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ZETA");
				break;
			case 0x1D796:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ETA");
				break;
			case 0x1D797:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL THETA");
				break;
			case 0x1D798:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL IOTA");
				break;
			case 0x1D799:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL KAPPA");
				break;
			case 0x1D79A:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL LAMDA");
				break;
			case 0x1D79B:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL MU");
				break;
			case 0x1D79C:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL NU");
				break;
			case 0x1D79D:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL XI");
				break;
			case 0x1D79E:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMICRON");
				break;
			case 0x1D79F:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PI");
				break;
			case 0x1D7A0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL RHO");
				break;
			case 0x1D7A1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL THETA SYMBOL");
				break;
			case 0x1D7A2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL SIGMA");
				break;
			case 0x1D7A3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL TAU");
				break;
			case 0x1D7A4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL UPSILON");
				break;
			case 0x1D7A5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PHI");
				break;
			case 0x1D7A6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL CHI");
				break;
			case 0x1D7A7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PSI");
				break;
			case 0x1D7A8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA");
				break;
			case 0x1D7A9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC NABLA");
				break;
			case 0x1D7AA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ALPHA");
				break;
			case 0x1D7AB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL BETA");
				break;
			case 0x1D7AC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL GAMMA");
				break;
			case 0x1D7AD:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL DELTA");
				break;
			case 0x1D7AE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL EPSILON");
				break;
			case 0x1D7AF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ZETA");
				break;
			case 0x1D7B0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ETA");
				break;
			case 0x1D7B1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL THETA");
				break;
			case 0x1D7B2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL IOTA");
				break;
			case 0x1D7B3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL KAPPA");
				break;
			case 0x1D7B4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL LAMDA");
				break;
			case 0x1D7B5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL MU");
				break;
			case 0x1D7B6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL NU");
				break;
			case 0x1D7B7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL XI");
				break;
			case 0x1D7B8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMICRON");
				break;
			case 0x1D7B9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PI");
				break;
			case 0x1D7BA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL RHO");
				break;
			case 0x1D7BB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL FINAL SIGMA");
				break;
			case 0x1D7BC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL SIGMA");
				break;
			case 0x1D7BD:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL TAU");
				break;
			case 0x1D7BE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL UPSILON");
				break;
			case 0x1D7BF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PHI");
				break;
			case 0x1D7C0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL CHI");
				break;
			case 0x1D7C1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PSI");
				break;
			case 0x1D7C2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA");
				break;
			case 0x1D7C3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC PARTIAL DIFFERENTIAL");
				break;
			case 0x1D7C4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC EPSILON SYMBOL");
				break;
			case 0x1D7C5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC THETA SYMBOL");
				break;
			case 0x1D7C6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC KAPPA SYMBOL");
				break;
			case 0x1D7C7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC PHI SYMBOL");
				break;
			case 0x1D7C8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC RHO SYMBOL");
				break;
			case 0x1D7C9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD ITALIC PI SYMBOL");
				break;
			case 0x1D7CA:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD CAPITAL DIGAMMA");
				break;
			case 0x1D7CB:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD SMALL DIGAMMA");
				break;
			case 0x1D7CE:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD DIGIT ZERO");
				break;
			case 0x1D7CF:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD DIGIT ONE");
				break;
			case 0x1D7D0:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD DIGIT TWO");
				break;
			case 0x1D7D1:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD DIGIT THREE");
				break;
			case 0x1D7D2:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD DIGIT FOUR");
				break;
			case 0x1D7D3:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD DIGIT FIVE");
				break;
			case 0x1D7D4:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD DIGIT SIX");
				break;
			case 0x1D7D5:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD DIGIT SEVEN");
				break;
			case 0x1D7D6:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD DIGIT EIGHT");
				break;
			case 0x1D7D7:
				strcpy_s(buf, buf_size, "MATHEMATICAL BOLD DIGIT NINE");
				break;
			case 0x1D7D8:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK DIGIT ZERO");
				break;
			case 0x1D7D9:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK DIGIT ONE");
				break;
			case 0x1D7DA:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK DIGIT TWO");
				break;
			case 0x1D7DB:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK DIGIT THREE");
				break;
			case 0x1D7DC:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK DIGIT FOUR");
				break;
			case 0x1D7DD:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK DIGIT FIVE");
				break;
			case 0x1D7DE:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK DIGIT SIX");
				break;
			case 0x1D7DF:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK DIGIT SEVEN");
				break;
			case 0x1D7E0:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK DIGIT EIGHT");
				break;
			case 0x1D7E1:
				strcpy_s(buf, buf_size, "MATHEMATICAL DOUBLE-STRUCK DIGIT NINE");
				break;
			case 0x1D7E2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF DIGIT ZERO");
				break;
			case 0x1D7E3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF DIGIT ONE");
				break;
			case 0x1D7E4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF DIGIT TWO");
				break;
			case 0x1D7E5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF DIGIT THREE");
				break;
			case 0x1D7E6:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF DIGIT FOUR");
				break;
			case 0x1D7E7:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF DIGIT FIVE");
				break;
			case 0x1D7E8:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF DIGIT SIX");
				break;
			case 0x1D7E9:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF DIGIT SEVEN");
				break;
			case 0x1D7EA:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF DIGIT EIGHT");
				break;
			case 0x1D7EB:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF DIGIT NINE");
				break;
			case 0x1D7EC:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD DIGIT ZERO");
				break;
			case 0x1D7ED:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD DIGIT ONE");
				break;
			case 0x1D7EE:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD DIGIT TWO");
				break;
			case 0x1D7EF:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD DIGIT THREE");
				break;
			case 0x1D7F0:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD DIGIT FOUR");
				break;
			case 0x1D7F1:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD DIGIT FIVE");
				break;
			case 0x1D7F2:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD DIGIT SIX");
				break;
			case 0x1D7F3:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD DIGIT SEVEN");
				break;
			case 0x1D7F4:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD DIGIT EIGHT");
				break;
			case 0x1D7F5:
				strcpy_s(buf, buf_size, "MATHEMATICAL SANS-SERIF BOLD DIGIT NINE");
				break;
			case 0x1D7F6:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE DIGIT ZERO");
				break;
			case 0x1D7F7:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE DIGIT ONE");
				break;
			case 0x1D7F8:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE DIGIT TWO");
				break;
			case 0x1D7F9:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE DIGIT THREE");
				break;
			case 0x1D7FA:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE DIGIT FOUR");
				break;
			case 0x1D7FB:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE DIGIT FIVE");
				break;
			case 0x1D7FC:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE DIGIT SIX");
				break;
			case 0x1D7FD:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE DIGIT SEVEN");
				break;
			case 0x1D7FE:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE DIGIT EIGHT");
				break;
			case 0x1D7FF:
				strcpy_s(buf, buf_size, "MATHEMATICAL MONOSPACE DIGIT NINE");
				break;
			case 0x1D800:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX");
				break;
			case 0x1D801:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE INDEX");
				break;
			case 0x1D802:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP INDEX");
				break;
			case 0x1D803:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-OVAL INDEX");
				break;
			case 0x1D804:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX");
				break;
			case 0x1D805:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE INDEX");
				break;
			case 0x1D806:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX BENT");
				break;
			case 0x1D807:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE INDEX BENT");
				break;
			case 0x1D808:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB UNDER INDEX BENT");
				break;
			case 0x1D809:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX RAISED KNUCKLE");
				break;
			case 0x1D80A:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX CUPPED");
				break;
			case 0x1D80B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX HINGED");
				break;
			case 0x1D80C:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX HINGED LOW");
				break;
			case 0x1D80D:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE INDEX HINGE");
				break;
			case 0x1D80E:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE");
				break;
			case 0x1D80F:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE INDEX MIDDLE");
				break;
			case 0x1D810:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE BENT");
				break;
			case 0x1D811:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE RAISED KNUCKLES");
				break;
			case 0x1D812:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE HINGED");
				break;
			case 0x1D813:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX UP MIDDLE HINGED");
				break;
			case 0x1D814:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX HINGED MIDDLE UP");
				break;
			case 0x1D815:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED");
				break;
			case 0x1D816:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED INDEX BENT");
				break;
			case 0x1D817:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED MIDDLE BENT");
				break;
			case 0x1D818:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED CUPPED");
				break;
			case 0x1D819:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED HINGED");
				break;
			case 0x1D81A:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CROSSED");
				break;
			case 0x1D81B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE INDEX MIDDLE CROSSED");
				break;
			case 0x1D81C:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE BENT OVER INDEX");
				break;
			case 0x1D81D:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX BENT OVER MIDDLE");
				break;
			case 0x1D81E:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE THUMB");
				break;
			case 0x1D81F:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE INDEX MIDDLE THUMB");
				break;
			case 0x1D820:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE STRAIGHT THUMB BENT");
				break;
			case 0x1D821:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE BENT THUMB STRAIGHT");
				break;
			case 0x1D822:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE THUMB BENT");
				break;
			case 0x1D823:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE HINGED SPREAD THUMB SIDE");
				break;
			case 0x1D824:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX UP MIDDLE HINGED THUMB SIDE");
				break;
			case 0x1D825:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX UP MIDDLE HINGED THUMB CONJOINED");
				break;
			case 0x1D826:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX HINGED MIDDLE UP THUMB SIDE");
				break;
			case 0x1D827:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE UP SPREAD THUMB FORWARD");
				break;
			case 0x1D828:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE THUMB CUPPED");
				break;
			case 0x1D829:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE THUMB CIRCLED");
				break;
			case 0x1D82A:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE THUMB HOOKED");
				break;
			case 0x1D82B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE THUMB HINGED");
				break;
			case 0x1D82C:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB BETWEEN INDEX MIDDLE STRAIGHT");
				break;
			case 0x1D82D:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED THUMB SIDE");
				break;
			case 0x1D82E:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED THUMB SIDE CONJOINED");
				break;
			case 0x1D82F:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED THUMB SIDE BENT");
				break;
			case 0x1D830:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE THUMB HOOKED INDEX UP");
				break;
			case 0x1D831:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB HOOKED MIDDLE UP");
				break;
			case 0x1D832:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED HINGED THUMB SIDE");
				break;
			case 0x1D833:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CROSSED THUMB SIDE");
				break;
			case 0x1D834:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED THUMB FORWARD");
				break;
			case 0x1D835:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CONJOINED CUPPED THUMB FORWARD");
				break;
			case 0x1D836:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE THUMB CUPPED INDEX UP");
				break;
			case 0x1D837:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB CUPPED MIDDLE UP");
				break;
			case 0x1D838:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE THUMB CIRCLED INDEX UP");
				break;
			case 0x1D839:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE THUMB CIRCLED INDEX HINGED");
				break;
			case 0x1D83A:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB ANGLED OUT MIDDLE UP");
				break;
			case 0x1D83B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB ANGLED IN MIDDLE UP");
				break;
			case 0x1D83C:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB CIRCLED MIDDLE UP");
				break;
			case 0x1D83D:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE THUMB CONJOINED HINGED");
				break;
			case 0x1D83E:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE THUMB ANGLED OUT");
				break;
			case 0x1D83F:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE THUMB ANGLED");
				break;
			case 0x1D840:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE THUMB ANGLED OUT INDEX UP");
				break;
			case 0x1D841:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE THUMB ANGLED OUT INDEX CROSSED");
				break;
			case 0x1D842:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE THUMB ANGLED INDEX UP");
				break;
			case 0x1D843:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB HOOKED MIDDLE HINGED");
				break;
			case 0x1D844:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FOUR FINGERS");
				break;
			case 0x1D845:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FOUR FINGERS BENT");
				break;
			case 0x1D846:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FOUR FINGERS HINGED");
				break;
			case 0x1D847:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FOUR FINGERS CONJOINED");
				break;
			case 0x1D848:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FOUR FINGERS CONJOINED SPLIT");
				break;
			case 0x1D849:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CLAW FOUR FINGERS CONJOINED");
				break;
			case 0x1D84A:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST FOUR FINGERS CONJOINED BENT");
				break;
			case 0x1D84B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE FOUR FINGERS CONJOINED");
				break;
			case 0x1D84C:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD");
				break;
			case 0x1D84D:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD");
				break;
			case 0x1D84E:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD FOUR BENT");
				break;
			case 0x1D84F:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD FOUR BENT");
				break;
			case 0x1D850:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD BENT");
				break;
			case 0x1D851:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT HEEL FIVE FINGERS SPREAD BENT");
				break;
			case 0x1D852:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD THUMB FORWARD");
				break;
			case 0x1D853:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP FIVE FINGERS SPREAD");
				break;
			case 0x1D854:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP FIVE FINGERS SPREAD OPEN");
				break;
			case 0x1D855:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE FIVE FINGERS SPREAD OPEN");
				break;
			case 0x1D856:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-OVAL FIVE FINGERS SPREAD");
				break;
			case 0x1D857:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED");
				break;
			case 0x1D858:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED THUMB SIDE");
				break;
			case 0x1D859:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT FIVE FINGERS SPREAD HINGED NO THUMB");
				break;
			case 0x1D85A:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT");
				break;
			case 0x1D85B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT BETWEEN PALM FACINGS");
				break;
			case 0x1D85C:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT HEEL");
				break;
			case 0x1D85D:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT THUMB SIDE");
				break;
			case 0x1D85E:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT HEEL THUMB SIDE");
				break;
			case 0x1D85F:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT THUMB BENT");
				break;
			case 0x1D860:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT THUMB FORWARD");
				break;
			case 0x1D861:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT SPLIT INDEX THUMB SIDE");
				break;
			case 0x1D862:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT SPLIT CENTRE");
				break;
			case 0x1D863:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE");
				break;
			case 0x1D864:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT SPLIT CENTRE THUMB SIDE BENT");
				break;
			case 0x1D865:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FLAT SPLIT LITTLE");
				break;
			case 0x1D866:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CLAW");
				break;
			case 0x1D867:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CLAW THUMB SIDE");
				break;
			case 0x1D868:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CLAW NO THUMB");
				break;
			case 0x1D869:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CLAW THUMB FORWARD");
				break;
			case 0x1D86A:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HOOK CURLICUE");
				break;
			case 0x1D86B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HOOK");
				break;
			case 0x1D86C:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP OPEN");
				break;
			case 0x1D86D:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP");
				break;
			case 0x1D86E:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP OPEN THUMB SIDE");
				break;
			case 0x1D86F:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP THUMB SIDE");
				break;
			case 0x1D870:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP OPEN NO THUMB");
				break;
			case 0x1D871:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP NO THUMB");
				break;
			case 0x1D872:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP OPEN THUMB FORWARD");
				break;
			case 0x1D873:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP THUMB FORWARD");
				break;
			case 0x1D874:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CURLICUE OPEN");
				break;
			case 0x1D875:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CURLICUE");
				break;
			case 0x1D876:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE");
				break;
			case 0x1D877:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-OVAL");
				break;
			case 0x1D878:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-OVAL THUMB SIDE");
				break;
			case 0x1D879:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-OVAL NO THUMB");
				break;
			case 0x1D87A:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-OVAL THUMB FORWARD");
				break;
			case 0x1D87B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE OPEN");
				break;
			case 0x1D87C:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE OPEN THUMB FORWARD");
				break;
			case 0x1D87D:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE");
				break;
			case 0x1D87E:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE SMALL");
				break;
			case 0x1D87F:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE OPEN THUMB SIDE");
				break;
			case 0x1D880:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE THUMB SIDE");
				break;
			case 0x1D881:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE OPEN NO THUMB");
				break;
			case 0x1D882:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE NO THUMB");
				break;
			case 0x1D883:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE THUMB SIDE TOUCHING INDEX");
				break;
			case 0x1D884:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE THUMB BETWEEN MIDDLE RING");
				break;
			case 0x1D885:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE");
				break;
			case 0x1D886:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE RING");
				break;
			case 0x1D887:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE INDEX MIDDLE RING");
				break;
			case 0x1D888:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX MIDDLE RING");
				break;
			case 0x1D889:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE INDEX MIDDLE RING");
				break;
			case 0x1D88A:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE LITTLE");
				break;
			case 0x1D88B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE RING BENT");
				break;
			case 0x1D88C:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE RING CONJOINED");
				break;
			case 0x1D88D:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX MIDDLE RING CONJOINED");
				break;
			case 0x1D88E:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE DOWN");
				break;
			case 0x1D88F:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE STRAIGHT");
				break;
			case 0x1D890:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE DOWN RIPPLE CURVED");
				break;
			case 0x1D891:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE DOWN OTHERS CIRCLED");
				break;
			case 0x1D892:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE UP");
				break;
			case 0x1D893:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB UNDER LITTLE UP");
				break;
			case 0x1D894:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE LITTLE UP");
				break;
			case 0x1D895:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-OVAL LITTLE UP");
				break;
			case 0x1D896:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE LITTLE UP");
				break;
			case 0x1D897:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE RAISED KNUCKLE");
				break;
			case 0x1D898:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE BENT");
				break;
			case 0x1D899:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE TOUCHES THUMB");
				break;
			case 0x1D89A:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE THUMB");
				break;
			case 0x1D89B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE LITTLE THUMB");
				break;
			case 0x1D89C:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE INDEX THUMB");
				break;
			case 0x1D89D:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE LITTLE INDEX THUMB");
				break;
			case 0x1D89E:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB OUT");
				break;
			case 0x1D89F:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE LITTLE INDEX THUMB INDEX THUMB");
				break;
			case 0x1D8A0:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST LITTLE INDEX");
				break;
			case 0x1D8A1:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE LITTLE INDEX");
				break;
			case 0x1D8A2:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE LITTLE INDEX");
				break;
			case 0x1D8A3:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE LITTLE INDEX");
				break;
			case 0x1D8A4:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE LITTLE");
				break;
			case 0x1D8A5:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE INDEX MIDDLE LITTLE");
				break;
			case 0x1D8A6:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX MIDDLE LITTLE");
				break;
			case 0x1D8A7:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE RING");
				break;
			case 0x1D8A8:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE INDEX MIDDLE LITTLE");
				break;
			case 0x1D8A9:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX MIDDLE CROSS LITTLE");
				break;
			case 0x1D8AA:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE INDEX MIDDLE CROSS LITTLE");
				break;
			case 0x1D8AB:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST RING DOWN");
				break;
			case 0x1D8AC:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE RING DOWN INDEX THUMB HOOK MIDDLE");
				break;
			case 0x1D8AD:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE RING DOWN MIDDLE THUMB INDEX CROSS");
				break;
			case 0x1D8AE:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST RING UP");
				break;
			case 0x1D8AF:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST RING RAISED KNUCKLE");
				break;
			case 0x1D8B0:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST RING LITTLE");
				break;
			case 0x1D8B1:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE RING LITTLE");
				break;
			case 0x1D8B2:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-OVAL RING LITTLE");
				break;
			case 0x1D8B3:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE RING LITTLE");
				break;
			case 0x1D8B4:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST RING MIDDLE");
				break;
			case 0x1D8B5:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST RING MIDDLE CONJOINED");
				break;
			case 0x1D8B6:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST RING MIDDLE RAISED KNUCKLES");
				break;
			case 0x1D8B7:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST RING INDEX");
				break;
			case 0x1D8B8:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST RING THUMB");
				break;
			case 0x1D8B9:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HOOK RING THUMB");
				break;
			case 0x1D8BA:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX RING LITTLE");
				break;
			case 0x1D8BB:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE INDEX RING LITTLE");
				break;
			case 0x1D8BC:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CURLICUE INDEX RING LITTLE ON");
				break;
			case 0x1D8BD:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HOOK INDEX RING LITTLE OUT");
				break;
			case 0x1D8BE:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HOOK INDEX RING LITTLE IN");
				break;
			case 0x1D8BF:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HOOK INDEX RING LITTLE UNDER");
				break;
			case 0x1D8C0:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP INDEX RING LITTLE");
				break;
			case 0x1D8C1:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX RING LITTLE");
				break;
			case 0x1D8C2:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE INDEX RING LITTLE OUT");
				break;
			case 0x1D8C3:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE INDEX RING LITTLE");
				break;
			case 0x1D8C4:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE DOWN");
				break;
			case 0x1D8C5:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE MIDDLE");
				break;
			case 0x1D8C6:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE UP");
				break;
			case 0x1D8C7:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE MIDDLE UP");
				break;
			case 0x1D8C8:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE RAISED KNUCKLE");
				break;
			case 0x1D8C9:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE UP THUMB SIDE");
				break;
			case 0x1D8CA:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HOOK MIDDLE THUMB");
				break;
			case 0x1D8CB:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE THUMB LITTLE");
				break;
			case 0x1D8CC:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE LITTLE");
				break;
			case 0x1D8CD:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST MIDDLE RING LITTLE");
				break;
			case 0x1D8CE:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE MIDDLE RING LITTLE");
				break;
			case 0x1D8CF:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CURLICUE MIDDLE RING LITTLE ON");
				break;
			case 0x1D8D0:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP MIDDLE RING LITTLE");
				break;
			case 0x1D8D1:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE MIDDLE RING LITTLE");
				break;
			case 0x1D8D2:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE MIDDLE RING LITTLE OUT");
				break;
			case 0x1D8D3:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE MIDDLE RING LITTLE IN");
				break;
			case 0x1D8D4:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE MIDDLE RING LITTLE");
				break;
			case 0x1D8D5:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CIRCLE MIDDLE RING LITTLE BENT");
				break;
			case 0x1D8D6:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CLAW MIDDLE RING LITTLE CONJOINED");
				break;
			case 0x1D8D7:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CLAW MIDDLE RING LITTLE CONJOINED SIDE");
				break;
			case 0x1D8D8:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HOOK MIDDLE RING LITTLE CONJOINED OUT");
				break;
			case 0x1D8D9:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HOOK MIDDLE RING LITTLE CONJOINED IN");
				break;
			case 0x1D8DA:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HOOK MIDDLE RING LITTLE CONJOINED");
				break;
			case 0x1D8DB:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX HINGED");
				break;
			case 0x1D8DC:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB SIDE");
				break;
			case 0x1D8DD:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX THUMB SIDE");
				break;
			case 0x1D8DE:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB SIDE THUMB DIAGONAL");
				break;
			case 0x1D8DF:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB SIDE THUMB CONJOINED");
				break;
			case 0x1D8E0:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB SIDE THUMB BENT");
				break;
			case 0x1D8E1:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB SIDE INDEX BENT");
				break;
			case 0x1D8E2:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB SIDE BOTH BENT");
				break;
			case 0x1D8E3:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB SIDE INDEX HINGE");
				break;
			case 0x1D8E4:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB FORWARD INDEX STRAIGHT");
				break;
			case 0x1D8E5:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB FORWARD INDEX BENT");
				break;
			case 0x1D8E6:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB HOOK");
				break;
			case 0x1D8E7:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB CURLICUE");
				break;
			case 0x1D8E8:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB CURVE THUMB INSIDE");
				break;
			case 0x1D8E9:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CLAW INDEX THUMB CURVE THUMB INSIDE");
				break;
			case 0x1D8EA:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB CURVE THUMB UNDER");
				break;
			case 0x1D8EB:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST INDEX THUMB CIRCLE");
				break;
			case 0x1D8EC:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP INDEX THUMB");
				break;
			case 0x1D8ED:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-CUP INDEX THUMB OPEN");
				break;
			case 0x1D8EE:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX THUMB OPEN");
				break;
			case 0x1D8EF:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX THUMB LARGE");
				break;
			case 0x1D8F0:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX THUMB");
				break;
			case 0x1D8F1:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-HINGE INDEX THUMB SMALL");
				break;
			case 0x1D8F2:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE INDEX THUMB OUT");
				break;
			case 0x1D8F3:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE INDEX THUMB IN");
				break;
			case 0x1D8F4:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-ANGLE INDEX THUMB");
				break;
			case 0x1D8F5:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB");
				break;
			case 0x1D8F6:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB HEEL");
				break;
			case 0x1D8F7:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB SIDE DIAGONAL");
				break;
			case 0x1D8F8:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB SIDE CONJOINED");
				break;
			case 0x1D8F9:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB SIDE BENT");
				break;
			case 0x1D8FA:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB FORWARD");
				break;
			case 0x1D8FB:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB BETWEEN INDEX MIDDLE");
				break;
			case 0x1D8FC:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB BETWEEN MIDDLE RING");
				break;
			case 0x1D8FD:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB BETWEEN RING LITTLE");
				break;
			case 0x1D8FE:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB UNDER TWO FINGERS");
				break;
			case 0x1D8FF:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB OVER TWO FINGERS");
				break;
			case 0x1D900:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB UNDER THREE FINGERS");
				break;
			case 0x1D901:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB UNDER FOUR FINGERS");
				break;
			case 0x1D902:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST THUMB OVER FOUR RAISED KNUCKLES");
				break;
			case 0x1D903:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST");
				break;
			case 0x1D904:
				strcpy_s(buf, buf_size, "SIGNWRITING HAND-FIST HEEL");
				break;
			case 0x1D905:
				strcpy_s(buf, buf_size, "SIGNWRITING TOUCH SINGLE");
				break;
			case 0x1D906:
				strcpy_s(buf, buf_size, "SIGNWRITING TOUCH MULTIPLE");
				break;
			case 0x1D907:
				strcpy_s(buf, buf_size, "SIGNWRITING TOUCH BETWEEN");
				break;
			case 0x1D908:
				strcpy_s(buf, buf_size, "SIGNWRITING GRASP SINGLE");
				break;
			case 0x1D909:
				strcpy_s(buf, buf_size, "SIGNWRITING GRASP MULTIPLE");
				break;
			case 0x1D90A:
				strcpy_s(buf, buf_size, "SIGNWRITING GRASP BETWEEN");
				break;
			case 0x1D90B:
				strcpy_s(buf, buf_size, "SIGNWRITING STRIKE SINGLE");
				break;
			case 0x1D90C:
				strcpy_s(buf, buf_size, "SIGNWRITING STRIKE MULTIPLE");
				break;
			case 0x1D90D:
				strcpy_s(buf, buf_size, "SIGNWRITING STRIKE BETWEEN");
				break;
			case 0x1D90E:
				strcpy_s(buf, buf_size, "SIGNWRITING BRUSH SINGLE");
				break;
			case 0x1D90F:
				strcpy_s(buf, buf_size, "SIGNWRITING BRUSH MULTIPLE");
				break;
			case 0x1D910:
				strcpy_s(buf, buf_size, "SIGNWRITING BRUSH BETWEEN");
				break;
			case 0x1D911:
				strcpy_s(buf, buf_size, "SIGNWRITING RUB SINGLE");
				break;
			case 0x1D912:
				strcpy_s(buf, buf_size, "SIGNWRITING RUB MULTIPLE");
				break;
			case 0x1D913:
				strcpy_s(buf, buf_size, "SIGNWRITING RUB BETWEEN");
				break;
			case 0x1D914:
				strcpy_s(buf, buf_size, "SIGNWRITING SURFACE SYMBOLS");
				break;
			case 0x1D915:
				strcpy_s(buf, buf_size, "SIGNWRITING SURFACE BETWEEN");
				break;
			case 0x1D916:
				strcpy_s(buf, buf_size, "SIGNWRITING SQUEEZE LARGE SINGLE");
				break;
			case 0x1D917:
				strcpy_s(buf, buf_size, "SIGNWRITING SQUEEZE SMALL SINGLE");
				break;
			case 0x1D918:
				strcpy_s(buf, buf_size, "SIGNWRITING SQUEEZE LARGE MULTIPLE");
				break;
			case 0x1D919:
				strcpy_s(buf, buf_size, "SIGNWRITING SQUEEZE SMALL MULTIPLE");
				break;
			case 0x1D91A:
				strcpy_s(buf, buf_size, "SIGNWRITING SQUEEZE SEQUENTIAL");
				break;
			case 0x1D91B:
				strcpy_s(buf, buf_size, "SIGNWRITING FLICK LARGE SINGLE");
				break;
			case 0x1D91C:
				strcpy_s(buf, buf_size, "SIGNWRITING FLICK SMALL SINGLE");
				break;
			case 0x1D91D:
				strcpy_s(buf, buf_size, "SIGNWRITING FLICK LARGE MULTIPLE");
				break;
			case 0x1D91E:
				strcpy_s(buf, buf_size, "SIGNWRITING FLICK SMALL MULTIPLE");
				break;
			case 0x1D91F:
				strcpy_s(buf, buf_size, "SIGNWRITING FLICK SEQUENTIAL");
				break;
			case 0x1D920:
				strcpy_s(buf, buf_size, "SIGNWRITING SQUEEZE FLICK ALTERNATING");
				break;
			case 0x1D921:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-HINGE UP DOWN LARGE");
				break;
			case 0x1D922:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-HINGE UP DOWN SMALL");
				break;
			case 0x1D923:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-HINGE UP SEQUENTIAL");
				break;
			case 0x1D924:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-HINGE DOWN SEQUENTIAL");
				break;
			case 0x1D925:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-HINGE UP DOWN ALTERNATING LARGE");
				break;
			case 0x1D926:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-HINGE UP DOWN ALTERNATING SMALL");
				break;
			case 0x1D927:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-HINGE SIDE TO SIDE SCISSORS");
				break;
			case 0x1D928:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE FINGER CONTACT");
				break;
			case 0x1D929:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE FINGER CONTACT");
				break;
			case 0x1D92A:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE SINGLE STRAIGHT SMALL");
				break;
			case 0x1D92B:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE SINGLE STRAIGHT MEDIUM");
				break;
			case 0x1D92C:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE SINGLE STRAIGHT LARGE");
				break;
			case 0x1D92D:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE SINGLE STRAIGHT LARGEST");
				break;
			case 0x1D92E:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE SINGLE WRIST FLEX");
				break;
			case 0x1D92F:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE DOUBLE STRAIGHT");
				break;
			case 0x1D930:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE DOUBLE WRIST FLEX");
				break;
			case 0x1D931:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE DOUBLE ALTERNATING");
				break;
			case 0x1D932:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE DOUBLE ALTERNATING WRIST FLEX");
				break;
			case 0x1D933:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CROSS");
				break;
			case 0x1D934:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE TRIPLE STRAIGHT MOVEMENT");
				break;
			case 0x1D935:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE TRIPLE WRIST FLEX");
				break;
			case 0x1D936:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE TRIPLE ALTERNATING");
				break;
			case 0x1D937:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE TRIPLE ALTERNATING WRIST FLEX");
				break;
			case 0x1D938:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE BEND SMALL");
				break;
			case 0x1D939:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE BEND MEDIUM");
				break;
			case 0x1D93A:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE BEND LARGE");
				break;
			case 0x1D93B:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CORNER SMALL");
				break;
			case 0x1D93C:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CORNER MEDIUM");
				break;
			case 0x1D93D:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CORNER LARGE");
				break;
			case 0x1D93E:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CORNER ROTATION");
				break;
			case 0x1D93F:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CHECK SMALL");
				break;
			case 0x1D940:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CHECK MEDIUM");
				break;
			case 0x1D941:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CHECK LARGE");
				break;
			case 0x1D942:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE BOX SMALL");
				break;
			case 0x1D943:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE BOX MEDIUM");
				break;
			case 0x1D944:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE BOX LARGE");
				break;
			case 0x1D945:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE ZIGZAG SMALL");
				break;
			case 0x1D946:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE ZIGZAG MEDIUM");
				break;
			case 0x1D947:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE ZIGZAG LARGE");
				break;
			case 0x1D948:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE PEAKS SMALL");
				break;
			case 0x1D949:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE PEAKS MEDIUM");
				break;
			case 0x1D94A:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE PEAKS LARGE");
				break;
			case 0x1D94B:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-WALLPLANE ROTATION-WALLPLANE SINGLE");
				break;
			case 0x1D94C:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-WALLPLANE ROTATION-WALLPLANE DOUBLE");
				break;
			case 0x1D94D:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-WALLPLANE ROTATION-WALLPLANE ALTERNATING");
				break;
			case 0x1D94E:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-WALLPLANE ROTATION-FLOORPLANE SINGLE");
				break;
			case 0x1D94F:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-WALLPLANE ROTATION-FLOORPLANE DOUBLE");
				break;
			case 0x1D950:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-WALLPLANE ROTATION-FLOORPLANE ALTERNATING");
				break;
			case 0x1D951:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-WALLPLANE SHAKING");
				break;
			case 0x1D952:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-WALLPLANE ARM SPIRAL SINGLE");
				break;
			case 0x1D953:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-WALLPLANE ARM SPIRAL DOUBLE");
				break;
			case 0x1D954:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-WALLPLANE ARM SPIRAL TRIPLE");
				break;
			case 0x1D955:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL AWAY SMALL");
				break;
			case 0x1D956:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL AWAY MEDIUM");
				break;
			case 0x1D957:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL AWAY LARGE");
				break;
			case 0x1D958:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL AWAY LARGEST");
				break;
			case 0x1D959:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL TOWARDS SMALL");
				break;
			case 0x1D95A:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL TOWARDS MEDIUM");
				break;
			case 0x1D95B:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL TOWARDS LARGE");
				break;
			case 0x1D95C:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL TOWARDS LARGEST");
				break;
			case 0x1D95D:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY SMALL");
				break;
			case 0x1D95E:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY MEDIUM");
				break;
			case 0x1D95F:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY LARGE");
				break;
			case 0x1D960:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL BETWEEN AWAY LARGEST");
				break;
			case 0x1D961:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS SMALL");
				break;
			case 0x1D962:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS MEDIUM");
				break;
			case 0x1D963:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS LARGE");
				break;
			case 0x1D964:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-DIAGONAL BETWEEN TOWARDS LARGEST");
				break;
			case 0x1D965:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT SMALL");
				break;
			case 0x1D966:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT MEDIUM");
				break;
			case 0x1D967:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT LARGE");
				break;
			case 0x1D968:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE SINGLE STRAIGHT LARGEST");
				break;
			case 0x1D969:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE SINGLE WRIST FLEX");
				break;
			case 0x1D96A:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE STRAIGHT");
				break;
			case 0x1D96B:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE WRIST FLEX");
				break;
			case 0x1D96C:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE ALTERNATING");
				break;
			case 0x1D96D:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE DOUBLE ALTERNATING WRIST FLEX");
				break;
			case 0x1D96E:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CROSS");
				break;
			case 0x1D96F:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE STRAIGHT MOVEMENT");
				break;
			case 0x1D970:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE WRIST FLEX");
				break;
			case 0x1D971:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE ALTERNATING MOVEMENT");
				break;
			case 0x1D972:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE TRIPLE ALTERNATING WRIST FLEX");
				break;
			case 0x1D973:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE BEND");
				break;
			case 0x1D974:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CORNER SMALL");
				break;
			case 0x1D975:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CORNER MEDIUM");
				break;
			case 0x1D976:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CORNER LARGE");
				break;
			case 0x1D977:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CHECK");
				break;
			case 0x1D978:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE BOX SMALL");
				break;
			case 0x1D979:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE BOX MEDIUM");
				break;
			case 0x1D97A:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE BOX LARGE");
				break;
			case 0x1D97B:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE ZIGZAG SMALL");
				break;
			case 0x1D97C:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE ZIGZAG MEDIUM");
				break;
			case 0x1D97D:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE ZIGZAG LARGE");
				break;
			case 0x1D97E:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE PEAKS SMALL");
				break;
			case 0x1D97F:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE PEAKS MEDIUM");
				break;
			case 0x1D980:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE PEAKS LARGE");
				break;
			case 0x1D981:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-FLOORPLANE ROTATION-FLOORPLANE SINGLE");
				break;
			case 0x1D982:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-FLOORPLANE ROTATION-FLOORPLANE DOUBLE");
				break;
			case 0x1D983:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-FLOORPLANE ROTATION-FLOORPLANE ALTERNATING");
				break;
			case 0x1D984:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-FLOORPLANE ROTATION-WALLPLANE SINGLE");
				break;
			case 0x1D985:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-FLOORPLANE ROTATION-WALLPLANE DOUBLE");
				break;
			case 0x1D986:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-FLOORPLANE ROTATION-WALLPLANE ALTERNATING");
				break;
			case 0x1D987:
				strcpy_s(buf, buf_size, "SIGNWRITING TRAVEL-FLOORPLANE SHAKING");
				break;
			case 0x1D988:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER SMALL");
				break;
			case 0x1D989:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER MEDIUM");
				break;
			case 0x1D98A:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER LARGE");
				break;
			case 0x1D98B:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE QUARTER LARGEST");
				break;
			case 0x1D98C:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE SMALL");
				break;
			case 0x1D98D:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE MEDIUM");
				break;
			case 0x1D98E:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE LARGE");
				break;
			case 0x1D98F:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE HALF-CIRCLE LARGEST");
				break;
			case 0x1D990:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE THREE-QUARTER CIRCLE SMALL");
				break;
			case 0x1D991:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE THREE-QUARTER CIRCLE MEDIUM");
				break;
			case 0x1D992:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE HUMP SMALL");
				break;
			case 0x1D993:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE HUMP MEDIUM");
				break;
			case 0x1D994:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE HUMP LARGE");
				break;
			case 0x1D995:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE LOOP SMALL");
				break;
			case 0x1D996:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE LOOP MEDIUM");
				break;
			case 0x1D997:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE LOOP LARGE");
				break;
			case 0x1D998:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE LOOP SMALL DOUBLE");
				break;
			case 0x1D999:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE DOUBLE SMALL");
				break;
			case 0x1D99A:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE DOUBLE MEDIUM");
				break;
			case 0x1D99B:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE DOUBLE LARGE");
				break;
			case 0x1D99C:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE TRIPLE SMALL");
				break;
			case 0x1D99D:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE TRIPLE MEDIUM");
				break;
			case 0x1D99E:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE CURVE TRIPLE LARGE");
				break;
			case 0x1D99F:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE THEN STRAIGHT");
				break;
			case 0x1D9A0:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVED CROSS SMALL");
				break;
			case 0x1D9A1:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVED CROSS MEDIUM");
				break;
			case 0x1D9A2:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-WALLPLANE SINGLE");
				break;
			case 0x1D9A3:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-WALLPLANE DOUBLE");
				break;
			case 0x1D9A4:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-WALLPLANE ALTERNATE");
				break;
			case 0x1D9A5:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE SHAKING");
				break;
			case 0x1D9A6:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE HITTING FRONT WALL");
				break;
			case 0x1D9A7:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE HUMP HITTING FRONT WALL");
				break;
			case 0x1D9A8:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE LOOP HITTING FRONT WALL");
				break;
			case 0x1D9A9:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE HITTING FRONT WALL");
				break;
			case 0x1D9AA:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-WALLPLANE SINGLE HITTING FRONT WALL");
				break;
			case 0x1D9AB:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-WALLPLANE DOUBLE HITTING FRONT WALL");
				break;
			case 0x1D9AC:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-WALLPLANE ALTERNATING HITTING FRONT WALL");
				break;
			case 0x1D9AD:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE CURVE HITTING CHEST");
				break;
			case 0x1D9AE:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE HUMP HITTING CHEST");
				break;
			case 0x1D9AF:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE LOOP HITTING CHEST");
				break;
			case 0x1D9B0:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE HITTING CHEST");
				break;
			case 0x1D9B1:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-WALLPLANE SINGLE HITTING CHEST");
				break;
			case 0x1D9B2:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-WALLPLANE DOUBLE HITTING CHEST");
				break;
			case 0x1D9B3:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-WALLPLANE ALTERNATING HITTING CHEST");
				break;
			case 0x1D9B4:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE DIAGONAL PATH SMALL");
				break;
			case 0x1D9B5:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE DIAGONAL PATH MEDIUM");
				break;
			case 0x1D9B6:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WAVE DIAGONAL PATH LARGE");
				break;
			case 0x1D9B7:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING CEILING SMALL");
				break;
			case 0x1D9B8:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING CEILING LARGE");
				break;
			case 0x1D9B9:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING SMALL DOUBLE");
				break;
			case 0x1D9BA:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING LARGE DOUBLE");
				break;
			case 0x1D9BB:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING SMALL TRIPLE");
				break;
			case 0x1D9BC:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING CEILING LARGE TRIPLE");
				break;
			case 0x1D9BD:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING SMALL SINGLE");
				break;
			case 0x1D9BE:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING LARGE SINGLE");
				break;
			case 0x1D9BF:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING SMALL DOUBLE");
				break;
			case 0x1D9C0:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING CEILING LARGE DOUBLE");
				break;
			case 0x1D9C1:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE WAVE HITTING CEILING SMALL");
				break;
			case 0x1D9C2:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE WAVE HITTING CEILING LARGE");
				break;
			case 0x1D9C3:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-FLOORPLANE SINGLE HITTING CEILING");
				break;
			case 0x1D9C4:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-FLOORPLANE DOUBLE HITTING CEILING");
				break;
			case 0x1D9C5:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-FLOORPLANE ALTERNATING HITTING CEILING");
				break;
			case 0x1D9C6:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING FLOOR SMALL");
				break;
			case 0x1D9C7:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CURVE HITTING FLOOR LARGE");
				break;
			case 0x1D9C8:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING FLOOR SMALL DOUBLE");
				break;
			case 0x1D9C9:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING FLOOR LARGE DOUBLE");
				break;
			case 0x1D9CA:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING FLOOR TRIPLE SMALL TRIPLE");
				break;
			case 0x1D9CB:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE HUMP HITTING FLOOR TRIPLE LARGE TRIPLE");
				break;
			case 0x1D9CC:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING FLOOR SMALL SINGLE");
				break;
			case 0x1D9CD:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING FLOOR LARGE SINGLE");
				break;
			case 0x1D9CE:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING FLOOR SMALL DOUBLE");
				break;
			case 0x1D9CF:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE LOOP HITTING FLOOR LARGE DOUBLE");
				break;
			case 0x1D9D0:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE WAVE HITTING FLOOR SMALL");
				break;
			case 0x1D9D1:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE WAVE HITTING FLOOR LARGE");
				break;
			case 0x1D9D2:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-FLOORPLANE SINGLE HITTING FLOOR");
				break;
			case 0x1D9D3:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-FLOORPLANE DOUBLE HITTING FLOOR");
				break;
			case 0x1D9D4:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-FLOORPLANE ALTERNATING HITTING FLOOR");
				break;
			case 0x1D9D5:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CURVE SMALL");
				break;
			case 0x1D9D6:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CURVE MEDIUM");
				break;
			case 0x1D9D7:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CURVE LARGE");
				break;
			case 0x1D9D8:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CURVE LARGEST");
				break;
			case 0x1D9D9:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE CURVE COMBINED");
				break;
			case 0x1D9DA:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE HUMP SMALL");
				break;
			case 0x1D9DB:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE LOOP SMALL");
				break;
			case 0x1D9DC:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE WAVE SNAKE");
				break;
			case 0x1D9DD:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE WAVE SMALL");
				break;
			case 0x1D9DE:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE WAVE LARGE");
				break;
			case 0x1D9DF:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-FLOORPLANE SINGLE");
				break;
			case 0x1D9E0:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-FLOORPLANE DOUBLE");
				break;
			case 0x1D9E1:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION-FLOORPLANE ALTERNATING");
				break;
			case 0x1D9E2:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE SHAKING PARALLEL");
				break;
			case 0x1D9E3:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL SINGLE");
				break;
			case 0x1D9E4:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM SINGLE");
				break;
			case 0x1D9E5:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE SMALL DOUBLE");
				break;
			case 0x1D9E6:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE ARM CIRCLE MEDIUM DOUBLE");
				break;
			case 0x1D9E7:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL SINGLE");
				break;
			case 0x1D9E8:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM SINGLE");
				break;
			case 0x1D9E9:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE SINGLE");
				break;
			case 0x1D9EA:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL SMALL DOUBLE");
				break;
			case 0x1D9EB:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL MEDIUM DOUBLE");
				break;
			case 0x1D9EC:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE ARM CIRCLE HITTING WALL LARGE DOUBLE");
				break;
			case 0x1D9ED:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT SINGLE");
				break;
			case 0x1D9EE:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE WRIST CIRCLE FRONT DOUBLE");
				break;
			case 0x1D9EF:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL SINGLE");
				break;
			case 0x1D9F0:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE WRIST CIRCLE HITTING WALL DOUBLE");
				break;
			case 0x1D9F1:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES SINGLE");
				break;
			case 0x1D9F2:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE FINGER CIRCLES DOUBLE");
				break;
			case 0x1D9F3:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL SINGLE");
				break;
			case 0x1D9F4:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE FINGER CIRCLES HITTING WALL DOUBLE");
				break;
			case 0x1D9F5:
				strcpy_s(buf, buf_size, "SIGNWRITING DYNAMIC ARROWHEAD SMALL");
				break;
			case 0x1D9F6:
				strcpy_s(buf, buf_size, "SIGNWRITING DYNAMIC ARROWHEAD LARGE");
				break;
			case 0x1D9F7:
				strcpy_s(buf, buf_size, "SIGNWRITING DYNAMIC FAST");
				break;
			case 0x1D9F8:
				strcpy_s(buf, buf_size, "SIGNWRITING DYNAMIC SLOW");
				break;
			case 0x1D9F9:
				strcpy_s(buf, buf_size, "SIGNWRITING DYNAMIC TENSE");
				break;
			case 0x1D9FA:
				strcpy_s(buf, buf_size, "SIGNWRITING DYNAMIC RELAXED");
				break;
			case 0x1D9FB:
				strcpy_s(buf, buf_size, "SIGNWRITING DYNAMIC SIMULTANEOUS");
				break;
			case 0x1D9FC:
				strcpy_s(buf, buf_size, "SIGNWRITING DYNAMIC SIMULTANEOUS ALTERNATING");
				break;
			case 0x1D9FD:
				strcpy_s(buf, buf_size, "SIGNWRITING DYNAMIC EVERY OTHER TIME");
				break;
			case 0x1D9FE:
				strcpy_s(buf, buf_size, "SIGNWRITING DYNAMIC GRADUAL");
				break;
			case 0x1D9FF:
				strcpy_s(buf, buf_size, "SIGNWRITING HEAD");
				break;
			case 0x1DA00:
				strcpy_s(buf, buf_size, "SIGNWRITING HEAD RIM");
				break;
			case 0x1DA01:
				strcpy_s(buf, buf_size, "SIGNWRITING HEAD MOVEMENT-WALLPLANE STRAIGHT");
				break;
			case 0x1DA02:
				strcpy_s(buf, buf_size, "SIGNWRITING HEAD MOVEMENT-WALLPLANE TILT");
				break;
			case 0x1DA03:
				strcpy_s(buf, buf_size, "SIGNWRITING HEAD MOVEMENT-FLOORPLANE STRAIGHT");
				break;
			case 0x1DA04:
				strcpy_s(buf, buf_size, "SIGNWRITING HEAD MOVEMENT-WALLPLANE CURVE");
				break;
			case 0x1DA05:
				strcpy_s(buf, buf_size, "SIGNWRITING HEAD MOVEMENT-FLOORPLANE CURVE");
				break;
			case 0x1DA06:
				strcpy_s(buf, buf_size, "SIGNWRITING HEAD MOVEMENT CIRCLE");
				break;
			case 0x1DA07:
				strcpy_s(buf, buf_size, "SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING");
				break;
			case 0x1DA08:
				strcpy_s(buf, buf_size, "SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN");
				break;
			case 0x1DA09:
				strcpy_s(buf, buf_size, "SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN TILTING");
				break;
			case 0x1DA0A:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEBROWS STRAIGHT UP");
				break;
			case 0x1DA0B:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEBROWS STRAIGHT NEUTRAL");
				break;
			case 0x1DA0C:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEBROWS STRAIGHT DOWN");
				break;
			case 0x1DA0D:
				strcpy_s(buf, buf_size, "SIGNWRITING DREAMY EYEBROWS NEUTRAL DOWN");
				break;
			case 0x1DA0E:
				strcpy_s(buf, buf_size, "SIGNWRITING DREAMY EYEBROWS DOWN NEUTRAL");
				break;
			case 0x1DA0F:
				strcpy_s(buf, buf_size, "SIGNWRITING DREAMY EYEBROWS UP NEUTRAL");
				break;
			case 0x1DA10:
				strcpy_s(buf, buf_size, "SIGNWRITING DREAMY EYEBROWS NEUTRAL UP");
				break;
			case 0x1DA11:
				strcpy_s(buf, buf_size, "SIGNWRITING FOREHEAD NEUTRAL");
				break;
			case 0x1DA12:
				strcpy_s(buf, buf_size, "SIGNWRITING FOREHEAD CONTACT");
				break;
			case 0x1DA13:
				strcpy_s(buf, buf_size, "SIGNWRITING FOREHEAD WRINKLED");
				break;
			case 0x1DA14:
				strcpy_s(buf, buf_size, "SIGNWRITING EYES OPEN");
				break;
			case 0x1DA15:
				strcpy_s(buf, buf_size, "SIGNWRITING EYES SQUEEZED");
				break;
			case 0x1DA16:
				strcpy_s(buf, buf_size, "SIGNWRITING EYES CLOSED");
				break;
			case 0x1DA17:
				strcpy_s(buf, buf_size, "SIGNWRITING EYE BLINK SINGLE");
				break;
			case 0x1DA18:
				strcpy_s(buf, buf_size, "SIGNWRITING EYE BLINK MULTIPLE");
				break;
			case 0x1DA19:
				strcpy_s(buf, buf_size, "SIGNWRITING EYES HALF OPEN");
				break;
			case 0x1DA1A:
				strcpy_s(buf, buf_size, "SIGNWRITING EYES WIDE OPEN");
				break;
			case 0x1DA1B:
				strcpy_s(buf, buf_size, "SIGNWRITING EYES HALF CLOSED");
				break;
			case 0x1DA1C:
				strcpy_s(buf, buf_size, "SIGNWRITING EYES WIDENING MOVEMENT");
				break;
			case 0x1DA1D:
				strcpy_s(buf, buf_size, "SIGNWRITING EYE WINK");
				break;
			case 0x1DA1E:
				strcpy_s(buf, buf_size, "SIGNWRITING EYELASHES UP");
				break;
			case 0x1DA1F:
				strcpy_s(buf, buf_size, "SIGNWRITING EYELASHES DOWN");
				break;
			case 0x1DA20:
				strcpy_s(buf, buf_size, "SIGNWRITING EYELASHES FLUTTERING");
				break;
			case 0x1DA21:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT");
				break;
			case 0x1DA22:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT DOUBLE");
				break;
			case 0x1DA23:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT ALTERNATING");
				break;
			case 0x1DA24:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT");
				break;
			case 0x1DA25:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT DOUBLE");
				break;
			case 0x1DA26:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT ALTERNATING");
				break;
			case 0x1DA27:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEGAZE-WALLPLANE CURVED");
				break;
			case 0x1DA28:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEGAZE-FLOORPLANE CURVED");
				break;
			case 0x1DA29:
				strcpy_s(buf, buf_size, "SIGNWRITING EYEGAZE-WALLPLANE CIRCLING");
				break;
			case 0x1DA2A:
				strcpy_s(buf, buf_size, "SIGNWRITING CHEEKS PUFFED");
				break;
			case 0x1DA2B:
				strcpy_s(buf, buf_size, "SIGNWRITING CHEEKS NEUTRAL");
				break;
			case 0x1DA2C:
				strcpy_s(buf, buf_size, "SIGNWRITING CHEEKS SUCKED");
				break;
			case 0x1DA2D:
				strcpy_s(buf, buf_size, "SIGNWRITING TENSE CHEEKS HIGH");
				break;
			case 0x1DA2E:
				strcpy_s(buf, buf_size, "SIGNWRITING TENSE CHEEKS MIDDLE");
				break;
			case 0x1DA2F:
				strcpy_s(buf, buf_size, "SIGNWRITING TENSE CHEEKS LOW");
				break;
			case 0x1DA30:
				strcpy_s(buf, buf_size, "SIGNWRITING EARS");
				break;
			case 0x1DA31:
				strcpy_s(buf, buf_size, "SIGNWRITING NOSE NEUTRAL");
				break;
			case 0x1DA32:
				strcpy_s(buf, buf_size, "SIGNWRITING NOSE CONTACT");
				break;
			case 0x1DA33:
				strcpy_s(buf, buf_size, "SIGNWRITING NOSE WRINKLES");
				break;
			case 0x1DA34:
				strcpy_s(buf, buf_size, "SIGNWRITING NOSE WIGGLES");
				break;
			case 0x1DA35:
				strcpy_s(buf, buf_size, "SIGNWRITING AIR BLOWING OUT");
				break;
			case 0x1DA36:
				strcpy_s(buf, buf_size, "SIGNWRITING AIR SUCKING IN");
				break;
			case 0x1DA37:
				strcpy_s(buf, buf_size, "SIGNWRITING AIR BLOW SMALL ROTATIONS");
				break;
			case 0x1DA38:
				strcpy_s(buf, buf_size, "SIGNWRITING AIR SUCK SMALL ROTATIONS");
				break;
			case 0x1DA39:
				strcpy_s(buf, buf_size, "SIGNWRITING BREATH INHALE");
				break;
			case 0x1DA3A:
				strcpy_s(buf, buf_size, "SIGNWRITING BREATH EXHALE");
				break;
			case 0x1DA3B:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH CLOSED NEUTRAL");
				break;
			case 0x1DA3C:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH CLOSED FORWARD");
				break;
			case 0x1DA3D:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH CLOSED CONTACT");
				break;
			case 0x1DA3E:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH SMILE");
				break;
			case 0x1DA3F:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH SMILE WRINKLED");
				break;
			case 0x1DA40:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH SMILE OPEN");
				break;
			case 0x1DA41:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH FROWN");
				break;
			case 0x1DA42:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH FROWN WRINKLED");
				break;
			case 0x1DA43:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH FROWN OPEN");
				break;
			case 0x1DA44:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH OPEN CIRCLE");
				break;
			case 0x1DA45:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH OPEN FORWARD");
				break;
			case 0x1DA46:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH OPEN WRINKLED");
				break;
			case 0x1DA47:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH OPEN OVAL");
				break;
			case 0x1DA48:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH OPEN OVAL WRINKLED");
				break;
			case 0x1DA49:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH OPEN OVAL YAWN");
				break;
			case 0x1DA4A:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH OPEN RECTANGLE");
				break;
			case 0x1DA4B:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH OPEN RECTANGLE WRINKLED");
				break;
			case 0x1DA4C:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH OPEN RECTANGLE YAWN");
				break;
			case 0x1DA4D:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH KISS");
				break;
			case 0x1DA4E:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH KISS FORWARD");
				break;
			case 0x1DA4F:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH KISS WRINKLED");
				break;
			case 0x1DA50:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH TENSE");
				break;
			case 0x1DA51:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH TENSE FORWARD");
				break;
			case 0x1DA52:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH TENSE SUCKED");
				break;
			case 0x1DA53:
				strcpy_s(buf, buf_size, "SIGNWRITING LIPS PRESSED TOGETHER");
				break;
			case 0x1DA54:
				strcpy_s(buf, buf_size, "SIGNWRITING LIP LOWER OVER UPPER");
				break;
			case 0x1DA55:
				strcpy_s(buf, buf_size, "SIGNWRITING LIP UPPER OVER LOWER");
				break;
			case 0x1DA56:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH CORNERS");
				break;
			case 0x1DA57:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH WRINKLES SINGLE");
				break;
			case 0x1DA58:
				strcpy_s(buf, buf_size, "SIGNWRITING MOUTH WRINKLES DOUBLE");
				break;
			case 0x1DA59:
				strcpy_s(buf, buf_size, "SIGNWRITING TONGUE STICKING OUT FAR");
				break;
			case 0x1DA5A:
				strcpy_s(buf, buf_size, "SIGNWRITING TONGUE LICKING LIPS");
				break;
			case 0x1DA5B:
				strcpy_s(buf, buf_size, "SIGNWRITING TONGUE TIP BETWEEN LIPS");
				break;
			case 0x1DA5C:
				strcpy_s(buf, buf_size, "SIGNWRITING TONGUE TIP TOUCHING INSIDE MOUTH");
				break;
			case 0x1DA5D:
				strcpy_s(buf, buf_size, "SIGNWRITING TONGUE INSIDE MOUTH RELAXED");
				break;
			case 0x1DA5E:
				strcpy_s(buf, buf_size, "SIGNWRITING TONGUE MOVES AGAINST CHEEK");
				break;
			case 0x1DA5F:
				strcpy_s(buf, buf_size, "SIGNWRITING TONGUE CENTRE STICKING OUT");
				break;
			case 0x1DA60:
				strcpy_s(buf, buf_size, "SIGNWRITING TONGUE CENTRE INSIDE MOUTH");
				break;
			case 0x1DA61:
				strcpy_s(buf, buf_size, "SIGNWRITING TEETH");
				break;
			case 0x1DA62:
				strcpy_s(buf, buf_size, "SIGNWRITING TEETH MOVEMENT");
				break;
			case 0x1DA63:
				strcpy_s(buf, buf_size, "SIGNWRITING TEETH ON TONGUE");
				break;
			case 0x1DA64:
				strcpy_s(buf, buf_size, "SIGNWRITING TEETH ON TONGUE MOVEMENT");
				break;
			case 0x1DA65:
				strcpy_s(buf, buf_size, "SIGNWRITING TEETH ON LIPS");
				break;
			case 0x1DA66:
				strcpy_s(buf, buf_size, "SIGNWRITING TEETH ON LIPS MOVEMENT");
				break;
			case 0x1DA67:
				strcpy_s(buf, buf_size, "SIGNWRITING TEETH BITE LIPS");
				break;
			case 0x1DA68:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-WALLPLANE JAW");
				break;
			case 0x1DA69:
				strcpy_s(buf, buf_size, "SIGNWRITING MOVEMENT-FLOORPLANE JAW");
				break;
			case 0x1DA6A:
				strcpy_s(buf, buf_size, "SIGNWRITING NECK");
				break;
			case 0x1DA6B:
				strcpy_s(buf, buf_size, "SIGNWRITING HAIR");
				break;
			case 0x1DA6C:
				strcpy_s(buf, buf_size, "SIGNWRITING EXCITEMENT");
				break;
			case 0x1DA6D:
				strcpy_s(buf, buf_size, "SIGNWRITING SHOULDER HIP SPINE");
				break;
			case 0x1DA6E:
				strcpy_s(buf, buf_size, "SIGNWRITING SHOULDER HIP POSITIONS");
				break;
			case 0x1DA6F:
				strcpy_s(buf, buf_size, "SIGNWRITING WALLPLANE SHOULDER HIP MOVE");
				break;
			case 0x1DA70:
				strcpy_s(buf, buf_size, "SIGNWRITING FLOORPLANE SHOULDER HIP MOVE");
				break;
			case 0x1DA71:
				strcpy_s(buf, buf_size, "SIGNWRITING SHOULDER TILTING FROM WAIST");
				break;
			case 0x1DA72:
				strcpy_s(buf, buf_size, "SIGNWRITING TORSO-WALLPLANE STRAIGHT STRETCH");
				break;
			case 0x1DA73:
				strcpy_s(buf, buf_size, "SIGNWRITING TORSO-WALLPLANE CURVED BEND");
				break;
			case 0x1DA74:
				strcpy_s(buf, buf_size, "SIGNWRITING TORSO-FLOORPLANE TWISTING");
				break;
			case 0x1DA75:
				strcpy_s(buf, buf_size, "SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS");
				break;
			case 0x1DA76:
				strcpy_s(buf, buf_size, "SIGNWRITING LIMB COMBINATION");
				break;
			case 0x1DA77:
				strcpy_s(buf, buf_size, "SIGNWRITING LIMB LENGTH-1");
				break;
			case 0x1DA78:
				strcpy_s(buf, buf_size, "SIGNWRITING LIMB LENGTH-2");
				break;
			case 0x1DA79:
				strcpy_s(buf, buf_size, "SIGNWRITING LIMB LENGTH-3");
				break;
			case 0x1DA7A:
				strcpy_s(buf, buf_size, "SIGNWRITING LIMB LENGTH-4");
				break;
			case 0x1DA7B:
				strcpy_s(buf, buf_size, "SIGNWRITING LIMB LENGTH-5");
				break;
			case 0x1DA7C:
				strcpy_s(buf, buf_size, "SIGNWRITING LIMB LENGTH-6");
				break;
			case 0x1DA7D:
				strcpy_s(buf, buf_size, "SIGNWRITING LIMB LENGTH-7");
				break;
			case 0x1DA7E:
				strcpy_s(buf, buf_size, "SIGNWRITING FINGER");
				break;
			case 0x1DA7F:
				strcpy_s(buf, buf_size, "SIGNWRITING LOCATION-WALLPLANE SPACE");
				break;
			case 0x1DA80:
				strcpy_s(buf, buf_size, "SIGNWRITING LOCATION-FLOORPLANE SPACE");
				break;
			case 0x1DA81:
				strcpy_s(buf, buf_size, "SIGNWRITING LOCATION HEIGHT");
				break;
			case 0x1DA82:
				strcpy_s(buf, buf_size, "SIGNWRITING LOCATION WIDTH");
				break;
			case 0x1DA83:
				strcpy_s(buf, buf_size, "SIGNWRITING LOCATION DEPTH");
				break;
			case 0x1DA84:
				strcpy_s(buf, buf_size, "SIGNWRITING LOCATION HEAD NECK");
				break;
			case 0x1DA85:
				strcpy_s(buf, buf_size, "SIGNWRITING LOCATION TORSO");
				break;
			case 0x1DA86:
				strcpy_s(buf, buf_size, "SIGNWRITING LOCATION LIMBS DIGITS");
				break;
			case 0x1DA87:
				strcpy_s(buf, buf_size, "SIGNWRITING COMMA");
				break;
			case 0x1DA88:
				strcpy_s(buf, buf_size, "SIGNWRITING FULL STOP");
				break;
			case 0x1DA89:
				strcpy_s(buf, buf_size, "SIGNWRITING SEMICOLON");
				break;
			case 0x1DA8A:
				strcpy_s(buf, buf_size, "SIGNWRITING COLON");
				break;
			case 0x1DA8B:
				strcpy_s(buf, buf_size, "SIGNWRITING PARENTHESIS");
				break;
			case 0x1DA9B:
				strcpy_s(buf, buf_size, "SIGNWRITING FILL MODIFIER-2");
				break;
			case 0x1DA9C:
				strcpy_s(buf, buf_size, "SIGNWRITING FILL MODIFIER-3");
				break;
			case 0x1DA9D:
				strcpy_s(buf, buf_size, "SIGNWRITING FILL MODIFIER-4");
				break;
			case 0x1DA9E:
				strcpy_s(buf, buf_size, "SIGNWRITING FILL MODIFIER-5");
				break;
			case 0x1DA9F:
				strcpy_s(buf, buf_size, "SIGNWRITING FILL MODIFIER-6");
				break;
			case 0x1DAA1:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-2");
				break;
			case 0x1DAA2:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-3");
				break;
			case 0x1DAA3:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-4");
				break;
			case 0x1DAA4:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-5");
				break;
			case 0x1DAA5:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-6");
				break;
			case 0x1DAA6:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-7");
				break;
			case 0x1DAA7:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-8");
				break;
			case 0x1DAA8:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-9");
				break;
			case 0x1DAA9:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-10");
				break;
			case 0x1DAAA:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-11");
				break;
			case 0x1DAAB:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-12");
				break;
			case 0x1DAAC:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-13");
				break;
			case 0x1DAAD:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-14");
				break;
			case 0x1DAAE:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-15");
				break;
			case 0x1DAAF:
				strcpy_s(buf, buf_size, "SIGNWRITING ROTATION MODIFIER-16");
				break;
			case 0x1E000:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER AZU");
				break;
			case 0x1E001:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER BUKY");
				break;
			case 0x1E002:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER VEDE");
				break;
			case 0x1E003:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER GLAGOLI");
				break;
			case 0x1E004:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER DOBRO");
				break;
			case 0x1E005:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER YESTU");
				break;
			case 0x1E006:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER ZHIVETE");
				break;
			case 0x1E008:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER ZEMLJA");
				break;
			case 0x1E009:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER IZHE");
				break;
			case 0x1E00A:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER INITIAL IZHE");
				break;
			case 0x1E00B:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER I");
				break;
			case 0x1E00C:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER DJERVI");
				break;
			case 0x1E00D:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER KAKO");
				break;
			case 0x1E00E:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER LJUDIJE");
				break;
			case 0x1E00F:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER MYSLITE");
				break;
			case 0x1E010:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER NASHI");
				break;
			case 0x1E011:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER ONU");
				break;
			case 0x1E012:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER POKOJI");
				break;
			case 0x1E013:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER RITSI");
				break;
			case 0x1E014:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER SLOVO");
				break;
			case 0x1E015:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER TVRIDO");
				break;
			case 0x1E016:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER UKU");
				break;
			case 0x1E017:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER FRITU");
				break;
			case 0x1E018:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER HERU");
				break;
			case 0x1E01B:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER SHTA");
				break;
			case 0x1E01C:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER TSI");
				break;
			case 0x1E01D:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER CHRIVI");
				break;
			case 0x1E01E:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER SHA");
				break;
			case 0x1E01F:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER YERU");
				break;
			case 0x1E020:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER YERI");
				break;
			case 0x1E021:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER YATI");
				break;
			case 0x1E023:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER YU");
				break;
			case 0x1E024:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER SMALL YUS");
				break;
			case 0x1E026:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER YO");
				break;
			case 0x1E027:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER IOTATED SMALL YUS");
				break;
			case 0x1E028:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER BIG YUS");
				break;
			case 0x1E029:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER IOTATED BIG YUS");
				break;
			case 0x1E02A:
				strcpy_s(buf, buf_size, "COMBINING GLAGOLITIC LETTER FITA");
				break;
			case 0x1E100:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER MA");
				break;
			case 0x1E101:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER TSA");
				break;
			case 0x1E102:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NTA");
				break;
			case 0x1E103:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER TA");
				break;
			case 0x1E104:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER HA");
				break;
			case 0x1E105:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NA");
				break;
			case 0x1E106:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER XA");
				break;
			case 0x1E107:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NKA");
				break;
			case 0x1E108:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER CA");
				break;
			case 0x1E109:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER LA");
				break;
			case 0x1E10A:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER SA");
				break;
			case 0x1E10B:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER ZA");
				break;
			case 0x1E10C:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NCA");
				break;
			case 0x1E10D:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NTSA");
				break;
			case 0x1E10E:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER KA");
				break;
			case 0x1E10F:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER DA");
				break;
			case 0x1E110:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NYA");
				break;
			case 0x1E111:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NRA");
				break;
			case 0x1E112:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER VA");
				break;
			case 0x1E113:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NTXA");
				break;
			case 0x1E114:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER TXA");
				break;
			case 0x1E115:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER FA");
				break;
			case 0x1E116:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER RA");
				break;
			case 0x1E117:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER QA");
				break;
			case 0x1E118:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER YA");
				break;
			case 0x1E119:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NQA");
				break;
			case 0x1E11A:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER PA");
				break;
			case 0x1E11B:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER XYA");
				break;
			case 0x1E11C:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NPA");
				break;
			case 0x1E11D:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER DLA");
				break;
			case 0x1E11E:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER NPLA");
				break;
			case 0x1E11F:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER HAH");
				break;
			case 0x1E120:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER MLA");
				break;
			case 0x1E121:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER PLA");
				break;
			case 0x1E122:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER GA");
				break;
			case 0x1E123:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER RRA");
				break;
			case 0x1E124:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER A");
				break;
			case 0x1E125:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER AA");
				break;
			case 0x1E126:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER I");
				break;
			case 0x1E127:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER U");
				break;
			case 0x1E128:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER O");
				break;
			case 0x1E129:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER OO");
				break;
			case 0x1E12A:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER E");
				break;
			case 0x1E12B:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER EE");
				break;
			case 0x1E12C:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LETTER W");
				break;
			case 0x1E130:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG TONE-B");
				break;
			case 0x1E131:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG TONE-M");
				break;
			case 0x1E132:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG TONE-J");
				break;
			case 0x1E133:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG TONE-V");
				break;
			case 0x1E134:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG TONE-S");
				break;
			case 0x1E135:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG TONE-G");
				break;
			case 0x1E136:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG TONE-D");
				break;
			case 0x1E137:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG SIGN FOR PERSON");
				break;
			case 0x1E138:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG SIGN FOR THING");
				break;
			case 0x1E139:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG SIGN FOR LOCATION");
				break;
			case 0x1E13A:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG SIGN FOR ANIMAL");
				break;
			case 0x1E13B:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG SIGN FOR INVERTEBRATE");
				break;
			case 0x1E13C:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG SIGN XW XW");
				break;
			case 0x1E13D:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG SYLLABLE LENGTHENER");
				break;
			case 0x1E140:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG DIGIT ZERO");
				break;
			case 0x1E141:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG DIGIT ONE");
				break;
			case 0x1E142:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG DIGIT TWO");
				break;
			case 0x1E143:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG DIGIT THREE");
				break;
			case 0x1E144:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG DIGIT FOUR");
				break;
			case 0x1E145:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG DIGIT FIVE");
				break;
			case 0x1E146:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG DIGIT SIX");
				break;
			case 0x1E147:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG DIGIT SEVEN");
				break;
			case 0x1E148:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG DIGIT EIGHT");
				break;
			case 0x1E149:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG DIGIT NINE");
				break;
			case 0x1E14E:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG LOGOGRAM NYAJ");
				break;
			case 0x1E14F:
				strcpy_s(buf, buf_size, "NYIAKENG PUACHUE HMONG CIRCLED CA");
				break;
			case 0x1E2C0:
				strcpy_s(buf, buf_size, "WANCHO LETTER AA");
				break;
			case 0x1E2C1:
				strcpy_s(buf, buf_size, "WANCHO LETTER A");
				break;
			case 0x1E2C2:
				strcpy_s(buf, buf_size, "WANCHO LETTER BA");
				break;
			case 0x1E2C3:
				strcpy_s(buf, buf_size, "WANCHO LETTER CA");
				break;
			case 0x1E2C4:
				strcpy_s(buf, buf_size, "WANCHO LETTER DA");
				break;
			case 0x1E2C5:
				strcpy_s(buf, buf_size, "WANCHO LETTER GA");
				break;
			case 0x1E2C6:
				strcpy_s(buf, buf_size, "WANCHO LETTER YA");
				break;
			case 0x1E2C7:
				strcpy_s(buf, buf_size, "WANCHO LETTER PHA");
				break;
			case 0x1E2C8:
				strcpy_s(buf, buf_size, "WANCHO LETTER LA");
				break;
			case 0x1E2C9:
				strcpy_s(buf, buf_size, "WANCHO LETTER NA");
				break;
			case 0x1E2CA:
				strcpy_s(buf, buf_size, "WANCHO LETTER PA");
				break;
			case 0x1E2CB:
				strcpy_s(buf, buf_size, "WANCHO LETTER TA");
				break;
			case 0x1E2CC:
				strcpy_s(buf, buf_size, "WANCHO LETTER THA");
				break;
			case 0x1E2CD:
				strcpy_s(buf, buf_size, "WANCHO LETTER FA");
				break;
			case 0x1E2CE:
				strcpy_s(buf, buf_size, "WANCHO LETTER SA");
				break;
			case 0x1E2CF:
				strcpy_s(buf, buf_size, "WANCHO LETTER SHA");
				break;
			case 0x1E2D0:
				strcpy_s(buf, buf_size, "WANCHO LETTER JA");
				break;
			case 0x1E2D1:
				strcpy_s(buf, buf_size, "WANCHO LETTER ZA");
				break;
			case 0x1E2D2:
				strcpy_s(buf, buf_size, "WANCHO LETTER WA");
				break;
			case 0x1E2D3:
				strcpy_s(buf, buf_size, "WANCHO LETTER VA");
				break;
			case 0x1E2D4:
				strcpy_s(buf, buf_size, "WANCHO LETTER KA");
				break;
			case 0x1E2D5:
				strcpy_s(buf, buf_size, "WANCHO LETTER O");
				break;
			case 0x1E2D6:
				strcpy_s(buf, buf_size, "WANCHO LETTER AU");
				break;
			case 0x1E2D7:
				strcpy_s(buf, buf_size, "WANCHO LETTER RA");
				break;
			case 0x1E2D8:
				strcpy_s(buf, buf_size, "WANCHO LETTER MA");
				break;
			case 0x1E2D9:
				strcpy_s(buf, buf_size, "WANCHO LETTER KHA");
				break;
			case 0x1E2DA:
				strcpy_s(buf, buf_size, "WANCHO LETTER HA");
				break;
			case 0x1E2DB:
				strcpy_s(buf, buf_size, "WANCHO LETTER E");
				break;
			case 0x1E2DC:
				strcpy_s(buf, buf_size, "WANCHO LETTER I");
				break;
			case 0x1E2DD:
				strcpy_s(buf, buf_size, "WANCHO LETTER NGA");
				break;
			case 0x1E2DE:
				strcpy_s(buf, buf_size, "WANCHO LETTER U");
				break;
			case 0x1E2DF:
				strcpy_s(buf, buf_size, "WANCHO LETTER LLHA");
				break;
			case 0x1E2E0:
				strcpy_s(buf, buf_size, "WANCHO LETTER TSA");
				break;
			case 0x1E2E1:
				strcpy_s(buf, buf_size, "WANCHO LETTER TRA");
				break;
			case 0x1E2E2:
				strcpy_s(buf, buf_size, "WANCHO LETTER ONG");
				break;
			case 0x1E2E3:
				strcpy_s(buf, buf_size, "WANCHO LETTER AANG");
				break;
			case 0x1E2E4:
				strcpy_s(buf, buf_size, "WANCHO LETTER ANG");
				break;
			case 0x1E2E5:
				strcpy_s(buf, buf_size, "WANCHO LETTER ING");
				break;
			case 0x1E2E6:
				strcpy_s(buf, buf_size, "WANCHO LETTER ON");
				break;
			case 0x1E2E7:
				strcpy_s(buf, buf_size, "WANCHO LETTER EN");
				break;
			case 0x1E2E8:
				strcpy_s(buf, buf_size, "WANCHO LETTER AAN");
				break;
			case 0x1E2E9:
				strcpy_s(buf, buf_size, "WANCHO LETTER NYA");
				break;
			case 0x1E2EA:
				strcpy_s(buf, buf_size, "WANCHO LETTER UEN");
				break;
			case 0x1E2EB:
				strcpy_s(buf, buf_size, "WANCHO LETTER YIH");
				break;
			case 0x1E2EC:
				strcpy_s(buf, buf_size, "WANCHO TONE TUP");
				break;
			case 0x1E2ED:
				strcpy_s(buf, buf_size, "WANCHO TONE TUPNI");
				break;
			case 0x1E2EE:
				strcpy_s(buf, buf_size, "WANCHO TONE KOI");
				break;
			case 0x1E2EF:
				strcpy_s(buf, buf_size, "WANCHO TONE KOINI");
				break;
			case 0x1E2F0:
				strcpy_s(buf, buf_size, "WANCHO DIGIT ZERO");
				break;
			case 0x1E2F1:
				strcpy_s(buf, buf_size, "WANCHO DIGIT ONE");
				break;
			case 0x1E2F2:
				strcpy_s(buf, buf_size, "WANCHO DIGIT TWO");
				break;
			case 0x1E2F3:
				strcpy_s(buf, buf_size, "WANCHO DIGIT THREE");
				break;
			case 0x1E2F4:
				strcpy_s(buf, buf_size, "WANCHO DIGIT FOUR");
				break;
			case 0x1E2F5:
				strcpy_s(buf, buf_size, "WANCHO DIGIT FIVE");
				break;
			case 0x1E2F6:
				strcpy_s(buf, buf_size, "WANCHO DIGIT SIX");
				break;
			case 0x1E2F7:
				strcpy_s(buf, buf_size, "WANCHO DIGIT SEVEN");
				break;
			case 0x1E2F8:
				strcpy_s(buf, buf_size, "WANCHO DIGIT EIGHT");
				break;
			case 0x1E2F9:
				strcpy_s(buf, buf_size, "WANCHO DIGIT NINE");
				break;
			case 0x1E2FF:
				strcpy_s(buf, buf_size, "WANCHO NGUN SIGN");
				break;
			case 0x1E800:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M001 KI");
				break;
			case 0x1E801:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M002 KA");
				break;
			case 0x1E802:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M003 KU");
				break;
			case 0x1E803:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M065 KEE");
				break;
			case 0x1E804:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M095 KE");
				break;
			case 0x1E805:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M076 KOO");
				break;
			case 0x1E806:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M048 KO");
				break;
			case 0x1E807:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M179 KUA");
				break;
			case 0x1E808:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M004 WI");
				break;
			case 0x1E809:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M005 WA");
				break;
			case 0x1E80A:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M006 WU");
				break;
			case 0x1E80B:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M126 WEE");
				break;
			case 0x1E80C:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M118 WE");
				break;
			case 0x1E80D:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M114 WOO");
				break;
			case 0x1E80E:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M045 WO");
				break;
			case 0x1E80F:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M194 WUI");
				break;
			case 0x1E810:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M143 WEI");
				break;
			case 0x1E811:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M061 WVI");
				break;
			case 0x1E812:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M049 WVA");
				break;
			case 0x1E813:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M139 WVE");
				break;
			case 0x1E814:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M007 MIN");
				break;
			case 0x1E815:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M008 MAN");
				break;
			case 0x1E816:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M009 MUN");
				break;
			case 0x1E817:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M059 MEN");
				break;
			case 0x1E818:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M094 MON");
				break;
			case 0x1E819:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M154 MUAN");
				break;
			case 0x1E81A:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M189 MUEN");
				break;
			case 0x1E81B:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M010 BI");
				break;
			case 0x1E81C:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M011 BA");
				break;
			case 0x1E81D:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M012 BU");
				break;
			case 0x1E81E:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M150 BEE");
				break;
			case 0x1E81F:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M097 BE");
				break;
			case 0x1E820:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M103 BOO");
				break;
			case 0x1E821:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M138 BO");
				break;
			case 0x1E822:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M013 I");
				break;
			case 0x1E823:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M014 A");
				break;
			case 0x1E824:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M015 U");
				break;
			case 0x1E825:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M163 EE");
				break;
			case 0x1E826:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M100 E");
				break;
			case 0x1E827:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M165 OO");
				break;
			case 0x1E828:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M147 O");
				break;
			case 0x1E829:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M137 EI");
				break;
			case 0x1E82A:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M131 IN");
				break;
			case 0x1E82B:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M135 IN");
				break;
			case 0x1E82C:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M195 AN");
				break;
			case 0x1E82D:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M178 EN");
				break;
			case 0x1E82E:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M019 SI");
				break;
			case 0x1E82F:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M020 SA");
				break;
			case 0x1E830:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M021 SU");
				break;
			case 0x1E831:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M162 SEE");
				break;
			case 0x1E832:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M116 SE");
				break;
			case 0x1E833:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M136 SOO");
				break;
			case 0x1E834:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M079 SO");
				break;
			case 0x1E835:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M196 SIA");
				break;
			case 0x1E836:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M025 LI");
				break;
			case 0x1E837:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M026 LA");
				break;
			case 0x1E838:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M027 LU");
				break;
			case 0x1E839:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M084 LEE");
				break;
			case 0x1E83A:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M073 LE");
				break;
			case 0x1E83B:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M054 LOO");
				break;
			case 0x1E83C:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M153 LO");
				break;
			case 0x1E83D:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M110 LONG LE");
				break;
			case 0x1E83E:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M016 DI");
				break;
			case 0x1E83F:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M017 DA");
				break;
			case 0x1E840:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M018 DU");
				break;
			case 0x1E841:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M089 DEE");
				break;
			case 0x1E842:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M180 DOO");
				break;
			case 0x1E843:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M181 DO");
				break;
			case 0x1E844:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M022 TI");
				break;
			case 0x1E845:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M023 TA");
				break;
			case 0x1E846:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M024 TU");
				break;
			case 0x1E847:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M091 TEE");
				break;
			case 0x1E848:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M055 TE");
				break;
			case 0x1E849:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M104 TOO");
				break;
			case 0x1E84A:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M069 TO");
				break;
			case 0x1E84B:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M028 JI");
				break;
			case 0x1E84C:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M029 JA");
				break;
			case 0x1E84D:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M030 JU");
				break;
			case 0x1E84E:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M157 JEE");
				break;
			case 0x1E84F:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M113 JE");
				break;
			case 0x1E850:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M160 JOO");
				break;
			case 0x1E851:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M063 JO");
				break;
			case 0x1E852:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M175 LONG JO");
				break;
			case 0x1E853:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M031 YI");
				break;
			case 0x1E854:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M032 YA");
				break;
			case 0x1E855:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M033 YU");
				break;
			case 0x1E856:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M109 YEE");
				break;
			case 0x1E857:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M080 YE");
				break;
			case 0x1E858:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M141 YOO");
				break;
			case 0x1E859:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M121 YO");
				break;
			case 0x1E85A:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M034 FI");
				break;
			case 0x1E85B:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M035 FA");
				break;
			case 0x1E85C:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M036 FU");
				break;
			case 0x1E85D:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M078 FEE");
				break;
			case 0x1E85E:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M075 FE");
				break;
			case 0x1E85F:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M133 FOO");
				break;
			case 0x1E860:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M088 FO");
				break;
			case 0x1E861:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M197 FUA");
				break;
			case 0x1E862:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M101 FAN");
				break;
			case 0x1E863:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M037 NIN");
				break;
			case 0x1E864:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M038 NAN");
				break;
			case 0x1E865:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M039 NUN");
				break;
			case 0x1E866:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M117 NEN");
				break;
			case 0x1E867:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M169 NON");
				break;
			case 0x1E868:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M176 HI");
				break;
			case 0x1E869:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M041 HA");
				break;
			case 0x1E86A:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M186 HU");
				break;
			case 0x1E86B:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M040 HEE");
				break;
			case 0x1E86C:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M096 HE");
				break;
			case 0x1E86D:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M042 HOO");
				break;
			case 0x1E86E:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M140 HO");
				break;
			case 0x1E86F:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M083 HEEI");
				break;
			case 0x1E870:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M128 HOOU");
				break;
			case 0x1E871:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M053 HIN");
				break;
			case 0x1E872:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M130 HAN");
				break;
			case 0x1E873:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M087 HUN");
				break;
			case 0x1E874:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M052 HEN");
				break;
			case 0x1E875:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M193 HON");
				break;
			case 0x1E876:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M046 HUAN");
				break;
			case 0x1E877:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M090 NGGI");
				break;
			case 0x1E878:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M043 NGGA");
				break;
			case 0x1E879:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M082 NGGU");
				break;
			case 0x1E87A:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M115 NGGEE");
				break;
			case 0x1E87B:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M146 NGGE");
				break;
			case 0x1E87C:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M156 NGGOO");
				break;
			case 0x1E87D:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M120 NGGO");
				break;
			case 0x1E87E:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M159 NGGAA");
				break;
			case 0x1E87F:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M127 NGGUA");
				break;
			case 0x1E880:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M086 LONG NGGE");
				break;
			case 0x1E881:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M106 LONG NGGOO");
				break;
			case 0x1E882:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M183 LONG NGGO");
				break;
			case 0x1E883:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M155 GI");
				break;
			case 0x1E884:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M111 GA");
				break;
			case 0x1E885:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M168 GU");
				break;
			case 0x1E886:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M190 GEE");
				break;
			case 0x1E887:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M166 GUEI");
				break;
			case 0x1E888:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M167 GUAN");
				break;
			case 0x1E889:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M184 NGEN");
				break;
			case 0x1E88A:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M057 NGON");
				break;
			case 0x1E88B:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M177 NGUAN");
				break;
			case 0x1E88C:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M068 PI");
				break;
			case 0x1E88D:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M099 PA");
				break;
			case 0x1E88E:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M050 PU");
				break;
			case 0x1E88F:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M081 PEE");
				break;
			case 0x1E890:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M051 PE");
				break;
			case 0x1E891:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M102 POO");
				break;
			case 0x1E892:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M066 PO");
				break;
			case 0x1E893:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M145 MBI");
				break;
			case 0x1E894:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M062 MBA");
				break;
			case 0x1E895:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M122 MBU");
				break;
			case 0x1E896:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M047 MBEE");
				break;
			case 0x1E897:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M188 MBEE");
				break;
			case 0x1E898:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M072 MBE");
				break;
			case 0x1E899:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M172 MBOO");
				break;
			case 0x1E89A:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M174 MBO");
				break;
			case 0x1E89B:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M187 MBUU");
				break;
			case 0x1E89C:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M161 LONG MBE");
				break;
			case 0x1E89D:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M105 LONG MBOO");
				break;
			case 0x1E89E:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M142 LONG MBO");
				break;
			case 0x1E89F:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M132 KPI");
				break;
			case 0x1E8A0:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M092 KPA");
				break;
			case 0x1E8A1:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M074 KPU");
				break;
			case 0x1E8A2:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M044 KPEE");
				break;
			case 0x1E8A3:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M108 KPE");
				break;
			case 0x1E8A4:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M112 KPOO");
				break;
			case 0x1E8A5:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M158 KPO");
				break;
			case 0x1E8A6:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M124 GBI");
				break;
			case 0x1E8A7:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M056 GBA");
				break;
			case 0x1E8A8:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M148 GBU");
				break;
			case 0x1E8A9:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M093 GBEE");
				break;
			case 0x1E8AA:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M107 GBE");
				break;
			case 0x1E8AB:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M071 GBOO");
				break;
			case 0x1E8AC:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M070 GBO");
				break;
			case 0x1E8AD:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M171 RA");
				break;
			case 0x1E8AE:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M123 NDI");
				break;
			case 0x1E8AF:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M129 NDA");
				break;
			case 0x1E8B0:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M125 NDU");
				break;
			case 0x1E8B1:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M191 NDEE");
				break;
			case 0x1E8B2:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M119 NDE");
				break;
			case 0x1E8B3:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M067 NDOO");
				break;
			case 0x1E8B4:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M064 NDO");
				break;
			case 0x1E8B5:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M152 NJA");
				break;
			case 0x1E8B6:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M192 NJU");
				break;
			case 0x1E8B7:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M149 NJEE");
				break;
			case 0x1E8B8:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M134 NJOO");
				break;
			case 0x1E8B9:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M182 VI");
				break;
			case 0x1E8BA:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M185 VA");
				break;
			case 0x1E8BB:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M151 VU");
				break;
			case 0x1E8BC:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M173 VEE");
				break;
			case 0x1E8BD:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M085 VE");
				break;
			case 0x1E8BE:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M144 VOO");
				break;
			case 0x1E8BF:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M077 VO");
				break;
			case 0x1E8C0:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M164 NYIN");
				break;
			case 0x1E8C1:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M058 NYAN");
				break;
			case 0x1E8C2:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M170 NYUN");
				break;
			case 0x1E8C3:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M098 NYEN");
				break;
			case 0x1E8C4:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI SYLLABLE M060 NYON");
				break;
			case 0x1E8C7:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI DIGIT ONE");
				break;
			case 0x1E8C8:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI DIGIT TWO");
				break;
			case 0x1E8C9:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI DIGIT THREE");
				break;
			case 0x1E8CA:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI DIGIT FOUR");
				break;
			case 0x1E8CB:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI DIGIT FIVE");
				break;
			case 0x1E8CC:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI DIGIT SIX");
				break;
			case 0x1E8CD:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI DIGIT SEVEN");
				break;
			case 0x1E8CE:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI DIGIT EIGHT");
				break;
			case 0x1E8CF:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI DIGIT NINE");
				break;
			case 0x1E8D0:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI COMBINING NUMBER TEENS");
				break;
			case 0x1E8D1:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI COMBINING NUMBER TENS");
				break;
			case 0x1E8D2:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI COMBINING NUMBER HUNDREDS");
				break;
			case 0x1E8D3:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI COMBINING NUMBER THOUSANDS");
				break;
			case 0x1E8D4:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS");
				break;
			case 0x1E8D5:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS");
				break;
			case 0x1E8D6:
				strcpy_s(buf, buf_size, "MENDE KIKAKUI COMBINING NUMBER MILLIONS");
				break;
			case 0x1E900:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER ALIF");
				break;
			case 0x1E901:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER DAALI");
				break;
			case 0x1E902:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER LAAM");
				break;
			case 0x1E903:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER MIIM");
				break;
			case 0x1E904:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER BA");
				break;
			case 0x1E905:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER SINNYIIYHE");
				break;
			case 0x1E906:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER PE");
				break;
			case 0x1E907:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER BHE");
				break;
			case 0x1E908:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER RA");
				break;
			case 0x1E909:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER E");
				break;
			case 0x1E90A:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER FA");
				break;
			case 0x1E90B:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER I");
				break;
			case 0x1E90C:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER O");
				break;
			case 0x1E90D:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER DHA");
				break;
			case 0x1E90E:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER YHE");
				break;
			case 0x1E90F:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER WAW");
				break;
			case 0x1E910:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER NUN");
				break;
			case 0x1E911:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER KAF");
				break;
			case 0x1E912:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER YA");
				break;
			case 0x1E913:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER U");
				break;
			case 0x1E914:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER JIIM");
				break;
			case 0x1E915:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER CHI");
				break;
			case 0x1E916:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER HA");
				break;
			case 0x1E917:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER QAAF");
				break;
			case 0x1E918:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER GA");
				break;
			case 0x1E919:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER NYA");
				break;
			case 0x1E91A:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER TU");
				break;
			case 0x1E91B:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER NHA");
				break;
			case 0x1E91C:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER VA");
				break;
			case 0x1E91D:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER KHA");
				break;
			case 0x1E91E:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER GBE");
				break;
			case 0x1E91F:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER ZAL");
				break;
			case 0x1E920:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER KPO");
				break;
			case 0x1E921:
				strcpy_s(buf, buf_size, "ADLAM CAPITAL LETTER SHA");
				break;
			case 0x1E922:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER ALIF");
				break;
			case 0x1E923:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER DAALI");
				break;
			case 0x1E924:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER LAAM");
				break;
			case 0x1E925:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER MIIM");
				break;
			case 0x1E926:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER BA");
				break;
			case 0x1E927:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER SINNYIIYHE");
				break;
			case 0x1E928:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER PE");
				break;
			case 0x1E929:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER BHE");
				break;
			case 0x1E92A:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER RA");
				break;
			case 0x1E92B:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER E");
				break;
			case 0x1E92C:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER FA");
				break;
			case 0x1E92D:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER I");
				break;
			case 0x1E92E:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER O");
				break;
			case 0x1E92F:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER DHA");
				break;
			case 0x1E930:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER YHE");
				break;
			case 0x1E931:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER WAW");
				break;
			case 0x1E932:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER NUN");
				break;
			case 0x1E933:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER KAF");
				break;
			case 0x1E934:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER YA");
				break;
			case 0x1E935:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER U");
				break;
			case 0x1E936:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER JIIM");
				break;
			case 0x1E937:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER CHI");
				break;
			case 0x1E938:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER HA");
				break;
			case 0x1E939:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER QAAF");
				break;
			case 0x1E93A:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER GA");
				break;
			case 0x1E93B:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER NYA");
				break;
			case 0x1E93C:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER TU");
				break;
			case 0x1E93D:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER NHA");
				break;
			case 0x1E93E:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER VA");
				break;
			case 0x1E93F:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER KHA");
				break;
			case 0x1E940:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER GBE");
				break;
			case 0x1E941:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER ZAL");
				break;
			case 0x1E942:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER KPO");
				break;
			case 0x1E943:
				strcpy_s(buf, buf_size, "ADLAM SMALL LETTER SHA");
				break;
			case 0x1E944:
				strcpy_s(buf, buf_size, "ADLAM ALIF LENGTHENER");
				break;
			case 0x1E945:
				strcpy_s(buf, buf_size, "ADLAM VOWEL LENGTHENER");
				break;
			case 0x1E946:
				strcpy_s(buf, buf_size, "ADLAM GEMINATION MARK");
				break;
			case 0x1E947:
				strcpy_s(buf, buf_size, "ADLAM HAMZA");
				break;
			case 0x1E948:
				strcpy_s(buf, buf_size, "ADLAM CONSONANT MODIFIER");
				break;
			case 0x1E949:
				strcpy_s(buf, buf_size, "ADLAM GEMINATE CONSONANT MODIFIER");
				break;
			case 0x1E94A:
				strcpy_s(buf, buf_size, "ADLAM NUKTA");
				break;
			case 0x1E94B:
				strcpy_s(buf, buf_size, "ADLAM NASALIZATION MARK");
				break;
			case 0x1E950:
				strcpy_s(buf, buf_size, "ADLAM DIGIT ZERO");
				break;
			case 0x1E951:
				strcpy_s(buf, buf_size, "ADLAM DIGIT ONE");
				break;
			case 0x1E952:
				strcpy_s(buf, buf_size, "ADLAM DIGIT TWO");
				break;
			case 0x1E953:
				strcpy_s(buf, buf_size, "ADLAM DIGIT THREE");
				break;
			case 0x1E954:
				strcpy_s(buf, buf_size, "ADLAM DIGIT FOUR");
				break;
			case 0x1E955:
				strcpy_s(buf, buf_size, "ADLAM DIGIT FIVE");
				break;
			case 0x1E956:
				strcpy_s(buf, buf_size, "ADLAM DIGIT SIX");
				break;
			case 0x1E957:
				strcpy_s(buf, buf_size, "ADLAM DIGIT SEVEN");
				break;
			case 0x1E958:
				strcpy_s(buf, buf_size, "ADLAM DIGIT EIGHT");
				break;
			case 0x1E959:
				strcpy_s(buf, buf_size, "ADLAM DIGIT NINE");
				break;
			case 0x1E95E:
				strcpy_s(buf, buf_size, "ADLAM INITIAL EXCLAMATION MARK");
				break;
			case 0x1E95F:
				strcpy_s(buf, buf_size, "ADLAM INITIAL QUESTION MARK");
				break;
			case 0x1EC71:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER ONE");
				break;
			case 0x1EC72:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER TWO");
				break;
			case 0x1EC73:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER THREE");
				break;
			case 0x1EC74:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER FOUR");
				break;
			case 0x1EC75:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER FIVE");
				break;
			case 0x1EC76:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER SIX");
				break;
			case 0x1EC77:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER SEVEN");
				break;
			case 0x1EC78:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER EIGHT");
				break;
			case 0x1EC79:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER NINE");
				break;
			case 0x1EC7A:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER TEN");
				break;
			case 0x1EC7B:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER TWENTY");
				break;
			case 0x1EC7C:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER THIRTY");
				break;
			case 0x1EC7D:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER FORTY");
				break;
			case 0x1EC7E:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER FIFTY");
				break;
			case 0x1EC7F:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER SIXTY");
				break;
			case 0x1EC80:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER SEVENTY");
				break;
			case 0x1EC81:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER EIGHTY");
				break;
			case 0x1EC82:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER NINETY");
				break;
			case 0x1EC83:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER ONE HUNDRED");
				break;
			case 0x1EC84:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER TWO HUNDRED");
				break;
			case 0x1EC85:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER THREE HUNDRED");
				break;
			case 0x1EC86:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER FOUR HUNDRED");
				break;
			case 0x1EC87:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER FIVE HUNDRED");
				break;
			case 0x1EC88:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER SIX HUNDRED");
				break;
			case 0x1EC89:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER SEVEN HUNDRED");
				break;
			case 0x1EC8A:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER EIGHT HUNDRED");
				break;
			case 0x1EC8B:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER NINE HUNDRED");
				break;
			case 0x1EC8C:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER ONE THOUSAND");
				break;
			case 0x1EC8D:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER TWO THOUSAND");
				break;
			case 0x1EC8E:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER THREE THOUSAND");
				break;
			case 0x1EC8F:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER FOUR THOUSAND");
				break;
			case 0x1EC90:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER FIVE THOUSAND");
				break;
			case 0x1EC91:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER SIX THOUSAND");
				break;
			case 0x1EC92:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER SEVEN THOUSAND");
				break;
			case 0x1EC93:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER EIGHT THOUSAND");
				break;
			case 0x1EC94:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER NINE THOUSAND");
				break;
			case 0x1EC95:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER TEN THOUSAND");
				break;
			case 0x1EC96:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER TWENTY THOUSAND");
				break;
			case 0x1EC97:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER THIRTY THOUSAND");
				break;
			case 0x1EC98:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER FORTY THOUSAND");
				break;
			case 0x1EC99:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER FIFTY THOUSAND");
				break;
			case 0x1EC9A:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER SIXTY THOUSAND");
				break;
			case 0x1EC9B:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER SEVENTY THOUSAND");
				break;
			case 0x1EC9C:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER EIGHTY THOUSAND");
				break;
			case 0x1EC9D:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER NINETY THOUSAND");
				break;
			case 0x1EC9E:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER LAKH");
				break;
			case 0x1EC9F:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER LAKHAN");
				break;
			case 0x1ECA0:
				strcpy_s(buf, buf_size, "INDIC SIYAQ LAKH MARK");
				break;
			case 0x1ECA1:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER KAROR");
				break;
			case 0x1ECA2:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER KARORAN");
				break;
			case 0x1ECA3:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER PREFIXED ONE");
				break;
			case 0x1ECA4:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER PREFIXED TWO");
				break;
			case 0x1ECA5:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER PREFIXED THREE");
				break;
			case 0x1ECA6:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER PREFIXED FOUR");
				break;
			case 0x1ECA7:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER PREFIXED FIVE");
				break;
			case 0x1ECA8:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER PREFIXED SIX");
				break;
			case 0x1ECA9:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER PREFIXED SEVEN");
				break;
			case 0x1ECAA:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER PREFIXED EIGHT");
				break;
			case 0x1ECAB:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER PREFIXED NINE");
				break;
			case 0x1ECAC:
				strcpy_s(buf, buf_size, "INDIC SIYAQ PLACEHOLDER");
				break;
			case 0x1ECAD:
				strcpy_s(buf, buf_size, "INDIC SIYAQ FRACTION ONE QUARTER");
				break;
			case 0x1ECAE:
				strcpy_s(buf, buf_size, "INDIC SIYAQ FRACTION ONE HALF");
				break;
			case 0x1ECAF:
				strcpy_s(buf, buf_size, "INDIC SIYAQ FRACTION THREE QUARTERS");
				break;
			case 0x1ECB0:
				strcpy_s(buf, buf_size, "INDIC SIYAQ RUPEE MARK");
				break;
			case 0x1ECB1:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER ALTERNATE ONE");
				break;
			case 0x1ECB2:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER ALTERNATE TWO");
				break;
			case 0x1ECB3:
				strcpy_s(buf, buf_size, "INDIC SIYAQ NUMBER ALTERNATE TEN THOUSAND");
				break;
			case 0x1ECB4:
				strcpy_s(buf, buf_size, "INDIC SIYAQ ALTERNATE LAKH MARK");
				break;
			case 0x1ED01:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER ONE");
				break;
			case 0x1ED02:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER TWO");
				break;
			case 0x1ED03:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER THREE");
				break;
			case 0x1ED04:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER FOUR");
				break;
			case 0x1ED05:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER FIVE");
				break;
			case 0x1ED06:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER SIX");
				break;
			case 0x1ED07:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER SEVEN");
				break;
			case 0x1ED08:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER EIGHT");
				break;
			case 0x1ED09:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER NINE");
				break;
			case 0x1ED0A:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER TEN");
				break;
			case 0x1ED0B:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER TWENTY");
				break;
			case 0x1ED0C:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER THIRTY");
				break;
			case 0x1ED0D:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER FORTY");
				break;
			case 0x1ED0E:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER FIFTY");
				break;
			case 0x1ED0F:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER SIXTY");
				break;
			case 0x1ED10:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER SEVENTY");
				break;
			case 0x1ED11:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER EIGHTY");
				break;
			case 0x1ED12:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER NINETY");
				break;
			case 0x1ED13:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER ONE HUNDRED");
				break;
			case 0x1ED14:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER TWO HUNDRED");
				break;
			case 0x1ED15:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER THREE HUNDRED");
				break;
			case 0x1ED16:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER FOUR HUNDRED");
				break;
			case 0x1ED17:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER FIVE HUNDRED");
				break;
			case 0x1ED18:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER SIX HUNDRED");
				break;
			case 0x1ED19:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER SEVEN HUNDRED");
				break;
			case 0x1ED1A:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER EIGHT HUNDRED");
				break;
			case 0x1ED1B:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER NINE HUNDRED");
				break;
			case 0x1ED1C:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER ONE THOUSAND");
				break;
			case 0x1ED1D:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER TWO THOUSAND");
				break;
			case 0x1ED1E:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER THREE THOUSAND");
				break;
			case 0x1ED1F:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER FOUR THOUSAND");
				break;
			case 0x1ED20:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER FIVE THOUSAND");
				break;
			case 0x1ED21:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER SIX THOUSAND");
				break;
			case 0x1ED22:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER SEVEN THOUSAND");
				break;
			case 0x1ED23:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER EIGHT THOUSAND");
				break;
			case 0x1ED24:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER NINE THOUSAND");
				break;
			case 0x1ED25:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER TEN THOUSAND");
				break;
			case 0x1ED26:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER TWENTY THOUSAND");
				break;
			case 0x1ED27:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER THIRTY THOUSAND");
				break;
			case 0x1ED28:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER FORTY THOUSAND");
				break;
			case 0x1ED29:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER FIFTY THOUSAND");
				break;
			case 0x1ED2A:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER SIXTY THOUSAND");
				break;
			case 0x1ED2B:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER SEVENTY THOUSAND");
				break;
			case 0x1ED2C:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER EIGHTY THOUSAND");
				break;
			case 0x1ED2D:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ NUMBER NINETY THOUSAND");
				break;
			case 0x1ED2E:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ MARRATAN");
				break;
			case 0x1ED2F:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER TWO");
				break;
			case 0x1ED30:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER THREE");
				break;
			case 0x1ED31:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER FOUR");
				break;
			case 0x1ED32:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER FIVE");
				break;
			case 0x1ED33:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER SIX");
				break;
			case 0x1ED34:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER SEVEN");
				break;
			case 0x1ED35:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER EIGHT");
				break;
			case 0x1ED36:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER NINE");
				break;
			case 0x1ED37:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER TEN");
				break;
			case 0x1ED38:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER FOUR HUNDRED");
				break;
			case 0x1ED39:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER SIX HUNDRED");
				break;
			case 0x1ED3A:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER TWO THOUSAND");
				break;
			case 0x1ED3B:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ ALTERNATE NUMBER TEN THOUSAND");
				break;
			case 0x1ED3C:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ FRACTION ONE HALF");
				break;
			case 0x1ED3D:
				strcpy_s(buf, buf_size, "OTTOMAN SIYAQ FRACTION ONE SIXTH");
				break;
			case 0x1EE00:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL ALEF");
				break;
			case 0x1EE01:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL BEH");
				break;
			case 0x1EE02:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL JEEM");
				break;
			case 0x1EE03:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DAL");
				break;
			case 0x1EE05:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL WAW");
				break;
			case 0x1EE06:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL ZAIN");
				break;
			case 0x1EE07:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL HAH");
				break;
			case 0x1EE08:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAH");
				break;
			case 0x1EE09:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL YEH");
				break;
			case 0x1EE0A:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL KAF");
				break;
			case 0x1EE0B:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LAM");
				break;
			case 0x1EE0C:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL MEEM");
				break;
			case 0x1EE0D:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL NOON");
				break;
			case 0x1EE0E:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL SEEN");
				break;
			case 0x1EE0F:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL AIN");
				break;
			case 0x1EE10:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL FEH");
				break;
			case 0x1EE11:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL SAD");
				break;
			case 0x1EE12:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL QAF");
				break;
			case 0x1EE13:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL REH");
				break;
			case 0x1EE14:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL SHEEN");
				break;
			case 0x1EE15:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TEH");
				break;
			case 0x1EE16:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL THEH");
				break;
			case 0x1EE17:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL KHAH");
				break;
			case 0x1EE18:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL THAL");
				break;
			case 0x1EE19:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DAD");
				break;
			case 0x1EE1A:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL ZAH");
				break;
			case 0x1EE1B:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL GHAIN");
				break;
			case 0x1EE1C:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOTLESS BEH");
				break;
			case 0x1EE1D:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOTLESS NOON");
				break;
			case 0x1EE1E:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOTLESS FEH");
				break;
			case 0x1EE1F:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOTLESS QAF");
				break;
			case 0x1EE21:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL BEH");
				break;
			case 0x1EE22:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL JEEM");
				break;
			case 0x1EE24:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL HEH");
				break;
			case 0x1EE27:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL HAH");
				break;
			case 0x1EE29:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL YEH");
				break;
			case 0x1EE2A:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL KAF");
				break;
			case 0x1EE2B:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL LAM");
				break;
			case 0x1EE2C:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL MEEM");
				break;
			case 0x1EE2D:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL NOON");
				break;
			case 0x1EE2E:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL SEEN");
				break;
			case 0x1EE2F:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL AIN");
				break;
			case 0x1EE30:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL FEH");
				break;
			case 0x1EE31:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL SAD");
				break;
			case 0x1EE32:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL QAF");
				break;
			case 0x1EE34:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL SHEEN");
				break;
			case 0x1EE35:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL TEH");
				break;
			case 0x1EE36:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL THEH");
				break;
			case 0x1EE37:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL KHAH");
				break;
			case 0x1EE39:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL DAD");
				break;
			case 0x1EE3B:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL INITIAL GHAIN");
				break;
			case 0x1EE42:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED JEEM");
				break;
			case 0x1EE47:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED HAH");
				break;
			case 0x1EE49:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED YEH");
				break;
			case 0x1EE4B:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED LAM");
				break;
			case 0x1EE4D:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED NOON");
				break;
			case 0x1EE4E:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED SEEN");
				break;
			case 0x1EE4F:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED AIN");
				break;
			case 0x1EE51:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED SAD");
				break;
			case 0x1EE52:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED QAF");
				break;
			case 0x1EE54:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED SHEEN");
				break;
			case 0x1EE57:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED KHAH");
				break;
			case 0x1EE59:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED DAD");
				break;
			case 0x1EE5B:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED GHAIN");
				break;
			case 0x1EE5D:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED DOTLESS NOON");
				break;
			case 0x1EE5F:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL TAILED DOTLESS QAF");
				break;
			case 0x1EE61:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED BEH");
				break;
			case 0x1EE62:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED JEEM");
				break;
			case 0x1EE64:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED HEH");
				break;
			case 0x1EE67:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED HAH");
				break;
			case 0x1EE68:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED TAH");
				break;
			case 0x1EE69:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED YEH");
				break;
			case 0x1EE6A:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED KAF");
				break;
			case 0x1EE6C:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED MEEM");
				break;
			case 0x1EE6D:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED NOON");
				break;
			case 0x1EE6E:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED SEEN");
				break;
			case 0x1EE6F:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED AIN");
				break;
			case 0x1EE70:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED FEH");
				break;
			case 0x1EE71:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED SAD");
				break;
			case 0x1EE72:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED QAF");
				break;
			case 0x1EE74:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED SHEEN");
				break;
			case 0x1EE75:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED TEH");
				break;
			case 0x1EE76:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED THEH");
				break;
			case 0x1EE77:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED KHAH");
				break;
			case 0x1EE79:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED DAD");
				break;
			case 0x1EE7A:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED ZAH");
				break;
			case 0x1EE7B:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED GHAIN");
				break;
			case 0x1EE7C:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED DOTLESS BEH");
				break;
			case 0x1EE7E:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL STRETCHED DOTLESS FEH");
				break;
			case 0x1EE80:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED ALEF");
				break;
			case 0x1EE81:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED BEH");
				break;
			case 0x1EE82:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED JEEM");
				break;
			case 0x1EE83:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED DAL");
				break;
			case 0x1EE84:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED HEH");
				break;
			case 0x1EE85:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED WAW");
				break;
			case 0x1EE86:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED ZAIN");
				break;
			case 0x1EE87:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED HAH");
				break;
			case 0x1EE88:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED TAH");
				break;
			case 0x1EE89:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED YEH");
				break;
			case 0x1EE8B:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED LAM");
				break;
			case 0x1EE8C:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED MEEM");
				break;
			case 0x1EE8D:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED NOON");
				break;
			case 0x1EE8E:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED SEEN");
				break;
			case 0x1EE8F:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED AIN");
				break;
			case 0x1EE90:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED FEH");
				break;
			case 0x1EE91:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED SAD");
				break;
			case 0x1EE92:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED QAF");
				break;
			case 0x1EE93:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED REH");
				break;
			case 0x1EE94:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED SHEEN");
				break;
			case 0x1EE95:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED TEH");
				break;
			case 0x1EE96:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED THEH");
				break;
			case 0x1EE97:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED KHAH");
				break;
			case 0x1EE98:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED THAL");
				break;
			case 0x1EE99:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED DAD");
				break;
			case 0x1EE9A:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED ZAH");
				break;
			case 0x1EE9B:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL LOOPED GHAIN");
				break;
			case 0x1EEA1:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK BEH");
				break;
			case 0x1EEA2:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK JEEM");
				break;
			case 0x1EEA3:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK DAL");
				break;
			case 0x1EEA5:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK WAW");
				break;
			case 0x1EEA6:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK ZAIN");
				break;
			case 0x1EEA7:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK HAH");
				break;
			case 0x1EEA8:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK TAH");
				break;
			case 0x1EEA9:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK YEH");
				break;
			case 0x1EEAB:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK LAM");
				break;
			case 0x1EEAC:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK MEEM");
				break;
			case 0x1EEAD:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK NOON");
				break;
			case 0x1EEAE:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK SEEN");
				break;
			case 0x1EEAF:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK AIN");
				break;
			case 0x1EEB0:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK FEH");
				break;
			case 0x1EEB1:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK SAD");
				break;
			case 0x1EEB2:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK QAF");
				break;
			case 0x1EEB3:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK REH");
				break;
			case 0x1EEB4:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK SHEEN");
				break;
			case 0x1EEB5:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK TEH");
				break;
			case 0x1EEB6:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK THEH");
				break;
			case 0x1EEB7:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK KHAH");
				break;
			case 0x1EEB8:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK THAL");
				break;
			case 0x1EEB9:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK DAD");
				break;
			case 0x1EEBA:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK ZAH");
				break;
			case 0x1EEBB:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL DOUBLE-STRUCK GHAIN");
				break;
			case 0x1EEF0:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL OPERATOR MEEM WITH HAH WITH TATWEEL");
				break;
			case 0x1EEF1:
				strcpy_s(buf, buf_size, "ARABIC MATHEMATICAL OPERATOR HAH WITH DAL");
				break;
			case 0x1F000:
				strcpy_s(buf, buf_size, "MAHJONG TILE EAST WIND");
				break;
			case 0x1F001:
				strcpy_s(buf, buf_size, "MAHJONG TILE SOUTH WIND");
				break;
			case 0x1F002:
				strcpy_s(buf, buf_size, "MAHJONG TILE WEST WIND");
				break;
			case 0x1F003:
				strcpy_s(buf, buf_size, "MAHJONG TILE NORTH WIND");
				break;
			case 0x1F004:
				strcpy_s(buf, buf_size, "MAHJONG TILE RED DRAGON");
				break;
			case 0x1F005:
				strcpy_s(buf, buf_size, "MAHJONG TILE GREEN DRAGON");
				break;
			case 0x1F006:
				strcpy_s(buf, buf_size, "MAHJONG TILE WHITE DRAGON");
				break;
			case 0x1F007:
				strcpy_s(buf, buf_size, "MAHJONG TILE ONE OF CHARACTERS");
				break;
			case 0x1F008:
				strcpy_s(buf, buf_size, "MAHJONG TILE TWO OF CHARACTERS");
				break;
			case 0x1F009:
				strcpy_s(buf, buf_size, "MAHJONG TILE THREE OF CHARACTERS");
				break;
			case 0x1F00A:
				strcpy_s(buf, buf_size, "MAHJONG TILE FOUR OF CHARACTERS");
				break;
			case 0x1F00B:
				strcpy_s(buf, buf_size, "MAHJONG TILE FIVE OF CHARACTERS");
				break;
			case 0x1F00C:
				strcpy_s(buf, buf_size, "MAHJONG TILE SIX OF CHARACTERS");
				break;
			case 0x1F00D:
				strcpy_s(buf, buf_size, "MAHJONG TILE SEVEN OF CHARACTERS");
				break;
			case 0x1F00E:
				strcpy_s(buf, buf_size, "MAHJONG TILE EIGHT OF CHARACTERS");
				break;
			case 0x1F00F:
				strcpy_s(buf, buf_size, "MAHJONG TILE NINE OF CHARACTERS");
				break;
			case 0x1F010:
				strcpy_s(buf, buf_size, "MAHJONG TILE ONE OF BAMBOOS");
				break;
			case 0x1F011:
				strcpy_s(buf, buf_size, "MAHJONG TILE TWO OF BAMBOOS");
				break;
			case 0x1F012:
				strcpy_s(buf, buf_size, "MAHJONG TILE THREE OF BAMBOOS");
				break;
			case 0x1F013:
				strcpy_s(buf, buf_size, "MAHJONG TILE FOUR OF BAMBOOS");
				break;
			case 0x1F014:
				strcpy_s(buf, buf_size, "MAHJONG TILE FIVE OF BAMBOOS");
				break;
			case 0x1F015:
				strcpy_s(buf, buf_size, "MAHJONG TILE SIX OF BAMBOOS");
				break;
			case 0x1F016:
				strcpy_s(buf, buf_size, "MAHJONG TILE SEVEN OF BAMBOOS");
				break;
			case 0x1F017:
				strcpy_s(buf, buf_size, "MAHJONG TILE EIGHT OF BAMBOOS");
				break;
			case 0x1F018:
				strcpy_s(buf, buf_size, "MAHJONG TILE NINE OF BAMBOOS");
				break;
			case 0x1F019:
				strcpy_s(buf, buf_size, "MAHJONG TILE ONE OF CIRCLES");
				break;
			case 0x1F01A:
				strcpy_s(buf, buf_size, "MAHJONG TILE TWO OF CIRCLES");
				break;
			case 0x1F01B:
				strcpy_s(buf, buf_size, "MAHJONG TILE THREE OF CIRCLES");
				break;
			case 0x1F01C:
				strcpy_s(buf, buf_size, "MAHJONG TILE FOUR OF CIRCLES");
				break;
			case 0x1F01D:
				strcpy_s(buf, buf_size, "MAHJONG TILE FIVE OF CIRCLES");
				break;
			case 0x1F01E:
				strcpy_s(buf, buf_size, "MAHJONG TILE SIX OF CIRCLES");
				break;
			case 0x1F01F:
				strcpy_s(buf, buf_size, "MAHJONG TILE SEVEN OF CIRCLES");
				break;
			case 0x1F020:
				strcpy_s(buf, buf_size, "MAHJONG TILE EIGHT OF CIRCLES");
				break;
			case 0x1F021:
				strcpy_s(buf, buf_size, "MAHJONG TILE NINE OF CIRCLES");
				break;
			case 0x1F022:
				strcpy_s(buf, buf_size, "MAHJONG TILE PLUM");
				break;
			case 0x1F023:
				strcpy_s(buf, buf_size, "MAHJONG TILE ORCHID");
				break;
			case 0x1F024:
				strcpy_s(buf, buf_size, "MAHJONG TILE BAMBOO");
				break;
			case 0x1F025:
				strcpy_s(buf, buf_size, "MAHJONG TILE CHRYSANTHEMUM");
				break;
			case 0x1F026:
				strcpy_s(buf, buf_size, "MAHJONG TILE SPRING");
				break;
			case 0x1F027:
				strcpy_s(buf, buf_size, "MAHJONG TILE SUMMER");
				break;
			case 0x1F028:
				strcpy_s(buf, buf_size, "MAHJONG TILE AUTUMN");
				break;
			case 0x1F029:
				strcpy_s(buf, buf_size, "MAHJONG TILE WINTER");
				break;
			case 0x1F02A:
				strcpy_s(buf, buf_size, "MAHJONG TILE JOKER");
				break;
			case 0x1F02B:
				strcpy_s(buf, buf_size, "MAHJONG TILE BACK");
				break;
			case 0x1F030:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL BACK");
				break;
			case 0x1F031:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-00-00");
				break;
			case 0x1F032:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-00-01");
				break;
			case 0x1F033:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-00-02");
				break;
			case 0x1F034:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-00-03");
				break;
			case 0x1F035:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-00-04");
				break;
			case 0x1F036:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-00-05");
				break;
			case 0x1F037:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-00-06");
				break;
			case 0x1F038:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-01-00");
				break;
			case 0x1F039:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-01-01");
				break;
			case 0x1F03A:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-01-02");
				break;
			case 0x1F03B:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-01-03");
				break;
			case 0x1F03C:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-01-04");
				break;
			case 0x1F03D:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-01-05");
				break;
			case 0x1F03E:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-01-06");
				break;
			case 0x1F03F:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-02-00");
				break;
			case 0x1F040:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-02-01");
				break;
			case 0x1F041:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-02-02");
				break;
			case 0x1F042:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-02-03");
				break;
			case 0x1F043:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-02-04");
				break;
			case 0x1F044:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-02-05");
				break;
			case 0x1F045:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-02-06");
				break;
			case 0x1F046:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-03-00");
				break;
			case 0x1F047:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-03-01");
				break;
			case 0x1F048:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-03-02");
				break;
			case 0x1F049:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-03-03");
				break;
			case 0x1F04A:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-03-04");
				break;
			case 0x1F04B:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-03-05");
				break;
			case 0x1F04C:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-03-06");
				break;
			case 0x1F04D:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-04-00");
				break;
			case 0x1F04E:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-04-01");
				break;
			case 0x1F04F:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-04-02");
				break;
			case 0x1F050:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-04-03");
				break;
			case 0x1F051:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-04-04");
				break;
			case 0x1F052:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-04-05");
				break;
			case 0x1F053:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-04-06");
				break;
			case 0x1F054:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-05-00");
				break;
			case 0x1F055:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-05-01");
				break;
			case 0x1F056:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-05-02");
				break;
			case 0x1F057:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-05-03");
				break;
			case 0x1F058:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-05-04");
				break;
			case 0x1F059:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-05-05");
				break;
			case 0x1F05A:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-05-06");
				break;
			case 0x1F05B:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-06-00");
				break;
			case 0x1F05C:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-06-01");
				break;
			case 0x1F05D:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-06-02");
				break;
			case 0x1F05E:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-06-03");
				break;
			case 0x1F05F:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-06-04");
				break;
			case 0x1F060:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-06-05");
				break;
			case 0x1F061:
				strcpy_s(buf, buf_size, "DOMINO TILE HORIZONTAL-06-06");
				break;
			case 0x1F062:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL BACK");
				break;
			case 0x1F063:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-00-00");
				break;
			case 0x1F064:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-00-01");
				break;
			case 0x1F065:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-00-02");
				break;
			case 0x1F066:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-00-03");
				break;
			case 0x1F067:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-00-04");
				break;
			case 0x1F068:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-00-05");
				break;
			case 0x1F069:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-00-06");
				break;
			case 0x1F06A:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-01-00");
				break;
			case 0x1F06B:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-01-01");
				break;
			case 0x1F06C:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-01-02");
				break;
			case 0x1F06D:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-01-03");
				break;
			case 0x1F06E:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-01-04");
				break;
			case 0x1F06F:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-01-05");
				break;
			case 0x1F070:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-01-06");
				break;
			case 0x1F071:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-02-00");
				break;
			case 0x1F072:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-02-01");
				break;
			case 0x1F073:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-02-02");
				break;
			case 0x1F074:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-02-03");
				break;
			case 0x1F075:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-02-04");
				break;
			case 0x1F076:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-02-05");
				break;
			case 0x1F077:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-02-06");
				break;
			case 0x1F078:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-03-00");
				break;
			case 0x1F079:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-03-01");
				break;
			case 0x1F07A:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-03-02");
				break;
			case 0x1F07B:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-03-03");
				break;
			case 0x1F07C:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-03-04");
				break;
			case 0x1F07D:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-03-05");
				break;
			case 0x1F07E:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-03-06");
				break;
			case 0x1F07F:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-04-00");
				break;
			case 0x1F080:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-04-01");
				break;
			case 0x1F081:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-04-02");
				break;
			case 0x1F082:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-04-03");
				break;
			case 0x1F083:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-04-04");
				break;
			case 0x1F084:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-04-05");
				break;
			case 0x1F085:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-04-06");
				break;
			case 0x1F086:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-05-00");
				break;
			case 0x1F087:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-05-01");
				break;
			case 0x1F088:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-05-02");
				break;
			case 0x1F089:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-05-03");
				break;
			case 0x1F08A:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-05-04");
				break;
			case 0x1F08B:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-05-05");
				break;
			case 0x1F08C:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-05-06");
				break;
			case 0x1F08D:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-06-00");
				break;
			case 0x1F08E:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-06-01");
				break;
			case 0x1F08F:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-06-02");
				break;
			case 0x1F090:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-06-03");
				break;
			case 0x1F091:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-06-04");
				break;
			case 0x1F092:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-06-05");
				break;
			case 0x1F093:
				strcpy_s(buf, buf_size, "DOMINO TILE VERTICAL-06-06");
				break;
			case 0x1F0A0:
				strcpy_s(buf, buf_size, "PLAYING CARD BACK");
				break;
			case 0x1F0A1:
				strcpy_s(buf, buf_size, "PLAYING CARD ACE OF SPADES");
				break;
			case 0x1F0A2:
				strcpy_s(buf, buf_size, "PLAYING CARD TWO OF SPADES");
				break;
			case 0x1F0A3:
				strcpy_s(buf, buf_size, "PLAYING CARD THREE OF SPADES");
				break;
			case 0x1F0A4:
				strcpy_s(buf, buf_size, "PLAYING CARD FOUR OF SPADES");
				break;
			case 0x1F0A5:
				strcpy_s(buf, buf_size, "PLAYING CARD FIVE OF SPADES");
				break;
			case 0x1F0A6:
				strcpy_s(buf, buf_size, "PLAYING CARD SIX OF SPADES");
				break;
			case 0x1F0A7:
				strcpy_s(buf, buf_size, "PLAYING CARD SEVEN OF SPADES");
				break;
			case 0x1F0A8:
				strcpy_s(buf, buf_size, "PLAYING CARD EIGHT OF SPADES");
				break;
			case 0x1F0A9:
				strcpy_s(buf, buf_size, "PLAYING CARD NINE OF SPADES");
				break;
			case 0x1F0AA:
				strcpy_s(buf, buf_size, "PLAYING CARD TEN OF SPADES");
				break;
			case 0x1F0AB:
				strcpy_s(buf, buf_size, "PLAYING CARD JACK OF SPADES");
				break;
			case 0x1F0AC:
				strcpy_s(buf, buf_size, "PLAYING CARD KNIGHT OF SPADES");
				break;
			case 0x1F0AD:
				strcpy_s(buf, buf_size, "PLAYING CARD QUEEN OF SPADES");
				break;
			case 0x1F0AE:
				strcpy_s(buf, buf_size, "PLAYING CARD KING OF SPADES");
				break;
			case 0x1F0B1:
				strcpy_s(buf, buf_size, "PLAYING CARD ACE OF HEARTS");
				break;
			case 0x1F0B2:
				strcpy_s(buf, buf_size, "PLAYING CARD TWO OF HEARTS");
				break;
			case 0x1F0B3:
				strcpy_s(buf, buf_size, "PLAYING CARD THREE OF HEARTS");
				break;
			case 0x1F0B4:
				strcpy_s(buf, buf_size, "PLAYING CARD FOUR OF HEARTS");
				break;
			case 0x1F0B5:
				strcpy_s(buf, buf_size, "PLAYING CARD FIVE OF HEARTS");
				break;
			case 0x1F0B6:
				strcpy_s(buf, buf_size, "PLAYING CARD SIX OF HEARTS");
				break;
			case 0x1F0B7:
				strcpy_s(buf, buf_size, "PLAYING CARD SEVEN OF HEARTS");
				break;
			case 0x1F0B8:
				strcpy_s(buf, buf_size, "PLAYING CARD EIGHT OF HEARTS");
				break;
			case 0x1F0B9:
				strcpy_s(buf, buf_size, "PLAYING CARD NINE OF HEARTS");
				break;
			case 0x1F0BA:
				strcpy_s(buf, buf_size, "PLAYING CARD TEN OF HEARTS");
				break;
			case 0x1F0BB:
				strcpy_s(buf, buf_size, "PLAYING CARD JACK OF HEARTS");
				break;
			case 0x1F0BC:
				strcpy_s(buf, buf_size, "PLAYING CARD KNIGHT OF HEARTS");
				break;
			case 0x1F0BD:
				strcpy_s(buf, buf_size, "PLAYING CARD QUEEN OF HEARTS");
				break;
			case 0x1F0BE:
				strcpy_s(buf, buf_size, "PLAYING CARD KING OF HEARTS");
				break;
			case 0x1F0BF:
				strcpy_s(buf, buf_size, "PLAYING CARD RED JOKER");
				break;
			case 0x1F0C1:
				strcpy_s(buf, buf_size, "PLAYING CARD ACE OF DIAMONDS");
				break;
			case 0x1F0C2:
				strcpy_s(buf, buf_size, "PLAYING CARD TWO OF DIAMONDS");
				break;
			case 0x1F0C3:
				strcpy_s(buf, buf_size, "PLAYING CARD THREE OF DIAMONDS");
				break;
			case 0x1F0C4:
				strcpy_s(buf, buf_size, "PLAYING CARD FOUR OF DIAMONDS");
				break;
			case 0x1F0C5:
				strcpy_s(buf, buf_size, "PLAYING CARD FIVE OF DIAMONDS");
				break;
			case 0x1F0C6:
				strcpy_s(buf, buf_size, "PLAYING CARD SIX OF DIAMONDS");
				break;
			case 0x1F0C7:
				strcpy_s(buf, buf_size, "PLAYING CARD SEVEN OF DIAMONDS");
				break;
			case 0x1F0C8:
				strcpy_s(buf, buf_size, "PLAYING CARD EIGHT OF DIAMONDS");
				break;
			case 0x1F0C9:
				strcpy_s(buf, buf_size, "PLAYING CARD NINE OF DIAMONDS");
				break;
			case 0x1F0CA:
				strcpy_s(buf, buf_size, "PLAYING CARD TEN OF DIAMONDS");
				break;
			case 0x1F0CB:
				strcpy_s(buf, buf_size, "PLAYING CARD JACK OF DIAMONDS");
				break;
			case 0x1F0CC:
				strcpy_s(buf, buf_size, "PLAYING CARD KNIGHT OF DIAMONDS");
				break;
			case 0x1F0CD:
				strcpy_s(buf, buf_size, "PLAYING CARD QUEEN OF DIAMONDS");
				break;
			case 0x1F0CE:
				strcpy_s(buf, buf_size, "PLAYING CARD KING OF DIAMONDS");
				break;
			case 0x1F0CF:
				strcpy_s(buf, buf_size, "PLAYING CARD BLACK JOKER");
				break;
			case 0x1F0D1:
				strcpy_s(buf, buf_size, "PLAYING CARD ACE OF CLUBS");
				break;
			case 0x1F0D2:
				strcpy_s(buf, buf_size, "PLAYING CARD TWO OF CLUBS");
				break;
			case 0x1F0D3:
				strcpy_s(buf, buf_size, "PLAYING CARD THREE OF CLUBS");
				break;
			case 0x1F0D4:
				strcpy_s(buf, buf_size, "PLAYING CARD FOUR OF CLUBS");
				break;
			case 0x1F0D5:
				strcpy_s(buf, buf_size, "PLAYING CARD FIVE OF CLUBS");
				break;
			case 0x1F0D6:
				strcpy_s(buf, buf_size, "PLAYING CARD SIX OF CLUBS");
				break;
			case 0x1F0D7:
				strcpy_s(buf, buf_size, "PLAYING CARD SEVEN OF CLUBS");
				break;
			case 0x1F0D8:
				strcpy_s(buf, buf_size, "PLAYING CARD EIGHT OF CLUBS");
				break;
			case 0x1F0D9:
				strcpy_s(buf, buf_size, "PLAYING CARD NINE OF CLUBS");
				break;
			case 0x1F0DA:
				strcpy_s(buf, buf_size, "PLAYING CARD TEN OF CLUBS");
				break;
			case 0x1F0DB:
				strcpy_s(buf, buf_size, "PLAYING CARD JACK OF CLUBS");
				break;
			case 0x1F0DC:
				strcpy_s(buf, buf_size, "PLAYING CARD KNIGHT OF CLUBS");
				break;
			case 0x1F0DD:
				strcpy_s(buf, buf_size, "PLAYING CARD QUEEN OF CLUBS");
				break;
			case 0x1F0DE:
				strcpy_s(buf, buf_size, "PLAYING CARD KING OF CLUBS");
				break;
			case 0x1F0DF:
				strcpy_s(buf, buf_size, "PLAYING CARD WHITE JOKER");
				break;
			case 0x1F0E0:
				strcpy_s(buf, buf_size, "PLAYING CARD FOOL");
				break;
			case 0x1F0E1:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-1");
				break;
			case 0x1F0E2:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-2");
				break;
			case 0x1F0E3:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-3");
				break;
			case 0x1F0E4:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-4");
				break;
			case 0x1F0E5:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-5");
				break;
			case 0x1F0E6:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-6");
				break;
			case 0x1F0E7:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-7");
				break;
			case 0x1F0E8:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-8");
				break;
			case 0x1F0E9:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-9");
				break;
			case 0x1F0EA:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-10");
				break;
			case 0x1F0EB:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-11");
				break;
			case 0x1F0EC:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-12");
				break;
			case 0x1F0ED:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-13");
				break;
			case 0x1F0EE:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-14");
				break;
			case 0x1F0EF:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-15");
				break;
			case 0x1F0F0:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-16");
				break;
			case 0x1F0F1:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-17");
				break;
			case 0x1F0F2:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-18");
				break;
			case 0x1F0F3:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-19");
				break;
			case 0x1F0F4:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-20");
				break;
			case 0x1F0F5:
				strcpy_s(buf, buf_size, "PLAYING CARD TRUMP-21");
				break;
			case 0x1F100:
				strcpy_s(buf, buf_size, "DIGIT ZERO FULL STOP");
				break;
			case 0x1F101:
				strcpy_s(buf, buf_size, "DIGIT ZERO COMMA");
				break;
			case 0x1F102:
				strcpy_s(buf, buf_size, "DIGIT ONE COMMA");
				break;
			case 0x1F103:
				strcpy_s(buf, buf_size, "DIGIT TWO COMMA");
				break;
			case 0x1F104:
				strcpy_s(buf, buf_size, "DIGIT THREE COMMA");
				break;
			case 0x1F105:
				strcpy_s(buf, buf_size, "DIGIT FOUR COMMA");
				break;
			case 0x1F106:
				strcpy_s(buf, buf_size, "DIGIT FIVE COMMA");
				break;
			case 0x1F107:
				strcpy_s(buf, buf_size, "DIGIT SIX COMMA");
				break;
			case 0x1F108:
				strcpy_s(buf, buf_size, "DIGIT SEVEN COMMA");
				break;
			case 0x1F109:
				strcpy_s(buf, buf_size, "DIGIT EIGHT COMMA");
				break;
			case 0x1F10A:
				strcpy_s(buf, buf_size, "DIGIT NINE COMMA");
				break;
			case 0x1F10B:
				strcpy_s(buf, buf_size, "DINGBAT CIRCLED SANS-SERIF DIGIT ZERO");
				break;
			case 0x1F10C:
				strcpy_s(buf, buf_size, "DINGBAT NEGATIVE CIRCLED SANS-SERIF DIGIT ZERO");
				break;
			case 0x1F10D:
				strcpy_s(buf, buf_size, "CIRCLED ZERO WITH SLASH");
				break;
			case 0x1F10E:
				strcpy_s(buf, buf_size, "CIRCLED ANTICLOCKWISE ARROW");
				break;
			case 0x1F10F:
				strcpy_s(buf, buf_size, "CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH");
				break;
			case 0x1F110:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER A");
				break;
			case 0x1F111:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER B");
				break;
			case 0x1F112:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER C");
				break;
			case 0x1F113:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER D");
				break;
			case 0x1F114:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER E");
				break;
			case 0x1F115:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER F");
				break;
			case 0x1F116:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER G");
				break;
			case 0x1F117:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER H");
				break;
			case 0x1F118:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER I");
				break;
			case 0x1F119:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER J");
				break;
			case 0x1F11A:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER K");
				break;
			case 0x1F11B:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER L");
				break;
			case 0x1F11C:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER M");
				break;
			case 0x1F11D:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER N");
				break;
			case 0x1F11E:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER O");
				break;
			case 0x1F11F:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER P");
				break;
			case 0x1F120:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER Q");
				break;
			case 0x1F121:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER R");
				break;
			case 0x1F122:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER S");
				break;
			case 0x1F123:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER T");
				break;
			case 0x1F124:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER U");
				break;
			case 0x1F125:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER V");
				break;
			case 0x1F126:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER W");
				break;
			case 0x1F127:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER X");
				break;
			case 0x1F128:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER Y");
				break;
			case 0x1F129:
				strcpy_s(buf, buf_size, "PARENTHESIZED LATIN CAPITAL LETTER Z");
				break;
			case 0x1F12A:
				strcpy_s(buf, buf_size, "TORTOISE SHELL BRACKETED LATIN CAPITAL LETTER S");
				break;
			case 0x1F12B:
				strcpy_s(buf, buf_size, "CIRCLED ITALIC LATIN CAPITAL LETTER C");
				break;
			case 0x1F12C:
				strcpy_s(buf, buf_size, "CIRCLED ITALIC LATIN CAPITAL LETTER R");
				break;
			case 0x1F12D:
				strcpy_s(buf, buf_size, "CIRCLED CD");
				break;
			case 0x1F12E:
				strcpy_s(buf, buf_size, "CIRCLED WZ");
				break;
			case 0x1F12F:
				strcpy_s(buf, buf_size, "COPYLEFT SYMBOL");
				break;
			case 0x1F130:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER A");
				break;
			case 0x1F131:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER B");
				break;
			case 0x1F132:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER C");
				break;
			case 0x1F133:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER D");
				break;
			case 0x1F134:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER E");
				break;
			case 0x1F135:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER F");
				break;
			case 0x1F136:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER G");
				break;
			case 0x1F137:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER H");
				break;
			case 0x1F138:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER I");
				break;
			case 0x1F139:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER J");
				break;
			case 0x1F13A:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER K");
				break;
			case 0x1F13B:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER L");
				break;
			case 0x1F13C:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER M");
				break;
			case 0x1F13D:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER N");
				break;
			case 0x1F13E:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER O");
				break;
			case 0x1F13F:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER P");
				break;
			case 0x1F140:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER Q");
				break;
			case 0x1F141:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER R");
				break;
			case 0x1F142:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER S");
				break;
			case 0x1F143:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER T");
				break;
			case 0x1F144:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER U");
				break;
			case 0x1F145:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER V");
				break;
			case 0x1F146:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER W");
				break;
			case 0x1F147:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER X");
				break;
			case 0x1F148:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER Y");
				break;
			case 0x1F149:
				strcpy_s(buf, buf_size, "SQUARED LATIN CAPITAL LETTER Z");
				break;
			case 0x1F14A:
				strcpy_s(buf, buf_size, "SQUARED HV");
				break;
			case 0x1F14B:
				strcpy_s(buf, buf_size, "SQUARED MV");
				break;
			case 0x1F14C:
				strcpy_s(buf, buf_size, "SQUARED SD");
				break;
			case 0x1F14D:
				strcpy_s(buf, buf_size, "SQUARED SS");
				break;
			case 0x1F14E:
				strcpy_s(buf, buf_size, "SQUARED PPV");
				break;
			case 0x1F14F:
				strcpy_s(buf, buf_size, "SQUARED WC");
				break;
			case 0x1F150:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER A");
				break;
			case 0x1F151:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER B");
				break;
			case 0x1F152:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER C");
				break;
			case 0x1F153:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER D");
				break;
			case 0x1F154:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER E");
				break;
			case 0x1F155:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER F");
				break;
			case 0x1F156:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER G");
				break;
			case 0x1F157:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER H");
				break;
			case 0x1F158:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER I");
				break;
			case 0x1F159:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER J");
				break;
			case 0x1F15A:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER K");
				break;
			case 0x1F15B:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER L");
				break;
			case 0x1F15C:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER M");
				break;
			case 0x1F15D:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER N");
				break;
			case 0x1F15E:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER O");
				break;
			case 0x1F15F:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER P");
				break;
			case 0x1F160:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER Q");
				break;
			case 0x1F161:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER R");
				break;
			case 0x1F162:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER S");
				break;
			case 0x1F163:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER T");
				break;
			case 0x1F164:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER U");
				break;
			case 0x1F165:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER V");
				break;
			case 0x1F166:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER W");
				break;
			case 0x1F167:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER X");
				break;
			case 0x1F168:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER Y");
				break;
			case 0x1F169:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED LATIN CAPITAL LETTER Z");
				break;
			case 0x1F16A:
				strcpy_s(buf, buf_size, "RAISED MC SIGN");
				break;
			case 0x1F16B:
				strcpy_s(buf, buf_size, "RAISED MD SIGN");
				break;
			case 0x1F16C:
				strcpy_s(buf, buf_size, "RAISED MR SIGN");
				break;
			case 0x1F16D:
				strcpy_s(buf, buf_size, "CIRCLED CC");
				break;
			case 0x1F16E:
				strcpy_s(buf, buf_size, "CIRCLED C WITH OVERLAID BACKSLASH");
				break;
			case 0x1F16F:
				strcpy_s(buf, buf_size, "CIRCLED HUMAN FIGURE");
				break;
			case 0x1F170:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER A");
				break;
			case 0x1F171:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER B");
				break;
			case 0x1F172:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER C");
				break;
			case 0x1F173:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER D");
				break;
			case 0x1F174:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER E");
				break;
			case 0x1F175:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER F");
				break;
			case 0x1F176:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER G");
				break;
			case 0x1F177:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER H");
				break;
			case 0x1F178:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER I");
				break;
			case 0x1F179:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER J");
				break;
			case 0x1F17A:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER K");
				break;
			case 0x1F17B:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER L");
				break;
			case 0x1F17C:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER M");
				break;
			case 0x1F17D:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER N");
				break;
			case 0x1F17E:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER O");
				break;
			case 0x1F17F:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER P");
				break;
			case 0x1F180:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER Q");
				break;
			case 0x1F181:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER R");
				break;
			case 0x1F182:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER S");
				break;
			case 0x1F183:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER T");
				break;
			case 0x1F184:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER U");
				break;
			case 0x1F185:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER V");
				break;
			case 0x1F186:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER W");
				break;
			case 0x1F187:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER X");
				break;
			case 0x1F188:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER Y");
				break;
			case 0x1F189:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED LATIN CAPITAL LETTER Z");
				break;
			case 0x1F18A:
				strcpy_s(buf, buf_size, "CROSSED NEGATIVE SQUARED LATIN CAPITAL LETTER P");
				break;
			case 0x1F18B:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED IC");
				break;
			case 0x1F18C:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED PA");
				break;
			case 0x1F18D:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED SA");
				break;
			case 0x1F18E:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED AB");
				break;
			case 0x1F18F:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED WC");
				break;
			case 0x1F190:
				strcpy_s(buf, buf_size, "SQUARE DJ");
				break;
			case 0x1F191:
				strcpy_s(buf, buf_size, "SQUARED CL");
				break;
			case 0x1F192:
				strcpy_s(buf, buf_size, "SQUARED COOL");
				break;
			case 0x1F193:
				strcpy_s(buf, buf_size, "SQUARED FREE");
				break;
			case 0x1F194:
				strcpy_s(buf, buf_size, "SQUARED ID");
				break;
			case 0x1F195:
				strcpy_s(buf, buf_size, "SQUARED NEW");
				break;
			case 0x1F196:
				strcpy_s(buf, buf_size, "SQUARED NG");
				break;
			case 0x1F197:
				strcpy_s(buf, buf_size, "SQUARED OK");
				break;
			case 0x1F198:
				strcpy_s(buf, buf_size, "SQUARED SOS");
				break;
			case 0x1F199:
				strcpy_s(buf, buf_size, "SQUARED UP WITH EXCLAMATION MARK");
				break;
			case 0x1F19A:
				strcpy_s(buf, buf_size, "SQUARED VS");
				break;
			case 0x1F19B:
				strcpy_s(buf, buf_size, "SQUARED THREE D");
				break;
			case 0x1F19C:
				strcpy_s(buf, buf_size, "SQUARED SECOND SCREEN");
				break;
			case 0x1F19D:
				strcpy_s(buf, buf_size, "SQUARED TWO K");
				break;
			case 0x1F19E:
				strcpy_s(buf, buf_size, "SQUARED FOUR K");
				break;
			case 0x1F19F:
				strcpy_s(buf, buf_size, "SQUARED EIGHT K");
				break;
			case 0x1F1A0:
				strcpy_s(buf, buf_size, "SQUARED FIVE POINT ONE");
				break;
			case 0x1F1A1:
				strcpy_s(buf, buf_size, "SQUARED SEVEN POINT ONE");
				break;
			case 0x1F1A2:
				strcpy_s(buf, buf_size, "SQUARED TWENTY-TWO POINT TWO");
				break;
			case 0x1F1A3:
				strcpy_s(buf, buf_size, "SQUARED SIXTY P");
				break;
			case 0x1F1A4:
				strcpy_s(buf, buf_size, "SQUARED ONE HUNDRED TWENTY P");
				break;
			case 0x1F1A5:
				strcpy_s(buf, buf_size, "SQUARED LATIN SMALL LETTER D");
				break;
			case 0x1F1A6:
				strcpy_s(buf, buf_size, "SQUARED HC");
				break;
			case 0x1F1A7:
				strcpy_s(buf, buf_size, "SQUARED HDR");
				break;
			case 0x1F1A8:
				strcpy_s(buf, buf_size, "SQUARED HI-RES");
				break;
			case 0x1F1A9:
				strcpy_s(buf, buf_size, "SQUARED LOSSLESS");
				break;
			case 0x1F1AA:
				strcpy_s(buf, buf_size, "SQUARED SHV");
				break;
			case 0x1F1AB:
				strcpy_s(buf, buf_size, "SQUARED UHD");
				break;
			case 0x1F1AC:
				strcpy_s(buf, buf_size, "SQUARED VOD");
				break;
			case 0x1F1AD:
				strcpy_s(buf, buf_size, "MASK WORK SYMBOL");
				break;
			case 0x1F1E6:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER A");
				break;
			case 0x1F1E7:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER B");
				break;
			case 0x1F1E8:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER C");
				break;
			case 0x1F1E9:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER D");
				break;
			case 0x1F1EA:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER E");
				break;
			case 0x1F1EB:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER F");
				break;
			case 0x1F1EC:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER G");
				break;
			case 0x1F1ED:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER H");
				break;
			case 0x1F1EE:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER I");
				break;
			case 0x1F1EF:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER J");
				break;
			case 0x1F1F0:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER K");
				break;
			case 0x1F1F1:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER L");
				break;
			case 0x1F1F2:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER M");
				break;
			case 0x1F1F3:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER N");
				break;
			case 0x1F1F4:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER O");
				break;
			case 0x1F1F5:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER P");
				break;
			case 0x1F1F6:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER Q");
				break;
			case 0x1F1F7:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER R");
				break;
			case 0x1F1F8:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER S");
				break;
			case 0x1F1F9:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER T");
				break;
			case 0x1F1FA:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER U");
				break;
			case 0x1F1FB:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER V");
				break;
			case 0x1F1FC:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER W");
				break;
			case 0x1F1FD:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER X");
				break;
			case 0x1F1FE:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER Y");
				break;
			case 0x1F1FF:
				strcpy_s(buf, buf_size, "REGIONAL INDICATOR SYMBOL LETTER Z");
				break;
			case 0x1F200:
				strcpy_s(buf, buf_size, "SQUARE HIRAGANA HOKA");
				break;
			case 0x1F201:
				strcpy_s(buf, buf_size, "SQUARED KATAKANA KOKO");
				break;
			case 0x1F202:
				strcpy_s(buf, buf_size, "SQUARED KATAKANA SA");
				break;
			case 0x1F210:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-624B");
				break;
			case 0x1F211:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-5B57");
				break;
			case 0x1F212:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-53CC");
				break;
			case 0x1F213:
				strcpy_s(buf, buf_size, "SQUARED KATAKANA DE");
				break;
			case 0x1F214:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-4E8C");
				break;
			case 0x1F215:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-591A");
				break;
			case 0x1F216:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-89E3");
				break;
			case 0x1F217:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-5929");
				break;
			case 0x1F218:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-4EA4");
				break;
			case 0x1F219:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-6620");
				break;
			case 0x1F21A:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-7121");
				break;
			case 0x1F21B:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-6599");
				break;
			case 0x1F21C:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-524D");
				break;
			case 0x1F21D:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-5F8C");
				break;
			case 0x1F21E:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-518D");
				break;
			case 0x1F21F:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-65B0");
				break;
			case 0x1F220:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-521D");
				break;
			case 0x1F221:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-7D42");
				break;
			case 0x1F222:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-751F");
				break;
			case 0x1F223:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-8CA9");
				break;
			case 0x1F224:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-58F0");
				break;
			case 0x1F225:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-5439");
				break;
			case 0x1F226:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-6F14");
				break;
			case 0x1F227:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-6295");
				break;
			case 0x1F228:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-6355");
				break;
			case 0x1F229:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-4E00");
				break;
			case 0x1F22A:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-4E09");
				break;
			case 0x1F22B:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-904A");
				break;
			case 0x1F22C:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-5DE6");
				break;
			case 0x1F22D:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-4E2D");
				break;
			case 0x1F22E:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-53F3");
				break;
			case 0x1F22F:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-6307");
				break;
			case 0x1F230:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-8D70");
				break;
			case 0x1F231:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-6253");
				break;
			case 0x1F232:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-7981");
				break;
			case 0x1F233:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-7A7A");
				break;
			case 0x1F234:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-5408");
				break;
			case 0x1F235:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-6E80");
				break;
			case 0x1F236:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-6709");
				break;
			case 0x1F237:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-6708");
				break;
			case 0x1F238:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-7533");
				break;
			case 0x1F239:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-5272");
				break;
			case 0x1F23A:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-55B6");
				break;
			case 0x1F23B:
				strcpy_s(buf, buf_size, "SQUARED CJK UNIFIED IDEOGRAPH-914D");
				break;
			case 0x1F240:
				strcpy_s(buf, buf_size, "TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C");
				break;
			case 0x1F241:
				strcpy_s(buf, buf_size, "TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E09");
				break;
			case 0x1F242:
				strcpy_s(buf, buf_size, "TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E8C");
				break;
			case 0x1F243:
				strcpy_s(buf, buf_size, "TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-5B89");
				break;
			case 0x1F244:
				strcpy_s(buf, buf_size, "TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-70B9");
				break;
			case 0x1F245:
				strcpy_s(buf, buf_size, "TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6253");
				break;
			case 0x1F246:
				strcpy_s(buf, buf_size, "TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-76D7");
				break;
			case 0x1F247:
				strcpy_s(buf, buf_size, "TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-52DD");
				break;
			case 0x1F248:
				strcpy_s(buf, buf_size, "TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557");
				break;
			case 0x1F250:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH ADVANTAGE");
				break;
			case 0x1F251:
				strcpy_s(buf, buf_size, "CIRCLED IDEOGRAPH ACCEPT");
				break;
			case 0x1F260:
				strcpy_s(buf, buf_size, "ROUNDED SYMBOL FOR FU");
				break;
			case 0x1F261:
				strcpy_s(buf, buf_size, "ROUNDED SYMBOL FOR LU");
				break;
			case 0x1F262:
				strcpy_s(buf, buf_size, "ROUNDED SYMBOL FOR SHOU");
				break;
			case 0x1F263:
				strcpy_s(buf, buf_size, "ROUNDED SYMBOL FOR XI");
				break;
			case 0x1F264:
				strcpy_s(buf, buf_size, "ROUNDED SYMBOL FOR SHUANGXI");
				break;
			case 0x1F265:
				strcpy_s(buf, buf_size, "ROUNDED SYMBOL FOR CAI");
				break;
			case 0x1F300:
				strcpy_s(buf, buf_size, "CYCLONE");
				break;
			case 0x1F301:
				strcpy_s(buf, buf_size, "FOGGY");
				break;
			case 0x1F302:
				strcpy_s(buf, buf_size, "CLOSED UMBRELLA");
				break;
			case 0x1F303:
				strcpy_s(buf, buf_size, "NIGHT WITH STARS");
				break;
			case 0x1F304:
				strcpy_s(buf, buf_size, "SUNRISE OVER MOUNTAINS");
				break;
			case 0x1F305:
				strcpy_s(buf, buf_size, "SUNRISE");
				break;
			case 0x1F306:
				strcpy_s(buf, buf_size, "CITYSCAPE AT DUSK");
				break;
			case 0x1F307:
				strcpy_s(buf, buf_size, "SUNSET OVER BUILDINGS");
				break;
			case 0x1F308:
				strcpy_s(buf, buf_size, "RAINBOW");
				break;
			case 0x1F309:
				strcpy_s(buf, buf_size, "BRIDGE AT NIGHT");
				break;
			case 0x1F30A:
				strcpy_s(buf, buf_size, "WATER WAVE");
				break;
			case 0x1F30B:
				strcpy_s(buf, buf_size, "VOLCANO");
				break;
			case 0x1F30C:
				strcpy_s(buf, buf_size, "MILKY WAY");
				break;
			case 0x1F30D:
				strcpy_s(buf, buf_size, "EARTH GLOBE EUROPE-AFRICA");
				break;
			case 0x1F30E:
				strcpy_s(buf, buf_size, "EARTH GLOBE AMERICAS");
				break;
			case 0x1F30F:
				strcpy_s(buf, buf_size, "EARTH GLOBE ASIA-AUSTRALIA");
				break;
			case 0x1F310:
				strcpy_s(buf, buf_size, "GLOBE WITH MERIDIANS");
				break;
			case 0x1F311:
				strcpy_s(buf, buf_size, "NEW MOON SYMBOL");
				break;
			case 0x1F312:
				strcpy_s(buf, buf_size, "WAXING CRESCENT MOON SYMBOL");
				break;
			case 0x1F313:
				strcpy_s(buf, buf_size, "FIRST QUARTER MOON SYMBOL");
				break;
			case 0x1F314:
				strcpy_s(buf, buf_size, "WAXING GIBBOUS MOON SYMBOL");
				break;
			case 0x1F315:
				strcpy_s(buf, buf_size, "FULL MOON SYMBOL");
				break;
			case 0x1F316:
				strcpy_s(buf, buf_size, "WANING GIBBOUS MOON SYMBOL");
				break;
			case 0x1F317:
				strcpy_s(buf, buf_size, "LAST QUARTER MOON SYMBOL");
				break;
			case 0x1F318:
				strcpy_s(buf, buf_size, "WANING CRESCENT MOON SYMBOL");
				break;
			case 0x1F319:
				strcpy_s(buf, buf_size, "CRESCENT MOON");
				break;
			case 0x1F31A:
				strcpy_s(buf, buf_size, "NEW MOON WITH FACE");
				break;
			case 0x1F31B:
				strcpy_s(buf, buf_size, "FIRST QUARTER MOON WITH FACE");
				break;
			case 0x1F31C:
				strcpy_s(buf, buf_size, "LAST QUARTER MOON WITH FACE");
				break;
			case 0x1F31D:
				strcpy_s(buf, buf_size, "FULL MOON WITH FACE");
				break;
			case 0x1F31E:
				strcpy_s(buf, buf_size, "SUN WITH FACE");
				break;
			case 0x1F31F:
				strcpy_s(buf, buf_size, "GLOWING STAR");
				break;
			case 0x1F320:
				strcpy_s(buf, buf_size, "SHOOTING STAR");
				break;
			case 0x1F321:
				strcpy_s(buf, buf_size, "THERMOMETER");
				break;
			case 0x1F322:
				strcpy_s(buf, buf_size, "BLACK DROPLET");
				break;
			case 0x1F323:
				strcpy_s(buf, buf_size, "WHITE SUN");
				break;
			case 0x1F324:
				strcpy_s(buf, buf_size, "WHITE SUN WITH SMALL CLOUD");
				break;
			case 0x1F325:
				strcpy_s(buf, buf_size, "WHITE SUN BEHIND CLOUD");
				break;
			case 0x1F326:
				strcpy_s(buf, buf_size, "WHITE SUN BEHIND CLOUD WITH RAIN");
				break;
			case 0x1F327:
				strcpy_s(buf, buf_size, "CLOUD WITH RAIN");
				break;
			case 0x1F328:
				strcpy_s(buf, buf_size, "CLOUD WITH SNOW");
				break;
			case 0x1F329:
				strcpy_s(buf, buf_size, "CLOUD WITH LIGHTNING");
				break;
			case 0x1F32A:
				strcpy_s(buf, buf_size, "CLOUD WITH TORNADO");
				break;
			case 0x1F32B:
				strcpy_s(buf, buf_size, "FOG");
				break;
			case 0x1F32C:
				strcpy_s(buf, buf_size, "WIND BLOWING FACE");
				break;
			case 0x1F32D:
				strcpy_s(buf, buf_size, "HOT DOG");
				break;
			case 0x1F32E:
				strcpy_s(buf, buf_size, "TACO");
				break;
			case 0x1F32F:
				strcpy_s(buf, buf_size, "BURRITO");
				break;
			case 0x1F330:
				strcpy_s(buf, buf_size, "CHESTNUT");
				break;
			case 0x1F331:
				strcpy_s(buf, buf_size, "SEEDLING");
				break;
			case 0x1F332:
				strcpy_s(buf, buf_size, "EVERGREEN TREE");
				break;
			case 0x1F333:
				strcpy_s(buf, buf_size, "DECIDUOUS TREE");
				break;
			case 0x1F334:
				strcpy_s(buf, buf_size, "PALM TREE");
				break;
			case 0x1F335:
				strcpy_s(buf, buf_size, "CACTUS");
				break;
			case 0x1F336:
				strcpy_s(buf, buf_size, "HOT PEPPER");
				break;
			case 0x1F337:
				strcpy_s(buf, buf_size, "TULIP");
				break;
			case 0x1F338:
				strcpy_s(buf, buf_size, "CHERRY BLOSSOM");
				break;
			case 0x1F339:
				strcpy_s(buf, buf_size, "ROSE");
				break;
			case 0x1F33A:
				strcpy_s(buf, buf_size, "HIBISCUS");
				break;
			case 0x1F33B:
				strcpy_s(buf, buf_size, "SUNFLOWER");
				break;
			case 0x1F33C:
				strcpy_s(buf, buf_size, "BLOSSOM");
				break;
			case 0x1F33D:
				strcpy_s(buf, buf_size, "EAR OF MAIZE");
				break;
			case 0x1F33E:
				strcpy_s(buf, buf_size, "EAR OF RICE");
				break;
			case 0x1F33F:
				strcpy_s(buf, buf_size, "HERB");
				break;
			case 0x1F340:
				strcpy_s(buf, buf_size, "FOUR LEAF CLOVER");
				break;
			case 0x1F341:
				strcpy_s(buf, buf_size, "MAPLE LEAF");
				break;
			case 0x1F342:
				strcpy_s(buf, buf_size, "FALLEN LEAF");
				break;
			case 0x1F343:
				strcpy_s(buf, buf_size, "LEAF FLUTTERING IN WIND");
				break;
			case 0x1F344:
				strcpy_s(buf, buf_size, "MUSHROOM");
				break;
			case 0x1F345:
				strcpy_s(buf, buf_size, "TOMATO");
				break;
			case 0x1F346:
				strcpy_s(buf, buf_size, "AUBERGINE");
				break;
			case 0x1F347:
				strcpy_s(buf, buf_size, "GRAPES");
				break;
			case 0x1F348:
				strcpy_s(buf, buf_size, "MELON");
				break;
			case 0x1F349:
				strcpy_s(buf, buf_size, "WATERMELON");
				break;
			case 0x1F34A:
				strcpy_s(buf, buf_size, "TANGERINE");
				break;
			case 0x1F34B:
				strcpy_s(buf, buf_size, "LEMON");
				break;
			case 0x1F34C:
				strcpy_s(buf, buf_size, "BANANA");
				break;
			case 0x1F34D:
				strcpy_s(buf, buf_size, "PINEAPPLE");
				break;
			case 0x1F34E:
				strcpy_s(buf, buf_size, "RED APPLE");
				break;
			case 0x1F34F:
				strcpy_s(buf, buf_size, "GREEN APPLE");
				break;
			case 0x1F350:
				strcpy_s(buf, buf_size, "PEAR");
				break;
			case 0x1F351:
				strcpy_s(buf, buf_size, "PEACH");
				break;
			case 0x1F352:
				strcpy_s(buf, buf_size, "CHERRIES");
				break;
			case 0x1F353:
				strcpy_s(buf, buf_size, "STRAWBERRY");
				break;
			case 0x1F354:
				strcpy_s(buf, buf_size, "HAMBURGER");
				break;
			case 0x1F355:
				strcpy_s(buf, buf_size, "SLICE OF PIZZA");
				break;
			case 0x1F356:
				strcpy_s(buf, buf_size, "MEAT ON BONE");
				break;
			case 0x1F357:
				strcpy_s(buf, buf_size, "POULTRY LEG");
				break;
			case 0x1F358:
				strcpy_s(buf, buf_size, "RICE CRACKER");
				break;
			case 0x1F359:
				strcpy_s(buf, buf_size, "RICE BALL");
				break;
			case 0x1F35A:
				strcpy_s(buf, buf_size, "COOKED RICE");
				break;
			case 0x1F35B:
				strcpy_s(buf, buf_size, "CURRY AND RICE");
				break;
			case 0x1F35C:
				strcpy_s(buf, buf_size, "STEAMING BOWL");
				break;
			case 0x1F35D:
				strcpy_s(buf, buf_size, "SPAGHETTI");
				break;
			case 0x1F35E:
				strcpy_s(buf, buf_size, "BREAD");
				break;
			case 0x1F35F:
				strcpy_s(buf, buf_size, "FRENCH FRIES");
				break;
			case 0x1F360:
				strcpy_s(buf, buf_size, "ROASTED SWEET POTATO");
				break;
			case 0x1F361:
				strcpy_s(buf, buf_size, "DANGO");
				break;
			case 0x1F362:
				strcpy_s(buf, buf_size, "ODEN");
				break;
			case 0x1F363:
				strcpy_s(buf, buf_size, "SUSHI");
				break;
			case 0x1F364:
				strcpy_s(buf, buf_size, "FRIED SHRIMP");
				break;
			case 0x1F365:
				strcpy_s(buf, buf_size, "FISH CAKE WITH SWIRL DESIGN");
				break;
			case 0x1F366:
				strcpy_s(buf, buf_size, "SOFT ICE CREAM");
				break;
			case 0x1F367:
				strcpy_s(buf, buf_size, "SHAVED ICE");
				break;
			case 0x1F368:
				strcpy_s(buf, buf_size, "ICE CREAM");
				break;
			case 0x1F369:
				strcpy_s(buf, buf_size, "DOUGHNUT");
				break;
			case 0x1F36A:
				strcpy_s(buf, buf_size, "COOKIE");
				break;
			case 0x1F36B:
				strcpy_s(buf, buf_size, "CHOCOLATE BAR");
				break;
			case 0x1F36C:
				strcpy_s(buf, buf_size, "CANDY");
				break;
			case 0x1F36D:
				strcpy_s(buf, buf_size, "LOLLIPOP");
				break;
			case 0x1F36E:
				strcpy_s(buf, buf_size, "CUSTARD");
				break;
			case 0x1F36F:
				strcpy_s(buf, buf_size, "HONEY POT");
				break;
			case 0x1F370:
				strcpy_s(buf, buf_size, "SHORTCAKE");
				break;
			case 0x1F371:
				strcpy_s(buf, buf_size, "BENTO BOX");
				break;
			case 0x1F372:
				strcpy_s(buf, buf_size, "POT OF FOOD");
				break;
			case 0x1F373:
				strcpy_s(buf, buf_size, "COOKING");
				break;
			case 0x1F374:
				strcpy_s(buf, buf_size, "FORK AND KNIFE");
				break;
			case 0x1F375:
				strcpy_s(buf, buf_size, "TEACUP WITHOUT HANDLE");
				break;
			case 0x1F376:
				strcpy_s(buf, buf_size, "SAKE BOTTLE AND CUP");
				break;
			case 0x1F377:
				strcpy_s(buf, buf_size, "WINE GLASS");
				break;
			case 0x1F378:
				strcpy_s(buf, buf_size, "COCKTAIL GLASS");
				break;
			case 0x1F379:
				strcpy_s(buf, buf_size, "TROPICAL DRINK");
				break;
			case 0x1F37A:
				strcpy_s(buf, buf_size, "BEER MUG");
				break;
			case 0x1F37B:
				strcpy_s(buf, buf_size, "CLINKING BEER MUGS");
				break;
			case 0x1F37C:
				strcpy_s(buf, buf_size, "BABY BOTTLE");
				break;
			case 0x1F37D:
				strcpy_s(buf, buf_size, "FORK AND KNIFE WITH PLATE");
				break;
			case 0x1F37E:
				strcpy_s(buf, buf_size, "BOTTLE WITH POPPING CORK");
				break;
			case 0x1F37F:
				strcpy_s(buf, buf_size, "POPCORN");
				break;
			case 0x1F380:
				strcpy_s(buf, buf_size, "RIBBON");
				break;
			case 0x1F381:
				strcpy_s(buf, buf_size, "WRAPPED PRESENT");
				break;
			case 0x1F382:
				strcpy_s(buf, buf_size, "BIRTHDAY CAKE");
				break;
			case 0x1F383:
				strcpy_s(buf, buf_size, "JACK-O-LANTERN");
				break;
			case 0x1F384:
				strcpy_s(buf, buf_size, "CHRISTMAS TREE");
				break;
			case 0x1F385:
				strcpy_s(buf, buf_size, "FATHER CHRISTMAS");
				break;
			case 0x1F386:
				strcpy_s(buf, buf_size, "FIREWORKS");
				break;
			case 0x1F387:
				strcpy_s(buf, buf_size, "FIREWORK SPARKLER");
				break;
			case 0x1F388:
				strcpy_s(buf, buf_size, "BALLOON");
				break;
			case 0x1F389:
				strcpy_s(buf, buf_size, "PARTY POPPER");
				break;
			case 0x1F38A:
				strcpy_s(buf, buf_size, "CONFETTI BALL");
				break;
			case 0x1F38B:
				strcpy_s(buf, buf_size, "TANABATA TREE");
				break;
			case 0x1F38C:
				strcpy_s(buf, buf_size, "CROSSED FLAGS");
				break;
			case 0x1F38D:
				strcpy_s(buf, buf_size, "PINE DECORATION");
				break;
			case 0x1F38E:
				strcpy_s(buf, buf_size, "JAPANESE DOLLS");
				break;
			case 0x1F38F:
				strcpy_s(buf, buf_size, "CARP STREAMER");
				break;
			case 0x1F390:
				strcpy_s(buf, buf_size, "WIND CHIME");
				break;
			case 0x1F391:
				strcpy_s(buf, buf_size, "MOON VIEWING CEREMONY");
				break;
			case 0x1F392:
				strcpy_s(buf, buf_size, "SCHOOL SATCHEL");
				break;
			case 0x1F393:
				strcpy_s(buf, buf_size, "GRADUATION CAP");
				break;
			case 0x1F394:
				strcpy_s(buf, buf_size, "HEART WITH TIP ON THE LEFT");
				break;
			case 0x1F395:
				strcpy_s(buf, buf_size, "BOUQUET OF FLOWERS");
				break;
			case 0x1F396:
				strcpy_s(buf, buf_size, "MILITARY MEDAL");
				break;
			case 0x1F397:
				strcpy_s(buf, buf_size, "REMINDER RIBBON");
				break;
			case 0x1F398:
				strcpy_s(buf, buf_size, "MUSICAL KEYBOARD WITH JACKS");
				break;
			case 0x1F399:
				strcpy_s(buf, buf_size, "STUDIO MICROPHONE");
				break;
			case 0x1F39A:
				strcpy_s(buf, buf_size, "LEVEL SLIDER");
				break;
			case 0x1F39B:
				strcpy_s(buf, buf_size, "CONTROL KNOBS");
				break;
			case 0x1F39C:
				strcpy_s(buf, buf_size, "BEAMED ASCENDING MUSICAL NOTES");
				break;
			case 0x1F39D:
				strcpy_s(buf, buf_size, "BEAMED DESCENDING MUSICAL NOTES");
				break;
			case 0x1F39E:
				strcpy_s(buf, buf_size, "FILM FRAMES");
				break;
			case 0x1F39F:
				strcpy_s(buf, buf_size, "ADMISSION TICKETS");
				break;
			case 0x1F3A0:
				strcpy_s(buf, buf_size, "CAROUSEL HORSE");
				break;
			case 0x1F3A1:
				strcpy_s(buf, buf_size, "FERRIS WHEEL");
				break;
			case 0x1F3A2:
				strcpy_s(buf, buf_size, "ROLLER COASTER");
				break;
			case 0x1F3A3:
				strcpy_s(buf, buf_size, "FISHING POLE AND FISH");
				break;
			case 0x1F3A4:
				strcpy_s(buf, buf_size, "MICROPHONE");
				break;
			case 0x1F3A5:
				strcpy_s(buf, buf_size, "MOVIE CAMERA");
				break;
			case 0x1F3A6:
				strcpy_s(buf, buf_size, "CINEMA");
				break;
			case 0x1F3A7:
				strcpy_s(buf, buf_size, "HEADPHONE");
				break;
			case 0x1F3A8:
				strcpy_s(buf, buf_size, "ARTIST PALETTE");
				break;
			case 0x1F3A9:
				strcpy_s(buf, buf_size, "TOP HAT");
				break;
			case 0x1F3AA:
				strcpy_s(buf, buf_size, "CIRCUS TENT");
				break;
			case 0x1F3AB:
				strcpy_s(buf, buf_size, "TICKET");
				break;
			case 0x1F3AC:
				strcpy_s(buf, buf_size, "CLAPPER BOARD");
				break;
			case 0x1F3AD:
				strcpy_s(buf, buf_size, "PERFORMING ARTS");
				break;
			case 0x1F3AE:
				strcpy_s(buf, buf_size, "VIDEO GAME");
				break;
			case 0x1F3AF:
				strcpy_s(buf, buf_size, "DIRECT HIT");
				break;
			case 0x1F3B0:
				strcpy_s(buf, buf_size, "SLOT MACHINE");
				break;
			case 0x1F3B1:
				strcpy_s(buf, buf_size, "BILLIARDS");
				break;
			case 0x1F3B2:
				strcpy_s(buf, buf_size, "GAME DIE");
				break;
			case 0x1F3B3:
				strcpy_s(buf, buf_size, "BOWLING");
				break;
			case 0x1F3B4:
				strcpy_s(buf, buf_size, "FLOWER PLAYING CARDS");
				break;
			case 0x1F3B5:
				strcpy_s(buf, buf_size, "MUSICAL NOTE");
				break;
			case 0x1F3B6:
				strcpy_s(buf, buf_size, "MULTIPLE MUSICAL NOTES");
				break;
			case 0x1F3B7:
				strcpy_s(buf, buf_size, "SAXOPHONE");
				break;
			case 0x1F3B8:
				strcpy_s(buf, buf_size, "GUITAR");
				break;
			case 0x1F3B9:
				strcpy_s(buf, buf_size, "MUSICAL KEYBOARD");
				break;
			case 0x1F3BA:
				strcpy_s(buf, buf_size, "TRUMPET");
				break;
			case 0x1F3BB:
				strcpy_s(buf, buf_size, "VIOLIN");
				break;
			case 0x1F3BC:
				strcpy_s(buf, buf_size, "MUSICAL SCORE");
				break;
			case 0x1F3BD:
				strcpy_s(buf, buf_size, "RUNNING SHIRT WITH SASH");
				break;
			case 0x1F3BE:
				strcpy_s(buf, buf_size, "TENNIS RACQUET AND BALL");
				break;
			case 0x1F3BF:
				strcpy_s(buf, buf_size, "SKI AND SKI BOOT");
				break;
			case 0x1F3C0:
				strcpy_s(buf, buf_size, "BASKETBALL AND HOOP");
				break;
			case 0x1F3C1:
				strcpy_s(buf, buf_size, "CHEQUERED FLAG");
				break;
			case 0x1F3C2:
				strcpy_s(buf, buf_size, "SNOWBOARDER");
				break;
			case 0x1F3C3:
				strcpy_s(buf, buf_size, "RUNNER");
				break;
			case 0x1F3C4:
				strcpy_s(buf, buf_size, "SURFER");
				break;
			case 0x1F3C5:
				strcpy_s(buf, buf_size, "SPORTS MEDAL");
				break;
			case 0x1F3C6:
				strcpy_s(buf, buf_size, "TROPHY");
				break;
			case 0x1F3C7:
				strcpy_s(buf, buf_size, "HORSE RACING");
				break;
			case 0x1F3C8:
				strcpy_s(buf, buf_size, "AMERICAN FOOTBALL");
				break;
			case 0x1F3C9:
				strcpy_s(buf, buf_size, "RUGBY FOOTBALL");
				break;
			case 0x1F3CA:
				strcpy_s(buf, buf_size, "SWIMMER");
				break;
			case 0x1F3CB:
				strcpy_s(buf, buf_size, "WEIGHT LIFTER");
				break;
			case 0x1F3CC:
				strcpy_s(buf, buf_size, "GOLFER");
				break;
			case 0x1F3CD:
				strcpy_s(buf, buf_size, "RACING MOTORCYCLE");
				break;
			case 0x1F3CE:
				strcpy_s(buf, buf_size, "RACING CAR");
				break;
			case 0x1F3CF:
				strcpy_s(buf, buf_size, "CRICKET BAT AND BALL");
				break;
			case 0x1F3D0:
				strcpy_s(buf, buf_size, "VOLLEYBALL");
				break;
			case 0x1F3D1:
				strcpy_s(buf, buf_size, "FIELD HOCKEY STICK AND BALL");
				break;
			case 0x1F3D2:
				strcpy_s(buf, buf_size, "ICE HOCKEY STICK AND PUCK");
				break;
			case 0x1F3D3:
				strcpy_s(buf, buf_size, "TABLE TENNIS PADDLE AND BALL");
				break;
			case 0x1F3D4:
				strcpy_s(buf, buf_size, "SNOW CAPPED MOUNTAIN");
				break;
			case 0x1F3D5:
				strcpy_s(buf, buf_size, "CAMPING");
				break;
			case 0x1F3D6:
				strcpy_s(buf, buf_size, "BEACH WITH UMBRELLA");
				break;
			case 0x1F3D7:
				strcpy_s(buf, buf_size, "BUILDING CONSTRUCTION");
				break;
			case 0x1F3D8:
				strcpy_s(buf, buf_size, "HOUSE BUILDINGS");
				break;
			case 0x1F3D9:
				strcpy_s(buf, buf_size, "CITYSCAPE");
				break;
			case 0x1F3DA:
				strcpy_s(buf, buf_size, "DERELICT HOUSE BUILDING");
				break;
			case 0x1F3DB:
				strcpy_s(buf, buf_size, "CLASSICAL BUILDING");
				break;
			case 0x1F3DC:
				strcpy_s(buf, buf_size, "DESERT");
				break;
			case 0x1F3DD:
				strcpy_s(buf, buf_size, "DESERT ISLAND");
				break;
			case 0x1F3DE:
				strcpy_s(buf, buf_size, "NATIONAL PARK");
				break;
			case 0x1F3DF:
				strcpy_s(buf, buf_size, "STADIUM");
				break;
			case 0x1F3E0:
				strcpy_s(buf, buf_size, "HOUSE BUILDING");
				break;
			case 0x1F3E1:
				strcpy_s(buf, buf_size, "HOUSE WITH GARDEN");
				break;
			case 0x1F3E2:
				strcpy_s(buf, buf_size, "OFFICE BUILDING");
				break;
			case 0x1F3E3:
				strcpy_s(buf, buf_size, "JAPANESE POST OFFICE");
				break;
			case 0x1F3E4:
				strcpy_s(buf, buf_size, "EUROPEAN POST OFFICE");
				break;
			case 0x1F3E5:
				strcpy_s(buf, buf_size, "HOSPITAL");
				break;
			case 0x1F3E6:
				strcpy_s(buf, buf_size, "BANK");
				break;
			case 0x1F3E7:
				strcpy_s(buf, buf_size, "AUTOMATED TELLER MACHINE");
				break;
			case 0x1F3E8:
				strcpy_s(buf, buf_size, "HOTEL");
				break;
			case 0x1F3E9:
				strcpy_s(buf, buf_size, "LOVE HOTEL");
				break;
			case 0x1F3EA:
				strcpy_s(buf, buf_size, "CONVENIENCE STORE");
				break;
			case 0x1F3EB:
				strcpy_s(buf, buf_size, "SCHOOL");
				break;
			case 0x1F3EC:
				strcpy_s(buf, buf_size, "DEPARTMENT STORE");
				break;
			case 0x1F3ED:
				strcpy_s(buf, buf_size, "FACTORY");
				break;
			case 0x1F3EE:
				strcpy_s(buf, buf_size, "IZAKAYA LANTERN");
				break;
			case 0x1F3EF:
				strcpy_s(buf, buf_size, "JAPANESE CASTLE");
				break;
			case 0x1F3F0:
				strcpy_s(buf, buf_size, "EUROPEAN CASTLE");
				break;
			case 0x1F3F1:
				strcpy_s(buf, buf_size, "WHITE PENNANT");
				break;
			case 0x1F3F2:
				strcpy_s(buf, buf_size, "BLACK PENNANT");
				break;
			case 0x1F3F3:
				strcpy_s(buf, buf_size, "WAVING WHITE FLAG");
				break;
			case 0x1F3F4:
				strcpy_s(buf, buf_size, "WAVING BLACK FLAG");
				break;
			case 0x1F3F5:
				strcpy_s(buf, buf_size, "ROSETTE");
				break;
			case 0x1F3F6:
				strcpy_s(buf, buf_size, "BLACK ROSETTE");
				break;
			case 0x1F3F7:
				strcpy_s(buf, buf_size, "LABEL");
				break;
			case 0x1F3F8:
				strcpy_s(buf, buf_size, "BADMINTON RACQUET AND SHUTTLECOCK");
				break;
			case 0x1F3F9:
				strcpy_s(buf, buf_size, "BOW AND ARROW");
				break;
			case 0x1F3FA:
				strcpy_s(buf, buf_size, "AMPHORA");
				break;
			case 0x1F3FB:
				strcpy_s(buf, buf_size, "EMOJI MODIFIER FITZPATRICK TYPE-1-2");
				break;
			case 0x1F3FC:
				strcpy_s(buf, buf_size, "EMOJI MODIFIER FITZPATRICK TYPE-3");
				break;
			case 0x1F3FD:
				strcpy_s(buf, buf_size, "EMOJI MODIFIER FITZPATRICK TYPE-4");
				break;
			case 0x1F3FE:
				strcpy_s(buf, buf_size, "EMOJI MODIFIER FITZPATRICK TYPE-5");
				break;
			case 0x1F3FF:
				strcpy_s(buf, buf_size, "EMOJI MODIFIER FITZPATRICK TYPE-6");
				break;
			case 0x1F400:
				strcpy_s(buf, buf_size, "RAT");
				break;
			case 0x1F401:
				strcpy_s(buf, buf_size, "MOUSE");
				break;
			case 0x1F402:
				strcpy_s(buf, buf_size, "OX");
				break;
			case 0x1F403:
				strcpy_s(buf, buf_size, "WATER BUFFALO");
				break;
			case 0x1F404:
				strcpy_s(buf, buf_size, "COW");
				break;
			case 0x1F405:
				strcpy_s(buf, buf_size, "TIGER");
				break;
			case 0x1F406:
				strcpy_s(buf, buf_size, "LEOPARD");
				break;
			case 0x1F407:
				strcpy_s(buf, buf_size, "RABBIT");
				break;
			case 0x1F408:
				strcpy_s(buf, buf_size, "CAT");
				break;
			case 0x1F409:
				strcpy_s(buf, buf_size, "DRAGON");
				break;
			case 0x1F40A:
				strcpy_s(buf, buf_size, "CROCODILE");
				break;
			case 0x1F40B:
				strcpy_s(buf, buf_size, "WHALE");
				break;
			case 0x1F40C:
				strcpy_s(buf, buf_size, "SNAIL");
				break;
			case 0x1F40D:
				strcpy_s(buf, buf_size, "SNAKE");
				break;
			case 0x1F40E:
				strcpy_s(buf, buf_size, "HORSE");
				break;
			case 0x1F40F:
				strcpy_s(buf, buf_size, "RAM");
				break;
			case 0x1F410:
				strcpy_s(buf, buf_size, "GOAT");
				break;
			case 0x1F411:
				strcpy_s(buf, buf_size, "SHEEP");
				break;
			case 0x1F412:
				strcpy_s(buf, buf_size, "MONKEY");
				break;
			case 0x1F413:
				strcpy_s(buf, buf_size, "ROOSTER");
				break;
			case 0x1F414:
				strcpy_s(buf, buf_size, "CHICKEN");
				break;
			case 0x1F415:
				strcpy_s(buf, buf_size, "DOG");
				break;
			case 0x1F416:
				strcpy_s(buf, buf_size, "PIG");
				break;
			case 0x1F417:
				strcpy_s(buf, buf_size, "BOAR");
				break;
			case 0x1F418:
				strcpy_s(buf, buf_size, "ELEPHANT");
				break;
			case 0x1F419:
				strcpy_s(buf, buf_size, "OCTOPUS");
				break;
			case 0x1F41A:
				strcpy_s(buf, buf_size, "SPIRAL SHELL");
				break;
			case 0x1F41B:
				strcpy_s(buf, buf_size, "BUG");
				break;
			case 0x1F41C:
				strcpy_s(buf, buf_size, "ANT");
				break;
			case 0x1F41D:
				strcpy_s(buf, buf_size, "HONEYBEE");
				break;
			case 0x1F41E:
				strcpy_s(buf, buf_size, "LADY BEETLE");
				break;
			case 0x1F41F:
				strcpy_s(buf, buf_size, "FISH");
				break;
			case 0x1F420:
				strcpy_s(buf, buf_size, "TROPICAL FISH");
				break;
			case 0x1F421:
				strcpy_s(buf, buf_size, "BLOWFISH");
				break;
			case 0x1F422:
				strcpy_s(buf, buf_size, "TURTLE");
				break;
			case 0x1F423:
				strcpy_s(buf, buf_size, "HATCHING CHICK");
				break;
			case 0x1F424:
				strcpy_s(buf, buf_size, "BABY CHICK");
				break;
			case 0x1F425:
				strcpy_s(buf, buf_size, "FRONT-FACING BABY CHICK");
				break;
			case 0x1F426:
				strcpy_s(buf, buf_size, "BIRD");
				break;
			case 0x1F427:
				strcpy_s(buf, buf_size, "PENGUIN");
				break;
			case 0x1F428:
				strcpy_s(buf, buf_size, "KOALA");
				break;
			case 0x1F429:
				strcpy_s(buf, buf_size, "POODLE");
				break;
			case 0x1F42A:
				strcpy_s(buf, buf_size, "DROMEDARY CAMEL");
				break;
			case 0x1F42B:
				strcpy_s(buf, buf_size, "BACTRIAN CAMEL");
				break;
			case 0x1F42C:
				strcpy_s(buf, buf_size, "DOLPHIN");
				break;
			case 0x1F42D:
				strcpy_s(buf, buf_size, "MOUSE FACE");
				break;
			case 0x1F42E:
				strcpy_s(buf, buf_size, "COW FACE");
				break;
			case 0x1F42F:
				strcpy_s(buf, buf_size, "TIGER FACE");
				break;
			case 0x1F430:
				strcpy_s(buf, buf_size, "RABBIT FACE");
				break;
			case 0x1F431:
				strcpy_s(buf, buf_size, "CAT FACE");
				break;
			case 0x1F432:
				strcpy_s(buf, buf_size, "DRAGON FACE");
				break;
			case 0x1F433:
				strcpy_s(buf, buf_size, "SPOUTING WHALE");
				break;
			case 0x1F434:
				strcpy_s(buf, buf_size, "HORSE FACE");
				break;
			case 0x1F435:
				strcpy_s(buf, buf_size, "MONKEY FACE");
				break;
			case 0x1F436:
				strcpy_s(buf, buf_size, "DOG FACE");
				break;
			case 0x1F437:
				strcpy_s(buf, buf_size, "PIG FACE");
				break;
			case 0x1F438:
				strcpy_s(buf, buf_size, "FROG FACE");
				break;
			case 0x1F439:
				strcpy_s(buf, buf_size, "HAMSTER FACE");
				break;
			case 0x1F43A:
				strcpy_s(buf, buf_size, "WOLF FACE");
				break;
			case 0x1F43B:
				strcpy_s(buf, buf_size, "BEAR FACE");
				break;
			case 0x1F43C:
				strcpy_s(buf, buf_size, "PANDA FACE");
				break;
			case 0x1F43D:
				strcpy_s(buf, buf_size, "PIG NOSE");
				break;
			case 0x1F43E:
				strcpy_s(buf, buf_size, "PAW PRINTS");
				break;
			case 0x1F43F:
				strcpy_s(buf, buf_size, "CHIPMUNK");
				break;
			case 0x1F440:
				strcpy_s(buf, buf_size, "EYES");
				break;
			case 0x1F441:
				strcpy_s(buf, buf_size, "EYE");
				break;
			case 0x1F442:
				strcpy_s(buf, buf_size, "EAR");
				break;
			case 0x1F443:
				strcpy_s(buf, buf_size, "NOSE");
				break;
			case 0x1F444:
				strcpy_s(buf, buf_size, "MOUTH");
				break;
			case 0x1F445:
				strcpy_s(buf, buf_size, "TONGUE");
				break;
			case 0x1F446:
				strcpy_s(buf, buf_size, "WHITE UP POINTING BACKHAND INDEX");
				break;
			case 0x1F447:
				strcpy_s(buf, buf_size, "WHITE DOWN POINTING BACKHAND INDEX");
				break;
			case 0x1F448:
				strcpy_s(buf, buf_size, "WHITE LEFT POINTING BACKHAND INDEX");
				break;
			case 0x1F449:
				strcpy_s(buf, buf_size, "WHITE RIGHT POINTING BACKHAND INDEX");
				break;
			case 0x1F44A:
				strcpy_s(buf, buf_size, "FISTED HAND SIGN");
				break;
			case 0x1F44B:
				strcpy_s(buf, buf_size, "WAVING HAND SIGN");
				break;
			case 0x1F44C:
				strcpy_s(buf, buf_size, "OK HAND SIGN");
				break;
			case 0x1F44D:
				strcpy_s(buf, buf_size, "THUMBS UP SIGN");
				break;
			case 0x1F44E:
				strcpy_s(buf, buf_size, "THUMBS DOWN SIGN");
				break;
			case 0x1F44F:
				strcpy_s(buf, buf_size, "CLAPPING HANDS SIGN");
				break;
			case 0x1F450:
				strcpy_s(buf, buf_size, "OPEN HANDS SIGN");
				break;
			case 0x1F451:
				strcpy_s(buf, buf_size, "CROWN");
				break;
			case 0x1F452:
				strcpy_s(buf, buf_size, "WOMANS HAT");
				break;
			case 0x1F453:
				strcpy_s(buf, buf_size, "EYEGLASSES");
				break;
			case 0x1F454:
				strcpy_s(buf, buf_size, "NECKTIE");
				break;
			case 0x1F455:
				strcpy_s(buf, buf_size, "T-SHIRT");
				break;
			case 0x1F456:
				strcpy_s(buf, buf_size, "JEANS");
				break;
			case 0x1F457:
				strcpy_s(buf, buf_size, "DRESS");
				break;
			case 0x1F458:
				strcpy_s(buf, buf_size, "KIMONO");
				break;
			case 0x1F459:
				strcpy_s(buf, buf_size, "BIKINI");
				break;
			case 0x1F45A:
				strcpy_s(buf, buf_size, "WOMANS CLOTHES");
				break;
			case 0x1F45B:
				strcpy_s(buf, buf_size, "PURSE");
				break;
			case 0x1F45C:
				strcpy_s(buf, buf_size, "HANDBAG");
				break;
			case 0x1F45D:
				strcpy_s(buf, buf_size, "POUCH");
				break;
			case 0x1F45E:
				strcpy_s(buf, buf_size, "MANS SHOE");
				break;
			case 0x1F45F:
				strcpy_s(buf, buf_size, "ATHLETIC SHOE");
				break;
			case 0x1F460:
				strcpy_s(buf, buf_size, "HIGH-HEELED SHOE");
				break;
			case 0x1F461:
				strcpy_s(buf, buf_size, "WOMANS SANDAL");
				break;
			case 0x1F462:
				strcpy_s(buf, buf_size, "WOMANS BOOTS");
				break;
			case 0x1F463:
				strcpy_s(buf, buf_size, "FOOTPRINTS");
				break;
			case 0x1F464:
				strcpy_s(buf, buf_size, "BUST IN SILHOUETTE");
				break;
			case 0x1F465:
				strcpy_s(buf, buf_size, "BUSTS IN SILHOUETTE");
				break;
			case 0x1F466:
				strcpy_s(buf, buf_size, "BOY");
				break;
			case 0x1F467:
				strcpy_s(buf, buf_size, "GIRL");
				break;
			case 0x1F468:
				strcpy_s(buf, buf_size, "MAN");
				break;
			case 0x1F469:
				strcpy_s(buf, buf_size, "WOMAN");
				break;
			case 0x1F46A:
				strcpy_s(buf, buf_size, "FAMILY");
				break;
			case 0x1F46B:
				strcpy_s(buf, buf_size, "MAN AND WOMAN HOLDING HANDS");
				break;
			case 0x1F46C:
				strcpy_s(buf, buf_size, "TWO MEN HOLDING HANDS");
				break;
			case 0x1F46D:
				strcpy_s(buf, buf_size, "TWO WOMEN HOLDING HANDS");
				break;
			case 0x1F46E:
				strcpy_s(buf, buf_size, "POLICE OFFICER");
				break;
			case 0x1F46F:
				strcpy_s(buf, buf_size, "WOMAN WITH BUNNY EARS");
				break;
			case 0x1F470:
				strcpy_s(buf, buf_size, "BRIDE WITH VEIL");
				break;
			case 0x1F471:
				strcpy_s(buf, buf_size, "PERSON WITH BLOND HAIR");
				break;
			case 0x1F472:
				strcpy_s(buf, buf_size, "MAN WITH GUA PI MAO");
				break;
			case 0x1F473:
				strcpy_s(buf, buf_size, "MAN WITH TURBAN");
				break;
			case 0x1F474:
				strcpy_s(buf, buf_size, "OLDER MAN");
				break;
			case 0x1F475:
				strcpy_s(buf, buf_size, "OLDER WOMAN");
				break;
			case 0x1F476:
				strcpy_s(buf, buf_size, "BABY");
				break;
			case 0x1F477:
				strcpy_s(buf, buf_size, "CONSTRUCTION WORKER");
				break;
			case 0x1F478:
				strcpy_s(buf, buf_size, "PRINCESS");
				break;
			case 0x1F479:
				strcpy_s(buf, buf_size, "JAPANESE OGRE");
				break;
			case 0x1F47A:
				strcpy_s(buf, buf_size, "JAPANESE GOBLIN");
				break;
			case 0x1F47B:
				strcpy_s(buf, buf_size, "GHOST");
				break;
			case 0x1F47C:
				strcpy_s(buf, buf_size, "BABY ANGEL");
				break;
			case 0x1F47D:
				strcpy_s(buf, buf_size, "EXTRATERRESTRIAL ALIEN");
				break;
			case 0x1F47E:
				strcpy_s(buf, buf_size, "ALIEN MONSTER");
				break;
			case 0x1F47F:
				strcpy_s(buf, buf_size, "IMP");
				break;
			case 0x1F480:
				strcpy_s(buf, buf_size, "SKULL");
				break;
			case 0x1F481:
				strcpy_s(buf, buf_size, "INFORMATION DESK PERSON");
				break;
			case 0x1F482:
				strcpy_s(buf, buf_size, "GUARDSMAN");
				break;
			case 0x1F483:
				strcpy_s(buf, buf_size, "DANCER");
				break;
			case 0x1F484:
				strcpy_s(buf, buf_size, "LIPSTICK");
				break;
			case 0x1F485:
				strcpy_s(buf, buf_size, "NAIL POLISH");
				break;
			case 0x1F486:
				strcpy_s(buf, buf_size, "FACE MASSAGE");
				break;
			case 0x1F487:
				strcpy_s(buf, buf_size, "HAIRCUT");
				break;
			case 0x1F488:
				strcpy_s(buf, buf_size, "BARBER POLE");
				break;
			case 0x1F489:
				strcpy_s(buf, buf_size, "SYRINGE");
				break;
			case 0x1F48A:
				strcpy_s(buf, buf_size, "PILL");
				break;
			case 0x1F48B:
				strcpy_s(buf, buf_size, "KISS MARK");
				break;
			case 0x1F48C:
				strcpy_s(buf, buf_size, "LOVE LETTER");
				break;
			case 0x1F48D:
				strcpy_s(buf, buf_size, "RING");
				break;
			case 0x1F48E:
				strcpy_s(buf, buf_size, "GEM STONE");
				break;
			case 0x1F48F:
				strcpy_s(buf, buf_size, "KISS");
				break;
			case 0x1F490:
				strcpy_s(buf, buf_size, "BOUQUET");
				break;
			case 0x1F491:
				strcpy_s(buf, buf_size, "COUPLE WITH HEART");
				break;
			case 0x1F492:
				strcpy_s(buf, buf_size, "WEDDING");
				break;
			case 0x1F493:
				strcpy_s(buf, buf_size, "BEATING HEART");
				break;
			case 0x1F494:
				strcpy_s(buf, buf_size, "BROKEN HEART");
				break;
			case 0x1F495:
				strcpy_s(buf, buf_size, "TWO HEARTS");
				break;
			case 0x1F496:
				strcpy_s(buf, buf_size, "SPARKLING HEART");
				break;
			case 0x1F497:
				strcpy_s(buf, buf_size, "GROWING HEART");
				break;
			case 0x1F498:
				strcpy_s(buf, buf_size, "HEART WITH ARROW");
				break;
			case 0x1F499:
				strcpy_s(buf, buf_size, "BLUE HEART");
				break;
			case 0x1F49A:
				strcpy_s(buf, buf_size, "GREEN HEART");
				break;
			case 0x1F49B:
				strcpy_s(buf, buf_size, "YELLOW HEART");
				break;
			case 0x1F49C:
				strcpy_s(buf, buf_size, "PURPLE HEART");
				break;
			case 0x1F49D:
				strcpy_s(buf, buf_size, "HEART WITH RIBBON");
				break;
			case 0x1F49E:
				strcpy_s(buf, buf_size, "REVOLVING HEARTS");
				break;
			case 0x1F49F:
				strcpy_s(buf, buf_size, "HEART DECORATION");
				break;
			case 0x1F4A0:
				strcpy_s(buf, buf_size, "DIAMOND SHAPE WITH A DOT INSIDE");
				break;
			case 0x1F4A1:
				strcpy_s(buf, buf_size, "ELECTRIC LIGHT BULB");
				break;
			case 0x1F4A2:
				strcpy_s(buf, buf_size, "ANGER SYMBOL");
				break;
			case 0x1F4A3:
				strcpy_s(buf, buf_size, "BOMB");
				break;
			case 0x1F4A4:
				strcpy_s(buf, buf_size, "SLEEPING SYMBOL");
				break;
			case 0x1F4A5:
				strcpy_s(buf, buf_size, "COLLISION SYMBOL");
				break;
			case 0x1F4A6:
				strcpy_s(buf, buf_size, "SPLASHING SWEAT SYMBOL");
				break;
			case 0x1F4A7:
				strcpy_s(buf, buf_size, "DROPLET");
				break;
			case 0x1F4A8:
				strcpy_s(buf, buf_size, "DASH SYMBOL");
				break;
			case 0x1F4A9:
				strcpy_s(buf, buf_size, "PILE OF POO");
				break;
			case 0x1F4AA:
				strcpy_s(buf, buf_size, "FLEXED BICEPS");
				break;
			case 0x1F4AB:
				strcpy_s(buf, buf_size, "DIZZY SYMBOL");
				break;
			case 0x1F4AC:
				strcpy_s(buf, buf_size, "SPEECH BALLOON");
				break;
			case 0x1F4AD:
				strcpy_s(buf, buf_size, "THOUGHT BALLOON");
				break;
			case 0x1F4AE:
				strcpy_s(buf, buf_size, "WHITE FLOWER");
				break;
			case 0x1F4AF:
				strcpy_s(buf, buf_size, "HUNDRED POINTS SYMBOL");
				break;
			case 0x1F4B0:
				strcpy_s(buf, buf_size, "MONEY BAG");
				break;
			case 0x1F4B1:
				strcpy_s(buf, buf_size, "CURRENCY EXCHANGE");
				break;
			case 0x1F4B2:
				strcpy_s(buf, buf_size, "HEAVY DOLLAR SIGN");
				break;
			case 0x1F4B3:
				strcpy_s(buf, buf_size, "CREDIT CARD");
				break;
			case 0x1F4B4:
				strcpy_s(buf, buf_size, "BANKNOTE WITH YEN SIGN");
				break;
			case 0x1F4B5:
				strcpy_s(buf, buf_size, "BANKNOTE WITH DOLLAR SIGN");
				break;
			case 0x1F4B6:
				strcpy_s(buf, buf_size, "BANKNOTE WITH EURO SIGN");
				break;
			case 0x1F4B7:
				strcpy_s(buf, buf_size, "BANKNOTE WITH POUND SIGN");
				break;
			case 0x1F4B8:
				strcpy_s(buf, buf_size, "MONEY WITH WINGS");
				break;
			case 0x1F4B9:
				strcpy_s(buf, buf_size, "CHART WITH UPWARDS TREND AND YEN SIGN");
				break;
			case 0x1F4BA:
				strcpy_s(buf, buf_size, "SEAT");
				break;
			case 0x1F4BB:
				strcpy_s(buf, buf_size, "PERSONAL COMPUTER");
				break;
			case 0x1F4BC:
				strcpy_s(buf, buf_size, "BRIEFCASE");
				break;
			case 0x1F4BD:
				strcpy_s(buf, buf_size, "MINIDISC");
				break;
			case 0x1F4BE:
				strcpy_s(buf, buf_size, "FLOPPY DISK");
				break;
			case 0x1F4BF:
				strcpy_s(buf, buf_size, "OPTICAL DISC");
				break;
			case 0x1F4C0:
				strcpy_s(buf, buf_size, "DVD");
				break;
			case 0x1F4C1:
				strcpy_s(buf, buf_size, "FILE FOLDER");
				break;
			case 0x1F4C2:
				strcpy_s(buf, buf_size, "OPEN FILE FOLDER");
				break;
			case 0x1F4C3:
				strcpy_s(buf, buf_size, "PAGE WITH CURL");
				break;
			case 0x1F4C4:
				strcpy_s(buf, buf_size, "PAGE FACING UP");
				break;
			case 0x1F4C5:
				strcpy_s(buf, buf_size, "CALENDAR");
				break;
			case 0x1F4C6:
				strcpy_s(buf, buf_size, "TEAR-OFF CALENDAR");
				break;
			case 0x1F4C7:
				strcpy_s(buf, buf_size, "CARD INDEX");
				break;
			case 0x1F4C8:
				strcpy_s(buf, buf_size, "CHART WITH UPWARDS TREND");
				break;
			case 0x1F4C9:
				strcpy_s(buf, buf_size, "CHART WITH DOWNWARDS TREND");
				break;
			case 0x1F4CA:
				strcpy_s(buf, buf_size, "BAR CHART");
				break;
			case 0x1F4CB:
				strcpy_s(buf, buf_size, "CLIPBOARD");
				break;
			case 0x1F4CC:
				strcpy_s(buf, buf_size, "PUSHPIN");
				break;
			case 0x1F4CD:
				strcpy_s(buf, buf_size, "ROUND PUSHPIN");
				break;
			case 0x1F4CE:
				strcpy_s(buf, buf_size, "PAPERCLIP");
				break;
			case 0x1F4CF:
				strcpy_s(buf, buf_size, "STRAIGHT RULER");
				break;
			case 0x1F4D0:
				strcpy_s(buf, buf_size, "TRIANGULAR RULER");
				break;
			case 0x1F4D1:
				strcpy_s(buf, buf_size, "BOOKMARK TABS");
				break;
			case 0x1F4D2:
				strcpy_s(buf, buf_size, "LEDGER");
				break;
			case 0x1F4D3:
				strcpy_s(buf, buf_size, "NOTEBOOK");
				break;
			case 0x1F4D4:
				strcpy_s(buf, buf_size, "NOTEBOOK WITH DECORATIVE COVER");
				break;
			case 0x1F4D5:
				strcpy_s(buf, buf_size, "CLOSED BOOK");
				break;
			case 0x1F4D6:
				strcpy_s(buf, buf_size, "OPEN BOOK");
				break;
			case 0x1F4D7:
				strcpy_s(buf, buf_size, "GREEN BOOK");
				break;
			case 0x1F4D8:
				strcpy_s(buf, buf_size, "BLUE BOOK");
				break;
			case 0x1F4D9:
				strcpy_s(buf, buf_size, "ORANGE BOOK");
				break;
			case 0x1F4DA:
				strcpy_s(buf, buf_size, "BOOKS");
				break;
			case 0x1F4DB:
				strcpy_s(buf, buf_size, "NAME BADGE");
				break;
			case 0x1F4DC:
				strcpy_s(buf, buf_size, "SCROLL");
				break;
			case 0x1F4DD:
				strcpy_s(buf, buf_size, "MEMO");
				break;
			case 0x1F4DE:
				strcpy_s(buf, buf_size, "TELEPHONE RECEIVER");
				break;
			case 0x1F4DF:
				strcpy_s(buf, buf_size, "PAGER");
				break;
			case 0x1F4E0:
				strcpy_s(buf, buf_size, "FAX MACHINE");
				break;
			case 0x1F4E1:
				strcpy_s(buf, buf_size, "SATELLITE ANTENNA");
				break;
			case 0x1F4E2:
				strcpy_s(buf, buf_size, "PUBLIC ADDRESS LOUDSPEAKER");
				break;
			case 0x1F4E3:
				strcpy_s(buf, buf_size, "CHEERING MEGAPHONE");
				break;
			case 0x1F4E4:
				strcpy_s(buf, buf_size, "OUTBOX TRAY");
				break;
			case 0x1F4E5:
				strcpy_s(buf, buf_size, "INBOX TRAY");
				break;
			case 0x1F4E6:
				strcpy_s(buf, buf_size, "PACKAGE");
				break;
			case 0x1F4E7:
				strcpy_s(buf, buf_size, "E-MAIL SYMBOL");
				break;
			case 0x1F4E8:
				strcpy_s(buf, buf_size, "INCOMING ENVELOPE");
				break;
			case 0x1F4E9:
				strcpy_s(buf, buf_size, "ENVELOPE WITH DOWNWARDS ARROW ABOVE");
				break;
			case 0x1F4EA:
				strcpy_s(buf, buf_size, "CLOSED MAILBOX WITH LOWERED FLAG");
				break;
			case 0x1F4EB:
				strcpy_s(buf, buf_size, "CLOSED MAILBOX WITH RAISED FLAG");
				break;
			case 0x1F4EC:
				strcpy_s(buf, buf_size, "OPEN MAILBOX WITH RAISED FLAG");
				break;
			case 0x1F4ED:
				strcpy_s(buf, buf_size, "OPEN MAILBOX WITH LOWERED FLAG");
				break;
			case 0x1F4EE:
				strcpy_s(buf, buf_size, "POSTBOX");
				break;
			case 0x1F4EF:
				strcpy_s(buf, buf_size, "POSTAL HORN");
				break;
			case 0x1F4F0:
				strcpy_s(buf, buf_size, "NEWSPAPER");
				break;
			case 0x1F4F1:
				strcpy_s(buf, buf_size, "MOBILE PHONE");
				break;
			case 0x1F4F2:
				strcpy_s(buf, buf_size, "MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT");
				break;
			case 0x1F4F3:
				strcpy_s(buf, buf_size, "VIBRATION MODE");
				break;
			case 0x1F4F4:
				strcpy_s(buf, buf_size, "MOBILE PHONE OFF");
				break;
			case 0x1F4F5:
				strcpy_s(buf, buf_size, "NO MOBILE PHONES");
				break;
			case 0x1F4F6:
				strcpy_s(buf, buf_size, "ANTENNA WITH BARS");
				break;
			case 0x1F4F7:
				strcpy_s(buf, buf_size, "CAMERA");
				break;
			case 0x1F4F8:
				strcpy_s(buf, buf_size, "CAMERA WITH FLASH");
				break;
			case 0x1F4F9:
				strcpy_s(buf, buf_size, "VIDEO CAMERA");
				break;
			case 0x1F4FA:
				strcpy_s(buf, buf_size, "TELEVISION");
				break;
			case 0x1F4FB:
				strcpy_s(buf, buf_size, "RADIO");
				break;
			case 0x1F4FC:
				strcpy_s(buf, buf_size, "VIDEOCASSETTE");
				break;
			case 0x1F4FD:
				strcpy_s(buf, buf_size, "FILM PROJECTOR");
				break;
			case 0x1F4FE:
				strcpy_s(buf, buf_size, "PORTABLE STEREO");
				break;
			case 0x1F4FF:
				strcpy_s(buf, buf_size, "PRAYER BEADS");
				break;
			case 0x1F500:
				strcpy_s(buf, buf_size, "TWISTED RIGHTWARDS ARROWS");
				break;
			case 0x1F501:
				strcpy_s(buf, buf_size, "CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS");
				break;
			case 0x1F502:
				strcpy_s(buf, buf_size, "CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY");
				break;
			case 0x1F503:
				strcpy_s(buf, buf_size, "CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS");
				break;
			case 0x1F504:
				strcpy_s(buf, buf_size, "ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS");
				break;
			case 0x1F505:
				strcpy_s(buf, buf_size, "LOW BRIGHTNESS SYMBOL");
				break;
			case 0x1F506:
				strcpy_s(buf, buf_size, "HIGH BRIGHTNESS SYMBOL");
				break;
			case 0x1F507:
				strcpy_s(buf, buf_size, "SPEAKER WITH CANCELLATION STROKE");
				break;
			case 0x1F508:
				strcpy_s(buf, buf_size, "SPEAKER");
				break;
			case 0x1F509:
				strcpy_s(buf, buf_size, "SPEAKER WITH ONE SOUND WAVE");
				break;
			case 0x1F50A:
				strcpy_s(buf, buf_size, "SPEAKER WITH THREE SOUND WAVES");
				break;
			case 0x1F50B:
				strcpy_s(buf, buf_size, "BATTERY");
				break;
			case 0x1F50C:
				strcpy_s(buf, buf_size, "ELECTRIC PLUG");
				break;
			case 0x1F50D:
				strcpy_s(buf, buf_size, "LEFT-POINTING MAGNIFYING GLASS");
				break;
			case 0x1F50E:
				strcpy_s(buf, buf_size, "RIGHT-POINTING MAGNIFYING GLASS");
				break;
			case 0x1F50F:
				strcpy_s(buf, buf_size, "LOCK WITH INK PEN");
				break;
			case 0x1F510:
				strcpy_s(buf, buf_size, "CLOSED LOCK WITH KEY");
				break;
			case 0x1F511:
				strcpy_s(buf, buf_size, "KEY");
				break;
			case 0x1F512:
				strcpy_s(buf, buf_size, "LOCK");
				break;
			case 0x1F513:
				strcpy_s(buf, buf_size, "OPEN LOCK");
				break;
			case 0x1F514:
				strcpy_s(buf, buf_size, "BELL");
				break;
			case 0x1F515:
				strcpy_s(buf, buf_size, "BELL WITH CANCELLATION STROKE");
				break;
			case 0x1F516:
				strcpy_s(buf, buf_size, "BOOKMARK");
				break;
			case 0x1F517:
				strcpy_s(buf, buf_size, "LINK SYMBOL");
				break;
			case 0x1F518:
				strcpy_s(buf, buf_size, "RADIO BUTTON");
				break;
			case 0x1F519:
				strcpy_s(buf, buf_size, "BACK WITH LEFTWARDS ARROW ABOVE");
				break;
			case 0x1F51A:
				strcpy_s(buf, buf_size, "END WITH LEFTWARDS ARROW ABOVE");
				break;
			case 0x1F51B:
				strcpy_s(buf, buf_size, "ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE");
				break;
			case 0x1F51C:
				strcpy_s(buf, buf_size, "SOON WITH RIGHTWARDS ARROW ABOVE");
				break;
			case 0x1F51D:
				strcpy_s(buf, buf_size, "TOP WITH UPWARDS ARROW ABOVE");
				break;
			case 0x1F51E:
				strcpy_s(buf, buf_size, "NO ONE UNDER EIGHTEEN SYMBOL");
				break;
			case 0x1F51F:
				strcpy_s(buf, buf_size, "KEYCAP TEN");
				break;
			case 0x1F520:
				strcpy_s(buf, buf_size, "INPUT SYMBOL FOR LATIN CAPITAL LETTERS");
				break;
			case 0x1F521:
				strcpy_s(buf, buf_size, "INPUT SYMBOL FOR LATIN SMALL LETTERS");
				break;
			case 0x1F522:
				strcpy_s(buf, buf_size, "INPUT SYMBOL FOR NUMBERS");
				break;
			case 0x1F523:
				strcpy_s(buf, buf_size, "INPUT SYMBOL FOR SYMBOLS");
				break;
			case 0x1F524:
				strcpy_s(buf, buf_size, "INPUT SYMBOL FOR LATIN LETTERS");
				break;
			case 0x1F525:
				strcpy_s(buf, buf_size, "FIRE");
				break;
			case 0x1F526:
				strcpy_s(buf, buf_size, "ELECTRIC TORCH");
				break;
			case 0x1F527:
				strcpy_s(buf, buf_size, "WRENCH");
				break;
			case 0x1F528:
				strcpy_s(buf, buf_size, "HAMMER");
				break;
			case 0x1F529:
				strcpy_s(buf, buf_size, "NUT AND BOLT");
				break;
			case 0x1F52A:
				strcpy_s(buf, buf_size, "HOCHO");
				break;
			case 0x1F52B:
				strcpy_s(buf, buf_size, "PISTOL");
				break;
			case 0x1F52C:
				strcpy_s(buf, buf_size, "MICROSCOPE");
				break;
			case 0x1F52D:
				strcpy_s(buf, buf_size, "TELESCOPE");
				break;
			case 0x1F52E:
				strcpy_s(buf, buf_size, "CRYSTAL BALL");
				break;
			case 0x1F52F:
				strcpy_s(buf, buf_size, "SIX POINTED STAR WITH MIDDLE DOT");
				break;
			case 0x1F530:
				strcpy_s(buf, buf_size, "JAPANESE SYMBOL FOR BEGINNER");
				break;
			case 0x1F531:
				strcpy_s(buf, buf_size, "TRIDENT EMBLEM");
				break;
			case 0x1F532:
				strcpy_s(buf, buf_size, "BLACK SQUARE BUTTON");
				break;
			case 0x1F533:
				strcpy_s(buf, buf_size, "WHITE SQUARE BUTTON");
				break;
			case 0x1F534:
				strcpy_s(buf, buf_size, "LARGE RED CIRCLE");
				break;
			case 0x1F535:
				strcpy_s(buf, buf_size, "LARGE BLUE CIRCLE");
				break;
			case 0x1F536:
				strcpy_s(buf, buf_size, "LARGE ORANGE DIAMOND");
				break;
			case 0x1F537:
				strcpy_s(buf, buf_size, "LARGE BLUE DIAMOND");
				break;
			case 0x1F538:
				strcpy_s(buf, buf_size, "SMALL ORANGE DIAMOND");
				break;
			case 0x1F539:
				strcpy_s(buf, buf_size, "SMALL BLUE DIAMOND");
				break;
			case 0x1F53A:
				strcpy_s(buf, buf_size, "UP-POINTING RED TRIANGLE");
				break;
			case 0x1F53B:
				strcpy_s(buf, buf_size, "DOWN-POINTING RED TRIANGLE");
				break;
			case 0x1F53C:
				strcpy_s(buf, buf_size, "UP-POINTING SMALL RED TRIANGLE");
				break;
			case 0x1F53D:
				strcpy_s(buf, buf_size, "DOWN-POINTING SMALL RED TRIANGLE");
				break;
			case 0x1F53E:
				strcpy_s(buf, buf_size, "LOWER RIGHT SHADOWED WHITE CIRCLE");
				break;
			case 0x1F53F:
				strcpy_s(buf, buf_size, "UPPER RIGHT SHADOWED WHITE CIRCLE");
				break;
			case 0x1F540:
				strcpy_s(buf, buf_size, "CIRCLED CROSS POMMEE");
				break;
			case 0x1F541:
				strcpy_s(buf, buf_size, "CROSS POMMEE WITH HALF-CIRCLE BELOW");
				break;
			case 0x1F542:
				strcpy_s(buf, buf_size, "CROSS POMMEE");
				break;
			case 0x1F543:
				strcpy_s(buf, buf_size, "NOTCHED LEFT SEMICIRCLE WITH THREE DOTS");
				break;
			case 0x1F544:
				strcpy_s(buf, buf_size, "NOTCHED RIGHT SEMICIRCLE WITH THREE DOTS");
				break;
			case 0x1F545:
				strcpy_s(buf, buf_size, "SYMBOL FOR MARKS CHAPTER");
				break;
			case 0x1F546:
				strcpy_s(buf, buf_size, "WHITE LATIN CROSS");
				break;
			case 0x1F547:
				strcpy_s(buf, buf_size, "HEAVY LATIN CROSS");
				break;
			case 0x1F548:
				strcpy_s(buf, buf_size, "CELTIC CROSS");
				break;
			case 0x1F549:
				strcpy_s(buf, buf_size, "OM SYMBOL");
				break;
			case 0x1F54A:
				strcpy_s(buf, buf_size, "DOVE OF PEACE");
				break;
			case 0x1F54B:
				strcpy_s(buf, buf_size, "KAABA");
				break;
			case 0x1F54C:
				strcpy_s(buf, buf_size, "MOSQUE");
				break;
			case 0x1F54D:
				strcpy_s(buf, buf_size, "SYNAGOGUE");
				break;
			case 0x1F54E:
				strcpy_s(buf, buf_size, "MENORAH WITH NINE BRANCHES");
				break;
			case 0x1F54F:
				strcpy_s(buf, buf_size, "BOWL OF HYGIEIA");
				break;
			case 0x1F550:
				strcpy_s(buf, buf_size, "CLOCK FACE ONE OCLOCK");
				break;
			case 0x1F551:
				strcpy_s(buf, buf_size, "CLOCK FACE TWO OCLOCK");
				break;
			case 0x1F552:
				strcpy_s(buf, buf_size, "CLOCK FACE THREE OCLOCK");
				break;
			case 0x1F553:
				strcpy_s(buf, buf_size, "CLOCK FACE FOUR OCLOCK");
				break;
			case 0x1F554:
				strcpy_s(buf, buf_size, "CLOCK FACE FIVE OCLOCK");
				break;
			case 0x1F555:
				strcpy_s(buf, buf_size, "CLOCK FACE SIX OCLOCK");
				break;
			case 0x1F556:
				strcpy_s(buf, buf_size, "CLOCK FACE SEVEN OCLOCK");
				break;
			case 0x1F557:
				strcpy_s(buf, buf_size, "CLOCK FACE EIGHT OCLOCK");
				break;
			case 0x1F558:
				strcpy_s(buf, buf_size, "CLOCK FACE NINE OCLOCK");
				break;
			case 0x1F559:
				strcpy_s(buf, buf_size, "CLOCK FACE TEN OCLOCK");
				break;
			case 0x1F55A:
				strcpy_s(buf, buf_size, "CLOCK FACE ELEVEN OCLOCK");
				break;
			case 0x1F55B:
				strcpy_s(buf, buf_size, "CLOCK FACE TWELVE OCLOCK");
				break;
			case 0x1F55C:
				strcpy_s(buf, buf_size, "CLOCK FACE ONE-THIRTY");
				break;
			case 0x1F55D:
				strcpy_s(buf, buf_size, "CLOCK FACE TWO-THIRTY");
				break;
			case 0x1F55E:
				strcpy_s(buf, buf_size, "CLOCK FACE THREE-THIRTY");
				break;
			case 0x1F55F:
				strcpy_s(buf, buf_size, "CLOCK FACE FOUR-THIRTY");
				break;
			case 0x1F560:
				strcpy_s(buf, buf_size, "CLOCK FACE FIVE-THIRTY");
				break;
			case 0x1F561:
				strcpy_s(buf, buf_size, "CLOCK FACE SIX-THIRTY");
				break;
			case 0x1F562:
				strcpy_s(buf, buf_size, "CLOCK FACE SEVEN-THIRTY");
				break;
			case 0x1F563:
				strcpy_s(buf, buf_size, "CLOCK FACE EIGHT-THIRTY");
				break;
			case 0x1F564:
				strcpy_s(buf, buf_size, "CLOCK FACE NINE-THIRTY");
				break;
			case 0x1F565:
				strcpy_s(buf, buf_size, "CLOCK FACE TEN-THIRTY");
				break;
			case 0x1F566:
				strcpy_s(buf, buf_size, "CLOCK FACE ELEVEN-THIRTY");
				break;
			case 0x1F567:
				strcpy_s(buf, buf_size, "CLOCK FACE TWELVE-THIRTY");
				break;
			case 0x1F568:
				strcpy_s(buf, buf_size, "RIGHT SPEAKER");
				break;
			case 0x1F569:
				strcpy_s(buf, buf_size, "RIGHT SPEAKER WITH ONE SOUND WAVE");
				break;
			case 0x1F56A:
				strcpy_s(buf, buf_size, "RIGHT SPEAKER WITH THREE SOUND WAVES");
				break;
			case 0x1F56B:
				strcpy_s(buf, buf_size, "BULLHORN");
				break;
			case 0x1F56C:
				strcpy_s(buf, buf_size, "BULLHORN WITH SOUND WAVES");
				break;
			case 0x1F56D:
				strcpy_s(buf, buf_size, "RINGING BELL");
				break;
			case 0x1F56E:
				strcpy_s(buf, buf_size, "BOOK");
				break;
			case 0x1F56F:
				strcpy_s(buf, buf_size, "CANDLE");
				break;
			case 0x1F570:
				strcpy_s(buf, buf_size, "MANTELPIECE CLOCK");
				break;
			case 0x1F571:
				strcpy_s(buf, buf_size, "BLACK SKULL AND CROSSBONES");
				break;
			case 0x1F572:
				strcpy_s(buf, buf_size, "NO PIRACY");
				break;
			case 0x1F573:
				strcpy_s(buf, buf_size, "HOLE");
				break;
			case 0x1F574:
				strcpy_s(buf, buf_size, "MAN IN BUSINESS SUIT LEVITATING");
				break;
			case 0x1F575:
				strcpy_s(buf, buf_size, "SLEUTH OR SPY");
				break;
			case 0x1F576:
				strcpy_s(buf, buf_size, "DARK SUNGLASSES");
				break;
			case 0x1F577:
				strcpy_s(buf, buf_size, "SPIDER");
				break;
			case 0x1F578:
				strcpy_s(buf, buf_size, "SPIDER WEB");
				break;
			case 0x1F579:
				strcpy_s(buf, buf_size, "JOYSTICK");
				break;
			case 0x1F57A:
				strcpy_s(buf, buf_size, "MAN DANCING");
				break;
			case 0x1F57B:
				strcpy_s(buf, buf_size, "LEFT HAND TELEPHONE RECEIVER");
				break;
			case 0x1F57C:
				strcpy_s(buf, buf_size, "TELEPHONE RECEIVER WITH PAGE");
				break;
			case 0x1F57D:
				strcpy_s(buf, buf_size, "RIGHT HAND TELEPHONE RECEIVER");
				break;
			case 0x1F57E:
				strcpy_s(buf, buf_size, "WHITE TOUCHTONE TELEPHONE");
				break;
			case 0x1F57F:
				strcpy_s(buf, buf_size, "BLACK TOUCHTONE TELEPHONE");
				break;
			case 0x1F580:
				strcpy_s(buf, buf_size, "TELEPHONE ON TOP OF MODEM");
				break;
			case 0x1F581:
				strcpy_s(buf, buf_size, "CLAMSHELL MOBILE PHONE");
				break;
			case 0x1F582:
				strcpy_s(buf, buf_size, "BACK OF ENVELOPE");
				break;
			case 0x1F583:
				strcpy_s(buf, buf_size, "STAMPED ENVELOPE");
				break;
			case 0x1F584:
				strcpy_s(buf, buf_size, "ENVELOPE WITH LIGHTNING");
				break;
			case 0x1F585:
				strcpy_s(buf, buf_size, "FLYING ENVELOPE");
				break;
			case 0x1F586:
				strcpy_s(buf, buf_size, "PEN OVER STAMPED ENVELOPE");
				break;
			case 0x1F587:
				strcpy_s(buf, buf_size, "LINKED PAPERCLIPS");
				break;
			case 0x1F588:
				strcpy_s(buf, buf_size, "BLACK PUSHPIN");
				break;
			case 0x1F589:
				strcpy_s(buf, buf_size, "LOWER LEFT PENCIL");
				break;
			case 0x1F58A:
				strcpy_s(buf, buf_size, "LOWER LEFT BALLPOINT PEN");
				break;
			case 0x1F58B:
				strcpy_s(buf, buf_size, "LOWER LEFT FOUNTAIN PEN");
				break;
			case 0x1F58C:
				strcpy_s(buf, buf_size, "LOWER LEFT PAINTBRUSH");
				break;
			case 0x1F58D:
				strcpy_s(buf, buf_size, "LOWER LEFT CRAYON");
				break;
			case 0x1F58E:
				strcpy_s(buf, buf_size, "LEFT WRITING HAND");
				break;
			case 0x1F58F:
				strcpy_s(buf, buf_size, "TURNED OK HAND SIGN");
				break;
			case 0x1F590:
				strcpy_s(buf, buf_size, "RAISED HAND WITH FINGERS SPLAYED");
				break;
			case 0x1F591:
				strcpy_s(buf, buf_size, "REVERSED RAISED HAND WITH FINGERS SPLAYED");
				break;
			case 0x1F592:
				strcpy_s(buf, buf_size, "REVERSED THUMBS UP SIGN");
				break;
			case 0x1F593:
				strcpy_s(buf, buf_size, "REVERSED THUMBS DOWN SIGN");
				break;
			case 0x1F594:
				strcpy_s(buf, buf_size, "REVERSED VICTORY HAND");
				break;
			case 0x1F595:
				strcpy_s(buf, buf_size, "REVERSED HAND WITH MIDDLE FINGER EXTENDED");
				break;
			case 0x1F596:
				strcpy_s(buf, buf_size, "RAISED HAND WITH PART BETWEEN MIDDLE AND RING FINGERS");
				break;
			case 0x1F597:
				strcpy_s(buf, buf_size, "WHITE DOWN POINTING LEFT HAND INDEX");
				break;
			case 0x1F598:
				strcpy_s(buf, buf_size, "SIDEWAYS WHITE LEFT POINTING INDEX");
				break;
			case 0x1F599:
				strcpy_s(buf, buf_size, "SIDEWAYS WHITE RIGHT POINTING INDEX");
				break;
			case 0x1F59A:
				strcpy_s(buf, buf_size, "SIDEWAYS BLACK LEFT POINTING INDEX");
				break;
			case 0x1F59B:
				strcpy_s(buf, buf_size, "SIDEWAYS BLACK RIGHT POINTING INDEX");
				break;
			case 0x1F59C:
				strcpy_s(buf, buf_size, "BLACK LEFT POINTING BACKHAND INDEX");
				break;
			case 0x1F59D:
				strcpy_s(buf, buf_size, "BLACK RIGHT POINTING BACKHAND INDEX");
				break;
			case 0x1F59E:
				strcpy_s(buf, buf_size, "SIDEWAYS WHITE UP POINTING INDEX");
				break;
			case 0x1F59F:
				strcpy_s(buf, buf_size, "SIDEWAYS WHITE DOWN POINTING INDEX");
				break;
			case 0x1F5A0:
				strcpy_s(buf, buf_size, "SIDEWAYS BLACK UP POINTING INDEX");
				break;
			case 0x1F5A1:
				strcpy_s(buf, buf_size, "SIDEWAYS BLACK DOWN POINTING INDEX");
				break;
			case 0x1F5A2:
				strcpy_s(buf, buf_size, "BLACK UP POINTING BACKHAND INDEX");
				break;
			case 0x1F5A3:
				strcpy_s(buf, buf_size, "BLACK DOWN POINTING BACKHAND INDEX");
				break;
			case 0x1F5A4:
				strcpy_s(buf, buf_size, "BLACK HEART");
				break;
			case 0x1F5A5:
				strcpy_s(buf, buf_size, "DESKTOP COMPUTER");
				break;
			case 0x1F5A6:
				strcpy_s(buf, buf_size, "KEYBOARD AND MOUSE");
				break;
			case 0x1F5A7:
				strcpy_s(buf, buf_size, "THREE NETWORKED COMPUTERS");
				break;
			case 0x1F5A8:
				strcpy_s(buf, buf_size, "PRINTER");
				break;
			case 0x1F5A9:
				strcpy_s(buf, buf_size, "POCKET CALCULATOR");
				break;
			case 0x1F5AA:
				strcpy_s(buf, buf_size, "BLACK HARD SHELL FLOPPY DISK");
				break;
			case 0x1F5AB:
				strcpy_s(buf, buf_size, "WHITE HARD SHELL FLOPPY DISK");
				break;
			case 0x1F5AC:
				strcpy_s(buf, buf_size, "SOFT SHELL FLOPPY DISK");
				break;
			case 0x1F5AD:
				strcpy_s(buf, buf_size, "TAPE CARTRIDGE");
				break;
			case 0x1F5AE:
				strcpy_s(buf, buf_size, "WIRED KEYBOARD");
				break;
			case 0x1F5AF:
				strcpy_s(buf, buf_size, "ONE BUTTON MOUSE");
				break;
			case 0x1F5B0:
				strcpy_s(buf, buf_size, "TWO BUTTON MOUSE");
				break;
			case 0x1F5B1:
				strcpy_s(buf, buf_size, "THREE BUTTON MOUSE");
				break;
			case 0x1F5B2:
				strcpy_s(buf, buf_size, "TRACKBALL");
				break;
			case 0x1F5B3:
				strcpy_s(buf, buf_size, "OLD PERSONAL COMPUTER");
				break;
			case 0x1F5B4:
				strcpy_s(buf, buf_size, "HARD DISK");
				break;
			case 0x1F5B5:
				strcpy_s(buf, buf_size, "SCREEN");
				break;
			case 0x1F5B6:
				strcpy_s(buf, buf_size, "PRINTER ICON");
				break;
			case 0x1F5B7:
				strcpy_s(buf, buf_size, "FAX ICON");
				break;
			case 0x1F5B8:
				strcpy_s(buf, buf_size, "OPTICAL DISC ICON");
				break;
			case 0x1F5B9:
				strcpy_s(buf, buf_size, "DOCUMENT WITH TEXT");
				break;
			case 0x1F5BA:
				strcpy_s(buf, buf_size, "DOCUMENT WITH TEXT AND PICTURE");
				break;
			case 0x1F5BB:
				strcpy_s(buf, buf_size, "DOCUMENT WITH PICTURE");
				break;
			case 0x1F5BC:
				strcpy_s(buf, buf_size, "FRAME WITH PICTURE");
				break;
			case 0x1F5BD:
				strcpy_s(buf, buf_size, "FRAME WITH TILES");
				break;
			case 0x1F5BE:
				strcpy_s(buf, buf_size, "FRAME WITH AN X");
				break;
			case 0x1F5BF:
				strcpy_s(buf, buf_size, "BLACK FOLDER");
				break;
			case 0x1F5C0:
				strcpy_s(buf, buf_size, "FOLDER");
				break;
			case 0x1F5C1:
				strcpy_s(buf, buf_size, "OPEN FOLDER");
				break;
			case 0x1F5C2:
				strcpy_s(buf, buf_size, "CARD INDEX DIVIDERS");
				break;
			case 0x1F5C3:
				strcpy_s(buf, buf_size, "CARD FILE BOX");
				break;
			case 0x1F5C4:
				strcpy_s(buf, buf_size, "FILE CABINET");
				break;
			case 0x1F5C5:
				strcpy_s(buf, buf_size, "EMPTY NOTE");
				break;
			case 0x1F5C6:
				strcpy_s(buf, buf_size, "EMPTY NOTE PAGE");
				break;
			case 0x1F5C7:
				strcpy_s(buf, buf_size, "EMPTY NOTE PAD");
				break;
			case 0x1F5C8:
				strcpy_s(buf, buf_size, "NOTE");
				break;
			case 0x1F5C9:
				strcpy_s(buf, buf_size, "NOTE PAGE");
				break;
			case 0x1F5CA:
				strcpy_s(buf, buf_size, "NOTE PAD");
				break;
			case 0x1F5CB:
				strcpy_s(buf, buf_size, "EMPTY DOCUMENT");
				break;
			case 0x1F5CC:
				strcpy_s(buf, buf_size, "EMPTY PAGE");
				break;
			case 0x1F5CD:
				strcpy_s(buf, buf_size, "EMPTY PAGES");
				break;
			case 0x1F5CE:
				strcpy_s(buf, buf_size, "DOCUMENT");
				break;
			case 0x1F5CF:
				strcpy_s(buf, buf_size, "PAGE");
				break;
			case 0x1F5D0:
				strcpy_s(buf, buf_size, "PAGES");
				break;
			case 0x1F5D1:
				strcpy_s(buf, buf_size, "WASTEBASKET");
				break;
			case 0x1F5D2:
				strcpy_s(buf, buf_size, "SPIRAL NOTE PAD");
				break;
			case 0x1F5D3:
				strcpy_s(buf, buf_size, "SPIRAL CALENDAR PAD");
				break;
			case 0x1F5D4:
				strcpy_s(buf, buf_size, "DESKTOP WINDOW");
				break;
			case 0x1F5D5:
				strcpy_s(buf, buf_size, "MINIMIZE");
				break;
			case 0x1F5D6:
				strcpy_s(buf, buf_size, "MAXIMIZE");
				break;
			case 0x1F5D7:
				strcpy_s(buf, buf_size, "OVERLAP");
				break;
			case 0x1F5D8:
				strcpy_s(buf, buf_size, "CLOCKWISE RIGHT AND LEFT SEMICIRCLE ARROWS");
				break;
			case 0x1F5D9:
				strcpy_s(buf, buf_size, "CANCELLATION X");
				break;
			case 0x1F5DA:
				strcpy_s(buf, buf_size, "INCREASE FONT SIZE SYMBOL");
				break;
			case 0x1F5DB:
				strcpy_s(buf, buf_size, "DECREASE FONT SIZE SYMBOL");
				break;
			case 0x1F5DC:
				strcpy_s(buf, buf_size, "COMPRESSION");
				break;
			case 0x1F5DD:
				strcpy_s(buf, buf_size, "OLD KEY");
				break;
			case 0x1F5DE:
				strcpy_s(buf, buf_size, "ROLLED-UP NEWSPAPER");
				break;
			case 0x1F5DF:
				strcpy_s(buf, buf_size, "PAGE WITH CIRCLED TEXT");
				break;
			case 0x1F5E0:
				strcpy_s(buf, buf_size, "STOCK CHART");
				break;
			case 0x1F5E1:
				strcpy_s(buf, buf_size, "DAGGER KNIFE");
				break;
			case 0x1F5E2:
				strcpy_s(buf, buf_size, "LIPS");
				break;
			case 0x1F5E3:
				strcpy_s(buf, buf_size, "SPEAKING HEAD IN SILHOUETTE");
				break;
			case 0x1F5E4:
				strcpy_s(buf, buf_size, "THREE RAYS ABOVE");
				break;
			case 0x1F5E5:
				strcpy_s(buf, buf_size, "THREE RAYS BELOW");
				break;
			case 0x1F5E6:
				strcpy_s(buf, buf_size, "THREE RAYS LEFT");
				break;
			case 0x1F5E7:
				strcpy_s(buf, buf_size, "THREE RAYS RIGHT");
				break;
			case 0x1F5E8:
				strcpy_s(buf, buf_size, "LEFT SPEECH BUBBLE");
				break;
			case 0x1F5E9:
				strcpy_s(buf, buf_size, "RIGHT SPEECH BUBBLE");
				break;
			case 0x1F5EA:
				strcpy_s(buf, buf_size, "TWO SPEECH BUBBLES");
				break;
			case 0x1F5EB:
				strcpy_s(buf, buf_size, "THREE SPEECH BUBBLES");
				break;
			case 0x1F5EC:
				strcpy_s(buf, buf_size, "LEFT THOUGHT BUBBLE");
				break;
			case 0x1F5ED:
				strcpy_s(buf, buf_size, "RIGHT THOUGHT BUBBLE");
				break;
			case 0x1F5EE:
				strcpy_s(buf, buf_size, "LEFT ANGER BUBBLE");
				break;
			case 0x1F5EF:
				strcpy_s(buf, buf_size, "RIGHT ANGER BUBBLE");
				break;
			case 0x1F5F0:
				strcpy_s(buf, buf_size, "MOOD BUBBLE");
				break;
			case 0x1F5F1:
				strcpy_s(buf, buf_size, "LIGHTNING MOOD BUBBLE");
				break;
			case 0x1F5F2:
				strcpy_s(buf, buf_size, "LIGHTNING MOOD");
				break;
			case 0x1F5F3:
				strcpy_s(buf, buf_size, "BALLOT BOX WITH BALLOT");
				break;
			case 0x1F5F4:
				strcpy_s(buf, buf_size, "BALLOT SCRIPT X");
				break;
			case 0x1F5F5:
				strcpy_s(buf, buf_size, "BALLOT BOX WITH SCRIPT X");
				break;
			case 0x1F5F6:
				strcpy_s(buf, buf_size, "BALLOT BOLD SCRIPT X");
				break;
			case 0x1F5F7:
				strcpy_s(buf, buf_size, "BALLOT BOX WITH BOLD SCRIPT X");
				break;
			case 0x1F5F8:
				strcpy_s(buf, buf_size, "LIGHT CHECK MARK");
				break;
			case 0x1F5F9:
				strcpy_s(buf, buf_size, "BALLOT BOX WITH BOLD CHECK");
				break;
			case 0x1F5FA:
				strcpy_s(buf, buf_size, "WORLD MAP");
				break;
			case 0x1F5FB:
				strcpy_s(buf, buf_size, "MOUNT FUJI");
				break;
			case 0x1F5FC:
				strcpy_s(buf, buf_size, "TOKYO TOWER");
				break;
			case 0x1F5FD:
				strcpy_s(buf, buf_size, "STATUE OF LIBERTY");
				break;
			case 0x1F5FE:
				strcpy_s(buf, buf_size, "SILHOUETTE OF JAPAN");
				break;
			case 0x1F5FF:
				strcpy_s(buf, buf_size, "MOYAI");
				break;
			case 0x1F600:
				strcpy_s(buf, buf_size, "GRINNING FACE");
				break;
			case 0x1F601:
				strcpy_s(buf, buf_size, "GRINNING FACE WITH SMILING EYES");
				break;
			case 0x1F602:
				strcpy_s(buf, buf_size, "FACE WITH TEARS OF JOY");
				break;
			case 0x1F603:
				strcpy_s(buf, buf_size, "SMILING FACE WITH OPEN MOUTH");
				break;
			case 0x1F604:
				strcpy_s(buf, buf_size, "SMILING FACE WITH OPEN MOUTH AND SMILING EYES");
				break;
			case 0x1F605:
				strcpy_s(buf, buf_size, "SMILING FACE WITH OPEN MOUTH AND COLD SWEAT");
				break;
			case 0x1F606:
				strcpy_s(buf, buf_size, "SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES");
				break;
			case 0x1F607:
				strcpy_s(buf, buf_size, "SMILING FACE WITH HALO");
				break;
			case 0x1F608:
				strcpy_s(buf, buf_size, "SMILING FACE WITH HORNS");
				break;
			case 0x1F609:
				strcpy_s(buf, buf_size, "WINKING FACE");
				break;
			case 0x1F60A:
				strcpy_s(buf, buf_size, "SMILING FACE WITH SMILING EYES");
				break;
			case 0x1F60B:
				strcpy_s(buf, buf_size, "FACE SAVOURING DELICIOUS FOOD");
				break;
			case 0x1F60C:
				strcpy_s(buf, buf_size, "RELIEVED FACE");
				break;
			case 0x1F60D:
				strcpy_s(buf, buf_size, "SMILING FACE WITH HEART-SHAPED EYES");
				break;
			case 0x1F60E:
				strcpy_s(buf, buf_size, "SMILING FACE WITH SUNGLASSES");
				break;
			case 0x1F60F:
				strcpy_s(buf, buf_size, "SMIRKING FACE");
				break;
			case 0x1F610:
				strcpy_s(buf, buf_size, "NEUTRAL FACE");
				break;
			case 0x1F611:
				strcpy_s(buf, buf_size, "EXPRESSIONLESS FACE");
				break;
			case 0x1F612:
				strcpy_s(buf, buf_size, "UNAMUSED FACE");
				break;
			case 0x1F613:
				strcpy_s(buf, buf_size, "FACE WITH COLD SWEAT");
				break;
			case 0x1F614:
				strcpy_s(buf, buf_size, "PENSIVE FACE");
				break;
			case 0x1F615:
				strcpy_s(buf, buf_size, "CONFUSED FACE");
				break;
			case 0x1F616:
				strcpy_s(buf, buf_size, "CONFOUNDED FACE");
				break;
			case 0x1F617:
				strcpy_s(buf, buf_size, "KISSING FACE");
				break;
			case 0x1F618:
				strcpy_s(buf, buf_size, "FACE THROWING A KISS");
				break;
			case 0x1F619:
				strcpy_s(buf, buf_size, "KISSING FACE WITH SMILING EYES");
				break;
			case 0x1F61A:
				strcpy_s(buf, buf_size, "KISSING FACE WITH CLOSED EYES");
				break;
			case 0x1F61B:
				strcpy_s(buf, buf_size, "FACE WITH STUCK-OUT TONGUE");
				break;
			case 0x1F61C:
				strcpy_s(buf, buf_size, "FACE WITH STUCK-OUT TONGUE AND WINKING EYE");
				break;
			case 0x1F61D:
				strcpy_s(buf, buf_size, "FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES");
				break;
			case 0x1F61E:
				strcpy_s(buf, buf_size, "DISAPPOINTED FACE");
				break;
			case 0x1F61F:
				strcpy_s(buf, buf_size, "WORRIED FACE");
				break;
			case 0x1F620:
				strcpy_s(buf, buf_size, "ANGRY FACE");
				break;
			case 0x1F621:
				strcpy_s(buf, buf_size, "POUTING FACE");
				break;
			case 0x1F622:
				strcpy_s(buf, buf_size, "CRYING FACE");
				break;
			case 0x1F623:
				strcpy_s(buf, buf_size, "PERSEVERING FACE");
				break;
			case 0x1F624:
				strcpy_s(buf, buf_size, "FACE WITH LOOK OF TRIUMPH");
				break;
			case 0x1F625:
				strcpy_s(buf, buf_size, "DISAPPOINTED BUT RELIEVED FACE");
				break;
			case 0x1F626:
				strcpy_s(buf, buf_size, "FROWNING FACE WITH OPEN MOUTH");
				break;
			case 0x1F627:
				strcpy_s(buf, buf_size, "ANGUISHED FACE");
				break;
			case 0x1F628:
				strcpy_s(buf, buf_size, "FEARFUL FACE");
				break;
			case 0x1F629:
				strcpy_s(buf, buf_size, "WEARY FACE");
				break;
			case 0x1F62A:
				strcpy_s(buf, buf_size, "SLEEPY FACE");
				break;
			case 0x1F62B:
				strcpy_s(buf, buf_size, "TIRED FACE");
				break;
			case 0x1F62C:
				strcpy_s(buf, buf_size, "GRIMACING FACE");
				break;
			case 0x1F62D:
				strcpy_s(buf, buf_size, "LOUDLY CRYING FACE");
				break;
			case 0x1F62E:
				strcpy_s(buf, buf_size, "FACE WITH OPEN MOUTH");
				break;
			case 0x1F62F:
				strcpy_s(buf, buf_size, "HUSHED FACE");
				break;
			case 0x1F630:
				strcpy_s(buf, buf_size, "FACE WITH OPEN MOUTH AND COLD SWEAT");
				break;
			case 0x1F631:
				strcpy_s(buf, buf_size, "FACE SCREAMING IN FEAR");
				break;
			case 0x1F632:
				strcpy_s(buf, buf_size, "ASTONISHED FACE");
				break;
			case 0x1F633:
				strcpy_s(buf, buf_size, "FLUSHED FACE");
				break;
			case 0x1F634:
				strcpy_s(buf, buf_size, "SLEEPING FACE");
				break;
			case 0x1F635:
				strcpy_s(buf, buf_size, "DIZZY FACE");
				break;
			case 0x1F636:
				strcpy_s(buf, buf_size, "FACE WITHOUT MOUTH");
				break;
			case 0x1F637:
				strcpy_s(buf, buf_size, "FACE WITH MEDICAL MASK");
				break;
			case 0x1F638:
				strcpy_s(buf, buf_size, "GRINNING CAT FACE WITH SMILING EYES");
				break;
			case 0x1F639:
				strcpy_s(buf, buf_size, "CAT FACE WITH TEARS OF JOY");
				break;
			case 0x1F63A:
				strcpy_s(buf, buf_size, "SMILING CAT FACE WITH OPEN MOUTH");
				break;
			case 0x1F63B:
				strcpy_s(buf, buf_size, "SMILING CAT FACE WITH HEART-SHAPED EYES");
				break;
			case 0x1F63C:
				strcpy_s(buf, buf_size, "CAT FACE WITH WRY SMILE");
				break;
			case 0x1F63D:
				strcpy_s(buf, buf_size, "KISSING CAT FACE WITH CLOSED EYES");
				break;
			case 0x1F63E:
				strcpy_s(buf, buf_size, "POUTING CAT FACE");
				break;
			case 0x1F63F:
				strcpy_s(buf, buf_size, "CRYING CAT FACE");
				break;
			case 0x1F640:
				strcpy_s(buf, buf_size, "WEARY CAT FACE");
				break;
			case 0x1F641:
				strcpy_s(buf, buf_size, "SLIGHTLY FROWNING FACE");
				break;
			case 0x1F642:
				strcpy_s(buf, buf_size, "SLIGHTLY SMILING FACE");
				break;
			case 0x1F643:
				strcpy_s(buf, buf_size, "UPSIDE-DOWN FACE");
				break;
			case 0x1F644:
				strcpy_s(buf, buf_size, "FACE WITH ROLLING EYES");
				break;
			case 0x1F645:
				strcpy_s(buf, buf_size, "FACE WITH NO GOOD GESTURE");
				break;
			case 0x1F646:
				strcpy_s(buf, buf_size, "FACE WITH OK GESTURE");
				break;
			case 0x1F647:
				strcpy_s(buf, buf_size, "PERSON BOWING DEEPLY");
				break;
			case 0x1F648:
				strcpy_s(buf, buf_size, "SEE-NO-EVIL MONKEY");
				break;
			case 0x1F649:
				strcpy_s(buf, buf_size, "HEAR-NO-EVIL MONKEY");
				break;
			case 0x1F64A:
				strcpy_s(buf, buf_size, "SPEAK-NO-EVIL MONKEY");
				break;
			case 0x1F64B:
				strcpy_s(buf, buf_size, "HAPPY PERSON RAISING ONE HAND");
				break;
			case 0x1F64C:
				strcpy_s(buf, buf_size, "PERSON RAISING BOTH HANDS IN CELEBRATION");
				break;
			case 0x1F64D:
				strcpy_s(buf, buf_size, "PERSON FROWNING");
				break;
			case 0x1F64E:
				strcpy_s(buf, buf_size, "PERSON WITH POUTING FACE");
				break;
			case 0x1F64F:
				strcpy_s(buf, buf_size, "PERSON WITH FOLDED HANDS");
				break;
			case 0x1F650:
				strcpy_s(buf, buf_size, "NORTH WEST POINTING LEAF");
				break;
			case 0x1F651:
				strcpy_s(buf, buf_size, "SOUTH WEST POINTING LEAF");
				break;
			case 0x1F652:
				strcpy_s(buf, buf_size, "NORTH EAST POINTING LEAF");
				break;
			case 0x1F653:
				strcpy_s(buf, buf_size, "SOUTH EAST POINTING LEAF");
				break;
			case 0x1F654:
				strcpy_s(buf, buf_size, "TURNED NORTH WEST POINTING LEAF");
				break;
			case 0x1F655:
				strcpy_s(buf, buf_size, "TURNED SOUTH WEST POINTING LEAF");
				break;
			case 0x1F656:
				strcpy_s(buf, buf_size, "TURNED NORTH EAST POINTING LEAF");
				break;
			case 0x1F657:
				strcpy_s(buf, buf_size, "TURNED SOUTH EAST POINTING LEAF");
				break;
			case 0x1F658:
				strcpy_s(buf, buf_size, "NORTH WEST POINTING VINE LEAF");
				break;
			case 0x1F659:
				strcpy_s(buf, buf_size, "SOUTH WEST POINTING VINE LEAF");
				break;
			case 0x1F65A:
				strcpy_s(buf, buf_size, "NORTH EAST POINTING VINE LEAF");
				break;
			case 0x1F65B:
				strcpy_s(buf, buf_size, "SOUTH EAST POINTING VINE LEAF");
				break;
			case 0x1F65C:
				strcpy_s(buf, buf_size, "HEAVY NORTH WEST POINTING VINE LEAF");
				break;
			case 0x1F65D:
				strcpy_s(buf, buf_size, "HEAVY SOUTH WEST POINTING VINE LEAF");
				break;
			case 0x1F65E:
				strcpy_s(buf, buf_size, "HEAVY NORTH EAST POINTING VINE LEAF");
				break;
			case 0x1F65F:
				strcpy_s(buf, buf_size, "HEAVY SOUTH EAST POINTING VINE LEAF");
				break;
			case 0x1F660:
				strcpy_s(buf, buf_size, "NORTH WEST POINTING BUD");
				break;
			case 0x1F661:
				strcpy_s(buf, buf_size, "SOUTH WEST POINTING BUD");
				break;
			case 0x1F662:
				strcpy_s(buf, buf_size, "NORTH EAST POINTING BUD");
				break;
			case 0x1F663:
				strcpy_s(buf, buf_size, "SOUTH EAST POINTING BUD");
				break;
			case 0x1F664:
				strcpy_s(buf, buf_size, "HEAVY NORTH WEST POINTING BUD");
				break;
			case 0x1F665:
				strcpy_s(buf, buf_size, "HEAVY SOUTH WEST POINTING BUD");
				break;
			case 0x1F666:
				strcpy_s(buf, buf_size, "HEAVY NORTH EAST POINTING BUD");
				break;
			case 0x1F667:
				strcpy_s(buf, buf_size, "HEAVY SOUTH EAST POINTING BUD");
				break;
			case 0x1F668:
				strcpy_s(buf, buf_size, "HOLLOW QUILT SQUARE ORNAMENT");
				break;
			case 0x1F669:
				strcpy_s(buf, buf_size, "HOLLOW QUILT SQUARE ORNAMENT IN BLACK SQUARE");
				break;
			case 0x1F66A:
				strcpy_s(buf, buf_size, "SOLID QUILT SQUARE ORNAMENT");
				break;
			case 0x1F66B:
				strcpy_s(buf, buf_size, "SOLID QUILT SQUARE ORNAMENT IN BLACK SQUARE");
				break;
			case 0x1F66C:
				strcpy_s(buf, buf_size, "LEFTWARDS ROCKET");
				break;
			case 0x1F66D:
				strcpy_s(buf, buf_size, "UPWARDS ROCKET");
				break;
			case 0x1F66E:
				strcpy_s(buf, buf_size, "RIGHTWARDS ROCKET");
				break;
			case 0x1F66F:
				strcpy_s(buf, buf_size, "DOWNWARDS ROCKET");
				break;
			case 0x1F670:
				strcpy_s(buf, buf_size, "SCRIPT LIGATURE ET ORNAMENT");
				break;
			case 0x1F671:
				strcpy_s(buf, buf_size, "HEAVY SCRIPT LIGATURE ET ORNAMENT");
				break;
			case 0x1F672:
				strcpy_s(buf, buf_size, "LIGATURE OPEN ET ORNAMENT");
				break;
			case 0x1F673:
				strcpy_s(buf, buf_size, "HEAVY LIGATURE OPEN ET ORNAMENT");
				break;
			case 0x1F674:
				strcpy_s(buf, buf_size, "HEAVY AMPERSAND ORNAMENT");
				break;
			case 0x1F675:
				strcpy_s(buf, buf_size, "SWASH AMPERSAND ORNAMENT");
				break;
			case 0x1F676:
				strcpy_s(buf, buf_size, "SANS-SERIF HEAVY DOUBLE TURNED COMMA QUOTATION MARK ORNAMENT");
				break;
			case 0x1F677:
				strcpy_s(buf, buf_size, "SANS-SERIF HEAVY DOUBLE COMMA QUOTATION MARK ORNAMENT");
				break;
			case 0x1F678:
				strcpy_s(buf, buf_size, "SANS-SERIF HEAVY LOW DOUBLE COMMA QUOTATION MARK ORNAMENT");
				break;
			case 0x1F679:
				strcpy_s(buf, buf_size, "HEAVY INTERROBANG ORNAMENT");
				break;
			case 0x1F67A:
				strcpy_s(buf, buf_size, "SANS-SERIF INTERROBANG ORNAMENT");
				break;
			case 0x1F67B:
				strcpy_s(buf, buf_size, "HEAVY SANS-SERIF INTERROBANG ORNAMENT");
				break;
			case 0x1F67C:
				strcpy_s(buf, buf_size, "VERY HEAVY SOLIDUS");
				break;
			case 0x1F67D:
				strcpy_s(buf, buf_size, "VERY HEAVY REVERSE SOLIDUS");
				break;
			case 0x1F67E:
				strcpy_s(buf, buf_size, "CHECKER BOARD");
				break;
			case 0x1F67F:
				strcpy_s(buf, buf_size, "REVERSE CHECKER BOARD");
				break;
			case 0x1F680:
				strcpy_s(buf, buf_size, "ROCKET");
				break;
			case 0x1F681:
				strcpy_s(buf, buf_size, "HELICOPTER");
				break;
			case 0x1F682:
				strcpy_s(buf, buf_size, "STEAM LOCOMOTIVE");
				break;
			case 0x1F683:
				strcpy_s(buf, buf_size, "RAILWAY CAR");
				break;
			case 0x1F684:
				strcpy_s(buf, buf_size, "HIGH-SPEED TRAIN");
				break;
			case 0x1F685:
				strcpy_s(buf, buf_size, "HIGH-SPEED TRAIN WITH BULLET NOSE");
				break;
			case 0x1F686:
				strcpy_s(buf, buf_size, "TRAIN");
				break;
			case 0x1F687:
				strcpy_s(buf, buf_size, "METRO");
				break;
			case 0x1F688:
				strcpy_s(buf, buf_size, "LIGHT RAIL");
				break;
			case 0x1F689:
				strcpy_s(buf, buf_size, "STATION");
				break;
			case 0x1F68A:
				strcpy_s(buf, buf_size, "TRAM");
				break;
			case 0x1F68B:
				strcpy_s(buf, buf_size, "TRAM CAR");
				break;
			case 0x1F68C:
				strcpy_s(buf, buf_size, "BUS");
				break;
			case 0x1F68D:
				strcpy_s(buf, buf_size, "ONCOMING BUS");
				break;
			case 0x1F68E:
				strcpy_s(buf, buf_size, "TROLLEYBUS");
				break;
			case 0x1F68F:
				strcpy_s(buf, buf_size, "BUS STOP");
				break;
			case 0x1F690:
				strcpy_s(buf, buf_size, "MINIBUS");
				break;
			case 0x1F691:
				strcpy_s(buf, buf_size, "AMBULANCE");
				break;
			case 0x1F692:
				strcpy_s(buf, buf_size, "FIRE ENGINE");
				break;
			case 0x1F693:
				strcpy_s(buf, buf_size, "POLICE CAR");
				break;
			case 0x1F694:
				strcpy_s(buf, buf_size, "ONCOMING POLICE CAR");
				break;
			case 0x1F695:
				strcpy_s(buf, buf_size, "TAXI");
				break;
			case 0x1F696:
				strcpy_s(buf, buf_size, "ONCOMING TAXI");
				break;
			case 0x1F697:
				strcpy_s(buf, buf_size, "AUTOMOBILE");
				break;
			case 0x1F698:
				strcpy_s(buf, buf_size, "ONCOMING AUTOMOBILE");
				break;
			case 0x1F699:
				strcpy_s(buf, buf_size, "RECREATIONAL VEHICLE");
				break;
			case 0x1F69A:
				strcpy_s(buf, buf_size, "DELIVERY TRUCK");
				break;
			case 0x1F69B:
				strcpy_s(buf, buf_size, "ARTICULATED LORRY");
				break;
			case 0x1F69C:
				strcpy_s(buf, buf_size, "TRACTOR");
				break;
			case 0x1F69D:
				strcpy_s(buf, buf_size, "MONORAIL");
				break;
			case 0x1F69E:
				strcpy_s(buf, buf_size, "MOUNTAIN RAILWAY");
				break;
			case 0x1F69F:
				strcpy_s(buf, buf_size, "SUSPENSION RAILWAY");
				break;
			case 0x1F6A0:
				strcpy_s(buf, buf_size, "MOUNTAIN CABLEWAY");
				break;
			case 0x1F6A1:
				strcpy_s(buf, buf_size, "AERIAL TRAMWAY");
				break;
			case 0x1F6A2:
				strcpy_s(buf, buf_size, "SHIP");
				break;
			case 0x1F6A3:
				strcpy_s(buf, buf_size, "ROWBOAT");
				break;
			case 0x1F6A4:
				strcpy_s(buf, buf_size, "SPEEDBOAT");
				break;
			case 0x1F6A5:
				strcpy_s(buf, buf_size, "HORIZONTAL TRAFFIC LIGHT");
				break;
			case 0x1F6A6:
				strcpy_s(buf, buf_size, "VERTICAL TRAFFIC LIGHT");
				break;
			case 0x1F6A7:
				strcpy_s(buf, buf_size, "CONSTRUCTION SIGN");
				break;
			case 0x1F6A8:
				strcpy_s(buf, buf_size, "POLICE CARS REVOLVING LIGHT");
				break;
			case 0x1F6A9:
				strcpy_s(buf, buf_size, "TRIANGULAR FLAG ON POST");
				break;
			case 0x1F6AA:
				strcpy_s(buf, buf_size, "DOOR");
				break;
			case 0x1F6AB:
				strcpy_s(buf, buf_size, "NO ENTRY SIGN");
				break;
			case 0x1F6AC:
				strcpy_s(buf, buf_size, "SMOKING SYMBOL");
				break;
			case 0x1F6AD:
				strcpy_s(buf, buf_size, "NO SMOKING SYMBOL");
				break;
			case 0x1F6AE:
				strcpy_s(buf, buf_size, "PUT LITTER IN ITS PLACE SYMBOL");
				break;
			case 0x1F6AF:
				strcpy_s(buf, buf_size, "DO NOT LITTER SYMBOL");
				break;
			case 0x1F6B0:
				strcpy_s(buf, buf_size, "POTABLE WATER SYMBOL");
				break;
			case 0x1F6B1:
				strcpy_s(buf, buf_size, "NON-POTABLE WATER SYMBOL");
				break;
			case 0x1F6B2:
				strcpy_s(buf, buf_size, "BICYCLE");
				break;
			case 0x1F6B3:
				strcpy_s(buf, buf_size, "NO BICYCLES");
				break;
			case 0x1F6B4:
				strcpy_s(buf, buf_size, "BICYCLIST");
				break;
			case 0x1F6B5:
				strcpy_s(buf, buf_size, "MOUNTAIN BICYCLIST");
				break;
			case 0x1F6B6:
				strcpy_s(buf, buf_size, "PEDESTRIAN");
				break;
			case 0x1F6B7:
				strcpy_s(buf, buf_size, "NO PEDESTRIANS");
				break;
			case 0x1F6B8:
				strcpy_s(buf, buf_size, "CHILDREN CROSSING");
				break;
			case 0x1F6B9:
				strcpy_s(buf, buf_size, "MENS SYMBOL");
				break;
			case 0x1F6BA:
				strcpy_s(buf, buf_size, "WOMENS SYMBOL");
				break;
			case 0x1F6BB:
				strcpy_s(buf, buf_size, "RESTROOM");
				break;
			case 0x1F6BC:
				strcpy_s(buf, buf_size, "BABY SYMBOL");
				break;
			case 0x1F6BD:
				strcpy_s(buf, buf_size, "TOILET");
				break;
			case 0x1F6BE:
				strcpy_s(buf, buf_size, "WATER CLOSET");
				break;
			case 0x1F6BF:
				strcpy_s(buf, buf_size, "SHOWER");
				break;
			case 0x1F6C0:
				strcpy_s(buf, buf_size, "BATH");
				break;
			case 0x1F6C1:
				strcpy_s(buf, buf_size, "BATHTUB");
				break;
			case 0x1F6C2:
				strcpy_s(buf, buf_size, "PASSPORT CONTROL");
				break;
			case 0x1F6C3:
				strcpy_s(buf, buf_size, "CUSTOMS");
				break;
			case 0x1F6C4:
				strcpy_s(buf, buf_size, "BAGGAGE CLAIM");
				break;
			case 0x1F6C5:
				strcpy_s(buf, buf_size, "LEFT LUGGAGE");
				break;
			case 0x1F6C6:
				strcpy_s(buf, buf_size, "TRIANGLE WITH ROUNDED CORNERS");
				break;
			case 0x1F6C7:
				strcpy_s(buf, buf_size, "PROHIBITED SIGN");
				break;
			case 0x1F6C8:
				strcpy_s(buf, buf_size, "CIRCLED INFORMATION SOURCE");
				break;
			case 0x1F6C9:
				strcpy_s(buf, buf_size, "BOYS SYMBOL");
				break;
			case 0x1F6CA:
				strcpy_s(buf, buf_size, "GIRLS SYMBOL");
				break;
			case 0x1F6CB:
				strcpy_s(buf, buf_size, "COUCH AND LAMP");
				break;
			case 0x1F6CC:
				strcpy_s(buf, buf_size, "SLEEPING ACCOMMODATION");
				break;
			case 0x1F6CD:
				strcpy_s(buf, buf_size, "SHOPPING BAGS");
				break;
			case 0x1F6CE:
				strcpy_s(buf, buf_size, "BELLHOP BELL");
				break;
			case 0x1F6CF:
				strcpy_s(buf, buf_size, "BED");
				break;
			case 0x1F6D0:
				strcpy_s(buf, buf_size, "PLACE OF WORSHIP");
				break;
			case 0x1F6D1:
				strcpy_s(buf, buf_size, "OCTAGONAL SIGN");
				break;
			case 0x1F6D2:
				strcpy_s(buf, buf_size, "SHOPPING TROLLEY");
				break;
			case 0x1F6D3:
				strcpy_s(buf, buf_size, "STUPA");
				break;
			case 0x1F6D4:
				strcpy_s(buf, buf_size, "PAGODA");
				break;
			case 0x1F6D5:
				strcpy_s(buf, buf_size, "HINDU TEMPLE");
				break;
			case 0x1F6D6:
				strcpy_s(buf, buf_size, "HUT");
				break;
			case 0x1F6D7:
				strcpy_s(buf, buf_size, "ELEVATOR");
				break;
			case 0x1F6E0:
				strcpy_s(buf, buf_size, "HAMMER AND WRENCH");
				break;
			case 0x1F6E1:
				strcpy_s(buf, buf_size, "SHIELD");
				break;
			case 0x1F6E2:
				strcpy_s(buf, buf_size, "OIL DRUM");
				break;
			case 0x1F6E3:
				strcpy_s(buf, buf_size, "MOTORWAY");
				break;
			case 0x1F6E4:
				strcpy_s(buf, buf_size, "RAILWAY TRACK");
				break;
			case 0x1F6E5:
				strcpy_s(buf, buf_size, "MOTOR BOAT");
				break;
			case 0x1F6E6:
				strcpy_s(buf, buf_size, "UP-POINTING MILITARY AIRPLANE");
				break;
			case 0x1F6E7:
				strcpy_s(buf, buf_size, "UP-POINTING AIRPLANE");
				break;
			case 0x1F6E8:
				strcpy_s(buf, buf_size, "UP-POINTING SMALL AIRPLANE");
				break;
			case 0x1F6E9:
				strcpy_s(buf, buf_size, "SMALL AIRPLANE");
				break;
			case 0x1F6EA:
				strcpy_s(buf, buf_size, "NORTHEAST-POINTING AIRPLANE");
				break;
			case 0x1F6EB:
				strcpy_s(buf, buf_size, "AIRPLANE DEPARTURE");
				break;
			case 0x1F6EC:
				strcpy_s(buf, buf_size, "AIRPLANE ARRIVING");
				break;
			case 0x1F6F0:
				strcpy_s(buf, buf_size, "SATELLITE");
				break;
			case 0x1F6F1:
				strcpy_s(buf, buf_size, "ONCOMING FIRE ENGINE");
				break;
			case 0x1F6F2:
				strcpy_s(buf, buf_size, "DIESEL LOCOMOTIVE");
				break;
			case 0x1F6F3:
				strcpy_s(buf, buf_size, "PASSENGER SHIP");
				break;
			case 0x1F6F4:
				strcpy_s(buf, buf_size, "SCOOTER");
				break;
			case 0x1F6F5:
				strcpy_s(buf, buf_size, "MOTOR SCOOTER");
				break;
			case 0x1F6F6:
				strcpy_s(buf, buf_size, "CANOE");
				break;
			case 0x1F6F7:
				strcpy_s(buf, buf_size, "SLED");
				break;
			case 0x1F6F8:
				strcpy_s(buf, buf_size, "FLYING SAUCER");
				break;
			case 0x1F6F9:
				strcpy_s(buf, buf_size, "SKATEBOARD");
				break;
			case 0x1F6FA:
				strcpy_s(buf, buf_size, "AUTO RICKSHAW");
				break;
			case 0x1F6FB:
				strcpy_s(buf, buf_size, "PICKUP TRUCK");
				break;
			case 0x1F6FC:
				strcpy_s(buf, buf_size, "ROLLER SKATE");
				break;
			case 0x1F700:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR QUINTESSENCE");
				break;
			case 0x1F701:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR AIR");
				break;
			case 0x1F702:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR FIRE");
				break;
			case 0x1F703:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR EARTH");
				break;
			case 0x1F704:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR WATER");
				break;
			case 0x1F705:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR AQUAFORTIS");
				break;
			case 0x1F706:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR AQUA REGIA");
				break;
			case 0x1F707:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR AQUA REGIA-2");
				break;
			case 0x1F708:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR AQUA VITAE");
				break;
			case 0x1F709:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR AQUA VITAE-2");
				break;
			case 0x1F70A:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR VINEGAR");
				break;
			case 0x1F70B:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR VINEGAR-2");
				break;
			case 0x1F70C:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR VINEGAR-3");
				break;
			case 0x1F70D:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SULFUR");
				break;
			case 0x1F70E:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR PHILOSOPHERS SULFUR");
				break;
			case 0x1F70F:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR BLACK SULFUR");
				break;
			case 0x1F710:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE");
				break;
			case 0x1F711:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-2");
				break;
			case 0x1F712:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR MERCURY SUBLIMATE-3");
				break;
			case 0x1F713:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CINNABAR");
				break;
			case 0x1F714:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SALT");
				break;
			case 0x1F715:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR NITRE");
				break;
			case 0x1F716:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR VITRIOL");
				break;
			case 0x1F717:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR VITRIOL-2");
				break;
			case 0x1F718:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR ROCK SALT");
				break;
			case 0x1F719:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR ROCK SALT-2");
				break;
			case 0x1F71A:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR GOLD");
				break;
			case 0x1F71B:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SILVER");
				break;
			case 0x1F71C:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR IRON ORE");
				break;
			case 0x1F71D:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR IRON ORE-2");
				break;
			case 0x1F71E:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CROCUS OF IRON");
				break;
			case 0x1F71F:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR REGULUS OF IRON");
				break;
			case 0x1F720:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR COPPER ORE");
				break;
			case 0x1F721:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR IRON-COPPER ORE");
				break;
			case 0x1F722:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SUBLIMATE OF COPPER");
				break;
			case 0x1F723:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CROCUS OF COPPER");
				break;
			case 0x1F724:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CROCUS OF COPPER-2");
				break;
			case 0x1F725:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR COPPER ANTIMONIATE");
				break;
			case 0x1F726:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SALT OF COPPER ANTIMONIATE");
				break;
			case 0x1F727:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF COPPER");
				break;
			case 0x1F728:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR VERDIGRIS");
				break;
			case 0x1F729:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR TIN ORE");
				break;
			case 0x1F72A:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR LEAD ORE");
				break;
			case 0x1F72B:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR ANTIMONY ORE");
				break;
			case 0x1F72C:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SUBLIMATE OF ANTIMONY");
				break;
			case 0x1F72D:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SALT OF ANTIMONY");
				break;
			case 0x1F72E:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SUBLIMATE OF SALT OF ANTIMONY");
				break;
			case 0x1F72F:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR VINEGAR OF ANTIMONY");
				break;
			case 0x1F730:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY");
				break;
			case 0x1F731:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR REGULUS OF ANTIMONY-2");
				break;
			case 0x1F732:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR REGULUS");
				break;
			case 0x1F733:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR REGULUS-2");
				break;
			case 0x1F734:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR REGULUS-3");
				break;
			case 0x1F735:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR REGULUS-4");
				break;
			case 0x1F736:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR ALKALI");
				break;
			case 0x1F737:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR ALKALI-2");
				break;
			case 0x1F738:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR MARCASITE");
				break;
			case 0x1F739:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SAL-AMMONIAC");
				break;
			case 0x1F73A:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR ARSENIC");
				break;
			case 0x1F73B:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR REALGAR");
				break;
			case 0x1F73C:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR REALGAR-2");
				break;
			case 0x1F73D:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR AURIPIGMENT");
				break;
			case 0x1F73E:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR BISMUTH ORE");
				break;
			case 0x1F73F:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR TARTAR");
				break;
			case 0x1F740:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR TARTAR-2");
				break;
			case 0x1F741:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR QUICK LIME");
				break;
			case 0x1F742:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR BORAX");
				break;
			case 0x1F743:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR BORAX-2");
				break;
			case 0x1F744:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR BORAX-3");
				break;
			case 0x1F745:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR ALUM");
				break;
			case 0x1F746:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR OIL");
				break;
			case 0x1F747:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SPIRIT");
				break;
			case 0x1F748:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR TINCTURE");
				break;
			case 0x1F749:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR GUM");
				break;
			case 0x1F74A:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR WAX");
				break;
			case 0x1F74B:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR POWDER");
				break;
			case 0x1F74C:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CALX");
				break;
			case 0x1F74D:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR TUTTY");
				break;
			case 0x1F74E:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CAPUT MORTUUM");
				break;
			case 0x1F74F:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SCEPTER OF JOVE");
				break;
			case 0x1F750:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CADUCEUS");
				break;
			case 0x1F751:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR TRIDENT");
				break;
			case 0x1F752:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR STARRED TRIDENT");
				break;
			case 0x1F753:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR LODESTONE");
				break;
			case 0x1F754:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SOAP");
				break;
			case 0x1F755:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR URINE");
				break;
			case 0x1F756:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR HORSE DUNG");
				break;
			case 0x1F757:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR ASHES");
				break;
			case 0x1F758:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR POT ASHES");
				break;
			case 0x1F759:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR BRICK");
				break;
			case 0x1F75A:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR POWDERED BRICK");
				break;
			case 0x1F75B:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR AMALGAM");
				break;
			case 0x1F75C:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM");
				break;
			case 0x1F75D:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR STRATUM SUPER STRATUM-2");
				break;
			case 0x1F75E:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR SUBLIMATION");
				break;
			case 0x1F75F:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR PRECIPITATE");
				break;
			case 0x1F760:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR DISTILL");
				break;
			case 0x1F761:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR DISSOLVE");
				break;
			case 0x1F762:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR DISSOLVE-2");
				break;
			case 0x1F763:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR PURIFY");
				break;
			case 0x1F764:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR PUTREFACTION");
				break;
			case 0x1F765:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CRUCIBLE");
				break;
			case 0x1F766:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CRUCIBLE-2");
				break;
			case 0x1F767:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CRUCIBLE-3");
				break;
			case 0x1F768:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CRUCIBLE-4");
				break;
			case 0x1F769:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR CRUCIBLE-5");
				break;
			case 0x1F76A:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR ALEMBIC");
				break;
			case 0x1F76B:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR BATH OF MARY");
				break;
			case 0x1F76C:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR BATH OF VAPOURS");
				break;
			case 0x1F76D:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR RETORT");
				break;
			case 0x1F76E:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR HOUR");
				break;
			case 0x1F76F:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR NIGHT");
				break;
			case 0x1F770:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR DAY-NIGHT");
				break;
			case 0x1F771:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR MONTH");
				break;
			case 0x1F772:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR HALF DRAM");
				break;
			case 0x1F773:
				strcpy_s(buf, buf_size, "ALCHEMICAL SYMBOL FOR HALF OUNCE");
				break;
			case 0x1F780:
				strcpy_s(buf, buf_size, "BLACK LEFT-POINTING ISOSCELES RIGHT TRIANGLE");
				break;
			case 0x1F781:
				strcpy_s(buf, buf_size, "BLACK UP-POINTING ISOSCELES RIGHT TRIANGLE");
				break;
			case 0x1F782:
				strcpy_s(buf, buf_size, "BLACK RIGHT-POINTING ISOSCELES RIGHT TRIANGLE");
				break;
			case 0x1F783:
				strcpy_s(buf, buf_size, "BLACK DOWN-POINTING ISOSCELES RIGHT TRIANGLE");
				break;
			case 0x1F784:
				strcpy_s(buf, buf_size, "BLACK SLIGHTLY SMALL CIRCLE");
				break;
			case 0x1F785:
				strcpy_s(buf, buf_size, "MEDIUM BOLD WHITE CIRCLE");
				break;
			case 0x1F786:
				strcpy_s(buf, buf_size, "BOLD WHITE CIRCLE");
				break;
			case 0x1F787:
				strcpy_s(buf, buf_size, "HEAVY WHITE CIRCLE");
				break;
			case 0x1F788:
				strcpy_s(buf, buf_size, "VERY HEAVY WHITE CIRCLE");
				break;
			case 0x1F789:
				strcpy_s(buf, buf_size, "EXTREMELY HEAVY WHITE CIRCLE");
				break;
			case 0x1F78A:
				strcpy_s(buf, buf_size, "WHITE CIRCLE CONTAINING BLACK SMALL CIRCLE");
				break;
			case 0x1F78B:
				strcpy_s(buf, buf_size, "ROUND TARGET");
				break;
			case 0x1F78C:
				strcpy_s(buf, buf_size, "BLACK TINY SQUARE");
				break;
			case 0x1F78D:
				strcpy_s(buf, buf_size, "BLACK SLIGHTLY SMALL SQUARE");
				break;
			case 0x1F78E:
				strcpy_s(buf, buf_size, "LIGHT WHITE SQUARE");
				break;
			case 0x1F78F:
				strcpy_s(buf, buf_size, "MEDIUM WHITE SQUARE");
				break;
			case 0x1F790:
				strcpy_s(buf, buf_size, "BOLD WHITE SQUARE");
				break;
			case 0x1F791:
				strcpy_s(buf, buf_size, "HEAVY WHITE SQUARE");
				break;
			case 0x1F792:
				strcpy_s(buf, buf_size, "VERY HEAVY WHITE SQUARE");
				break;
			case 0x1F793:
				strcpy_s(buf, buf_size, "EXTREMELY HEAVY WHITE SQUARE");
				break;
			case 0x1F794:
				strcpy_s(buf, buf_size, "WHITE SQUARE CONTAINING BLACK VERY SMALL SQUARE");
				break;
			case 0x1F795:
				strcpy_s(buf, buf_size, "WHITE SQUARE CONTAINING BLACK MEDIUM SQUARE");
				break;
			case 0x1F796:
				strcpy_s(buf, buf_size, "SQUARE TARGET");
				break;
			case 0x1F797:
				strcpy_s(buf, buf_size, "BLACK TINY DIAMOND");
				break;
			case 0x1F798:
				strcpy_s(buf, buf_size, "BLACK VERY SMALL DIAMOND");
				break;
			case 0x1F799:
				strcpy_s(buf, buf_size, "BLACK MEDIUM SMALL DIAMOND");
				break;
			case 0x1F79A:
				strcpy_s(buf, buf_size, "WHITE DIAMOND CONTAINING BLACK VERY SMALL DIAMOND");
				break;
			case 0x1F79B:
				strcpy_s(buf, buf_size, "WHITE DIAMOND CONTAINING BLACK MEDIUM DIAMOND");
				break;
			case 0x1F79C:
				strcpy_s(buf, buf_size, "DIAMOND TARGET");
				break;
			case 0x1F79D:
				strcpy_s(buf, buf_size, "BLACK TINY LOZENGE");
				break;
			case 0x1F79E:
				strcpy_s(buf, buf_size, "BLACK VERY SMALL LOZENGE");
				break;
			case 0x1F79F:
				strcpy_s(buf, buf_size, "BLACK MEDIUM SMALL LOZENGE");
				break;
			case 0x1F7A0:
				strcpy_s(buf, buf_size, "WHITE LOZENGE CONTAINING BLACK SMALL LOZENGE");
				break;
			case 0x1F7A1:
				strcpy_s(buf, buf_size, "THIN GREEK CROSS");
				break;
			case 0x1F7A2:
				strcpy_s(buf, buf_size, "LIGHT GREEK CROSS");
				break;
			case 0x1F7A3:
				strcpy_s(buf, buf_size, "MEDIUM GREEK CROSS");
				break;
			case 0x1F7A4:
				strcpy_s(buf, buf_size, "BOLD GREEK CROSS");
				break;
			case 0x1F7A5:
				strcpy_s(buf, buf_size, "VERY BOLD GREEK CROSS");
				break;
			case 0x1F7A6:
				strcpy_s(buf, buf_size, "VERY HEAVY GREEK CROSS");
				break;
			case 0x1F7A7:
				strcpy_s(buf, buf_size, "EXTREMELY HEAVY GREEK CROSS");
				break;
			case 0x1F7A8:
				strcpy_s(buf, buf_size, "THIN SALTIRE");
				break;
			case 0x1F7A9:
				strcpy_s(buf, buf_size, "LIGHT SALTIRE");
				break;
			case 0x1F7AA:
				strcpy_s(buf, buf_size, "MEDIUM SALTIRE");
				break;
			case 0x1F7AB:
				strcpy_s(buf, buf_size, "BOLD SALTIRE");
				break;
			case 0x1F7AC:
				strcpy_s(buf, buf_size, "HEAVY SALTIRE");
				break;
			case 0x1F7AD:
				strcpy_s(buf, buf_size, "VERY HEAVY SALTIRE");
				break;
			case 0x1F7AE:
				strcpy_s(buf, buf_size, "EXTREMELY HEAVY SALTIRE");
				break;
			case 0x1F7AF:
				strcpy_s(buf, buf_size, "LIGHT FIVE SPOKED ASTERISK");
				break;
			case 0x1F7B0:
				strcpy_s(buf, buf_size, "MEDIUM FIVE SPOKED ASTERISK");
				break;
			case 0x1F7B1:
				strcpy_s(buf, buf_size, "BOLD FIVE SPOKED ASTERISK");
				break;
			case 0x1F7B2:
				strcpy_s(buf, buf_size, "HEAVY FIVE SPOKED ASTERISK");
				break;
			case 0x1F7B3:
				strcpy_s(buf, buf_size, "VERY HEAVY FIVE SPOKED ASTERISK");
				break;
			case 0x1F7B4:
				strcpy_s(buf, buf_size, "EXTREMELY HEAVY FIVE SPOKED ASTERISK");
				break;
			case 0x1F7B5:
				strcpy_s(buf, buf_size, "LIGHT SIX SPOKED ASTERISK");
				break;
			case 0x1F7B6:
				strcpy_s(buf, buf_size, "MEDIUM SIX SPOKED ASTERISK");
				break;
			case 0x1F7B7:
				strcpy_s(buf, buf_size, "BOLD SIX SPOKED ASTERISK");
				break;
			case 0x1F7B8:
				strcpy_s(buf, buf_size, "HEAVY SIX SPOKED ASTERISK");
				break;
			case 0x1F7B9:
				strcpy_s(buf, buf_size, "VERY HEAVY SIX SPOKED ASTERISK");
				break;
			case 0x1F7BA:
				strcpy_s(buf, buf_size, "EXTREMELY HEAVY SIX SPOKED ASTERISK");
				break;
			case 0x1F7BB:
				strcpy_s(buf, buf_size, "LIGHT EIGHT SPOKED ASTERISK");
				break;
			case 0x1F7BC:
				strcpy_s(buf, buf_size, "MEDIUM EIGHT SPOKED ASTERISK");
				break;
			case 0x1F7BD:
				strcpy_s(buf, buf_size, "BOLD EIGHT SPOKED ASTERISK");
				break;
			case 0x1F7BE:
				strcpy_s(buf, buf_size, "HEAVY EIGHT SPOKED ASTERISK");
				break;
			case 0x1F7BF:
				strcpy_s(buf, buf_size, "VERY HEAVY EIGHT SPOKED ASTERISK");
				break;
			case 0x1F7C0:
				strcpy_s(buf, buf_size, "LIGHT THREE POINTED BLACK STAR");
				break;
			case 0x1F7C1:
				strcpy_s(buf, buf_size, "MEDIUM THREE POINTED BLACK STAR");
				break;
			case 0x1F7C2:
				strcpy_s(buf, buf_size, "THREE POINTED BLACK STAR");
				break;
			case 0x1F7C3:
				strcpy_s(buf, buf_size, "MEDIUM THREE POINTED PINWHEEL STAR");
				break;
			case 0x1F7C4:
				strcpy_s(buf, buf_size, "LIGHT FOUR POINTED BLACK STAR");
				break;
			case 0x1F7C5:
				strcpy_s(buf, buf_size, "MEDIUM FOUR POINTED BLACK STAR");
				break;
			case 0x1F7C6:
				strcpy_s(buf, buf_size, "FOUR POINTED BLACK STAR");
				break;
			case 0x1F7C7:
				strcpy_s(buf, buf_size, "MEDIUM FOUR POINTED PINWHEEL STAR");
				break;
			case 0x1F7C8:
				strcpy_s(buf, buf_size, "REVERSE LIGHT FOUR POINTED PINWHEEL STAR");
				break;
			case 0x1F7C9:
				strcpy_s(buf, buf_size, "LIGHT FIVE POINTED BLACK STAR");
				break;
			case 0x1F7CA:
				strcpy_s(buf, buf_size, "HEAVY FIVE POINTED BLACK STAR");
				break;
			case 0x1F7CB:
				strcpy_s(buf, buf_size, "MEDIUM SIX POINTED BLACK STAR");
				break;
			case 0x1F7CC:
				strcpy_s(buf, buf_size, "HEAVY SIX POINTED BLACK STAR");
				break;
			case 0x1F7CD:
				strcpy_s(buf, buf_size, "SIX POINTED PINWHEEL STAR");
				break;
			case 0x1F7CE:
				strcpy_s(buf, buf_size, "MEDIUM EIGHT POINTED BLACK STAR");
				break;
			case 0x1F7CF:
				strcpy_s(buf, buf_size, "HEAVY EIGHT POINTED BLACK STAR");
				break;
			case 0x1F7D0:
				strcpy_s(buf, buf_size, "VERY HEAVY EIGHT POINTED BLACK STAR");
				break;
			case 0x1F7D1:
				strcpy_s(buf, buf_size, "HEAVY EIGHT POINTED PINWHEEL STAR");
				break;
			case 0x1F7D2:
				strcpy_s(buf, buf_size, "LIGHT TWELVE POINTED BLACK STAR");
				break;
			case 0x1F7D3:
				strcpy_s(buf, buf_size, "HEAVY TWELVE POINTED BLACK STAR");
				break;
			case 0x1F7D4:
				strcpy_s(buf, buf_size, "HEAVY TWELVE POINTED PINWHEEL STAR");
				break;
			case 0x1F7D5:
				strcpy_s(buf, buf_size, "CIRCLED TRIANGLE");
				break;
			case 0x1F7D6:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED TRIANGLE");
				break;
			case 0x1F7D7:
				strcpy_s(buf, buf_size, "CIRCLED SQUARE");
				break;
			case 0x1F7D8:
				strcpy_s(buf, buf_size, "NEGATIVE CIRCLED SQUARE");
				break;
			case 0x1F7E0:
				strcpy_s(buf, buf_size, "LARGE ORANGE CIRCLE");
				break;
			case 0x1F7E1:
				strcpy_s(buf, buf_size, "LARGE YELLOW CIRCLE");
				break;
			case 0x1F7E2:
				strcpy_s(buf, buf_size, "LARGE GREEN CIRCLE");
				break;
			case 0x1F7E3:
				strcpy_s(buf, buf_size, "LARGE PURPLE CIRCLE");
				break;
			case 0x1F7E4:
				strcpy_s(buf, buf_size, "LARGE BROWN CIRCLE");
				break;
			case 0x1F7E5:
				strcpy_s(buf, buf_size, "LARGE RED SQUARE");
				break;
			case 0x1F7E6:
				strcpy_s(buf, buf_size, "LARGE BLUE SQUARE");
				break;
			case 0x1F7E7:
				strcpy_s(buf, buf_size, "LARGE ORANGE SQUARE");
				break;
			case 0x1F7E8:
				strcpy_s(buf, buf_size, "LARGE YELLOW SQUARE");
				break;
			case 0x1F7E9:
				strcpy_s(buf, buf_size, "LARGE GREEN SQUARE");
				break;
			case 0x1F7EA:
				strcpy_s(buf, buf_size, "LARGE PURPLE SQUARE");
				break;
			case 0x1F7EB:
				strcpy_s(buf, buf_size, "LARGE BROWN SQUARE");
				break;
			case 0x1F800:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD");
				break;
			case 0x1F801:
				strcpy_s(buf, buf_size, "UPWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD");
				break;
			case 0x1F802:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD");
				break;
			case 0x1F803:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH SMALL TRIANGLE ARROWHEAD");
				break;
			case 0x1F804:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD");
				break;
			case 0x1F805:
				strcpy_s(buf, buf_size, "UPWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD");
				break;
			case 0x1F806:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD");
				break;
			case 0x1F807:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH MEDIUM TRIANGLE ARROWHEAD");
				break;
			case 0x1F808:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD");
				break;
			case 0x1F809:
				strcpy_s(buf, buf_size, "UPWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD");
				break;
			case 0x1F80A:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD");
				break;
			case 0x1F80B:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH LARGE TRIANGLE ARROWHEAD");
				break;
			case 0x1F810:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD");
				break;
			case 0x1F811:
				strcpy_s(buf, buf_size, "UPWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD");
				break;
			case 0x1F812:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD");
				break;
			case 0x1F813:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH SMALL EQUILATERAL ARROWHEAD");
				break;
			case 0x1F814:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD");
				break;
			case 0x1F815:
				strcpy_s(buf, buf_size, "UPWARDS ARROW WITH EQUILATERAL ARROWHEAD");
				break;
			case 0x1F816:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD");
				break;
			case 0x1F817:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD");
				break;
			case 0x1F818:
				strcpy_s(buf, buf_size, "HEAVY LEFTWARDS ARROW WITH EQUILATERAL ARROWHEAD");
				break;
			case 0x1F819:
				strcpy_s(buf, buf_size, "HEAVY UPWARDS ARROW WITH EQUILATERAL ARROWHEAD");
				break;
			case 0x1F81A:
				strcpy_s(buf, buf_size, "HEAVY RIGHTWARDS ARROW WITH EQUILATERAL ARROWHEAD");
				break;
			case 0x1F81B:
				strcpy_s(buf, buf_size, "HEAVY DOWNWARDS ARROW WITH EQUILATERAL ARROWHEAD");
				break;
			case 0x1F81C:
				strcpy_s(buf, buf_size, "HEAVY LEFTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD");
				break;
			case 0x1F81D:
				strcpy_s(buf, buf_size, "HEAVY UPWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD");
				break;
			case 0x1F81E:
				strcpy_s(buf, buf_size, "HEAVY RIGHTWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD");
				break;
			case 0x1F81F:
				strcpy_s(buf, buf_size, "HEAVY DOWNWARDS ARROW WITH LARGE EQUILATERAL ARROWHEAD");
				break;
			case 0x1F820:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT");
				break;
			case 0x1F821:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT");
				break;
			case 0x1F822:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT");
				break;
			case 0x1F823:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW WITH NARROW SHAFT");
				break;
			case 0x1F824:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT");
				break;
			case 0x1F825:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT");
				break;
			case 0x1F826:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT");
				break;
			case 0x1F827:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW WITH MEDIUM SHAFT");
				break;
			case 0x1F828:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT");
				break;
			case 0x1F829:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT");
				break;
			case 0x1F82A:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT");
				break;
			case 0x1F82B:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW WITH BOLD SHAFT");
				break;
			case 0x1F82C:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT");
				break;
			case 0x1F82D:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT");
				break;
			case 0x1F82E:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT");
				break;
			case 0x1F82F:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW WITH HEAVY SHAFT");
				break;
			case 0x1F830:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT");
				break;
			case 0x1F831:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT");
				break;
			case 0x1F832:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT");
				break;
			case 0x1F833:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE-HEADED ARROW WITH VERY HEAVY SHAFT");
				break;
			case 0x1F834:
				strcpy_s(buf, buf_size, "LEFTWARDS FINGER-POST ARROW");
				break;
			case 0x1F835:
				strcpy_s(buf, buf_size, "UPWARDS FINGER-POST ARROW");
				break;
			case 0x1F836:
				strcpy_s(buf, buf_size, "RIGHTWARDS FINGER-POST ARROW");
				break;
			case 0x1F837:
				strcpy_s(buf, buf_size, "DOWNWARDS FINGER-POST ARROW");
				break;
			case 0x1F838:
				strcpy_s(buf, buf_size, "LEFTWARDS SQUARED ARROW");
				break;
			case 0x1F839:
				strcpy_s(buf, buf_size, "UPWARDS SQUARED ARROW");
				break;
			case 0x1F83A:
				strcpy_s(buf, buf_size, "RIGHTWARDS SQUARED ARROW");
				break;
			case 0x1F83B:
				strcpy_s(buf, buf_size, "DOWNWARDS SQUARED ARROW");
				break;
			case 0x1F83C:
				strcpy_s(buf, buf_size, "LEFTWARDS COMPRESSED ARROW");
				break;
			case 0x1F83D:
				strcpy_s(buf, buf_size, "UPWARDS COMPRESSED ARROW");
				break;
			case 0x1F83E:
				strcpy_s(buf, buf_size, "RIGHTWARDS COMPRESSED ARROW");
				break;
			case 0x1F83F:
				strcpy_s(buf, buf_size, "DOWNWARDS COMPRESSED ARROW");
				break;
			case 0x1F840:
				strcpy_s(buf, buf_size, "LEFTWARDS HEAVY COMPRESSED ARROW");
				break;
			case 0x1F841:
				strcpy_s(buf, buf_size, "UPWARDS HEAVY COMPRESSED ARROW");
				break;
			case 0x1F842:
				strcpy_s(buf, buf_size, "RIGHTWARDS HEAVY COMPRESSED ARROW");
				break;
			case 0x1F843:
				strcpy_s(buf, buf_size, "DOWNWARDS HEAVY COMPRESSED ARROW");
				break;
			case 0x1F844:
				strcpy_s(buf, buf_size, "LEFTWARDS HEAVY ARROW");
				break;
			case 0x1F845:
				strcpy_s(buf, buf_size, "UPWARDS HEAVY ARROW");
				break;
			case 0x1F846:
				strcpy_s(buf, buf_size, "RIGHTWARDS HEAVY ARROW");
				break;
			case 0x1F847:
				strcpy_s(buf, buf_size, "DOWNWARDS HEAVY ARROW");
				break;
			case 0x1F850:
				strcpy_s(buf, buf_size, "LEFTWARDS SANS-SERIF ARROW");
				break;
			case 0x1F851:
				strcpy_s(buf, buf_size, "UPWARDS SANS-SERIF ARROW");
				break;
			case 0x1F852:
				strcpy_s(buf, buf_size, "RIGHTWARDS SANS-SERIF ARROW");
				break;
			case 0x1F853:
				strcpy_s(buf, buf_size, "DOWNWARDS SANS-SERIF ARROW");
				break;
			case 0x1F854:
				strcpy_s(buf, buf_size, "NORTH WEST SANS-SERIF ARROW");
				break;
			case 0x1F855:
				strcpy_s(buf, buf_size, "NORTH EAST SANS-SERIF ARROW");
				break;
			case 0x1F856:
				strcpy_s(buf, buf_size, "SOUTH EAST SANS-SERIF ARROW");
				break;
			case 0x1F857:
				strcpy_s(buf, buf_size, "SOUTH WEST SANS-SERIF ARROW");
				break;
			case 0x1F858:
				strcpy_s(buf, buf_size, "LEFT RIGHT SANS-SERIF ARROW");
				break;
			case 0x1F859:
				strcpy_s(buf, buf_size, "UP DOWN SANS-SERIF ARROW");
				break;
			case 0x1F860:
				strcpy_s(buf, buf_size, "WIDE-HEADED LEFTWARDS LIGHT BARB ARROW");
				break;
			case 0x1F861:
				strcpy_s(buf, buf_size, "WIDE-HEADED UPWARDS LIGHT BARB ARROW");
				break;
			case 0x1F862:
				strcpy_s(buf, buf_size, "WIDE-HEADED RIGHTWARDS LIGHT BARB ARROW");
				break;
			case 0x1F863:
				strcpy_s(buf, buf_size, "WIDE-HEADED DOWNWARDS LIGHT BARB ARROW");
				break;
			case 0x1F864:
				strcpy_s(buf, buf_size, "WIDE-HEADED NORTH WEST LIGHT BARB ARROW");
				break;
			case 0x1F865:
				strcpy_s(buf, buf_size, "WIDE-HEADED NORTH EAST LIGHT BARB ARROW");
				break;
			case 0x1F866:
				strcpy_s(buf, buf_size, "WIDE-HEADED SOUTH EAST LIGHT BARB ARROW");
				break;
			case 0x1F867:
				strcpy_s(buf, buf_size, "WIDE-HEADED SOUTH WEST LIGHT BARB ARROW");
				break;
			case 0x1F868:
				strcpy_s(buf, buf_size, "WIDE-HEADED LEFTWARDS BARB ARROW");
				break;
			case 0x1F869:
				strcpy_s(buf, buf_size, "WIDE-HEADED UPWARDS BARB ARROW");
				break;
			case 0x1F86A:
				strcpy_s(buf, buf_size, "WIDE-HEADED RIGHTWARDS BARB ARROW");
				break;
			case 0x1F86B:
				strcpy_s(buf, buf_size, "WIDE-HEADED DOWNWARDS BARB ARROW");
				break;
			case 0x1F86C:
				strcpy_s(buf, buf_size, "WIDE-HEADED NORTH WEST BARB ARROW");
				break;
			case 0x1F86D:
				strcpy_s(buf, buf_size, "WIDE-HEADED NORTH EAST BARB ARROW");
				break;
			case 0x1F86E:
				strcpy_s(buf, buf_size, "WIDE-HEADED SOUTH EAST BARB ARROW");
				break;
			case 0x1F86F:
				strcpy_s(buf, buf_size, "WIDE-HEADED SOUTH WEST BARB ARROW");
				break;
			case 0x1F870:
				strcpy_s(buf, buf_size, "WIDE-HEADED LEFTWARDS MEDIUM BARB ARROW");
				break;
			case 0x1F871:
				strcpy_s(buf, buf_size, "WIDE-HEADED UPWARDS MEDIUM BARB ARROW");
				break;
			case 0x1F872:
				strcpy_s(buf, buf_size, "WIDE-HEADED RIGHTWARDS MEDIUM BARB ARROW");
				break;
			case 0x1F873:
				strcpy_s(buf, buf_size, "WIDE-HEADED DOWNWARDS MEDIUM BARB ARROW");
				break;
			case 0x1F874:
				strcpy_s(buf, buf_size, "WIDE-HEADED NORTH WEST MEDIUM BARB ARROW");
				break;
			case 0x1F875:
				strcpy_s(buf, buf_size, "WIDE-HEADED NORTH EAST MEDIUM BARB ARROW");
				break;
			case 0x1F876:
				strcpy_s(buf, buf_size, "WIDE-HEADED SOUTH EAST MEDIUM BARB ARROW");
				break;
			case 0x1F877:
				strcpy_s(buf, buf_size, "WIDE-HEADED SOUTH WEST MEDIUM BARB ARROW");
				break;
			case 0x1F878:
				strcpy_s(buf, buf_size, "WIDE-HEADED LEFTWARDS HEAVY BARB ARROW");
				break;
			case 0x1F879:
				strcpy_s(buf, buf_size, "WIDE-HEADED UPWARDS HEAVY BARB ARROW");
				break;
			case 0x1F87A:
				strcpy_s(buf, buf_size, "WIDE-HEADED RIGHTWARDS HEAVY BARB ARROW");
				break;
			case 0x1F87B:
				strcpy_s(buf, buf_size, "WIDE-HEADED DOWNWARDS HEAVY BARB ARROW");
				break;
			case 0x1F87C:
				strcpy_s(buf, buf_size, "WIDE-HEADED NORTH WEST HEAVY BARB ARROW");
				break;
			case 0x1F87D:
				strcpy_s(buf, buf_size, "WIDE-HEADED NORTH EAST HEAVY BARB ARROW");
				break;
			case 0x1F87E:
				strcpy_s(buf, buf_size, "WIDE-HEADED SOUTH EAST HEAVY BARB ARROW");
				break;
			case 0x1F87F:
				strcpy_s(buf, buf_size, "WIDE-HEADED SOUTH WEST HEAVY BARB ARROW");
				break;
			case 0x1F880:
				strcpy_s(buf, buf_size, "WIDE-HEADED LEFTWARDS VERY HEAVY BARB ARROW");
				break;
			case 0x1F881:
				strcpy_s(buf, buf_size, "WIDE-HEADED UPWARDS VERY HEAVY BARB ARROW");
				break;
			case 0x1F882:
				strcpy_s(buf, buf_size, "WIDE-HEADED RIGHTWARDS VERY HEAVY BARB ARROW");
				break;
			case 0x1F883:
				strcpy_s(buf, buf_size, "WIDE-HEADED DOWNWARDS VERY HEAVY BARB ARROW");
				break;
			case 0x1F884:
				strcpy_s(buf, buf_size, "WIDE-HEADED NORTH WEST VERY HEAVY BARB ARROW");
				break;
			case 0x1F885:
				strcpy_s(buf, buf_size, "WIDE-HEADED NORTH EAST VERY HEAVY BARB ARROW");
				break;
			case 0x1F886:
				strcpy_s(buf, buf_size, "WIDE-HEADED SOUTH EAST VERY HEAVY BARB ARROW");
				break;
			case 0x1F887:
				strcpy_s(buf, buf_size, "WIDE-HEADED SOUTH WEST VERY HEAVY BARB ARROW");
				break;
			case 0x1F890:
				strcpy_s(buf, buf_size, "LEFTWARDS TRIANGLE ARROWHEAD");
				break;
			case 0x1F891:
				strcpy_s(buf, buf_size, "UPWARDS TRIANGLE ARROWHEAD");
				break;
			case 0x1F892:
				strcpy_s(buf, buf_size, "RIGHTWARDS TRIANGLE ARROWHEAD");
				break;
			case 0x1F893:
				strcpy_s(buf, buf_size, "DOWNWARDS TRIANGLE ARROWHEAD");
				break;
			case 0x1F894:
				strcpy_s(buf, buf_size, "LEFTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD");
				break;
			case 0x1F895:
				strcpy_s(buf, buf_size, "UPWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD");
				break;
			case 0x1F896:
				strcpy_s(buf, buf_size, "RIGHTWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD");
				break;
			case 0x1F897:
				strcpy_s(buf, buf_size, "DOWNWARDS WHITE ARROW WITHIN TRIANGLE ARROWHEAD");
				break;
			case 0x1F898:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW WITH NOTCHED TAIL");
				break;
			case 0x1F899:
				strcpy_s(buf, buf_size, "UPWARDS ARROW WITH NOTCHED TAIL");
				break;
			case 0x1F89A:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW WITH NOTCHED TAIL");
				break;
			case 0x1F89B:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW WITH NOTCHED TAIL");
				break;
			case 0x1F89C:
				strcpy_s(buf, buf_size, "HEAVY ARROW SHAFT WIDTH ONE");
				break;
			case 0x1F89D:
				strcpy_s(buf, buf_size, "HEAVY ARROW SHAFT WIDTH TWO THIRDS");
				break;
			case 0x1F89E:
				strcpy_s(buf, buf_size, "HEAVY ARROW SHAFT WIDTH ONE HALF");
				break;
			case 0x1F89F:
				strcpy_s(buf, buf_size, "HEAVY ARROW SHAFT WIDTH ONE THIRD");
				break;
			case 0x1F8A0:
				strcpy_s(buf, buf_size, "LEFTWARDS BOTTOM-SHADED WHITE ARROW");
				break;
			case 0x1F8A1:
				strcpy_s(buf, buf_size, "RIGHTWARDS BOTTOM SHADED WHITE ARROW");
				break;
			case 0x1F8A2:
				strcpy_s(buf, buf_size, "LEFTWARDS TOP SHADED WHITE ARROW");
				break;
			case 0x1F8A3:
				strcpy_s(buf, buf_size, "RIGHTWARDS TOP SHADED WHITE ARROW");
				break;
			case 0x1F8A4:
				strcpy_s(buf, buf_size, "LEFTWARDS LEFT-SHADED WHITE ARROW");
				break;
			case 0x1F8A5:
				strcpy_s(buf, buf_size, "RIGHTWARDS RIGHT-SHADED WHITE ARROW");
				break;
			case 0x1F8A6:
				strcpy_s(buf, buf_size, "LEFTWARDS RIGHT-SHADED WHITE ARROW");
				break;
			case 0x1F8A7:
				strcpy_s(buf, buf_size, "RIGHTWARDS LEFT-SHADED WHITE ARROW");
				break;
			case 0x1F8A8:
				strcpy_s(buf, buf_size, "LEFTWARDS BACK-TILTED SHADOWED WHITE ARROW");
				break;
			case 0x1F8A9:
				strcpy_s(buf, buf_size, "RIGHTWARDS BACK-TILTED SHADOWED WHITE ARROW");
				break;
			case 0x1F8AA:
				strcpy_s(buf, buf_size, "LEFTWARDS FRONT-TILTED SHADOWED WHITE ARROW");
				break;
			case 0x1F8AB:
				strcpy_s(buf, buf_size, "RIGHTWARDS FRONT-TILTED SHADOWED WHITE ARROW");
				break;
			case 0x1F8AC:
				strcpy_s(buf, buf_size, "WHITE ARROW SHAFT WIDTH ONE");
				break;
			case 0x1F8AD:
				strcpy_s(buf, buf_size, "WHITE ARROW SHAFT WIDTH TWO THIRDS");
				break;
			case 0x1F8B0:
				strcpy_s(buf, buf_size, "ARROW POINTING UPWARDS THEN NORTH WEST");
				break;
			case 0x1F8B1:
				strcpy_s(buf, buf_size, "ARROW POINTING RIGHTWARDS THEN CURVING SOUTH WEST");
				break;
			case 0x1F900:
				strcpy_s(buf, buf_size, "CIRCLED CROSS FORMEE WITH FOUR DOTS");
				break;
			case 0x1F901:
				strcpy_s(buf, buf_size, "CIRCLED CROSS FORMEE WITH TWO DOTS");
				break;
			case 0x1F902:
				strcpy_s(buf, buf_size, "CIRCLED CROSS FORMEE");
				break;
			case 0x1F903:
				strcpy_s(buf, buf_size, "LEFT HALF CIRCLE WITH FOUR DOTS");
				break;
			case 0x1F904:
				strcpy_s(buf, buf_size, "LEFT HALF CIRCLE WITH THREE DOTS");
				break;
			case 0x1F905:
				strcpy_s(buf, buf_size, "LEFT HALF CIRCLE WITH TWO DOTS");
				break;
			case 0x1F906:
				strcpy_s(buf, buf_size, "LEFT HALF CIRCLE WITH DOT");
				break;
			case 0x1F907:
				strcpy_s(buf, buf_size, "LEFT HALF CIRCLE");
				break;
			case 0x1F908:
				strcpy_s(buf, buf_size, "DOWNWARD FACING HOOK");
				break;
			case 0x1F909:
				strcpy_s(buf, buf_size, "DOWNWARD FACING NOTCHED HOOK");
				break;
			case 0x1F90A:
				strcpy_s(buf, buf_size, "DOWNWARD FACING HOOK WITH DOT");
				break;
			case 0x1F90B:
				strcpy_s(buf, buf_size, "DOWNWARD FACING NOTCHED HOOK WITH DOT");
				break;
			case 0x1F90C:
				strcpy_s(buf, buf_size, "PINCHED FINGERS");
				break;
			case 0x1F90D:
				strcpy_s(buf, buf_size, "WHITE HEART");
				break;
			case 0x1F90E:
				strcpy_s(buf, buf_size, "BROWN HEART");
				break;
			case 0x1F90F:
				strcpy_s(buf, buf_size, "PINCHING HAND");
				break;
			case 0x1F910:
				strcpy_s(buf, buf_size, "ZIPPER-MOUTH FACE");
				break;
			case 0x1F911:
				strcpy_s(buf, buf_size, "MONEY-MOUTH FACE");
				break;
			case 0x1F912:
				strcpy_s(buf, buf_size, "FACE WITH THERMOMETER");
				break;
			case 0x1F913:
				strcpy_s(buf, buf_size, "NERD FACE");
				break;
			case 0x1F914:
				strcpy_s(buf, buf_size, "THINKING FACE");
				break;
			case 0x1F915:
				strcpy_s(buf, buf_size, "FACE WITH HEAD-BANDAGE");
				break;
			case 0x1F916:
				strcpy_s(buf, buf_size, "ROBOT FACE");
				break;
			case 0x1F917:
				strcpy_s(buf, buf_size, "HUGGING FACE");
				break;
			case 0x1F918:
				strcpy_s(buf, buf_size, "SIGN OF THE HORNS");
				break;
			case 0x1F919:
				strcpy_s(buf, buf_size, "CALL ME HAND");
				break;
			case 0x1F91A:
				strcpy_s(buf, buf_size, "RAISED BACK OF HAND");
				break;
			case 0x1F91B:
				strcpy_s(buf, buf_size, "LEFT-FACING FIST");
				break;
			case 0x1F91C:
				strcpy_s(buf, buf_size, "RIGHT-FACING FIST");
				break;
			case 0x1F91D:
				strcpy_s(buf, buf_size, "HANDSHAKE");
				break;
			case 0x1F91E:
				strcpy_s(buf, buf_size, "HAND WITH INDEX AND MIDDLE FINGERS CROSSED");
				break;
			case 0x1F91F:
				strcpy_s(buf, buf_size, "I LOVE YOU HAND SIGN");
				break;
			case 0x1F920:
				strcpy_s(buf, buf_size, "FACE WITH COWBOY HAT");
				break;
			case 0x1F921:
				strcpy_s(buf, buf_size, "CLOWN FACE");
				break;
			case 0x1F922:
				strcpy_s(buf, buf_size, "NAUSEATED FACE");
				break;
			case 0x1F923:
				strcpy_s(buf, buf_size, "ROLLING ON THE FLOOR LAUGHING");
				break;
			case 0x1F924:
				strcpy_s(buf, buf_size, "DROOLING FACE");
				break;
			case 0x1F925:
				strcpy_s(buf, buf_size, "LYING FACE");
				break;
			case 0x1F926:
				strcpy_s(buf, buf_size, "FACE PALM");
				break;
			case 0x1F927:
				strcpy_s(buf, buf_size, "SNEEZING FACE");
				break;
			case 0x1F928:
				strcpy_s(buf, buf_size, "FACE WITH ONE EYEBROW RAISED");
				break;
			case 0x1F929:
				strcpy_s(buf, buf_size, "GRINNING FACE WITH STAR EYES");
				break;
			case 0x1F92A:
				strcpy_s(buf, buf_size, "GRINNING FACE WITH ONE LARGE AND ONE SMALL EYE");
				break;
			case 0x1F92B:
				strcpy_s(buf, buf_size, "FACE WITH FINGER COVERING CLOSED LIPS");
				break;
			case 0x1F92C:
				strcpy_s(buf, buf_size, "SERIOUS FACE WITH SYMBOLS COVERING MOUTH");
				break;
			case 0x1F92D:
				strcpy_s(buf, buf_size, "SMILING FACE WITH SMILING EYES AND HAND COVERING MOUTH");
				break;
			case 0x1F92E:
				strcpy_s(buf, buf_size, "FACE WITH OPEN MOUTH VOMITING");
				break;
			case 0x1F92F:
				strcpy_s(buf, buf_size, "SHOCKED FACE WITH EXPLODING HEAD");
				break;
			case 0x1F930:
				strcpy_s(buf, buf_size, "PREGNANT WOMAN");
				break;
			case 0x1F931:
				strcpy_s(buf, buf_size, "BREAST-FEEDING");
				break;
			case 0x1F932:
				strcpy_s(buf, buf_size, "PALMS UP TOGETHER");
				break;
			case 0x1F933:
				strcpy_s(buf, buf_size, "SELFIE");
				break;
			case 0x1F934:
				strcpy_s(buf, buf_size, "PRINCE");
				break;
			case 0x1F935:
				strcpy_s(buf, buf_size, "MAN IN TUXEDO");
				break;
			case 0x1F936:
				strcpy_s(buf, buf_size, "MOTHER CHRISTMAS");
				break;
			case 0x1F937:
				strcpy_s(buf, buf_size, "SHRUG");
				break;
			case 0x1F938:
				strcpy_s(buf, buf_size, "PERSON DOING CARTWHEEL");
				break;
			case 0x1F939:
				strcpy_s(buf, buf_size, "JUGGLING");
				break;
			case 0x1F93A:
				strcpy_s(buf, buf_size, "FENCER");
				break;
			case 0x1F93B:
				strcpy_s(buf, buf_size, "MODERN PENTATHLON");
				break;
			case 0x1F93C:
				strcpy_s(buf, buf_size, "WRESTLERS");
				break;
			case 0x1F93D:
				strcpy_s(buf, buf_size, "WATER POLO");
				break;
			case 0x1F93E:
				strcpy_s(buf, buf_size, "HANDBALL");
				break;
			case 0x1F93F:
				strcpy_s(buf, buf_size, "DIVING MASK");
				break;
			case 0x1F940:
				strcpy_s(buf, buf_size, "WILTED FLOWER");
				break;
			case 0x1F941:
				strcpy_s(buf, buf_size, "DRUM WITH DRUMSTICKS");
				break;
			case 0x1F942:
				strcpy_s(buf, buf_size, "CLINKING GLASSES");
				break;
			case 0x1F943:
				strcpy_s(buf, buf_size, "TUMBLER GLASS");
				break;
			case 0x1F944:
				strcpy_s(buf, buf_size, "SPOON");
				break;
			case 0x1F945:
				strcpy_s(buf, buf_size, "GOAL NET");
				break;
			case 0x1F946:
				strcpy_s(buf, buf_size, "RIFLE");
				break;
			case 0x1F947:
				strcpy_s(buf, buf_size, "FIRST PLACE MEDAL");
				break;
			case 0x1F948:
				strcpy_s(buf, buf_size, "SECOND PLACE MEDAL");
				break;
			case 0x1F949:
				strcpy_s(buf, buf_size, "THIRD PLACE MEDAL");
				break;
			case 0x1F94A:
				strcpy_s(buf, buf_size, "BOXING GLOVE");
				break;
			case 0x1F94B:
				strcpy_s(buf, buf_size, "MARTIAL ARTS UNIFORM");
				break;
			case 0x1F94C:
				strcpy_s(buf, buf_size, "CURLING STONE");
				break;
			case 0x1F94D:
				strcpy_s(buf, buf_size, "LACROSSE STICK AND BALL");
				break;
			case 0x1F94E:
				strcpy_s(buf, buf_size, "SOFTBALL");
				break;
			case 0x1F94F:
				strcpy_s(buf, buf_size, "FLYING DISC");
				break;
			case 0x1F950:
				strcpy_s(buf, buf_size, "CROISSANT");
				break;
			case 0x1F951:
				strcpy_s(buf, buf_size, "AVOCADO");
				break;
			case 0x1F952:
				strcpy_s(buf, buf_size, "CUCUMBER");
				break;
			case 0x1F953:
				strcpy_s(buf, buf_size, "BACON");
				break;
			case 0x1F954:
				strcpy_s(buf, buf_size, "POTATO");
				break;
			case 0x1F955:
				strcpy_s(buf, buf_size, "CARROT");
				break;
			case 0x1F956:
				strcpy_s(buf, buf_size, "BAGUETTE BREAD");
				break;
			case 0x1F957:
				strcpy_s(buf, buf_size, "GREEN SALAD");
				break;
			case 0x1F958:
				strcpy_s(buf, buf_size, "SHALLOW PAN OF FOOD");
				break;
			case 0x1F959:
				strcpy_s(buf, buf_size, "STUFFED FLATBREAD");
				break;
			case 0x1F95A:
				strcpy_s(buf, buf_size, "EGG");
				break;
			case 0x1F95B:
				strcpy_s(buf, buf_size, "GLASS OF MILK");
				break;
			case 0x1F95C:
				strcpy_s(buf, buf_size, "PEANUTS");
				break;
			case 0x1F95D:
				strcpy_s(buf, buf_size, "KIWIFRUIT");
				break;
			case 0x1F95E:
				strcpy_s(buf, buf_size, "PANCAKES");
				break;
			case 0x1F95F:
				strcpy_s(buf, buf_size, "DUMPLING");
				break;
			case 0x1F960:
				strcpy_s(buf, buf_size, "FORTUNE COOKIE");
				break;
			case 0x1F961:
				strcpy_s(buf, buf_size, "TAKEOUT BOX");
				break;
			case 0x1F962:
				strcpy_s(buf, buf_size, "CHOPSTICKS");
				break;
			case 0x1F963:
				strcpy_s(buf, buf_size, "BOWL WITH SPOON");
				break;
			case 0x1F964:
				strcpy_s(buf, buf_size, "CUP WITH STRAW");
				break;
			case 0x1F965:
				strcpy_s(buf, buf_size, "COCONUT");
				break;
			case 0x1F966:
				strcpy_s(buf, buf_size, "BROCCOLI");
				break;
			case 0x1F967:
				strcpy_s(buf, buf_size, "PIE");
				break;
			case 0x1F968:
				strcpy_s(buf, buf_size, "PRETZEL");
				break;
			case 0x1F969:
				strcpy_s(buf, buf_size, "CUT OF MEAT");
				break;
			case 0x1F96A:
				strcpy_s(buf, buf_size, "SANDWICH");
				break;
			case 0x1F96B:
				strcpy_s(buf, buf_size, "CANNED FOOD");
				break;
			case 0x1F96C:
				strcpy_s(buf, buf_size, "LEAFY GREEN");
				break;
			case 0x1F96D:
				strcpy_s(buf, buf_size, "MANGO");
				break;
			case 0x1F96E:
				strcpy_s(buf, buf_size, "MOON CAKE");
				break;
			case 0x1F96F:
				strcpy_s(buf, buf_size, "BAGEL");
				break;
			case 0x1F970:
				strcpy_s(buf, buf_size, "SMILING FACE WITH SMILING EYES AND THREE HEARTS");
				break;
			case 0x1F971:
				strcpy_s(buf, buf_size, "YAWNING FACE");
				break;
			case 0x1F972:
				strcpy_s(buf, buf_size, "SMILING FACE WITH TEAR");
				break;
			case 0x1F973:
				strcpy_s(buf, buf_size, "FACE WITH PARTY HORN AND PARTY HAT");
				break;
			case 0x1F974:
				strcpy_s(buf, buf_size, "FACE WITH UNEVEN EYES AND WAVY MOUTH");
				break;
			case 0x1F975:
				strcpy_s(buf, buf_size, "OVERHEATED FACE");
				break;
			case 0x1F976:
				strcpy_s(buf, buf_size, "FREEZING FACE");
				break;
			case 0x1F977:
				strcpy_s(buf, buf_size, "NINJA");
				break;
			case 0x1F978:
				strcpy_s(buf, buf_size, "DISGUISED FACE");
				break;
			case 0x1F97A:
				strcpy_s(buf, buf_size, "FACE WITH PLEADING EYES");
				break;
			case 0x1F97B:
				strcpy_s(buf, buf_size, "SARI");
				break;
			case 0x1F97C:
				strcpy_s(buf, buf_size, "LAB COAT");
				break;
			case 0x1F97D:
				strcpy_s(buf, buf_size, "GOGGLES");
				break;
			case 0x1F97E:
				strcpy_s(buf, buf_size, "HIKING BOOT");
				break;
			case 0x1F97F:
				strcpy_s(buf, buf_size, "FLAT SHOE");
				break;
			case 0x1F980:
				strcpy_s(buf, buf_size, "CRAB");
				break;
			case 0x1F981:
				strcpy_s(buf, buf_size, "LION FACE");
				break;
			case 0x1F982:
				strcpy_s(buf, buf_size, "SCORPION");
				break;
			case 0x1F983:
				strcpy_s(buf, buf_size, "TURKEY");
				break;
			case 0x1F984:
				strcpy_s(buf, buf_size, "UNICORN FACE");
				break;
			case 0x1F985:
				strcpy_s(buf, buf_size, "EAGLE");
				break;
			case 0x1F986:
				strcpy_s(buf, buf_size, "DUCK");
				break;
			case 0x1F987:
				strcpy_s(buf, buf_size, "BAT");
				break;
			case 0x1F988:
				strcpy_s(buf, buf_size, "SHARK");
				break;
			case 0x1F989:
				strcpy_s(buf, buf_size, "OWL");
				break;
			case 0x1F98A:
				strcpy_s(buf, buf_size, "FOX FACE");
				break;
			case 0x1F98B:
				strcpy_s(buf, buf_size, "BUTTERFLY");
				break;
			case 0x1F98C:
				strcpy_s(buf, buf_size, "DEER");
				break;
			case 0x1F98D:
				strcpy_s(buf, buf_size, "GORILLA");
				break;
			case 0x1F98E:
				strcpy_s(buf, buf_size, "LIZARD");
				break;
			case 0x1F98F:
				strcpy_s(buf, buf_size, "RHINOCEROS");
				break;
			case 0x1F990:
				strcpy_s(buf, buf_size, "SHRIMP");
				break;
			case 0x1F991:
				strcpy_s(buf, buf_size, "SQUID");
				break;
			case 0x1F992:
				strcpy_s(buf, buf_size, "GIRAFFE FACE");
				break;
			case 0x1F993:
				strcpy_s(buf, buf_size, "ZEBRA FACE");
				break;
			case 0x1F994:
				strcpy_s(buf, buf_size, "HEDGEHOG");
				break;
			case 0x1F995:
				strcpy_s(buf, buf_size, "SAUROPOD");
				break;
			case 0x1F996:
				strcpy_s(buf, buf_size, "T-REX");
				break;
			case 0x1F997:
				strcpy_s(buf, buf_size, "CRICKET");
				break;
			case 0x1F998:
				strcpy_s(buf, buf_size, "KANGAROO");
				break;
			case 0x1F999:
				strcpy_s(buf, buf_size, "LLAMA");
				break;
			case 0x1F99A:
				strcpy_s(buf, buf_size, "PEACOCK");
				break;
			case 0x1F99B:
				strcpy_s(buf, buf_size, "HIPPOPOTAMUS");
				break;
			case 0x1F99C:
				strcpy_s(buf, buf_size, "PARROT");
				break;
			case 0x1F99D:
				strcpy_s(buf, buf_size, "RACCOON");
				break;
			case 0x1F99E:
				strcpy_s(buf, buf_size, "LOBSTER");
				break;
			case 0x1F99F:
				strcpy_s(buf, buf_size, "MOSQUITO");
				break;
			case 0x1F9A0:
				strcpy_s(buf, buf_size, "MICROBE");
				break;
			case 0x1F9A1:
				strcpy_s(buf, buf_size, "BADGER");
				break;
			case 0x1F9A2:
				strcpy_s(buf, buf_size, "SWAN");
				break;
			case 0x1F9A3:
				strcpy_s(buf, buf_size, "MAMMOTH");
				break;
			case 0x1F9A4:
				strcpy_s(buf, buf_size, "DODO");
				break;
			case 0x1F9A5:
				strcpy_s(buf, buf_size, "SLOTH");
				break;
			case 0x1F9A6:
				strcpy_s(buf, buf_size, "OTTER");
				break;
			case 0x1F9A7:
				strcpy_s(buf, buf_size, "ORANGUTAN");
				break;
			case 0x1F9A8:
				strcpy_s(buf, buf_size, "SKUNK");
				break;
			case 0x1F9A9:
				strcpy_s(buf, buf_size, "FLAMINGO");
				break;
			case 0x1F9AA:
				strcpy_s(buf, buf_size, "OYSTER");
				break;
			case 0x1F9AB:
				strcpy_s(buf, buf_size, "BEAVER");
				break;
			case 0x1F9AC:
				strcpy_s(buf, buf_size, "BISON");
				break;
			case 0x1F9AD:
				strcpy_s(buf, buf_size, "SEAL");
				break;
			case 0x1F9AE:
				strcpy_s(buf, buf_size, "GUIDE DOG");
				break;
			case 0x1F9AF:
				strcpy_s(buf, buf_size, "PROBING CANE");
				break;
			case 0x1F9B0:
				strcpy_s(buf, buf_size, "EMOJI COMPONENT RED HAIR");
				break;
			case 0x1F9B1:
				strcpy_s(buf, buf_size, "EMOJI COMPONENT CURLY HAIR");
				break;
			case 0x1F9B2:
				strcpy_s(buf, buf_size, "EMOJI COMPONENT BALD");
				break;
			case 0x1F9B3:
				strcpy_s(buf, buf_size, "EMOJI COMPONENT WHITE HAIR");
				break;
			case 0x1F9B4:
				strcpy_s(buf, buf_size, "BONE");
				break;
			case 0x1F9B5:
				strcpy_s(buf, buf_size, "LEG");
				break;
			case 0x1F9B6:
				strcpy_s(buf, buf_size, "FOOT");
				break;
			case 0x1F9B7:
				strcpy_s(buf, buf_size, "TOOTH");
				break;
			case 0x1F9B8:
				strcpy_s(buf, buf_size, "SUPERHERO");
				break;
			case 0x1F9B9:
				strcpy_s(buf, buf_size, "SUPERVILLAIN");
				break;
			case 0x1F9BA:
				strcpy_s(buf, buf_size, "SAFETY VEST");
				break;
			case 0x1F9BB:
				strcpy_s(buf, buf_size, "EAR WITH HEARING AID");
				break;
			case 0x1F9BC:
				strcpy_s(buf, buf_size, "MOTORIZED WHEELCHAIR");
				break;
			case 0x1F9BD:
				strcpy_s(buf, buf_size, "MANUAL WHEELCHAIR");
				break;
			case 0x1F9BE:
				strcpy_s(buf, buf_size, "MECHANICAL ARM");
				break;
			case 0x1F9BF:
				strcpy_s(buf, buf_size, "MECHANICAL LEG");
				break;
			case 0x1F9C0:
				strcpy_s(buf, buf_size, "CHEESE WEDGE");
				break;
			case 0x1F9C1:
				strcpy_s(buf, buf_size, "CUPCAKE");
				break;
			case 0x1F9C2:
				strcpy_s(buf, buf_size, "SALT SHAKER");
				break;
			case 0x1F9C3:
				strcpy_s(buf, buf_size, "BEVERAGE BOX");
				break;
			case 0x1F9C4:
				strcpy_s(buf, buf_size, "GARLIC");
				break;
			case 0x1F9C5:
				strcpy_s(buf, buf_size, "ONION");
				break;
			case 0x1F9C6:
				strcpy_s(buf, buf_size, "FALAFEL");
				break;
			case 0x1F9C7:
				strcpy_s(buf, buf_size, "WAFFLE");
				break;
			case 0x1F9C8:
				strcpy_s(buf, buf_size, "BUTTER");
				break;
			case 0x1F9C9:
				strcpy_s(buf, buf_size, "MATE DRINK");
				break;
			case 0x1F9CA:
				strcpy_s(buf, buf_size, "ICE CUBE");
				break;
			case 0x1F9CB:
				strcpy_s(buf, buf_size, "BUBBLE TEA");
				break;
			case 0x1F9CD:
				strcpy_s(buf, buf_size, "STANDING PERSON");
				break;
			case 0x1F9CE:
				strcpy_s(buf, buf_size, "KNEELING PERSON");
				break;
			case 0x1F9CF:
				strcpy_s(buf, buf_size, "DEAF PERSON");
				break;
			case 0x1F9D0:
				strcpy_s(buf, buf_size, "FACE WITH MONOCLE");
				break;
			case 0x1F9D1:
				strcpy_s(buf, buf_size, "ADULT");
				break;
			case 0x1F9D2:
				strcpy_s(buf, buf_size, "CHILD");
				break;
			case 0x1F9D3:
				strcpy_s(buf, buf_size, "OLDER ADULT");
				break;
			case 0x1F9D4:
				strcpy_s(buf, buf_size, "BEARDED PERSON");
				break;
			case 0x1F9D5:
				strcpy_s(buf, buf_size, "PERSON WITH HEADSCARF");
				break;
			case 0x1F9D6:
				strcpy_s(buf, buf_size, "PERSON IN STEAMY ROOM");
				break;
			case 0x1F9D7:
				strcpy_s(buf, buf_size, "PERSON CLIMBING");
				break;
			case 0x1F9D8:
				strcpy_s(buf, buf_size, "PERSON IN LOTUS POSITION");
				break;
			case 0x1F9D9:
				strcpy_s(buf, buf_size, "MAGE");
				break;
			case 0x1F9DA:
				strcpy_s(buf, buf_size, "FAIRY");
				break;
			case 0x1F9DB:
				strcpy_s(buf, buf_size, "VAMPIRE");
				break;
			case 0x1F9DC:
				strcpy_s(buf, buf_size, "MERPERSON");
				break;
			case 0x1F9DD:
				strcpy_s(buf, buf_size, "ELF");
				break;
			case 0x1F9DE:
				strcpy_s(buf, buf_size, "GENIE");
				break;
			case 0x1F9DF:
				strcpy_s(buf, buf_size, "ZOMBIE");
				break;
			case 0x1F9E0:
				strcpy_s(buf, buf_size, "BRAIN");
				break;
			case 0x1F9E1:
				strcpy_s(buf, buf_size, "ORANGE HEART");
				break;
			case 0x1F9E2:
				strcpy_s(buf, buf_size, "BILLED CAP");
				break;
			case 0x1F9E3:
				strcpy_s(buf, buf_size, "SCARF");
				break;
			case 0x1F9E4:
				strcpy_s(buf, buf_size, "GLOVES");
				break;
			case 0x1F9E5:
				strcpy_s(buf, buf_size, "COAT");
				break;
			case 0x1F9E6:
				strcpy_s(buf, buf_size, "SOCKS");
				break;
			case 0x1F9E7:
				strcpy_s(buf, buf_size, "RED GIFT ENVELOPE");
				break;
			case 0x1F9E8:
				strcpy_s(buf, buf_size, "FIRECRACKER");
				break;
			case 0x1F9E9:
				strcpy_s(buf, buf_size, "JIGSAW PUZZLE PIECE");
				break;
			case 0x1F9EA:
				strcpy_s(buf, buf_size, "TEST TUBE");
				break;
			case 0x1F9EB:
				strcpy_s(buf, buf_size, "PETRI DISH");
				break;
			case 0x1F9EC:
				strcpy_s(buf, buf_size, "DNA DOUBLE HELIX");
				break;
			case 0x1F9ED:
				strcpy_s(buf, buf_size, "COMPASS");
				break;
			case 0x1F9EE:
				strcpy_s(buf, buf_size, "ABACUS");
				break;
			case 0x1F9EF:
				strcpy_s(buf, buf_size, "FIRE EXTINGUISHER");
				break;
			case 0x1F9F0:
				strcpy_s(buf, buf_size, "TOOLBOX");
				break;
			case 0x1F9F1:
				strcpy_s(buf, buf_size, "BRICK");
				break;
			case 0x1F9F2:
				strcpy_s(buf, buf_size, "MAGNET");
				break;
			case 0x1F9F3:
				strcpy_s(buf, buf_size, "LUGGAGE");
				break;
			case 0x1F9F4:
				strcpy_s(buf, buf_size, "LOTION BOTTLE");
				break;
			case 0x1F9F5:
				strcpy_s(buf, buf_size, "SPOOL OF THREAD");
				break;
			case 0x1F9F6:
				strcpy_s(buf, buf_size, "BALL OF YARN");
				break;
			case 0x1F9F7:
				strcpy_s(buf, buf_size, "SAFETY PIN");
				break;
			case 0x1F9F8:
				strcpy_s(buf, buf_size, "TEDDY BEAR");
				break;
			case 0x1F9F9:
				strcpy_s(buf, buf_size, "BROOM");
				break;
			case 0x1F9FA:
				strcpy_s(buf, buf_size, "BASKET");
				break;
			case 0x1F9FB:
				strcpy_s(buf, buf_size, "ROLL OF PAPER");
				break;
			case 0x1F9FC:
				strcpy_s(buf, buf_size, "BAR OF SOAP");
				break;
			case 0x1F9FD:
				strcpy_s(buf, buf_size, "SPONGE");
				break;
			case 0x1F9FE:
				strcpy_s(buf, buf_size, "RECEIPT");
				break;
			case 0x1F9FF:
				strcpy_s(buf, buf_size, "NAZAR AMULET");
				break;
			case 0x1FA00:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS KING");
				break;
			case 0x1FA01:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS QUEEN");
				break;
			case 0x1FA02:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS ROOK");
				break;
			case 0x1FA03:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS BISHOP");
				break;
			case 0x1FA04:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS KNIGHT");
				break;
			case 0x1FA05:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS PAWN");
				break;
			case 0x1FA06:
				strcpy_s(buf, buf_size, "WHITE CHESS KNIGHT ROTATED FORTY-FIVE DEGREES");
				break;
			case 0x1FA07:
				strcpy_s(buf, buf_size, "BLACK CHESS KNIGHT ROTATED FORTY-FIVE DEGREES");
				break;
			case 0x1FA08:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS KNIGHT ROTATED FORTY-FIVE DEGREES");
				break;
			case 0x1FA09:
				strcpy_s(buf, buf_size, "WHITE CHESS KING ROTATED NINETY DEGREES");
				break;
			case 0x1FA0A:
				strcpy_s(buf, buf_size, "WHITE CHESS QUEEN ROTATED NINETY DEGREES");
				break;
			case 0x1FA0B:
				strcpy_s(buf, buf_size, "WHITE CHESS ROOK ROTATED NINETY DEGREES");
				break;
			case 0x1FA0C:
				strcpy_s(buf, buf_size, "WHITE CHESS BISHOP ROTATED NINETY DEGREES");
				break;
			case 0x1FA0D:
				strcpy_s(buf, buf_size, "WHITE CHESS KNIGHT ROTATED NINETY DEGREES");
				break;
			case 0x1FA0E:
				strcpy_s(buf, buf_size, "WHITE CHESS PAWN ROTATED NINETY DEGREES");
				break;
			case 0x1FA0F:
				strcpy_s(buf, buf_size, "BLACK CHESS KING ROTATED NINETY DEGREES");
				break;
			case 0x1FA10:
				strcpy_s(buf, buf_size, "BLACK CHESS QUEEN ROTATED NINETY DEGREES");
				break;
			case 0x1FA11:
				strcpy_s(buf, buf_size, "BLACK CHESS ROOK ROTATED NINETY DEGREES");
				break;
			case 0x1FA12:
				strcpy_s(buf, buf_size, "BLACK CHESS BISHOP ROTATED NINETY DEGREES");
				break;
			case 0x1FA13:
				strcpy_s(buf, buf_size, "BLACK CHESS KNIGHT ROTATED NINETY DEGREES");
				break;
			case 0x1FA14:
				strcpy_s(buf, buf_size, "BLACK CHESS PAWN ROTATED NINETY DEGREES");
				break;
			case 0x1FA15:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS KING ROTATED NINETY DEGREES");
				break;
			case 0x1FA16:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS QUEEN ROTATED NINETY DEGREES");
				break;
			case 0x1FA17:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS ROOK ROTATED NINETY DEGREES");
				break;
			case 0x1FA18:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS BISHOP ROTATED NINETY DEGREES");
				break;
			case 0x1FA19:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS KNIGHT ROTATED NINETY DEGREES");
				break;
			case 0x1FA1A:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS PAWN ROTATED NINETY DEGREES");
				break;
			case 0x1FA1B:
				strcpy_s(buf, buf_size, "WHITE CHESS KNIGHT ROTATED ONE HUNDRED THIRTY-FIVE DEGREES");
				break;
			case 0x1FA1C:
				strcpy_s(buf, buf_size, "BLACK CHESS KNIGHT ROTATED ONE HUNDRED THIRTY-FIVE DEGREES");
				break;
			case 0x1FA1D:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS KNIGHT ROTATED ONE HUNDRED THIRTY-FIVE DEGREES");
				break;
			case 0x1FA1E:
				strcpy_s(buf, buf_size, "WHITE CHESS TURNED KING");
				break;
			case 0x1FA1F:
				strcpy_s(buf, buf_size, "WHITE CHESS TURNED QUEEN");
				break;
			case 0x1FA20:
				strcpy_s(buf, buf_size, "WHITE CHESS TURNED ROOK");
				break;
			case 0x1FA21:
				strcpy_s(buf, buf_size, "WHITE CHESS TURNED BISHOP");
				break;
			case 0x1FA22:
				strcpy_s(buf, buf_size, "WHITE CHESS TURNED KNIGHT");
				break;
			case 0x1FA23:
				strcpy_s(buf, buf_size, "WHITE CHESS TURNED PAWN");
				break;
			case 0x1FA24:
				strcpy_s(buf, buf_size, "BLACK CHESS TURNED KING");
				break;
			case 0x1FA25:
				strcpy_s(buf, buf_size, "BLACK CHESS TURNED QUEEN");
				break;
			case 0x1FA26:
				strcpy_s(buf, buf_size, "BLACK CHESS TURNED ROOK");
				break;
			case 0x1FA27:
				strcpy_s(buf, buf_size, "BLACK CHESS TURNED BISHOP");
				break;
			case 0x1FA28:
				strcpy_s(buf, buf_size, "BLACK CHESS TURNED KNIGHT");
				break;
			case 0x1FA29:
				strcpy_s(buf, buf_size, "BLACK CHESS TURNED PAWN");
				break;
			case 0x1FA2A:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS TURNED KING");
				break;
			case 0x1FA2B:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS TURNED QUEEN");
				break;
			case 0x1FA2C:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS TURNED ROOK");
				break;
			case 0x1FA2D:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS TURNED BISHOP");
				break;
			case 0x1FA2E:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS TURNED KNIGHT");
				break;
			case 0x1FA2F:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS TURNED PAWN");
				break;
			case 0x1FA30:
				strcpy_s(buf, buf_size, "WHITE CHESS KNIGHT ROTATED TWO HUNDRED TWENTY-FIVE DEGREES");
				break;
			case 0x1FA31:
				strcpy_s(buf, buf_size, "BLACK CHESS KNIGHT ROTATED TWO HUNDRED TWENTY-FIVE DEGREES");
				break;
			case 0x1FA32:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS KNIGHT ROTATED TWO HUNDRED TWENTY-FIVE DEGREES");
				break;
			case 0x1FA33:
				strcpy_s(buf, buf_size, "WHITE CHESS KING ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA34:
				strcpy_s(buf, buf_size, "WHITE CHESS QUEEN ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA35:
				strcpy_s(buf, buf_size, "WHITE CHESS ROOK ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA36:
				strcpy_s(buf, buf_size, "WHITE CHESS BISHOP ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA37:
				strcpy_s(buf, buf_size, "WHITE CHESS KNIGHT ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA38:
				strcpy_s(buf, buf_size, "WHITE CHESS PAWN ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA39:
				strcpy_s(buf, buf_size, "BLACK CHESS KING ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA3A:
				strcpy_s(buf, buf_size, "BLACK CHESS QUEEN ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA3B:
				strcpy_s(buf, buf_size, "BLACK CHESS ROOK ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA3C:
				strcpy_s(buf, buf_size, "BLACK CHESS BISHOP ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA3D:
				strcpy_s(buf, buf_size, "BLACK CHESS KNIGHT ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA3E:
				strcpy_s(buf, buf_size, "BLACK CHESS PAWN ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA3F:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS KING ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA40:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS QUEEN ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA41:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS ROOK ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA42:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS BISHOP ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA43:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS KNIGHT ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA44:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS PAWN ROTATED TWO HUNDRED SEVENTY DEGREES");
				break;
			case 0x1FA45:
				strcpy_s(buf, buf_size, "WHITE CHESS KNIGHT ROTATED THREE HUNDRED FIFTEEN DEGREES");
				break;
			case 0x1FA46:
				strcpy_s(buf, buf_size, "BLACK CHESS KNIGHT ROTATED THREE HUNDRED FIFTEEN DEGREES");
				break;
			case 0x1FA47:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS KNIGHT ROTATED THREE HUNDRED FIFTEEN DEGREES");
				break;
			case 0x1FA48:
				strcpy_s(buf, buf_size, "WHITE CHESS EQUIHOPPER");
				break;
			case 0x1FA49:
				strcpy_s(buf, buf_size, "BLACK CHESS EQUIHOPPER");
				break;
			case 0x1FA4A:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS EQUIHOPPER");
				break;
			case 0x1FA4B:
				strcpy_s(buf, buf_size, "WHITE CHESS EQUIHOPPER ROTATED NINETY DEGREES");
				break;
			case 0x1FA4C:
				strcpy_s(buf, buf_size, "BLACK CHESS EQUIHOPPER ROTATED NINETY DEGREES");
				break;
			case 0x1FA4D:
				strcpy_s(buf, buf_size, "NEUTRAL CHESS EQUIHOPPER ROTATED NINETY DEGREES");
				break;
			case 0x1FA4E:
				strcpy_s(buf, buf_size, "WHITE CHESS KNIGHT-QUEEN");
				break;
			case 0x1FA4F:
				strcpy_s(buf, buf_size, "WHITE CHESS KNIGHT-ROOK");
				break;
			case 0x1FA50:
				strcpy_s(buf, buf_size, "WHITE CHESS KNIGHT-BISHOP");
				break;
			case 0x1FA51:
				strcpy_s(buf, buf_size, "BLACK CHESS KNIGHT-QUEEN");
				break;
			case 0x1FA52:
				strcpy_s(buf, buf_size, "BLACK CHESS KNIGHT-ROOK");
				break;
			case 0x1FA53:
				strcpy_s(buf, buf_size, "BLACK CHESS KNIGHT-BISHOP");
				break;
			case 0x1FA60:
				strcpy_s(buf, buf_size, "XIANGQI RED GENERAL");
				break;
			case 0x1FA61:
				strcpy_s(buf, buf_size, "XIANGQI RED MANDARIN");
				break;
			case 0x1FA62:
				strcpy_s(buf, buf_size, "XIANGQI RED ELEPHANT");
				break;
			case 0x1FA63:
				strcpy_s(buf, buf_size, "XIANGQI RED HORSE");
				break;
			case 0x1FA64:
				strcpy_s(buf, buf_size, "XIANGQI RED CHARIOT");
				break;
			case 0x1FA65:
				strcpy_s(buf, buf_size, "XIANGQI RED CANNON");
				break;
			case 0x1FA66:
				strcpy_s(buf, buf_size, "XIANGQI RED SOLDIER");
				break;
			case 0x1FA67:
				strcpy_s(buf, buf_size, "XIANGQI BLACK GENERAL");
				break;
			case 0x1FA68:
				strcpy_s(buf, buf_size, "XIANGQI BLACK MANDARIN");
				break;
			case 0x1FA69:
				strcpy_s(buf, buf_size, "XIANGQI BLACK ELEPHANT");
				break;
			case 0x1FA6A:
				strcpy_s(buf, buf_size, "XIANGQI BLACK HORSE");
				break;
			case 0x1FA6B:
				strcpy_s(buf, buf_size, "XIANGQI BLACK CHARIOT");
				break;
			case 0x1FA6C:
				strcpy_s(buf, buf_size, "XIANGQI BLACK CANNON");
				break;
			case 0x1FA6D:
				strcpy_s(buf, buf_size, "XIANGQI BLACK SOLDIER");
				break;
			case 0x1FA70:
				strcpy_s(buf, buf_size, "BALLET SHOES");
				break;
			case 0x1FA71:
				strcpy_s(buf, buf_size, "ONE-PIECE SWIMSUIT");
				break;
			case 0x1FA72:
				strcpy_s(buf, buf_size, "BRIEFS");
				break;
			case 0x1FA73:
				strcpy_s(buf, buf_size, "SHORTS");
				break;
			case 0x1FA74:
				strcpy_s(buf, buf_size, "THONG SANDAL");
				break;
			case 0x1FA78:
				strcpy_s(buf, buf_size, "DROP OF BLOOD");
				break;
			case 0x1FA79:
				strcpy_s(buf, buf_size, "ADHESIVE BANDAGE");
				break;
			case 0x1FA7A:
				strcpy_s(buf, buf_size, "STETHOSCOPE");
				break;
			case 0x1FA80:
				strcpy_s(buf, buf_size, "YO-YO");
				break;
			case 0x1FA81:
				strcpy_s(buf, buf_size, "KITE");
				break;
			case 0x1FA82:
				strcpy_s(buf, buf_size, "PARACHUTE");
				break;
			case 0x1FA83:
				strcpy_s(buf, buf_size, "BOOMERANG");
				break;
			case 0x1FA84:
				strcpy_s(buf, buf_size, "MAGIC WAND");
				break;
			case 0x1FA85:
				strcpy_s(buf, buf_size, "PINATA");
				break;
			case 0x1FA86:
				strcpy_s(buf, buf_size, "NESTING DOLLS");
				break;
			case 0x1FA90:
				strcpy_s(buf, buf_size, "RINGED PLANET");
				break;
			case 0x1FA91:
				strcpy_s(buf, buf_size, "CHAIR");
				break;
			case 0x1FA92:
				strcpy_s(buf, buf_size, "RAZOR");
				break;
			case 0x1FA93:
				strcpy_s(buf, buf_size, "AXE");
				break;
			case 0x1FA94:
				strcpy_s(buf, buf_size, "DIYA LAMP");
				break;
			case 0x1FA95:
				strcpy_s(buf, buf_size, "BANJO");
				break;
			case 0x1FA96:
				strcpy_s(buf, buf_size, "MILITARY HELMET");
				break;
			case 0x1FA97:
				strcpy_s(buf, buf_size, "ACCORDION");
				break;
			case 0x1FA98:
				strcpy_s(buf, buf_size, "LONG DRUM");
				break;
			case 0x1FA99:
				strcpy_s(buf, buf_size, "COIN");
				break;
			case 0x1FA9A:
				strcpy_s(buf, buf_size, "CARPENTRY SAW");
				break;
			case 0x1FA9B:
				strcpy_s(buf, buf_size, "SCREWDRIVER");
				break;
			case 0x1FA9C:
				strcpy_s(buf, buf_size, "LADDER");
				break;
			case 0x1FA9D:
				strcpy_s(buf, buf_size, "HOOK");
				break;
			case 0x1FA9E:
				strcpy_s(buf, buf_size, "MIRROR");
				break;
			case 0x1FA9F:
				strcpy_s(buf, buf_size, "WINDOW");
				break;
			case 0x1FAA0:
				strcpy_s(buf, buf_size, "PLUNGER");
				break;
			case 0x1FAA1:
				strcpy_s(buf, buf_size, "SEWING NEEDLE");
				break;
			case 0x1FAA2:
				strcpy_s(buf, buf_size, "KNOT");
				break;
			case 0x1FAA3:
				strcpy_s(buf, buf_size, "BUCKET");
				break;
			case 0x1FAA4:
				strcpy_s(buf, buf_size, "MOUSE TRAP");
				break;
			case 0x1FAA5:
				strcpy_s(buf, buf_size, "TOOTHBRUSH");
				break;
			case 0x1FAA6:
				strcpy_s(buf, buf_size, "HEADSTONE");
				break;
			case 0x1FAA7:
				strcpy_s(buf, buf_size, "PLACARD");
				break;
			case 0x1FAA8:
				strcpy_s(buf, buf_size, "ROCK");
				break;
			case 0x1FAB0:
				strcpy_s(buf, buf_size, "FLY");
				break;
			case 0x1FAB1:
				strcpy_s(buf, buf_size, "WORM");
				break;
			case 0x1FAB2:
				strcpy_s(buf, buf_size, "BEETLE");
				break;
			case 0x1FAB3:
				strcpy_s(buf, buf_size, "COCKROACH");
				break;
			case 0x1FAB4:
				strcpy_s(buf, buf_size, "POTTED PLANT");
				break;
			case 0x1FAB5:
				strcpy_s(buf, buf_size, "WOOD");
				break;
			case 0x1FAB6:
				strcpy_s(buf, buf_size, "FEATHER");
				break;
			case 0x1FAC0:
				strcpy_s(buf, buf_size, "ANATOMICAL HEART");
				break;
			case 0x1FAC1:
				strcpy_s(buf, buf_size, "LUNGS");
				break;
			case 0x1FAC2:
				strcpy_s(buf, buf_size, "PEOPLE HUGGING");
				break;
			case 0x1FAD0:
				strcpy_s(buf, buf_size, "BLUEBERRIES");
				break;
			case 0x1FAD1:
				strcpy_s(buf, buf_size, "BELL PEPPER");
				break;
			case 0x1FAD2:
				strcpy_s(buf, buf_size, "OLIVE");
				break;
			case 0x1FAD3:
				strcpy_s(buf, buf_size, "FLATBREAD");
				break;
			case 0x1FAD4:
				strcpy_s(buf, buf_size, "TAMALE");
				break;
			case 0x1FAD5:
				strcpy_s(buf, buf_size, "FONDUE");
				break;
			case 0x1FAD6:
				strcpy_s(buf, buf_size, "TEAPOT");
				break;
			case 0x1FB00:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1");
				break;
			case 0x1FB01:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-2");
				break;
			case 0x1FB02:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-12");
				break;
			case 0x1FB03:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-3");
				break;
			case 0x1FB04:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-13");
				break;
			case 0x1FB05:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-23");
				break;
			case 0x1FB06:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-123");
				break;
			case 0x1FB07:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-4");
				break;
			case 0x1FB08:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-14");
				break;
			case 0x1FB09:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-24");
				break;
			case 0x1FB0A:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-124");
				break;
			case 0x1FB0B:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-34");
				break;
			case 0x1FB0C:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-134");
				break;
			case 0x1FB0D:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-234");
				break;
			case 0x1FB0E:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1234");
				break;
			case 0x1FB0F:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-5");
				break;
			case 0x1FB10:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-15");
				break;
			case 0x1FB11:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-25");
				break;
			case 0x1FB12:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-125");
				break;
			case 0x1FB13:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-35");
				break;
			case 0x1FB14:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-235");
				break;
			case 0x1FB15:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1235");
				break;
			case 0x1FB16:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-45");
				break;
			case 0x1FB17:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-145");
				break;
			case 0x1FB18:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-245");
				break;
			case 0x1FB19:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1245");
				break;
			case 0x1FB1A:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-345");
				break;
			case 0x1FB1B:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1345");
				break;
			case 0x1FB1C:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-2345");
				break;
			case 0x1FB1D:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-12345");
				break;
			case 0x1FB1E:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-6");
				break;
			case 0x1FB1F:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-16");
				break;
			case 0x1FB20:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-26");
				break;
			case 0x1FB21:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-126");
				break;
			case 0x1FB22:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-36");
				break;
			case 0x1FB23:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-136");
				break;
			case 0x1FB24:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-236");
				break;
			case 0x1FB25:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1236");
				break;
			case 0x1FB26:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-46");
				break;
			case 0x1FB27:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-146");
				break;
			case 0x1FB28:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1246");
				break;
			case 0x1FB29:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-346");
				break;
			case 0x1FB2A:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1346");
				break;
			case 0x1FB2B:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-2346");
				break;
			case 0x1FB2C:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-12346");
				break;
			case 0x1FB2D:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-56");
				break;
			case 0x1FB2E:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-156");
				break;
			case 0x1FB2F:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-256");
				break;
			case 0x1FB30:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1256");
				break;
			case 0x1FB31:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-356");
				break;
			case 0x1FB32:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1356");
				break;
			case 0x1FB33:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-2356");
				break;
			case 0x1FB34:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-12356");
				break;
			case 0x1FB35:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-456");
				break;
			case 0x1FB36:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-1456");
				break;
			case 0x1FB37:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-2456");
				break;
			case 0x1FB38:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-12456");
				break;
			case 0x1FB39:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-3456");
				break;
			case 0x1FB3A:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-13456");
				break;
			case 0x1FB3B:
				strcpy_s(buf, buf_size, "BLOCK SEXTANT-23456");
				break;
			case 0x1FB3C:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL LOWER MIDDLE LEFT TO LOWER CENTRE");
				break;
			case 0x1FB3D:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL LOWER MIDDLE LEFT TO LOWER RIGHT");
				break;
			case 0x1FB3E:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER CENTRE");
				break;
			case 0x1FB3F:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER RIGHT");
				break;
			case 0x1FB40:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL UPPER LEFT TO LOWER CENTRE");
				break;
			case 0x1FB41:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL UPPER MIDDLE LEFT TO UPPER CENTRE");
				break;
			case 0x1FB42:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL UPPER MIDDLE LEFT TO UPPER RIGHT");
				break;
			case 0x1FB43:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER CENTRE");
				break;
			case 0x1FB44:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER RIGHT");
				break;
			case 0x1FB45:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL LOWER LEFT TO UPPER CENTRE");
				break;
			case 0x1FB46:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER MIDDLE RIGHT");
				break;
			case 0x1FB47:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL LOWER CENTRE TO LOWER MIDDLE RIGHT");
				break;
			case 0x1FB48:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL LOWER LEFT TO LOWER MIDDLE RIGHT");
				break;
			case 0x1FB49:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL LOWER CENTRE TO UPPER MIDDLE RIGHT");
				break;
			case 0x1FB4A:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL LOWER LEFT TO UPPER MIDDLE RIGHT");
				break;
			case 0x1FB4B:
				strcpy_s(buf, buf_size, "LOWER RIGHT BLOCK DIAGONAL LOWER CENTRE TO UPPER RIGHT");
				break;
			case 0x1FB4C:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL UPPER CENTRE TO UPPER MIDDLE RIGHT");
				break;
			case 0x1FB4D:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL UPPER LEFT TO UPPER MIDDLE RIGHT");
				break;
			case 0x1FB4E:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL UPPER CENTRE TO LOWER MIDDLE RIGHT");
				break;
			case 0x1FB4F:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL UPPER LEFT TO LOWER MIDDLE RIGHT");
				break;
			case 0x1FB50:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL UPPER CENTRE TO LOWER RIGHT");
				break;
			case 0x1FB51:
				strcpy_s(buf, buf_size, "LOWER LEFT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER MIDDLE RIGHT");
				break;
			case 0x1FB52:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL LOWER MIDDLE LEFT TO LOWER CENTRE");
				break;
			case 0x1FB53:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL LOWER MIDDLE LEFT TO LOWER RIGHT");
				break;
			case 0x1FB54:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER CENTRE");
				break;
			case 0x1FB55:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER RIGHT");
				break;
			case 0x1FB56:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL UPPER LEFT TO LOWER CENTRE");
				break;
			case 0x1FB57:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL UPPER MIDDLE LEFT TO UPPER CENTRE");
				break;
			case 0x1FB58:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL UPPER MIDDLE LEFT TO UPPER RIGHT");
				break;
			case 0x1FB59:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER CENTRE");
				break;
			case 0x1FB5A:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER RIGHT");
				break;
			case 0x1FB5B:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL LOWER LEFT TO UPPER CENTRE");
				break;
			case 0x1FB5C:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL LOWER MIDDLE LEFT TO UPPER MIDDLE RIGHT");
				break;
			case 0x1FB5D:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL LOWER CENTRE TO LOWER MIDDLE RIGHT");
				break;
			case 0x1FB5E:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL LOWER LEFT TO LOWER MIDDLE RIGHT");
				break;
			case 0x1FB5F:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL LOWER CENTRE TO UPPER MIDDLE RIGHT");
				break;
			case 0x1FB60:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL LOWER LEFT TO UPPER MIDDLE RIGHT");
				break;
			case 0x1FB61:
				strcpy_s(buf, buf_size, "UPPER LEFT BLOCK DIAGONAL LOWER CENTRE TO UPPER RIGHT");
				break;
			case 0x1FB62:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL UPPER CENTRE TO UPPER MIDDLE RIGHT");
				break;
			case 0x1FB63:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL UPPER LEFT TO UPPER MIDDLE RIGHT");
				break;
			case 0x1FB64:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL UPPER CENTRE TO LOWER MIDDLE RIGHT");
				break;
			case 0x1FB65:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL UPPER LEFT TO LOWER MIDDLE RIGHT");
				break;
			case 0x1FB66:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL UPPER CENTRE TO LOWER RIGHT");
				break;
			case 0x1FB67:
				strcpy_s(buf, buf_size, "UPPER RIGHT BLOCK DIAGONAL UPPER MIDDLE LEFT TO LOWER MIDDLE RIGHT");
				break;
			case 0x1FB68:
				strcpy_s(buf, buf_size, "UPPER AND RIGHT AND LOWER TRIANGULAR THREE QUARTERS BLOCK");
				break;
			case 0x1FB69:
				strcpy_s(buf, buf_size, "LEFT AND LOWER AND RIGHT TRIANGULAR THREE QUARTERS BLOCK");
				break;
			case 0x1FB6A:
				strcpy_s(buf, buf_size, "UPPER AND LEFT AND LOWER TRIANGULAR THREE QUARTERS BLOCK");
				break;
			case 0x1FB6B:
				strcpy_s(buf, buf_size, "LEFT AND UPPER AND RIGHT TRIANGULAR THREE QUARTERS BLOCK");
				break;
			case 0x1FB6C:
				strcpy_s(buf, buf_size, "LEFT TRIANGULAR ONE QUARTER BLOCK");
				break;
			case 0x1FB6D:
				strcpy_s(buf, buf_size, "UPPER TRIANGULAR ONE QUARTER BLOCK");
				break;
			case 0x1FB6E:
				strcpy_s(buf, buf_size, "RIGHT TRIANGULAR ONE QUARTER BLOCK");
				break;
			case 0x1FB6F:
				strcpy_s(buf, buf_size, "LOWER TRIANGULAR ONE QUARTER BLOCK");
				break;
			case 0x1FB70:
				strcpy_s(buf, buf_size, "VERTICAL ONE EIGHTH BLOCK-2");
				break;
			case 0x1FB71:
				strcpy_s(buf, buf_size, "VERTICAL ONE EIGHTH BLOCK-3");
				break;
			case 0x1FB72:
				strcpy_s(buf, buf_size, "VERTICAL ONE EIGHTH BLOCK-4");
				break;
			case 0x1FB73:
				strcpy_s(buf, buf_size, "VERTICAL ONE EIGHTH BLOCK-5");
				break;
			case 0x1FB74:
				strcpy_s(buf, buf_size, "VERTICAL ONE EIGHTH BLOCK-6");
				break;
			case 0x1FB75:
				strcpy_s(buf, buf_size, "VERTICAL ONE EIGHTH BLOCK-7");
				break;
			case 0x1FB76:
				strcpy_s(buf, buf_size, "HORIZONTAL ONE EIGHTH BLOCK-2");
				break;
			case 0x1FB77:
				strcpy_s(buf, buf_size, "HORIZONTAL ONE EIGHTH BLOCK-3");
				break;
			case 0x1FB78:
				strcpy_s(buf, buf_size, "HORIZONTAL ONE EIGHTH BLOCK-4");
				break;
			case 0x1FB79:
				strcpy_s(buf, buf_size, "HORIZONTAL ONE EIGHTH BLOCK-5");
				break;
			case 0x1FB7A:
				strcpy_s(buf, buf_size, "HORIZONTAL ONE EIGHTH BLOCK-6");
				break;
			case 0x1FB7B:
				strcpy_s(buf, buf_size, "HORIZONTAL ONE EIGHTH BLOCK-7");
				break;
			case 0x1FB7C:
				strcpy_s(buf, buf_size, "LEFT AND LOWER ONE EIGHTH BLOCK");
				break;
			case 0x1FB7D:
				strcpy_s(buf, buf_size, "LEFT AND UPPER ONE EIGHTH BLOCK");
				break;
			case 0x1FB7E:
				strcpy_s(buf, buf_size, "RIGHT AND UPPER ONE EIGHTH BLOCK");
				break;
			case 0x1FB7F:
				strcpy_s(buf, buf_size, "RIGHT AND LOWER ONE EIGHTH BLOCK");
				break;
			case 0x1FB80:
				strcpy_s(buf, buf_size, "UPPER AND LOWER ONE EIGHTH BLOCK");
				break;
			case 0x1FB81:
				strcpy_s(buf, buf_size, "HORIZONTAL ONE EIGHTH BLOCK-1358");
				break;
			case 0x1FB82:
				strcpy_s(buf, buf_size, "UPPER ONE QUARTER BLOCK");
				break;
			case 0x1FB83:
				strcpy_s(buf, buf_size, "UPPER THREE EIGHTHS BLOCK");
				break;
			case 0x1FB84:
				strcpy_s(buf, buf_size, "UPPER FIVE EIGHTHS BLOCK");
				break;
			case 0x1FB85:
				strcpy_s(buf, buf_size, "UPPER THREE QUARTERS BLOCK");
				break;
			case 0x1FB86:
				strcpy_s(buf, buf_size, "UPPER SEVEN EIGHTHS BLOCK");
				break;
			case 0x1FB87:
				strcpy_s(buf, buf_size, "RIGHT ONE QUARTER BLOCK");
				break;
			case 0x1FB88:
				strcpy_s(buf, buf_size, "RIGHT THREE EIGHTHS BLOCK");
				break;
			case 0x1FB89:
				strcpy_s(buf, buf_size, "RIGHT FIVE EIGHTHS BLOCK");
				break;
			case 0x1FB8A:
				strcpy_s(buf, buf_size, "RIGHT THREE QUARTERS BLOCK");
				break;
			case 0x1FB8B:
				strcpy_s(buf, buf_size, "RIGHT SEVEN EIGHTHS BLOCK");
				break;
			case 0x1FB8C:
				strcpy_s(buf, buf_size, "LEFT HALF MEDIUM SHADE");
				break;
			case 0x1FB8D:
				strcpy_s(buf, buf_size, "RIGHT HALF MEDIUM SHADE");
				break;
			case 0x1FB8E:
				strcpy_s(buf, buf_size, "UPPER HALF MEDIUM SHADE");
				break;
			case 0x1FB8F:
				strcpy_s(buf, buf_size, "LOWER HALF MEDIUM SHADE");
				break;
			case 0x1FB90:
				strcpy_s(buf, buf_size, "INVERSE MEDIUM SHADE");
				break;
			case 0x1FB91:
				strcpy_s(buf, buf_size, "UPPER HALF BLOCK AND LOWER HALF INVERSE MEDIUM SHADE");
				break;
			case 0x1FB92:
				strcpy_s(buf, buf_size, "UPPER HALF INVERSE MEDIUM SHADE AND LOWER HALF BLOCK");
				break;
			case 0x1FB94:
				strcpy_s(buf, buf_size, "LEFT HALF INVERSE MEDIUM SHADE AND RIGHT HALF BLOCK");
				break;
			case 0x1FB95:
				strcpy_s(buf, buf_size, "CHECKER BOARD FILL");
				break;
			case 0x1FB96:
				strcpy_s(buf, buf_size, "INVERSE CHECKER BOARD FILL");
				break;
			case 0x1FB97:
				strcpy_s(buf, buf_size, "HEAVY HORIZONTAL FILL");
				break;
			case 0x1FB98:
				strcpy_s(buf, buf_size, "UPPER LEFT TO LOWER RIGHT FILL");
				break;
			case 0x1FB99:
				strcpy_s(buf, buf_size, "UPPER RIGHT TO LOWER LEFT FILL");
				break;
			case 0x1FB9A:
				strcpy_s(buf, buf_size, "UPPER AND LOWER TRIANGULAR HALF BLOCK");
				break;
			case 0x1FB9B:
				strcpy_s(buf, buf_size, "LEFT AND RIGHT TRIANGULAR HALF BLOCK");
				break;
			case 0x1FB9C:
				strcpy_s(buf, buf_size, "UPPER LEFT TRIANGULAR MEDIUM SHADE");
				break;
			case 0x1FB9D:
				strcpy_s(buf, buf_size, "UPPER RIGHT TRIANGULAR MEDIUM SHADE");
				break;
			case 0x1FB9E:
				strcpy_s(buf, buf_size, "LOWER RIGHT TRIANGULAR MEDIUM SHADE");
				break;
			case 0x1FB9F:
				strcpy_s(buf, buf_size, "LOWER LEFT TRIANGULAR MEDIUM SHADE");
				break;
			case 0x1FBA0:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE LEFT");
				break;
			case 0x1FBA1:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE RIGHT");
				break;
			case 0x1FBA2:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL MIDDLE LEFT TO LOWER CENTRE");
				break;
			case 0x1FBA3:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL MIDDLE RIGHT TO LOWER CENTRE");
				break;
			case 0x1FBA4:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE LEFT TO LOWER CENTRE");
				break;
			case 0x1FBA5:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE RIGHT TO LOWER CENTRE");
				break;
			case 0x1FBA6:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL MIDDLE LEFT TO LOWER CENTRE TO MIDDLE RIGHT");
				break;
			case 0x1FBA7:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL MIDDLE LEFT TO UPPER CENTRE TO MIDDLE RIGHT");
				break;
			case 0x1FBA8:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE LEFT AND MIDDLE RIGHT TO LOWER CENTRE");
				break;
			case 0x1FBA9:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE RIGHT AND MIDDLE LEFT TO LOWER CENTRE");
				break;
			case 0x1FBAA:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE RIGHT TO LOWER CENTRE TO MIDDLE LEFT");
				break;
			case 0x1FBAB:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL UPPER CENTRE TO MIDDLE LEFT TO LOWER CENTRE TO MIDDLE RIGHT");
				break;
			case 0x1FBAC:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL MIDDLE LEFT TO UPPER CENTRE TO MIDDLE RIGHT TO LOWER CENTRE");
				break;
			case 0x1FBAD:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL MIDDLE RIGHT TO UPPER CENTRE TO MIDDLE LEFT TO LOWER CENTRE");
				break;
			case 0x1FBAE:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT DIAGONAL DIAMOND");
				break;
			case 0x1FBAF:
				strcpy_s(buf, buf_size, "BOX DRAWINGS LIGHT HORIZONTAL WITH VERTICAL STROKE");
				break;
			case 0x1FBB0:
				strcpy_s(buf, buf_size, "ARROWHEAD-SHAPED POINTER");
				break;
			case 0x1FBB1:
				strcpy_s(buf, buf_size, "INVERSE CHECK MARK");
				break;
			case 0x1FBB2:
				strcpy_s(buf, buf_size, "LEFT HALF RUNNING MAN");
				break;
			case 0x1FBB3:
				strcpy_s(buf, buf_size, "RIGHT HALF RUNNING MAN");
				break;
			case 0x1FBB4:
				strcpy_s(buf, buf_size, "INVERSE DOWNWARDS ARROW WITH TIP LEFTWARDS");
				break;
			case 0x1FBB5:
				strcpy_s(buf, buf_size, "LEFTWARDS ARROW AND UPPER AND LOWER ONE EIGHTH BLOCK");
				break;
			case 0x1FBB6:
				strcpy_s(buf, buf_size, "RIGHTWARDS ARROW AND UPPER AND LOWER ONE EIGHTH BLOCK");
				break;
			case 0x1FBB7:
				strcpy_s(buf, buf_size, "DOWNWARDS ARROW AND RIGHT ONE EIGHTH BLOCK");
				break;
			case 0x1FBB8:
				strcpy_s(buf, buf_size, "UPWARDS ARROW AND RIGHT ONE EIGHTH BLOCK");
				break;
			case 0x1FBB9:
				strcpy_s(buf, buf_size, "LEFT HALF FOLDER");
				break;
			case 0x1FBBA:
				strcpy_s(buf, buf_size, "RIGHT HALF FOLDER");
				break;
			case 0x1FBBB:
				strcpy_s(buf, buf_size, "VOIDED GREEK CROSS");
				break;
			case 0x1FBBC:
				strcpy_s(buf, buf_size, "RIGHT OPEN SQUARED DOT");
				break;
			case 0x1FBBD:
				strcpy_s(buf, buf_size, "NEGATIVE DIAGONAL CROSS");
				break;
			case 0x1FBBE:
				strcpy_s(buf, buf_size, "NEGATIVE DIAGONAL MIDDLE RIGHT TO LOWER CENTRE");
				break;
			case 0x1FBBF:
				strcpy_s(buf, buf_size, "NEGATIVE DIAGONAL DIAMOND");
				break;
			case 0x1FBC0:
				strcpy_s(buf, buf_size, "WHITE HEAVY SALTIRE WITH ROUNDED CORNERS");
				break;
			case 0x1FBC1:
				strcpy_s(buf, buf_size, "LEFT THIRD WHITE RIGHT POINTING INDEX");
				break;
			case 0x1FBC2:
				strcpy_s(buf, buf_size, "MIDDLE THIRD WHITE RIGHT POINTING INDEX");
				break;
			case 0x1FBC3:
				strcpy_s(buf, buf_size, "RIGHT THIRD WHITE RIGHT POINTING INDEX");
				break;
			case 0x1FBC4:
				strcpy_s(buf, buf_size, "NEGATIVE SQUARED QUESTION MARK");
				break;
			case 0x1FBC5:
				strcpy_s(buf, buf_size, "STICK FIGURE");
				break;
			case 0x1FBC6:
				strcpy_s(buf, buf_size, "STICK FIGURE WITH ARMS RAISED");
				break;
			case 0x1FBC7:
				strcpy_s(buf, buf_size, "STICK FIGURE LEANING LEFT");
				break;
			case 0x1FBC8:
				strcpy_s(buf, buf_size, "STICK FIGURE LEANING RIGHT");
				break;
			case 0x1FBC9:
				strcpy_s(buf, buf_size, "STICK FIGURE WITH DRESS");
				break;
			case 0x1FBCA:
				strcpy_s(buf, buf_size, "WHITE UP-POINTING CHEVRON");
				break;
			case 0x1FBF0:
				strcpy_s(buf, buf_size, "SEGMENTED DIGIT ZERO");
				break;
			case 0x1FBF1:
				strcpy_s(buf, buf_size, "SEGMENTED DIGIT ONE");
				break;
			case 0x1FBF2:
				strcpy_s(buf, buf_size, "SEGMENTED DIGIT TWO");
				break;
			case 0x1FBF3:
				strcpy_s(buf, buf_size, "SEGMENTED DIGIT THREE");
				break;
			case 0x1FBF4:
				strcpy_s(buf, buf_size, "SEGMENTED DIGIT FOUR");
				break;
			case 0x1FBF5:
				strcpy_s(buf, buf_size, "SEGMENTED DIGIT FIVE");
				break;
			case 0x1FBF6:
				strcpy_s(buf, buf_size, "SEGMENTED DIGIT SIX");
				break;
			case 0x1FBF7:
				strcpy_s(buf, buf_size, "SEGMENTED DIGIT SEVEN");
				break;
			case 0x1FBF8:
				strcpy_s(buf, buf_size, "SEGMENTED DIGIT EIGHT");
				break;
			case 0x1FBF9:
				strcpy_s(buf, buf_size, "SEGMENTED DIGIT NINE");
				break;
			case 0x20000:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension B, First>");
				break;
			case 0x2A6DD:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension B, Last>");
				break;
			case 0x2A700:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension C, First>");
				break;
			case 0x2B734:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension C, Last>");
				break;
			case 0x2B740:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension D, First>");
				break;
			case 0x2B81D:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension D, Last>");
				break;
			case 0x2B820:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension E, First>");
				break;
			case 0x2CEA1:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension E, Last>");
				break;
			case 0x2CEB0:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension F, First>");
				break;
			case 0x2EBE0:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension F, Last>");
				break;
			case 0x2F800:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F800");
				break;
			case 0x2F801:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F801");
				break;
			case 0x2F802:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F802");
				break;
			case 0x2F803:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F803");
				break;
			case 0x2F804:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F804");
				break;
			case 0x2F805:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F805");
				break;
			case 0x2F806:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F806");
				break;
			case 0x2F807:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F807");
				break;
			case 0x2F808:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F808");
				break;
			case 0x2F809:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F809");
				break;
			case 0x2F80A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F80A");
				break;
			case 0x2F80B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F80B");
				break;
			case 0x2F80C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F80C");
				break;
			case 0x2F80D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F80D");
				break;
			case 0x2F80E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F80E");
				break;
			case 0x2F80F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F80F");
				break;
			case 0x2F810:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F810");
				break;
			case 0x2F811:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F811");
				break;
			case 0x2F812:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F812");
				break;
			case 0x2F813:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F813");
				break;
			case 0x2F814:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F814");
				break;
			case 0x2F815:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F815");
				break;
			case 0x2F816:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F816");
				break;
			case 0x2F817:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F817");
				break;
			case 0x2F818:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F818");
				break;
			case 0x2F819:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F819");
				break;
			case 0x2F81A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F81A");
				break;
			case 0x2F81B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F81B");
				break;
			case 0x2F81C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F81C");
				break;
			case 0x2F81D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F81D");
				break;
			case 0x2F81E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F81E");
				break;
			case 0x2F81F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F81F");
				break;
			case 0x2F820:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F820");
				break;
			case 0x2F821:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F821");
				break;
			case 0x2F822:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F822");
				break;
			case 0x2F823:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F823");
				break;
			case 0x2F824:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F824");
				break;
			case 0x2F825:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F825");
				break;
			case 0x2F826:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F826");
				break;
			case 0x2F827:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F827");
				break;
			case 0x2F828:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F828");
				break;
			case 0x2F829:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F829");
				break;
			case 0x2F82A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F82A");
				break;
			case 0x2F82B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F82B");
				break;
			case 0x2F82C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F82C");
				break;
			case 0x2F82D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F82D");
				break;
			case 0x2F82E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F82E");
				break;
			case 0x2F82F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F82F");
				break;
			case 0x2F830:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F830");
				break;
			case 0x2F831:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F831");
				break;
			case 0x2F832:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F832");
				break;
			case 0x2F833:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F833");
				break;
			case 0x2F834:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F834");
				break;
			case 0x2F835:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F835");
				break;
			case 0x2F836:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F836");
				break;
			case 0x2F837:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F837");
				break;
			case 0x2F838:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F838");
				break;
			case 0x2F839:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F839");
				break;
			case 0x2F83A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F83A");
				break;
			case 0x2F83B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F83B");
				break;
			case 0x2F83C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F83C");
				break;
			case 0x2F83D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F83D");
				break;
			case 0x2F83E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F83E");
				break;
			case 0x2F83F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F83F");
				break;
			case 0x2F840:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F840");
				break;
			case 0x2F841:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F841");
				break;
			case 0x2F842:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F842");
				break;
			case 0x2F843:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F843");
				break;
			case 0x2F844:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F844");
				break;
			case 0x2F845:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F845");
				break;
			case 0x2F846:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F846");
				break;
			case 0x2F847:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F847");
				break;
			case 0x2F848:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F848");
				break;
			case 0x2F849:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F849");
				break;
			case 0x2F84A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F84A");
				break;
			case 0x2F84B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F84B");
				break;
			case 0x2F84C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F84C");
				break;
			case 0x2F84D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F84D");
				break;
			case 0x2F84E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F84E");
				break;
			case 0x2F84F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F84F");
				break;
			case 0x2F850:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F850");
				break;
			case 0x2F851:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F851");
				break;
			case 0x2F852:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F852");
				break;
			case 0x2F853:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F853");
				break;
			case 0x2F854:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F854");
				break;
			case 0x2F855:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F855");
				break;
			case 0x2F856:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F856");
				break;
			case 0x2F857:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F857");
				break;
			case 0x2F858:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F858");
				break;
			case 0x2F859:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F859");
				break;
			case 0x2F85A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F85A");
				break;
			case 0x2F85B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F85B");
				break;
			case 0x2F85C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F85C");
				break;
			case 0x2F85D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F85D");
				break;
			case 0x2F85E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F85E");
				break;
			case 0x2F85F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F85F");
				break;
			case 0x2F860:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F860");
				break;
			case 0x2F861:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F861");
				break;
			case 0x2F862:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F862");
				break;
			case 0x2F863:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F863");
				break;
			case 0x2F864:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F864");
				break;
			case 0x2F865:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F865");
				break;
			case 0x2F866:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F866");
				break;
			case 0x2F867:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F867");
				break;
			case 0x2F868:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F868");
				break;
			case 0x2F869:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F869");
				break;
			case 0x2F86A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F86A");
				break;
			case 0x2F86B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F86B");
				break;
			case 0x2F86C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F86C");
				break;
			case 0x2F86D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F86D");
				break;
			case 0x2F86E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F86E");
				break;
			case 0x2F86F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F86F");
				break;
			case 0x2F870:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F870");
				break;
			case 0x2F871:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F871");
				break;
			case 0x2F872:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F872");
				break;
			case 0x2F873:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F873");
				break;
			case 0x2F874:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F874");
				break;
			case 0x2F875:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F875");
				break;
			case 0x2F876:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F876");
				break;
			case 0x2F877:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F877");
				break;
			case 0x2F878:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F878");
				break;
			case 0x2F879:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F879");
				break;
			case 0x2F87A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F87A");
				break;
			case 0x2F87B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F87B");
				break;
			case 0x2F87C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F87C");
				break;
			case 0x2F87D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F87D");
				break;
			case 0x2F87E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F87E");
				break;
			case 0x2F87F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F87F");
				break;
			case 0x2F880:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F880");
				break;
			case 0x2F881:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F881");
				break;
			case 0x2F882:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F882");
				break;
			case 0x2F883:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F883");
				break;
			case 0x2F884:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F884");
				break;
			case 0x2F885:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F885");
				break;
			case 0x2F886:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F886");
				break;
			case 0x2F887:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F887");
				break;
			case 0x2F888:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F888");
				break;
			case 0x2F889:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F889");
				break;
			case 0x2F88A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F88A");
				break;
			case 0x2F88B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F88B");
				break;
			case 0x2F88C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F88C");
				break;
			case 0x2F88D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F88D");
				break;
			case 0x2F88E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F88E");
				break;
			case 0x2F88F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F88F");
				break;
			case 0x2F890:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F890");
				break;
			case 0x2F891:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F891");
				break;
			case 0x2F892:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F892");
				break;
			case 0x2F893:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F893");
				break;
			case 0x2F894:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F894");
				break;
			case 0x2F895:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F895");
				break;
			case 0x2F896:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F896");
				break;
			case 0x2F897:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F897");
				break;
			case 0x2F898:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F898");
				break;
			case 0x2F899:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F899");
				break;
			case 0x2F89A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F89A");
				break;
			case 0x2F89B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F89B");
				break;
			case 0x2F89C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F89C");
				break;
			case 0x2F89D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F89D");
				break;
			case 0x2F89E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F89E");
				break;
			case 0x2F89F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F89F");
				break;
			case 0x2F8A0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8A0");
				break;
			case 0x2F8A1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8A1");
				break;
			case 0x2F8A2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8A2");
				break;
			case 0x2F8A3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8A3");
				break;
			case 0x2F8A4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8A4");
				break;
			case 0x2F8A5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8A5");
				break;
			case 0x2F8A6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8A6");
				break;
			case 0x2F8A7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8A7");
				break;
			case 0x2F8A8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8A8");
				break;
			case 0x2F8A9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8A9");
				break;
			case 0x2F8AA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8AA");
				break;
			case 0x2F8AB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8AB");
				break;
			case 0x2F8AC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8AC");
				break;
			case 0x2F8AD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8AD");
				break;
			case 0x2F8AE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8AE");
				break;
			case 0x2F8AF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8AF");
				break;
			case 0x2F8B0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8B0");
				break;
			case 0x2F8B1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8B1");
				break;
			case 0x2F8B2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8B2");
				break;
			case 0x2F8B3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8B3");
				break;
			case 0x2F8B4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8B4");
				break;
			case 0x2F8B5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8B5");
				break;
			case 0x2F8B6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8B6");
				break;
			case 0x2F8B7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8B7");
				break;
			case 0x2F8B8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8B8");
				break;
			case 0x2F8B9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8B9");
				break;
			case 0x2F8BA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8BA");
				break;
			case 0x2F8BB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8BB");
				break;
			case 0x2F8BC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8BC");
				break;
			case 0x2F8BD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8BD");
				break;
			case 0x2F8BE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8BE");
				break;
			case 0x2F8BF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8BF");
				break;
			case 0x2F8C0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8C0");
				break;
			case 0x2F8C1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8C1");
				break;
			case 0x2F8C2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8C2");
				break;
			case 0x2F8C3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8C3");
				break;
			case 0x2F8C4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8C4");
				break;
			case 0x2F8C5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8C5");
				break;
			case 0x2F8C6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8C6");
				break;
			case 0x2F8C7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8C7");
				break;
			case 0x2F8C8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8C8");
				break;
			case 0x2F8C9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8C9");
				break;
			case 0x2F8CA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8CA");
				break;
			case 0x2F8CB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8CB");
				break;
			case 0x2F8CC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8CC");
				break;
			case 0x2F8CD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8CD");
				break;
			case 0x2F8CE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8CE");
				break;
			case 0x2F8CF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8CF");
				break;
			case 0x2F8D0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8D0");
				break;
			case 0x2F8D1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8D1");
				break;
			case 0x2F8D2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8D2");
				break;
			case 0x2F8D3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8D3");
				break;
			case 0x2F8D4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8D4");
				break;
			case 0x2F8D5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8D5");
				break;
			case 0x2F8D6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8D6");
				break;
			case 0x2F8D7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8D7");
				break;
			case 0x2F8D8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8D8");
				break;
			case 0x2F8D9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8D9");
				break;
			case 0x2F8DA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8DA");
				break;
			case 0x2F8DB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8DB");
				break;
			case 0x2F8DC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8DC");
				break;
			case 0x2F8DD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8DD");
				break;
			case 0x2F8DE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8DE");
				break;
			case 0x2F8DF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8DF");
				break;
			case 0x2F8E0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8E0");
				break;
			case 0x2F8E1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8E1");
				break;
			case 0x2F8E2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8E2");
				break;
			case 0x2F8E3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8E3");
				break;
			case 0x2F8E4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8E4");
				break;
			case 0x2F8E5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8E5");
				break;
			case 0x2F8E6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8E6");
				break;
			case 0x2F8E7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8E7");
				break;
			case 0x2F8E8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8E8");
				break;
			case 0x2F8E9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8E9");
				break;
			case 0x2F8EA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8EA");
				break;
			case 0x2F8EB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8EB");
				break;
			case 0x2F8EC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8EC");
				break;
			case 0x2F8ED:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8ED");
				break;
			case 0x2F8EE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8EE");
				break;
			case 0x2F8EF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8EF");
				break;
			case 0x2F8F0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8F0");
				break;
			case 0x2F8F1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8F1");
				break;
			case 0x2F8F2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8F2");
				break;
			case 0x2F8F3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8F3");
				break;
			case 0x2F8F4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8F4");
				break;
			case 0x2F8F5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8F5");
				break;
			case 0x2F8F6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8F6");
				break;
			case 0x2F8F7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8F7");
				break;
			case 0x2F8F8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8F8");
				break;
			case 0x2F8F9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8F9");
				break;
			case 0x2F8FA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8FA");
				break;
			case 0x2F8FB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8FB");
				break;
			case 0x2F8FC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8FC");
				break;
			case 0x2F8FD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8FD");
				break;
			case 0x2F8FE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8FE");
				break;
			case 0x2F8FF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F8FF");
				break;
			case 0x2F900:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F900");
				break;
			case 0x2F901:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F901");
				break;
			case 0x2F902:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F902");
				break;
			case 0x2F903:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F903");
				break;
			case 0x2F904:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F904");
				break;
			case 0x2F905:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F905");
				break;
			case 0x2F906:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F906");
				break;
			case 0x2F907:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F907");
				break;
			case 0x2F908:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F908");
				break;
			case 0x2F909:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F909");
				break;
			case 0x2F90A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F90A");
				break;
			case 0x2F90B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F90B");
				break;
			case 0x2F90C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F90C");
				break;
			case 0x2F90D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F90D");
				break;
			case 0x2F90E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F90E");
				break;
			case 0x2F90F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F90F");
				break;
			case 0x2F910:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F910");
				break;
			case 0x2F911:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F911");
				break;
			case 0x2F912:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F912");
				break;
			case 0x2F913:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F913");
				break;
			case 0x2F914:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F914");
				break;
			case 0x2F915:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F915");
				break;
			case 0x2F916:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F916");
				break;
			case 0x2F917:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F917");
				break;
			case 0x2F918:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F918");
				break;
			case 0x2F919:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F919");
				break;
			case 0x2F91A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F91A");
				break;
			case 0x2F91B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F91B");
				break;
			case 0x2F91C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F91C");
				break;
			case 0x2F91D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F91D");
				break;
			case 0x2F91E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F91E");
				break;
			case 0x2F91F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F91F");
				break;
			case 0x2F920:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F920");
				break;
			case 0x2F921:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F921");
				break;
			case 0x2F922:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F922");
				break;
			case 0x2F923:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F923");
				break;
			case 0x2F924:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F924");
				break;
			case 0x2F925:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F925");
				break;
			case 0x2F926:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F926");
				break;
			case 0x2F927:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F927");
				break;
			case 0x2F928:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F928");
				break;
			case 0x2F929:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F929");
				break;
			case 0x2F92A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F92A");
				break;
			case 0x2F92B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F92B");
				break;
			case 0x2F92C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F92C");
				break;
			case 0x2F92D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F92D");
				break;
			case 0x2F92E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F92E");
				break;
			case 0x2F92F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F92F");
				break;
			case 0x2F930:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F930");
				break;
			case 0x2F931:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F931");
				break;
			case 0x2F932:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F932");
				break;
			case 0x2F933:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F933");
				break;
			case 0x2F934:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F934");
				break;
			case 0x2F935:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F935");
				break;
			case 0x2F936:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F936");
				break;
			case 0x2F937:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F937");
				break;
			case 0x2F938:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F938");
				break;
			case 0x2F939:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F939");
				break;
			case 0x2F93A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F93A");
				break;
			case 0x2F93B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F93B");
				break;
			case 0x2F93C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F93C");
				break;
			case 0x2F93D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F93D");
				break;
			case 0x2F93E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F93E");
				break;
			case 0x2F93F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F93F");
				break;
			case 0x2F940:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F940");
				break;
			case 0x2F941:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F941");
				break;
			case 0x2F942:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F942");
				break;
			case 0x2F943:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F943");
				break;
			case 0x2F944:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F944");
				break;
			case 0x2F945:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F945");
				break;
			case 0x2F946:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F946");
				break;
			case 0x2F947:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F947");
				break;
			case 0x2F948:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F948");
				break;
			case 0x2F949:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F949");
				break;
			case 0x2F94A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F94A");
				break;
			case 0x2F94B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F94B");
				break;
			case 0x2F94C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F94C");
				break;
			case 0x2F94D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F94D");
				break;
			case 0x2F94E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F94E");
				break;
			case 0x2F94F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F94F");
				break;
			case 0x2F950:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F950");
				break;
			case 0x2F951:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F951");
				break;
			case 0x2F952:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F952");
				break;
			case 0x2F953:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F953");
				break;
			case 0x2F954:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F954");
				break;
			case 0x2F955:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F955");
				break;
			case 0x2F956:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F956");
				break;
			case 0x2F957:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F957");
				break;
			case 0x2F958:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F958");
				break;
			case 0x2F959:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F959");
				break;
			case 0x2F95A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F95A");
				break;
			case 0x2F95B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F95B");
				break;
			case 0x2F95C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F95C");
				break;
			case 0x2F95D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F95D");
				break;
			case 0x2F95E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F95E");
				break;
			case 0x2F95F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F95F");
				break;
			case 0x2F960:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F960");
				break;
			case 0x2F961:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F961");
				break;
			case 0x2F962:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F962");
				break;
			case 0x2F963:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F963");
				break;
			case 0x2F964:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F964");
				break;
			case 0x2F965:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F965");
				break;
			case 0x2F966:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F966");
				break;
			case 0x2F967:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F967");
				break;
			case 0x2F968:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F968");
				break;
			case 0x2F969:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F969");
				break;
			case 0x2F96A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F96A");
				break;
			case 0x2F96B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F96B");
				break;
			case 0x2F96C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F96C");
				break;
			case 0x2F96D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F96D");
				break;
			case 0x2F96E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F96E");
				break;
			case 0x2F96F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F96F");
				break;
			case 0x2F970:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F970");
				break;
			case 0x2F971:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F971");
				break;
			case 0x2F972:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F972");
				break;
			case 0x2F973:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F973");
				break;
			case 0x2F974:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F974");
				break;
			case 0x2F975:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F975");
				break;
			case 0x2F976:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F976");
				break;
			case 0x2F977:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F977");
				break;
			case 0x2F978:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F978");
				break;
			case 0x2F979:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F979");
				break;
			case 0x2F97A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F97A");
				break;
			case 0x2F97B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F97B");
				break;
			case 0x2F97C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F97C");
				break;
			case 0x2F97D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F97D");
				break;
			case 0x2F97E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F97E");
				break;
			case 0x2F97F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F97F");
				break;
			case 0x2F980:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F980");
				break;
			case 0x2F981:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F981");
				break;
			case 0x2F982:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F982");
				break;
			case 0x2F983:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F983");
				break;
			case 0x2F984:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F984");
				break;
			case 0x2F985:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F985");
				break;
			case 0x2F986:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F986");
				break;
			case 0x2F987:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F987");
				break;
			case 0x2F988:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F988");
				break;
			case 0x2F989:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F989");
				break;
			case 0x2F98A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F98A");
				break;
			case 0x2F98B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F98B");
				break;
			case 0x2F98C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F98C");
				break;
			case 0x2F98D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F98D");
				break;
			case 0x2F98E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F98E");
				break;
			case 0x2F98F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F98F");
				break;
			case 0x2F990:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F990");
				break;
			case 0x2F991:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F991");
				break;
			case 0x2F992:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F992");
				break;
			case 0x2F993:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F993");
				break;
			case 0x2F994:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F994");
				break;
			case 0x2F995:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F995");
				break;
			case 0x2F996:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F996");
				break;
			case 0x2F997:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F997");
				break;
			case 0x2F998:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F998");
				break;
			case 0x2F999:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F999");
				break;
			case 0x2F99A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F99A");
				break;
			case 0x2F99B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F99B");
				break;
			case 0x2F99C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F99C");
				break;
			case 0x2F99D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F99D");
				break;
			case 0x2F99E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F99E");
				break;
			case 0x2F99F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F99F");
				break;
			case 0x2F9A0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9A0");
				break;
			case 0x2F9A1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9A1");
				break;
			case 0x2F9A2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9A2");
				break;
			case 0x2F9A3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9A3");
				break;
			case 0x2F9A4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9A4");
				break;
			case 0x2F9A5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9A5");
				break;
			case 0x2F9A6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9A6");
				break;
			case 0x2F9A7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9A7");
				break;
			case 0x2F9A8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9A8");
				break;
			case 0x2F9A9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9A9");
				break;
			case 0x2F9AA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9AA");
				break;
			case 0x2F9AB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9AB");
				break;
			case 0x2F9AC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9AC");
				break;
			case 0x2F9AD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9AD");
				break;
			case 0x2F9AE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9AE");
				break;
			case 0x2F9AF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9AF");
				break;
			case 0x2F9B0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9B0");
				break;
			case 0x2F9B1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9B1");
				break;
			case 0x2F9B2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9B2");
				break;
			case 0x2F9B3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9B3");
				break;
			case 0x2F9B4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9B4");
				break;
			case 0x2F9B5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9B5");
				break;
			case 0x2F9B6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9B6");
				break;
			case 0x2F9B7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9B7");
				break;
			case 0x2F9B8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9B8");
				break;
			case 0x2F9B9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9B9");
				break;
			case 0x2F9BA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9BA");
				break;
			case 0x2F9BB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9BB");
				break;
			case 0x2F9BC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9BC");
				break;
			case 0x2F9BD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9BD");
				break;
			case 0x2F9BE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9BE");
				break;
			case 0x2F9BF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9BF");
				break;
			case 0x2F9C0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9C0");
				break;
			case 0x2F9C1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9C1");
				break;
			case 0x2F9C2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9C2");
				break;
			case 0x2F9C3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9C3");
				break;
			case 0x2F9C4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9C4");
				break;
			case 0x2F9C5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9C5");
				break;
			case 0x2F9C6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9C6");
				break;
			case 0x2F9C7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9C7");
				break;
			case 0x2F9C8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9C8");
				break;
			case 0x2F9C9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9C9");
				break;
			case 0x2F9CA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9CA");
				break;
			case 0x2F9CB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9CB");
				break;
			case 0x2F9CC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9CC");
				break;
			case 0x2F9CD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9CD");
				break;
			case 0x2F9CE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9CE");
				break;
			case 0x2F9CF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9CF");
				break;
			case 0x2F9D0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9D0");
				break;
			case 0x2F9D1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9D1");
				break;
			case 0x2F9D2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9D2");
				break;
			case 0x2F9D3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9D3");
				break;
			case 0x2F9D4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9D4");
				break;
			case 0x2F9D5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9D5");
				break;
			case 0x2F9D6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9D6");
				break;
			case 0x2F9D7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9D7");
				break;
			case 0x2F9D8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9D8");
				break;
			case 0x2F9D9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9D9");
				break;
			case 0x2F9DA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9DA");
				break;
			case 0x2F9DB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9DB");
				break;
			case 0x2F9DC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9DC");
				break;
			case 0x2F9DD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9DD");
				break;
			case 0x2F9DE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9DE");
				break;
			case 0x2F9DF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9DF");
				break;
			case 0x2F9E0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9E0");
				break;
			case 0x2F9E1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9E1");
				break;
			case 0x2F9E2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9E2");
				break;
			case 0x2F9E3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9E3");
				break;
			case 0x2F9E4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9E4");
				break;
			case 0x2F9E5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9E5");
				break;
			case 0x2F9E6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9E6");
				break;
			case 0x2F9E7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9E7");
				break;
			case 0x2F9E8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9E8");
				break;
			case 0x2F9E9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9E9");
				break;
			case 0x2F9EA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9EA");
				break;
			case 0x2F9EB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9EB");
				break;
			case 0x2F9EC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9EC");
				break;
			case 0x2F9ED:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9ED");
				break;
			case 0x2F9EE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9EE");
				break;
			case 0x2F9EF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9EF");
				break;
			case 0x2F9F0:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9F0");
				break;
			case 0x2F9F1:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9F1");
				break;
			case 0x2F9F2:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9F2");
				break;
			case 0x2F9F3:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9F3");
				break;
			case 0x2F9F4:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9F4");
				break;
			case 0x2F9F5:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9F5");
				break;
			case 0x2F9F6:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9F6");
				break;
			case 0x2F9F7:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9F7");
				break;
			case 0x2F9F8:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9F8");
				break;
			case 0x2F9F9:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9F9");
				break;
			case 0x2F9FA:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9FA");
				break;
			case 0x2F9FB:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9FB");
				break;
			case 0x2F9FC:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9FC");
				break;
			case 0x2F9FD:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9FD");
				break;
			case 0x2F9FE:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9FE");
				break;
			case 0x2F9FF:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2F9FF");
				break;
			case 0x2FA00:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA00");
				break;
			case 0x2FA01:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA01");
				break;
			case 0x2FA02:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA02");
				break;
			case 0x2FA03:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA03");
				break;
			case 0x2FA04:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA04");
				break;
			case 0x2FA05:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA05");
				break;
			case 0x2FA06:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA06");
				break;
			case 0x2FA07:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA07");
				break;
			case 0x2FA08:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA08");
				break;
			case 0x2FA09:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA09");
				break;
			case 0x2FA0A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA0A");
				break;
			case 0x2FA0B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA0B");
				break;
			case 0x2FA0C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA0C");
				break;
			case 0x2FA0D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA0D");
				break;
			case 0x2FA0E:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA0E");
				break;
			case 0x2FA0F:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA0F");
				break;
			case 0x2FA10:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA10");
				break;
			case 0x2FA11:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA11");
				break;
			case 0x2FA12:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA12");
				break;
			case 0x2FA13:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA13");
				break;
			case 0x2FA14:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA14");
				break;
			case 0x2FA15:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA15");
				break;
			case 0x2FA16:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA16");
				break;
			case 0x2FA17:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA17");
				break;
			case 0x2FA18:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA18");
				break;
			case 0x2FA19:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA19");
				break;
			case 0x2FA1A:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA1A");
				break;
			case 0x2FA1B:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA1B");
				break;
			case 0x2FA1C:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA1C");
				break;
			case 0x2FA1D:
				strcpy_s(buf, buf_size, "CJK COMPATIBILITY IDEOGRAPH-2FA1D");
				break;
			case 0x30000:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension G, First>");
				break;
			case 0x3134A:
				strcpy_s(buf, buf_size, "<CJK Ideograph Extension G, Last>");
				break;
			case 0xE0001:
				strcpy_s(buf, buf_size, "LANGUAGE TAG");
				break;
			case 0xE0020:
				strcpy_s(buf, buf_size, "TAG SPACE");
				break;
			case 0xE0021:
				strcpy_s(buf, buf_size, "TAG EXCLAMATION MARK");
				break;
			case 0xE0022:
				strcpy_s(buf, buf_size, "TAG QUOTATION MARK");
				break;
			case 0xE0023:
				strcpy_s(buf, buf_size, "TAG NUMBER SIGN");
				break;
			case 0xE0024:
				strcpy_s(buf, buf_size, "TAG DOLLAR SIGN");
				break;
			case 0xE0025:
				strcpy_s(buf, buf_size, "TAG PERCENT SIGN");
				break;
			case 0xE0026:
				strcpy_s(buf, buf_size, "TAG AMPERSAND");
				break;
			case 0xE0027:
				strcpy_s(buf, buf_size, "TAG APOSTROPHE");
				break;
			case 0xE0028:
				strcpy_s(buf, buf_size, "TAG LEFT PARENTHESIS");
				break;
			case 0xE0029:
				strcpy_s(buf, buf_size, "TAG RIGHT PARENTHESIS");
				break;
			case 0xE002A:
				strcpy_s(buf, buf_size, "TAG ASTERISK");
				break;
			case 0xE002B:
				strcpy_s(buf, buf_size, "TAG PLUS SIGN");
				break;
			case 0xE002C:
				strcpy_s(buf, buf_size, "TAG COMMA");
				break;
			case 0xE002D:
				strcpy_s(buf, buf_size, "TAG HYPHEN-MINUS");
				break;
			case 0xE002E:
				strcpy_s(buf, buf_size, "TAG FULL STOP");
				break;
			case 0xE002F:
				strcpy_s(buf, buf_size, "TAG SOLIDUS");
				break;
			case 0xE0030:
				strcpy_s(buf, buf_size, "TAG DIGIT ZERO");
				break;
			case 0xE0031:
				strcpy_s(buf, buf_size, "TAG DIGIT ONE");
				break;
			case 0xE0032:
				strcpy_s(buf, buf_size, "TAG DIGIT TWO");
				break;
			case 0xE0033:
				strcpy_s(buf, buf_size, "TAG DIGIT THREE");
				break;
			case 0xE0034:
				strcpy_s(buf, buf_size, "TAG DIGIT FOUR");
				break;
			case 0xE0035:
				strcpy_s(buf, buf_size, "TAG DIGIT FIVE");
				break;
			case 0xE0036:
				strcpy_s(buf, buf_size, "TAG DIGIT SIX");
				break;
			case 0xE0037:
				strcpy_s(buf, buf_size, "TAG DIGIT SEVEN");
				break;
			case 0xE0038:
				strcpy_s(buf, buf_size, "TAG DIGIT EIGHT");
				break;
			case 0xE0039:
				strcpy_s(buf, buf_size, "TAG DIGIT NINE");
				break;
			case 0xE003A:
				strcpy_s(buf, buf_size, "TAG COLON");
				break;
			case 0xE003B:
				strcpy_s(buf, buf_size, "TAG SEMICOLON");
				break;
			case 0xE003C:
				strcpy_s(buf, buf_size, "TAG LESS-THAN SIGN");
				break;
			case 0xE003D:
				strcpy_s(buf, buf_size, "TAG EQUALS SIGN");
				break;
			case 0xE003E:
				strcpy_s(buf, buf_size, "TAG GREATER-THAN SIGN");
				break;
			case 0xE003F:
				strcpy_s(buf, buf_size, "TAG QUESTION MARK");
				break;
			case 0xE0040:
				strcpy_s(buf, buf_size, "TAG COMMERCIAL AT");
				break;
			case 0xE0041:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER A");
				break;
			case 0xE0042:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER B");
				break;
			case 0xE0043:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER C");
				break;
			case 0xE0044:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER D");
				break;
			case 0xE0045:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER E");
				break;
			case 0xE0046:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER F");
				break;
			case 0xE0047:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER G");
				break;
			case 0xE0048:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER H");
				break;
			case 0xE0049:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER I");
				break;
			case 0xE004A:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER J");
				break;
			case 0xE004B:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER K");
				break;
			case 0xE004C:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER L");
				break;
			case 0xE004D:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER M");
				break;
			case 0xE004E:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER N");
				break;
			case 0xE004F:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER O");
				break;
			case 0xE0050:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER P");
				break;
			case 0xE0051:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER Q");
				break;
			case 0xE0052:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER R");
				break;
			case 0xE0053:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER S");
				break;
			case 0xE0054:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER T");
				break;
			case 0xE0055:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER U");
				break;
			case 0xE0056:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER V");
				break;
			case 0xE0057:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER W");
				break;
			case 0xE0058:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER X");
				break;
			case 0xE0059:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER Y");
				break;
			case 0xE005A:
				strcpy_s(buf, buf_size, "TAG LATIN CAPITAL LETTER Z");
				break;
			case 0xE005B:
				strcpy_s(buf, buf_size, "TAG LEFT SQUARE BRACKET");
				break;
			case 0xE005C:
				strcpy_s(buf, buf_size, "TAG REVERSE SOLIDUS");
				break;
			case 0xE005D:
				strcpy_s(buf, buf_size, "TAG RIGHT SQUARE BRACKET");
				break;
			case 0xE005E:
				strcpy_s(buf, buf_size, "TAG CIRCUMFLEX ACCENT");
				break;
			case 0xE005F:
				strcpy_s(buf, buf_size, "TAG LOW LINE");
				break;
			case 0xE0060:
				strcpy_s(buf, buf_size, "TAG GRAVE ACCENT");
				break;
			case 0xE0061:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER A");
				break;
			case 0xE0062:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER B");
				break;
			case 0xE0063:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER C");
				break;
			case 0xE0064:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER D");
				break;
			case 0xE0065:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER E");
				break;
			case 0xE0066:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER F");
				break;
			case 0xE0067:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER G");
				break;
			case 0xE0068:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER H");
				break;
			case 0xE0069:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER I");
				break;
			case 0xE006A:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER J");
				break;
			case 0xE006B:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER K");
				break;
			case 0xE006C:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER L");
				break;
			case 0xE006D:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER M");
				break;
			case 0xE006E:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER N");
				break;
			case 0xE006F:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER O");
				break;
			case 0xE0070:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER P");
				break;
			case 0xE0071:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER Q");
				break;
			case 0xE0072:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER R");
				break;
			case 0xE0073:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER S");
				break;
			case 0xE0074:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER T");
				break;
			case 0xE0075:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER U");
				break;
			case 0xE0076:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER V");
				break;
			case 0xE0077:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER W");
				break;
			case 0xE0078:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER X");
				break;
			case 0xE0079:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER Y");
				break;
			case 0xE007A:
				strcpy_s(buf, buf_size, "TAG LATIN SMALL LETTER Z");
				break;
			case 0xE007B:
				strcpy_s(buf, buf_size, "TAG LEFT CURLY BRACKET");
				break;
			case 0xE007C:
				strcpy_s(buf, buf_size, "TAG VERTICAL LINE");
				break;
			case 0xE007D:
				strcpy_s(buf, buf_size, "TAG RIGHT CURLY BRACKET");
				break;
			case 0xE007E:
				strcpy_s(buf, buf_size, "TAG TILDE");
				break;
			case 0xE007F:
				strcpy_s(buf, buf_size, "CANCEL TAG");
				break;
			case 0xE0100:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-17");
				break;
			case 0xE0101:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-18");
				break;
			case 0xE0102:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-19");
				break;
			case 0xE0103:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-20");
				break;
			case 0xE0104:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-21");
				break;
			case 0xE0105:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-22");
				break;
			case 0xE0106:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-23");
				break;
			case 0xE0107:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-24");
				break;
			case 0xE0108:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-25");
				break;
			case 0xE0109:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-26");
				break;
			case 0xE010A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-27");
				break;
			case 0xE010B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-28");
				break;
			case 0xE010C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-29");
				break;
			case 0xE010D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-30");
				break;
			case 0xE010E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-31");
				break;
			case 0xE010F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-32");
				break;
			case 0xE0110:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-33");
				break;
			case 0xE0111:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-34");
				break;
			case 0xE0112:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-35");
				break;
			case 0xE0113:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-36");
				break;
			case 0xE0114:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-37");
				break;
			case 0xE0115:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-38");
				break;
			case 0xE0116:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-39");
				break;
			case 0xE0117:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-40");
				break;
			case 0xE0118:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-41");
				break;
			case 0xE0119:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-42");
				break;
			case 0xE011A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-43");
				break;
			case 0xE011B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-44");
				break;
			case 0xE011C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-45");
				break;
			case 0xE011D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-46");
				break;
			case 0xE011E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-47");
				break;
			case 0xE011F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-48");
				break;
			case 0xE0120:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-49");
				break;
			case 0xE0121:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-50");
				break;
			case 0xE0122:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-51");
				break;
			case 0xE0123:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-52");
				break;
			case 0xE0124:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-53");
				break;
			case 0xE0125:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-54");
				break;
			case 0xE0126:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-55");
				break;
			case 0xE0127:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-56");
				break;
			case 0xE0128:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-57");
				break;
			case 0xE0129:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-58");
				break;
			case 0xE012A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-59");
				break;
			case 0xE012B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-60");
				break;
			case 0xE012C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-61");
				break;
			case 0xE012D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-62");
				break;
			case 0xE012E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-63");
				break;
			case 0xE012F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-64");
				break;
			case 0xE0130:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-65");
				break;
			case 0xE0131:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-66");
				break;
			case 0xE0132:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-67");
				break;
			case 0xE0133:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-68");
				break;
			case 0xE0134:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-69");
				break;
			case 0xE0135:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-70");
				break;
			case 0xE0136:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-71");
				break;
			case 0xE0137:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-72");
				break;
			case 0xE0138:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-73");
				break;
			case 0xE0139:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-74");
				break;
			case 0xE013A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-75");
				break;
			case 0xE013B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-76");
				break;
			case 0xE013C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-77");
				break;
			case 0xE013D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-78");
				break;
			case 0xE013E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-79");
				break;
			case 0xE013F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-80");
				break;
			case 0xE0140:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-81");
				break;
			case 0xE0141:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-82");
				break;
			case 0xE0142:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-83");
				break;
			case 0xE0143:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-84");
				break;
			case 0xE0144:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-85");
				break;
			case 0xE0145:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-86");
				break;
			case 0xE0146:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-87");
				break;
			case 0xE0147:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-88");
				break;
			case 0xE0148:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-89");
				break;
			case 0xE0149:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-90");
				break;
			case 0xE014A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-91");
				break;
			case 0xE014B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-92");
				break;
			case 0xE014C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-93");
				break;
			case 0xE014D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-94");
				break;
			case 0xE014E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-95");
				break;
			case 0xE014F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-96");
				break;
			case 0xE0150:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-97");
				break;
			case 0xE0151:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-98");
				break;
			case 0xE0152:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-99");
				break;
			case 0xE0153:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-100");
				break;
			case 0xE0154:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-101");
				break;
			case 0xE0155:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-102");
				break;
			case 0xE0156:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-103");
				break;
			case 0xE0157:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-104");
				break;
			case 0xE0158:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-105");
				break;
			case 0xE0159:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-106");
				break;
			case 0xE015A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-107");
				break;
			case 0xE015B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-108");
				break;
			case 0xE015C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-109");
				break;
			case 0xE015D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-110");
				break;
			case 0xE015E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-111");
				break;
			case 0xE015F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-112");
				break;
			case 0xE0160:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-113");
				break;
			case 0xE0161:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-114");
				break;
			case 0xE0162:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-115");
				break;
			case 0xE0163:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-116");
				break;
			case 0xE0164:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-117");
				break;
			case 0xE0165:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-118");
				break;
			case 0xE0166:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-119");
				break;
			case 0xE0167:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-120");
				break;
			case 0xE0168:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-121");
				break;
			case 0xE0169:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-122");
				break;
			case 0xE016A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-123");
				break;
			case 0xE016B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-124");
				break;
			case 0xE016C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-125");
				break;
			case 0xE016D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-126");
				break;
			case 0xE016E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-127");
				break;
			case 0xE016F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-128");
				break;
			case 0xE0170:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-129");
				break;
			case 0xE0171:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-130");
				break;
			case 0xE0172:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-131");
				break;
			case 0xE0173:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-132");
				break;
			case 0xE0174:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-133");
				break;
			case 0xE0175:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-134");
				break;
			case 0xE0176:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-135");
				break;
			case 0xE0177:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-136");
				break;
			case 0xE0178:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-137");
				break;
			case 0xE0179:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-138");
				break;
			case 0xE017A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-139");
				break;
			case 0xE017B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-140");
				break;
			case 0xE017C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-141");
				break;
			case 0xE017D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-142");
				break;
			case 0xE017E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-143");
				break;
			case 0xE017F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-144");
				break;
			case 0xE0180:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-145");
				break;
			case 0xE0181:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-146");
				break;
			case 0xE0182:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-147");
				break;
			case 0xE0183:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-148");
				break;
			case 0xE0184:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-149");
				break;
			case 0xE0185:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-150");
				break;
			case 0xE0186:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-151");
				break;
			case 0xE0187:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-152");
				break;
			case 0xE0188:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-153");
				break;
			case 0xE0189:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-154");
				break;
			case 0xE018A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-155");
				break;
			case 0xE018B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-156");
				break;
			case 0xE018C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-157");
				break;
			case 0xE018D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-158");
				break;
			case 0xE018E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-159");
				break;
			case 0xE018F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-160");
				break;
			case 0xE0190:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-161");
				break;
			case 0xE0191:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-162");
				break;
			case 0xE0192:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-163");
				break;
			case 0xE0193:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-164");
				break;
			case 0xE0194:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-165");
				break;
			case 0xE0195:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-166");
				break;
			case 0xE0196:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-167");
				break;
			case 0xE0197:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-168");
				break;
			case 0xE0198:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-169");
				break;
			case 0xE0199:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-170");
				break;
			case 0xE019A:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-171");
				break;
			case 0xE019B:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-172");
				break;
			case 0xE019C:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-173");
				break;
			case 0xE019D:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-174");
				break;
			case 0xE019E:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-175");
				break;
			case 0xE019F:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-176");
				break;
			case 0xE01A0:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-177");
				break;
			case 0xE01A1:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-178");
				break;
			case 0xE01A2:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-179");
				break;
			case 0xE01A3:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-180");
				break;
			case 0xE01A4:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-181");
				break;
			case 0xE01A5:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-182");
				break;
			case 0xE01A6:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-183");
				break;
			case 0xE01A7:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-184");
				break;
			case 0xE01A8:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-185");
				break;
			case 0xE01A9:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-186");
				break;
			case 0xE01AA:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-187");
				break;
			case 0xE01AB:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-188");
				break;
			case 0xE01AC:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-189");
				break;
			case 0xE01AD:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-190");
				break;
			case 0xE01AE:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-191");
				break;
			case 0xE01AF:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-192");
				break;
			case 0xE01B0:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-193");
				break;
			case 0xE01B1:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-194");
				break;
			case 0xE01B2:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-195");
				break;
			case 0xE01B3:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-196");
				break;
			case 0xE01B4:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-197");
				break;
			case 0xE01B5:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-198");
				break;
			case 0xE01B6:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-199");
				break;
			case 0xE01B7:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-200");
				break;
			case 0xE01B8:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-201");
				break;
			case 0xE01B9:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-202");
				break;
			case 0xE01BA:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-203");
				break;
			case 0xE01BB:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-204");
				break;
			case 0xE01BC:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-205");
				break;
			case 0xE01BD:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-206");
				break;
			case 0xE01BE:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-207");
				break;
			case 0xE01BF:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-208");
				break;
			case 0xE01C0:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-209");
				break;
			case 0xE01C1:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-210");
				break;
			case 0xE01C2:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-211");
				break;
			case 0xE01C3:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-212");
				break;
			case 0xE01C4:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-213");
				break;
			case 0xE01C5:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-214");
				break;
			case 0xE01C6:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-215");
				break;
			case 0xE01C7:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-216");
				break;
			case 0xE01C8:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-217");
				break;
			case 0xE01C9:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-218");
				break;
			case 0xE01CA:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-219");
				break;
			case 0xE01CB:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-220");
				break;
			case 0xE01CC:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-221");
				break;
			case 0xE01CD:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-222");
				break;
			case 0xE01CE:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-223");
				break;
			case 0xE01CF:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-224");
				break;
			case 0xE01D0:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-225");
				break;
			case 0xE01D1:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-226");
				break;
			case 0xE01D2:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-227");
				break;
			case 0xE01D3:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-228");
				break;
			case 0xE01D4:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-229");
				break;
			case 0xE01D5:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-230");
				break;
			case 0xE01D6:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-231");
				break;
			case 0xE01D7:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-232");
				break;
			case 0xE01D8:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-233");
				break;
			case 0xE01D9:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-234");
				break;
			case 0xE01DA:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-235");
				break;
			case 0xE01DB:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-236");
				break;
			case 0xE01DC:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-237");
				break;
			case 0xE01DD:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-238");
				break;
			case 0xE01DE:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-239");
				break;
			case 0xE01DF:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-240");
				break;
			case 0xE01E0:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-241");
				break;
			case 0xE01E1:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-242");
				break;
			case 0xE01E2:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-243");
				break;
			case 0xE01E3:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-244");
				break;
			case 0xE01E4:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-245");
				break;
			case 0xE01E5:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-246");
				break;
			case 0xE01E6:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-247");
				break;
			case 0xE01E7:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-248");
				break;
			case 0xE01E8:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-249");
				break;
			case 0xE01E9:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-250");
				break;
			case 0xE01EA:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-251");
				break;
			case 0xE01EB:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-252");
				break;
			case 0xE01EC:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-253");
				break;
			case 0xE01ED:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-254");
				break;
			case 0xE01EE:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-255");
				break;
			case 0xE01EF:
				strcpy_s(buf, buf_size, "VARIATION SELECTOR-256");
				break;
			case 0xF0000:
				strcpy_s(buf, buf_size, "<Plane 15 Private Use, First>");
				break;
			case 0xFFFFD:
				strcpy_s(buf, buf_size, "<Plane 15 Private Use, Last>");
				break;
			case 0x100000:
				strcpy_s(buf, buf_size, "<Plane 16 Private Use, First>");
				break;
			case 0x10FFFD:
				strcpy_s(buf, buf_size, "<Plane 16 Private Use, Last>");
				break;

			default: // not defined
				return 0;
			}

			return (NameLen_t)strlen(buf);
		}
	}
}
